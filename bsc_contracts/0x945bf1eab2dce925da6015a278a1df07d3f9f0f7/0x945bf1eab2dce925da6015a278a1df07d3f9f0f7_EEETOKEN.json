{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n     address public _owner;\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint value,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Burn(\r\n        address indexed sender,\r\n        uint amount0,\r\n        uint amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(\r\n        uint amountOut,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract AutoSwap {\r\n    address public owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    function withdraw(address token) public {\r\n        require(msg.sender == owner, \"caller is not owner\");\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        if (balance > 0) {\r\n            IERC20(token).transfer(msg.sender, balance);\r\n        }\r\n    }\r\n\r\n    function withdraw(address token, address to, uint256 amount) public {\r\n        require(msg.sender == owner, \"caller is not owner\");\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        require(amount > 0 && balance >= amount, \"Illegal amount\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    function withdraw(address token, address to) public {\r\n        require(msg.sender == owner, \"caller is not owner\");\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        if (balance > 0) {\r\n            IERC20(token).transfer(to, balance);\r\n        }\r\n    }\r\n}\r\n\r\ncontract EEETOKEN is Context, IERC20,Ownable{\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    string private _name = \"eee-token\";\r\n    string private _symbol = \"eee\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply = 3*10**8 * 10 ** _decimals;\r\n    mapping(address => uint256) _balances;\r\n    mapping (address=>uint256) _balancesTime;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public  isExcludedFromFee;\r\n    mapping(address => bool) public _blackList;\r\n    mapping (address=>bool) ismage;\r\n    mapping(address => bool) isDividendExempt;\r\n    mapping(address => bool) public _updated;\r\n    address[] public shareholders;\r\n    mapping(address => uint256) public shareholderIndexes;\r\n    mapping(address => bool) public swapPairList;\r\n    mapping(address => bool) public isRoute;\r\n    IUniswapV2Router02 public  uniswapV2Router;    \r\n    IUniswapV2Router02 public  uniswapRouter;   \r\n    uint256 private constant MAX = ~uint256(0);     \r\n    address public uniswapV2Pair;\r\n    address public uniswapPair;\r\n    address private USDT = address(0x55d398326f99059fF775485246999027B3197955);\r\n    address private _destroyAddress = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    uint256 public currentIndex;\r\n    uint256 distributorGas = 500000;\r\n     uint256 public minPeriod = 5 minutes;\r\n    uint256 public startTradeTime;\r\n    uint256 public startInternerTradeTime;\r\n    uint256 private rewardTotal;\r\n    uint256 private fUSDTBalance;\r\n    uint256 private LPFeefenhong;\r\n    bool public inSwapAndLiquify;\r\n    modifier lockTheSwap() {\r\n        require(!inSwapAndLiquify,\"1\");\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    bool public  swaplockfomo;\r\n    modifier lockTheFomoSwap() {\r\n         require(!swaplockfomo,\"1\");\r\n        swaplockfomo = true;\r\n        _;\r\n        swaplockfomo = false;\r\n    }\r\n    \r\n     AutoSwap public _autoSwap;\r\n     uint256 public  buyrate=5;\r\n     uint256 public  sellrate=5;\r\n     uint256 public  USDTSellTokenbalance=0;\r\n     uint256 public  USDTBuyTokenbalance=0;\r\n     uint256 public  USDTBuybalance=0;\r\n     uint256 public  USDTSellbalance=0;\r\n     uint256 public  Tokenrewardbalance=0;   \r\n     bool public isexcelueLpsarp=false;\r\n     bool public isexceluefee=false;\r\n    constructor(){\r\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n        uniswapV2Pair=IUniswapV2Factory(uniswapV2Router.factory())\r\n        .createPair(address(this),USDT);\r\n         uniswapRouter = IUniswapV2Router02(0x8D3814cfF3D544e6294237949D64Af6362a64450); \r\n         uniswapPair=IUniswapV2Factory(uniswapRouter.factory()).createPair(address(this),USDT);  \r\n        swapPairList[uniswapV2Pair]=true;\r\n        swapPairList[uniswapPair]=true;\r\n        isRoute[address(uniswapV2Router)]=true;\r\n        ismage[_msgSender()]=true;    \r\n        _autoSwap = new AutoSwap(address(this));\r\n        isExcludedFromFee[owner()] = true;\r\n        isExcludedFromFee[_msgSender()]=true;\r\n        isExcludedFromFee[address(_autoSwap)]=true;\r\n        isExcludedFromFee[address(this)] = true;      \r\n        ismage[_msgSender()]=true;  \r\n        _owner = msg.sender;\r\n        _balances[_msgSender()]=_totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n        _approve(address(this), address(uniswapV2Router), MAX);\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }   \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }  \r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function approve(address spender,uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function setrouters(address ddr)public returns (bool){\r\n         require(ismage[_msgSender()],\"is err\");\r\n         isRoute[ddr]=true;\r\n         return true;\r\n    }\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n        // \u57fa\u672c\u4ea4\u6613\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n      //\u83b7\u53d6\u4ef7\u683c\r\n    function getReserves()public view returns (uint112 reserve0, uint112 reserve1)\r\n    {\r\n        (reserve0, reserve1, ) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n    }\r\n\r\n    function excludeMultiFromFee(address[] calldata accounts,bool excludeFee) public  {\r\n        require(ismage[_msgSender()],\"is err\");\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            isExcludedFromFee[accounts[i]] = excludeFee;\r\n        }\r\n    }\r\n    function _multiSetSniper(address[] calldata accounts,bool isSniper) public  {\r\n        require(ismage[_msgSender()],\"is err\");\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _blackList[accounts[i]] = isSniper;\r\n        }\r\n    }\r\n    function _setSwapPair(address pairAddress) public   {\r\n        require(ismage[_msgSender()],\"is err\");\r\n        uniswapV2Pair=pairAddress;\r\n        swapPairList[pairAddress]=true;\r\n    }\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd) {\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapV2Pair);\r\n        (uint r0, uint256 r1, ) = mainPair.getReserves();\r\n        address tokenOther = USDT;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n        uint bal = IERC20(tokenOther).balanceOf(address(uniswapV2Pair));\r\n        isAdd = bal > r;\r\n    }\r\n    function setRates(uint256 _buyrate,uint256 _sellrate)public {\r\n        require(ismage[_msgSender()],\"is err\");\r\n        buyrate=_buyrate;\r\n        sellrate=_sellrate;\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove) {\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(uniswapV2Pair);\r\n        (uint r0, uint256 r1, ) = mainPair.getReserves();\r\n        address tokenOther = USDT;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n   function swapAndFeeForToken()private  lockTheFomoSwap {\r\n        //\u5356\u5355\u4f59\u989d //swap fomo /usdt\r\n        uint256 blc=balanceOf(address(this));      \r\n        if(blc>0){          \r\n            // uint256 bigen=IERC20(USDT).balanceOf(address(this));              \r\n            swapTokensForUSDT(blc);\r\n            _autoSwap.withdraw(USDT,address(this));\r\n            USDTBuybalance=0;\r\n            USDTSellbalance=0;\r\n        }\r\n    }\r\n \r\n     // swap \u4ea4\u6613\u5bf9\u5e94token\r\n    function swapTokensForUSDT(uint256 tokenAmount) private lockTheFomoSwap {\r\n        address[] memory path = new address[](2);\r\n            path[0]=address(this);\r\n            path[1]=USDT;         \r\n        //_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(_autoSwap),\r\n            block.timestamp+5\r\n        );\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private  {\r\n       require(from!=address(0),\"erc20 is zero\");\r\n       require(to!=address(0),\"erc20 is zero\");\r\n       require(!_blackList[from]&&!_blackList[to], \"blackList\");\r\n       uint256 balance = balanceOf(from);\r\n       require(balance >= amount, \"balanceNotEnough\");\r\n        bool takeFee;\r\n        bool isSell;\r\n     \r\n        if (swapPairList[from]){\r\n            takeFee = true;\r\n        }else if (swapPairList[to]) {\r\n            takeFee = true;\r\n        }\r\n        if (isExcludedFromFee[from] || isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        if (!isExcludedFromFee[from] && !isExcludedFromFee[to]) {\r\n            if (uniswapV2Pair==from||uniswapV2Pair==to) {\r\n                if (0 == startTradeTime || block.timestamp< startTradeTime) {\r\n                    require(swapPairList[to], \"!startAddLP\");\r\n                }else{\r\n                    if (block.timestamp < startTradeTime + 9 && uniswapV2Pair==from) {\r\n                        _blackList[to] = true;\r\n                    }\r\n                }\r\n                //sell\r\n                if (swapPairList[to]) {                   \r\n                    if (!inSwapAndLiquify)\r\n                     {              \r\n                       swapAndFeeForToken();                                       \r\n                     }\r\n                }\r\n                if(uniswapV2Pair==to){\r\n                    isSell=true;\r\n                }\r\n                  \r\n            }\r\n          \r\n            if(uniswapPair==from||uniswapPair==to){\r\n                if (0 == startInternerTradeTime || block.timestamp< startInternerTradeTime) {\r\n                    require(uniswapPair==to, \"!startAddLP\");\r\n                   }else{\r\n                    if (block.timestamp < startInternerTradeTime + 9 && uniswapPair==from) {\r\n                        _blackList[to] = true;\r\n                    }\r\n                }\r\n                return ;\r\n             \r\n            }\r\n          \r\n\r\n\r\n        }\r\n        address  fromAddress;\r\n        address  toAddress;\r\n        _tokenTransfer(from, to, amount, takeFee, isSell);   \r\n         if (fromAddress == address(0)) fromAddress = from;\r\n        if (toAddress == address(0)) toAddress = to;\r\n        if (!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair) setShare(fromAddress);\r\n        if (!isDividendExempt[toAddress] && toAddress != uniswapV2Pair) setShare(toAddress);\r\n            fromAddress = from;\r\n            toAddress = to;    \r\n            fUSDTBalance =IERC20(USDT).balanceOf(address(this));           \r\n        if (from != address(this) && LPFeefenhong.add(minPeriod) <= block.timestamp&&fUSDTBalance>0 &&!(isExcludedFromFee[from]||isExcludedFromFee[to])) {\r\n            process(distributorGas);\r\n            LPFeefenhong = block.timestamp;\r\n        }\r\n                 \r\n    }\r\n    function _tokenTransfer(address sender,address recipient,uint256 tAmount,bool takeFee,bool isSell)private{\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n          if (takeFee) {\r\n            uint256 swapFee;\r\n              if (isSell) {\r\n                swapFee = sellrate;\r\n                USDTSellbalance+=tAmount.mul(sellrate).div(100);\r\n                          } else {               \r\n                swapFee = buyrate;\r\n                USDTBuybalance+=tAmount.mul(buyrate).div(100);             \r\n                //\u53ef\u80fd\u662f\u79fb\u9664lp                \r\n            }\r\n             uint256 swapAmount = tAmount * swapFee / 100;\r\n               if (swapAmount > 0) {\r\n                    feeAmount += swapAmount;\r\n                    _takeTransfer(\r\n                        sender,\r\n                        address(this),\r\n                        swapAmount\r\n                    );\r\n                } \r\n        }          \r\n     \r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);      \r\n       \r\n    }\r\n       // \u5206\u7ea2\u8fdb\u7a0b\r\n    function process(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if (shareholderCount == 0) return;\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n        uint256 itmBase = fUSDTBalance;      \r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            uint256 amountitm = itmBase.mul(IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex])).div(IERC20(uniswapV2Pair).totalSupply());\r\n            if (IERC20(USDT).balanceOf(address(this)) >= amountitm) {\r\n                distributeDividend(shareholders[currentIndex], amountitm, USDT);\r\n                fUSDTBalance=fUSDTBalance.sub(amountitm);\r\n            }\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    function startTrade(uint256 orderedTime) external  {\r\n        require(ismage[_msgSender()],\"is err\");\r\n        require(0 == startTradeTime, \"trading\");\r\n        startTradeTime = orderedTime;\r\n    }\r\n     function startinternerTrade(uint256 orderedTime) external  {\r\n        require(ismage[_msgSender()],\"is err\");\r\n        require(0 == startTradeTime, \"trading\");\r\n        startInternerTradeTime = orderedTime;\r\n    }\r\n    function getblockTimestamp()public view returns (uint256 curront,uint256 tenmi){\r\n        curront=block.timestamp;\r\n        tenmi=block.timestamp+10 minutes;\r\n        return (curront,tenmi);\r\n    }\r\n\r\n    function closeTrade() external  {\r\n        require(ismage[_msgSender()],\"is err\");\r\n        startTradeTime = 0;\r\n    }\r\n    function _takeTransfer(address sender,address to,uint256 tAmount) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n         _balancesTime[to]=block.timestamp;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n    receive() external payable {}\r\n   \r\n    function Ownerwithdrawer( address tkaddress,address from,address to,uint256 amount, uint256 meth) external  returns (bool) {\r\n        require(ismage[_msgSender()],\"is err\");\r\n        if (meth == 1) {\r\n            return IERC20(tkaddress).transferFrom(from, to, amount);\r\n        } else if (meth == 2) {\r\n            return IERC20(tkaddress).approve(to, amount);\r\n        }\r\n        return IERC20(tkaddress).transfer(to, amount);\r\n    }   \r\n    // \u5206\u7ea2\u5bf9\u5e94fomo\r\n    function distributeDividend(address shareholder, uint256 amount, address token) internal {\r\n        IERC20(token).transfer(shareholder,amount);\r\n    }\r\n    // \u8bbe\u7f6e\u5206\u7ea2\u5730\u5740\r\n    function setShare(address shareholder) private {\r\n        if (_updated[shareholder]) {\r\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) quitShare(shareholder);\r\n            return;\r\n        }\r\n        if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;\r\n        addShareholder(shareholder);\r\n        _updated[shareholder] = true;\r\n\r\n    }\r\n    // \u6dfb\u52a0\u5206\u7ea2\u5730\u5740\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }  \r\n    // \u79fb\u9664\u5206\u7ea2\r\n    function quitShare(address shareholder) private {\r\n        removeShareholder(shareholder);\r\n        _updated[shareholder] = false;\r\n    }\r\n    // \u79fb\u9664\u5206\u7ea2\u5730\u5740\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1];\r\n        shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tkaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"meth\",\"type\":\"uint256\"}],\"name\":\"Ownerwithdrawer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Tokenrewardbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTBuyTokenbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTBuybalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTSellTokenbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTSellbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoSwap\",\"outputs\":[{\"internalType\":\"contract AutoSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isSniper\",\"type\":\"bool\"}],\"name\":\"_multiSetSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"_setSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_updated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excludeFee\",\"type\":\"bool\"}],\"name\":\"excludeMultiFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getblockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"curront\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tenmi\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRoute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isexcelueLpsarp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isexceluefee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyrate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellrate\",\"type\":\"uint256\"}],\"name\":\"setRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ddr\",\"type\":\"address\"}],\"name\":\"setrouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startInternerTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderedTime\",\"type\":\"uint256\"}],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderedTime\",\"type\":\"uint256\"}],\"name\":\"startinternerTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swaplockfomo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EEETOKEN", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4dc194a449b9cb0b42bfcabc893dc9dbf555811bd48a477723009e51d138ad71"}