{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n\r\n// chain id.\r\nlibrary ChainId {\r\n    function get() internal view returns (uint256 chainId) {\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n    }\r\n}\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n}\r\n\r\n// safe transfer.\r\n// if is contract maybe is error. if account must success.\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        // (bool success,) = to.call.value(value)(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// IERC20.\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// context.\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// owner.\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == owner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n}\r\n\r\n// ReentrancyGuard.\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// Mining\r\ncontract MiningV2 is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    address public payToken;                     // pay token is usdt.\r\n    address public fuelToken;                    // fuel token.\r\n    address public mos;                          // mos token.\r\n    address public eth;                          // eth token.\r\n    address public router;                       // router.\r\n    address public toUsdt;                       // to usdt address.\r\n    address public toMos;                        // to mos address.\r\n    address public toEth;                        // to eth address.\r\n    bool public isSwap = false;                  // is swap mos and eth.\r\n    uint256[3] public swapRatio = [20, 50, 30];  // 0=swap mos, 1=swap eth, 2=keep usdt toUsdtV2. [20, 50, 30].\r\n    address public toUsdtV2;                     // swap time usdt to address.\r\n\r\n    \r\n    // all mining machine.\r\n    mapping(uint256 => MiningMachineMsg) public miningMachine;   // type -> MiningMachine.\r\n    struct MiningMachineMsg {\r\n        uint256 miningMachineType;            // mining machine type.\r\n        uint256 price;                       // price is usdt, pay usdt.\r\n        uint256 earnMul;                     // denominator is 100.\r\n        uint256 count;                       // count number.\r\n        bool isOpen;\r\n    }\r\n    uint256 public miningMachineNextType = 0;   // next type.\r\n\r\n    // account all mining machine.\r\n    mapping(address => uint256[]) public accountOrders;                        // account orders.\r\n    mapping(uint256 => OrderMiningMachineMsg) public orderMiningMachine;       // order -> MiningMachine.\r\n    struct OrderMiningMachineMsg {\r\n        uint256 miningMachineType;           // mining machine type.\r\n        uint256 order;                       // order.\r\n        uint256 price;                       // price is usdt, pay usdt.\r\n        uint256 earnMul;                     // denominator is 100.\r\n        uint256 buyTime;                     // buy time.\r\n        address account;                     // order owner.\r\n    }\r\n    uint256 public nextOrderID = 0;  // next order ID.\r\n\r\n    // sign.\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"); // EIP721 domain.\r\n    bytes32 public immutable DOMAIN_SEPARATOR;\r\n    bytes32 public constant RUNLOTTERY_REWARDS_PERMIT_TYPEHASH = keccak256(\"claim(address account,address token,uint256 amount,uint256 rand)\"); // sign function.\r\n    address public signer; // signer.\r\n    mapping(uint256 => bool) public nonceUsed;\r\n\r\n\r\n    constructor(address payToken_, address fuelToken_, address signer_, address mos_, address eth_, address router_) {\r\n        payToken = payToken_;\r\n        fuelToken = fuelToken_;\r\n        signer = signer_;\r\n\r\n        mos = mos_;\r\n        eth = eth_;\r\n        router = router_;\r\n        toUsdt = address(this);\r\n        toMos = address(this);\r\n        toEth = address(this);\r\n        toUsdtV2 = address(this);\r\n\r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(\"Mining\")), ChainId.get(), address(this)));\r\n    }\r\n\r\n\r\n    event AddMiningMachine(uint256 miningMachineType, uint256 price, uint256 earnMul, bool isOpen);\r\n    event ChangeMiningMachine(uint256 miningMachineType, uint256 price, uint256 earnMul, bool isOpen);\r\n    event Buy(uint256 miningMachineType, address account, uint256 orderID, uint256 price, uint256 earnMul, uint256 buyTime);\r\n    event Claim(address account, address token, uint256 amount, uint256 rand);\r\n\r\n    \r\n    receive() external payable {}\r\n\r\n    function takeETH(address to, uint256 amount) external onlyOwner {\r\n        require(amount > 0, \"amount can not be 0\");\r\n        require(to != address(0), \"invalid to address\");\r\n        TransferHelper.safeTransferETH(to, amount);\r\n    }\r\n\r\n    function takeToken(address token, address to, uint256 amount) external onlyOwner {\r\n        require(to != address(0), \"invalid to address\");\r\n        require(isContract(token), \"token not contract\");\r\n        TransferHelper.safeTransfer(token, to, amount);\r\n    }\r\n\r\n    // set pay token.\r\n    function setPayToken(address newPayToken) external onlyOwner {\r\n        require(newPayToken != address(0), \"invalid to address\");\r\n        payToken = newPayToken;\r\n    }\r\n\r\n    // set fuel token.\r\n    function setFuelToken(address newFuelToken) external onlyOwner {\r\n        require(newFuelToken != address(0), \"invalid to address\");\r\n        fuelToken = newFuelToken;\r\n    }\r\n\r\n    // set signer.\r\n    function setSigner(address newSigner) external onlyOwner {\r\n        require(newSigner != address(0), \"invalid to address\");\r\n        signer = newSigner;\r\n    }\r\n\r\n    // set mos.\r\n    function setMos(address newMos) external onlyOwner {\r\n        require(newMos != address(0), \"invalid to address\");\r\n        mos = newMos;\r\n    }\r\n\r\n    // set eth.\r\n    function setEth(address newEth) external onlyOwner {\r\n        require(newEth != address(0), \"invalid to address\");\r\n        eth = newEth;\r\n    }\r\n\r\n    // set router.\r\n    function setRouter(address newRouter) external onlyOwner {\r\n        require(newRouter != address(0), \"invalid to address\");\r\n        router = newRouter;\r\n    }\r\n\r\n    // set toUsdt.\r\n    function setToUsdt(address newToUsdt) external onlyOwner {\r\n        require(newToUsdt != address(0), \"invalid to address\");\r\n        toUsdt = newToUsdt;\r\n    }\r\n\r\n    // set toMos.\r\n    function setToMos(address newToMos) external onlyOwner {\r\n        require(newToMos != address(0), \"invalid to address\");\r\n        toMos = newToMos;\r\n    }\r\n\r\n    // set toEth.\r\n    function setToEth(address newToEth) external onlyOwner {\r\n        require(newToEth != address(0), \"invalid to address\");\r\n        toEth = newToEth;\r\n    }\r\n\r\n    // set swapRatio.\r\n    function setSwapRatio(uint256[3] memory newSwapRatio) external onlyOwner {\r\n        uint256 _total = newSwapRatio[0] + newSwapRatio[1] + newSwapRatio[2];\r\n        require(_total == 100, \"not eq 100\");\r\n        swapRatio = newSwapRatio;\r\n    }\r\n\r\n    // set toUsdtV2.\r\n    function setToUsdtV2(address newToUsdtV2) external onlyOwner {\r\n        require(newToUsdtV2 != address(0), \"invalid to address\");\r\n        toUsdtV2 = newToUsdtV2;\r\n    }\r\n\r\n    // set isSwap.\r\n    function setIsSwap(bool newIsSwap) external onlyOwner {\r\n        isSwap = newIsSwap;\r\n    }\r\n\r\n    // set nonce used.\r\n    function setNonceUsed(uint256 _nonce, bool _status) external onlyOwner {\r\n        require(_nonce != 0, \"invalid number\");\r\n        nonceUsed[_nonce] = _status;\r\n    }\r\n\r\n    // add MiningMachine.\r\n    function addMiningMachine(uint256 _price, uint256 _earnMul, bool _isOpen) external onlyOwner {\r\n        miningMachineNextType++;\r\n        miningMachine[miningMachineNextType] = MiningMachineMsg({\r\n            price: _price,\r\n            miningMachineType: miningMachineNextType,\r\n            earnMul: _earnMul,\r\n            count: 0,\r\n            isOpen: _isOpen\r\n        });\r\n        emit AddMiningMachine(miningMachineNextType, _price, _earnMul, _isOpen);\r\n    }\r\n\r\n    // change MiningMachine.\r\n    function changeMiningMachine(uint256 _miningMachineType, uint256 _price, uint256 _earnMul, bool _isOpen) external onlyOwner {\r\n        MiningMachineMsg storage _MiningMachineMsg = miningMachine[_miningMachineType];\r\n        _MiningMachineMsg.price = _price;\r\n        _MiningMachineMsg.earnMul = _earnMul;\r\n        _MiningMachineMsg.isOpen = _isOpen;\r\n\r\n        emit ChangeMiningMachine(_miningMachineType, _price, _earnMul, _isOpen);\r\n    }\r\n\r\n    // get all MiningMachine.\r\n    function getAllMiningMachine() external view returns(MiningMachineMsg[] memory) {\r\n        uint256 count = miningMachineNextType;\r\n        MiningMachineMsg[] memory _MiningMachines = new MiningMachineMsg[](count);\r\n\r\n        for(uint256 i = 1; i <= count; i++) {\r\n            _MiningMachines[i-1] = miningMachine[i];\r\n        }\r\n        return _MiningMachines;\r\n    }\r\n\r\n    // _buy.\r\n    function _buy(uint256 _miningMachineType, address _account) private returns(uint256) {\r\n        MiningMachineMsg storage _MiningMachineMsg = miningMachine[_miningMachineType];\r\n        _MiningMachineMsg.count++;\r\n        require(_MiningMachineMsg.isOpen, \"not open\");\r\n        require(!isContract(_account), \"is contract error\");\r\n\r\n        nextOrderID++;\r\n        accountOrders[_account].push(nextOrderID);\r\n        orderMiningMachine[nextOrderID] = OrderMiningMachineMsg({\r\n            miningMachineType: _miningMachineType,\r\n            order: nextOrderID,\r\n            price: _MiningMachineMsg.price,\r\n            earnMul: _MiningMachineMsg.earnMul,\r\n            buyTime: block.timestamp,\r\n            account: _account\r\n        });\r\n        emit Buy(_miningMachineType, _account, nextOrderID, _MiningMachineMsg.price, _MiningMachineMsg.earnMul, block.timestamp);\r\n        return nextOrderID;\r\n    }\r\n\r\n    // _swap mos and eth.\r\n    function _usdtSwapMosAndEth(uint256 _usdtAmount) private {\r\n        require(_usdtAmount > 0, \"zero error\");\r\n        uint256 _usdtUseMos = _usdtAmount.mul(swapRatio[0]).div(100);\r\n        uint256 _usdtUseEth = _usdtAmount.mul(swapRatio[1]).div(100);\r\n        uint256 _usdtUseUsdt = _usdtAmount.mul(swapRatio[2]).div(100);\r\n\r\n        // swap mos.\r\n        address[] memory _path1 = new address[](2);\r\n        _path1[0] = payToken;\r\n        _path1[1] = mos;\r\n        TransferHelper.safeApprove(payToken, router, _usdtUseMos);\r\n        IUniswapV2Router02(router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _usdtUseMos,\r\n            0,\r\n            _path1,\r\n            toMos,\r\n            block.timestamp);\r\n        \r\n        // swap eth.\r\n        address[] memory _path2 = new address[](2);\r\n        _path2[0] = payToken;\r\n        _path2[1] = eth;\r\n        TransferHelper.safeApprove(payToken, router, _usdtUseEth);\r\n        IUniswapV2Router02(router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _usdtUseEth,\r\n            0,\r\n            _path2,\r\n            toEth,\r\n            block.timestamp);\r\n\r\n        // to usdt.\r\n        require(isContract(payToken), \"token not contract\");\r\n        TransferHelper.safeTransfer(payToken, toUsdtV2, _usdtUseUsdt);\r\n    }\r\n\r\n    // buy.\r\n    function buy(uint256 _miningMachineType) external nonReentrant returns(uint256) {\r\n        address _account = msg.sender;\r\n        require(isContract(payToken), \"token not contract\");\r\n        uint256 _usdtAmount = miningMachine[_miningMachineType].price;\r\n        TransferHelper.safeTransferFrom(payToken, _account, toUsdt, _usdtAmount);  // pay token.\r\n        // is swap\r\n        if(isSwap) {\r\n            _usdtSwapMosAndEth(_usdtAmount);\r\n        }\r\n\r\n        return _buy(_miningMachineType, _account);\r\n    }\r\n\r\n    // add buy.\r\n    function addBuy(uint256 _miningMachineType, address _account) external onlyOwner returns(uint256) {\r\n        return _buy(_miningMachineType, _account);\r\n    }\r\n\r\n    // get account orderIDs\r\n    function getAccountOrders(address account) external view returns(uint256[] memory) {\r\n        return accountOrders[account];\r\n    }\r\n\r\n    // get account all orders msg\r\n    function getAccountAllOrdersMsg(address account) external view returns(OrderMiningMachineMsg[] memory) {\r\n        uint256[] memory orders = accountOrders[account];\r\n        uint256 count = orders.length;\r\n        OrderMiningMachineMsg[] memory _OrderMiningMachineMsg = new OrderMiningMachineMsg[](count);\r\n\r\n        for(uint256 i = 0; i < count; i++) {\r\n            uint256 _order = orders[i];\r\n            _OrderMiningMachineMsg[i] = orderMiningMachine[_order];\r\n        }\r\n        return _OrderMiningMachineMsg;\r\n    } \r\n\r\n    // claim, take earn. \r\n    function claim(address account,address token,uint256 amount,uint256 rand,uint8 v,bytes32 r,bytes32 s) external nonReentrant {\r\n        address signatory = signVerify(account,token,amount,rand,v,r,s);\r\n        require(signatory != address(0), \"invalid signature\");\r\n        require(signatory == signer, \"invalid signature signer\");\r\n        require(!nonceUsed[rand], \"rand used\");\r\n        nonceUsed[rand] = true;\r\n        \r\n        // transfer.\r\n        require(msg.sender == account, \"not your\");\r\n        require(!isContract(account), \"is contract error\");\r\n        require(isContract(fuelToken), \"token not contract 1\");\r\n        require(isContract(token), \"token not contract 2\");\r\n        TransferHelper.safeTransferFrom(fuelToken, account, address(this), amount); // pay fuel.\r\n        TransferHelper.safeTransfer(token, account, amount);\r\n\r\n        emit Claim(account, token, amount, rand);\r\n    }\r\n\r\n    // sign verify.\r\n    function signVerify(address account,address token,uint256 amount,uint256 rand,uint8 v,bytes32 r,bytes32 s) public view returns(address) {\r\n        bytes32 structHash = keccak256(abi.encode(RUNLOTTERY_REWARDS_PERMIT_TYPEHASH,account,token,amount,rand));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\",DOMAIN_SEPARATOR,structHash));\r\n        address signatory = ecrecover(digest,v,r,s);\r\n        return signatory;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fuelToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mos_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"eth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"miningMachineType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnMul\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"AddMiningMachine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"miningMachineType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnMul\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTime\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"miningMachineType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnMul\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"ChangeMiningMachine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rand\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RUNLOTTERY_REWARDS_PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_miningMachineType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earnMul\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"addMiningMachine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_miningMachineType\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_miningMachineType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earnMul\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"changeMiningMachine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rand\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fuelToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountAllOrdersMsg\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"miningMachineType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"internalType\":\"struct MiningV2.OrderMiningMachineMsg[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMiningMachine\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"miningMachineType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"internalType\":\"struct MiningV2.MiningMachineMsg[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"miningMachine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"miningMachineType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningMachineNextType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOrderID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonceUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderMiningMachine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"miningMachineType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newEth\",\"type\":\"address\"}],\"name\":\"setEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFuelToken\",\"type\":\"address\"}],\"name\":\"setFuelToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newIsSwap\",\"type\":\"bool\"}],\"name\":\"setIsSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMos\",\"type\":\"address\"}],\"name\":\"setMos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setNonceUsed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPayToken\",\"type\":\"address\"}],\"name\":\"setPayToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"newSwapRatio\",\"type\":\"uint256[3]\"}],\"name\":\"setSwapRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToEth\",\"type\":\"address\"}],\"name\":\"setToEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToMos\",\"type\":\"address\"}],\"name\":\"setToMos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToUsdt\",\"type\":\"address\"}],\"name\":\"setToUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToUsdtV2\",\"type\":\"address\"}],\"name\":\"setToUsdtV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rand\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"signVerify\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toUsdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toUsdtV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MiningV2", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000004382c48bb3952cb1645d3af7f1b93f0666bfbedb0000000000000000000000002813ee1d603937916eb307c4bc87d2162ede14aa000000000000000000000000762b0f0fdaa605a24893ce80081ff4e8dbba58b00000000000000000000000002170ed0880ac9a755fd29b2688956bd959f933f800000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d02c2acbd7339b0de507cd8a5cfa76ef082d05a06b1d8b12160ff209789f02bc"}