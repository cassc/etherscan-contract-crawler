{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set & change owner\r\n */\r\ncontract Owner {\r\n\r\n    address private owner;\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier isOwner() {\r\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use 'require' to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) external isOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract ERC20 {\r\n    function decimals() external virtual view returns (uint8 decimals_);\r\n    function transferFrom(address _from, address _to, uint256 _value) external virtual returns (bool success);\r\n    function transfer(address _to, uint256 _value) external virtual returns (bool success);\r\n    function allowance(address _owner, address _spender) external virtual view returns (uint256 remaining);\r\n    function balanceOf(address _owner) external virtual view returns (uint256 balance);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        ERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        ERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * Stakes Almond v.3\r\n *\r\n * Stakes is an interest gain contract for ERC-20 tokens\r\n * \r\n * asset is the ERC20 token to deposit\r\n * asset2 is the ERC20 token to get interest\r\n * interest_rate: percentage rate of token1\r\n * interest_rate2: percentage rate of token2\r\n * maturity is the time in seconds after which is safe to end the stake\r\n * penalization for ending a stake before maturity time\r\n * lower_amount is the minimum amount for creating a stake\r\n * \r\n */\r\ncontract StakesAlmond is Owner, ReentrancyGuard {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    // token to deposit\r\n    ERC20 public asset;\r\n\r\n    // token to pay interest\r\n    ERC20 public asset2;\r\n\r\n    // stakes history\r\n    struct Record {\r\n        uint256 from;\r\n        uint256 amount;\r\n        uint256 gain;\r\n        uint256 gain2;\r\n        uint256 penalization;\r\n        uint256 to;\r\n        bool ended;\r\n    }\r\n\r\n    // contract parameters\r\n    uint16 public interest_rate;\r\n    uint16 public interest_rate2;\r\n    uint256 public maturity;\r\n    uint8 public penalization;\r\n    uint256 public lower_amount;\r\n\r\n    // conversion ratio for token1 and token2\r\n    // 1:10 ratio will be: \r\n    // ratio1 = 1 \r\n    // ratio2 = 10\r\n    uint256 public ratio1;\r\n    uint256 public ratio2;\r\n\r\n    mapping(address => Record[]) public ledger;\r\n\r\n    event StakeStart(address indexed user, uint256 value, uint256 index);\r\n    event StakeEnd(address indexed user, uint256 value, uint256 penalty, uint256 interest, uint256 index);\r\n    \r\n    event ChangeRatio1(uint256 newRatio);\r\n    event ChangeRatio2(uint256 newRatio);\r\n\r\n    constructor(\r\n        ERC20 _erc20, ERC20 _erc20_2, address _owner, uint16 _rate, uint16 _rate2, uint256 _maturity, \r\n        uint8 _penalization, uint256 _lower, uint256 _ratio1, uint256 _ratio2) Owner(_owner) {\r\n        require(_penalization<=100, \"Penalty has to be an integer between 0 and 100\");\r\n        asset = _erc20;\r\n        asset2 = _erc20_2;\r\n        ratio1 = _ratio1;\r\n        ratio2 = _ratio2;\r\n        interest_rate = _rate;\r\n        interest_rate2 = _rate2;\r\n        maturity = _maturity;\r\n        penalization = _penalization;\r\n        lower_amount = _lower;\r\n    }\r\n    \r\n    function start(uint256 _value) external nonReentrant {\r\n        require(_value >= lower_amount, \"Invalid value\");\r\n        asset.safeTransferFrom(msg.sender, address(this), _value);\r\n        ledger[msg.sender].push(Record(block.timestamp, _value, 0, 0, 0, 0, false));\r\n        emit StakeStart(msg.sender, _value, ledger[msg.sender].length-1);\r\n    }\r\n\r\n    function end(uint256 i) external nonReentrant {\r\n\r\n        require(i < ledger[msg.sender].length, \"Invalid index\");\r\n        require(!ledger[msg.sender][i].ended, \"Invalid stake\");\r\n        \r\n        // penalization\r\n        if(block.timestamp - ledger[msg.sender][i].from < maturity) {\r\n\r\n            uint256 _penalization = ledger[msg.sender][i].amount * penalization / 100;\r\n            ledger[msg.sender][i].penalization = _penalization;\r\n            ledger[msg.sender][i].to = block.timestamp;\r\n            ledger[msg.sender][i].ended = true;\r\n            emit StakeEnd(msg.sender, ledger[msg.sender][i].amount, _penalization, 0, i);\r\n\r\n            asset.safeTransfer(msg.sender, ledger[msg.sender][i].amount - _penalization);\r\n            asset.safeTransfer(getOwner(), _penalization);\r\n\r\n        // interest gained\r\n        } else {\r\n            \r\n            // interest is calculated in asset2\r\n            uint256 _interest = get_gains(msg.sender, i);\r\n\r\n            // check that the owner can pay interest before trying to pay, token 1\r\n            if (asset.allowance(getOwner(), address(this)) < _interest || asset.balanceOf(getOwner()) < _interest) {\r\n                _interest = 0;\r\n            }\r\n\r\n            // interest is calculated in asset2\r\n            uint256 _interest2 = get_gains2(msg.sender, i);\r\n\r\n            // check that the owner can pay interest before trying to pay, token 1\r\n            if (asset2.allowance(getOwner(), address(this)) < _interest2 || asset2.balanceOf(getOwner()) < _interest2) {\r\n                _interest2 = 0;\r\n            }\r\n\r\n            // the original asset is returned to the investor\r\n            ledger[msg.sender][i].gain = _interest;\r\n            ledger[msg.sender][i].gain2 = _interest2;\r\n            ledger[msg.sender][i].to = block.timestamp;\r\n            ledger[msg.sender][i].ended = true;\r\n            emit StakeEnd(msg.sender, ledger[msg.sender][i].amount, 0, _interest, i);\r\n\r\n            asset.safeTransfer(msg.sender, ledger[msg.sender][i].amount);\r\n\r\n            if (_interest > 0) {\r\n                asset.safeTransferFrom(getOwner(), msg.sender, _interest);\r\n            }\r\n\r\n            if (_interest2 > 0) {\r\n                asset2.safeTransferFrom(getOwner(), msg.sender, _interest2);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function set(ERC20 _erc20, ERC20 _erc20_2, uint256 _lower, uint256 _maturity, uint16 _rate, uint16 _rate2, uint8 _penalization, uint256 _ratio1, uint256 _ratio2) external isOwner {\r\n        require(_penalization<=100, \"Invalid value\");\r\n        asset = _erc20;\r\n        asset2 = _erc20_2;\r\n        ratio1 = _ratio1;\r\n        ratio2 = _ratio2;\r\n        lower_amount = _lower;\r\n        maturity = _maturity;\r\n        interest_rate = _rate;\r\n        interest_rate2 = _rate2;\r\n        penalization = _penalization;\r\n\r\n        emit ChangeRatio1(ratio1);\r\n        emit ChangeRatio2(ratio2);\r\n\r\n    }\r\n\r\n    // calculate interest of the token 1 to the current date time\r\n    function get_gains(address _address, uint256 _rec_number) public view returns (uint256) {\r\n        uint256 _record_seconds = block.timestamp - ledger[_address][_rec_number].from;\r\n        uint256 _year_seconds = 365*24*60*60;\r\n        return _record_seconds * \r\n            ledger[_address][_rec_number].amount * interest_rate / 100\r\n        / _year_seconds;\r\n    }\r\n\r\n    // calculate interest to the current date time\r\n    function get_gains2(address _address, uint256 _rec_number) public view returns (uint256) {\r\n        uint256 _record_seconds = block.timestamp - ledger[_address][_rec_number].from;\r\n        uint256 _year_seconds = 365*24*60*60;\r\n        \r\n        /**\r\n         *\r\n         * Oririginal code:\r\n         * \r\n         *   // now we calculate the value of the transforming the staked asset (asset) into the asset2\r\n         *   // first we calculate the ratio\r\n         *   uint256 value_in_asset2 = ledger[_address][_rec_number].amount * ratio2 / ratio1;\r\n         *   // now we transform into decimals of the asset2\r\n         *   value_in_asset2 = value_in_asset2 * 10**asset2.decimals() / 10**asset.decimals();\r\n         *   uint256 interest = _record_seconds * value_in_asset2 * interest_rate2 / 100 / _year_seconds;\r\n         *   // now lets calculate the interest rate based on the converted value in asset 2\r\n         *\r\n         * Simplified into:\r\n         * \r\n         */\r\n\r\n        return (_record_seconds * ledger[_address][_rec_number].amount * ratio2 * 10**asset2.decimals() * interest_rate2) / \r\n               (ratio1 * 10**asset.decimals() * 100 * _year_seconds);\r\n\r\n    }\r\n\r\n    function ledger_length(address _address) external view \r\n        returns (uint256) {\r\n        return ledger[_address].length;\r\n    }\r\n\r\n}", "ABI": "[]", "ContractName": "Address", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3c567ef9953ed34193ba6a87d3ce599ff61b6474abe19bc24d171367944c0f45"}