{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ninterface IToken {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract CombinedContract {\r\n    IToken public token;\r\n    address public owner;\r\n\r\n    event TransferredTokens(address[] recipients, uint256 value);\r\n    event FailedTransfer(address recipient, uint256 value);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _token) {\r\n        token = IToken(_token);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function bulkSend(address[] calldata recipients, uint256 value) external onlyOwner {\r\n        uint256 valueInWei = value * 10**18; \r\n        uint256 totalToSend = valueInWei * recipients.length;\r\n        uint256 contractBalance = token.balanceOf(address(this));\r\n        require(contractBalance >= totalToSend, \"Not enough tokens in contract for the airdrop\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            bool sent = token.transfer(recipients[i], valueInWei);\r\n            if (!sent) {\r\n                emit FailedTransfer(recipients[i], valueInWei);\r\n            }\r\n        }\r\n        emit TransferredTokens(recipients, valueInWei);\r\n    }\r\n\r\n    // Function to withdraw any mistakenly sent BNB\r\n    function withdrawBNB() external onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    // Function to withdraw any mistakenly sent ERC-20 tokens\r\n    function withdrawToken(address _tokenAddress) external onlyOwner {\r\n        IToken _token = IToken(_tokenAddress);\r\n        uint256 balance = _token.balanceOf(address(this));\r\n        _token.transfer(owner, balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferredTokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"bulkSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CombinedContract", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "9000000", "ConstructorArguments": "0000000000000000000000006e64fcf15be3eb71c3d42acf44d85bb119b2d98b", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c3adca83b82ef93daf1b0d242275258bd610e40d8f0a3c066bc3d05257885fce"}