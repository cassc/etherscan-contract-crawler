{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n   \r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()  {\r\n        address msgSender =  msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract  Token is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public isDividendExempt;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _updated;\r\n\r\n    \r\n\r\n    \r\n\r\n\r\n    string public _name ;\r\n    string public _symbol ;\r\n    uint8 public _decimals ;\r\n\r\n\r\n\r\n    uint256 public _burnFee ;\r\n    uint256 private _previousBurnFee;\r\n\r\n\r\n    uint256 public _nftBuyFee ;\r\n    uint256 private _previousNftBuyFee;\r\n\r\n  \r\n\r\n    uint256 public _liquidityFee ;\r\n    uint256 private _previousLiquidityFee;\r\n\r\n    uint256 public _marketingFee ;\r\n    uint256 private _previousMarketingFee;\r\n\r\n\r\n      uint256 public _nftSellFee ;\r\n    uint256 private _previousNftSellFee;\r\n\r\n    uint256 public _fundFee ;\r\n    uint256 private _previousFundFee;   \r\n\r\n\r\n    uint256 public _devFee ;\r\n    uint256 private _previousDevFee;   \r\n\r\n  \r\n\r\n    uint256 public _reliefFundFee ;\r\n    uint256 private _previousReliefFundFee; \r\n    uint256 private _tTotal;\r\n    IUniswapV2Router02 public  uniswapV2Router;\r\n    address public  uniswapV2Pair;\r\n    uint256 public burnEndNumber;\r\n    uint256 public swapTokensAtAmount ;\r\n\r\n    uint256 public _startTimeForSwap;\r\n    uint256 private _intervalSecondsForSwap ;\r\n\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n\r\n    \r\n    uint256 public minLPDividendToken =  1 ether;\r\n\r\n    address public _token = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    uint256 public _nftMarketBalance;\r\n\r\n    address public _nft;\r\n\r\n    // \u5f00\u53d1\u5730\u5740\r\n    address public _devAddr;\r\n    // \u57fa\u91d1\u5730\u5740\r\n    address public _fundAddr;\r\n    // \u8425\u9500\u5730\u5740\r\n    address public  marketAddr;\r\n    address public _router;\r\n\r\n    mapping (uint256 => uint256)  reliefLevsFund;\r\n\r\n    uint[6] public leves = [5,100,1000,10000,10000000000000000000];\r\n\r\n    uint[5] public timeLeves = [600,1800,43200,86400];\r\n    uint[5] public  timeSetLeves = [0,0,0,0];\r\n   // mapping(uint => address[])  public winnerAddrs;\r\n\r\n    struct winnerDetail{\r\n        uint256 winnerTime;\r\n        uint256 winnerAmount;\r\n        address winnerAddr;\r\n    }\r\n\r\n\r\n    winnerDetail[] public  winnerAddrs ;\r\n\r\n\r\n    uint256 public reliefBalance ;\r\n\r\n    mapping(uint => address[]) public levelAddrs;\r\n    mapping (uint256 => uint256) public  reliefLevsFundAmount;\r\n\r\n    mapping(uint256 => uint256) public reliefAmounts;\r\n    mapping(uint256 => uint256) public alreadyReliefAmounts;\r\n\r\n    address public reliefAddr;\r\n    \r\n    constructor(\r\n        )  {\r\n            address adminAddress = 0xD23221BdbBadfe83091dd87012D74Fa2C849e46F;\r\n            _name = \"VPD DAO\";\r\n            _symbol =  \"VDD\";\r\n            _decimals= 18;\r\n            _tTotal = 1000000000* (10**uint256(_decimals));\r\n\r\n            _burnFee = 200; // \u9500\u6bc1 2%\r\n            _marketingFee = 100; // \u8425\u9500 1%\r\n            _nftBuyFee = 100; // \u4e70\u5165 1% NFT\u5206\u7ea2\r\n            _nftSellFee = 700; // \u5356 7% NFT\u5206\u7ea2\r\n            _liquidityFee = 300; // \u5e95\u6c60\u56de\u6d41\r\n            _fundFee = 100; //  \u57fa\u91d1\u5730\u5740 1%\r\n            _devFee = 100; // \u6280\u672f\u5f00\u53d1 1%\r\n            _reliefFundFee = 600; // \u62bd\u5956\uff08\u6551\u52a9\u91d1\u83b7\u5f97\u8005\uff096%\r\n            _fundAddr = 0x758413Af289FAd6Fc725054D0595E68704Cb460A;\r\n            _devAddr = 0xAab26388FB9b829562609C2aac479475DB3cCE3e;\r\n            marketAddr = 0xE033388831C27BD76e1224aD90525811d6243349;\r\n            _tOwned[adminAddress] = _tTotal;\r\n\r\n            burnEndNumber = 100* (10**uint256(_decimals));\r\n            address router ;\r\n            if( block.chainid == 56){\r\n                router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n                _token = 0x55d398326f99059fF775485246999027B3197955;\r\n            }else{\r\n                router = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n                _token = 0xF456836633e0893290BF33874803e00eD936Fe7f;\r\n            }\r\n\r\n            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\r\n            URoter rou = new URoter(_token,address(this));\r\n            _router= address(rou);   \r\n            reliefAddr =  address(new URoter(_token,address(this)));\r\n            \r\n            // Create a uniswap pair for this new token\r\n            uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n                .createPair(address(this),_token);\r\n    \r\n            // set the rest of the contract variables\r\n            uniswapV2Router = _uniswapV2Router;\r\n    \r\n            //exclude owner and this contract from fee\r\n            _isExcludedFromFee[msg.sender] = true;\r\n            _isExcludedFromFee[adminAddress] = true;\r\n            _isExcludedFromFee[address(this)] = true;\r\n            isDividendExempt[address(this)] = true;\r\n            isDividendExempt[address(0)] = true;\r\n            isDividendExempt[address(0xdead)] = true;\r\n            \r\n            swapTokensAtAmount = _tTotal.mul(1).div(10**6);\r\n\r\n            _token.call(abi.encodeWithSelector(0x095ea7b3, uniswapV2Router, ~uint256(0)));\r\n\r\n            \r\n            emit Transfer(address(0), adminAddress,  _tTotal);\r\n\r\n           \r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        if(_startTimeForSwap == 0 && recipient == uniswapV2Pair) {\r\n            _startTimeForSwap =block.timestamp;\r\n        } \r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n   \r\n\r\n   function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n    function excludeFromFee(address[] memory accounts) public onlyOwner {\r\n        for(uint i;i<accounts.length;i++){\r\n              _isExcludedFromFee[accounts[i] ] = true;\r\n        }\r\n    }\r\n\r\n    function setNft(address nft_) public onlyOwner {\r\n        _nft = nft_;\r\n    }\r\n\r\n    // function setIdo(address ido_) public onlyOwner {\r\n    //    _ido = ido_;\r\n    // }\r\n\r\n \r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function removeAllFee() private {\r\n        _previousBurnFee = _burnFee;\r\n        _previousNftBuyFee = _nftBuyFee;\r\n        _previousMarketingFee = _marketingFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousFundFee  = _fundFee;\r\n        _previousDevFee =  _devFee;\r\n        _previousReliefFundFee= _reliefFundFee;\r\n        _previousNftSellFee =  _nftSellFee;\r\n        \r\n        \r\n\r\n        _fundFee = 0;\r\n        _devFee = 0;\r\n        _reliefFundFee = 0;\r\n        _nftSellFee = 0;\r\n        _burnFee = 0;\r\n        _nftBuyFee = 0;\r\n        _marketingFee = 0;\r\n        _liquidityFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n\r\n        _fundFee = _previousFundFee;\r\n        _devFee = _previousDevFee;\r\n        _reliefFundFee = _previousReliefFundFee;\r\n        _nftSellFee = _previousNftSellFee;\r\n        _burnFee = _previousBurnFee;\r\n        _nftBuyFee = _previousNftBuyFee;\r\n        _marketingFee = _previousMarketingFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n    }\r\n\r\n\r\n    struct buyList{\r\n        uint time;\r\n        address buyAddr;\r\n    }\r\n\r\n    buyList[]  _buyList;\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    event Price(address account,uint256 price);\r\n    event Winner(address account);\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n         if( !_isExcludedFromFee[from] &&!_isExcludedFromFee[to]){\r\n            if (_startTimeForSwap + _intervalSecondsForSwap > block.timestamp) {\r\n                        if (!_isExcludedFromFee[to] && from == uniswapV2Pair) {\r\n                            addBot(to);\r\n                        }\r\n            }\r\n\r\n            if (_isBot[from] ) {\r\n                    revert(\"The bot address\");\r\n            }\r\n        }\r\n\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n        if(canSwap &&from != address(this) &&from != uniswapV2Pair  &&from != owner() && to != owner() ){\r\n                //denominator\r\n                uint denominator =  _nftSellFee + _nftBuyFee + _marketingFee + _liquidityFee + _devFee + _reliefFundFee+_fundFee;\r\n                //1 Calculate how many tokens to add liquidity\r\n             \r\n                uint256  addLiquidityTokenNum = (contractTokenBalance*_liquidityFee)/denominator;\r\n\r\n                swapTokensForTokens( contractTokenBalance-addLiquidityTokenNum);\r\n                uint tokenBal =  IERC20(_token).balanceOf(address(this));\r\n                 //Add liquidity first\r\n                addLiquidity(addLiquidityTokenNum ,  tokenBal*_liquidityFee/(denominator));\r\n\r\n                //nft dividend\r\n                _nftMarketBalance += tokenBal * (_nftSellFee + _nftBuyFee) / denominator ;\r\n                distributeDividend(_nft,tokenBal * (_nftSellFee + _nftBuyFee) / denominator );\r\n                //Marketing address dividend\r\n                distributeDividend(marketAddr,tokenBal * _marketingFee / denominator);\r\n                //Technology dividend\r\n                distributeDividend(_devAddr,tokenBal * _devFee / denominator);\r\n                //Fund dividends\r\n                distributeDividend(_fundAddr,tokenBal *  _fundFee / denominator);\r\n                //Aid dividends\r\n                //Calculate how much aid for each level\r\n                uint reliefAmount =   IERC20(_token).balanceOf(address(this));\r\n                \r\n                distributeDividend(reliefAddr,reliefAmount);\r\n                if(reliefBalance >0){\r\n                    for(uint i;i<4;i++){\r\n                        if(reliefLevsFundAmount[i]>0){\r\n                            reliefAmounts[i]+=  (reliefAmount * reliefLevsFundAmount[i])/reliefBalance ;\r\n                            reliefLevsFundAmount[i] = 0 ;\r\n                        } \r\n                    }\r\n                reliefBalance=0;\r\n                }\r\n                if(IERC20(_token).balanceOf(address(this))>0){\r\n                    uint aaa =  IERC20(_token).balanceOf(address(this))/4;\r\n                    for(uint i;i<4;i++){\r\n                            reliefAmounts[i]+= aaa;\r\n                    }\r\n                }\r\n        }\r\n\r\n       \r\n      \r\n         //Calculate how many people and tokens have entered each level\r\n            if(from == uniswapV2Pair){\r\n                //Buried\r\n                buyList memory b = buyList(block.timestamp,to);\r\n                _buyList.push(b);\r\n                uint256 price = (amount*getTokenPrice() ) / 1e18;\r\n                emit Price(from, price);\r\n                for(uint i ; i<leves.length-1;i++){\r\n                    if( price >= leves[i]*1e18 &&  price <leves[i+1]*1e18){\r\n                        levelAddrs[i].push(to);\r\n                        if( !_isExcludedFromFee[from] &&!_isExcludedFromFee[to]){\r\n                            reliefLevsFundAmount[i]+= amount/10;\r\n                            reliefBalance+=amount/10;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        //Start the draw\r\n        for(uint i ; i<4;i++){\r\n            if( block.timestamp >=   timeSetLeves[i] && levelAddrs[i].length >0 ){\r\n                if( reliefAmounts[i]>0 ){\r\n                    address winner =  levelAddrs[i][ _random(i, levelAddrs[i].length )];\r\n                    emit Winner(winner);\r\n                    winnerDetail memory _winInfo = winnerDetail({ \r\n                            winnerTime: block.timestamp,\r\n                            winnerAmount:  reliefAmounts[i] ,\r\n                            winnerAddr:winner\r\n                    });\r\n                    _users[winner].claim+=  reliefAmounts[i];\r\n                    reliefAmounts[i] = 0;\r\n                    winnerAddrs.push(_winInfo);\r\n                    address[] memory addrs ;\r\n                    levelAddrs[i] = addrs;\r\n                    timeSetLeves[i] = block.timestamp + timeLeves[i];\r\n                }\r\n              \r\n            }\r\n\r\n        }\r\n       \r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = false;\r\n\r\n        if (from == uniswapV2Pair||to==uniswapV2Pair){\r\n            takeFee = true;\r\n        }\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]|| from == address(uniswapV2Router)) {\r\n            takeFee = false;\r\n        }\r\n       \r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n    \r\n        \r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n\r\n        if(recipient == uniswapV2Pair){\r\n            _transferSell(sender, recipient, amount);\r\n        }else{\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function distributeDividend(address shareholder ,uint256 amount) internal {\r\n             (bool b1, ) = _token.call(abi.encodeWithSignature(\"transfer(address,uint256)\", shareholder, amount));\r\n             require(b1, \"call error\");\r\n    }\r\n\r\n\r\n   function _takeburnFee(\r\n        address sender,\r\n        uint256 tAmount\r\n    ) private {\r\n        if (_burnFee == 0) return;\r\n         if((_tTotal.sub(_tOwned[address(0)].add(_tOwned[address(0xdead)])) ) >= burnEndNumber){\r\n            _tOwned[address(0)] = _tOwned[address(0)].add(tAmount);\r\n            emit Transfer(sender, address(0), tAmount);\r\n        }else{\r\n            _burnFee = 0;\r\n        }\r\n    }\r\n   \r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount,\r\n        uint256 currentRate\r\n    ) private {\r\n        if(currentRate==0)return;\r\n        uint256 rAmount = tAmount.div(10000).mul(currentRate);\r\n        _tOwned[to] = _tOwned[to].add(rAmount);\r\n        emit Transfer(sender, to, rAmount);\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\r\n        uint denominator =  _nftBuyFee + _fundFee  + _devFee + _reliefFundFee;\r\n        \r\n        _takeTransfer(sender,address(this), tAmount,denominator);\r\n\r\n\r\n        uint256 recipientRate = 10000 -\r\n            denominator ;\r\n        _tOwned[recipient] = _tOwned[recipient].add(\r\n            tAmount.div(10000).mul(recipientRate)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(10000).mul(recipientRate));\r\n    }\r\n\r\n     function _transferSell(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n          _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\r\n        _takeburnFee(sender, tAmount.div(10000).mul(_burnFee));\r\n\r\n        uint denominator =   _marketingFee + _liquidityFee + _nftSellFee ;\r\n        \r\n        _takeTransfer(sender,address(this), tAmount,denominator);\r\n\r\n        uint256 recipientRate = 10000 -\r\n            _burnFee -\r\n            denominator ;\r\n        _tOwned[recipient] = _tOwned[recipient].add(\r\n            tAmount.div(10000).mul(recipientRate)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(10000).mul(recipientRate));\r\n\r\n\r\n    }\r\n    \r\n  \r\n\r\n\r\n    function setRouter(address router_) public onlyOwner {\r\n        _router  = router_;\r\n    }\r\n    \r\n\r\n    function setTimeLeves(uint[5] memory _timeLeves) onlyOwner  public  {\r\n       timeLeves = _timeLeves;\r\n    }\r\n    \r\n    function setSwapTokensAtAmount(uint256 value) onlyOwner  public  {\r\n       swapTokensAtAmount = value;\r\n    }\r\n\r\n    \r\n    function setAddr(address _marketAddr,address devAddr,address fundAddr) external onlyOwner {\r\n        marketAddr = _marketAddr;\r\n        _devAddr = devAddr;\r\n        _fundAddr = fundAddr;\r\n    }\r\n\r\n    function setFee(uint256 burnFee,uint256 marketingFee,uint256 nftBuyFee,uint256 nftSellFee,uint256 liquidityFee\r\n    ,uint256 fundFee,uint256 devFee, uint256 reliefFundFee) external onlyOwner {\r\n        _burnFee = burnFee;\r\n        _marketingFee = marketingFee;\r\n        _nftBuyFee = nftBuyFee;\r\n        _nftSellFee = nftSellFee;\r\n        _liquidityFee = liquidityFee;\r\n        _fundFee = fundFee;\r\n        _devFee = devFee;\r\n        _reliefFundFee = reliefFundFee;\r\n    }\r\n    \r\n    \r\n   \r\n   function swapTokensForTokens(uint256 tokenAmount) private {\r\n        if(tokenAmount == 0) {\r\n            return;\r\n        }\r\n\r\n       address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _token;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n  \r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            _router,\r\n            block.timestamp\r\n        );\r\n        IERC20(_token).transferFrom( _router,address(this), IERC20(_token).balanceOf(address(_router)));\r\n    }\r\n    \r\n    \r\n    function _random(uint i,uint number) private returns (uint) {\r\n        return uint(keccak256(abi.encodePacked(i,block.timestamp,block.difficulty,getTokenPrice()))) % number;\r\n    }\r\n\r\n\r\n    function getMarketBalance() public view returns(uint256){\r\n        return _nftMarketBalance;\r\n    }\r\n\r\n\r\n    function getLevelAddrs() public view returns(address[] memory levelAddrs1,address[] memory levelAddrs2,address[] memory levelAddrs3,\r\n    address[] memory levelAddrs4,address[] memory levelAddrs5 ){\r\n        return (levelAddrs[0],levelAddrs[1],levelAddrs[2],levelAddrs[3],levelAddrs[4]);\r\n    }\r\n\r\n  \r\n\r\n    \r\n    function setMinLPDividendToken(uint256 _minLPDividendToken) public onlyOwner{\r\n       minLPDividendToken  = _minLPDividendToken;\r\n    }\r\n\r\n    \r\n    function setDividendExempt(address _value,bool isDividend) public onlyOwner{\r\n       isDividendExempt[_value] = isDividend;\r\n    }\r\n  \r\n \r\n\r\n    \r\n    function getTokenPrice() public view returns(uint256){\r\n        return  ((IERC20(_token).balanceOf(uniswapV2Pair))*1e18/(IERC20(address(this)).balanceOf(uniswapV2Pair)) * 10000)/9900    ;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        // add the liquidity\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidity(\r\n            _token,\r\n            address(this),\r\n            ethAmount,\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(0),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    struct User{\r\n        uint256 claim;\r\n        uint256 alreadyClaim;\r\n    }\r\n\r\n     mapping (address => User) public _users ;\r\n    // mapping (address => uint256) public claim ;\r\n\r\n\r\n\r\n    function claim() external {\r\n        uint amount =  _users[msg.sender].claim- _users[msg.sender].alreadyClaim;\r\n        IERC20(_token).transferFrom(reliefAddr, msg.sender, amount);\r\n        _users[msg.sender].alreadyClaim +=amount;\r\n    }\r\n\r\n    mapping(address => bool) private _isBot;\r\n    function setBot(address account, bool value) public onlyOwner {\r\n        _isBot[account] = value;\r\n    }\r\n\r\n    function getBot(address account) public view returns (bool) {\r\n        return _isBot[account];\r\n    }\r\n\r\n\r\n  \r\n\r\n    function addBot(address account) private {\r\n        if (!_isBot[account]) _isBot[account] = true;\r\n    }\r\n\r\n    function viewBuy(uint start_,uint end_) public view returns(\r\n          uint start,uint end,uint total, buyList[] memory buy){\r\n\r\n            if(_buyList.length<end_){\r\n                end_ = _buyList.length;\r\n            }\r\n            if(_buyList.length< start_){\r\n                start_ = _buyList.length;\r\n                end_ = _buyList.length;\r\n            }\r\n             buy = new buyList[](end_ - start_);\r\n            for(uint i=0;i< end_ - start_ ;i++ ){\r\n                  buy[i]  = _buyList[_buyList.length - start_-i-1];\r\n            }\r\n        return (start_,end_,_buyList.length, buy);\r\n    }\r\n\r\n    function getWinnerList(uint start_,uint end_) public view returns(  uint start,uint end,uint total,winnerDetail[] memory winner ){\r\n        \r\n            if(winnerAddrs.length <end_){\r\n                end_ = winnerAddrs.length;\r\n            }\r\n            if(winnerAddrs.length< start_){\r\n                start_ = winnerAddrs.length;\r\n                end_ = winnerAddrs.length;\r\n            }\r\n            winner = new winnerDetail[](end_ - start_);\r\n            for(uint i=0;i< end_ - start_ ;i++ ){//2\r\n                  winner[i]  = winnerAddrs[winnerAddrs.length-start_-i-1];\r\n            }\r\n        return (start_,end_,winnerAddrs.length, winner);\r\n    }\r\n\r\n   \r\n    \r\n    \r\n}\r\n\r\n\r\n\r\ncontract URoter{\r\n     constructor(address token,address to){\r\n         token.call(abi.encodeWithSelector(0x095ea7b3, to, ~uint256(0)));\r\n     }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Price\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftMarketBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reliefFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTimeForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alreadyClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alreadyReliefAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEndNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLevelAddrs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"levelAddrs1\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"levelAddrs2\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"levelAddrs3\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"levelAddrs4\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"levelAddrs5\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_\",\"type\":\"uint256\"}],\"name\":\"getWinnerList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"winnerTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winnerAddr\",\"type\":\"address\"}],\"internalType\":\"struct Token.winnerDetail[]\",\"name\":\"winner\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLPDividendToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reliefAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reliefAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reliefBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reliefLevsFundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAddr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDividend\",\"type\":\"bool\"}],\"name\":\"setDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reliefFundFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLPDividendToken\",\"type\":\"uint256\"}],\"name\":\"setMinLPDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft_\",\"type\":\"address\"}],\"name\":\"setNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_timeLeves\",\"type\":\"uint256[5]\"}],\"name\":\"setTimeLeves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeLeves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeSetLeves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end_\",\"type\":\"uint256\"}],\"name\":\"viewBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"}],\"internalType\":\"struct Token.buyList[]\",\"name\":\"buy\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerAddrs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winnerTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winnerAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://43c3b39a448044658ea620f3566732c50330375cc55cca2b9854f6f023733c77"}