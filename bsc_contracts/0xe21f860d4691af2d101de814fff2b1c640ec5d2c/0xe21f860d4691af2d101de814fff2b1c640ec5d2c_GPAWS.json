{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\r\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\r\n\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\r\n\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\r\n\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\r\n\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\r\n\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\r\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\r\n\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\r\n\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\r\n\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\r\n\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\r\n\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\r\n\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2550\u255d\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\r\n\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\r\n\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\r\n\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\r\n\r\n\ufe0f\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\r\n\r\n            \u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003\u2584\u2580\u2588\u2003\u2588\u2591\u2588\u2591\u2588\u2003\u2588\u2580\u2003 \u2003\u2588\u2003\u2588\u2584\u2591\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2588\r\n            \u2588\u2584\u2588\u2003\u2588\u2580\u2580\u2003\u2588\u2580\u2588\u2003\u2580\u2584\u2580\u2584\u2580\u2003\u2584\u2588\u2003 \u2003\u2588\u2003\u2588\u2591\u2580\u2588\u2003\u2588\u2580\u2591\u2003\u2588\u2584\u2588\r\n\r\n\r\n    \u2714\ufe0f#\u2714\ufe0f Charity Website    :  https://www.goldenpawstoken.com/\r\n\r\n    \u2714\ufe0f#\u2714\ufe0f Website (Main)     :  https://altinpatiler.com/\r\n\r\n    \u2714\ufe0f#\u2714\ufe0f  X (Twitter)       :  https://x.com/altin_patiler/ \r\n\r\n    \u2714\ufe0f#\u2714\ufe0f Telegram (Global)  :  https://t.me/GoldenPawsEng/\r\n\r\n    \u2714\ufe0f#\u2714\ufe0f Telegram (T\u00fcrkiye) :  https://t.me/Goldenpawstr/\r\n\r\n    \u2714\ufe0f#\u2714\ufe0f Instagram          :  https://www.instagram.com/altinpatilerturkey/\r\n\r\n    \u2714\ufe0f#\u2714\ufe0f YouTube            :  https://www.youtube.com/@altnpatilerturkiye8047/\r\n\r\n    \u2714\ufe0f#\u2714\ufe0f GitBook (Global)   :  https://golden-paws.gitbook.io/golden-paws-english/\r\n\r\n    \u2714\ufe0f#\u2714\ufe0f Gitbook (T\u00fcrkiye)  :  https://golden-paws.gitbook.io/golden-paws-turkiye/\r\n\r\n    \u2714\ufe0f#\u2714\ufe0f Facebook.          :  https://www.facebook.com/altinpatilerturkey0/\r\n\r\n    \u2714\ufe0f#\u2714\ufe0f Medium             :  https://medium.com/@GoldenPaws/\r\n\r\n    \u2714\ufe0f#\u2714\ufe0f Linkedin           :  https://www.facebook.com/altinpatilerturkey0/\r\n\r\n\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\u2714\ufe0f\r\n    */\r\n\r\npragma solidity 0.8.12;\r\nabstract contract Context{\r\n    function _msgSender() internal view virtual returns (address){\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata){\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20{\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20{\r\n    function name()     external view returns (string memory);\r\n    function symbol()   external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata{\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_, uint256 totalSupplyWithoutDecimals_, uint8 decimals_){\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n\r\n        uint256 totalSupply_ = totalSupplyWithoutDecimals_ * 10**decimals_;\r\n\r\n        _beforeTokenTransfer(address(0), msg.sender, totalSupply_);\r\n\r\n        _totalSupply += totalSupply_;\r\n        _balances[msg.sender] += totalSupply_;\r\n        emit Transfer(address(0), msg.sender, totalSupply_);\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory){\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory){\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8){\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256){\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256){\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool){\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256){\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool){\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool){\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool){\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool){\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual{\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        _basicTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal virtual{\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual{\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual{\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual{}\r\n}\r\n\r\nlibrary Address{\r\n    function sendValue(address payable recipient, uint256 amount) internal{\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context{\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(){\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address){\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner{\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner{\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private{\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFactory{\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter{\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n}\r\n\r\ncontract GPAWS is ERC20, Ownable{\r\n    using Address for address payable;\r\n\r\n    IRouter public router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address public pair;\r\n    \r\n\r\n    bool private _liquidityLock = false;\r\n    bool public providingLiquidity = false;\r\n    bool public tradingEnabled = false;\r\n\r\n    bool public transferFeeStatus = true;\r\n    bool public minimumBalanceHold = true;\r\n    bool private getFeeFromBots = true;\r\n\r\n    uint256 public tokenLiquidityThreshold;\r\n    uint256 public maxBuyLimit;\r\n    uint256 public maxSellLimit;\r\n    uint256 public maxWalletLimit;\r\n\r\n    uint256 public tradingStartBlock;\r\n    uint256 private deadline = 1;\r\n    uint256 private launchFee = 10;\r\n    uint256 private transferFee = 50;\r\n    uint256 public  minimumBalance = 1;\r\n    uint8 private botFee = 47;\r\n    uint8 private earliestSalesTime = 20;\r\n\r\n    address private marketingWallet     = 0x3366422d2365744Ad7F07790A54396C4150b1e58; \r\n    address private rewardWallet        = 0xA27831F5FD538956288f6F892bDf72e4ce30e1c5;\r\n    address public constant deadWallet  = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 minimumHoldFforReward = 20000 * 1e18;\r\n\r\n    struct Fees{\r\n        uint256 marketing;\r\n        uint256 liquidity;\r\n        uint256 reward;\r\n    }\r\n\r\n    Fees public buyFees  = Fees(2, 2, 2);\r\n    Fees public sellFees = Fees(2, 2, 2);\r\n\r\n    mapping(address => bool) public exemptFee;\r\n    mapping(address => bool) public exemptMaxBuyLimit;\r\n    mapping(address => bool) public exemptMaxWalletLimit;\r\n    mapping(address => bool) public exemptMaxSellLimit;\r\n    mapping(address => bool) public allowedTransfer;\r\n    mapping(address => uint256) public lastBuy;\r\n    mapping(address => HOLDER) public holders;\r\n    address[] public holdersList;\r\n\r\n    struct HOLDER{\r\n        address _holder;\r\n        bool    isHolder;\r\n    }\r\n\r\n    function addHolder(address _address) private{\r\n        if(!holders[_address].isHolder){\r\n           holders[_address] = HOLDER(_address, true);\r\n           holdersList.push(_address);\r\n        }\r\n    }\r\n\r\n    function getHolderList() public view returns(address[] memory){\r\n        return holdersList;\r\n    }\r\n\r\n    \r\n    uint256 marketFeeMultiplierCooldown = 0 minutes;\r\n    uint8 marketFeeMultiplier = 4;\r\n\r\n    modifier lockLiquidity(){\r\n        if (!_liquidityLock){\r\n            _liquidityLock = true;\r\n            _;\r\n            _liquidityLock = false;\r\n        }\r\n    }\r\n\r\n    receive() external payable{}\r\n\r\n    constructor() ERC20(\"Golden Paws\", \"GPAWS\", 1000000000, 18){\r\n        uint256 _totalSupply = totalSupply();\r\n\r\n        tokenLiquidityThreshold = (_totalSupply / 1000) * 1; \r\n        maxBuyLimit = (_totalSupply * 2) / 100; \r\n        maxSellLimit = (_totalSupply * 2) / 100; \r\n        maxWalletLimit = (_totalSupply * 2) / 100; \r\n\r\n        \r\n        address _pair = IFactory(router.factory()).createPair(address(this), router.WETH() );\r\n        pair = _pair;\r\n\r\n        exemptFee[msg.sender] = true;\r\n        exemptFee[address(this)] = true;\r\n        exemptFee[marketingWallet] = true;\r\n        exemptFee[rewardWallet] = true;\r\n        exemptFee[deadWallet] = true;\r\n\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool){\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256){\r\n        return super.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256){\r\n        return _balances[account];\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool){\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool){\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool){\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool){\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal override{\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        addHolder(msg.sender);\r\n        addHolder(sender);\r\n        addHolder(recipient);\r\n\r\n        if (!exemptFee[sender] && !exemptFee[recipient]){\r\n            require(tradingEnabled, \"Trading is not enabled\");\r\n        }\r\n\r\n        if (sender == pair && !exemptFee[recipient] && !_liquidityLock && !exemptMaxBuyLimit[recipient]){\r\n            require(amount <= maxBuyLimit, \"You are exceeding maxBuyLimit\");\r\n        }\r\n        if (recipient != pair && !exemptMaxWalletLimit[recipient]){\r\n            require(balanceOf(recipient) + amount <= maxWalletLimit, \"You are exceeding maxWalletLimit\"\r\n            );\r\n        }\r\n        if (sender != pair && !exemptFee[recipient] && !exemptFee[sender] && !_liquidityLock && !exemptMaxSellLimit[sender]){\r\n            require(amount <= maxSellLimit, \"You are exceeding maxSellLimit\");\r\n\r\n        }\r\n\r\n        uint256 feeRatio;\r\n        uint256 feeAmount;\r\n        Fees memory currentFees;\r\n\r\n        bool useLaunchFee = launchFee > 0 && !exemptFee[sender] && !exemptFee[recipient] && block.number < tradingStartBlock + deadline;\r\n        \r\n        if (_liquidityLock || exemptFee[sender] || exemptFee[recipient])\r\n            feeAmount = 0;\r\n        else if (sender != pair && recipient != pair && transferFeeStatus && !exemptFee[sender]){\r\n            if (transferFee > 0){\r\n                uint256 transferFeeAmount = (amount * transferFee) / 1000;\r\n                 if (transferFeeAmount > 0){\r\n                super._transfer(sender, marketingWallet, transferFeeAmount);\r\n                super._transfer(sender, recipient, amount - transferFeeAmount);\r\n                }\r\n                return;\r\n            } else{\r\n                feeRatio = 0;\r\n            }\r\n        } else if (sender != pair && recipient != pair && !transferFeeStatus){\r\n            feeRatio = 0;\r\n        } else if (recipient == pair && !useLaunchFee){\r\n            \r\n            currentFees = sellFees;\r\n            uint256 buyed = block.timestamp - lastBuy[msg.sender];\r\n            if(buyed <= earliestSalesTime && getFeeFromBots){\r\n                currentFees = Fees(2, 10, (botFee-12));\r\n                feeRatio = botFee;\r\n            } else {\r\n                feeRatio = sellFees.liquidity + sellFees.marketing + sellFees.reward;\r\n            }\r\n        \r\n        } else if (!useLaunchFee){\r\n            feeRatio = buyFees.liquidity + buyFees.marketing + buyFees.reward;\r\n            currentFees = buyFees;\r\n            lastBuy[msg.sender] = block.timestamp;\r\n        } else if (useLaunchFee){\r\n            feeRatio = launchFee;\r\n        }\r\n\r\n        feeAmount = (amount * feeRatio) / 100;\r\n\r\n        if (providingLiquidity && sender != pair && feeAmount > 0)\r\n            handleFees(feeRatio, currentFees);\r\n        \r\n        super._transfer(sender, recipient, amount - feeAmount);\r\n        if (feeAmount > 0 && feeRatio > 0){\r\n            super._transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        \r\n        if(minimumBalanceHold){\r\n            addAmountToBalances();\r\n        }\r\n\r\n    }\r\n\r\n    function updateBotFee(uint8 _newFee) public onlyOwner{\r\n            require(_newFee >= 12, \"Since a total tax of 12% will be allocated for liquidity and marketing share on bot sales, this rate cannot be less than 12\");\r\n            require(_newFee < 50, \"A maximum tax rate of 50% can be set for boat taxes\");\r\n            botFee = _newFee;\r\n    }\r\n\r\n    function getFeeFromBotsStatus(bool _bool) public onlyOwner{\r\n            require(getFeeFromBots != _bool, \"Since the transaction is already valid, no changes will be made\");\r\n            getFeeFromBots = _bool;\r\n    }\r\n\r\n    function addAmountToBalances() public {\r\n        address[] memory zeroBalanceHolders = findZeroBalanceHolders();\r\n        uint256 contratTokenBalance = balanceOf(address(this));\r\n        if (zeroBalanceHolders.length > 0 && contratTokenBalance > 0 && contratTokenBalance > zeroBalanceHolders.length) {\r\n            for (uint256 i = 0; i < zeroBalanceHolders.length; i++) {\r\n                _basicTransfer(address(this), zeroBalanceHolders[i], minimumBalance);\r\n            }\r\n    }\r\n    }\r\n\r\n    function handleFees(uint256 feeRatio, Fees memory swapFees) private lockLiquidity{\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance >= tokenLiquidityThreshold){\r\n            if (tokenLiquidityThreshold > 1){\r\n                contractBalance = tokenLiquidityThreshold;\r\n            }\r\n            uint256 denominator = feeRatio * 2;\r\n            uint256 tokensToAddLiquidityWith = (contractBalance * swapFees.liquidity) / denominator;\r\n            uint256 toSwap = contractBalance - tokensToAddLiquidityWith;\r\n            uint256 initialBalance = address(this).balance;\r\n            if(toSwap > 0){\r\n                swapTokensForETH(toSwap);\r\n            }\r\n            uint256 deltaBalance = address(this).balance - initialBalance;\r\n            uint256 unitBalance = deltaBalance / (denominator - swapFees.liquidity);\r\n            uint256 bnbToAddLiquidityWith = unitBalance * swapFees.liquidity;\r\n\r\n            if (bnbToAddLiquidityWith > 0){\r\n                addLiquidity(tokensToAddLiquidityWith, bnbToAddLiquidityWith);\r\n            }\r\n\r\n            uint256 marketingAmount = unitBalance * 2 * swapFees.marketing;\r\n            if (marketingAmount > 0){\r\n                payable(marketingWallet).sendValue(marketingAmount);\r\n            }\r\n\r\n            uint256 rewardAmount = unitBalance * 2 * swapFees.reward;\r\n            if (rewardAmount > 0){\r\n                payable(rewardWallet).sendValue(rewardAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n     function lock() internal onlyOwner {\r\n        _liquidityLock = !_liquidityLock;\r\n    }\r\n\r\n    function lockProvider() internal onlyOwner {\r\n        providingLiquidity = !providingLiquidity;\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private{\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: ethAmount}(address(this), tokenAmount, 0, 0, owner(), block.timestamp);\r\n    }\r\n\r\n    function updateLiquidityProvide(bool flag) external onlyOwner{\r\n        require(providingLiquidity != flag, \"You must provide a different status other than the current value in order to update it\");\r\n        \r\n        providingLiquidity = flag;\r\n    }\r\n\r\n    function updateLiquidityThreshold(uint256 new_amount) external onlyOwner{\r\n        \r\n        require(tokenLiquidityThreshold != new_amount * 10**decimals(), \"You must provide a different amount other than the current value in order to update it\");\r\n        tokenLiquidityThreshold = new_amount * 10**decimals();\r\n    }\r\n\r\n    function enableTrading() external onlyOwner{\r\n        tradingEnabled = true;\r\n        providingLiquidity = true;\r\n        tradingStartBlock = block.number;\r\n    }\r\n\r\n    function updateMarketingWallet(address newWallet) external onlyOwner{\r\n        require(marketingWallet != newWallet, \"You must provide a different address other than the current value in order to update it\");\r\n        marketingWallet = newWallet;\r\n    }\r\n\r\n    function updateRewardWallet(address newWallet) external onlyOwner{\r\n        require(rewardWallet != newWallet, \"You must provide a different address other than the current value in order to update it\");\r\n        rewardWallet = newWallet;\r\n    }\r\n\r\n\r\n    function updateExemptFee(address _address, bool flag) external onlyOwner{\r\n        require(exemptFee[_address] != flag, \"You must provide a different exempt address or status other than the current value in order to update it\");\r\n        exemptFee[_address] = flag;\r\n    }\r\n\r\n    function updateExemptMaxSellLimit(address _address, bool flag) external onlyOwner{\r\n        require(exemptMaxSellLimit[_address] != flag, \"You must provide a different max sell limit other than the current max sell limit in order to update it\");\r\n        exemptMaxSellLimit[_address] = flag;\r\n    }\r\n\r\n    function updateExemptMaxBuyLimit(address _address, bool flag) external onlyOwner{\r\n        require(exemptMaxBuyLimit[_address] != flag, \"You must provide a different max buy limit other than the current max buy limit in order to update it\");\r\n        exemptMaxBuyLimit[_address] = flag;\r\n    }\r\n\r\n    function updateExemptMaxWalletLimit(address _address, bool flag) external onlyOwner{\r\n        require(exemptMaxWalletLimit[_address] != flag, \"You must provide a different max wallet limit other than the current max wallet limit in order to update it\");\r\n        exemptMaxWalletLimit[_address] = flag;\r\n    }\r\n\r\n    function setTransferFeeStatus(bool flag) external onlyOwner{\r\n        require(transferFeeStatus != flag, \"You must provide a different status other than the current transfer fee status in order to update it\");\r\n        transferFeeStatus = flag;\r\n    }\r\n\r\n    function updateTransferFee(uint256 _ratio) external onlyOwner{\r\n        require(_ratio <= 60, \"The transfer fee cannot be more than 6%\");\r\n        require(_ratio != transferFee, \"You must provide a different ratio other than the current transfer fee in order to update it\");\r\n        transferFee = _ratio; \r\n    }\r\n\r\n    function bulkExemptFee(address[] memory accounts, bool flag) external onlyOwner{\r\n        for (uint256 i = 0; i < accounts.length; i++){\r\n            exemptFee[accounts[i]] = flag;\r\n        }\r\n    }\r\n\r\n\r\n    function updateMaxBuyTxLimit(uint256 maxBuy) external onlyOwner{\r\n        require(maxBuy >= super.totalSupply() / 1000, \"Cannot set max buy amount lower than 0.1% of tokens\");\r\n        require(maxBuy * 10**decimals() != maxBuyLimit, \"You must provide a different amount other than the current max sell limit in order to update it\");\r\n        maxBuyLimit = maxBuy * 10**decimals();\r\n\r\n    }\r\n\r\n    function updateMaxSellTxLimit(uint256 maxSell) external onlyOwner{\r\n        require(maxSell >= super.totalSupply() / 1000, \"Cannot set max sell amount lower than 0.1% of tokens%\");\r\n        require(maxSell * 10**decimals() != maxSellLimit, \"You must provide a different amount other than the current max sell limit in order to update it\");\r\n        maxSellLimit = maxSell * 10**decimals();\r\n    }\r\n\r\n    function updateMaxWalletLimit(uint256 amount) external onlyOwner{\r\n        require(amount >= super.totalSupply() / 1000, \"Cannot set max wallet amount lower than 0.1% of tokens\");\r\n        require(amount * 10**decimals() != maxWalletLimit, \"You must provide a different amount other than the current max wallet limit in order to update it\");\r\n        maxWalletLimit = amount * 10**decimals();\r\n    }\r\n\r\n\r\n    function changeRouter(address newRouter) external onlyOwner returns (address _pair){\r\n        require(newRouter != address(0), \"newRouter address cannot be 0\");\r\n        require(router != IRouter(newRouter), \"You must provide a different router other than the current router address in order to update it\");\r\n        IRouter _router = IRouter(newRouter);\r\n\r\n        _pair = IFactory(_router.factory()).getPair(address(this), _router.WETH() );\r\n        if (_pair == address(0)){\r\n            _pair = IFactory(_router.factory()).createPair(    address(this), _router.WETH());\r\n        }\r\n        \r\n        pair = _pair;\r\n        router = _router;\r\n    }\r\n\r\n    function _safeTransferForeign(IERC20 _token, address recipient, uint256 amount) private{\r\n        bool sent = _token.transfer(recipient, amount);\r\n        require(sent, \"Token transfer failed.\");\r\n    }\r\n\r\n    function clearStuckBnb(uint256 amount, address receiveAddress) external onlyOwner{\r\n        payable(receiveAddress).transfer(amount);\r\n    }\r\n\r\n    function clearStuckToken(IERC20 _token, address receiveAddress, uint256 amount) external onlyOwner{\r\n        _safeTransferForeign(_token, receiveAddress, amount);\r\n    }\r\n\r\n    function rewardWalletsList() public view returns(address[] memory, uint256[] memory){\r\n        address[] memory _list;\r\n        uint256[] memory _amounts;\r\n\r\n        for (uint256 i=0; i < holdersList.length; i++){\r\n            uint256 _balance = balanceOf(holdersList[i]);\r\n\r\n            if(_balance >= minimumHoldFforReward){\r\n                _list[i]   = holdersList[i];\r\n                _amounts[i] = _balance;\r\n            }\r\n        }\r\n        return(_list, _amounts);\r\n    }\r\n\r\n    function findZeroBalanceHolders() public view returns (address[] memory) {\r\n        uint256 count = 0;\r\n\r\n        for (uint256 i = 0; i < holdersList.length; i++) {\r\n            if (_balances[holdersList[i]] == 0) {\r\n                count++;\r\n            }\r\n        }\r\n        address[] memory zeroBalanceHolders = new address[](count);\r\n        uint256 index = 0;\r\n\r\n        for (uint256 i = 0; i < holdersList.length; i++) {\r\n            if (_balances[holdersList[i]] == 0) {\r\n                zeroBalanceHolders[index] = holdersList[i];\r\n                index++;\r\n            }\r\n        }\r\n\r\n    return zeroBalanceHolders;\r\n}\r\n\r\n\r\nfunction updateminimumBalance(uint256 _amount) public onlyOwner {\r\n    require(_amount <= 1000, \"The minimum hold balance can only be set up to 1000 wei.\");\r\n    minimumBalance = _amount;\r\n}\r\n\r\nfunction updateminimumBalanceHoldStatus(bool _bool) public onlyOwner {\r\n    require(minimumBalanceHold != _bool , \"Since the transaction is already valid, no changes will be made.\");\r\n    minimumBalanceHold = _bool;\r\n}\r\n\r\nfunction updateEarliestSalesTime(uint8 _newDuration) public onlyOwner {\r\n    require(_newDuration <= 20, \"This duration can be a maximum of 20 seconds.\");\r\n    earliestSalesTime = _newDuration;\r\n}\r\n\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addAmountToBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"bulkExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"}],\"name\":\"clearStuckBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"clearStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMaxBuyLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMaxSellLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMaxWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"findZeroBalanceHolders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"getFeeFromBotsStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isHolder\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holdersList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBalanceHold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWalletsList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setTransferFeeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLiquidityThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newFee\",\"type\":\"uint8\"}],\"name\":\"updateBotFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newDuration\",\"type\":\"uint8\"}],\"name\":\"updateEarliestSalesTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"updateExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"updateExemptMaxBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"updateExemptMaxSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"updateExemptMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"updateLiquidityProvide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_amount\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuyTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSell\",\"type\":\"uint256\"}],\"name\":\"updateMaxSellTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateRewardWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateminimumBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"updateminimumBalanceHoldStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GPAWS", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b7a4e1801ecbfae6677aa757aeff758e52c14555d2df1d6748dfe5f395a0e997"}