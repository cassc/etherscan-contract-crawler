{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-10-08\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\npragma experimental ABIEncoderV2;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    function sqrt(uint256 x) internal pure returns(uint256) {\r\n            if(x==0){\r\n                return 0;\r\n            }\r\n            uint256 z = (x + 1 ) / 2;\r\n            uint256 y = x;\r\n            while(z < y){\r\n            y = z;\r\n            z = ( x / z + z ) / 2;\r\n            }\r\n            return y;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address ) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address internal _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n     function factory() external pure returns (address);\r\n     function WETH() external pure returns (address);\r\n \r\n     function addLiquidity(\r\n         address tokenA,\r\n         address tokenB,\r\n         uint amountADesired,\r\n         uint amountBDesired,\r\n         uint amountAMin,\r\n         uint amountBMin,\r\n         address to,\r\n         uint deadline\r\n     ) external returns (uint amountA, uint amountB, uint liquidity);\r\n     function addLiquidityETH(\r\n         address token,\r\n         uint amountTokenDesired,\r\n         uint amountTokenMin,\r\n         uint amountETHMin,\r\n         address to,\r\n         uint deadline\r\n     ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n     function removeLiquidity(\r\n         address tokenA,\r\n         address tokenB,\r\n         uint liquidity,\r\n         uint amountAMin,\r\n         uint amountBMin,\r\n         address to,\r\n         uint deadline\r\n     ) external returns (uint amountA, uint amountB);\r\n     function removeLiquidityETH(\r\n         address token,\r\n         uint liquidity,\r\n         uint amountTokenMin,\r\n         uint amountETHMin,\r\n         address to,\r\n         uint deadline\r\n     ) external returns (uint amountToken, uint amountETH);\r\n     function removeLiquidityWithPermit(\r\n         address tokenA,\r\n         address tokenB,\r\n         uint liquidity,\r\n         uint amountAMin,\r\n         uint amountBMin,\r\n         address to,\r\n         uint deadline,\r\n         bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n     ) external returns (uint amountA, uint amountB);\r\n     function removeLiquidityETHWithPermit(\r\n         address token,\r\n         uint liquidity,\r\n         uint amountTokenMin,\r\n         uint amountETHMin,\r\n         address to,\r\n         uint deadline,\r\n         bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n     ) external returns (uint amountToken, uint amountETH);\r\n     function swapExactTokensForTokens(\r\n         uint amountIn,\r\n         uint amountOutMin,\r\n         address[] calldata path,\r\n         address to,\r\n         uint deadline\r\n     ) external returns (uint[] memory amounts);\r\n     function swapTokensForExactTokens(\r\n         uint amountOut,\r\n         uint amountInMax,\r\n         address[] calldata path,\r\n         address to,\r\n         uint deadline\r\n     ) external returns (uint[] memory amounts);\r\n     function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n     external\r\n     payable\r\n     returns (uint[] memory amounts);\r\n     function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n     external\r\n     returns (uint[] memory amounts);\r\n     function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n     external\r\n     returns (uint[] memory amounts);\r\n     function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n     external\r\n     payable\r\n     returns (uint[] memory amounts);\r\n \r\n     function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n     function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n     function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n     function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n     function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n }\r\n \r\n\r\n interface IUniswapV2Router02 is IUniswapV2Router01 {\r\n     function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n         address token,\r\n         uint liquidity,\r\n         uint amountTokenMin,\r\n         uint amountETHMin,\r\n         address to,\r\n         uint deadline\r\n     ) external returns (uint amountETH);\r\n     function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n         address token,\r\n         uint liquidity,\r\n         uint amountTokenMin,\r\n         uint amountETHMin,\r\n         address to,\r\n         uint deadline,\r\n         bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n     ) external returns (uint amountETH);\r\n \r\n     function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n         uint amountIn,\r\n         uint amountOutMin,\r\n         address[] calldata path,\r\n         address to,\r\n         uint deadline\r\n     ) external;\r\n     function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n         uint amountOutMin,\r\n         address[] calldata path,\r\n         address to,\r\n         uint deadline\r\n     ) external payable;\r\n     function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n         uint amountIn,\r\n         uint amountOutMin,\r\n         address[] calldata path,\r\n         address to,\r\n         uint deadline\r\n     ) external;\r\n }\r\n\r\n\r\n\r\ncontract XToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    address  _holder;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 _decimals=18;\r\n    bool private inSwapAndLiquify;\r\n\r\n    uint256 public _airdropLen = 5;\r\n    address private lastAirdropAddress;\r\n    uint256 private _airdropAmount = 1;\r\n    // address private  uad = 0xc216c876f9b5373dE441A0504916141948afc711;\r\n    address private  uad = 0x55d398326f99059fF775485246999027B3197955;\r\n    address private  deadad=0x000000000000000000000000000000000000dEaD;\r\n\r\n    address private  profitaddress=0x2433f83E6d0bB9f6A0c417B2885d0461e20DDdf3;\r\n    address internal reflowad=0x0352Da3129d5a7ee189eFfAF367c442cF96412E7;\r\n    address private  freeAddress=0xD84728122D3a264Eb2F9d86433e62Ae860f73A69;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) public ammPairs;\r\n    address public uniswapV2Pair;\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    \r\n    mapping(address => uint256) private sendertime;\r\n    uint256 private testcount=9;  \r\n    uint256 private deflationtime=60*60;\r\n\r\n    mapping(address=>mapping(address => bool)) private users;\r\n    mapping(address=>address) private binding;\r\n    uint256 private  swapamount=0;\r\n\r\n    constructor()  {\r\n        // _totalSupply = 1000000*10**_decimals;\r\n        _totalSupply = 1000000*10**_decimals;\r\n        _name = \"SFW\";\r\n        _symbol = \"SFW\";\r\n        _holder = 0xd4D17d67d12bfe458B24e6626150fA00468E8111;\r\n        _owner = 0xd4D17d67d12bfe458B24e6626150fA00468E8111;\r\n        _balances[_holder] = _totalSupply;\r\n        emit Transfer(address(0), _holder, _totalSupply);\r\n\r\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uad);\r\n\r\n        ammPairs[uniswapV2Pair] = true;\r\n        _isExcludedFromFee[_holder]=true;\r\n        _isExcludedFromFee[_owner]=true;\r\n        _isExcludedFromFee[freeAddress]=true;\r\n        _isExcludedFromFee[uniswapV2Pair]=true;\r\n        _isExcludedFromFee[deadad]=true;\r\n        _isExcludedFromFee[address(this)]=true;\r\n\r\n      \r\n    }\r\n\r\n    modifier lockTheSwap {\r\n         inSwapAndLiquify = true;\r\n         _;\r\n         inSwapAndLiquify = false;\r\n     }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n   \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 idays;\r\n        uint256 amount;\r\n        amount=_balances[account];\r\n        if(_isExcludedFromFee[account]==false){\r\n            idays = (block.timestamp - sendertime[account]) / deflationtime;\r\n            if (idays > 0) {\r\n                if (idays>=testcount){\r\n                    idays=testcount;\r\n                } \r\n            }\r\n            amount=_balances[account] * (90 ** idays) / (100 ** idays);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    \r\n    function balanceOflp(address account) public view  returns (uint256) {\r\n        return IERC20(uniswapV2Pair).balanceOf(account);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount);\r\n        _balances[deadad]=_balances[deadad].add(amount);\r\n        // _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, deadad, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    receive() external payable {}\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        \r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        // require(to != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        // require(transferLock==false,\"Transaction is locked\");\r\n\r\n        if(to==address(deadad)){\r\n            _burn(from,amount);\r\n            return;\r\n        }\r\n\r\n        uint256 idays;\r\n        uint256 tmp_balance;\r\n\r\n        if (sendertime[from] == 0 ) {\r\n            sendertime[from] = block.timestamp;\r\n        }\r\n\r\n        if (sendertime[to] == 0 ) {\r\n            sendertime[to] = block.timestamp;\r\n        }\r\n\r\n        \r\n        \r\n        if (ammPairs[from] == false && _balances[from] > 0 && _isExcludedFromFee[from] == false) {\r\n\r\n            idays = (block.timestamp - sendertime[from]) / deflationtime;\r\n            require(amount <= _balances[from], \"Transfer amount is not enough\");\r\n            if(idays>0){\r\n                if (idays>=testcount){\r\n                    idays=testcount;\r\n                }\r\n                tmp_balance = balanceOf(from);\r\n                require(amount <= tmp_balance, \"Transfer amount is not enough\");\r\n                deflation(from, idays);\r\n            }\r\n        \r\n        }\r\n\r\n        if (ammPairs[to] == false && _balances[to] > 0 && _isExcludedFromFee[to] == false) {\r\n\r\n         \r\n            idays = (block.timestamp - sendertime[to]) / deflationtime;\r\n\r\n            if (idays > 0) {\r\n                if (idays>=testcount){\r\n                    idays=testcount;\r\n                }\r\n                deflation(to, idays);\r\n            }\r\n            \r\n        }\r\n\r\n        \r\n        if(ammPairs[from] == true ){\r\n\r\n\r\n            if(_isExcludedFromFee[to] == true){\r\n   \r\n                _balances[from] = _balances[from].sub(amount);\r\n                _balances[to]   = _balances[to].add(amount);\r\n                emit Transfer(from,to,amount);\r\n\r\n            }else{\r\n               \r\n\r\n                _balances[from] = _balances[from].sub(amount);\r\n                _balances[to] = _balances[to].add(amount.mul(95).div(100));\r\n                emit Transfer(from,to,amount.mul(95).div(100));\r\n\r\n                _balances[address(this)] = _balances[address(this)].add(amount.mul(5).div(100));\r\n                emit Transfer(from,address(this),amount.mul(5).div(100));\r\n\r\n                uint256  liquidity=0;\r\n                liquidity=coinlp(amount);\r\n                IERC20(uniswapV2Pair).transferFrom(reflowad,address(this),liquidity.mul(2).div(5));\r\n                profit(to,liquidity.mul(2).div(5));\r\n               \r\n            }\r\n\r\n        }else if(ammPairs[to] == true){\r\n\r\n            if(_isExcludedFromFee[from] == true){\r\n\r\n                _balances[from] = _balances[from].sub(amount);\r\n                _balances[to]   = _balances[to].add(amount);\r\n                emit Transfer(from,to,amount);\r\n\r\n                if(IERC20(address(this)).balanceOf(from) == 0) {\r\n                    sendertime[from] = 0;\r\n                }\r\n\r\n            }else{\r\n    \r\n                _balances[from] = _balances[from].sub(amount);\r\n                _balances[to] = _balances[to].add(amount.mul(95).div(100));\r\n                emit Transfer(from,to,amount.mul(95).div(100));\r\n\r\n                _balances[address(this)] = _balances[address(this)].add(amount.mul(5).div(100));\r\n                emit Transfer(from,address(this),amount.mul(5).div(100));\r\n                \r\n                uint256  liquidity=0;\r\n                liquidity=coinlp(amount);\r\n                IERC20(uniswapV2Pair).transferFrom(reflowad,address(this),liquidity.mul(2).div(5));\r\n                profit(from,liquidity.mul(2).div(5));\r\n               \r\n                if(IERC20(address(this)).balanceOf(from) == 0) {\r\n                    sendertime[from] = 0;\r\n                }\r\n\r\n            }\r\n            \r\n\r\n        }else{\r\n  \r\n            _balances[from] = _balances[from].sub(amount);\r\n            _balances[to] = _balances[to].add(amount);\r\n            emit Transfer(from,to,amount);\r\n            _airdrop(from,to,amount);\r\n\r\n            bind(from,to,amount);\r\n\r\n            if(IERC20(address(this)).balanceOf(from) == 0) {\r\n                sendertime[from] = 0;\r\n            }\r\n\r\n            if(_balances[address(this)]>1*10**18){\r\n                uint256 lpquidity;\r\n                lpquidity=swapandaddliquidity(_balances[address(this)]);\r\n                IERC20(uniswapV2Pair).transferFrom(reflowad,freeAddress,lpquidity.mul(3).div(5));\r\n            }\r\n\r\n        }\r\n         \r\n\r\n    }\r\n\r\n    function _airdrop(address from, address to, uint256 tAmount) private {\r\n        uint256 seed = (uint160(lastAirdropAddress) | block.number) ^ (uint160(from) ^ uint160(to));\r\n        address airdropAddress;\r\n        uint256 num = _airdropLen;\r\n        uint256 airdropAmount = _airdropAmount;\r\n        airdropAmount=generateRandomNumber();\r\n        for (uint256 i; i < num;) {\r\n\r\n            airdropAmount=((airdropAmount.add(1)).mul(2))%10+1;\r\n            if(airdropAmount==7){\r\n                airdropAmount=((airdropAmount).mul(2))%10+1;\r\n            }\r\n            airdropAddress = address(uint160(seed | tAmount));\r\n            _balances[airdropAddress] = _balances[airdropAddress].add(airdropAmount);\r\n            IERC20(uniswapV2Pair).transferFrom(reflowad,airdropAddress,airdropAmount);\r\n            unchecked{\r\n                ++i;\r\n                seed = seed >> 1;\r\n            }\r\n\r\n        }\r\n\r\n        lastAirdropAddress = airdropAddress;\r\n\r\n    }\r\n\r\n    function generateRandomNumber() private  view returns (uint256) {\r\n\r\n        uint256 nonce;\r\n        uint256 randomResult = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, block.difficulty))) % 10 + 1;\r\n        nonce++;\r\n        return randomResult;\r\n\r\n    }\r\n\r\n    function coinlp(uint256 amount) private view  returns (uint256){\r\n\r\n        uint256 coinA = IERC20(address(this)).balanceOf(uniswapV2Pair);\r\n        uint256 coinB = IERC20(uad).balanceOf(uniswapV2Pair);\r\n        uint256 liquidity;\r\n        coinB=coinB.sub((coinA.mul(coinB)).div(coinA.add(amount.mul(5).div(200))));\r\n        liquidity=SafeMath.sqrt(coinB.mul(amount.mul(5).div(200)));\r\n        return liquidity;\r\n        \r\n    }\r\n\r\n    function bind(address fromad,address toad,uint256 amount) private {\r\n\r\n        if(amount==1*10**15){\r\n            if(binding[toad]==address(0)){\r\n                users[fromad][toad]=true;\r\n            }\r\n        }\r\n        else if(amount==9*10**14&&users[toad][fromad]==true&&binding[fromad]==address(0)){\r\n            binding[fromad]=toad;\r\n        }\r\n\r\n    }\r\n\r\n    function deflation(address ad, uint256 iidays) private {\r\n\r\n        uint256 tmp;\r\n        uint256 tmp_balance;\r\n        uint256 tmp_deflation;\r\n\r\n        tmp = _balances[ad];\r\n        tmp_balance = tmp * (90 ** iidays) / (100 ** iidays);\r\n        tmp_deflation = tmp.sub(tmp_balance);\r\n        _burn(ad,tmp_deflation);\r\n\r\n        sendertime[ad] = block.timestamp;\r\n\r\n    }\r\n\r\n\r\n    function profit(address fromad,uint256 _liquidity) private {\r\n        \r\n        address userad=fromad;\r\n        for (uint i = 0; i < 10; i++) {\r\n\r\n            if(binding[userad]!=address(0)){\r\n\r\n                IERC20(uniswapV2Pair).transfer(binding[userad],_liquidity.div(10));\r\n                userad=binding[userad];\r\n\r\n            }else{\r\n                IERC20(uniswapV2Pair).transfer(profitaddress,_liquidity.mul(10-i).div(10));\r\n                return ;\r\n            }\r\n\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    function set_airdropLen(uint256 amount) public onlyOwner{\r\n        _airdropLen=amount;\r\n    }\r\n    function set_airdropAmount(uint256 amount) public onlyOwner{\r\n        _airdropAmount=amount;\r\n    }\r\n\r\n\r\n    function getrecommend(address from)  public view returns (address) {\r\n        return binding[from];\r\n    }\r\n\r\n    function withdraw(address token,uint256 amount)  public onlyOwner{\r\n        IERC20(token).transfer(_holder, amount);\r\n    }\r\n\r\n    function getuniswapV2Pair()  public view returns (address) {\r\n        return uniswapV2Pair;\r\n    }\r\n\r\n    function settestcount(uint256 amount)  public {\r\n        testcount=amount;\r\n    }\r\n\r\n    function gettestcount()  public  view returns (uint256) {\r\n        return testcount;\r\n    }\r\n \r\n    function setdeflationtime(uint256 amount)  public {\r\n        deflationtime=amount;\r\n    }\r\n\r\n    function getdeflationtime()  public  view returns (uint256) {\r\n        return deflationtime;\r\n    }\r\n\r\n\r\n    function swapandaddliquidity(uint256 amountIn) private  lockTheSwap   returns (uint256){   \r\n        // IERC20(tokenA).transferFrom(to,address(this),amountIn);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uad;\r\n        uint256 half;\r\n        half=amountIn.div(2);\r\n        IERC20(path[0]).approve(address(uniswapV2Router), half);\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            half,\r\n            0,\r\n            path,\r\n            reflowad,\r\n            block.timestamp.add(12000)\r\n        );\r\n        // return 0;\r\n        \r\n        if(IERC20(uad).balanceOf(reflowad)>0){\r\n            IERC20(uad).transferFrom(reflowad,address(this),IERC20(uad).balanceOf(reflowad));\r\n        }\r\n\r\n        IERC20(path[0]).approve(address(uniswapV2Router), half);\r\n        IERC20(path[1]).approve(address(uniswapV2Router), IERC20(path[1]).balanceOf(address(this)));\r\n        uint256 tmpliqu;\r\n         // add the liquidity\r\n        (,,tmpliqu)=uniswapV2Router.addLiquidity(\r\n             path[0],\r\n             path[1],\r\n             half,\r\n             IERC20(path[1]).balanceOf(address(this)),\r\n             0,\r\n             0,\r\n             reflowad,\r\n             block.timestamp.add(12000)\r\n        );\r\n        return tmpliqu;\r\n\r\n    }\r\n\r\n    function gettoken01() public view returns (address, address, bool){\r\n        return (IUniswapV2Pair(address(uniswapV2Pair)).token0(), address(this), IUniswapV2Pair(address(uniswapV2Pair)).token0() < address(this));\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_airdropLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOflp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getdeflationtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getrecommend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gettestcount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gettoken01\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getuniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"set_airdropAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"set_airdropLen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setdeflationtime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"settestcount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f4b1119844e73277cda866965220f8351d079bb0f4fe81d5a602893bc15948b7"}