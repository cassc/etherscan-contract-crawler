{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/infrastructure/FacetRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport {IFacetRegistry} from \\\"./interfaces/IFacetRegistry.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\n/**\\n * @title Facet Registry\\n * @dev Contract to keep track of facets & function selectors addable to user wallets\\n * @author David Yongjun Kim (@Powerstream3604)\\n */\\ncontract FacetRegistry is IFacetRegistry, Ownable2Step {\\n    mapping(address => FacetRegistryConfig) private facets;\\n\\n    /**\\n     * @notice Transfers the ownership of the contract to the given owner\\n     * @param _owner Address of owner who has access to initialize the default security variables for security manager\\n     */\\n    constructor(address _owner) {\\n        transferOwnership(_owner);\\n        _transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @dev Registers a facet and it's function selectors to registry\\n     * @param _facet address of facet\\n     * @param _facetSelectors list of function selectors of the facet\\n     */\\n    function registerFacetFunctionSelectors(\\n        address _facet,\\n        bytes4[] calldata _facetSelectors\\n    ) external override onlyOwner {\\n        FacetRegistryConfig storage facetConfig = facets[_facet];\\n        uint256 facetSelectorsLength = _facetSelectors.length;\\n        for (uint256 i; i < facetSelectorsLength; ) {\\n            if (facetConfig.info[_facetSelectors[i]].exists)\\n                revert FacetRegistry__FacetSelectorAlreadyRegistered();\\n\\n            facetConfig.info[_facetSelectors[i]].exists = true;\\n            facetConfig.info[_facetSelectors[i]].index = uint128(\\n                facetConfig.selectors.length\\n            );\\n            facetConfig.selectors.push(_facetSelectors[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit FacetFunctionSelectorsRegistered(_facet, _facetSelectors);\\n    }\\n\\n    /**\\n     * @dev Removes a registered facet and it's corresponding selectors from registry\\n     * @param _facet address of facet\\n     * @param _facetSelectors list of function selectors of the facet\\n     */\\n    function removeFacetFunctionSelectors(\\n        address _facet,\\n        bytes4[] calldata _facetSelectors\\n    ) external override onlyOwner {\\n        FacetRegistryConfig storage facetConfig = facets[_facet];\\n        uint256 facetSelectorsLength = _facetSelectors.length;\\n        for (uint256 i; i < facetSelectorsLength; ) {\\n            if (!facetConfig.info[_facetSelectors[i]].exists)\\n                revert FacetRegistry__UnregisteredFacetSelector();\\n\\n            bytes4 lastSelector = facetConfig.selectors[\\n                facetConfig.selectors.length - 1\\n            ];\\n            if (_facetSelectors[i] != lastSelector) {\\n                uint128 targetIndex = facetConfig\\n                    .info[_facetSelectors[i]]\\n                    .index;\\n                facetConfig.selectors[targetIndex] = lastSelector;\\n                facetConfig.info[lastSelector].index = targetIndex;\\n            }\\n            facetConfig.selectors.pop();\\n            delete facetConfig.info[_facetSelectors[i]];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit FacetFunctionSelectorsRemoved(_facet, _facetSelectors);\\n    }\\n\\n    /**\\n     * @dev Checks if a facet and it's selectors given is registered to facet registry\\n     * @param _facet Address of facet\\n     * @param _facetSelectors List of function selectors of the facet\\n     */\\n    function areFacetFunctionSelectorsRegistered(\\n        address _facet,\\n        bytes4[] calldata _facetSelectors\\n    ) external view override returns (bool) {\\n        FacetRegistryConfig storage facetConfig = facets[_facet];\\n        uint256 facetSelectorsLength = _facetSelectors.length;\\n        if (facetSelectorsLength == 0) return false;\\n        for (uint256 i; i < facetSelectorsLength; ) {\\n            if (!facetConfig.info[_facetSelectors[i]].exists) return false;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Checks if a facet and it's selector given is registered to facet registry\\n     * @param _facet Address of facet\\n     * @param _facetSelector List of function selectors of the facet\\n     * @return isRegistered Bool value showing if the selector is registered\\n     */\\n    function isFacetFunctionSelectorRegistered(\\n        address _facet,\\n        bytes4 _facetSelector\\n    ) external view override returns (bool isRegistered) {\\n        FacetRegistryConfig storage facetConfig = facets[_facet];\\n        isRegistered = facetConfig.info[_facetSelector].exists;\\n    }\\n\\n    /**\\n     * @dev Get the registered selectors of facet from registry\\n     * @param _facet Address of facet\\n     * @return selectors Selectors registered to facet\\n     */\\n    function getFacetFunctionSelectors(\\n        address _facet\\n    ) external view override returns (bytes4[] memory selectors) {\\n        FacetRegistryConfig storage facetConfig = facets[_facet];\\n        selectors = facetConfig.selectors;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/infrastructure/interfaces/IFacetRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\n/**\\n * @title Facet Registry Interface\\n * @dev Interface for Facet Registry contract to keep track of facets & function selectors addable to user wallets\\n * @author David Yongjun Kim (@Powerstream3604)\\n */\\ninterface IFacetRegistry {\\n    struct FacetRegistryConfig {\\n        bytes4[] selectors;\\n        mapping(bytes4 => FacetInfo) info;\\n    }\\n    struct FacetInfo {\\n        bool exists;\\n        uint128 index;\\n    }\\n\\n    event FacetFunctionSelectorsRegistered(\\n        address facet,\\n        bytes4[] facetSelectors\\n    );\\n    event FacetFunctionSelectorsRemoved(address facet, bytes4[] facetSelectors);\\n\\n    error FacetRegistry__FacetSelectorAlreadyRegistered();\\n    error FacetRegistry__UnregisteredFacetSelector();\\n\\n    function registerFacetFunctionSelectors(\\n        address facet,\\n        bytes4[] calldata facetSelectors\\n    ) external;\\n\\n    function removeFacetFunctionSelectors(\\n        address facet,\\n        bytes4[] calldata facetSelectors\\n    ) external;\\n\\n    function areFacetFunctionSelectorsRegistered(\\n        address facet,\\n        bytes4[] calldata facetSelectors\\n    ) external view returns (bool);\\n\\n    function isFacetFunctionSelectorRegistered(\\n        address facet,\\n        bytes4 facetSelector\\n    ) external view returns (bool);\\n\\n    function getFacetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FacetRegistry__FacetSelectorAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FacetRegistry__UnregisteredFacetSelector\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4[]\",\"name\":\"facetSelectors\",\"type\":\"bytes4[]\"}],\"name\":\"FacetFunctionSelectorsRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4[]\",\"name\":\"facetSelectors\",\"type\":\"bytes4[]\"}],\"name\":\"FacetFunctionSelectorsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"_facetSelectors\",\"type\":\"bytes4[]\"}],\"name\":\"areFacetFunctionSelectorsRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"getFacetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_facetSelector\",\"type\":\"bytes4\"}],\"name\":\"isFacetFunctionSelectorRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"_facetSelectors\",\"type\":\"bytes4[]\"}],\"name\":\"registerFacetFunctionSelectors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"_facetSelectors\",\"type\":\"bytes4[]\"}],\"name\":\"removeFacetFunctionSelectors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FacetRegistry", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "0000000000000000000000008e09185c92aed7692919b53c0ccdd163ec16d7a2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}