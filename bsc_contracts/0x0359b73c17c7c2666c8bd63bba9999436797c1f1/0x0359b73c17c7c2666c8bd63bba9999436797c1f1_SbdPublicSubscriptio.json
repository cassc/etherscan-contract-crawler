{"SourceCode": "// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n// File: contracts/libraries/TransferHelper.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\r\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n//File:./lib/safeMath.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n//\tSPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISupNode{\r\n    function mintSupNode(address _to) external;\r\n    function getStatus()external view returns(bool);\r\n}\r\ninterface IBigNode{\r\n    function mintBigNode(address _to) external;\r\n    function getStatus()external view returns(bool);\r\n}\r\ninterface ISmallNode{\r\n        function mintSmallNode(address _to) external ;\r\n        function getStatus()external view returns(bool);\r\n}\r\ninterface IOgLock{\r\n        function lock(address _user,uint256 _svtAmount) external;\r\n}\r\ninterface ISVT{\r\n    function mint(address _to, uint256 _amount)external;\r\n    function burn(address _to, uint256 _amount) external;\r\n}\r\n//add Accuracy\r\ncontract SbdPublicSubscription is Ownable,Pausable ,ReentrancyGuard{\r\n\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n  uint256 constant private invitationLevel = 5;\r\n    struct assignAndRate {\r\n        address assign;\r\n        uint256 rate;\r\n    }\r\n\r\n    EnumerableSet.AddressSet private adminsLevelTwo;\r\n    EnumerableSet.AddressSet private adminsLevelThree;\r\n    EnumerableSet.AddressSet private adminsLevelFour;\r\n    EnumerableSet.AddressSet private adminsLevelFive;\r\n    EnumerableSet.AddressSet private adminsLevelSix;\r\n    EnumerableSet.AddressSet private adminsLevelSeven;\r\n    EnumerableSet.AddressSet private adminsLevelEight;\r\n    EnumerableSet.AddressSet private adminsLevelNine;\r\n    EnumerableSet.AddressSet private supAccount;\r\n\r\n\tERC20 public sbd;\r\n    uint256 maxUint256 = 2**256 - 1;\r\n    bool public initRate;\r\n    bool public initTeamRate;\r\n\taddress public usdt;\r\n    address public svt;\r\n    address public ogLock;\r\n    address public supNode;\r\n    address public bigNode;\r\n    address public smallNode;\r\n    uint256 public registerId;\r\n\tuint256 public salePrice;\r\n    uint256 public maxTwo;\r\n    uint256 public maxThree;\r\n    uint256 public maxFour;\r\n    uint256 public maxFive;\r\n    uint256 public maxSix;\r\n    uint256 public maxSeven;\r\n    uint256 public maxEight;\r\n    uint256 public maxNine;\r\n    uint256 public supAccountTotalUsedAmount;\r\n    uint256[] public inviteRate;\r\n    uint256[] public teamRate;\r\n    uint256 public buyId;\r\n    uint256 public totalDonate;\r\n    uint256[] public validNumbers =\r\n    [\r\n        200000000000000000000,\r\n        500000000000000000000,\r\n        1000000000000000000000,\r\n        2000000000000000000000,\r\n        3000000000000000000000,\r\n        4000000000000000000000,\r\n        5000000000000000000000,\r\n        6000000000000000000000,\r\n        7000000000000000000000,\r\n        8000000000000000000000,\r\n        9000000000000000000000,\r\n        10000000000000000000000\r\n    ];\r\n    assignAndRate[] public assignAndRates;\r\n\tmapping(address => uint256) public userTotalBuy;\r\n    mapping(address => bool) public isRecommender;\r\n    mapping(address => address) public recommender;\r\n    mapping(address => address[]) public setAdminLevelTwo_;\r\n    mapping(address => address[]) public setAdminLevelThree_;\r\n    mapping(address => address[]) public setAdminLevelFour_;\r\n    mapping(address => address[]) public setAdminLevelFive_;\r\n    mapping(address => address[]) public setAdminLevelSix_;\r\n    mapping(address => address[]) public setAdminLevelSeven_;\r\n    mapping(address => address[]) public setAdminLevelEight_;\r\n    mapping(address => address[]) public setAdminLevelNine_;\r\n    mapping(address => bool) public isNotRegister;\r\n    mapping(address => uint256) public activeInviteAmount;\r\n    mapping(address => uint256) public supAccountUsedAmount;\r\n    mapping(address => mapping(uint256 => address)) public userTeamReward;\r\n    mapping(address => address) public userTeam;\r\n    mapping(address =>mapping(address => bool)) public blackList;\r\n    mapping(uint256 => address) public nftType;\r\n    event allteam(\r\n        address admin1,\r\n        address admin2,\r\n        address admin3,\r\n        address admin4,\r\n        address admin5,\r\n        address admin6,\r\n        address admin7,\r\n        address admin8,\r\n        address admin9,\r\n        address addr\r\n    );\r\n    event allteamrate(\r\n        uint256 rate1,\r\n        uint256 rate2,\r\n        uint256 rate3,\r\n        uint256 rate4,\r\n        uint256 rate5,\r\n        uint256 rate6,\r\n        uint256 rate7,\r\n        uint256 rate8,\r\n        uint256 rate9,\r\n        address addr\r\n    );\r\n    event allInvite(\r\n        address recommender1,\r\n        address recommender2,\r\n        address recommender3,\r\n        address recommender4,\r\n        address recommender5,\r\n        uint256 rate1,\r\n        uint256 rate2,\r\n        uint256 rate3,\r\n        uint256 rate4,\r\n        uint256 rate5,\r\n        address addr\r\n    );\r\n    event allRecord(\r\n        uint256 no,\r\n        uint256 salePrice,\r\n        address recommender,\r\n        address addr,\r\n        uint256 usdtAmount,\r\n        uint256 sbdAmount,\r\n        uint256 lockSbd,\r\n        address receiveNft\r\n        );\r\n    event allRegister(uint256 id,address recommenders, address _user);\r\n    event blackUser(address operator, address user);\r\n    event withdrawRecord(address addr, uint256 amount);\r\n    event deposit(address addr , uint256 amount);\r\n    modifier onlyAdminTwo() {\r\n        require(checkAddrForAdminLevelTwo(msg.sender));\r\n        _;\r\n    }\r\n    modifier onlyAdminThree() {\r\n        require(checkAddrForAdminLevelThree(msg.sender));\r\n        _;\r\n    }\r\n    modifier onlyAdminFour() {\r\n        require(checkAddrForAdminLevelFour(msg.sender));\r\n        _;\r\n    }\r\n    modifier onlyAdminFive() {\r\n        require(checkAddrForAdminLevelFive(msg.sender));\r\n        _;\r\n    }\r\n    modifier onlyAdminSix(){\r\n        require(checkAddrForAdminLevelSix(msg.sender));\r\n        _;\r\n    }\r\n    modifier onlyAdminSeven(){\r\n        require(checkAddrForAdminLevelSeven(msg.sender));\r\n        _;\r\n    }\r\n    modifier onlyAdminEight(){\r\n        require(checkAddrForAdminLevelEight(msg.sender));\r\n        _;\r\n    }\r\n    modifier onlyAdminNine(){\r\n        require(checkAddrForAdminLevelNine(msg.sender));\r\n        _;\r\n    }\r\n\tconstructor(ERC20 _sbd,  address _usdt, address _svt, address _supNode , address _bigNode,address _smallNode,address _ogLock) {\r\n\t\tsbd = _sbd;\r\n\t\tusdt = _usdt;\r\n\t\tsalePrice = 3;\r\n        maxTwo = 50;\r\n        maxThree = 50;\r\n        maxFour = 50;\r\n        maxFive = 50;\r\n        maxSix = 50;\r\n        maxSeven = 50;\r\n        maxEight = 50;\r\n        maxNine = 50;\r\n        supAccountTotalUsedAmount = 50;\r\n        registerId =1;\r\n        svt = _svt;\r\n        supNode = _supNode;\r\n        bigNode = _bigNode;\r\n        smallNode = _smallNode;\r\n        ogLock = _ogLock;\r\n        setNftType(2000,_smallNode );\r\n        setNftType(3000, _smallNode);\r\n        setNftType(4000, _smallNode);\r\n        setNftType(5000,_bigNode);\r\n        setNftType(6000,_bigNode);\r\n        setNftType(7000,_bigNode);\r\n        setNftType(8000,_bigNode);\r\n        setNftType(9000,_bigNode);\r\n        setNftType(10000,_supNode);\r\n\t}\r\n    function setOgLock(address _oglock) public onlyOwner{\r\n        ogLock = _oglock;\r\n    }\r\n  \r\n    function setSvt(address _svt)public onlyOwner {\r\n        svt = _svt;\r\n    }\r\n    function setNftType(uint256 _num, address _nft) public onlyOwner{\r\n        nftType[_num] = _nft;\r\n    }\r\n    function deleteNftType(uint256 _num) public onlyOwner {\r\n        delete nftType[_num];\r\n    }\r\n    function setSupNode(address _supNode) public onlyOwner{\r\n        supNode = _supNode;\r\n    }\r\n    function setBigNode(address _bigNode) public onlyOwner {\r\n        bigNode = _bigNode;\r\n    }\r\n    function setSmallNode(address _smallNode) public onlyOwner {\r\n        smallNode = _smallNode;\r\n    }\r\n\r\n    function setSupAccountUsedAmount(uint256 _amount) public onlyOwner {\r\n        supAccountTotalUsedAmount = _amount;\r\n    }\r\n    function isValidNumber(uint256 number) private view returns (bool) {\r\n        for (uint i = 0; i < validNumbers.length; i++) {\r\n            if (validNumbers[i] == number) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\t//onlyOwner\r\n    function setUsdt(address _usdt) public onlyOwner {\r\n        usdt = _usdt;\r\n    }\r\n \r\n  \r\n\tfunction setSBDAddress(ERC20 _sbd) public onlyOwner {\r\n\t\tsbd = _sbd;\r\n\t}\r\n\tfunction setSalePrice(uint256 _salePrice) public onlyOwner {\r\n\t\tsalePrice = _salePrice;\r\n\t}\r\n    function setAdminForTwo(uint256 _max) public onlyOwner {\r\n        if(_max == 0) {\r\n        maxTwo = maxUint256;\r\n        return;\r\n        }\r\n        maxTwo = _max;\r\n    }\r\n    function setAdminForThree(uint256 _max) public onlyOwner {\r\n        if(_max == 0) {\r\n        maxThree = maxUint256;\r\n        return;\r\n        }\r\n        maxThree = _max;\r\n    }\r\n    function setAdminForFour(uint256 _max) public onlyOwner {\r\n        if(_max == 0) {\r\n        maxFour = maxUint256;\r\n        return;\r\n        }\r\n        maxFour = _max;\r\n    }\r\n    function setAdminForFive(uint256 _max) public onlyOwner {\r\n        if(_max ==  0) {\r\n            maxFive = maxUint256;\r\n            return;\r\n        }\r\n        maxFive = _max;\r\n    }\r\n     function setAdminForSix(uint256 _max) public onlyOwner {\r\n        if(_max ==  0) {\r\n            maxSix = maxUint256;\r\n            return;\r\n        }\r\n        maxSix = _max;\r\n    }\r\n     function setAdminForSeven(uint256 _max) public onlyOwner {\r\n        if(_max ==  0) {\r\n            maxSeven = maxUint256;\r\n            return;\r\n        }\r\n        maxSeven = _max;\r\n    }\r\n     function setAdminForEight(uint256 _max) public onlyOwner {\r\n        if(_max ==  0) {\r\n            maxEight = maxUint256;\r\n            return;\r\n        }\r\n        maxEight = _max;\r\n    }\r\n     function setAdminForNine(uint256 _max) public onlyOwner {\r\n        if(_max ==  0) {\r\n            maxNine = maxUint256;\r\n            return;\r\n        }\r\n        maxNine = _max;\r\n    }\r\n \r\n    function checkAddrForSupAccount(address _user) public view returns(bool) {\r\n        return supAccount.contains(_user);\r\n    }\r\n    function checkAddrForAdminLevelTwo(address _user) public view returns(bool) {\r\n        return adminsLevelTwo.contains(_user);\r\n    }\r\n    function checkAddrForAdminLevelThree(address _user) public view returns(bool){\r\n        return adminsLevelThree.contains(_user);\r\n    }\r\n    function checkAddrForAdminLevelFour(address _user) public view returns(bool){\r\n        return adminsLevelFour.contains(_user);\r\n    }\r\n    function checkAddrForAdminLevelFive(address _user) public view returns(bool){\r\n        return adminsLevelFive.contains(_user);\r\n    }\r\n    function checkAddrForAdminLevelSix(address _user) public view returns(bool){\r\n        return adminsLevelSix.contains(_user);\r\n    }\r\n    function checkAddrForAdminLevelSeven(address _user) public view returns(bool){\r\n        return adminsLevelSeven.contains(_user);\r\n    }\r\n    function checkAddrForAdminLevelEight(address _user) public view returns(bool){\r\n        return adminsLevelEight.contains(_user);\r\n    }\r\n    function checkAddrForAdminLevelNine(address _user) public view returns(bool){\r\n        return adminsLevelNine.contains(_user);\r\n    }\r\n    function checkTeam(address _user) public view returns(bool) {\r\n        address team = recommender[_user];\r\n        for(uint256 i = 0 ;i < 9 ;i++){\r\n            if(msg.sender == team){\r\n                return true;\r\n            }\r\n            team = recommender[team];\r\n        }\r\n        return false;\r\n    }\r\n    function setBlackList(address _user) public onlyAdminTwo{\r\n        require(checkTeam(_user));\r\n        blackList[msg.sender][_user] = !blackList[msg.sender][_user];\r\n        emit blackUser(msg.sender,_user );\r\n    }\r\n    function inviteFunc(address _addr , address _admin) internal{\r\n        if (recommender[_addr] == address(0) &&  recommender[_addr] != _admin && !isRecommender[_addr] ) {\r\n             recommender[_addr] = _admin;\r\n             isRecommender[_addr] = true;\r\n             }else{\r\n            revert();\r\n             }\r\n    }\r\n    function setAdminLevelTwo(address[] memory _addr) public onlyOwner{\r\n        for(uint i = 0; i < _addr.length;i++){\r\n            require(msg.sender != _addr[i]);\r\n            require(!isNotRegister[_addr[i]]);\r\n            require(!checkAddrForAdminLevelTwo(_addr[i]));\r\n            inviteFunc(_addr[i],msg.sender);\r\n            adminsLevelTwo.add(_addr[i]);\r\n            setAdminLevelTwo_[msg.sender].push(_addr[i]);\r\n            emit allRegister(0, msg.sender, _addr[i]);\r\n        }\r\n    }\r\n    function setAdminLevelThree(address[] memory _addr) public onlyAdminTwo {\r\n        require(setAdminLevelThree_[msg.sender].length < getMax(msg.sender) && _addr.length < getMax(msg.sender));\r\n        for(uint256 i = 0; i < _addr.length; i++){\r\n            require(msg.sender != _addr[i]);\r\n            require(!isNotRegister[_addr[i]]);\r\n            require(!checkAddrForAdminLevelThree(_addr[i]));\r\n            inviteFunc(_addr[i],msg.sender);\r\n            adminsLevelThree.add(_addr[i]);\r\n            setAdminLevelThree_[msg.sender].push(_addr[i]);\r\n            emit allRegister(0, msg.sender, _addr[i]);\r\n            \r\n        }\r\n    }\r\n      function setAdminLevelFour(address[] memory _addr) public onlyAdminThree{\r\n        require(setAdminLevelFour_[msg.sender].length < getMax(msg.sender) && _addr.length < getMax(msg.sender));\r\n        for(uint i=0;i<_addr.length;i++){\r\n            require(msg.sender != _addr[i]);\r\n            require(!isNotRegister[_addr[i]]);    \r\n            require(!checkAddrForAdminLevelFour(_addr[i]));\r\n            inviteFunc(_addr[i],msg.sender);\r\n            adminsLevelFour.add(_addr[i]);\r\n           setAdminLevelFour_[msg.sender].push(_addr[i]);\r\n            emit allRegister(0, msg.sender, _addr[i]);\r\n\r\n        }\r\n    }\r\n    function setAdminLevelFive(address[] memory _addr) public onlyAdminFour {\r\n        require(setAdminLevelFive_[msg.sender].length < getMax(msg.sender) && _addr.length < getMax(msg.sender));\r\n        for(uint i=0;i<_addr.length;i++){\r\n            require(msg.sender != _addr[i]);\r\n            require(!isNotRegister[_addr[i]]);    \r\n            require(!checkAddrForAdminLevelFive(_addr[i]));\r\n            inviteFunc(_addr[i],msg.sender);\r\n            adminsLevelFive.add(_addr[i]);\r\n            setAdminLevelFive_[msg.sender].push(_addr[i]);\r\n            emit allRegister(0, msg.sender, _addr[i]);\r\n        }\r\n    }\r\n       function setAdminLevelSix(address[] memory _addr) public onlyAdminFive {\r\n        require(setAdminLevelSix_[msg.sender].length < getMax(msg.sender) && _addr.length < getMax(msg.sender));\r\n        for(uint i=0;i<_addr.length;i++){\r\n            require(msg.sender != _addr[i]);\r\n            require(!isNotRegister[_addr[i]]);\r\n            require(!checkAddrForAdminLevelSix(_addr[i]));\r\n            inviteFunc(_addr[i],msg.sender);\r\n            adminsLevelSix.add(_addr[i]);\r\n            setAdminLevelSix_[msg.sender].push(_addr[i]);\r\n            emit allRegister(0, msg.sender, _addr[i]);\r\n        }\r\n    }\r\n   function setAdminLevelSeven(address[] memory _addr) public onlyAdminSix {\r\n        require(setAdminLevelSeven_[msg.sender].length < getMax(msg.sender) && _addr.length < getMax(msg.sender));\r\n        for(uint i=0;i<_addr.length;i++){\r\n            require(msg.sender != _addr[i]);\r\n            require(!isNotRegister[_addr[i]]);\r\n            require(!checkAddrForAdminLevelSeven(_addr[i]));\r\n            inviteFunc(_addr[i],msg.sender);\r\n            adminsLevelSeven.add(_addr[i]);\r\n            setAdminLevelSeven_[msg.sender].push(_addr[i]);\r\n            emit allRegister(0, msg.sender, _addr[i]);\r\n        }\r\n    }\r\n       function setAdminLevelEight(address[] memory _addr) public onlyAdminSeven {\r\n        require(setAdminLevelEight_[msg.sender].length < getMax(msg.sender) && _addr.length < getMax(msg.sender));\r\n        for(uint i=0;i<_addr.length;i++){\r\n            require(msg.sender != _addr[i]);\r\n            require(!isNotRegister[_addr[i]]);\r\n            require(!checkAddrForAdminLevelEight(_addr[i]));\r\n            inviteFunc(_addr[i],msg.sender);\r\n            adminsLevelEight.add(_addr[i]);\r\n            setAdminLevelEight_[msg.sender].push(_addr[i]);\r\n            emit allRegister(0, msg.sender, _addr[i]);\r\n        }\r\n    }\r\n    function setAdminLevelNine(address[] memory _addr) public onlyAdminEight {\r\n        require(setAdminLevelNine_[msg.sender].length < getMax(msg.sender) && _addr.length < getMax(msg.sender));\r\n        for(uint i=0;i<_addr.length;i++){\r\n            require(msg.sender != _addr[i]);\r\n            require(!isNotRegister[_addr[i]]);\r\n            require(!checkAddrForAdminLevelNine(_addr[i]));\r\n            inviteFunc(_addr[i],msg.sender);\r\n            adminsLevelNine.add(_addr[i]);\r\n            setAdminLevelNine_[msg.sender].push(_addr[i]);\r\n            emit allRegister(0, msg.sender, _addr[i]);\r\n        }\r\n    }\r\n    function removeAdminLevelTwo(address _addr) public onlyOwner{\r\n        adminsLevelTwo.remove(_addr);\r\n        for(uint256 i = 0 ; i < setAdminLevelTwo_[msg.sender].length; i ++) {\r\n            if(_addr == setAdminLevelTwo_[msg.sender][i]){\r\n                setAdminLevelTwo_[msg.sender][i] = setAdminLevelTwo_[msg.sender][setAdminLevelTwo_[msg.sender].length - 1];\r\n                setAdminLevelTwo_[msg.sender].pop();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    function removeAdminLevelThree(address _addr) public onlyAdminTwo {\r\n        adminsLevelThree.remove(_addr);\r\n          for(uint256 i = 0 ; i < setAdminLevelThree_[msg.sender].length; i ++) {\r\n            if(_addr == setAdminLevelThree_[msg.sender][i]){\r\n                setAdminLevelThree_[msg.sender][i] = setAdminLevelThree_[msg.sender][setAdminLevelThree_[msg.sender].length - 1];\r\n                setAdminLevelThree_[msg.sender].pop();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    function removeAdminLevelFour(address _addr) public onlyAdminThree{\r\n        adminsLevelFour.remove(_addr);\r\n          for(uint256 i = 0 ; i < setAdminLevelFour_[msg.sender].length; i ++) {\r\n            if(_addr == setAdminLevelFour_[msg.sender][i]){\r\n                setAdminLevelFour_[msg.sender][i] = setAdminLevelFour_[msg.sender][setAdminLevelFour_[msg.sender].length - 1];\r\n                setAdminLevelFour_[msg.sender].pop();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    function removeAdminLevelFive(address _addr) public onlyAdminFour{\r\n            adminsLevelFive.remove(_addr);\r\n               for(uint256 i = 0 ; i < setAdminLevelFive_[msg.sender].length; i ++) {\r\n            if(_addr == setAdminLevelFive_[msg.sender][i]){\r\n                setAdminLevelFive_[msg.sender][i] = setAdminLevelFive_[msg.sender][setAdminLevelFive_[msg.sender].length - 1];\r\n                setAdminLevelFive_[msg.sender].pop();\r\n                return;\r\n            }\r\n        }\r\n           \r\n    }\r\n      function removeAdminLevelSix(address _addr) public onlyAdminFive{\r\n            adminsLevelSix.remove(_addr);\r\n               for(uint256 i = 0 ; i < setAdminLevelSix_[msg.sender].length; i ++) {\r\n            if(_addr == setAdminLevelSix_[msg.sender][i]){\r\n                setAdminLevelSix_[msg.sender][i] = setAdminLevelSix_[msg.sender][setAdminLevelSix_[msg.sender].length - 1];\r\n                setAdminLevelSix_[msg.sender].pop();\r\n                return;\r\n            }\r\n        }\r\n           \r\n    }  function removeAdminLevelSeven(address _addr) public onlyAdminSix{\r\n            adminsLevelSeven.remove(_addr);\r\n               for(uint256 i = 0 ; i < setAdminLevelSeven_[msg.sender].length; i ++) {\r\n            if(_addr == setAdminLevelSeven_[msg.sender][i]){\r\n                setAdminLevelSeven_[msg.sender][i] = setAdminLevelSeven_[msg.sender][setAdminLevelSeven_[msg.sender].length - 1];\r\n                setAdminLevelSeven_[msg.sender].pop();\r\n                return;\r\n            }\r\n        }\r\n           \r\n    }  function removeAdminLevelEight(address _addr) public onlyAdminSeven{\r\n            adminsLevelEight.remove(_addr);\r\n               for(uint256 i = 0 ; i < setAdminLevelEight_[msg.sender].length; i ++) {\r\n            if(_addr == setAdminLevelEight_[msg.sender][i]){\r\n                setAdminLevelEight_[msg.sender][i] = setAdminLevelEight_[msg.sender][setAdminLevelEight_[msg.sender].length - 1];\r\n                setAdminLevelEight_[msg.sender].pop();\r\n                return;\r\n            }\r\n        }\r\n           \r\n    }  function removeAdminLevelNine(address _addr) public onlyAdminEight{\r\n            adminsLevelNine.remove(_addr);\r\n               for(uint256 i = 0 ; i < setAdminLevelNine_[msg.sender].length; i ++) {\r\n            if(_addr == setAdminLevelNine_[msg.sender][i]){\r\n                setAdminLevelNine_[msg.sender][i] = setAdminLevelNine_[msg.sender][setAdminLevelNine_[msg.sender].length - 1];\r\n                setAdminLevelNine_[msg.sender].pop();\r\n                return;\r\n            }\r\n        }\r\n           \r\n    }\r\n    \r\n    function getMax(address _user) internal view returns(uint256) {\r\n        if(checkAddrForAdminLevelTwo(_user)){\r\n            return maxTwo;\r\n        }else if(checkAddrForAdminLevelThree(_user)) {\r\n            return maxThree;\r\n        }else if(checkAddrForAdminLevelFour(_user)){\r\n            return maxFour;\r\n        }else if(checkAddrForAdminLevelFive(_user)){\r\n            return maxFive;\r\n        }else if(checkAddrForAdminLevelSix(_user)){\r\n            return maxSix;\r\n        }else if(checkAddrForAdminLevelSeven(_user)){\r\n            return maxSeven;\r\n        }else if(checkAddrForAdminLevelEight(_user)){\r\n            return maxEight;\r\n        }else if(checkAddrForAdminLevelNine(_user)){\r\n            return maxNine;\r\n        }\r\n        return 0;\r\n    }\r\n  function setActivateAccountForL2(address[] memory _user) public  onlyAdminTwo {\r\n        for(uint256 i = 0 ; i < _user.length ; i++){\r\n            require(!checkAddrForSupAccount(_user[i]) && isNotRegister[_user[i]] == true);\r\n            supAccount.add(_user[i]);\r\n        }\r\n    }\r\n    function setActivateAccountForL9(address[] memory  _user) public onlyAdminNine{\r\n    require(activeInviteAmount[msg.sender] <= getMax(msg.sender) && _user.length < getMax(msg.sender));\r\n        for(uint256 i =0 ; i < _user.length ;i++) {\r\n            require(!isNotRegister[_user[i]]);\r\n            require(!checkAddrForSupAccount(_user[i]));\r\n            supAccount.add(_user[i]);\r\n            inviteFunc(_user[i],msg.sender);\r\n            activeInviteAmount[msg.sender] = activeInviteAmount[msg.sender].add(1);\r\n            // userTeamReward[_user[i]][0] = msg.sender; //9\r\n            // userTeamReward[_user[i]][1] = recommender[msg.sender];//8\r\n            // userTeamReward[_user[i]][2] = recommender[recommender[msg.sender]];//7\r\n            // userTeamReward[_user[i]][3] = recommender[recommender[recommender[msg.sender]]];//6\r\n            // userTeamReward[_user[i]][4] = recommender[recommender[recommender[recommender[msg.sender]]]];//5\r\n            // userTeamReward[_user[i]][5] = recommender[recommender[recommender[recommender[recommender[msg.sender]]]]];//4\r\n            // userTeamReward[_user[i]][6] = recommender[recommender[recommender[recommender[recommender[recommender[msg.sender]]]]]];//3\r\n            // userTeamReward[_user[i]][7] = recommender[recommender[recommender[recommender[recommender[recommender[recommender[msg.sender]]]]]]];//2\r\n            // userTeamReward[_user[i]][8] = recommender[recommender[recommender[recommender[recommender[recommender[recommender[recommender[msg.sender]]]]]]]];//1\r\n            for(uint256 j = 1 ; j < 9 ; j ++){\r\n                userTeamReward[_user[i]][0] = msg.sender; \r\n                userTeamReward[_user[i]][j] = recommender[userTeamReward[_user[i]][j - 1 ]];\r\n            }\r\n            emit allRegister(0, msg.sender, _user[i]);\r\n        }\r\n    }\r\n  \r\n\r\n    function addAssignAddressAndRatio(address[] memory _addr, uint256[] memory _rate) public onlyOwner{\r\n        require(initRate, 'please initial addInviteRate()');\r\n        for(uint i = 0 ; i < _addr.length; i++) {\r\n             if(assignAndRates.length > 0 ) {\r\n               require(checkRepeat(_addr[i]), 'The added address is duplicated, please readjust and add again') ;\r\n        }\r\n            assignAndRate memory ar = assignAndRate({assign:_addr[i],rate:_rate[i]});\r\n            assignAndRates.push(ar);\r\n        }\r\n    }\r\n\r\n    function checkRepeat(address _addr) internal view returns(bool){\r\n        for(uint256 i = 0 ; i < assignAndRates.length ; i ++) {\r\n            if(_addr == assignAndRates[i].assign) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    function removeAssiginAddressAndRatio(address[] memory _addr) public onlyOwner{\r\n        for(uint256 j = 0 ; j < _addr.length ;j ++ ) {\r\n        for(uint256 i = 0; i < assignAndRates.length ; i++){\r\n            if(assignAndRates[i].assign == _addr[j]) {\r\n                assignAndRates[i] = assignAndRates[assignAndRates.length - 1];\r\n                assignAndRates.pop();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    revert();\r\n}\r\n    function setAssignAddressAndRatio(uint256 _id, address _addr,uint256 _rate) public onlyOwner{\r\n        require(_id < assignAndRates.length);\r\n        assignAndRates[_id] = assignAndRate({\r\n            assign: _addr,\r\n            rate: _rate\r\n        });\r\n\r\n    }\r\n    function addTeamRate(uint256[] memory _rate) public onlyOwner{\r\n        require(!initTeamRate);\r\n        require(_rate.length ==9);\r\n        for(uint256 i = 0 ;i < _rate.length; i++){\r\n            teamRate.push(_rate[i]);\r\n        }\r\n        initTeamRate = true;\r\n    }\r\n   function setTeamRate(uint256 _id, uint256 _rate) public onlyOwner {\r\n       require(_id < teamRate.length);\r\n       teamRate[_id] = _rate;\r\n\r\n   }\r\n    function addInviteRate(uint256[] memory _rate) public onlyOwner{\r\n        require(!initRate);\r\n        require(_rate.length == 5 || inviteRate.length < 5 );\r\n        for(uint256 i = 0; i < _rate.length; i++) {\r\n            inviteRate.push(_rate[i]);\r\n        }\r\n        initRate = true;\r\n\r\n    }\r\n    function setInviteRate(uint256 _id , uint256 _rate) public onlyOwner{\r\n        require(_id < inviteRate.length, 'input error');\r\n        inviteRate[_id] = _rate;\r\n    }\r\n\r\n    function getRate() public view returns(uint256){\r\n        uint256 total;\r\n        uint256 _inviteRate;\r\n        uint256 _teamRate;\r\n        for(uint i = 0; i<assignAndRates.length; i++){\r\n            total += assignAndRates[i].rate;\r\n        }\r\n        for(uint i = 0 ; i< inviteRate.length ; i ++ ){\r\n            _inviteRate += inviteRate[i];\r\n        }\r\n        for(uint i = 0; i < teamRate.length; i++){\r\n            _teamRate+= teamRate[i];\r\n        }\r\n        return total + _inviteRate + _teamRate;\r\n    }\r\n    function depositF(address tokenAddress , uint256 tokens) public onlyOwner {\r\n         TransferHelper.safeTransferFrom(tokenAddress, msg.sender, address(this), tokens);\r\n         emit deposit(msg.sender, tokens);\r\n    }\r\n    function Claim(address tokenAddress, uint256 tokens)\r\n    public\r\n    onlyOwner\r\n    {\r\n        // IERC20(tokenAddress).transfer(msg.sender, tokens);\r\n        TransferHelper.safeTransfer(tokenAddress, msg.sender, tokens);\r\n        emit withdrawRecord(msg.sender, tokens);\r\n    }\r\n    function register(address _supAccountAddress) public nonReentrant whenNotPaused {\r\n        require(checkAddrForSupAccount(_supAccountAddress));\r\n\r\n        require(\r\n            !checkAddrForAdminLevelNine(msg.sender) &&\r\n            !checkAddrForAdminLevelEight(msg.sender) &&\r\n            !checkAddrForAdminLevelSeven(msg.sender)&&\r\n            !checkAddrForAdminLevelSix(msg.sender) &&\r\n            !checkAddrForAdminLevelFive(msg.sender) &&\r\n            !checkAddrForAdminLevelFour(msg.sender) &&\r\n            !checkAddrForAdminLevelThree(msg.sender) &&\r\n            !checkAddrForAdminLevelTwo(msg.sender));\r\n        require(supAccountUsedAmount[_supAccountAddress] <= supAccountTotalUsedAmount);\r\n        if(checkAddrForSupAccount(msg.sender) == true && isNotRegister[msg.sender] == false) {\r\n            isNotRegister[msg.sender] = true;\r\n            emit allRegister(registerId,recommender[msg.sender],msg.sender);\r\n            registerId++;\r\n            return;\r\n        }\r\n        require(!isNotRegister[msg.sender] && !isRecommender[msg.sender] );\r\n        inviteFunc(msg.sender, _supAccountAddress);\r\n        userTeam[msg.sender] = _supAccountAddress;\r\n        for(uint256 i = 0 ; i < 9 ; i++){\r\n        userTeamReward[msg.sender][i] = userTeamReward[_supAccountAddress][i];\r\n        }\r\n        isNotRegister[msg.sender] = true;\r\n        supAccountUsedAmount[_supAccountAddress] = supAccountUsedAmount[_supAccountAddress].add(1);\r\n        emit allRegister(registerId,_supAccountAddress,msg.sender);\r\n        registerId++;\r\n\r\n    }\r\n    function purchase(uint256 fee) external  whenNotPaused  nonReentrant{\r\n        require(isNotRegister[msg.sender]  );\r\n        require(getRate() == 10000);\r\n        require(isValidNumber(fee));\r\n        address _receiveNft = address(0);\r\n       if(!checkAddrForSupAccount(msg.sender)){\r\n            supAccount.add(msg.sender);\r\n        } \r\n        if(nftType[fee.div(10**18)]  == supNode && ISupNode(supNode).getStatus()){\r\n            ISupNode(supNode).mintSupNode(msg.sender);\r\n            _receiveNft = supNode;\r\n        }else if(nftType[fee.div(10**18)]  == bigNode && IBigNode(bigNode).getStatus()){\r\n            IBigNode(bigNode).mintBigNode(msg.sender);\r\n            _receiveNft = bigNode;\r\n        }else if( nftType[fee.div(10**18)]  == smallNode && ISmallNode(smallNode).getStatus()) {\r\n            ISmallNode(smallNode).mintSmallNode(msg.sender);\r\n            _receiveNft = smallNode;\r\n        }\r\n        //\u4e0d\u80fd\u5f71\u54cd\u8ba4\u8d2d\r\n        address[invitationLevel] memory invite;\r\n        uint256 sbdAmount = fee.mul(1000).div(salePrice).mul(2).div(10);\r\n        uint256 svtAmount = fee.mul(1000).div(salePrice).mul(8).div(10);\r\n        uint256 salePrice_ = salePrice;\r\n        uint256 usdtAmount = fee;\r\n        for(uint i = 1 ; i < invitationLevel; i++){\r\n        invite[0] = recommender[msg.sender];\r\n        invite[i] = recommender[invite[i - 1]];\r\n        }\r\n        require(sbdAmount <= getBalanceOfSbd());\r\n                for (uint256 i = 0; i < assignAndRates.length; i++) {\r\n                    // IERC20(usdt).transferFrom(msg.sender,assignAndRates[i].assign, fee.mul(assignAndRates[i].rate).div(10000));\r\n                    TransferHelper.safeTransferFrom(usdt,msg.sender,assignAndRates[i].assign, fee.mul(assignAndRates[i].rate).div(10000));\r\n                    }\r\n                    for(uint i = 0; i< invitationLevel;i++){\r\n                //    IERC20(usdt).transferFrom(msg.sender,invite[i], fee.mul(inviteRate[i]).div(10000));\r\n                TransferHelper.safeTransferFrom(usdt,msg.sender,invite[i], fee.mul(inviteRate[i]).div(10000) );\r\n                    }\r\n                 \r\n                        for(uint i = 0 ; i < 9 ;i ++){\r\n                            if(blackList[userTeamReward[msg.sender][7]][userTeamReward[msg.sender][i]]){\r\n                                continue;\r\n                            }\r\n                    //    IERC20(usdt).transferFrom(msg.sender,userTeamReward[msg.sender][i], fee.mul(teamRate[i]).div(10000));\r\n                    TransferHelper.safeTransferFrom(usdt,msg.sender,userTeamReward[msg.sender][i], fee.mul(teamRate[i]).div(10000));\r\n                        }\r\n        TransferHelper.safeTransfer(address(sbd),msg.sender, sbdAmount );\r\n        // sbd.transfer(msg.sender, sbdAmount);\r\n        ISVT(svt).mint(msg.sender,svtAmount);\r\n        // sbd.transfer(ogLock, svtAmount);\r\n        TransferHelper.safeTransfer(address(sbd),ogLock, sbdAmount );\r\n        IOgLock(ogLock).lock(msg.sender,svtAmount);\r\n        userTotalBuy[msg.sender] = userTotalBuy[msg.sender].add(fee);\r\n        totalDonate = totalDonate.add(fee);\r\n            emit allteam(\r\n                userTeamReward[msg.sender][0],\r\n                userTeamReward[msg.sender][1],\r\n                userTeamReward[msg.sender][2],\r\n                userTeamReward[msg.sender][3],\r\n                userTeamReward[msg.sender][4],\r\n                userTeamReward[msg.sender][5],\r\n                userTeamReward[msg.sender][6],\r\n                userTeamReward[msg.sender][7],\r\n                userTeamReward[msg.sender][8],\r\n                msg.sender\r\n             \r\n            );\r\n            emit allteamrate (\r\n                teamRate[0],\r\n                teamRate[1],\r\n                teamRate[2],\r\n                teamRate[3],\r\n                teamRate[4],\r\n                teamRate[5],\r\n                teamRate[6],\r\n                teamRate[7],\r\n                teamRate[8],\r\n                msg.sender\r\n            );\r\n            emit allRecord(\r\n            buyId,\r\n            salePrice_,\r\n            recommender[msg.sender],\r\n            msg.sender,\r\n            usdtAmount,\r\n            sbdAmount,\r\n            svtAmount,\r\n            _receiveNft\r\n            );\r\n            emit allInvite(\r\n            invite[4],\r\n            invite[3],\r\n            invite[2],\r\n            invite[1],\r\n            invite[0],\r\n            inviteRate[4],\r\n            inviteRate[3],\r\n            inviteRate[2],\r\n            inviteRate[1],\r\n            inviteRate[0],\r\n            msg.sender\r\n            );\r\n        buyId++;\r\n    }\r\n\r\n    function getActivateAccount() public view returns(address[] memory) {\r\n        return supAccount.values();\r\n    }\r\n\tfunction getBalanceOfSbd() public view returns(uint256) {\r\n\t\treturn sbd.balanceOf(address(this));\r\n\t}\r\n    function getAssignAndRateslength() public view returns(uint256) {\r\n        return assignAndRates.length;\r\n    }\r\n    function getAdminsLevelOneLength( address _user) public view returns( uint256 ) {\r\n        return setAdminLevelTwo_[_user].length;\r\n    }\r\n    function getAdminsLevelTwoLength(address _adminTwo) public view returns(uint256 ) {\r\n        return setAdminLevelThree_[_adminTwo].length;\r\n    }\r\n     function getAdminsLevelThreeLength(address _adminThree) public view returns(uint256) {\r\n        return setAdminLevelThree_[_adminThree].length;\r\n    }\r\n    function getAdminsLevelFourLength(address _adminFour) public view returns(uint256) {\r\n        return setAdminLevelFour_[_adminFour].length;\r\n    }\r\n      function getAdminsLevelFiveLength(address _adminFive) public view returns(uint256) {\r\n        return setAdminLevelFive_[_adminFive].length;\r\n    } \r\n    function getAdminsLevelSixLength(address _adminSix) public view returns(uint256) {\r\n        return setAdminLevelSix_[_adminSix].length;\r\n    }   \r\n    function getAdminsLevelSevenLength(address _adminSeven) public view returns(uint256) {\r\n        return setAdminLevelSeven_[_adminSeven].length;\r\n    }   \r\n    function getAdminsLevelEightLength(address _adminEight) public view returns(uint256) {\r\n        return setAdminLevelEight_[_adminEight].length;\r\n    }   \r\n    function getAdminsLevelNineLength(address _adminNine) public view returns(uint256) {\r\n        return setAdminLevelNine_[_adminNine].length;\r\n    }\r\n    function receiveSbd(uint256 _usdtAmount) public view returns(uint256 ){\r\n        return _usdtAmount.mul(1000).div(salePrice);\r\n    }\r\n    function receiveSvt(uint256 _usdtAmount) public view returns(uint256 ){\r\n        return receiveSbd(_usdtAmount).mul(8).div(10);\r\n    }\r\n \r\n     /**\r\n     * @dev Pause staking.\r\n     */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n    /**\r\n     * @dev Resume staking.\r\n     */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_sbd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_svt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supNode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bigNode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_smallNode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ogLock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recommender1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recommender2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recommender3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recommender4\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recommender5\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate4\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate5\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"allInvite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"no\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recommender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sbdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockSbd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveNft\",\"type\":\"address\"}],\"name\":\"allRecord\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recommenders\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin3\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin4\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin5\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin6\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin7\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin8\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin9\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"allteam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate4\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate5\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate6\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate7\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate8\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate9\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"allteamrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"blackUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRecord\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeInviteAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rate\",\"type\":\"uint256[]\"}],\"name\":\"addAssignAddressAndRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rate\",\"type\":\"uint256[]\"}],\"name\":\"addInviteRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rate\",\"type\":\"uint256[]\"}],\"name\":\"addTeamRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assignAndRates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assign\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bigNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkAddrForAdminLevelEight\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkAddrForAdminLevelFive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkAddrForAdminLevelFour\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkAddrForAdminLevelNine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkAddrForAdminLevelSeven\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkAddrForAdminLevelSix\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkAddrForAdminLevelThree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkAddrForAdminLevelTwo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkAddrForSupAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"deleteNftType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"depositF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivateAccount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminEight\",\"type\":\"address\"}],\"name\":\"getAdminsLevelEightLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminFive\",\"type\":\"address\"}],\"name\":\"getAdminsLevelFiveLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminFour\",\"type\":\"address\"}],\"name\":\"getAdminsLevelFourLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminNine\",\"type\":\"address\"}],\"name\":\"getAdminsLevelNineLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAdminsLevelOneLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminSeven\",\"type\":\"address\"}],\"name\":\"getAdminsLevelSevenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminSix\",\"type\":\"address\"}],\"name\":\"getAdminsLevelSixLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminThree\",\"type\":\"address\"}],\"name\":\"getAdminsLevelThreeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminTwo\",\"type\":\"address\"}],\"name\":\"getAdminsLevelTwoLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssignAndRateslength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceOfSbd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initTeamRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inviteRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isNotRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRecommender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSeven\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxThree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ogLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"receiveSbd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"receiveSvt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recommender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supAccountAddress\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAdminLevelEight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAdminLevelFive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAdminLevelFour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAdminLevelNine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAdminLevelSeven\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAdminLevelSix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAdminLevelThree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeAdminLevelTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"removeAssiginAddressAndRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbd\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"}],\"name\":\"setActivateAccountForL2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"}],\"name\":\"setActivateAccountForL9\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setAdminForEight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setAdminForFive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setAdminForFour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setAdminForNine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setAdminForSeven\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setAdminForSix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setAdminForThree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setAdminForTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"setAdminLevelEight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setAdminLevelEight_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"setAdminLevelFive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setAdminLevelFive_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"setAdminLevelFour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setAdminLevelFour_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"setAdminLevelNine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setAdminLevelNine_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"setAdminLevelSeven\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setAdminLevelSeven_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"setAdminLevelSix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setAdminLevelSix_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"setAdminLevelThree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setAdminLevelThree_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"setAdminLevelTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setAdminLevelTwo_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setAssignAddressAndRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bigNode\",\"type\":\"address\"}],\"name\":\"setBigNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setInviteRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setNftType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oglock\",\"type\":\"address\"}],\"name\":\"setOgLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_sbd\",\"type\":\"address\"}],\"name\":\"setSBDAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smallNode\",\"type\":\"address\"}],\"name\":\"setSmallNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSupAccountUsedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_supNode\",\"type\":\"address\"}],\"name\":\"setSupNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_svt\",\"type\":\"address\"}],\"name\":\"setSvt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setTeamRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"setUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smallNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supAccountTotalUsedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supAccountUsedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supNode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDonate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userTeamReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SbdPublicSubscription", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000019ed6899843234839e6ab15abf5d748299edf62100000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000039dbb10ac7b605a01c202e951c3f76d313e3a7ff0000000000000000000000001484061614973b1a55f8891d637e638decf5731e000000000000000000000000e7f56572c5c07262aafad33bbc921cc7090fc7c7000000000000000000000000f0387533638ac6c3fc496f872eb65a9ae74ee62c000000000000000000000000b4ad50d8793da57df8f2979c70dd8e0c265ce5d3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1195e178889b62f3581d895e8c54d225acd263a8b376919b075afb8c978b3bd1"}