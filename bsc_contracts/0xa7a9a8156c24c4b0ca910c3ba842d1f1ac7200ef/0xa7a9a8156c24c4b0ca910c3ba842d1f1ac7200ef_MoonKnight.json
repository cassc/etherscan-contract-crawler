{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/knight/MoonKnight.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../interfaces/IMoonKnight.sol\\\";\\r\\nimport \\\"../interfaces/IEquipment.sol\\\";\\r\\nimport \\\"../interfaces/IPet.sol\\\";\\r\\nimport \\\"../utils/AcceptedToken.sol\\\";\\r\\n\\r\\ncontract MoonKnight is IMoonKnight, ERC721, AcceptedToken, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n    uint private constant BPS = 10000;\\r\\n\\r\\n    IEquipment public equipmentContract;\\r\\n    IPet public petContract;\\r\\n\\r\\n    uint public floorPriceInBps = 200;\\r\\n    uint public marketFeeInBps = 22;\\r\\n    uint public serviceFeeInToken = 1e20;\\r\\n    uint public maxLevel = 100;\\r\\n    string private _uri;\\r\\n\\r\\n    Version[] public versions;\\r\\n    mapping(uint => uint) public knightsOnSale;\\r\\n    mapping(uint => mapping(address => uint)) public knightsWithOffers;\\r\\n    mapping(string => bool) public reservedNames;\\r\\n\\r\\n    Knight[] private _knights;\\r\\n    mapping(uint => uint) private _knightsWithPet;\\r\\n    mapping(uint => EnumerableSet.UintSet) private _knightSkills;\\r\\n\\r\\n    constructor(\\r\\n        IEquipment equipmentAddress,\\r\\n        IERC20 tokenAddress,\\r\\n        string memory baseURI,\\r\\n        uint maxSupply,\\r\\n        uint salePrice,\\r\\n        uint startTime,\\r\\n        uint revealTime,\\r\\n        string memory provenance\\r\\n    ) ERC721(\\\"MoonKnight\\\", \\\"KNIGHT\\\") AcceptedToken(tokenAddress) {\\r\\n        equipmentContract = equipmentAddress;\\r\\n        _uri = baseURI;\\r\\n        versions.push(Version(0, 0, maxSupply, salePrice, startTime, revealTime, provenance));\\r\\n    }\\r\\n\\r\\n    modifier onlyKnightOwner(uint knightId) {\\r\\n        require(ownerOf(knightId) == msg.sender, \\\"MoonKnight: not knight owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setEquipmentContract(IEquipment equipmentAddress) external onlyOwner {\\r\\n        require(address(equipmentAddress) != address(0));\\r\\n        equipmentContract = equipmentAddress;\\r\\n    }\\r\\n\\r\\n    function setPetContract(IPet petAddress) external onlyOwner {\\r\\n        require(address(petAddress) != address(0));\\r\\n        petContract = petAddress;\\r\\n    }\\r\\n\\r\\n    function setFloorPriceAndMarketFeeInBps(uint floorPrice, uint marketFee) external onlyOwner {\\r\\n        require(floorPrice + marketFee <= BPS);\\r\\n        floorPriceInBps = floorPrice;\\r\\n        marketFeeInBps = marketFee;\\r\\n    }\\r\\n\\r\\n    function setServiceFee(uint value) external onlyOwner {\\r\\n        serviceFeeInToken = value;\\r\\n    }\\r\\n\\r\\n    function setMaxLevel(uint newMaxLevel) external onlyOwner {\\r\\n        require(newMaxLevel > maxLevel);\\r\\n        maxLevel = newMaxLevel;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory baseURI) external onlyOwner {\\r\\n        _uri = baseURI;\\r\\n    }\\r\\n\\r\\n    function addNewVersion(\\r\\n        uint maxSupply,\\r\\n        uint salePrice,\\r\\n        uint startTime,\\r\\n        uint revealTime,\\r\\n        string memory provenance\\r\\n    ) external onlyOwner {\\r\\n        uint latestVersionId = getLatestVersion();\\r\\n        Version memory latestVersion = versions[latestVersionId];\\r\\n\\r\\n        require(latestVersion.currentSupply == latestVersion.maxSupply);\\r\\n\\r\\n        versions.push(Version(0, 0, maxSupply, salePrice, startTime, revealTime, provenance));\\r\\n        emit NewVersionAdded(latestVersionId + 1);\\r\\n    }\\r\\n\\r\\n    function claimMoonKnight(uint versionId, uint amount) external override payable {\\r\\n        Version storage version = versions[versionId];\\r\\n        uint floorPrice = version.salePrice * 1000 / BPS;\\r\\n\\r\\n        require(amount > 0 && amount <= 50, \\\"MoonKnight: amount out of range\\\");\\r\\n        require(block.timestamp >= version.startTime, \\\"MoonKnight: Sale has not started\\\");\\r\\n        require(version.currentSupply + amount <= version.maxSupply, \\\"MoonKnight: sold out\\\");\\r\\n        require(msg.value == version.salePrice * amount, \\\"MoonKnight: incorrect value\\\");\\r\\n\\r\\n        for (uint i = 0; i < amount; i++) {\\r\\n            uint knightId = _createKnight(floorPrice);\\r\\n            _safeMint(msg.sender, knightId);\\r\\n        }\\r\\n\\r\\n        version.currentSupply += amount;\\r\\n\\r\\n        (bool isSuccess,) = owner().call{value: msg.value - (floorPrice * amount)}(\\\"\\\");\\r\\n        require(isSuccess);\\r\\n\\r\\n        if (version.startingIndex == 0 && (version.currentSupply == version.maxSupply || block.timestamp >= version.revealTime)) {\\r\\n            _finalizeStartingIndex(versionId, version);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function changeKnightName(\\r\\n        uint knightId,\\r\\n        string memory newName\\r\\n    ) external override onlyKnightOwner(knightId) collectTokenAsFee(serviceFeeInToken, owner()) {\\r\\n        require(_validateStr(newName), \\\"MoonKnight: invalid name\\\");\\r\\n        require(reservedNames[newName] == false, \\\"MoonKnight: name already exists\\\");\\r\\n\\r\\n        Knight storage knight = _knights[knightId];\\r\\n\\r\\n        // If already named, de-reserve current name\\r\\n        if (bytes(knight.name).length > 0) {\\r\\n            reservedNames[knight.name] = false;\\r\\n        }\\r\\n\\r\\n        knight.name = newName;\\r\\n        reservedNames[newName] = true;\\r\\n\\r\\n        emit NameChanged(knightId, newName);\\r\\n    }\\r\\n\\r\\n    function equipItems(uint knightId, uint[] memory itemIds) external override onlyKnightOwner(knightId) {\\r\\n        _setKnightEquipment(knightId, itemIds, false);\\r\\n\\r\\n        equipmentContract.putItemsIntoStorage(msg.sender, itemIds);\\r\\n\\r\\n        emit ItemsEquipped(knightId, itemIds);\\r\\n    }\\r\\n\\r\\n    function removeItems(uint knightId, uint[] memory itemIds) external override onlyKnightOwner(knightId) {\\r\\n        _setKnightEquipment(knightId, itemIds, true);\\r\\n\\r\\n        equipmentContract.returnItems(msg.sender, itemIds);\\r\\n\\r\\n        emit ItemsUnequipped(knightId, itemIds);\\r\\n    }\\r\\n\\r\\n    function addFloorPriceToKnight(uint knightId) external override payable {\\r\\n        Knight storage knight = _knights[knightId];\\r\\n        uint newFloorPrice = knight.floorPrice + msg.value;\\r\\n\\r\\n        require(msg.value > 0, \\\"MoonKnight: no value sent\\\");\\r\\n        require(newFloorPrice <= 100 ether, \\\"MoonKnight: cannot add more\\\");\\r\\n        require(acceptedToken.balanceOf(msg.sender) >= serviceFeeInToken, \\\"MoonKnight: insufficient token balance\\\");\\r\\n\\r\\n        knight.floorPrice = newFloorPrice;\\r\\n        acceptedToken.safeTransferFrom(msg.sender, owner(), serviceFeeInToken);\\r\\n\\r\\n        emit KnightPriceIncreased(knightId, newFloorPrice, serviceFeeInToken);\\r\\n    }\\r\\n\\r\\n    function sacrificeKnight(uint knightId) external override nonReentrant onlyKnightOwner(knightId) {\\r\\n        Knight storage knight = _knights[knightId];\\r\\n        uint amount = knight.floorPrice;\\r\\n\\r\\n        knight.floorPrice = 0;\\r\\n        _burn(knightId);\\r\\n\\r\\n        (bool isSuccess,) = msg.sender.call{value: amount}(\\\"\\\");\\r\\n        require(isSuccess);\\r\\n    }\\r\\n\\r\\n    function list(uint knightId, uint price) external override onlyKnightOwner(knightId) {\\r\\n        require(price >= _knights[knightId].floorPrice, \\\"MoonKnight: under floor price\\\");\\r\\n\\r\\n        knightsOnSale[knightId] = price;\\r\\n\\r\\n        emit KnightListed(knightId, price);\\r\\n    }\\r\\n\\r\\n    function delist(uint knightId) external override onlyKnightOwner(knightId) {\\r\\n        require(knightsOnSale[knightId] > 0, \\\"MoonKnight: not listed\\\");\\r\\n\\r\\n        knightsOnSale[knightId] = 0;\\r\\n\\r\\n        emit KnightDelisted(knightId);\\r\\n    }\\r\\n\\r\\n    function buy(uint knightId) external override payable nonReentrant {\\r\\n        uint price = knightsOnSale[knightId];\\r\\n        address seller = ownerOf(knightId);\\r\\n        address buyer = msg.sender;\\r\\n\\r\\n        require(price > 0, \\\"MoonKnight: not on sale\\\");\\r\\n        require(msg.value == price, \\\"MoonKnight: incorrect value\\\");\\r\\n        require(buyer != seller, \\\"MoonKnight: cannot buy your own Knight\\\");\\r\\n\\r\\n        _makeTransaction(knightId, buyer, seller, price);\\r\\n\\r\\n        emit KnightBought(knightId, buyer, seller, price);\\r\\n    }\\r\\n\\r\\n    function offer(uint knightId, uint offerValue) external override nonReentrant payable {\\r\\n        address buyer = msg.sender;\\r\\n        uint currentOffer = knightsWithOffers[knightId][buyer];\\r\\n        bool needRefund = offerValue < currentOffer;\\r\\n        uint requiredValue = needRefund ? 0 : offerValue - currentOffer;\\r\\n\\r\\n        require(buyer != ownerOf(knightId), \\\"MoonKnight: owner cannot offer\\\");\\r\\n        require(offerValue != currentOffer, \\\"MoonKnight: same offer\\\");\\r\\n        require(msg.value == requiredValue, \\\"MoonKnight: sent value incorrect\\\");\\r\\n\\r\\n        knightsWithOffers[knightId][buyer] = offerValue;\\r\\n\\r\\n        if (needRefund) {\\r\\n            uint returnedValue = currentOffer - offerValue;\\r\\n\\r\\n            (bool success,) = buyer.call{value: returnedValue}(\\\"\\\");\\r\\n            require(success);\\r\\n        }\\r\\n\\r\\n        emit KnightOffered(knightId, buyer, offerValue);\\r\\n    }\\r\\n\\r\\n    function takeOffer(\\r\\n        uint knightId,\\r\\n        address buyer,\\r\\n        uint minPrice\\r\\n    ) external override nonReentrant onlyKnightOwner(knightId) {\\r\\n        uint offeredValue = knightsWithOffers[knightId][buyer];\\r\\n        address seller = msg.sender;\\r\\n\\r\\n        require(offeredValue >= _knights[knightId].floorPrice, \\\"MoonKnight: under floor price\\\");\\r\\n        require(offeredValue >= minPrice, \\\"MoonKnight: less than min price\\\");\\r\\n        require(buyer != seller, \\\"MoonKnight: cannot buy your own Knight\\\");\\r\\n\\r\\n        knightsWithOffers[knightId][buyer] = 0;\\r\\n\\r\\n        _makeTransaction(knightId, buyer, seller, offeredValue);\\r\\n\\r\\n        emit KnightBought(knightId, buyer, seller, offeredValue);\\r\\n    }\\r\\n\\r\\n    function cancelOffer(uint knightId) external override nonReentrant {\\r\\n        address sender = msg.sender;\\r\\n        uint offerValue = knightsWithOffers[knightId][sender];\\r\\n\\r\\n        require(offerValue > 0, \\\"MoonKnight: no offer found\\\");\\r\\n\\r\\n        knightsWithOffers[knightId][sender] = 0;\\r\\n\\r\\n        (bool success,) = sender.call{value: offerValue}(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        emit KnightOfferCanceled(knightId, sender);\\r\\n    }\\r\\n\\r\\n    function learnSkill(uint knightId, uint skillId) external override onlyKnightOwner(knightId) {\\r\\n        IEquipment.ItemType itemType = equipmentContract.getItemType(skillId);\\r\\n        EnumerableSet.UintSet storage skills = _knightSkills[knightId];\\r\\n\\r\\n        require(itemType == IEquipment.ItemType.SKILL_BOOK, \\\"MoonKnight: invalid skill book\\\");\\r\\n\\r\\n        bool isSuccess = skills.add(skillId);\\r\\n        if (!isSuccess) revert(\\\"MoonKnight: already learned\\\");\\r\\n\\r\\n        uint[] memory skillIds = new uint[](1);\\r\\n        skillIds[0] = skillId;\\r\\n        equipmentContract.putItemsIntoStorage(msg.sender, skillIds);\\r\\n\\r\\n        emit SkillLearned(knightId, skillId);\\r\\n    }\\r\\n\\r\\n    function adoptPet(uint knightId, uint petId) external override onlyKnightOwner(knightId) {\\r\\n        require(petContract.ownerOf(petId) == msg.sender, \\\"MoonKnight: not pet owner\\\");\\r\\n\\r\\n        _knightsWithPet[knightId] = petId;\\r\\n        petContract.bindPet(petId);\\r\\n\\r\\n        emit PetAdopted(knightId, petId);\\r\\n    }\\r\\n\\r\\n    function abandonPet(uint knightId) external override onlyKnightOwner(knightId) {\\r\\n        uint petId = _knightsWithPet[knightId];\\r\\n\\r\\n        require(petId != 0, \\\"MoonKnight: no pet\\\");\\r\\n\\r\\n        _knightsWithPet[knightId] = 0;\\r\\n        petContract.releasePet(petId);\\r\\n\\r\\n        emit PetReleased(knightId, petId);\\r\\n    }\\r\\n\\r\\n    function levelUp(uint knightId, uint amount) external override onlyOperator {\\r\\n        Knight storage knight = _knights[knightId];\\r\\n        uint newLevel = knight.level + amount;\\r\\n\\r\\n        require(amount > 0);\\r\\n        require(newLevel <= maxLevel, \\\"MoonKnight: max level reached\\\");\\r\\n\\r\\n        knight.level = newLevel;\\r\\n\\r\\n        emit KnightLeveledUp(knightId, newLevel, amount);\\r\\n    }\\r\\n\\r\\n    function finalizeDuelResult(\\r\\n        uint winningKnightId,\\r\\n        uint losingKnightId,\\r\\n        uint penaltyInBps\\r\\n    ) external override onlyOperator {\\r\\n        require(penaltyInBps <= BPS);\\r\\n\\r\\n        Knight storage winningKnight = _knights[winningKnightId];\\r\\n        Knight storage losingKnight = _knights[losingKnightId];\\r\\n        uint baseFloorPrice = winningKnight.floorPrice > losingKnight.floorPrice ? losingKnight.floorPrice : winningKnight.floorPrice;\\r\\n\\r\\n        uint penaltyAmount = baseFloorPrice * penaltyInBps / BPS;\\r\\n\\r\\n        winningKnight.floorPrice += penaltyAmount;\\r\\n        losingKnight.floorPrice -= penaltyAmount;\\r\\n\\r\\n        emit DuelConcluded(winningKnightId, losingKnightId, penaltyAmount);\\r\\n    }\\r\\n\\r\\n    function getKnight(uint knightId) external view override returns (\\r\\n        string memory name,\\r\\n        uint level,\\r\\n        uint floorPrice,\\r\\n        uint pet,\\r\\n        uint[] memory skills,\\r\\n        uint[9] memory equipment\\r\\n    ) {\\r\\n        Knight memory knight = _knights[knightId];\\r\\n\\r\\n        uint skillCount = _knightSkills[knightId].length();\\r\\n        uint[] memory skillIds = new uint[](skillCount);\\r\\n        for (uint i = 0; i < skillCount; i++) {\\r\\n            skillIds[i] = _knightSkills[knightId].at(i);\\r\\n        }\\r\\n\\r\\n        name = knight.name;\\r\\n        level = knight.level;\\r\\n        floorPrice = knight.floorPrice;\\r\\n        pet = _knightsWithPet[knightId];\\r\\n        skills = skillIds;\\r\\n        equipment = [\\r\\n            knight.mainWeapon,\\r\\n            knight.subWeapon,\\r\\n            knight.headgear,\\r\\n            knight.armor,\\r\\n            knight.footwear,\\r\\n            knight.pants,\\r\\n            knight.gloves,\\r\\n            knight.mount,\\r\\n            knight.troop\\r\\n        ];\\r\\n    }\\r\\n\\r\\n    function getKnightLevel(uint knightId) external view override returns (uint) {\\r\\n        return _knights[knightId].level;\\r\\n    }\\r\\n\\r\\n    function getLatestVersion() public view returns (uint) {\\r\\n        return versions.length - 1;\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view returns (uint) {\\r\\n        return _knights.length;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return _uri;\\r\\n    }\\r\\n\\r\\n    function _makeTransaction(uint knightId, address buyer, address seller, uint price) private {\\r\\n        Knight storage knight = _knights[knightId];\\r\\n        uint floorPrice = price * floorPriceInBps / BPS;\\r\\n        uint marketFee = price * marketFeeInBps / BPS;\\r\\n        uint newPrice = knight.floorPrice + floorPrice;\\r\\n\\r\\n        knightsOnSale[knightId] = 0;\\r\\n        knight.floorPrice = newPrice;\\r\\n\\r\\n        (bool transferToSeller,) = seller.call{value: price - (floorPrice + marketFee)}(\\\"\\\");\\r\\n        require(transferToSeller);\\r\\n\\r\\n        (bool transferToTreasury,) = owner().call{value: marketFee}(\\\"\\\");\\r\\n        require(transferToTreasury);\\r\\n\\r\\n        _transfer(seller, buyer, knightId);\\r\\n\\r\\n        emit KnightPriceIncreased(knightId, newPrice, floorPrice);\\r\\n    }\\r\\n\\r\\n    function _createKnight(uint floorPrice) private returns (uint knightId) {\\r\\n        _knights.push(Knight(\\\"\\\", 1, floorPrice, 0, 0, 0, 0, 0, 0, 0, 0, 0));\\r\\n        knightId = _knights.length - 1;\\r\\n        emit KnightCreated(knightId, floorPrice);\\r\\n    }\\r\\n\\r\\n    function _setKnightEquipment(uint knightId, uint[] memory itemIds, bool isRemove) private {\\r\\n        require(knightsOnSale[knightId] == 0, \\\"MoonKnight: cannot change items while on sale\\\");\\r\\n        require(itemIds.length > 0, \\\"MoonKnight: no item\\\");\\r\\n\\r\\n        Knight storage knight = _knights[knightId];\\r\\n        bool[] memory itemSet = new bool[](9);\\r\\n\\r\\n        for (uint i = 0; i < itemIds.length; i++) {\\r\\n            uint itemId = itemIds[i];\\r\\n            uint updatedItemId = isRemove ? 0 : itemId;\\r\\n            IEquipment.ItemType itemType = equipmentContract.getItemType(itemId);\\r\\n\\r\\n            require(itemId != 0, \\\"MoonKnight: invalid itemId\\\");\\r\\n            require(itemType != IEquipment.ItemType.SKILL_BOOK, \\\"MoonKnight: cannot equip skill book\\\");\\r\\n            require(!itemSet[uint(itemType)], \\\"MoonKnight: duplicate itemType\\\");\\r\\n\\r\\n            if (itemType == IEquipment.ItemType.MAIN_WEAPON) {\\r\\n                require(isRemove ? knight.mainWeapon == itemId : knight.mainWeapon == 0, \\\"MoonKnight : invalid mainWeapon\\\");\\r\\n                knight.mainWeapon = updatedItemId;\\r\\n                itemSet[uint(IEquipment.ItemType.MAIN_WEAPON)] = true;\\r\\n            } else if (itemType == IEquipment.ItemType.SUB_WEAPON) {\\r\\n                require(isRemove ? knight.subWeapon == itemId : knight.subWeapon == 0, \\\"MoonKnight : invalid subWeapon\\\");\\r\\n                knight.subWeapon = updatedItemId;\\r\\n                itemSet[uint(IEquipment.ItemType.SUB_WEAPON)] = true;\\r\\n            } else if (itemType == IEquipment.ItemType.HEADGEAR) {\\r\\n                require(isRemove ? knight.headgear == itemId : knight.headgear == 0, \\\"MoonKnight : invalid headgear\\\");\\r\\n                knight.headgear = updatedItemId;\\r\\n                itemSet[uint(IEquipment.ItemType.HEADGEAR)] = true;\\r\\n            } else if (itemType == IEquipment.ItemType.ARMOR) {\\r\\n                require(isRemove ? knight.armor == itemId : knight.armor == 0, \\\"MoonKnight : invalid armor\\\");\\r\\n                knight.armor = updatedItemId;\\r\\n                itemSet[uint(IEquipment.ItemType.ARMOR)] = true;\\r\\n            } else if (itemType == IEquipment.ItemType.FOOTWEAR) {\\r\\n                require(isRemove ? knight.footwear == itemId : knight.footwear == 0, \\\"MoonKnight : invalid footwear\\\");\\r\\n                knight.footwear = updatedItemId;\\r\\n                itemSet[uint(IEquipment.ItemType.FOOTWEAR)] = true;\\r\\n            } else if (itemType == IEquipment.ItemType.PANTS) {\\r\\n                require(isRemove ? knight.pants == itemId : knight.pants == 0, \\\"MoonKnight : invalid pants\\\");\\r\\n                knight.pants = updatedItemId;\\r\\n                itemSet[uint(IEquipment.ItemType.PANTS)] = true;\\r\\n            } else if (itemType == IEquipment.ItemType.GLOVES) {\\r\\n                require(isRemove ? knight.gloves == itemId : knight.gloves == 0, \\\"MoonKnight : invalid gloves\\\");\\r\\n                knight.gloves = updatedItemId;\\r\\n                itemSet[uint(IEquipment.ItemType.GLOVES)] = true;\\r\\n            } else if (itemType == IEquipment.ItemType.MOUNT) {\\r\\n                require(isRemove ? knight.mount == itemId : knight.mount == 0, \\\"MoonKnight : invalid mount\\\");\\r\\n                knight.mount = updatedItemId;\\r\\n                itemSet[uint(IEquipment.ItemType.MOUNT)] = true;\\r\\n            } else if (itemType == IEquipment.ItemType.TROOP) {\\r\\n                require(isRemove ? knight.troop == itemId : knight.troop == 0, \\\"MoonKnight : invalid troop\\\");\\r\\n                knight.troop = updatedItemId;\\r\\n                itemSet[uint(IEquipment.ItemType.TROOP)] = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _finalizeStartingIndex(uint versionId, Version storage version) private {\\r\\n        uint startingIndex = uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp))) % version.maxSupply;\\r\\n        if (startingIndex == 0) startingIndex = startingIndex + 1;\\r\\n        version.startingIndex = startingIndex;\\r\\n\\r\\n        emit StartingIndexFinalized(versionId, startingIndex);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if the name string is valid (Alphanumeric and spaces without leading or trailing space)\\r\\n     */\\r\\n    function _validateStr(string memory str) internal pure returns (bool) {\\r\\n        bytes memory b = bytes(str);\\r\\n        if (b.length < 1) return false;\\r\\n        if (b.length > 20) return false;\\r\\n\\r\\n        // Leading space\\r\\n        if (b[0] == 0x20) return false;\\r\\n\\r\\n        // Trailing space\\r\\n        if (b[b.length - 1] == 0x20) return false;\\r\\n\\r\\n        bytes1 lastChar = b[0];\\r\\n\\r\\n        for (uint i; i < b.length; i++) {\\r\\n            bytes1 char = b[i];\\r\\n\\r\\n            // Cannot contain continuous spaces\\r\\n            if (char == 0x20 && lastChar == 0x20) return false;\\r\\n\\r\\n            if (\\r\\n                !(char >= 0x30 && char <= 0x39) && //9-0\\r\\n                !(char >= 0x41 && char <= 0x5A) && //A-Z\\r\\n                !(char >= 0x61 && char <= 0x7A) && //a-z\\r\\n                !(char == 0x20) //space\\r\\n            ) {\\r\\n                return false;\\r\\n            }\\r\\n\\r\\n            lastChar = char;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMoonKnight.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IMoonKnight {\\r\\n    struct Knight {\\r\\n        string name;\\r\\n        uint level;\\r\\n        uint floorPrice;\\r\\n        uint mainWeapon;\\r\\n        uint subWeapon;\\r\\n        uint headgear;\\r\\n        uint armor;\\r\\n        uint footwear;\\r\\n        uint pants;\\r\\n        uint gloves;\\r\\n        uint mount;\\r\\n        uint troop;\\r\\n    }\\r\\n\\r\\n    struct Version {\\r\\n        uint startingIndex;\\r\\n        uint currentSupply;\\r\\n        uint maxSupply;\\r\\n        uint salePrice;\\r\\n        uint startTime;\\r\\n        uint revealTime;\\r\\n        string provenance; // This is the provenance record of all MoonKnight artworks in existence.\\r\\n    }\\r\\n\\r\\n    event KnightCreated(uint indexed knightId, uint floorPrice);\\r\\n    event KnightListed(uint indexed knightId, uint price);\\r\\n    event KnightDelisted(uint indexed knightId);\\r\\n    event KnightBought(uint indexed knightId, address buyer, address seller, uint price);\\r\\n    event KnightOffered(uint indexed knightId, address buyer, uint price);\\r\\n    event KnightOfferCanceled(uint indexed knightId, address buyer);\\r\\n    event KnightPriceIncreased(uint indexed knightId, uint floorPrice, uint increasedAmount);\\r\\n    event NameChanged(uint indexed knightId, string newName);\\r\\n    event PetAdopted(uint indexed knightId, uint indexed petId);\\r\\n    event PetReleased(uint indexed knightId, uint indexed petId);\\r\\n    event SkillLearned(uint indexed knightId, uint indexed skillId);\\r\\n    event ItemsEquipped(uint indexed knightId, uint[] itemIds);\\r\\n    event ItemsUnequipped(uint indexed knightId, uint[] itemIds);\\r\\n    event KnightLeveledUp(uint indexed knightId, uint level, uint amount);\\r\\n    event DuelConcluded(uint indexed winningKnightId, uint indexed losingKnightId, uint penaltyAmount);\\r\\n    event StartingIndexFinalized(uint versionId, uint startingIndex);\\r\\n    event NewVersionAdded(uint versionId);\\r\\n\\r\\n    /**\\r\\n     * @notice Claims moon knights when it's on presale phase.\\r\\n     */\\r\\n    function claimMoonKnight(uint versionId, uint amount) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Changes a knight's name.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `newName` must be a valid string.\\r\\n     * - `newName` is not duplicated to other.\\r\\n     * - Token required: `serviceFeeInToken`.\\r\\n     */\\r\\n    function changeKnightName(uint knightId, string memory newName) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Anyone can call this function to manually add `floorPrice` to a knight.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `msg.value` must not be zero.\\r\\n     * - knight's `floorPrice` must be under `floorPriceCap`.\\r\\n     * - Token required: `serviceFeeInToken` * value\\r\\n     */\\r\\n    function addFloorPriceToKnight(uint knightId) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Owner equips items to their knight by burning ERC1155 Equipment NFTs.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be owner of the knight.\\r\\n     */\\r\\n    function equipItems(uint knightId, uint[] memory itemIds) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Owner removes items from their knight. ERC1155 Equipment NFTs are minted back to the owner.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be owner of the knight.\\r\\n     */\\r\\n    function removeItems(uint knightId, uint[] memory itemIds) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Burns a knight to claim its `floorPrice`.\\r\\n     *\\r\\n     * - Not financial advice: DONT DO THAT.\\r\\n     * - Remember to remove all items before calling this function.\\r\\n     */\\r\\n    function sacrificeKnight(uint knightId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Lists a knight on sale.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `price` cannot be under knight's `floorPrice`.\\r\\n     * - Caller must be the owner of the knight.\\r\\n     */\\r\\n    function list(uint knightId, uint price) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Delist a knight on sale.\\r\\n     */\\r\\n    function delist(uint knightId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Instant buy a specific knight on sale.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Target knight must be currently on sale.\\r\\n     * - Sent value must be exact the same as current listing price.\\r\\n     */\\r\\n    function buy(uint knightId) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Gives offer for a knight.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Owner cannot offer.\\r\\n     */\\r\\n    function offer(uint knightId, uint offerValue) external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Owner take an offer to sell their knight.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Cannot take offer under knight's `floorPrice`.\\r\\n     * - Offer value must be at least equal to `minPrice`.\\r\\n     */\\r\\n    function takeOffer(uint knightId, address offerAddr, uint minPrice) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Cancels an offer for a specific knight.\\r\\n     */\\r\\n    function cancelOffer(uint knightId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Learns a skill for given Knight.\\r\\n     */\\r\\n    function learnSkill(uint knightId, uint skillId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Adopts a Pet.\\r\\n     */\\r\\n    function adoptPet(uint knightId, uint petId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Abandons a Pet attached to a Knight.\\r\\n     */\\r\\n    function abandonPet(uint knightId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Operators can level up a Knight\\r\\n     */\\r\\n    function levelUp(uint knightId, uint amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Finalizes the battle aftermath of 2 knights.\\r\\n     */\\r\\n    function finalizeDuelResult(uint winningKnightId, uint losingKnightId, uint penaltyInBps) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets knight information.\\r\\n     */\\r\\n    function getKnight(uint knightId) external view returns (\\r\\n        string memory name,\\r\\n        uint level,\\r\\n        uint floorPrice,\\r\\n        uint pet,\\r\\n        uint[] memory skills,\\r\\n        uint[9] memory equipment\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Gets current level of given knight.\\r\\n     */\\r\\n    function getKnightLevel(uint knightId) external view returns (uint);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IEquipment.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IEquipment {\\r\\n    enum ItemType { MAIN_WEAPON, SUB_WEAPON, HEADGEAR, ARMOR, FOOTWEAR, PANTS, GLOVES, MOUNT, TROOP, SKILL_BOOK }\\r\\n    enum Rarity { COMMON, UNCOMMON, RARE, EPIC, LEGENDARY, MYTHICAL }\\r\\n\\r\\n    struct Item {\\r\\n        string name;\\r\\n        uint16 maxSupply;\\r\\n        uint16 minted;\\r\\n        uint16 burnt;\\r\\n        uint8 tier;\\r\\n        uint8 upgradeAmount;\\r\\n        ItemType itemType;\\r\\n        Rarity rarity;\\r\\n    }\\r\\n\\r\\n    event ItemCreated(uint indexed itemId, string name, uint16 maxSupply, ItemType itemType, Rarity rarity);\\r\\n    event ItemUpgradable(uint indexed itemId, uint indexed nextTierItemId, uint8 upgradeAmount);\\r\\n\\r\\n    /**\\r\\n     * @notice Create an item.\\r\\n     */\\r\\n    function createItem(string memory name, uint16 maxSupply, ItemType itemType, Rarity rarity) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Add next tier item to existing one.\\r\\n     */\\r\\n    function addNextTierItem(uint itemId, uint8 upgradeAmount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Burns the same items to upgrade its tier.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - sufficient token balance.\\r\\n     * - Item must have its next tier.\\r\\n     * - Sender's balance must have at least `upgradeAmount`\\r\\n     */\\r\\n    function upgradeItem(uint itemId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Pays some fee to get random items.\\r\\n     */\\r\\n    function rollEquipmentGacha(uint vendorId, uint amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Mints items and returns true if it's run out of stock.\\r\\n     */\\r\\n    function mint(address account, uint itemId, uint16 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Burns ERC1155 equipment since it is equipped to the knight.\\r\\n     */\\r\\n    function putItemsIntoStorage(address account, uint[] memory itemIds) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns ERC1155 equipment back to the owner.\\r\\n     */\\r\\n    function returnItems(address account, uint[] memory itemIds) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets item information.\\r\\n     */\\r\\n    function getItem(uint itemId) external view returns (Item memory item);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets item type.\\r\\n     */\\r\\n    function getItemType(uint itemId) external view returns (ItemType);\\r\\n\\r\\n    /**\\r\\n     * @notice Check if item is out of stock.\\r\\n     */\\r\\n    function isOutOfStock(uint itemId, uint16 amount) external view returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPet.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPet {\\r\\n    /**\\r\\n     * @notice Temporarily burn a pet.\\r\\n     */\\r\\n    function bindPet(uint petId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Release given pet back into user inventory.\\r\\n     */\\r\\n    function releasePet(uint petId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets owner of given pet.\\r\\n     */\\r\\n    function ownerOf(uint petId) external view returns (address);\\r\\n}\"\r\n    },\r\n    \"contracts/utils/AcceptedToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"./PermissionGroup.sol\\\";\\r\\n\\r\\ncontract AcceptedToken is PermissionGroup {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Token to be used in the ecosystem.\\r\\n    IERC20 public acceptedToken;\\r\\n\\r\\n    constructor(IERC20 tokenAddress) {\\r\\n        acceptedToken = tokenAddress;\\r\\n    }\\r\\n\\r\\n    modifier collectTokenAsFee(uint amount, address destAddr) {\\r\\n        require(acceptedToken.balanceOf(msg.sender) >= amount, \\\"AcceptedToken: insufficient token balance\\\");\\r\\n        _;\\r\\n        acceptedToken.safeTransferFrom(msg.sender, destAddr, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets accepted token using in the ecosystem.\\r\\n     */\\r\\n    function setAcceptedTokenContract(IERC20 tokenAddr) external onlyOwner {\\r\\n        require(address(tokenAddr) != address(0));\\r\\n        acceptedToken = tokenAddr;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/PermissionGroup.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\ncontract PermissionGroup is Ownable {\\r\\n    // List of authorized address to perform some restricted actions\\r\\n    mapping(address => bool) public operators;\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(operators[msg.sender], \\\"PermissionGroup: not operator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an address as operator.\\r\\n     */\\r\\n    function addOperator(address operator) external onlyOwner {\\r\\n        operators[operator] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Removes an address as operator.\\r\\n    */\\r\\n    function removeOperator(address operator) external onlyOwner {\\r\\n        operators[operator] = false;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 322\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IEquipment\",\"name\":\"equipmentAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"provenance\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"winningKnightId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"losingKnightId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"}],\"name\":\"DuelConcluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"name\":\"ItemsEquipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"name\":\"ItemsUnequipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"KnightBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"floorPrice\",\"type\":\"uint256\"}],\"name\":\"KnightCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"}],\"name\":\"KnightDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"KnightLeveledUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"KnightListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"KnightOfferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"KnightOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"floorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increasedAmount\",\"type\":\"uint256\"}],\"name\":\"KnightPriceIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"versionId\",\"type\":\"uint256\"}],\"name\":\"NewVersionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"petId\",\"type\":\"uint256\"}],\"name\":\"PetAdopted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"petId\",\"type\":\"uint256\"}],\"name\":\"PetReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"}],\"name\":\"SkillLearned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"versionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingIndex\",\"type\":\"uint256\"}],\"name\":\"StartingIndexFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"}],\"name\":\"abandonPet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"}],\"name\":\"addFloorPriceToKnight\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"provenance\",\"type\":\"string\"}],\"name\":\"addNewVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"petId\",\"type\":\"uint256\"}],\"name\":\"adoptPet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeKnightName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"versionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimMoonKnight\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"}],\"name\":\"delist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"name\":\"equipItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"equipmentContract\",\"outputs\":[{\"internalType\":\"contract IEquipment\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"winningKnightId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"losingKnightId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyInBps\",\"type\":\"uint256\"}],\"name\":\"finalizeDuelResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floorPriceInBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"}],\"name\":\"getKnight\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pet\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"skills\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[9]\",\"name\":\"equipment\",\"type\":\"uint256[9]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"}],\"name\":\"getKnightLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"knightsOnSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"knightsWithOffers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"skillId\",\"type\":\"uint256\"}],\"name\":\"learnSkill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"levelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFeeInBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerValue\",\"type\":\"uint256\"}],\"name\":\"offer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"petContract\",\"outputs\":[{\"internalType\":\"contract IPet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"}],\"name\":\"removeItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"reservedNames\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"}],\"name\":\"sacrificeKnight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFeeInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"setAcceptedTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEquipment\",\"name\":\"equipmentAddress\",\"type\":\"address\"}],\"name\":\"setEquipmentContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"floorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketFee\",\"type\":\"uint256\"}],\"name\":\"setFloorPriceAndMarketFeeInBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxLevel\",\"type\":\"uint256\"}],\"name\":\"setMaxLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPet\",\"name\":\"petAddress\",\"type\":\"address\"}],\"name\":\"setPetContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"knightId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"takeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"versions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revealTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"provenance\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MoonKnight", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "322", "ConstructorArguments": "000000000000000000000000f9dbe8aec9f0cd42c27ff1d7f86fc801773695a900000000000000000000000090822bd3e3d683c394e7928a1d531490e68b9ff000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004e2000000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000000000060b248e00000000000000000000000000000000000000000000000000000000060c36c600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000002068747470733a2f2f666172616c616e642e696f2f6170692f6865726f2f69642f000000000000000000000000000000000000000000000000000000000000004063343733306566633864373935303031623339623066323332353062333738613966643561666533646433326231346335623339383134323033303561323734", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}