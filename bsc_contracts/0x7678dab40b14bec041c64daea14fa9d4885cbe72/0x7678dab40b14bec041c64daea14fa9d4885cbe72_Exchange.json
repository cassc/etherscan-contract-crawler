{"SourceCode": "pragma solidity >=0.7.0 <0.9.0;\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * Contract Type : Exchange\r\n * 1st Iten : Native Token\r\n * 2nd Iten : Coin TokenERC20\r\n * 2nd Address : 0x22D596c0413466658bD92DEdC2Ca055066849423\r\n * 3nd Address : 0x7d967a9044dbEadEf9335c98D96dC235F6D08B7E\r\n*/\r\n\r\ninterface ERC20{\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract Exchange {\r\n\r\n\taddress owner;\r\n\tstruct referralRecord {\r\n        bool hasDeposited;\r\n        address referringAddress;\r\n        uint256 unclaimedRewardsForToken0;\r\n        uint256 unclaimedRewardsForToken1;\r\n    }\r\n\tmapping(address => referralRecord) public referralRecordMap;\r\n\tuint256 public minExchange1To2amt = uint256(100000000000000000);\r\n\tuint256 public exchange1To2rate = uint256(1000000000000000000000);\r\n\tuint256 public exchange1To2ratefuture = uint256(1400000000000000000000);\r\n\tuint256 public totalUnclaimedRewardsForToken0 = uint256(0);\r\n\tuint256 public totalUnclaimedRewardsForToken1 = uint256(0);\r\n\tevent Exchanged (address indexed tgt);\r\n\r\n\tconstructor() {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t//This function allows the owner to specify an address that will take over ownership rights instead. Please double check the address provided as once the function is executed, only the new owner will be able to change the address back.\r\n\tfunction changeOwner(address _newOwner) public onlyOwner {\r\n\t\towner = _newOwner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction changeValueOf_minExchange1To2amt (uint256 _minExchange1To2amt) external onlyOwner {\r\n\t\t minExchange1To2amt = _minExchange1To2amt;\r\n\t}\r\n\r\n\tfunction changeValueOf_exchange1To2rate (uint256 _exchange1To2rate) external onlyOwner {\r\n\t\t exchange1To2rate = _exchange1To2rate;\r\n\t}\r\n\r\n\tfunction changeValueOf_exchange1To2ratefuture (uint256 _exchange1To2ratefuture) external onlyOwner {\r\n\t\t exchange1To2ratefuture = _exchange1To2ratefuture;\r\n\t}\r\n\r\n\tfunction run0() public payable {\r\n\t\trequire((msg.value >= minExchange1To2amt), \"Too little exchanged\");\r\n\t\trequire((ERC20(0x22D596c0413466658bD92DEdC2Ca055066849423).balanceOf(address(this)) >= ((msg.value * exchange1To2rate) / uint256(1000000000000000000))), \"Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.\");\r\n\t\tERC20(0x22D596c0413466658bD92DEdC2Ca055066849423).transfer(msg.sender, ((msg.value * exchange1To2rate) / uint256(1000000000000000000)));\r\n\t\taddReferralForToken0(msg.value);\r\n\t\temit Exchanged(msg.sender);\r\n\t}\r\n\r\n\tfunction run1() public payable {\r\n\t\trequire((msg.value >= minExchange1To2amt), \"Too little exchanged\");\r\n\t\trequire((ERC20(0x7d967a9044dbEadEf9335c98D96dC235F6D08B7E).balanceOf(address(this)) >= ((msg.value * exchange1To2ratefuture) / uint256(1000000000000000000))), \"Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.\");\r\n\t\tERC20(0x7d967a9044dbEadEf9335c98D96dC235F6D08B7E).transfer(msg.sender, ((msg.value * exchange1To2ratefuture) / uint256(1000000000000000000)));\r\n\t\taddReferralForToken1(msg.value);\r\n\t\temit Exchanged(msg.sender);\r\n\t}\r\n\r\n\tfunction withdrawReferralForToken0(uint256 _amt) public {\r\n        require(referralRecordMap[msg.sender].unclaimedRewardsForToken0 >= _amt, \"Insufficient referral rewards\");\r\n        referralRecordMap[msg.sender].unclaimedRewardsForToken0 -= _amt;\r\n        totalUnclaimedRewardsForToken0 -= _amt;\r\n        require(\r\n            ERC20(0x22D596c0413466658bD92DEdC2Ca055066849423).balanceOf(address(this)) >= _amt,\r\n            \"Insufficient token amount in contract\"\r\n        );\r\n        ERC20(0x22D596c0413466658bD92DEdC2Ca055066849423).transfer(msg.sender, _amt);\r\n    }\r\n\r\n    function withdrawReferralForToken1(uint256 _amt) public {\r\n        require(referralRecordMap[msg.sender].unclaimedRewardsForToken1 >= _amt, \"Insufficient referral rewards\");\r\n        referralRecordMap[msg.sender].unclaimedRewardsForToken1 -= _amt;\r\n        totalUnclaimedRewardsForToken1 -= _amt;\r\n        require(\r\n            ERC20(0x7d967a9044dbEadEf9335c98D96dC235F6D08B7E).balanceOf(address(this)) >= _amt,\r\n            \"Insufficient token amount in contract\"\r\n        );\r\n        ERC20(0x7d967a9044dbEadEf9335c98D96dC235F6D08B7E).transfer(msg.sender, _amt);\r\n    }\r\n\r\n\tfunction addReferralForToken0(uint256 _amt) internal {\r\n\t\tuint256 tokenAmount = (_amt * exchange1To2rate) / 1e18;\r\n\t\tupdateReferralRewards0(msg.sender, tokenAmount);\r\n\t}\r\n\r\n\tfunction addReferralForToken1(uint256 _amt) internal {\r\n\t\tuint256 tokenAmount = (_amt * exchange1To2ratefuture) / 1e18;\r\n\t\tupdateReferralRewards1(msg.sender, tokenAmount);\r\n\t}\r\n\r\n    function updateReferralRewards0(address user, uint256 _tokenAmt) internal {\r\n\t\taddress referringAddress = referralRecordMap[user].referringAddress;\r\n\t\tif (!referralRecordMap[user].hasDeposited) {\r\n\t\t\treferralRecordMap[user].hasDeposited = true;\r\n\t\t}\r\n\t\tif (referringAddress == address(0)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tuint256 reward = (_tokenAmt * 5) / 100; // Assuming 5% is the referral reward rate\r\n\t\treferralRecordMap[referringAddress].unclaimedRewardsForToken0 += reward;\r\n\t\ttotalUnclaimedRewardsForToken0 += reward;\r\n\t}\r\n\r\n\tfunction updateReferralRewards1(address user, uint256 _tokenAmt) internal {\r\n\t\taddress referringAddress = referralRecordMap[user].referringAddress;\r\n\t\tif (!referralRecordMap[user].hasDeposited) {\r\n\t\t\treferralRecordMap[user].hasDeposited = true;\r\n\t\t}\r\n\t\tif (referringAddress == address(0)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tuint256 reward = (_tokenAmt * 8) / 100; // Assuming 8% is the referral reward rate for token 1\r\n\t\treferralRecordMap[referringAddress].unclaimedRewardsForToken1 += reward;\r\n\t\ttotalUnclaimedRewardsForToken1 += reward;\r\n\t}\r\n\r\n\r\n\tfunction withdrawTokenbnb(uint256 _amt) public onlyOwner {\r\n\t\trequire((address(this).balance >= _amt), \"Insufficient amount of native currency in this contract to transfer out. Please contact the contract owner to top up the native currency.\");\r\n\t\tpayable(msg.sender).transfer(_amt);\r\n\t}\r\n\r\n\tfunction withdrawToken0(uint256 _amt) public onlyOwner {\r\n\t\trequire((ERC20(0x22D596c0413466658bD92DEdC2Ca055066849423).balanceOf(address(this)) >= _amt), \"Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.\");\r\n\t\tERC20(0x22D596c0413466658bD92DEdC2Ca055066849423).transfer(msg.sender, _amt);\r\n\t}\r\n\r\n\tfunction withdrawToken1(uint256 _amt) public onlyOwner {\r\n\t\trequire((ERC20(0x7d967a9044dbEadEf9335c98D96dC235F6D08B7E).balanceOf(address(this)) >= _amt), \"Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.\");\r\n\t\tERC20(0x7d967a9044dbEadEf9335c98D96dC235F6D08B7E).transfer(msg.sender, _amt);\r\n\t}\r\n\r\n\tfunction addReferralAddress(address _referringAddress) external {\r\n\t\trequire(referralRecordMap[_referringAddress].hasDeposited, \"Referring Address has not made a deposit\");\r\n\t\trequire(!((_referringAddress == msg.sender)), \"Self-referrals are not allowed\");\r\n\t\trequire((referralRecordMap[msg.sender].referringAddress == address(0)), \"User has previously indicated a referral address\");\r\n\t\treferralRecordMap[msg.sender].referringAddress  = _referringAddress;\r\n\t}\r\n\r\n\tfunction sendMeNativeCurrency() external payable {\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tgt\",\"type\":\"address\"}],\"name\":\"Exchanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referringAddress\",\"type\":\"address\"}],\"name\":\"addReferralAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchange1To2rate\",\"type\":\"uint256\"}],\"name\":\"changeValueOf_exchange1To2rate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchange1To2ratefuture\",\"type\":\"uint256\"}],\"name\":\"changeValueOf_exchange1To2ratefuture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minExchange1To2amt\",\"type\":\"uint256\"}],\"name\":\"changeValueOf_minExchange1To2amt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange1To2rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange1To2ratefuture\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExchange1To2amt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralRecordMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasDeposited\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referringAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRewardsForToken0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRewardsForToken1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"run0\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"run1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendMeNativeCurrency\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnclaimedRewardsForToken0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnclaimedRewardsForToken1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"withdrawReferralForToken0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"withdrawReferralForToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"withdrawToken0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"withdrawToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenbnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Exchange", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://46067f6ac286fe73bd781227883f8fca0cee93e0eca297702e050461b3160e19"}