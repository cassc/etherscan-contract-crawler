{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address public _owner;\r\n    mapping(address => bool) private _roles;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() internal {\r\n        _owner = _msgSender();\r\n        _roles[_msgSender()] = true;\r\n        emit OwnershipTransferred(address(0), _msgSender());\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_roles[_msgSender()]);\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _roles[_owner] = false;\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _roles[_owner] = false;\r\n        _roles[newOwner] = true;\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function setOwner(address addr, bool state) public onlyOwner {\r\n        _owner = addr;\r\n        _roles[addr] = state;\r\n    }\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ncontract Token is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _maxSupply = 1000000000 * 10**18;\r\n    uint256 private _totalSupply;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isSwapPair;\r\n    address[] private _excluded;\r\n\r\n    string private _name = \"TOP Community DAO\";\r\n    string private _symbol = \"TCD\";\r\n    uint8 private _decimals = 18;\r\n\r\n    uint256 public lastMintBlock = block.number;\r\n    uint256 public nextMintBlock = block.number + 120;\r\n    uint256 public unTakeMint = 0;\r\n\r\n    uint256 public feeRate = 0;\r\n\r\n    uint256 public _buyFee = 80;\r\n    uint256 private _previousBuyFee = _buyFee;\r\n\r\n    uint256 public _sellFee = 100;\r\n    uint256 private _previousSellFee = _sellFee;\r\n\r\n    uint256 public _liquidityFee = 15;\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n\r\n    uint256 public _rewardFee = 20;\r\n    uint256 private _previousRewardFee;\r\n\r\n    uint256 public _burnFee = 20;\r\n    uint256 private _previousBurnFee = _burnFee;\r\n\r\n    uint256 public _inviterFee = 15;\r\n    uint256 private _previousInviterFee;\r\n\r\n    uint256 public _foundFee = 20;\r\n    uint256 private _previousFoundFee;\r\n\r\n    uint256 public _devFee = 10;\r\n    uint256 private _previousDevFee;\r\n\r\n    uint256 public _transferFee = 10;\r\n    uint256 private _previousTransferFee;\r\n\r\n    mapping(address => address) public inviter;\r\n    mapping(address => int256) public inviterNumber;\r\n\r\n    address public burnAddress =\r\n        address(0x000000000000000000000000000000000000dEaD);\r\n    address public ownerAddress =\r\n        address(0xA640b30f7a0B401011174963dfa0780156FC91b8);\r\n    address public foundAddress =\r\n        address(0x9EfDF5c30782C5871b2356aD066065e3906c282a);\r\n    address public devAddress =\r\n        address(0x7d3430867Ade512b1efC4ED3fC8Cf955134E7105);\r\n    address public mintAddress =\r\n        address(0xDe63080e218dF2ea9a7B572C90FA96D45b246ca5);\r\n    address public usdAddress =\r\n        address(0x55d398326f99059fF775485246999027B3197955);\r\n    address public lpReward = address(0x37ffabfde19572C3c872082d87821602D2b9DC66);\r\n\r\n    IPancakeRouter02 public swapRouter;\r\n    address public swapPair;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public liquifyEnabled = true;\r\n    uint256 public numTokensSellToAddToLiquidity = 500 * 10**18;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    constructor() public {\r\n        _decimals = 18;\r\n        IPancakeRouter02 _router = IPancakeRouter02(\r\n            address(0x10ED43C718714eb63d5aA57B78B54704E256024E)\r\n        );\r\n        address swapPairBNB = IPancakeFactory(_router.factory()).createPair(\r\n            address(this),\r\n            _router.WETH()\r\n        );\r\n        swapPair = IPancakeFactory(_router.factory()).createPair(\r\n            address(this),\r\n            usdAddress\r\n        );\r\n        _isSwapPair[swapPair] = true;\r\n        _isSwapPair[swapPairBNB] = true;\r\n        swapRouter = _router;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[ownerAddress] = true;\r\n        _isExcludedFromFee[mintAddress] = true;\r\n        _isExcludedFromFee[burnAddress] = true;\r\n        _isExcludedFromFee[lpReward] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _balances[mintAddress] = 5160 * 10**18;\r\n        _totalSupply = 5160 * 10**18;\r\n\r\n        transferOwnership(ownerAddress);\r\n\r\n        emit Transfer(address(0), mintAddress, 5160 * 10**18);\r\n    }\r\n\r\n    function setMintAddress (address _mintAddress) public onlyOwner {\r\n        mintAddress = _mintAddress;\r\n        _isExcludedFromFee[_mintAddress] = true;\r\n    }\r\n\r\n    function setLpReward (address _lpReward) public onlyOwner {\r\n        lpReward = _lpReward;\r\n        _isExcludedFromFee[_lpReward] = true;\r\n    }\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function setSwapPair(address account, bool state) public onlyOwner {\r\n        _isSwapPair[account] = state;\r\n    }\r\n\r\n    function setExcludedFromFee(address account, bool state) public onlyOwner {\r\n        _isExcludedFromFee[account] = state;\r\n    }\r\n\r\n    function setNumTokensSellToAddToLiquidity(uint256 _number)\r\n        external\r\n        onlyOwner\r\n    {\r\n        numTokensSellToAddToLiquidity = _number;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function takeMint() public {\r\n        require(_msgSender() == mintAddress, \"No permission\");\r\n        if (unTakeMint == 0) {\r\n          require(block.number >= nextMintBlock, \"Time is not up\");\r\n        }\r\n        _takeMint();\r\n\r\n        _balances[mintAddress] = _balances[mintAddress].add(unTakeMint);\r\n        _totalSupply = _totalSupply.add(unTakeMint);\r\n\r\n        emit Transfer(address(0), mintAddress, unTakeMint);\r\n\r\n        unTakeMint = 0;\r\n    }\r\n\r\n    function setLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        liquifyEnabled = _enabled;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isSwapPair(address pair) public view returns (bool) {\r\n        return _isSwapPair[pair];\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function calculateLiquidityFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount.mul(feeRate).mul(_liquidityFee).div(1000 * 100);\r\n    }\r\n\r\n    function calculateRewardFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount.mul(feeRate).mul(_rewardFee).div(1000 * 100);\r\n    }\r\n\r\n    function calculateBurnFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(feeRate).mul(_burnFee).div(1000 * 100);\r\n    }\r\n\r\n    function calculateFoundFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(feeRate).mul(_foundFee).div(1000 * 100);\r\n    }\r\n\r\n    function calculateDevFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(feeRate).mul(_devFee).div(1000 * 100);\r\n    }\r\n\r\n    function calculateInviterFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount.mul(feeRate).mul(_inviterFee).div(1000 * 100);\r\n    }\r\n\r\n    function calculateTransferFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount.mul(_transferFee).div(1000);\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (\r\n            _liquidityFee == 0 &&\r\n            _rewardFee == 0 &&\r\n            _burnFee == 0 &&\r\n            _foundFee == 0 &&\r\n            _devFee == 0 &&\r\n            _inviterFee == 0 &&\r\n            _transferFee == 0\r\n        ) return;\r\n\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousRewardFee = _rewardFee;\r\n        _previousBurnFee = _burnFee;\r\n        _previousFoundFee = _foundFee;\r\n        _previousDevFee = _devFee;\r\n        _previousInviterFee = _inviterFee;\r\n        _previousTransferFee = _transferFee;\r\n\r\n        _liquidityFee = 0;\r\n        _rewardFee = 0;\r\n        _burnFee = 0;\r\n        _foundFee = 0;\r\n        _devFee = 0;\r\n        _inviterFee = 0;\r\n        _transferFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _liquidityFee = _previousLiquidityFee;\r\n        _rewardFee = _previousRewardFee;\r\n        _burnFee = _previousBurnFee;\r\n        _foundFee = _previousFoundFee;\r\n        _devFee = _previousDevFee;\r\n        _inviterFee = _previousInviterFee;\r\n        _transferFee = _previousTransferFee;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (\r\n            !isContract(from) && _balances[from].sub(amount) < 0.1 * 10**18\r\n        ) {\r\n            amount = _balances[from].sub(0.1 * 10**18);\r\n        }\r\n\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinTokenBalance = contractTokenBalance >=\r\n            numTokensSellToAddToLiquidity;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            !isSwapPair(from) &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            contractTokenBalance = numTokensSellToAddToLiquidity;\r\n            //add liquidity\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n\r\n        _takeMint();\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n            feeRate = 0;\r\n        } else if (isSwapPair(from)) {\r\n            feeRate = _buyFee;\r\n        } else if (isSwapPair(to)) {\r\n            feeRate = _sellFee;\r\n        }\r\n\r\n        if (_totalSupply.sub(_balances[burnAddress]) < 5000000 * 10**18) {\r\n            _transferFee = 10;\r\n        } else {\r\n            _transferFee = 100;\r\n        }\r\n        \r\n        // set invite\r\n        bool shouldSetInviter = balanceOf(to) == 0 &&\r\n            inviter[to] == address(0) &&\r\n            !isContract(from) &&\r\n            !isContract(to);\r\n\r\n        if (!takeFee) {\r\n            removeAllFee();\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        if (isSwapPair(from) || isSwapPair(to)) {\r\n            _transferSwap(from, to, amount);\r\n        } else {\r\n            _transferStandard(from, to, amount);\r\n        }\r\n\r\n        if (!takeFee) {\r\n            restoreAllFee();\r\n        }\r\n\r\n        if (shouldSetInviter) {\r\n            inviter[to] = from;\r\n        }\r\n    }\r\n\r\n    function _transferSwap(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        (\r\n            uint256 transferAmount,\r\n            uint256 liquidityFee,\r\n            uint256 rewardFee,\r\n            uint256 burnFee,\r\n            uint256 foundFee,\r\n            uint256 devFee,\r\n\r\n        ) = _getValues(amount);\r\n\r\n        require(transferAmount > 0, \"_transferSwap add is zero\");\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: _transferSwap amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(transferAmount);\r\n\r\n        emit Transfer(sender, recipient, transferAmount);\r\n\r\n        _takeInviterFee(sender, recipient, amount);\r\n        _takeLiquidity(sender, liquidityFee);\r\n        _takeReward(sender, rewardFee);\r\n        _takeBurn(sender, burnFee);\r\n        _takeFound(sender, foundFee);\r\n        _takeDev(sender, devFee);\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 transferFee = calculateTransferFee(amount);\r\n        uint256 transferAmount = amount.sub(transferFee);\r\n\r\n        require(transferAmount > 0, \"_transferSwap add is zero\");\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: _transferStandard amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(transferAmount);\r\n\r\n        _takeBurn(sender, transferFee);\r\n\r\n        emit Transfer(sender, recipient, transferAmount);\r\n    }\r\n\r\n    function _getValues(uint256 amount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 liquidityFee = calculateLiquidityFee(amount);\r\n        uint256 rewardFee = calculateRewardFee(amount);\r\n        uint256 burnFee = calculateBurnFee(amount);\r\n        uint256 devFee = calculateDevFee(amount);\r\n        uint256 foundFee = calculateFoundFee(amount);\r\n        uint256 inviterFee = calculateInviterFee(amount);\r\n        uint256 transferAmount = amount;\r\n        {\r\n            transferAmount = transferAmount.sub(liquidityFee);\r\n            transferAmount = transferAmount.sub(rewardFee);\r\n            transferAmount = transferAmount.sub(burnFee);\r\n            transferAmount = transferAmount.sub(foundFee);\r\n            transferAmount = transferAmount.sub(devFee);\r\n            transferAmount = transferAmount.sub(inviterFee);\r\n        }\r\n        return (\r\n            transferAmount,\r\n            liquidityFee,\r\n            rewardFee,\r\n            burnFee,\r\n            foundFee,\r\n            devFee,\r\n            inviterFee\r\n        );\r\n    }\r\n\r\n    function _takeFound(address sender, uint256 foundFee) private {\r\n        if (_foundFee == 0) return;\r\n        _balances[foundAddress] = _balances[foundAddress].add(foundFee);\r\n        emit Transfer(sender, foundAddress, foundFee);\r\n    }\r\n\r\n    function _takeDev(address sender, uint256 devFee) private {\r\n        if (_devFee == 0) return;\r\n        _balances[devAddress] = _balances[devAddress].add(devFee);\r\n        emit Transfer(sender, devAddress, devFee);\r\n    }\r\n\r\n    function _takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        if (_inviterFee == 0) return;\r\n\r\n        address cur = sender;\r\n        if (_isSwapPair[sender]) {\r\n            cur = recipient;\r\n        } else if (_isSwapPair[recipient]) {\r\n            cur = sender;\r\n        }\r\n\r\n        uint256 rate0 = 40;\r\n        uint256 rate1 = 20;\r\n\r\n        if (feeRate == 80) {\r\n            rate0 = 30;\r\n            rate1 = 15;\r\n        }\r\n\r\n        for (int256 i = 0; i < 8; i++) {\r\n            uint256 rate;\r\n            if (i == 0) {\r\n                rate = rate0;\r\n            } else if (i < 5) {\r\n                rate = rate1;\r\n            } else {\r\n                rate = 10;\r\n            }\r\n            cur = inviter[cur];\r\n            if (cur == address(0)) {\r\n                cur = burnAddress;\r\n            }\r\n\r\n            uint256 inviterFee = amount.mul(rate).div(10000);\r\n\r\n            _balances[cur] = _balances[cur].add(inviterFee);\r\n\r\n            emit Transfer(sender, cur, inviterFee);\r\n        }\r\n    }\r\n\r\n    function _takeBurn(address sender, uint256 burnFee) private {\r\n        if (_burnFee == 0) return;\r\n        _balances[burnAddress] = _balances[burnAddress].add(burnFee);\r\n        emit Transfer(sender, burnAddress, burnFee);\r\n    }\r\n\r\n    function _takeLiquidity(address sender, uint256 liquidityFee) private {\r\n        if (_liquidityFee == 0) return;\r\n        _balances[address(this)] = _balances[address(this)].add(liquidityFee);\r\n        emit Transfer(sender, address(this), liquidityFee);\r\n    }\r\n\r\n    function _takeReward(address sender, uint256 rewardFee) private {\r\n        if (_rewardFee == 0) return;\r\n        _balances[lpReward] = _balances[lpReward].add(rewardFee);\r\n        emit Transfer(sender, lpReward, rewardFee);\r\n    }\r\n\r\n    function _takeMint() private {\r\n        uint256 amount;\r\n        uint256 blockNumber = block.number;\r\n        if (blockNumber < nextMintBlock) return;\r\n\r\n        uint256 cycle = blockNumber.sub(lastMintBlock).div(28000);\r\n\r\n        if (_totalSupply.sub(_balances[burnAddress]) < 5000000 * 10**18) {\r\n            amount = cycle.mul(5160 * 10**18);\r\n        } else {\r\n            amount = cycle.mul(2580 * 10**18);\r\n        }\r\n\r\n        unTakeMint = unTakeMint.add(amount);\r\n\r\n        if (_totalSupply.add(unTakeMint) > _maxSupply) {\r\n            unTakeMint = _maxSupply.sub(_totalSupply);\r\n        }\r\n\r\n        lastMintBlock = cycle.mul(28000).add(lastMintBlock);\r\n        nextMintBlock = lastMintBlock.add(28000);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        // capture the contract's current BNB balance.\r\n        // this is so that we can capture exactly the amount of BNB that the\r\n        // swap creates, and not make the liquidity event include any BNB that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = IERC20(usdAddress).balanceOf(address(this));\r\n\r\n        // swap tokens for BNB\r\n        swapTokensForU(half);\r\n\r\n        // how much BNB did we just swap into?\r\n        uint256 newBalance = IERC20(usdAddress).balanceOf(address(this)).sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n\r\n        if (liquifyEnabled) {\r\n            addLiquidity(otherHalf, newBalance);\r\n        }\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForU(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = swapRouter.WETH();\r\n        path[2] = usdAddress;\r\n\r\n        _approve(address(this), address(swapRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 uAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(swapRouter), tokenAmount);\r\n        IERC20(usdAddress).approve(address(swapRouter), uAmount);\r\n\r\n        // add the liquidityswapExactTokensForTokensSupportingFeeOnTransferTokens\r\n        swapRouter.addLiquidity(\r\n            address(this),\r\n            usdAddress,\r\n            tokenAmount,\r\n            uAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_foundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviterNumber\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"isSwapPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMintBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMintBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpReward\",\"type\":\"address\"}],\"name\":\"setLpReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintAddress\",\"type\":\"address\"}],\"name\":\"setMintAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unTakeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://32ef6603820ac9cedd9416c47cf075deef82c01a53fe4a53d33d87af4c943049"}