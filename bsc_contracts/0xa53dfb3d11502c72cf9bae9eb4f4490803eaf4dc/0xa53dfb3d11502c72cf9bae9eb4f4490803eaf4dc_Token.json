{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/Token.sol\r\n\r\n/* SPDX-License-Identifier: UNLICENSED */\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\ninterface IPool {\r\n    function getPoolId() view external returns (bytes32 poolID);\r\n}\r\n\r\ninterface IAsset {\r\n    // solhint-disable-previous-line no-empty-blocks\r\n}\r\n\r\ninterface IVault {\r\n    function joinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        JoinPoolRequest memory request\r\n    ) external payable;\r\n\r\n    struct JoinPoolRequest {\r\n        IAsset[] assets;\r\n        uint256[] maxAmountsIn;\r\n        bytes userData;\r\n        bool fromInternalBalance;\r\n    }\r\n\r\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\r\n\r\n    function swap(\r\n        SingleSwap memory singleSwap,\r\n        FundManagement memory funds,\r\n        uint256 limit,\r\n        uint256 deadline\r\n    ) external payable returns (uint256);\r\n\r\n    struct SingleSwap {\r\n        bytes32 poolId;\r\n        SwapKind kind;\r\n        IAsset assetIn;\r\n        IAsset assetOut;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    struct FundManagement {\r\n        address sender;\r\n        bool fromInternalBalance;\r\n        address payable recipient;\r\n        bool toInternalBalance;\r\n    }\r\n}\r\n\r\ninterface Bank {\r\n    function addRewards(address token, uint256 amount) external;\r\n}\r\n\r\ninterface IFeeManager {\r\n    function execTokenFees(\r\n        uint256 toLiquidity,\r\n        uint256 toGrowth,\r\n        uint256 total\r\n    ) external;\r\n}\r\n\r\ncontract Token is IERC20, Ownable {\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowances;\r\n    uint256 public override totalSupply;\r\n\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n\r\n    mapping(address => bool) public isBlacklisted;\r\n    mapping(address => bool) public isExcludedFromFee;\r\n\r\n    IFeeManager public FEE_MANAGER;\r\n    IVault public BAL_VAULT;\r\n    mapping(address => bool) public isLiquidityPair;\r\n\r\n    struct Fees {\r\n        uint8 buy;\r\n        uint8 sale;\r\n        uint8 transfer;\r\n    }\r\n\r\n    Fees public fees = Fees({buy: 10, sale: 10, transfer: 10});\r\n\r\n    // [rewards, growth, bank]\r\n    address[] public feesReceivers = [\r\n        0x000000000000000000000000000000000000dEaD,\r\n        0x000000000000000000000000000000000000dEaD,\r\n        0x000000000000000000000000000000000000dEaD\r\n    ];\r\n\r\n    // [rewards, liqudity, growth, bank]\r\n    uint8[] buyFeesDistribution = [10, 20, 50, 20];\r\n    uint8[] saleFeesDistribution = [10, 20, 50, 20];\r\n    uint8[] transferFeesDistribution = [10, 20, 50, 20];\r\n\r\n    // [rewards, liqudity, growth, total]\r\n    uint256[] public feesCounter = [0, 0, 0, 0, 0];\r\n\r\n    uint256 public swapThreshold = 100e18;\r\n\r\n    bool public executeSwapsActive = false;\r\n\r\n    constructor(\r\n        uint256 _initialAmount,\r\n        string memory _tokenName,\r\n        uint8 _decimalUnits,\r\n        string memory _tokenSymbol,\r\n        address _vault,\r\n        address feeManager\r\n    ) {\r\n        balances[_msgSender()] = _initialAmount;\r\n        totalSupply = _initialAmount;\r\n        name = _tokenName;\r\n        decimals = _decimalUnits;\r\n        symbol = _tokenSymbol;\r\n\r\n        BAL_VAULT = IVault(_vault);\r\n        FEE_MANAGER = IFeeManager(feeManager);\r\n\r\n        _approve(msg.sender, address(BAL_VAULT), type(uint256).max);\r\n        _approve(address(this), address(BAL_VAULT), type(uint256).max);\r\n\r\n        isLiquidityPair[address(BAL_VAULT)] = true;\r\n\r\n        isExcludedFromFee[feeManager] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[_msgSender()] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _initialAmount);\r\n        emit OwnershipTransferred(address(0), _msgSender());\r\n    }\r\n\r\n    function _transferExcluded(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) private {\r\n        balances[_from] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function _transferNoneExcluded(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) private {\r\n        balances[_from] -= _value;\r\n\r\n        uint256 feeValue = 0;\r\n        uint8[] memory feesDistribution;\r\n\r\n        if (isLiquidityPair[_from]) {\r\n            // buy\r\n            feeValue = (_value * fees.buy) / 100;\r\n            feesDistribution = buyFeesDistribution;\r\n        } else if (isLiquidityPair[_to]) {\r\n            // sell\r\n            feeValue = (_value * fees.sale) / 100;\r\n            feesDistribution = saleFeesDistribution;\r\n        } else {\r\n            // transfer\r\n            feeValue = (_value * fees.transfer) / 100;\r\n            feesDistribution = transferFeesDistribution;\r\n        }\r\n\r\n        uint256 receivedValue = _value - feeValue;\r\n\r\n        // REWARDS POOL\r\n        uint256 rewardsFee = (feeValue * feesDistribution[0]) / 100;\r\n        feesCounter[0] += rewardsFee;\r\n        balances[feesReceivers[0]] += rewardsFee;\r\n        emit Transfer(_from, feesReceivers[0], rewardsFee);\r\n\r\n        // LIQUIDITY AND GROWTH\r\n        for (uint8 i = 1; i < 4; i++) {\r\n            feesCounter[i] += (feeValue * feesDistribution[i]) / 100;\r\n        }\r\n        feesCounter[4] += feeValue - rewardsFee;\r\n        if (feesCounter[4] >= swapThreshold && executeSwapsActive)\r\n            _executeSwaps();\r\n\r\n        balances[_to] += receivedValue;\r\n        emit Transfer(_from, _to, receivedValue);\r\n    }\r\n\r\n    function _executeSwaps() private {\r\n        uint256 toLiquidity = feesCounter[1] / 2;\r\n        uint256 toGrowth = feesCounter[2];\r\n        uint256 toBank = feesCounter[3];\r\n\r\n        _transferExcluded(address(this), address(FEE_MANAGER), feesCounter[1] + feesCounter[2]);\r\n        FEE_MANAGER.execTokenFees(toLiquidity, toGrowth, feesCounter[4]);\r\n\r\n        _transferExcluded(address(this), feesReceivers[3], toBank); \r\n        Bank(feesReceivers[3]).addRewards(address(this), toBank);\r\n\r\n        feesCounter[1] = 0;\r\n        feesCounter[2] = 0;\r\n        feesCounter[3] = 0;\r\n        feesCounter[4] = 0;\r\n    }\r\n\r\n    function _executeTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) private {\r\n        if (isExcludedFromFee[_from] || isExcludedFromFee[_to])\r\n            _transferExcluded(_from, _to, _value);\r\n        else _transferNoneExcluded(_from, _to, _value);\r\n    }\r\n\r\n    function _transfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) private {\r\n        require(\r\n            _from != address(0),\r\n            \"TRANSFER: Transfer from the dead address\"\r\n        );\r\n        require(_to != address(0), \"TRANSFER: Transfer to the dead address\");\r\n        require(_value > 0, \"TRANSFER: Invalid amount\");\r\n        require(isBlacklisted[_from] == false, \"TRANSFER: isBlacklisted\");\r\n        require(balances[_from] >= _value, \"TRANSFER: Insufficient balance\");\r\n        _executeTransfer(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        override\r\n        returns (bool success)\r\n    {\r\n        _transfer(_msgSender(), _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public override returns (bool success) {\r\n        if (allowances[_from][_msgSender()] < type(uint256).max) {\r\n            allowances[_from][_msgSender()] -= _value;\r\n        }\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        override\r\n        returns (bool success)\r\n    {\r\n        _approve(_msgSender(), _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address _sender,\r\n        address _spender,\r\n        uint256 _value\r\n    ) private returns (bool success) {\r\n        allowances[_sender][_spender] = _value;\r\n        emit Approval(_sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 remaining)\r\n    {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    /***********************************|\r\n    |         Owner Functions           |\r\n    |__________________________________*/\r\n\r\n    function setIsBlacklisted(address user, bool value) public onlyOwner {\r\n        isBlacklisted[user] = value;\r\n    }\r\n\r\n    function setIsExcludedFromFee(address user, bool value) public onlyOwner {\r\n        isExcludedFromFee[user] = value;\r\n    }\r\n\r\n    function setIsLiquidityPair(address user, bool value) public onlyOwner {\r\n        isLiquidityPair[user] = value;\r\n    }\r\n\r\n    function setVault(address vault) public onlyOwner {\r\n        BAL_VAULT = IVault(vault);\r\n    }\r\n\r\n    function approveOnRouter() public onlyOwner {\r\n        _approve(address(this), address(BAL_VAULT), type(uint256).max);\r\n    }\r\n\r\n    function setFeeManager(address feeManager) public onlyOwner {\r\n        FEE_MANAGER = IFeeManager(feeManager);\r\n        isExcludedFromFee[feeManager] = true;\r\n    }\r\n\r\n    function setFees(\r\n        uint8 buy_,\r\n        uint8 sale_,\r\n        uint8 transfer_\r\n    ) public onlyOwner {\r\n        fees = Fees({buy: buy_, sale: sale_, transfer: transfer_});\r\n    }\r\n\r\n    function setFeesReceivers(address[] memory value) public onlyOwner {\r\n        feesReceivers = value;\r\n    }\r\n\r\n    function setBuyFeesDistribution(uint8[] memory value) public onlyOwner {\r\n        buyFeesDistribution = value;\r\n    }\r\n\r\n    function setSaleFeesDistribution(uint8[] memory value) public onlyOwner {\r\n        saleFeesDistribution = value;\r\n    }\r\n\r\n    function setTransferFeesDistribution(uint8[] memory value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        transferFeesDistribution = value;\r\n    }\r\n\r\n    function setSwapThreshold(uint256 value) public onlyOwner {\r\n        swapThreshold = value;\r\n    }\r\n\r\n    function setExecuteSwapsActive(bool value) public onlyOwner {\r\n        executeSwapsActive = value;\r\n    }\r\n\r\n    function withdrawTokens() public onlyOwner {\r\n        _transferExcluded(address(this), owner(), balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BAL_VAULT\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_MANAGER\",\"outputs\":[{\"internalType\":\"contract IFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveOnRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeSwapsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sale\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transfer\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feesCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feesReceivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"value\",\"type\":\"uint8[]\"}],\"name\":\"setBuyFeesDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExecuteSwapsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buy_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sale_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transfer_\",\"type\":\"uint8\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"value\",\"type\":\"address[]\"}],\"name\":\"setFeesReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsLiquidityPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"value\",\"type\":\"uint8[]\"}],\"name\":\"setSaleFeesDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"value\",\"type\":\"uint8[]\"}],\"name\":\"setTransferFeesDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000100000000000000000000000000ee1c8dbfbf958484c6a4571f5fb7b99b74a54aa7000000000000000000000000000000000000000000000000000000000000dead00000000000000000000000000000000000000000000000000000000000000125468652042616e6469742050726f6a6563740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000642414e4449540000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://298e9e84a0ba84b5b7315510f38a07fee8f2f42e4341473b7de9a0a9fc818027"}