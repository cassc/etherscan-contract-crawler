{"SourceCode": "pragma solidity ^0.8.19;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n     modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external ;\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\ncontract Token is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 totalFee;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public eff;\r\n\r\n    // uint256 public swapTokensAtAmount = totalSupply.mul(2).div(10**6); // 0.002%\r\n    uint256 public swapTokensAtAmount = 1e18;\r\n\r\n    bool private swapping;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n\r\n    address private _deadAddress =\r\n        address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    uint256 public communityFee = 10;\r\n    uint256 public devFee = 10;\r\n    uint256 public foundationFee = 20;\r\n    uint256 public marketFee = 10;\r\n    uint256 public nftFee = 20;\r\n\r\n    address private _communityPoolAddr;\r\n    address private _devPoolAddr;\r\n    address private _foundationPoolAddr;\r\n    address private _marketPoolAddr;\r\n    address private _nftPoolAddr;\r\n\r\n    uint256 public trasferFee = 200;\r\n\r\n    uint256 public feeRate = 70;\r\n\r\n    mapping(address => bool) public ammPairs;\r\n    address public usdtAddr;\r\n    ISwapRouter private _swapRouter;\r\n    address public uniswapV2Pair;\r\n\r\n    TokenDistributor private _tokenDistributor;\r\n\r\n    event SwapUsdt(address indexed path0, address indexed path1, address indexed to, uint256 amount, uint256 value);\r\n\r\n    constructor(address holder, address cpa, address dpa, address fpa, address mpa, address npa, address USDTAddress, address RouterAddress) {\r\n        _name = \"ETXU\";\r\n        _symbol = \"ETXU\";\r\n        _decimals = 18;\r\n\r\n        _tTotal = 96800000 * 10**_decimals;\r\n        _tOwned[holder] = _tTotal;\r\n\r\n        _owner = msg.sender;\r\n\r\n        _communityPoolAddr = cpa;\r\n        _devPoolAddr = dpa;\r\n        _foundationPoolAddr = fpa;\r\n        _marketPoolAddr = mpa;\r\n        _nftPoolAddr = npa;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        usdtAddr = USDTAddress;\r\n    \r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = ~uint256(0);\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address usdtPair = swapFactory.createPair(address(this), usdtAddr);\r\n        require(IUniswapV2Pair(usdtPair).token1() == address(this), \"invalid token address\");\r\n        uniswapV2Pair = usdtPair;\r\n        ammPairs[usdtPair] = true;\r\n        address mainPair = swapFactory.createPair(address(this), swapRouter.WETH());\r\n        ammPairs[mainPair] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(usdtAddr);\r\n\r\n        eff[address(this)] = true;\r\n        eff[holder] = true;\r\n        eff[_owner] = true;\r\n        eff[address(_swapRouter)] = true;\r\n\r\n        emit Transfer(address(0), holder, _tTotal);\r\n    }\r\n\r\n    function setEFF( address _eAddress) external onlyOwner{\r\n        eff[_eAddress] = true;\r\n    }\r\n\r\n    function setFaEFF( address _eAddress) external onlyOwner{\r\n        eff[_eAddress] = false;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n        if( canSwap &&\r\n            !swapping &&\r\n            !ammPairs[from] &&\r\n            from != owner() &&\r\n            to != owner()\r\n        ) {\r\n            swapping = true;\r\n            swapUSDT(contractTokenBalance);\r\n            IERC20 USDT = IERC20(usdtAddr);\r\n            uint256 usdtBalance = USDT.balanceOf(address(_tokenDistributor));\r\n            emit SwapUsdt(address(this), usdtAddr, address(_tokenDistributor), totalFee, usdtBalance);\r\n            USDT.transferFrom(address(_tokenDistributor), _communityPoolAddr, usdtBalance.mul(communityFee).div(70));\r\n            USDT.transferFrom(address(_tokenDistributor), _devPoolAddr, usdtBalance.mul(devFee).div(70));\r\n            USDT.transferFrom(address(_tokenDistributor), _foundationPoolAddr, usdtBalance.mul(foundationFee).div(70));\r\n            USDT.transferFrom(address(_tokenDistributor), _marketPoolAddr, usdtBalance.mul(marketFee).div(70));\r\n            USDT.transferFrom(address(_tokenDistributor), _nftPoolAddr, usdtBalance.mul(nftFee).div(70));\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        bool isTrans = false;\r\n        bool isAdd = false;\r\n        bool isDel = false;\r\n        if (ammPairs[to]) {\r\n            (isAdd,) = getLPStatus(from, to);\r\n        }else if(ammPairs[from]){\r\n            (,isDel) = getLPStatus(from, to);\r\n        }else{\r\n            if (!ammPairs[from] && !ammPairs[to]) {\r\n                isTrans = true;\r\n            }\r\n        }\r\n        if (isAdd || isDel || eff[from] || eff[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isTrans);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isTrans\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\r\n        uint256 toRate = 1000;\r\n        if (takeFee) {\r\n            if (isTrans) {\r\n                uint256 tBurn = tAmount.mul(trasferFee).div(1000);\r\n                _take(sender, _deadAddress, tBurn);\r\n                toRate = toRate - trasferFee;\r\n            } else {\r\n                uint256 fee = tAmount.mul(feeRate).div(1000);\r\n                _take(sender, address(this), fee);\r\n                toRate = toRate - feeRate;\r\n            }\r\n        }\r\n\r\n        _tOwned[recipient] = _tOwned[recipient].add(tAmount.mul(toRate).div(1000));\r\n        emit Transfer(sender, recipient, tAmount.mul(toRate).div(1000));\r\n    }\r\n\r\n    function swapUSDT(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdtAddr;\r\n\r\n        _approve(address(this), address(_swapRouter), tokenAmount);\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function getLPStatus(address from,address to) internal view  returns (bool isAdd,bool isDel){\r\n        IUniswapV2Pair pair;\r\n        address token = address(this);\r\n        if(ammPairs[to]){\r\n            pair = IUniswapV2Pair(to);\r\n        }else{\r\n            pair = IUniswapV2Pair(from);\r\n        }\r\n        isAdd = false;\r\n        isDel = false;\r\n        address token0 = pair.token0();\r\n        address token1 = pair.token1();\r\n        (uint r0,uint r1,) = pair.getReserves();\r\n        uint bal1 = IERC20(token1).balanceOf(address(pair));\r\n        uint bal0 = IERC20(token0).balanceOf(address(pair));\r\n        if (ammPairs[to]) {\r\n            if (token0 == token) {\r\n                if (bal1 > r1) {\r\n                    uint change1 = bal1 - r1;\r\n                    isAdd = change1 > 1000;\r\n                }\r\n            } else {\r\n                if (bal0 > r0) {\r\n                    uint change0 = bal0 - r0;\r\n                    isAdd = change0 > 1000;\r\n                }\r\n            }\r\n        }else {\r\n            if (token0 == token) {\r\n                if (bal1 < r1 && r1 > 0) {\r\n                    uint change1 = r1 - bal1;\r\n                    isDel = change1 > 0;\r\n                }\r\n            } else {\r\n                if (bal0 < r0 && r0 > 0) {\r\n                    uint change0 = r0 - bal0;\r\n                    isDel = change0 > 0;\r\n                }\r\n            }\r\n        }\r\n        return (isAdd,isDel);\r\n    }\r\n\r\n    function _take(address from, address to, uint256 tValue) private {\r\n        _tOwned[to] = _tOwned[to].add(tValue);\r\n        emit Transfer(from, to, tValue);\r\n    }\r\n\r\n    function _takeTransfer(address from, address to, uint256 tAmount) private {\r\n        _tOwned[from] = _tOwned[from].sub(tAmount);\r\n        _tOwned[to] = _tOwned[to].add(tAmount);\r\n        emit Transfer(from, to, tAmount);\r\n    }\r\n}\r\n\r\ncontract ETXU is Token {\r\n\r\n    constructor() Token(\r\n        address(0x8636E8eBB858EE143a3Aeccf76ad10ccaE8fd81C),//holder\r\n        address(0xEd974c82B4Af45E6890643095c57b7Cd1dD64f01) ,// community\r\n         address(0xa1c382F582FA0169F5CfA7ecbc9C68E376beB7E3) ,// dev\r\n         address(0x7CFF48f196B4232AA83EAf18D70374Eb204a6CA2) ,// foundation\r\n         address(0x44d4987A4890DD6366854daF409DD183f2CA3be6) ,// narket\r\n         address(0x54F593e645f02a6Aa73Dfd2845655b56c787E698) ,// nft\r\n        address(0x55d398326f99059fF775485246999027B3197955),// USDT\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E) // PancakeSwap: Router v2\r\n    ){\r\n\r\n    }\r\n}\r\n\r\n// address(0xc632079f98dBA60003b06DC5a735E75f5BCe185B),// USDT\r\n// address(0xD99D1c33F9fC3444f8101754aBC46c52416550D1) // PancakeSwap: Router v2\r\n// address(0x10ED43C718714eb63d5aA57B78B54704E256024E), // PancakeSwap: Router v2\r\n// address(0x55d398326f99059fF775485246999027B3197955), // USDT", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"path0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"path1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SwapUsdt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eAddress\",\"type\":\"address\"}],\"name\":\"setEFF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eAddress\",\"type\":\"address\"}],\"name\":\"setFaEFF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trasferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ETXU", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d2244663640252de148fa1ccd1b96c007ab096199ae0abe6e3e1fe124d530839"}