{"SourceCode": "{\"BEP20.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./IBEP20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IBEP20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {BEP20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of BEP20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IBEP20-approve}.\\r\\n */\\r\\ncontract BEP20 is Context, IBEP20, IBEP20Metadata {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {BEP20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IBEP20-balanceOf} and {IBEP20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {BEP20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IBEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IBEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"BEP20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\"},\"Context.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"DividendPayingToken.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./BEP20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeMathUint.sol\\\";\\r\\nimport \\\"./SafeMathInt.sol\\\";\\r\\nimport \\\"./DividendPayingTokenInterface.sol\\\";\\r\\nimport \\\"./DividendPayingTokenOptionalInterface.sol\\\";\\r\\n\\r\\n\\r\\n/// @title Dividend-Paying Token\\r\\n/// @author Roger Wu (https://github.com/roger-wu)\\r\\n/// @dev A mintable BEP20 token that allows anyone to pay and distribute ether\\r\\n///  to token holders as dividends and allows token holders to withdraw their dividends.\\r\\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\\r\\ncontract DividendPayingToken is BEP20, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeMathUint for uint256;\\r\\n  using SafeMathInt for int256;\\r\\n\\r\\n  // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\\r\\n  // For more discussion about choosing the value of `magnitude`,\\r\\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\r\\n  uint256 constant internal magnitude = 2**128;\\r\\n\\r\\n  uint256 internal magnifiedDividendPerShare;\\r\\n\\r\\n  // About dividendCorrection:\\r\\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\r\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\r\\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\r\\n  //   `dividendOf(_user)` should not be changed,\\r\\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\r\\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\r\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\r\\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\r\\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\r\\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\r\\n  mapping(address =\\u003e int256) internal magnifiedDividendCorrections;\\r\\n  mapping(address =\\u003e uint256) internal withdrawnDividends;\\r\\n\\r\\n  uint256 public totalDividendsDistributed;\\r\\n\\r\\n  constructor(string memory _name, string memory _symbol) BEP20(_name, _symbol) {\\r\\n\\r\\n  }\\r\\n\\r\\n  /// @dev Distributes dividends whenever ether is paid to this contract.\\r\\n  receive() external payable {\\r\\n    distributeDividends();\\r\\n  }\\r\\n\\r\\n  /// @notice Distributes ether to token holders as dividends.\\r\\n  /// @dev It reverts if the total supply of tokens is 0.\\r\\n  /// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\\r\\n  /// About undistributed ether:\\r\\n  ///   In each distribution, there is a small amount of ether not distributed,\\r\\n  ///     the magnified amount of which is\\r\\n  ///     `(msg.value * magnitude) % totalSupply()`.\\r\\n  ///   With a well-chosen `magnitude`, the amount of undistributed ether\\r\\n  ///     (de-magnified) in a distribution can be less than 1 wei.\\r\\n  ///   We can actually keep track of the undistributed ether in a distribution\\r\\n  ///     and try to distribute it in the next distribution,\\r\\n  ///     but keeping track of such data on-chain costs much more than\\r\\n  ///     the saved ether, so we don\\u0027t do that.\\r\\n  function distributeDividends() public override payable {\\r\\n    require(totalSupply() \\u003e 0);\\r\\n\\r\\n    if (msg.value \\u003e 0) {\\r\\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\r\\n        (msg.value).mul(magnitude) / totalSupply()\\r\\n      );\\r\\n      emit DividendsDistributed(msg.sender, msg.value);\\r\\n\\r\\n      totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraws the ether distributed to the sender.\\r\\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\r\\n  function withdrawDividend() public virtual override {\\r\\n    _withdrawDividendOfUser(payable(msg.sender));\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraws the ether distributed to the sender.\\r\\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\r\\n  function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\\r\\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\\r\\n    if (_withdrawableDividend \\u003e 0) {\\r\\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\\r\\n      emit DividendWithdrawn(user, _withdrawableDividend);\\r\\n      (bool success,) = user.call{value: _withdrawableDividend, gas: 3000}(\\\"\\\");\\r\\n\\r\\n      if(!success) {\\r\\n        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\\r\\n        return 0;\\r\\n      }\\r\\n\\r\\n      return _withdrawableDividend;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n  function dividendOf(address _owner) public view override returns(uint256) {\\r\\n    return withdrawableDividendOf(_owner);\\r\\n  }\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n  function withdrawableDividendOf(address _owner) public view override returns(uint256) {\\r\\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\\r\\n  }\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\r\\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\\r\\n    return withdrawnDividends[_owner];\\r\\n  }\\r\\n\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\r\\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\r\\n  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\r\\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\\r\\n    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\\r\\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\\r\\n  }\\r\\n\\r\\n  /// @dev Internal function that transfer tokens from one address to another.\\r\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n  /// @param from The address to transfer from.\\r\\n  /// @param to The address to transfer to.\\r\\n  /// @param value The amount to be transferred.\\r\\n  function _transfer(address from, address to, uint256 value) internal virtual override {\\r\\n    require(false);\\r\\n\\r\\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\\r\\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\\r\\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\\r\\n  }\\r\\n\\r\\n  /// @dev Internal function that mints tokens to an account.\\r\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n  /// @param account The account that will receive the created tokens.\\r\\n  /// @param value The amount that will be created.\\r\\n  function _mint(address account, uint256 value) internal override {\\r\\n    super._mint(account, value);\\r\\n\\r\\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\\r\\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\\r\\n  }\\r\\n\\r\\n  /// @dev Internal function that burns an amount of the token of a given account.\\r\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n  /// @param account The account whose tokens will be burnt.\\r\\n  /// @param value The amount that will be burnt.\\r\\n  function _burn(address account, uint256 value) internal override {\\r\\n    super._burn(account, value);\\r\\n\\r\\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\\r\\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\\r\\n  }\\r\\n\\r\\n  function _setBalance(address account, uint256 newBalance) internal {\\r\\n    uint256 currentBalance = balanceOf(account);\\r\\n\\r\\n    if(newBalance \\u003e currentBalance) {\\r\\n      uint256 mintAmount = newBalance.sub(currentBalance);\\r\\n      _mint(account, mintAmount);\\r\\n    } else if(newBalance \\u003c currentBalance) {\\r\\n      uint256 burnAmount = currentBalance.sub(newBalance);\\r\\n      _burn(account, burnAmount);\\r\\n    }\\r\\n  }\\r\\n}\"},\"DividendPayingTokenInterface.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @title Dividend-Paying Token Interface\\r\\n/// @author Roger Wu (https://github.com/roger-wu)\\r\\n/// @dev An interface for a dividend-paying token contract.\\r\\ninterface DividendPayingTokenInterface {\\r\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n  function dividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n  /// @notice Distributes ether to token holders as dividends.\\r\\n  /// @dev SHOULD distribute the paid ether to token holders as dividends.\\r\\n  ///  SHOULD NOT directly transfer ether to token holders in this function.\\r\\n  ///  MUST emit a `DividendsDistributed` event when the amount of distributed ether is greater than 0.\\r\\n  function distributeDividends() external payable;\\r\\n\\r\\n  /// @notice Withdraws the ether distributed to the sender.\\r\\n  /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\\r\\n  ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\\r\\n  function withdrawDividend() external;\\r\\n\\r\\n  /// @dev This event MUST emit when ether is distributed to token holders.\\r\\n  /// @param from The address which sends ether to this contract.\\r\\n  /// @param weiAmount The amount of distributed ether in wei.\\r\\n  event DividendsDistributed(\\r\\n    address indexed from,\\r\\n    uint256 weiAmount\\r\\n  );\\r\\n\\r\\n  /// @dev This event MUST emit when an address withdraws their dividend.\\r\\n  /// @param to The address which withdraws ether from this contract.\\r\\n  /// @param weiAmount The amount of withdrawn ether in wei.\\r\\n  event DividendWithdrawn(\\r\\n    address indexed to,\\r\\n    uint256 weiAmount\\r\\n  );\\r\\n}\"},\"DividendPayingTokenOptionalInterface.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @title Dividend-Paying Token Optional Interface\\r\\n/// @author Roger Wu (https://github.com/roger-wu)\\r\\n/// @dev OPTIONAL functions for a dividend-paying token contract.\\r\\ninterface DividendPayingTokenOptionalInterface {\\r\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\r\\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\r\\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\r\\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\\r\\n}\"},\"IBEP20.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * @dev Interface of the BEP20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IBEP20Metadata.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the BEP20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IBEP20Metadata is IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"},\"IContract.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\ninterface IContract {\\r\\n    function transfer(address, uint256) external returns (bool);\\r\\n    function transferFrom(address, address, uint256) external returns (bool);\\r\\n    function transferAnyBEP20Tokens(address, address, uint256) external;\\r\\n    function youHaveClaimed(address) external view returns (uint256);\\r\\n}\"},\"IterableMapping.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nlibrary IterableMapping {\\r\\n    // Iterable mapping from address to uint;\\r\\n    struct Map {\\r\\n        address[] keys;\\r\\n        mapping(address =\\u003e uint) values;\\r\\n        mapping(address =\\u003e uint) indexOf;\\r\\n        mapping(address =\\u003e bool) inserted;\\r\\n    }\\r\\n\\r\\n    function get(Map storage map, address key) public view returns (uint) {\\r\\n        return map.values[key];\\r\\n    }\\r\\n\\r\\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\\r\\n        if(!map.inserted[key]) {\\r\\n            return -1;\\r\\n        }\\r\\n        return int(map.indexOf[key]);\\r\\n    }\\r\\n\\r\\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\\r\\n        return map.keys[index];\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function size(Map storage map) public view returns (uint) {\\r\\n        return map.keys.length;\\r\\n    }\\r\\n\\r\\n    function set(Map storage map, address key, uint val) public {\\r\\n        if (map.inserted[key]) {\\r\\n            map.values[key] = val;\\r\\n        } else {\\r\\n            map.inserted[key] = true;\\r\\n            map.values[key] = val;\\r\\n            map.indexOf[key] = map.keys.length;\\r\\n            map.keys.push(key);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function remove(Map storage map, address key) public {\\r\\n        if (!map.inserted[key]) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        delete map.inserted[key];\\r\\n        delete map.values[key];\\r\\n\\r\\n        uint index = map.indexOf[key];\\r\\n        uint lastIndex = map.keys.length - 1;\\r\\n        address lastKey = map.keys[lastIndex];\\r\\n\\r\\n        map.indexOf[lastKey] = index;\\r\\n        delete map.indexOf[key];\\r\\n\\r\\n        map.keys[index] = lastKey;\\r\\n        map.keys.pop();\\r\\n    }\\r\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"IUniswapV2Pair.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"},\"IUniswapV2Router.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n// pragma solidity \\u003e=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"},\"Ownable.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"SafeMathInt.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\nCopyright (c) 2018 requestnetwork\\r\\nCopyright (c) 2018 Fragments, Inc.\\r\\n\\r\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\r\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\r\\nin the Software without restriction, including without limitation the rights\\r\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\ncopies of the Software, and to permit persons to whom the Software is\\r\\nfurnished to do so, subject to the following conditions:\\r\\n\\r\\nThe above copyright notice and this permission notice shall be included in all\\r\\ncopies or substantial portions of the Software.\\r\\n\\r\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\nSOFTWARE.\\r\\n*/\\r\\n\\r\\n/**\\r\\n * @title SafeMathInt\\r\\n * @dev Math operations for int256 with overflow safety checks.\\r\\n */\\r\\nlibrary SafeMathInt {\\r\\n    int256 private constant MIN_INT256 = int256(1) \\u003c\\u003c 255;\\r\\n    int256 private constant MAX_INT256 = ~(int256(1) \\u003c\\u003c 255);\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a * b;\\r\\n\\r\\n        // Detect overflow when multiplying MIN_INT256 with -1\\r\\n        require(c != MIN_INT256 || (a \\u0026 MIN_INT256) != (b \\u0026 MIN_INT256));\\r\\n        require((b == 0) || (c / b == a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Division of two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Prevent overflow when dividing MIN_INT256 by -1\\r\\n        require(b != -1 || a != MIN_INT256);\\r\\n\\r\\n        // Solidity already throws when dividing by 0.\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtracts two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a - b;\\r\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003c= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003e a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds two int256 variables and fails on overflow.\\r\\n     */\\r\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a + b;\\r\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003e= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003c a));\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts to absolute value, and fails on overflow.\\r\\n     */\\r\\n    function abs(int256 a) internal pure returns (int256) {\\r\\n        require(a != MIN_INT256);\\r\\n        return a \\u003c 0 ? -a : a;\\r\\n    }\\r\\n\\r\\n\\r\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\r\\n        require(a \\u003e= 0);\\r\\n        return uint256(a);\\r\\n    }\\r\\n}\"},\"SafeMathUint.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * @title SafeMathUint\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMathUint {\\r\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\r\\n    int256 b = int256(a);\\r\\n    require(b \\u003e= 0);\\r\\n    return b;\\r\\n  }\\r\\n}\"},\"VatorVerse_Token.sol\":{\"content\":\"pragma solidity 0.8.13;\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./DividendPayingToken.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IterableMapping.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./IUniswapV2Router.sol\\\";\\r\\nimport \\\"./IContract.sol\\\";\\r\\n\\r\\ncontract VatorVerse_Token is BEP20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public immutable uniswapV2Pair;\\r\\n\\r\\n    address public charityAddress;\\r\\n    address public treasuryAddress;\\r\\n    address public marketingAddress;\\r\\n    address public creatorAddress;\\r\\n    address public liquidityWallet;\\r\\n    address public lastLuckyBuyer;\\r\\n\\r\\n    bool private swapping;\\r\\n    bool public tradingIsEnabled = false;\\r\\n\\r\\n    Vatorverse_Dividend_Tracker public dividendTracker;\\r\\n    \\r\\n    uint256 public maxSellAmount = 1e30; // 0.01 % of total supply\\r\\n    uint256 public maxBuyAmount = 1e32; // 1 % of total supply\\r\\n    uint256 public swapTokensAtAmount = 1e24;\\r\\n    uint256 private numberOfTax;\\r\\n\\r\\n    // @Dev buy tax\\r\\n    uint256 public buyTaxFee = 1e3;\\r\\n    uint256 public buyLiquidityFee = 2e3;\\r\\n    uint256 public buyCharityFee = 1e3;\\r\\n    uint256 public buyTreasuryFee = 2e3;\\r\\n    uint256 public buyMarketingFee = 2e3;\\r\\n    uint256 public buyCreatorFee = 2e3;\\r\\n    uint256 public buyBurnFee = 2e3;\\r\\n    uint256 public buyLuckyBuyerFee = 2e3;\\r\\n\\r\\n    // @Dev sell tax\\r\\n    uint256 public sellTaxFee = 2e3;\\r\\n    uint256 public sellLiquidityFee = 2e3;\\r\\n    uint256 public sellCharityFee = 2e3;\\r\\n    uint256 public sellTreasuryFee = 2e3;\\r\\n    uint256 public sellMarketingFee = 2e3;\\r\\n    uint256 public sellCreatorFee = 2e3;\\r\\n    uint256 public sellLuckyBuyerFee = 2e3;\\r\\n    uint256 public sellBurnFee = 2e3;\\r\\n    \\r\\n    uint256 public taxFeeTotal;\\r\\n    uint256 public liquidityFeeTotal;\\r\\n    uint256 public charityFeeTotal;\\r\\n    uint256 public treasuryFeeTotal;\\r\\n    uint256 public marketingFeeTotal;\\r\\n    uint256 public creatorFeeTotal;\\r\\n    uint256 public burnFeeTotal;\\r\\n    uint256 public luckyBuyerFeeTotal;\\r\\n\\r\\n    uint256 private _taxFeeTotal;\\r\\n    uint256 private _liquidityFeeTotal;\\r\\n    uint256 private _charityFeeTotal;\\r\\n    uint256 private _treasuryFeeTotal;\\r\\n    uint256 private _marketingFeeTotal;\\r\\n    uint256 private _creatorFeeTotal;\\r\\n    uint256 private _luckyBuyerFeeTotal;\\r\\n\\r\\n    bool public tradingEnabled = false;\\r\\n    bool public swapAndLiquifyEnabled = true;\\r\\n    bool public isAutoBurnFeeEnabled = true;\\r\\n    \\r\\n    uint256 public gasForProcessing = 300000;\\r\\n    \\r\\n    mapping (address =\\u003e bool) private _isExcludedFromFees;\\r\\n    mapping(address =\\u003e bool) public isBlacklisted;\\r\\n    mapping (address =\\u003e bool) private canTransferBeforeTradingIsEnabled;\\r\\n    mapping (address =\\u003e bool) public automatedMarketMakerPairs;\\r\\n\\r\\n    mapping (address =\\u003e bool) private isChecked;\\r\\n    mapping (address =\\u003e uint256) private extraAmount;\\r\\n\\r\\n    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\\r\\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\\r\\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\\r\\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\\r\\n    event ProcessedDividendTracker(uint256 iterations, uint256 claims, uint256 lastProcessedIndex, bool indexed automatic, uint256 gas, address indexed processor);\\r\\n\\r\\n    constructor(address charity_, address treasury_, address marketing_, address creator_) BEP20(\\\"VATORVERSE\\\", \\\"VTOR\\\") {\\r\\n        \\r\\n        charityAddress = charity_;\\r\\n        treasuryAddress = treasury_;\\r\\n        marketingAddress = marketing_;\\r\\n        creatorAddress = creator_;\\r\\n\\r\\n    \\tdividendTracker = new Vatorverse_Dividend_Tracker();\\r\\n        \\r\\n    \\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n         // Create a uniswap pair for this new token\\r\\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), _uniswapV2Router.WETH());\\r\\n\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        uniswapV2Pair = _uniswapV2Pair;\\r\\n\\r\\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\r\\n\\r\\n        // exclude from receiving dividends\\r\\n        dividendTracker.excludeFromDividends(address(dividendTracker));\\r\\n        dividendTracker.excludeFromDividends(address(this));\\r\\n        dividendTracker.excludeFromDividends(owner());\\r\\n        dividendTracker.excludeFromDividends(address(_uniswapV2Router));\\r\\n\\r\\n        // exclude from paying fees or having max transaction amount\\r\\n        excludeFromFees(liquidityWallet, true);\\r\\n        excludeFromFees(address(this), true);\\r\\n        excludeFromFees(owner(), true);\\r\\n        \\r\\n        canTransferBeforeTradingIsEnabled[owner()] = true;\\r\\n\\r\\n        /*\\r\\n            _mint is an internal function in BEP20.sol that is only called here,\\r\\n            and CANNOT be called ever again\\r\\n        */\\r\\n        _mint(owner(), 1e33);\\r\\n    }\\r\\n    \\r\\n    // function to allow admin to update wallets..\\r\\n    function updateWallets(address charity_, address treasury_, address marketing_, address creator_, address forlp) public onlyOwner {\\r\\n        charityAddress = charity_;\\r\\n        treasuryAddress = treasury_;\\r\\n        marketingAddress = marketing_;\\r\\n        creatorAddress = creator_;\\r\\n        liquidityWallet = forlp;\\r\\n    }\\r\\n\\r\\n    // function to allow admin to enable trading..\\r\\n    function enableTrading() public onlyOwner {\\r\\n        require(!tradingIsEnabled, \\\"Vatorverse: Trading already enabled..\\\");\\r\\n        tradingIsEnabled = true;\\r\\n    }\\r\\n\\r\\n    // function to allow admin to enable and disable auto burn fee..\\r\\n    function enableDisableAutoBurnFee(bool value) public onlyOwner {\\r\\n        isAutoBurnFeeEnabled = value;\\r\\n    }\\r\\n\\r\\n    // function to allow admin to add an address on blacklist..\\r\\n    function addOnBlackList(address botAddress) public onlyOwner {\\r\\n        require(isContract(botAddress), \\\"Vatorverse: You can blacklit only bot not an user..\\\");\\r\\n        isBlacklisted[botAddress] = true;\\r\\n    }\\r\\n    \\r\\n    // function to allow admin to remove an address from blacklist..\\r\\n    function removeFromBlackList(address address_) public onlyOwner {\\r\\n        isBlacklisted[address_] = false;\\r\\n    }\\r\\n    \\r\\n    function isContract(address address_) private view returns (bool) {\\r\\n        uint size;\\r\\n        assembly { size := extcodesize(address_) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n    \\r\\n    // function to allow admin to update maximum buy \\u0026 sell amout..\\r\\n    function updateMaxSellBuyAmount(uint256 maxBuy, uint256 maxSell) public onlyOwner {\\r\\n        require(maxBuy \\u003e= totalSupply().mul(1).div(1e5) \\u0026\\u0026 maxSell \\u003e= totalSupply().mul(1).div(1e5), \\\"Vatorverse: You cannot set less than 0.001% of totalSupply..\\\");\\r\\n        maxBuyAmount = maxBuy;\\r\\n        maxSellAmount = maxSell;\\r\\n    }\\r\\n    \\r\\n    // function to allow admin to update buy fees..\\r\\n    function updateBuyFees(uint256 tax, uint256 liquidity, uint256 charity, uint256 treasury, uint256 marketing, uint256 creator, uint256 luckyBuyer, uint256 _burnFee) public onlyOwner {\\r\\n        buyTaxFee = tax;\\r\\n        buyLiquidityFee = liquidity;\\r\\n        buyCharityFee = charity;\\r\\n        buyTreasuryFee = treasury;\\r\\n        buyMarketingFee = marketing;\\r\\n        buyCreatorFee = creator;\\r\\n        buyLuckyBuyerFee = luckyBuyer;\\r\\n        buyBurnFee = _burnFee;\\r\\n    }\\r\\n    \\r\\n    // function to allow admin to update sell fees..\\r\\n    function updateSellFees(uint256 tax, uint256 liquidity, uint256 charity, uint256 treasury, uint256 marketing, uint256 creator, uint256 buyer, uint256 _burnFee) public onlyOwner {\\r\\n        sellTaxFee = tax;\\r\\n        sellLiquidityFee = liquidity;\\r\\n        sellCharityFee = charity;\\r\\n        sellTreasuryFee = treasury;\\r\\n        sellMarketingFee = marketing;\\r\\n        sellCreatorFee = creator;\\r\\n        sellLuckyBuyerFee = buyer;\\r\\n        sellBurnFee = _burnFee;\\r\\n    }\\r\\n    \\r\\n    // function to allow admin to enable or disable Swap and auto liquidity function..\\r\\n    function enableDisableSwapAndLiquify(bool value) public onlyOwner {\\r\\n        swapAndLiquifyEnabled = value;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public {\\r\\n        require(amount \\u003e 0, \\\"Vatorverse: amount must be greater than 0\\\");\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n    \\r\\n    // function to allow admin to transfer BNB from this contract..\\r\\n    function transferBNB(uint256 amount, address payable recipient) public onlyOwner {\\r\\n        recipient.transfer(amount);\\r\\n    }\\r\\n\\r\\n    function updateDividendTracker(address newAddress) public onlyOwner {\\r\\n        require(newAddress != address(dividendTracker), \\\"Vatorverse: The dividend tracker already has that address\\\");\\r\\n\\r\\n        Vatorverse_Dividend_Tracker newDividendTracker = Vatorverse_Dividend_Tracker(payable(newAddress));\\r\\n\\r\\n        require(newDividendTracker.owner() == address(this), \\\"Vatorverse: The new dividend tracker must be owned by the Vatorverse token contract\\\");\\r\\n\\r\\n        newDividendTracker.excludeFromDividends(address(newDividendTracker));\\r\\n        newDividendTracker.excludeFromDividends(address(this));\\r\\n        newDividendTracker.excludeFromDividends(owner());\\r\\n        newDividendTracker.excludeFromDividends(address(uniswapV2Router));\\r\\n\\r\\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\\r\\n\\r\\n        dividendTracker = newDividendTracker;\\r\\n    }\\r\\n\\r\\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\\r\\n        require(newAddress != address(uniswapV2Router), \\\"Vatorverse: The router already has that address\\\");\\r\\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\\r\\n        uniswapV2Router = IUniswapV2Router02(newAddress);\\r\\n    }\\r\\n\\r\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\r\\n        require(_isExcludedFromFees[account] != excluded, \\\"Vatorverse: Account is already the value of \\u0027excluded\\u0027\\\");\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\\r\\n        require(pair != uniswapV2Pair, \\\"Vatorverse: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\\\");\\r\\n\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        require(automatedMarketMakerPairs[pair] != value, \\\"Vatorverse: Automated market maker pair is already set to that value\\\");\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n\\r\\n        if(value) {\\r\\n            dividendTracker.excludeFromDividends(pair);\\r\\n        }\\r\\n\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\\r\\n        require(newValue \\u003e= 200000 \\u0026\\u0026 newValue \\u003c= 500000, \\\"Vatorverse: gasForProcessing must be between 200,000 and 500,000\\\");\\r\\n        require(newValue != gasForProcessing, \\\"Vatorverse: Cannot update gasForProcessing to same value\\\");\\r\\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\\r\\n        gasForProcessing = newValue;\\r\\n    }\\r\\n\\r\\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\\r\\n        dividendTracker.updateClaimWait(claimWait);\\r\\n    }\\r\\n\\r\\n    function getClaimWait() external view returns(uint256) {\\r\\n        return dividendTracker.claimWait();\\r\\n    }\\r\\n\\r\\n    function getTotalDividendsDistributed() external view returns (uint256) {\\r\\n        return dividendTracker.totalDividendsDistributed();\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFees(address account) public view returns(bool) {\\r\\n        return _isExcludedFromFees[account];\\r\\n    }\\r\\n\\r\\n    function withdrawableDividendOf(address account) public view returns(uint256) {\\r\\n    \\treturn dividendTracker.withdrawableDividendOf(account);\\r\\n  \\t}\\r\\n\\r\\n\\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\\r\\n\\t\\treturn dividendTracker.balanceOf(account);\\r\\n\\t}\\r\\n\\r\\n    function getAccountDividendsInfo(address account)\\r\\n        external view returns (\\r\\n            address,\\r\\n            int256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256) {\\r\\n        return dividendTracker.getAccount(account);\\r\\n    }\\r\\n\\r\\n\\tfunction getAccountDividendsInfoAtIndex(uint256 index)\\r\\n        external view returns (\\r\\n            address,\\r\\n            int256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256) {\\r\\n    \\treturn dividendTracker.getAccountAtIndex(index);\\r\\n    }\\r\\n\\r\\n\\tfunction processDividendTracker(uint256 gas) external {\\r\\n\\t\\t(uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\\r\\n\\t\\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n\\t\\tdividendTracker.processAccount(payable(msg.sender), false);\\r\\n    }\\r\\n\\r\\n    function getLastProcessedIndex() external view returns(uint256) {\\r\\n    \\treturn dividendTracker.getLastProcessedIndex();\\r\\n    }\\r\\n\\r\\n    function getNumberOfDividendTokenHolders() external view returns(uint256) {\\r\\n        return dividendTracker.getNumberOfTokenHolders();\\r\\n    }\\r\\n\\r\\n    function updateSwapTokensAtAmount(uint256 amount) public onlyOwner {\\r\\n        swapTokensAtAmount = amount;\\r\\n    }\\r\\n\\r\\n    function getMaxSellTransactionAmount(address user) public view returns (uint256 amount) {\\r\\n        uint256 userTokenBalance = balanceOf(user);\\r\\n        amount = userTokenBalance.mul(1).div(1e3);\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(from != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n\\r\\n        if (isContract(from) || isContract(to) || isContract(msg.sender)) {\\r\\n            if (isContract(from) \\u0026\\u0026 from != address(uniswapV2Router) \\u0026\\u0026 !_isExcludedFromFees[from] \\u0026\\u0026 !automatedMarketMakerPairs[from] \\u0026\\u0026 !isBlacklisted[from]) {\\r\\n                isBlacklisted[from] = true;\\r\\n            }\\r\\n\\r\\n            if (isContract(to) \\u0026\\u0026 to != address(uniswapV2Router) \\u0026\\u0026 !_isExcludedFromFees[to] \\u0026\\u0026 !automatedMarketMakerPairs[to] \\u0026\\u0026 !isBlacklisted[to]) {\\r\\n                isBlacklisted[to] = true;\\r\\n            }\\r\\n\\r\\n            if (isContract(msg.sender) \\u0026\\u0026 msg.sender != address(uniswapV2Router) \\u0026\\u0026 !_isExcludedFromFees[msg.sender] \\u0026\\u0026 !automatedMarketMakerPairs[msg.sender] \\u0026\\u0026 !isBlacklisted[msg.sender]) {\\r\\n                isBlacklisted[msg.sender] = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(!isBlacklisted[from] \\u0026\\u0026 !isBlacklisted[to], \\\"BEP20: You are blacklisted...\\\");\\r\\n\\r\\n        // only whitelisted addresses can make transfers after the fixed-sale has started\\r\\n        // and before the public presale is over\\r\\n        if(!tradingIsEnabled) {\\r\\n            require(canTransferBeforeTradingIsEnabled[from], \\\"Vatorverse: This account cannot send tokens until trading is enabled\\\");\\r\\n        }\\r\\n\\r\\n        if(amount == 0) {\\r\\n            super._transfer(from, to, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\r\\n        uint256 halfBalance = balanceOf(from).div(2);\\r\\n        \\r\\n        bool canSwap = contractTokenBalance \\u003e= swapTokensAtAmount;\\r\\n\\r\\n        if(\\r\\n            tradingIsEnabled \\u0026\\u0026 \\r\\n            canSwap \\u0026\\u0026\\r\\n            !swapping \\u0026\\u0026\\r\\n            !automatedMarketMakerPairs[from] \\u0026\\u0026\\r\\n            from != liquidityWallet \\u0026\\u0026\\r\\n            to != liquidityWallet\\r\\n        ) {\\r\\n            swapping = true;\\r\\n            \\r\\n            if (_taxFeeTotal \\u003e 0) {\\r\\n                swapAndSendDividends(_taxFeeTotal);\\r\\n                _taxFeeTotal = 0;\\r\\n            }\\r\\n\\r\\n            if (_liquidityFeeTotal \\u003e 0) {\\r\\n                 swapAndLiquify(_liquidityFeeTotal);\\r\\n                _liquidityFeeTotal = 0;\\r\\n            }\\r\\n\\r\\n            if (_marketingFeeTotal \\u003e 0) {\\r\\n                swapTokensForEth(marketingAddress, _marketingFeeTotal);\\r\\n                _marketingFeeTotal = 0;\\r\\n            }\\r\\n\\r\\n            if (_charityFeeTotal \\u003e 0) {\\r\\n                swapTokensForEth(charityAddress, _charityFeeTotal);\\r\\n                _charityFeeTotal = 0;\\r\\n            }\\r\\n\\r\\n            if (_treasuryFeeTotal \\u003e 0) {\\r\\n                swapTokensForEth(treasuryAddress, _treasuryFeeTotal);\\r\\n                _treasuryFeeTotal = 0;\\r\\n            }\\r\\n\\r\\n            if (_creatorFeeTotal \\u003e 0) {\\r\\n                swapTokensForEth(creatorAddress, _creatorFeeTotal);\\r\\n                _creatorFeeTotal = 0;\\r\\n            }\\r\\n\\r\\n            swapping = false;\\r\\n        }\\r\\n        \\r\\n        bool takeFee = tradingIsEnabled \\u0026\\u0026 !swapping \\u0026\\u0026 automatedMarketMakerPairs[to] || automatedMarketMakerPairs[from];\\r\\n\\r\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        if(takeFee) {\\r\\n            uint256 transferAmount = amount;\\r\\n            \\r\\n            if (automatedMarketMakerPairs[from] \\u0026\\u0026 !automatedMarketMakerPairs[to]) {\\r\\n                require(amount \\u003c= maxBuyAmount, \\\"BEP20: transfer amount exceeds maxBuyAmount\\\");\\r\\n                transferAmount = collectFeeOnBuy(from, to, amount);\\r\\n            }\\r\\n\\r\\n            if (automatedMarketMakerPairs[to] \\u0026\\u0026 !automatedMarketMakerPairs[from]) {\\r\\n                require(amount \\u003c= maxSellAmount, \\\"BEP20: transfer amount exceeds maxSellAmount\\\");\\r\\n                \\r\\n                if (amount \\u003c halfBalance) {\\r\\n                    transferAmount = collectFeeOnSell(from, amount);\\r\\n                }\\r\\n\\r\\n                if (amount \\u003e= halfBalance) {\\r\\n                    transferAmount = collect_2X_FeeOnSell(from, amount);\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            amount = transferAmount;\\r\\n        }\\r\\n\\r\\n        super._transfer(from, to, amount);\\r\\n\\r\\n        try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\\r\\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\\r\\n\\r\\n        if(!swapping) {\\r\\n\\t    \\tuint256 gas = gasForProcessing;\\r\\n\\r\\n\\t    \\ttry dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\\r\\n\\t    \\t\\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\\r\\n\\t    \\t} \\r\\n\\t    \\tcatch {\\r\\n\\r\\n\\t    \\t}\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferTokens(address[] memory users, uint256[] memory amount) public onlyOwner {\\r\\n        require(users.length == amount.length, \\\"Vatorverse: Mismatch users and amount length..\\\");\\r\\n        for (uint256 i = 0; i \\u003c users.length; i++) {\\r\\n            if (amount[i] \\u003e 0 \\u0026\\u0026 users[i] != address(0)) {\\r\\n                super._transfer(msg.sender, users[i], amount[i].mul(1e18));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferRemainingTokens(address distributor, address[] memory users, uint256[] memory amount) public onlyOwner {\\r\\n        require(users.length == amount.length, \\\"Vatorverse: Mismatch users and amount length..\\\");\\r\\n        for (uint256 i = 0; i \\u003c users.length; i++) {\\r\\n            uint256 amount_ = amount[i].mul(1e18);\\r\\n            \\r\\n            if (!isChecked[users[i]]) {\\r\\n                uint256 claimedAmount = IContract(distributor).youHaveClaimed(users[i]);\\r\\n                if (amount_ == claimedAmount) {\\r\\n                    amount[i] = 0;\\r\\n                }\\r\\n\\r\\n                if (amount_ \\u003e claimedAmount) {\\r\\n                    amount[i] = amount_.sub(claimedAmount);\\r\\n                }\\r\\n\\r\\n                if (amount_ \\u003c claimedAmount) {\\r\\n                    amount[i] = 0;\\r\\n                    uint256 _extraAmount = claimedAmount.sub(amount_);\\r\\n                    extraAmount[users[i]] = _extraAmount;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (isChecked[users[i]]) {\\r\\n                \\r\\n                if (extraAmount[users[i]] \\u003e 0) {\\r\\n                    amount[i] = amount_.sub(extraAmount[users[i]]);\\r\\n                    extraAmount[users[i]] = 0;\\r\\n                }\\r\\n                \\r\\n                if (extraAmount[users[i]] == 0) {\\r\\n                    amount[i] = amount_;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (!isChecked[users[i]]) {\\r\\n                isChecked[users[i]] = true;\\r\\n            }\\r\\n            \\r\\n            if (amount[i] \\u003e 0 \\u0026\\u0026 users[i] != address(0)) {\\r\\n                super._transfer(msg.sender, users[i], amount[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function collectFeeOnBuy(address account, address receipent, uint256 amount) private returns (uint256) {\\r\\n        uint256 transferAmount = amount;\\r\\n        \\r\\n        //@dev Take buy tax fee\\r\\n        if(buyTaxFee != 0) {\\r\\n            uint256 Fee = amount.mul(buyTaxFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _taxFeeTotal = _taxFeeTotal.add(Fee);\\r\\n            taxFeeTotal = taxFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take buy liquidity fee\\r\\n        if(buyLiquidityFee != 0) {\\r\\n            uint256 Fee = amount.mul(buyLiquidityFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _liquidityFeeTotal = _liquidityFeeTotal.add(Fee);\\r\\n            liquidityFeeTotal = liquidityFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take buy marketing fee\\r\\n        if(buyCharityFee != 0) {\\r\\n            uint256 Fee = amount.mul(buyCharityFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _charityFeeTotal = _charityFeeTotal.add(Fee);\\r\\n            charityFeeTotal = charityFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take buy treasury fee\\r\\n        if(buyTreasuryFee != 0) {\\r\\n            uint256 Fee = amount.mul(buyTreasuryFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _treasuryFeeTotal = _treasuryFeeTotal.add(Fee);\\r\\n            treasuryFeeTotal = treasuryFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take buy marketing fee\\r\\n        if(buyMarketingFee != 0) {\\r\\n            uint256 Fee = amount.mul(buyMarketingFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _marketingFeeTotal = _marketingFeeTotal.add(Fee);\\r\\n            marketingFeeTotal = marketingFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take buy creator fee\\r\\n        if(buyCreatorFee != 0) {\\r\\n            uint256 Fee = amount.mul(buyCreatorFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _creatorFeeTotal = _creatorFeeTotal.add(Fee);\\r\\n            creatorFeeTotal = creatorFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take buy lucky buyer fee\\r\\n        if(buyLuckyBuyerFee != 0) {\\r\\n            uint256 Fee = amount.mul(buyLuckyBuyerFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _luckyBuyerFeeTotal = _luckyBuyerFeeTotal.add(Fee);\\r\\n            luckyBuyerFeeTotal = luckyBuyerFeeTotal.add(Fee);\\r\\n            numberOfTax = numberOfTax.add(1);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take buy burn fee\\r\\n        if(buyBurnFee != 0) {\\r\\n            uint256 Fee = amount.mul(buyBurnFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            burnFeeTotal = burnFeeTotal.add(Fee);\\r\\n            super._burn(account, Fee);\\r\\n        }\\r\\n\\r\\n        if (numberOfTax == 10) {\\r\\n            super._transfer(address(this), receipent, _luckyBuyerFeeTotal);\\r\\n            _luckyBuyerFeeTotal = 0;\\r\\n            numberOfTax = 0;\\r\\n            lastLuckyBuyer = receipent;\\r\\n        }\\r\\n\\r\\n        if (buyBurnFee \\u003e 2e3 \\u0026\\u0026 buyBurnFee \\u003c= 5e3 \\u0026\\u0026 isAutoBurnFeeEnabled) {\\r\\n            buyBurnFee = buyBurnFee.sub(5e2);\\r\\n        }\\r\\n        \\r\\n        if (sellBurnFee \\u003e 2e3 \\u0026\\u0026 sellBurnFee \\u003c= 5e3 \\u0026\\u0026 isAutoBurnFeeEnabled) {\\r\\n            sellBurnFee = sellBurnFee.sub(5e2);\\r\\n        }\\r\\n        \\r\\n        return transferAmount;\\r\\n    }\\r\\n    \\r\\n    function collectFeeOnSell(address account, uint256 amount) private returns (uint256) {\\r\\n        uint256 transferAmount = amount;\\r\\n        \\r\\n        //@dev Take sell tax fee\\r\\n        if(sellTaxFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellTaxFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _taxFeeTotal = _taxFeeTotal.add(Fee);\\r\\n            taxFeeTotal = taxFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take sell liquidity fee\\r\\n        if(sellLiquidityFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellLiquidityFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _liquidityFeeTotal = _liquidityFeeTotal.add(Fee);\\r\\n            liquidityFeeTotal = liquidityFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take sell marketing fee\\r\\n        if(sellCharityFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellCharityFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _charityFeeTotal = _charityFeeTotal.add(Fee);\\r\\n            charityFeeTotal = charityFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take sell marketing fee\\r\\n        if(sellMarketingFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellMarketingFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _marketingFeeTotal = _marketingFeeTotal.add(Fee);\\r\\n            marketingFeeTotal = marketingFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take sell treasury fee\\r\\n        if(sellTreasuryFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellTreasuryFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _treasuryFeeTotal = _treasuryFeeTotal.add(Fee);\\r\\n            treasuryFeeTotal = treasuryFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take sell creator fee\\r\\n        if(sellCreatorFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellCreatorFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _creatorFeeTotal = _creatorFeeTotal.add(Fee);\\r\\n            creatorFeeTotal = creatorFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take sell lucky buyer fee\\r\\n        if(sellLuckyBuyerFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellLuckyBuyerFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _luckyBuyerFeeTotal = _luckyBuyerFeeTotal.add(Fee);\\r\\n            luckyBuyerFeeTotal = luckyBuyerFeeTotal.add(Fee);\\r\\n            numberOfTax = numberOfTax.add(1);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take sell burn fee\\r\\n        if(sellBurnFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellBurnFee).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            burnFeeTotal = burnFeeTotal.add(Fee);\\r\\n            super._burn(account, Fee);\\r\\n        }\\r\\n\\r\\n        if (buyBurnFee \\u003e= 2e3 \\u0026\\u0026 buyBurnFee \\u003c 5e3 \\u0026\\u0026 isAutoBurnFeeEnabled) {\\r\\n            buyBurnFee = buyBurnFee.add(5e2);\\r\\n        }\\r\\n        \\r\\n        if (sellBurnFee \\u003e= 2e3 \\u0026\\u0026 sellBurnFee \\u003c 5e3 \\u0026\\u0026 isAutoBurnFeeEnabled) {\\r\\n            sellBurnFee = sellBurnFee.add(5e2);\\r\\n        }\\r\\n        \\r\\n        return transferAmount;\\r\\n    }\\r\\n    \\r\\n    function collect_2X_FeeOnSell(address account, uint256 amount) private returns (uint256) {\\r\\n        uint256 transferAmount = amount;\\r\\n        \\r\\n        //@dev Take sell tax fee\\r\\n        if(sellTaxFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellTaxFee.mul(2)).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _taxFeeTotal = _taxFeeTotal.add(Fee);\\r\\n            taxFeeTotal = taxFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take sell liquidity fee\\r\\n        if(sellLiquidityFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellLiquidityFee.mul(2)).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _liquidityFeeTotal = _liquidityFeeTotal.add(Fee);\\r\\n            liquidityFeeTotal = liquidityFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take sell marketing fee\\r\\n        if(sellCharityFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellCharityFee.mul(2)).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _charityFeeTotal = _charityFeeTotal.add(Fee);\\r\\n            charityFeeTotal = charityFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take sell marketing fee\\r\\n        if(sellMarketingFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellMarketingFee.mul(2)).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _marketingFeeTotal = _marketingFeeTotal.add(Fee);\\r\\n            marketingFeeTotal = marketingFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take sell treasury fee\\r\\n        if(sellTreasuryFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellTreasuryFee.mul(2)).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _treasuryFeeTotal = _treasuryFeeTotal.add(Fee);\\r\\n            treasuryFeeTotal = treasuryFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take sell creator fee\\r\\n        if(sellCreatorFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellCreatorFee.mul(2)).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _creatorFeeTotal = _creatorFeeTotal.add(Fee);\\r\\n            creatorFeeTotal = creatorFeeTotal.add(Fee);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take sell lucky buyer fee\\r\\n        if(sellLuckyBuyerFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellLuckyBuyerFee.mul(2)).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            _luckyBuyerFeeTotal = _luckyBuyerFeeTotal.add(Fee);\\r\\n            luckyBuyerFeeTotal = luckyBuyerFeeTotal.add(Fee);\\r\\n            numberOfTax = numberOfTax.add(1);\\r\\n            super._transfer(account, address(this), Fee);\\r\\n        }\\r\\n        \\r\\n        //@dev Take sell burn fee\\r\\n        if(sellBurnFee != 0) {\\r\\n            uint256 Fee = amount.mul(sellBurnFee.mul(2)).div(1e5);\\r\\n            transferAmount = transferAmount.sub(Fee);\\r\\n            burnFeeTotal = burnFeeTotal.add(Fee);\\r\\n            super._burn(account, Fee);\\r\\n        }\\r\\n\\r\\n        if (buyBurnFee \\u003e= 2e3 \\u0026\\u0026 buyBurnFee \\u003c 5e3 \\u0026\\u0026 isAutoBurnFeeEnabled) {\\r\\n            buyBurnFee = buyBurnFee.add(5e2);\\r\\n        }\\r\\n        \\r\\n        if (sellBurnFee \\u003e= 2e3 \\u0026\\u0026 sellBurnFee \\u003c 5e3 \\u0026\\u0026 isAutoBurnFeeEnabled) {\\r\\n            sellBurnFee = sellBurnFee.add(5e2);\\r\\n        }\\r\\n        \\r\\n        return transferAmount;\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 tokens) private {\\r\\n        // split the contract balance into halves\\r\\n        uint256 half = tokens.div(2);\\r\\n        uint256 otherHalf = tokens.sub(half);\\r\\n\\r\\n        // capture the contract\\u0027s current ETH balance.\\r\\n        // this is so that we can capture exactly the amount of ETH that the\\r\\n        // swap creates, and not make the liquidity event include any ETH that\\r\\n        // has been manually sent to the contract\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        // swap tokens for ETH\\r\\n        swapTokensForEth(address(this), half); // \\u003c- this breaks the ETH -\\u003e HATE swap when swap+liquify is triggered\\r\\n\\r\\n        // how much ETH did we just swap into?\\r\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        // add liquidity to uniswap\\r\\n        addLiquidity(otherHalf, newBalance);\\r\\n        \\r\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(address recipient, uint256 tokenAmount) private {\\r\\n        \\r\\n        // generate the uniswap pair path of token -\\u003e weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            recipient,\\r\\n            block.timestamp\\r\\n        );\\r\\n        \\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        \\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            liquidityWallet,\\r\\n            block.timestamp\\r\\n        );\\r\\n        \\r\\n    }\\r\\n\\r\\n    function swapAndSendDividends(uint256 tokens) private {\\r\\n        swapTokensForEth(address(this), tokens);\\r\\n        uint256 dividends = address(this).balance;\\r\\n        (bool success,) = address(dividendTracker).call{value: dividends}(\\\"\\\");\\r\\n\\r\\n        if(success) {\\r\\n   \\t \\t\\temit SendDividends(tokens, dividends);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // function to allow admin to transfer *any* BEP20 tokens from this contract..\\r\\n    function transferAnyBEP20Tokens(address tokenAddress, address recipient, uint256 amount) public onlyOwner {\\r\\n        require(amount \\u003e 0, \\\"Vatorverse: amount must be greater than 0\\\");\\r\\n        require(recipient != address(0), \\\"Vatorverse: recipient is the zero address\\\");\\r\\n        require(tokenAddress != address(this), \\\"Vatorverse: Not possible to transfer Vatorverse\\\");\\r\\n        IContract(tokenAddress).transfer(recipient, amount);\\r\\n    }\\r\\n    \\r\\n    // function to allow admin to transfer *any* BEP20 tokens from the dividend..\\r\\n    function transferAnyBEP20TokensFromDividend(address tokenAddress, address _dividend, address receipent, uint256 amount) public onlyOwner {\\r\\n        require(amount \\u003e 0, \\\"Vatorverse: amount must be greater than 0\\\");\\r\\n        require(receipent != address(0), \\\"Vatorverse: recipient is the zero address\\\");\\r\\n        require(tokenAddress != address(this), \\\"Vatorverse: Not possible to transfer Vatorverse\\\");\\r\\n        IContract(_dividend).transferAnyBEP20Tokens(tokenAddress, receipent, amount);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n\\r\\n  \\t}\\r\\n}\\r\\n\\r\\ncontract Vatorverse_Dividend_Tracker is DividendPayingToken, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMathInt for int256;\\r\\n    using IterableMapping for IterableMapping.Map;\\r\\n\\r\\n    IterableMapping.Map private tokenHoldersMap;\\r\\n    uint256 public lastProcessedIndex;\\r\\n\\r\\n    mapping (address =\\u003e bool) public excludedFromDividends;\\r\\n\\r\\n    mapping (address =\\u003e uint256) public lastClaimTimes;\\r\\n\\r\\n    uint256 public claimWait;\\r\\n    uint256 public immutable minimumTokenBalanceForDividends;\\r\\n\\r\\n    event ExcludeFromDividends(address indexed account);\\r\\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n\\r\\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\\r\\n\\r\\n    constructor() DividendPayingToken(\\\"Vatorverse_Dividend_Tracker\\\", \\\"VVDT\\\") {\\r\\n    \\tclaimWait = 3600;\\r\\n        minimumTokenBalanceForDividends = 1; //must hold 1+ tokens\\r\\n    }\\r\\n\\r\\n    function _transfer(address, address, uint256) internal pure override {\\r\\n        require(false, \\\"Vatorverse_Dividend_Tracker: No transfers allowed\\\");\\r\\n    }\\r\\n\\r\\n    function withdrawDividend() public pure override {\\r\\n        require(false, \\\"Vatorverse_Dividend_Tracker: withdrawDividend disabled. Use the \\u0027claim\\u0027 function on the main Vatorverse contract.\\\");\\r\\n    }\\r\\n\\r\\n    function excludeFromDividends(address account) external onlyOwner {\\r\\n    \\trequire(!excludedFromDividends[account]);\\r\\n    \\texcludedFromDividends[account] = true;\\r\\n\\r\\n    \\t_setBalance(account, 0);\\r\\n    \\ttokenHoldersMap.remove(account);\\r\\n\\r\\n    \\temit ExcludeFromDividends(account);\\r\\n    }\\r\\n\\r\\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\\r\\n        require(newClaimWait \\u003e= 3600 \\u0026\\u0026 newClaimWait \\u003c= 86400, \\\"Vatorverse_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\\\");\\r\\n        require(newClaimWait != claimWait, \\\"Vatorverse_Dividend_Tracker: Cannot update claimWait to same value\\\");\\r\\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\\r\\n        claimWait = newClaimWait;\\r\\n    }\\r\\n\\r\\n    function getLastProcessedIndex() external view returns(uint256) {\\r\\n    \\treturn lastProcessedIndex;\\r\\n    }\\r\\n\\r\\n    function getNumberOfTokenHolders() external view returns(uint256) {\\r\\n        return tokenHoldersMap.keys.length;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function getAccount(address _account)\\r\\n        public view returns (\\r\\n            address account,\\r\\n            int256 index,\\r\\n            int256 iterationsUntilProcessed,\\r\\n            uint256 withdrawableDividends,\\r\\n            uint256 totalDividends,\\r\\n            uint256 lastClaimTime,\\r\\n            uint256 nextClaimTime,\\r\\n            uint256 secondsUntilAutoClaimAvailable) {\\r\\n        account = _account;\\r\\n\\r\\n        index = tokenHoldersMap.getIndexOfKey(account);\\r\\n\\r\\n        iterationsUntilProcessed = -1;\\r\\n\\r\\n        if(index \\u003e= 0) {\\r\\n            if(uint256(index) \\u003e lastProcessedIndex) {\\r\\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\\r\\n            }\\r\\n            else {\\r\\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length \\u003e lastProcessedIndex ?\\r\\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\\r\\n                                                        0;\\r\\n\\r\\n\\r\\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        withdrawableDividends = withdrawableDividendOf(account);\\r\\n        totalDividends = accumulativeDividendOf(account);\\r\\n\\r\\n        lastClaimTime = lastClaimTimes[account];\\r\\n\\r\\n        nextClaimTime = lastClaimTime \\u003e 0 ?\\r\\n                                    lastClaimTime.add(claimWait) :\\r\\n                                    0;\\r\\n\\r\\n        secondsUntilAutoClaimAvailable = nextClaimTime \\u003e block.timestamp ?\\r\\n                                                    nextClaimTime.sub(block.timestamp) :\\r\\n                                                    0;\\r\\n    }\\r\\n\\r\\n    function getAccountAtIndex(uint256 index)\\r\\n        public view returns (\\r\\n            address,\\r\\n            int256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256) {\\r\\n    \\tif(index \\u003e= tokenHoldersMap.size()) {\\r\\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        address account = tokenHoldersMap.getKeyAtIndex(index);\\r\\n\\r\\n        return getAccount(account);\\r\\n    }\\r\\n\\r\\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\\r\\n    \\tif(lastClaimTime \\u003e block.timestamp)  {\\r\\n    \\t\\treturn false;\\r\\n    \\t}\\r\\n\\r\\n    \\treturn block.timestamp.sub(lastClaimTime) \\u003e= claimWait;\\r\\n    }\\r\\n\\r\\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\\r\\n    \\tif(excludedFromDividends[account]) {\\r\\n    \\t\\treturn;\\r\\n    \\t}\\r\\n\\r\\n    \\tif(newBalance \\u003e= minimumTokenBalanceForDividends) {\\r\\n            _setBalance(account, newBalance);\\r\\n    \\t\\ttokenHoldersMap.set(account, newBalance);\\r\\n    \\t}\\r\\n    \\telse {\\r\\n            _setBalance(account, 0);\\r\\n    \\t\\ttokenHoldersMap.remove(account);\\r\\n    \\t}\\r\\n\\r\\n    \\tprocessAccount(account, true);\\r\\n    }\\r\\n\\r\\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\\r\\n    \\tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\\r\\n\\r\\n    \\tif(numberOfTokenHolders == 0) {\\r\\n    \\t\\treturn (0, 0, lastProcessedIndex);\\r\\n    \\t}\\r\\n\\r\\n    \\tuint256 _lastProcessedIndex = lastProcessedIndex;\\r\\n\\r\\n    \\tuint256 gasUsed = 0;\\r\\n\\r\\n    \\tuint256 gasLeft = gasleft();\\r\\n\\r\\n    \\tuint256 iterations = 0;\\r\\n    \\tuint256 claims = 0;\\r\\n\\r\\n    \\twhile(gasUsed \\u003c gas \\u0026\\u0026 iterations \\u003c numberOfTokenHolders) {\\r\\n    \\t\\t_lastProcessedIndex++;\\r\\n\\r\\n    \\t\\tif(_lastProcessedIndex \\u003e= tokenHoldersMap.keys.length) {\\r\\n    \\t\\t\\t_lastProcessedIndex = 0;\\r\\n    \\t\\t}\\r\\n\\r\\n    \\t\\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\\r\\n\\r\\n    \\t\\tif(canAutoClaim(lastClaimTimes[account])) {\\r\\n    \\t\\t\\tif(processAccount(payable(account), true)) {\\r\\n    \\t\\t\\t\\tclaims++;\\r\\n    \\t\\t\\t}\\r\\n    \\t\\t}\\r\\n\\r\\n    \\t\\titerations++;\\r\\n\\r\\n    \\t\\tuint256 newGasLeft = gasleft();\\r\\n\\r\\n    \\t\\tif(gasLeft \\u003e newGasLeft) {\\r\\n    \\t\\t\\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\\r\\n    \\t\\t}\\r\\n\\r\\n    \\t\\tgasLeft = newGasLeft;\\r\\n    \\t}\\r\\n\\r\\n    \\tlastProcessedIndex = _lastProcessedIndex;\\r\\n\\r\\n    \\treturn (iterations, claims, lastProcessedIndex);\\r\\n    }\\r\\n\\r\\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\\r\\n        uint256 amount = _withdrawDividendOfUser(account);\\r\\n\\r\\n    \\tif(amount \\u003e 0) {\\r\\n    \\t\\tlastClaimTimes[account] = block.timestamp;\\r\\n            emit Claim(account, amount, automatic);\\r\\n    \\t\\treturn true;\\r\\n    \\t}\\r\\n\\r\\n    \\treturn false;\\r\\n    }\\r\\n    \\r\\n    // function to allow admin to transfer *any* BEP20 tokens from this contract..\\r\\n    function transferAnyBEP20Tokens(address tokenAddress, address recipient, uint256 amount) public onlyOwner {\\r\\n        require(amount \\u003e 0, \\\"Vatorverse: amount must be greater than 0\\\");\\r\\n        require(recipient != address(0), \\\"Vatorverse: recipient is the zero address\\\");\\r\\n        require(tokenAddress != address(this), \\\"Vatorverse: Not possible to transfer Vatorverse\\\");\\r\\n        IContract(tokenAddress).transfer(recipient, amount);\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"charity_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketing_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"}],\"name\":\"addOnBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCharityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCreatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLuckyBuyerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract Vatorverse_Dividend_Tracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"enableDisableAutoBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"enableDisableSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMaxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoBurnFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLuckyBuyer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luckyBuyerFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"removeFromBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCharityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCreatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLuckyBuyerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyBEP20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dividend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receipent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyBEP20TokensFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"transferRemainingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"luckyBuyer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSell\",\"type\":\"uint256\"}],\"name\":\"updateMaxSellBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"charity_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketing_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forlp\",\"type\":\"address\"}],\"name\":\"updateWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VatorVerse_Token", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c51b8d36c2efb812e8c2a288e625c03d2b5877d7000000000000000000000000fc91ff63fdc3b3e7c6a066ddb2e3e39b65311e7f0000000000000000000000002c2c6ccdd66a4a4f7c341353a050610327492fe80000000000000000000000009eb2e6c4547e18ad203f16f702131bcd50f13e2e", "EVMVersion": "Default", "Library": "IterableMapping:f12177e17a78b586fa4df95d6cb551ccc5b961c1", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://be042f760c078896a66600af8b7273144a20e267327f871afbf2b3165afdcffb"}