{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-08-27\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-08-02\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-07-31\r\n*/\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Math.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: contracts/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    // function renounceOwnership() public virtual onlyOwner {\r\n    //    emit OwnershipTransferred(_owner, address(0));\r\n   //     _owner = address(0);\r\n    //}\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(\r\n            _previousOwner == msg.sender,\r\n            \"You don't have permission to unlock\"\r\n        );\r\n        require(now > _lockTime, \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/DragonCastle.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract BSCSBSCSStartPool is\r\n    Ownable,\r\n    ReentrancyGuard,\r\n    ERC20(\"BSCS BSCS Start Pool\", \"BSCS-BSCS\")\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    // The address of the smart chef factory\r\n    address public BSCStaion_CASTLE_FACTORY;\r\n\r\n    // Whether a limit is set for users\r\n    bool public hasUserLimit;\r\n\r\n    // Whether a limit is set for the pool\r\n    bool public hasPoolLimit;\r\n\r\n    // Whether it is initialized\r\n    bool public isInitialized;\r\n\r\n    // Accrued token per share\r\n    mapping(ERC20 => uint256) public accTokenPerShare;\r\n\r\n    // The block number when staking starts.\r\n    uint256 public stakingBlock;\r\n\r\n    // The block number when staking end.\r\n    uint256 public stakingEndBlock;\r\n\r\n    // The block number when unstaking starts.\r\n    uint256 public unStakingBlock;\r\n\r\n    // The fee applies when unstaking.\r\n    uint256 public unStakingFee;\r\n\r\n    // The period where fee applies.\r\n    uint256 public feePeriod;\r\n\r\n    // The fee collector.\r\n    address public feeCollector;\r\n\r\n    // The block number when BSCStaion mining ends.\r\n    uint256 public bonusEndBlock;\r\n\r\n    // The block number when BSCStaion mining starts.\r\n    uint256 public startBlock;\r\n\r\n    // The block number of the last pool update\r\n    uint256 public lastRewardBlock;\r\n\r\n    // The pool limit per user (0 if none)\r\n    uint256 public poolLimitPerUser;\r\n\r\n    // The pool cap (0 if none)\r\n    uint256 public poolCap;\r\n\r\n    // Whether the pool's staked token balance can be remove by owner\r\n    bool private isRemovable;\r\n\r\n    // BSCStaion tokens created per block.\r\n    mapping(ERC20 => uint256) public rewardPerBlock;\r\n\r\n    // The precision factor\r\n    mapping(ERC20 => uint256) public PRECISION_FACTOR;\r\n\r\n    // The reward token\r\n    ERC20[] public rewardTokens;\r\n\r\n    // The staked token\r\n    ERC20 public stakedToken;\r\n\r\n    // Info of each user that stakes tokens (stakedToken)\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    struct UserInfo {\r\n        uint256 amount; // How many staked tokens the user has provided\r\n        uint256 lastStakingBlock;\r\n        mapping(ERC20 => uint256) rewardDebt; // Reward debt\r\n    }\r\n\r\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\r\n    event NewRewardPerBlock(uint256 rewardPerBlock, ERC20 token);\r\n    event NewPoolLimit(uint256 poolLimitPerUser);\r\n    event NewPoolCap(uint256 poolCap);\r\n    event RewardsStop(uint256 blockNumber);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event NewRewardToken(ERC20 token, uint256 rewardPerBlock, uint256 p_factor);\r\n    event RemoveRewardToken(ERC20 token);\r\n    event NewStakingBlocks(uint256 startStakingBlock, uint256 endStakingBlock);\r\n    event NewUnStakingBlock(uint256 startUnStakingBlock);\r\n\r\n    constructor() public {\r\n        BSCStaion_CASTLE_FACTORY = msg.sender;\r\n    }\r\n\r\n    /*\r\n     * @notice Initialize the contract\r\n     * @param _stakedToken: staked token address\r\n     * @param _rewardToken: reward token address\r\n     * @param _rewardPerBlock: reward per block (in rewardToken)\r\n     * @param _startBlock: start block\r\n     * @param _bonusEndBlock: end block\r\n     * @param _poolLimitPerUser: pool limit per user in stakedToken (if any, else 0)\r\n     * @param _poolCap: pool cap in stakedToken (if any, else 0)\r\n     * @param _admin: admin address with ownership\r\n     */\r\n    function initialize(\r\n        ERC20 _stakedToken,\r\n        ERC20[] memory _rewardTokens,\r\n        uint256[] memory _rewardPerBlock,\r\n        uint256[] memory _startEndBlocks,\r\n        uint256[] memory _stakingBlocks,\r\n        uint256 _unStakingBlock,\r\n        uint256[] memory _feeSettings,\r\n        address _feeCollector,\r\n        uint256 _poolLimitPerUser,\r\n        uint256 _poolCap,\r\n        bool _isRemovable,\r\n        address _admin\r\n    ) external {\r\n        require(!isInitialized, \"Already initialized\");\r\n        require(msg.sender == BSCStaion_CASTLE_FACTORY, \"Not factory\");\r\n        require(\r\n            _rewardTokens.length == _rewardPerBlock.length,\r\n            \"Mismatch length\"\r\n        );\r\n\r\n        require(address(_stakedToken) != address(0),\"Invalid address\");\r\n        require(address(_feeCollector) != address(0),\"Invalid address\");\r\n        require(address(_admin) != address(0),\"Invalid address\");\r\n\r\n        // Make this contract initialized\r\n        isInitialized = true;\r\n\r\n        stakedToken = _stakedToken;\r\n        rewardTokens = _rewardTokens;\r\n        startBlock = _startEndBlocks[0];\r\n        bonusEndBlock = _startEndBlocks[1];\r\n\r\n        require(\r\n            _stakingBlocks[0] < _stakingBlocks[1],\r\n            \"Staking block exceeds end staking block\"\r\n        );\r\n        stakingBlock = _stakingBlocks[0];\r\n        stakingEndBlock = _stakingBlocks[1];\r\n        unStakingBlock = _unStakingBlock;\r\n        unStakingFee = _feeSettings[0];\r\n        feePeriod = _feeSettings[1];\r\n        feeCollector = _feeCollector;\r\n        isRemovable = _isRemovable;\r\n\r\n        if (_poolLimitPerUser > 0) {\r\n            hasUserLimit = true;\r\n            poolLimitPerUser = _poolLimitPerUser;\r\n        }\r\n        if (_poolCap > 0) {\r\n            hasPoolLimit = true;\r\n            poolCap = _poolCap;\r\n        }\r\n\r\n        uint256 decimalsRewardToken;\r\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\r\n            decimalsRewardToken = uint256(_rewardTokens[i].decimals());\r\n            require(decimalsRewardToken < 30, \"Must be inferior to 30\");\r\n            PRECISION_FACTOR[_rewardTokens[i]] = uint256(\r\n                10**(uint256(30).sub(decimalsRewardToken))\r\n            );\r\n            rewardPerBlock[_rewardTokens[i]] = _rewardPerBlock[i];\r\n        }\r\n\r\n        // Set the lastRewardBlock as the startBlock\r\n        lastRewardBlock = startBlock;\r\n\r\n        // Transfer ownership to the admin address who becomes owner of the contract\r\n        transferOwnership(_admin);\r\n    }\r\n\r\n    /*\r\n     * @notice Deposit staked tokens and collect reward tokens (if any)\r\n     * @param _amount: amount to withdraw (in rewardToken)\r\n     */\r\n    function deposit(uint256 _amount) external nonReentrant {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n\r\n        require(stakingBlock <= block.number, \"Staking has not started\");\r\n        require(stakingEndBlock >= block.number, \"Staking has ended\");\r\n\r\n        if (hasPoolLimit) {\r\n            uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\r\n            require(\r\n                _amount.add(stakedTokenSupply) <= poolCap,\r\n                \"Pool cap reached\"\r\n            );\r\n        }\r\n\r\n        if (hasUserLimit) {\r\n            require(\r\n                _amount.add(user.amount) <= poolLimitPerUser,\r\n                \"User amount above limit\"\r\n            );\r\n        }\r\n\r\n        _updatePool();\r\n\r\n        if (user.amount > 0) {\r\n            uint256 pending;\r\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n                pending = user\r\n                .amount\r\n                .mul(accTokenPerShare[rewardTokens[i]])\r\n                .div(PRECISION_FACTOR[rewardTokens[i]])\r\n                .sub(user.rewardDebt[rewardTokens[i]]);\r\n                if (pending > 0) {\r\n                    ERC20(rewardTokens[i]).transfer(\r\n                        address(msg.sender),\r\n                        pending\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.add(_amount);\r\n            ERC20(stakedToken).transferFrom(\r\n                address(msg.sender),\r\n                address(this),\r\n                _amount\r\n            );\r\n            _mint(address(msg.sender), _amount);\r\n        }\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            user.rewardDebt[rewardTokens[i]] = user\r\n            .amount\r\n            .mul(accTokenPerShare[rewardTokens[i]])\r\n            .div(PRECISION_FACTOR[rewardTokens[i]]);\r\n        }\r\n\r\n        user.lastStakingBlock = block.number;\r\n\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    function safeERC20Transfer(ERC20 erc20, address _to, uint256 _amount) \r\n      private \r\n    { \r\n      uint256 balance = erc20.balanceOf(address(this));\r\n      if (_amount > balance) {\r\n        erc20.transfer(_to, balance); \r\n      } \r\n      else {\r\n        erc20.transfer(_to, _amount); }\r\n    }\r\n\r\n    /*\r\n     * @notice Withdraw staked tokens and collect reward tokens\r\n     * @param _amount: amount to withdraw (in rewardToken)\r\n     */\r\n    function withdraw(uint256 _amount) external nonReentrant {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(unStakingBlock <= block.number, \"Unstaking has not started\");\r\n        require(user.amount >= _amount, \"Amount to withdraw too high\");\r\n\r\n        _updatePool();\r\n\r\n        // uint256 pending = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\r\n        uint256 pending;\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            pending = user\r\n            .amount\r\n            .mul(accTokenPerShare[rewardTokens[i]])\r\n            .div(PRECISION_FACTOR[rewardTokens[i]])\r\n            .sub(user.rewardDebt[rewardTokens[i]]);\r\n            if (pending > 0) {\r\n                // ERC20(rewardTokens[i]).transfer(address(msg.sender), pending);\r\n                safeERC20Transfer(ERC20(rewardTokens[i]), address(msg.sender),pending);\r\n            }\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            _burn(address(msg.sender), _amount);\r\n            _amount = collectFee(_amount, user);\r\n            ERC20(stakedToken).transfer(address(msg.sender), _amount);\r\n            //_burn(address(msg.sender),_amount);\r\n        }\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            user.rewardDebt[rewardTokens[i]] = user\r\n            .amount\r\n            .mul(accTokenPerShare[rewardTokens[i]])\r\n            .div(PRECISION_FACTOR[rewardTokens[i]]);\r\n        }\r\n\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    function collectFee(uint256 _amount, UserInfo memory user)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 blockPassed = block.number.sub(user.lastStakingBlock);\r\n        if (feePeriod == 0 || (feePeriod > 0 && feePeriod >= blockPassed)) {\r\n            uint256 collectedAmt = _amount.mul(unStakingFee).div(10000);\r\n            ERC20(stakedToken).transfer(feeCollector, collectedAmt);\r\n            return _amount.sub(collectedAmt);\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    /*\r\n     * @notice Withdraw staked tokens without caring about rewards rewards\r\n     * @dev Needs to be for emergency.\r\n     */\r\n    function emergencyWithdraw() external nonReentrant {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint256 amountToTransfer = user.amount;\r\n        user.amount = 0;\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            user.rewardDebt[rewardTokens[i]] = 0;\r\n        }\r\n\r\n        if (amountToTransfer > 0) {\r\n            safeERC20Transfer(ERC20(stakedToken), address(msg.sender),amountToTransfer);\r\n            // ERC20(stakedToken).transfer(address(msg.sender), amountToTransfer);\r\n        }\r\n\r\n        emit EmergencyWithdraw(msg.sender, user.amount);\r\n    }\r\n\r\n    /*\r\n     * @notice Stop rewards\r\n     * @dev Only callable by owner. Needs to be for emergency.\r\n     */\r\n    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            ERC20(rewardTokens[i]).transfer(address(msg.sender), _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to recover wrong tokens sent to the contract\r\n     * @param _tokenAddress: the address of the token to withdraw\r\n     * @param _tokenAmount: the number of tokens to withdraw\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _tokenAddress != address(stakedToken),\r\n            \"Cannot be staked token\"\r\n        );\r\n        // require(_tokenAddress != address(rewardToken), \"Cannot be reward token\");\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            require(\r\n                _tokenAddress != address(rewardTokens[i]),\r\n                \"Cannot be reward token\"\r\n            );\r\n        }\r\n\r\n        ERC20(_tokenAddress).transfer(address(msg.sender), _tokenAmount);\r\n\r\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    /*\r\n     * @notice Allow owner to remove all staked token from pool.\r\n     * @param _amount: amount to withdraw (in stakedToken)\r\n     * @dev Only callable by owner\r\n     */\r\n    function emergencyRemoval(uint256 _amount) external onlyOwner {\r\n        require(isRemovable, \"The pool is not removable\");\r\n        require(\r\n            stakedToken.balanceOf(address(this)) >= _amount,\r\n            \"Amount exceeds pool balance\"\r\n        );\r\n        if (_amount > 0) {\r\n            ERC20(stakedToken).transfer(address(msg.sender), _amount);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice Stop rewards\r\n     * @dev Only callable by owner\r\n     */\r\n    function stopReward() external onlyOwner {\r\n        bonusEndBlock = block.number;\r\n    }\r\n\r\n    /* Fee updates\r\n     *  Only callable by owner\r\n     */\r\n    function updateFeePeriod(uint256 _newFeePeriod) external onlyOwner {\r\n        feePeriod = _newFeePeriod;\r\n    }\r\n\r\n    function updateUnstakingFee(uint256 _newFee) external onlyOwner {\r\n        unStakingFee = _newFee;\r\n    }\r\n\r\n    function updateFeeCollector(address _newCollector) external onlyOwner {\r\n        require(_newCollector != feeCollector, \"Already the fee collector\");\r\n        feeCollector = _newCollector;\r\n    }\r\n\r\n    /*\r\n     * @notice Update pool limit per user\r\n     * @dev Only callable by owner.\r\n     * @param _hasUserLimit: whether the limit remains forced\r\n     * @param _poolLimitPerUser: new pool limit per user\r\n     */\r\n    function updatePoolLimitPerUser(\r\n        bool _hasUserLimit,\r\n        uint256 _poolLimitPerUser\r\n    ) external onlyOwner {\r\n        require(hasUserLimit, \"Must be set\");\r\n        if (_hasUserLimit) {\r\n            // require(_poolLimitPerUser > poolLimitPerUser, \"New limit must be higher\");\r\n            poolLimitPerUser = _poolLimitPerUser;\r\n        } else {\r\n            hasUserLimit = _hasUserLimit;\r\n            poolLimitPerUser = 0;\r\n        }\r\n        emit NewPoolLimit(poolLimitPerUser);\r\n    }\r\n\r\n    /*\r\n     * @notice Update pool cap\r\n     * @dev Only callable by owner.\r\n     * @param _hasPoolLimit: whether the cap remains forced\r\n     * @param _poolCap: new pool limit per user\r\n     */\r\n    function updatePoolCap(bool _hasPoolLimit, uint256 _poolCap)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(hasPoolLimit, \"Must be set\");\r\n        if (_hasPoolLimit) {\r\n            // require(_poolCap > poolCap, \"New cap must be higher\");\r\n            poolCap = _poolCap;\r\n        } else {\r\n            hasPoolLimit = _hasPoolLimit;\r\n            poolCap = 0;\r\n        }\r\n        emit NewPoolCap(poolCap);\r\n    }\r\n\r\n    /*\r\n     * @notice Update reward per block\r\n     * @dev Only callable by owner.\r\n     * @param _rewardPerBlock: the reward per block\r\n     */\r\n    function updateRewardPerBlock(uint256 _rewardPerBlock, ERC20 _token)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(block.number < startBlock, \"Pool has started\");\r\n        (bool foundToken, uint256 tokenIndex) = findElementPosition(\r\n            _token,\r\n            rewardTokens\r\n        );\r\n        require(foundToken, \"Cannot find token\");\r\n        rewardPerBlock[_token] = _rewardPerBlock;\r\n        emit NewRewardPerBlock(_rewardPerBlock, _token);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to update start and end blocks\r\n     * @dev This function is only callable by owner.\r\n     * @param _startBlock: the new start block\r\n     * @param _bonusEndBlock: the new end block\r\n     */\r\n    function updateStartAndEndBlocks(\r\n        uint256 _startBlock,\r\n        uint256 _bonusEndBlock\r\n    ) external onlyOwner {\r\n        require(block.number < startBlock, \"Pool has started\");\r\n        require(\r\n            _startBlock < _bonusEndBlock,\r\n            \"New startBlock must be lower than new endBlock\"\r\n        );\r\n        require(\r\n            block.number < _startBlock,\r\n            \"New startBlock must be higher than current block\"\r\n        );\r\n\r\n        require(\r\n            stakingBlock <= _startBlock,\r\n            \"Staking block exceeds start block\"\r\n        );\r\n        require(\r\n            stakingEndBlock <= _bonusEndBlock,\r\n            \"End staking block exceeds bonus end block\"\r\n        );\r\n        //require(unStakingBlock >= _bonusEndBlock, \"Unstaking block precedes end block\");\r\n\r\n        startBlock = _startBlock;\r\n        bonusEndBlock = _bonusEndBlock;\r\n\r\n        // Set the lastRewardBlock as the startBlock\r\n        lastRewardBlock = startBlock;\r\n\r\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to update staking block\r\n     * @dev This function is only callable by owner.\r\n     * @param _startStakingBlock: the new staking block\r\n     */\r\n    function updateStakingBlocks(\r\n        uint256 _startStakingBlock,\r\n        uint256 _endStakingBlock\r\n    ) external onlyOwner {\r\n        //require(block.number < stakingBlock, \"Staking has started\");\r\n        require(\r\n            _startStakingBlock <= startBlock,\r\n            \"Staking block exceeds start block\"\r\n        );\r\n        require(\r\n            _startStakingBlock <= unStakingBlock,\r\n            \"Staking block exceeds unstaking block\"\r\n        );\r\n        require(\r\n            block.number < _startStakingBlock,\r\n            \"New stakingBlock must be higher than current block\"\r\n        );\r\n\r\n        require(\r\n            _startStakingBlock < _endStakingBlock,\r\n            \"Staking block exceeds end staking block\"\r\n        );\r\n        require(\r\n            _endStakingBlock <= bonusEndBlock,\r\n            \"End staking block exceeds bonus end block\"\r\n        );\r\n        //require(block.number < _startStakingBlock, \"New stakingBlock must be higher than current block\");\r\n\r\n        stakingBlock = _startStakingBlock;\r\n        stakingEndBlock = _endStakingBlock;\r\n\r\n        emit NewStakingBlocks(_startStakingBlock, _endStakingBlock);\r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to update unstaking block\r\n     * @dev This function is only callable by owner.\r\n     * @param _startUnStakingBlock: the new staking block\r\n     */\r\n    function updateUnStakingBlock(uint256 _startUnStakingBlock)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(block.number < unStakingBlock, \"Unstaking has started\");\r\n        //require(_startUnStakingBlock >= bonusEndBlock, \"Unstaking block precedes end block\");\r\n        require(\r\n            stakingBlock <= _startUnStakingBlock,\r\n            \"Staking block exceeds unstaking block\"\r\n        );\r\n        require(\r\n            block.number < _startUnStakingBlock,\r\n            \"New UnStakingBlock must be higher than current block\"\r\n        );\r\n\r\n        unStakingBlock = _startUnStakingBlock;\r\n\r\n        emit NewUnStakingBlock(_startUnStakingBlock);\r\n    }\r\n\r\n    /*\r\n     * @notice View function to see pending reward on frontend.\r\n     * @param _user: user address\r\n     * @return Pending reward for a given user\r\n     */\r\n    function pendingReward(address _user)\r\n        external\r\n        view\r\n        returns (uint256[] memory, ERC20[] memory)\r\n    {\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\r\n        uint256[] memory userPendingRewards = new uint256[](\r\n            rewardTokens.length\r\n        );\r\n        if (block.number > lastRewardBlock && stakedTokenSupply != 0) {\r\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n            uint256 bscsReward;\r\n            uint256 adjustedTokenPerShare;\r\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n                bscsReward = multiplier.mul(rewardPerBlock[rewardTokens[i]]);\r\n                adjustedTokenPerShare = accTokenPerShare[rewardTokens[i]].add(\r\n                    bscsReward.mul(PRECISION_FACTOR[rewardTokens[i]]).div(\r\n                        stakedTokenSupply\r\n                    )\r\n                );\r\n                userPendingRewards[i] = user\r\n                .amount\r\n                .mul(adjustedTokenPerShare)\r\n                .div(PRECISION_FACTOR[rewardTokens[i]])\r\n                .sub(user.rewardDebt[rewardTokens[i]]);\r\n            }\r\n            return (userPendingRewards, rewardTokens);\r\n        } else {\r\n            for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n                userPendingRewards[i] = user\r\n                .amount\r\n                .mul(accTokenPerShare[rewardTokens[i]])\r\n                .div(PRECISION_FACTOR[rewardTokens[i]])\r\n                .sub(user.rewardDebt[rewardTokens[i]]);\r\n            }\r\n            return (userPendingRewards, rewardTokens);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice View function to see pending reward on frontend (categorized by rewardToken)\r\n     * @param _user: user address\r\n     * @return Pending reward for a given user\r\n     */\r\n    function pendingRewardByToken(address _user, ERC20 _token)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (bool foundToken, uint256 tokenIndex) = findElementPosition(\r\n            _token,\r\n            rewardTokens\r\n        );\r\n        if (!foundToken) {\r\n            return 0;\r\n        }\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\r\n        uint256 userPendingReward;\r\n        if (block.number > lastRewardBlock && stakedTokenSupply != 0) {\r\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n            uint256 bscsReward = multiplier.mul(rewardPerBlock[_token]);\r\n            uint256 adjustedTokenPerShare = accTokenPerShare[_token].add(\r\n                bscsReward.mul(PRECISION_FACTOR[_token]).div(\r\n                    stakedTokenSupply\r\n                )\r\n            );\r\n            userPendingReward = user\r\n            .amount\r\n            .mul(adjustedTokenPerShare)\r\n            .div(PRECISION_FACTOR[_token])\r\n            .sub(user.rewardDebt[_token]);\r\n            return userPendingReward;\r\n        } else {\r\n            return\r\n                user\r\n                    .amount\r\n                    .mul(accTokenPerShare[_token])\r\n                    .div(PRECISION_FACTOR[_token])\r\n                    .sub(user.rewardDebt[_token]);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice Update reward variables of the given pool to be up-to-date.\r\n     */\r\n    function _updatePool() internal {\r\n        if (block.number <= lastRewardBlock) {\r\n            return;\r\n        }\r\n\r\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\r\n\r\n        if (stakedTokenSupply == 0) {\r\n            lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\r\n        uint256 bscsReward;\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            bscsReward = multiplier.mul(rewardPerBlock[rewardTokens[i]]);\r\n            accTokenPerShare[rewardTokens[i]] = accTokenPerShare[\r\n                rewardTokens[i]\r\n            ]\r\n            .add(\r\n                bscsReward.mul(PRECISION_FACTOR[rewardTokens[i]]).div(\r\n                    stakedTokenSupply\r\n                )\r\n            );\r\n        }\r\n        lastRewardBlock = block.number;\r\n    }\r\n\r\n    /*\r\n     * @notice Return reward multiplier over the given _from to _to block.\r\n     * @param _from: block to start\r\n     * @param _to: block to finish\r\n     */\r\n    function _getMultiplier(uint256 _from, uint256 _to)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_to <= bonusEndBlock) {\r\n            return _to.sub(_from);\r\n        } else if (_from >= bonusEndBlock) {\r\n            return 0;\r\n        } else {\r\n            return bonusEndBlock.sub(_from);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @notice Add new reward token.\r\n     * @param _token: new rewardToken to add\r\n     * @param _rewardPerBlock: _token's rewardPerBlock\r\n     */\r\n    function addRewardToken(ERC20 _token, uint256 _rewardPerBlock)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(address(_token) != address(0), \"Must be a real token\");\r\n        require(address(_token) != address(this), \"Must be a real token\");\r\n        (bool foundToken, uint256 tokenIndex) = findElementPosition(\r\n            _token,\r\n            rewardTokens\r\n        );\r\n        require(!foundToken, \"Token exists\");\r\n        rewardTokens.push(_token);\r\n\r\n        uint256 decimalsRewardToken = uint256(_token.decimals());\r\n        require(decimalsRewardToken < 30, \"Must be inferior to 30\");\r\n        PRECISION_FACTOR[_token] = uint256(\r\n            10**(uint256(30).sub(decimalsRewardToken))\r\n        );\r\n        rewardPerBlock[_token] = _rewardPerBlock;\r\n        accTokenPerShare[_token] = 0;\r\n\r\n        emit NewRewardToken(_token, _rewardPerBlock, PRECISION_FACTOR[_token]);\r\n    }\r\n\r\n    /*\r\n     * @notice Remove a reward token.\r\n     * @param _token: rewardToken to remove\r\n     */\r\n    function removeRewardToken(ERC20 _token) external onlyOwner {\r\n        require(address(_token) != address(0), \"Must be a real token\");\r\n        require(address(_token) != address(this), \"Must be a real token\");\r\n        require(rewardTokens.length > 0, \"List of token is empty\");\r\n\r\n        (bool foundToken, uint256 tokenIndex) = findElementPosition(\r\n            _token,\r\n            rewardTokens\r\n        );\r\n        require(foundToken, \"Cannot find token\");\r\n        (bool success, ERC20[] memory newRewards) = removeElement(\r\n            tokenIndex,\r\n            rewardTokens\r\n        );\r\n        rewardTokens = newRewards;\r\n        require(success, \"Remove token unsuccessfully\");\r\n        PRECISION_FACTOR[_token] = 0;\r\n        rewardPerBlock[_token] = 0;\r\n        accTokenPerShare[_token] = 0;\r\n\r\n        emit RemoveRewardToken(_token);\r\n    }\r\n\r\n    /*\r\n     * @notice Remove element at index.\r\n     * @param _index: index of the element to remove\r\n     * @param _array: array of which to remove element at _index\r\n     */\r\n    function removeElement(uint256 _index, ERC20[] storage _array)\r\n        internal\r\n        returns (bool, ERC20[] memory)\r\n    {\r\n        if (_index >= _array.length) {\r\n            return (false, _array);\r\n        }\r\n\r\n        for (uint256 i = _index; i < _array.length - 1; i++) {\r\n            _array[i] = _array[i + 1];\r\n        }\r\n\r\n        _array.pop();\r\n        return (true, _array);\r\n    }\r\n\r\n    /*\r\n     * @notice Find element position in array.\r\n     * @param _token: token of which to find position\r\n     * @param _array: array that contains _token\r\n     */\r\n    function findElementPosition(ERC20 _token, ERC20[] storage _array)\r\n        internal\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        for (uint256 i = 0; i < _array.length; i++) {\r\n            if (_array[i] == _token) {\r\n                return (true, i);\r\n            }\r\n        }\r\n        return (false, 0);\r\n    }\r\n\r\n    //**Additional get methods for frontend use */\r\n\r\n    function getUserDebt(address _usr)\r\n        external\r\n        view\r\n        returns (ERC20[] memory, uint256[] memory)\r\n    {\r\n        uint256[] memory userDebt = new uint256[](rewardTokens.length);\r\n        UserInfo storage user = userInfo[_usr];\r\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\r\n            userDebt[i] = user.rewardDebt[rewardTokens[i]];\r\n        }\r\n        return (rewardTokens, userDebt);\r\n    }\r\n\r\n    function getUserDebtByToken(address _usr, ERC20 _token)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        UserInfo storage user = userInfo[_usr];\r\n        return (user.rewardDebt[_token]);\r\n    }\r\n\r\n    function getAllRewardPerBlock(ERC20[] memory _tokens)\r\n        external\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory RPBlist = new uint256[](_tokens.length);\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            RPBlist[i] = rewardPerBlock[_tokens[i]];\r\n        }\r\n        return (RPBlist);\r\n    }\r\n\r\n    function getAllAccTokenPerShared(ERC20[] memory _tokens)\r\n        external\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory ATPSlist = new uint256[](_tokens.length);\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            ATPSlist[i] = accTokenPerShare[_tokens[i]];\r\n        }\r\n        return (ATPSlist);\r\n    }\r\n\r\n    function getAllPreFactor(ERC20[] memory _tokens)\r\n        external\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory PFlist = new uint256[](_tokens.length);\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            PFlist[i] = PRECISION_FACTOR[_tokens[i]];\r\n        }\r\n        return (PFlist);\r\n    }\r\n\r\n    //*Override transfer functions, allowing receipts to be transferable */\r\n    function getStakingEndBlock() external view returns (uint256) {\r\n        return stakingEndBlock;\r\n    }\r\n\r\n    function getUnStakingFee() external view returns (uint256) {\r\n        return unStakingFee;\r\n    }\r\n\r\n    function getFeePeriod() external view returns (uint256) {\r\n        return feePeriod;\r\n    }\r\n\r\n    function getFeeCollector() external view returns (address) {\r\n        return feeCollector;\r\n    }\r\n\r\n    function getLastStakingBlock(address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        UserInfo storage user = userInfo[_user];\r\n        return user.lastStakingBlock;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolCap\",\"type\":\"uint256\"}],\"name\":\"NewPoolCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"NewPoolLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"p_factor\",\"type\":\"uint256\"}],\"name\":\"NewRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startStakingBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endStakingBlock\",\"type\":\"uint256\"}],\"name\":\"NewStakingBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startUnStakingBlock\",\"type\":\"uint256\"}],\"name\":\"NewUnStakingBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RemoveRewardToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BSCStaion_CASTLE_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRemoval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getAllAccTokenPerShared\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getAllPreFactor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getAllRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLastStakingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnStakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"}],\"name\":\"getUserDebt\",\"outputs\":[{\"internalType\":\"contract ERC20[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usr\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserDebtByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPoolLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasUserLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract ERC20[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startEndBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_stakingBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_unStakingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_feeSettings\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolCap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isRemovable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"contract ERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"pendingRewardByToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLimitPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStakingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unStakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeePeriod\",\"type\":\"uint256\"}],\"name\":\"updateFeePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasPoolLimit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_poolCap\",\"type\":\"uint256\"}],\"name\":\"updatePoolCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasUserLimit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_poolLimitPerUser\",\"type\":\"uint256\"}],\"name\":\"updatePoolLimitPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startStakingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endStakingBlock\",\"type\":\"uint256\"}],\"name\":\"updateStakingBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startUnStakingBlock\",\"type\":\"uint256\"}],\"name\":\"updateUnStakingBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateUnstakingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStakingBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BSCSBSCSStartPool", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3ca8903da38df480cc8797d5b96cb7501af98ad5c082ee0f73e89e252b4da2e3"}