{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/jmvc/Desktop/doge-viking-contract/contracts/DogeViking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./DogeVikingMetaData.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\n\\nstruct Exceptions {\\n    bool noHoldingLimit;\\n    bool noFees;\\n    bool noMaxTxAmount;\\n}\\n\\nenum Token {ZERO, ONE}\\n\\ncontract DogeViking is DogeVikingMetaData, Ownable {\\n    // Supply *************************************************************\\n\\n    uint256 private constant MAX_INT_VALUE = type(uint256).max;\\n\\n    uint256 private constant _tokenSupply = 1e6 ether;\\n\\n    uint256 private _reflectionSupply = (MAX_INT_VALUE -\\n        (MAX_INT_VALUE % _tokenSupply));\\n\\n    // Taxes *************************************************************\\n\\n    uint8 public liquidityFee = 20;\\n\\n    uint8 private _previousLiquidityFee = liquidityFee;\\n\\n    uint8 public dogeVikingPoolFee = 2;\\n\\n    uint8 private _previousDogeVikingPoolFee = dogeVikingPoolFee;\\n\\n    uint8 public txFee = 10;\\n\\n    uint8 private _previousTxFee = txFee;\\n\\n    uint256 private _totalTokenFees;\\n\\n    // Wallets *************************************************************\\n\\n    mapping(address => uint256) private _reflectionBalance;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    mapping(address => uint256) public previousSale;\\n\\n    // Privileges *************************************************************\\n\\n    mapping(address => Exceptions) public exceptions;\\n\\n    // Constraints *************************************************************\\n\\n    // 0.1% of the total supply\\n    uint256 public maxTxAmount = 1 * 1e3 ether;\\n\\n    // 0.05% of the total supply\\n    uint256 public numberTokensSellToAddToLiquidity = 5 * 1e2 ether;\\n\\n    // 0.07% of total supply\\n    uint256 public sellLimitThreshold = 7 * 1e2 ether;\\n\\n    // 0.1% of the total supply\\n    uint256 public maxHoldingAmount = 1 * 1e3 ether;\\n\\n    uint256 public sellDelay = 3 days;\\n\\n    uint public whaleDenominator = 20;\\n\\n    bool public startTrading;\\n\\n    // Events *************************************************************\\n\\n    event SwapAndLiquefy(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    event SwapAndLiquefyStateUpdate(bool state);\\n\\n    event UpdateRouter(address newRouter, address newPair);\\n\\n    // State *************************************************************\\n\\n    bool public isSwapAndLiquifyingEnabled = true;\\n\\n    bool private _swapAndLiquifyingInProgress;\\n\\n    // Addresses *************************************************************\\n\\n    address public vikingPool;\\n\\n    IUniswapV2Router02 public uniswapV2Router;\\n\\n    address public uniswapV2WETHPair;\\n\\n    constructor(address routerAddress, address vikingPoolAddress) {\\n        _reflectionBalance[_msgSender()] = _reflectionSupply;\\n\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);\\n\\n        uniswapV2WETHPair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        uniswapV2Router = _uniswapV2Router;\\n\\n        vikingPool = vikingPoolAddress;\\n\\n        exceptions[owner()].noFees = true;\\n        exceptions[address(this)].noFees = true;\\n        exceptions[vikingPoolAddress].noFees = true;\\n\\n        exceptions[owner()].noHoldingLimit = true;\\n        exceptions[address(this)].noHoldingLimit = true;\\n        exceptions[vikingPoolAddress].noHoldingLimit = true;\\n        exceptions[uniswapV2WETHPair].noHoldingLimit = true;\\n\\n        exceptions[address(this)].noMaxTxAmount = true;\\n\\n        emit Transfer(address(0), _msgSender(), _tokenSupply);\\n    }\\n\\n    modifier lockTheSwap {\\n        _swapAndLiquifyingInProgress = true;\\n        _;\\n        _swapAndLiquifyingInProgress = false;\\n    }\\n\\n    function ape() external onlyOwner() {\\n        startTrading = true;\\n    }\\n\\n    function totalSupply() external pure override returns (uint256) {\\n        return _tokenSupply;\\n    }\\n\\n    function isExcludedFromFees(address account) external view returns (bool) {\\n        return exceptions[account].noFees;\\n    }\\n\\n    function _getRate() private view returns (uint256) {\\n        return _reflectionSupply / _tokenSupply;\\n    }\\n\\n    function _reflectionFromToken(uint256 amount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            _tokenSupply >= amount,\\n            \\\"You cannot own more tokens than the total token supply\\\"\\n        );\\n        return amount * _getRate();\\n    }\\n\\n    function _tokenFromReflection(uint256 reflectionAmount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            _reflectionSupply >= reflectionAmount,\\n            \\\"Cannot have a personal reflection amount larger than total reflection\\\"\\n        );\\n        return reflectionAmount / _getRate();\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _tokenFromReflection(_reflectionBalance[account]);\\n    }\\n\\n    function totalFees() external view returns (uint256) {\\n        return _totalTokenFees;\\n    }\\n\\n    function _removeAllFees() private {\\n        if (liquidityFee == 0 && dogeVikingPoolFee == 0 && txFee == 0) return;\\n\\n        _previousLiquidityFee = liquidityFee;\\n        _previousDogeVikingPoolFee = dogeVikingPoolFee;\\n        _previousTxFee = txFee;\\n\\n        liquidityFee = 0;\\n        dogeVikingPoolFee = 0;\\n        txFee = 0;\\n    }\\n\\n    function _restoreAllFees() private {\\n        liquidityFee = _previousLiquidityFee;\\n        dogeVikingPoolFee = _previousDogeVikingPoolFee;\\n        txFee = _previousTxFee;\\n    }\\n\\n    function setSwapAndLiquifyingState(bool state) external onlyOwner() {\\n        isSwapAndLiquifyingEnabled = state;\\n        emit SwapAndLiquefyStateUpdate(state);\\n    }\\n\\n    function _calculateFee(uint256 amount, uint8 fee)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        return (amount * fee) / 100;\\n    }\\n\\n    function _calculateTxFee(uint256 amount) private view returns (uint256) {\\n        return _calculateFee(amount, txFee);\\n    }\\n\\n    function _calculateLiquidityFee(uint256 amount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return _calculateFee(amount, liquidityFee);\\n    }\\n\\n    function _calculatePoolFee(uint256 amount) private view returns (uint256) {\\n        return _calculateFee(amount, dogeVikingPoolFee);\\n    }\\n\\n    function _reflectFee(uint256 rfee, uint256 fee) private {\\n        _reflectionSupply -= rfee;\\n        _totalTokenFees += fee;\\n    }\\n\\n    function _takeLiquidity(uint256 rAmount) private {\\n        _reflectionBalance[address(this)] =\\n            _reflectionBalance[address(this)] +\\n            rAmount;\\n    }\\n\\n    receive() external payable {}\\n\\n    function _transferToken(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool removeFees\\n    ) private {\\n        if (removeFees) _removeAllFees();\\n\\n        uint256 rAmount = _reflectionFromToken(amount);\\n\\n        _reflectionBalance[sender] = _reflectionBalance[sender] - rAmount;\\n\\n        // Holders retribution\\n        uint256 rTax = _reflectionFromToken(_calculateTxFee(amount));\\n\\n        // Pool retribution\\n        uint256 rPoolTax = _reflectionFromToken(_calculatePoolFee(amount));\\n\\n        // Liquidity retribution\\n        uint256 rLiquidityTax =\\n            _reflectionFromToken(_calculateLiquidityFee(amount));\\n\\n        // Since the recipient is also  excluded. We need to update his reflections and tokens.\\n        _reflectionBalance[recipient] =\\n            _reflectionBalance[recipient] +\\n            rAmount -\\n            rTax -\\n            rPoolTax -\\n            rLiquidityTax;\\n\\n        _reflectionBalance[vikingPool] =\\n            _reflectionBalance[vikingPool] +\\n            rPoolTax;\\n\\n        _takeLiquidity(rLiquidityTax);\\n        _reflectFee(\\n            rTax,\\n            _calculateTxFee(amount) +\\n                _calculatePoolFee(amount) +\\n                _calculateLiquidityFee(amount)\\n        );\\n\\n        previousSale[sender] = block.timestamp;\\n        emit Transfer(\\n            sender,\\n            recipient,\\n            amount -\\n                _calculateLiquidityFee(amount) -\\n                _calculatePoolFee(amount) -\\n                _calculateTxFee(amount)\\n        );\\n\\n        // Restores all fees if they were disabled.\\n        if (removeFees) _restoreAllFees();\\n    }\\n\\n    function _swapTokensForEth(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // make the swap\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // add the liquidity\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            owner(),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _swapAndLiquefy() private lockTheSwap {\\n        // split the contract token balance into halves\\n        uint256 half = numberTokensSellToAddToLiquidity / 2;\\n        uint256 otherHalf = numberTokensSellToAddToLiquidity - half;\\n\\n        uint256 initialETHContractBalance = address(this).balance;\\n\\n        // Buys ETH at current token price\\n        _swapTokensForEth(half);\\n\\n        // This is to make sure we are only using ETH derived from the liquidity fee\\n        uint256 ethBought = address(this).balance - initialETHContractBalance;\\n\\n        // Add liquidity to the pool\\n        _addLiquidity(otherHalf, ethBought);\\n\\n        emit SwapAndLiquefy(half, ethBought, otherHalf);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        require(\\n            sender != address(0),\\n            \\\"ERC20: Sender cannot be the zero address\\\"\\n        );\\n        require(\\n            recipient != address(0),\\n            \\\"ERC20: Recipient cannot be the zero address\\\"\\n        );\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        // Owner has no limits\\n        if (sender != owner() && recipient != owner()) {\\n            require(startTrading, \\\"Trading is not allowed yet.\\\");\\n\\n            // Future utility contracts might need conduct large TXs.\\n            if (!exceptions[sender].noMaxTxAmount)\\n                require(\\n                    amount <= maxTxAmount,\\n                    \\\"Transfer amount exceeds the maxTxAmount.\\\"\\n                );\\n\\n            // Future utility contracts and EOA like exchanges should not have a holding limit\\n            if (!exceptions[recipient].noHoldingLimit) {\\n                require(\\n                    balanceOf(recipient) + amount <= maxHoldingAmount,\\n                    \\\"Your holdings will pass the limit.\\\"\\n                );\\n            }\\n\\n            // Should be limited to selling on pancake swap to protect holders or when it is this contract selling for the liquidity event\\n            if (\\n                (recipient == address(uniswapV2Router) ||\\n                recipient == address(uniswapV2WETHPair)) &&\\n                    sender != address(this)\\n            ) {\\n                uint senderBalance = balanceOf(sender);\\n                // Harpoon whales\\n                if (senderBalance > sellLimitThreshold) {\\n                    require(senderBalance / whaleDenominator > amount, \\\"You need to sell a smaller amount.\\\");\\n                    require(\\n                        block.timestamp - previousSale[sender] > sellDelay,\\n                        \\\"You must wait to sell again.\\\"\\n                    );\\n                }\\n            }\\n        }\\n\\n        // Condition 1: Make sure the contract has the enough tokens to liquefy\\n        // Condition 2: We are not in a liquefication event\\n        // Condition 3: Liquification is enabled\\n        // Condition 4: It is not the uniswapPair that is sending tokens\\n\\n        if (\\n            balanceOf(address(this)) >= numberTokensSellToAddToLiquidity &&\\n            !_swapAndLiquifyingInProgress &&\\n            isSwapAndLiquifyingEnabled &&\\n            sender != address(uniswapV2WETHPair)\\n        ) _swapAndLiquefy();\\n\\n        _transferToken(\\n            sender,\\n            recipient,\\n            amount,\\n            exceptions[sender].noFees || exceptions[recipient].noFees\\n        );\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address beneficiary,\\n        uint256 amount\\n    ) private {\\n        require(\\n            beneficiary != address(0),\\n            \\\"The burn address is not allowed to receive approval for allowances.\\\"\\n        );\\n        require(\\n            owner != address(0),\\n            \\\"The burn address is not allowed to approve allowances.\\\"\\n        );\\n\\n        _allowances[owner][beneficiary] = amount;\\n        emit Approval(owner, beneficiary, amount);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function approve(address beneficiary, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), beneficiary, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address provider,\\n        address beneficiary,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        _transfer(provider, beneficiary, amount);\\n        _approve(\\n            provider,\\n            _msgSender(),\\n            _allowances[provider][_msgSender()] - amount\\n        );\\n        return true;\\n    }\\n\\n    function allowance(address owner, address beneficiary)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][beneficiary];\\n    }\\n\\n    function increaseAllowance(address beneficiary, uint256 amount)\\n        external\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            beneficiary,\\n            _allowances[_msgSender()][beneficiary] + amount\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address beneficiary, uint256 amount)\\n        external\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            beneficiary,\\n            _allowances[_msgSender()][beneficiary] - amount\\n        );\\n        return true;\\n    }\\n\\n    // ********************************* SETTERS *********************************\\n\\n    function setLiquidityFee(uint8 amount) external onlyOwner() {\\n        require(amount <= 20, \\\"The maximum amount allowed is 20%\\\");\\n        liquidityFee = amount;\\n    }\\n\\n    function setDogeVikingFundFee(uint8 amount) external onlyOwner() {\\n        require(amount <= 2, \\\"The maximum amount allowed is 2%\\\");\\n        dogeVikingPoolFee = amount;\\n    }\\n\\n    function setTxFee(uint8 amount) external onlyOwner() {\\n        require(amount <= 10, \\\"The maximum amount allowed is 5%\\\");\\n        txFee = amount;\\n    }\\n\\n    function setPoolAddress(address _address) external onlyOwner() {\\n        exceptions[vikingPool].noFees = false;\\n        exceptions[vikingPool].noMaxTxAmount = false;\\n        exceptions[vikingPool].noHoldingLimit = false;\\n\\n        exceptions[_address].noFees = true;\\n        exceptions[_address].noMaxTxAmount = true;\\n        exceptions[_address].noHoldingLimit = true;\\n\\n        vikingPool = _address;\\n    }\\n\\n    function setNumberTokensSellToAddToLiquidity(uint256 _amount)\\n        external\\n        onlyOwner()\\n    {\\n        numberTokensSellToAddToLiquidity = _amount;\\n    }\\n\\n    function updateRouter(address _router) external onlyOwner() {\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_router);\\n\\n        address pair =\\n            IUniswapV2Factory(_uniswapV2Router.factory()).getPair(\\n                address(this),\\n                _uniswapV2Router.WETH()\\n            );\\n\\n        if (pair == address(0)) {\\n            pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\n                address(this),\\n                _uniswapV2Router.WETH()\\n            );\\n        }\\n\\n        uniswapV2WETHPair = pair;\\n        uniswapV2Router = _uniswapV2Router;\\n\\n        emit UpdateRouter(address(_uniswapV2Router), pair);\\n    }\\n\\n    function excludeFromFees(address account) external onlyOwner() {\\n        exceptions[account].noFees = true;\\n    }\\n\\n    function includeInFees(address account) external onlyOwner() {\\n        exceptions[account].noFees = false;\\n    }\\n\\n    function removeHoldingLimit(address account) external onlyOwner() {\\n        exceptions[account].noHoldingLimit = true;\\n    }\\n\\n    function addHoldinglimit(address account) external onlyOwner() {\\n        exceptions[account].noHoldingLimit = false;\\n    }\\n\\n    function removeMaxTxAmount(address account) external onlyOwner() {\\n        exceptions[account].noMaxTxAmount = true;\\n    }\\n\\n    function addMaxTxAmount(address account) external onlyOwner() {\\n        exceptions[account].noMaxTxAmount = false;\\n    }\\n\\n    function setMaxHoldingAmount(uint256 _amount) external onlyOwner() {\\n        // 0.05% of total supply\\n        require(_amount >= 1 * 1e2 ether, \\\"Please set a higher amount\\\");\\n        // 0.5% of total supply\\n        require(_amount <= 5 * 1e3 ether, \\\"Please set a lower amount\\\");\\n        maxHoldingAmount = _amount;\\n    }\\n\\n    function setMaxTxAmount(uint256 _amount) external onlyOwner() {\\n        // 0.05% of total supply\\n        require(_amount >= 1 * 1e2 ether, \\\"Please set a higher amount\\\");\\n        // 0.5% of total supply\\n        require(_amount <= 5 * 1e3 ether, \\\"Please set a lower amount\\\");\\n        maxTxAmount = _amount;\\n    }\\n\\n    function setSellLimitThreshold(uint256 _amount) external onlyOwner() {\\n        // 0.05% of total supply\\n        require(_amount >= 1 * 1e2 ether, \\\"Please set a higher amount\\\");\\n        sellLimitThreshold = _amount;\\n    }\\n\\n    function setSellDelay(uint256 _delay) external onlyOwner() {\\n        require(_delay <= 5 days, \\\"The maximum delay is 5 days\\\");\\n        require(_delay >= 30 minutes, \\\"The minimum delay is 30 minutes\\\");\\n        sellDelay = _delay;\\n    }\\n\\n    function setWhaleDenominator(uint256 _amount) external onlyOwner() {\\n        require(_amount >= 1, \\\"The minimum is 1\\\");\\n        require(_amount <= 50, \\\"The maximum 50\\\");\\n        whaleDenominator = _amount;\\n    }\\n\\n    // ********************************* Withdrawals *********************************\\n\\n    function withdrawETH() external onlyOwner() {\\n        (bool success, ) =\\n            payable(owner()).call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Error withdrawing ETH\\\");\\n    }\\n\\n    function withdrawERC20(address _token, address _to)\\n        external\\n        onlyOwner()\\n        returns (bool sent)\\n    {\\n        require(\\n            _token != address(this),\\n            \\\"You cannot withdraw this contract tokens.\\\"\\n        );\\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\\n        sent = IERC20(_token).transfer(_to, _contractBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/jmvc/Desktop/doge-viking-contract/contracts/DogeVikingMetaData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/IERC20MetaData.sol\\\";\\n\\nabstract contract DogeVikingMetaData is IERC20Metadata {\\n    /**\\n     *@dev The name of the token managed by the this smart contract.\\n     */\\n    string private constant _name = \\\"Doge Viking\\\";\\n\\n    /**\\n     *@dev The symbol of the token managed by the this smart contract.\\n     */\\n    string private constant _symbol = \\\"DVK\\\";\\n\\n    /**\\n     *@dev The decimals of the token managed by the this smart contract.\\n     */\\n    uint8 private constant _decimals = 9;\\n\\n    /**\\n     *@dev It returns the name of the token.\\n     */\\n    function name() external pure override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     *@dev It returns the symbol of the token.\\n     */\\n    function symbol() external pure override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     *@dev It returns the decimal of the token.\\n     */\\n    function decimals() external pure override returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/jmvc/Desktop/doge-viking-contract/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"/Users/jmvc/Desktop/doge-viking-contract/contracts/interfaces/IERC20MetaData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"/Users/jmvc/Desktop/doge-viking-contract/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"/Users/jmvc/Desktop/doge-viking-contract/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"/Users/jmvc/Desktop/doge-viking-contract/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"/Users/jmvc/Desktop/doge-viking-contract/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"/Users/jmvc/Desktop/doge-viking-contract/contracts/lib/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/jmvc/Desktop/doge-viking-contract/contracts/lib/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vikingPoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquefy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquefyStateUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"UpdateRouter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addHoldinglimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ape\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dogeVikingPoolFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exceptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"noHoldingLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"noFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"noMaxTxAmount\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapAndLiquifyingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"previousSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeHoldingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimitThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"setDogeVikingFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxHoldingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setNumberTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setSellDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSellLimitThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyingState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"setTxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setWhaleDenominator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2WETHPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vikingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DogeViking", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000001ac145dad3e212e0435055c131512765d4e1cec", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}