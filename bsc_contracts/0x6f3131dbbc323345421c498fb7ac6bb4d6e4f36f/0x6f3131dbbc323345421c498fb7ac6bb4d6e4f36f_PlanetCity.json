{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-09-23\r\n*/\r\n\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(isContract(address(token)), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract PlanetCity {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\tIERC20 public token;\r\n\tuint256[] public REFERRAL_PERCENTS = [200, 200, 200, 50, 50, 50, 50];\r\n\tuint256 constant public TOTAL_REF = 800;\r\n\tuint256 constant public PROJECT_FEE = 200;\r\n    uint256 constant public PROJECT_FEE2 = 200;\r\n    uint256 constant public PROJECT_FEE3 = 200;\r\n\tuint256 constant public PERCENTS_DIVIDER = 10000;\r\n\tuint256 constant public TIME_STEP = 1 days;\r\n\r\n\tuint256 public totalInvested;\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n    }\r\n\r\n    Plan[] internal plans;\r\n\r\n\tstruct Deposit {\r\n        uint8 plan;\r\n\t\tuint256 amount;\r\n\t\tuint256 start;\r\n\t}\r\n\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\tuint256 checkpoint;\r\n\t\taddress referrer;\r\n\t\tuint256[7] levels;\r\n\t\tuint256 bonus;\r\n\t\tuint256 totalBonus;\r\n\t\tuint256 withdrawn;\r\n\t}\r\n\r\n\tmapping (address => User) internal users;\r\n\r\n\tuint256 public startDate;\r\n\taddress payable public commissionWallet;\r\n    address payable public commissionWallet2;\r\n    address payable public commissionWallet3;\r\n\r\n\tevent Newbie(address user);\r\n\tevent NewDeposit(address indexed user, uint8 plan, uint256 amount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n\tevent FeePayed(address indexed user, uint256 totalAmount);\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n          \r\n\t// Setter functions for commission wallet addresses\r\n\tfunction setCommissionWallet(address payable newCommissionWallet) public onlyOwner {\r\n    require(newCommissionWallet != address(0), \"Invalid address\");\r\n    commissionWallet = newCommissionWallet;\r\n\t}\r\n\r\n\tfunction setCommissionWallet2(address payable newCommissionWallet) public onlyOwner {\r\n    require(newCommissionWallet != address(0), \"Invalid address\");\r\n    commissionWallet2 = newCommissionWallet;\r\n\t}\r\n\r\n\tfunction setCommissionWallet3(address payable newCommissionWallet) public onlyOwner {\r\n    require(newCommissionWallet != address(0), \"Invalid address\");\r\n    commissionWallet3 = newCommissionWallet;\r\n\t}\r\n\t\r\n\tconstructor(address tokenAddr, address payable wallet, address payable wallet2, address payable wallet3, uint256 start) public {\r\n    require(!isContract(wallet) && isContract(tokenAddr), \"Wrong Requirement\");\r\n    token = IERC20(tokenAddr); // 0x55d398326f99059fF775485246999027B3197955\r\n    commissionWallet = wallet;\r\n    commissionWallet2 = wallet2;\r\n    commissionWallet3 = wallet3;\r\n    owner = msg.sender;\r\n\r\n\t\tif(start>0){\r\n            startDate = start;\r\n        }\r\n        else{\r\n            startDate = block.timestamp;\r\n        }\r\n\r\n        plans.push(Plan(100, 288));\r\n        plans.push(Plan(100, 408));\r\n\t\tplans.push(Plan(100, 504));\r\n        plans.push(Plan(100, 600));\r\n\t}\r\n\r\n\tfunction getAllowance(address userAddress) public view returns(uint256) {\r\n\t\treturn token.allowance(userAddress, address(this));\r\n\t}\r\n\r\n\tfunction invest(address referrer, uint8 plan) public {\r\n    require(block.timestamp > startDate, \"Contract does not launch yet\");\r\n    uint256 value;\r\n    uint256 rent;\r\n    uint256 total_value;\r\n\r\n    if (plan == 0) {\r\n        value = 10 ether;\r\n        rent = 5 ether;\r\n    } else if (plan == 1) {\r\n        value = 25 ether;\r\n        rent = 6 ether;\r\n    } else if (plan == 2) {\r\n        value = 50 ether;\r\n        rent = 8 ether;\r\n    } else if (plan == 3) {\r\n        value = 100 ether;\r\n        rent = 10 ether;\r\n    } else {\r\n        revert(\"Invalid plan\");\r\n    }\r\n    total_value = value.add(rent);\r\n\r\n    require(token.balanceOf(msg.sender) >= total_value, \"Insufficient token balance\");\r\n    require(total_value <= token.allowance(msg.sender, address(this)), \"Approve token before transferring\");\r\n    token.safeTransferFrom(msg.sender, address(this), total_value);\r\n\r\n    uint256 commission = rent.mul(2).div(100);  // Calculate 2% commission\r\n\r\n    token.safeTransfer(commissionWallet, commission);  // Send 2% commission to commissionWallet\r\n    token.safeTransfer(commissionWallet2, commission); // Send 2% commission to commissionWallet2\r\n    token.safeTransfer(commissionWallet3, commission); // Send 2% commission to commissionWallet3\r\n\r\n    emit FeePayed(msg.sender, rent);\r\n\r\n    User storage user = users[msg.sender];\r\n\r\n    if (user.referrer == address(0)) {\r\n        if (referrer != msg.sender) {\r\n            user.referrer = referrer;\r\n        }\r\n\r\n        address upline = user.referrer;\r\n        for (uint256 i = 0; i < 7; i++) {\r\n            if (upline != address(0)) {\r\n                users[upline].levels[i] = users[upline].levels[i].add(1);\r\n                upline = users[upline].referrer;\r\n            } else break;\r\n        }\r\n    }\r\n\r\n    if (user.deposits.length == 0) {\r\n        emit Newbie(msg.sender);\r\n    }\r\n\r\n    user.deposits.push(Deposit(plan, value, block.timestamp));\r\n\r\n    totalInvested = totalInvested.add(value);\r\n\r\n    emit NewDeposit(msg.sender, plan, value);\r\n}\r\n\r\n\r\n\tfunction withdraw() public {\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\trequire(user.checkpoint.add(TIME_STEP) < block.timestamp, \"Withdrawal only once a day\");\r\n\t\tuint256 totalAmount = getUserDividends(msg.sender);\r\n\t\trequire(totalAmount >= 5 ether, \"Minimum 5\");\r\n\r\n\t\tif(totalAmount > 5000 ether) {\r\n\t\t\ttotalAmount = 5000 ether;\r\n\t\t}\r\n\r\n\t\tuint256 contractBalance = token.balanceOf(address(this));\r\n\t\tif (contractBalance < totalAmount) {\r\n\t\t\ttotalAmount = contractBalance;\r\n\t\t}\r\n\r\n\t\tuser.checkpoint = block.timestamp;\r\n\t\tuser.withdrawn = user.withdrawn.add(totalAmount);\r\n\r\n\t\tuint256 totalAmount_deducted = totalAmount.sub(totalAmount.mul(1000).div(PERCENTS_DIVIDER));\r\n\t\ttoken.safeTransfer(msg.sender, totalAmount_deducted);\r\n\t\tuint256 system_fee = totalAmount.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\r\n        uint256 system_fee2 = totalAmount.mul(PROJECT_FEE2).div(PERCENTS_DIVIDER);\r\n        uint256 system_fee3 = totalAmount.mul(PROJECT_FEE3).div(PERCENTS_DIVIDER);\r\n\t\ttoken.safeTransfer(commissionWallet, system_fee);\r\n        token.safeTransfer(commissionWallet2, system_fee2);\r\n        token.safeTransfer(commissionWallet3, system_fee3);\r\n\t\temit Withdrawn(msg.sender, totalAmount);\r\n\r\n\t\tif (user.referrer != address(0)) {\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 7; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tuint256 amount = totalAmount.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\tusers[upline].totalBonus = users[upline].totalBonus.add(amount);\r\n\t\t\t\t\ttoken.safeTransfer(upline, amount);\r\n\t\t\t\t\temit RefBonus(upline, msg.sender, i, amount);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn token.balanceOf(address(this));\r\n\t}\r\n\r\n\tfunction getPlanInfo(uint8 plan) public view returns(uint256 time, uint256 percent) {\r\n\t\ttime = plans[plan].time;\r\n\t\tpercent = plans[plan].percent;\r\n\t}\r\n\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 totalAmount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tuint256 finish = user.deposits[i].start.add(plans[user.deposits[i].plan].time.mul(1 days));\r\n\t\t\tif (user.checkpoint < finish) {\r\n\t\t\t\tuint256 share = user.deposits[i].amount.mul(plans[user.deposits[i].plan].percent).div(PERCENTS_DIVIDER);\r\n\t\t\t\tuint256 from = user.deposits[i].start > user.checkpoint ? user.deposits[i].start : user.checkpoint;\r\n\t\t\t\tuint256 to = finish < block.timestamp ? finish : block.timestamp;\r\n\t\t\t\tif (from < to) {\r\n\t\t\t\t\ttotalAmount = totalAmount.add(share.mul(to.sub(from)).div(TIME_STEP));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn totalAmount;\r\n\t}\r\n\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns (uint256) {\r\n\t\treturn users[userAddress].withdrawn;\r\n\t}\r\n\r\n\tfunction getUserCheckpoint(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].checkpoint;\r\n\t}\r\n\r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t}\r\n\r\n\tfunction getUserDownlineCount(address userAddress) public view returns(uint256[7] memory referrals) {\r\n\t\treturn (users[userAddress].levels);\r\n\t}\r\n\r\n\tfunction getUserTotalReferrals(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].levels[0]+users[userAddress].levels[1]+users[userAddress].levels[2]+users[userAddress].levels[3]+users[userAddress].levels[4]+users[userAddress].levels[5]+users[userAddress].levels[6];\r\n\t}\r\n\r\n\tfunction getUserReferralTotalBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus;\r\n\t}\r\n\r\n\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\r\n\t\treturn getUserDividends(userAddress);\r\n\t}\r\n\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {\r\n\t\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n\t\t\tamount = amount.add(users[userAddress].deposits[i].amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint8 plan, uint256 percent, uint256 amount, uint256 start, uint256 finish) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tplan = user.deposits[index].plan;\r\n\t\tpercent = plans[plan].percent;\r\n\t\tamount = user.deposits[index].amount;\r\n\t\tstart = user.deposits[index].start;\r\n\t\tfinish = user.deposits[index].start.add(plans[user.deposits[index].plan].time.mul(1 days));\r\n\t}\r\n\r\n\tfunction getSiteInfo() public view returns(uint256 _totalInvested, uint256 _totalBonus) {\r\n\t\treturn(totalInvested, totalInvested.mul(TOTAL_REF).div(PERCENTS_DIVIDER));\r\n\t}\r\n\r\n\tfunction getUserInfo(address userAddress) public view returns(uint256 availableBalance, uint256 depositLength, uint256 totalDeposit, uint256 totalWithdrawn, uint256 totalReferrals, uint256 totalBonus) {\r\n\t\treturn(getUserAvailable(userAddress), getUserAmountOfDeposits(userAddress), getUserTotalDeposits(userAddress), getUserTotalWithdrawn(userAddress), getUserTotalReferrals(userAddress), getUserReferralTotalBonus(userAddress));\r\n\t}\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n     //rescue token accidentally sent to the contract\r\n     function rescueBNB(address payable recipient, uint256 amount) public onlyOwner {\r\n    require(recipient != address(0), \"Invalid recipient address\");\r\n    require(amount > 0, \"Amount must be greater than zero\");\r\n    require(address(this).balance >= amount, \"Insufficient contract balance\");\r\n\r\n    recipient.transfer(amount);\r\n    }\r\n\r\n    // Function to rescue accidentally sent ERC-20 tokens\r\n    function rescueERC20(address tokenAddress, address recipient, uint256 amount) public onlyOwner {\r\n        require(tokenAddress != address(0), \"Invalid token address\");\r\n        require(recipient != address(0), \"Invalid recipient address\");\r\n        require(amount > 0, \"Amount must be greater than zero\");\r\n\r\n        IERC20 erc20Token = IERC20(tokenAddress); // Use a different name for the local variable\r\n        uint256 contractBalance = erc20Token.balanceOf(address(this));\r\n\r\n        require(contractBalance >= amount, \"Insufficient token balance\");\r\n\r\n        erc20Token.safeTransfer(recipient, amount);\r\n    }\r\n\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"name\":\"referrals\",\"type\":\"uint256[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionWallet2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionWallet3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_REF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"name\":\"_totalInvested\",\"type\":\"uint256\"},{\"name\":\"_totalBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"availableBalance\",\"type\":\"uint256\"},{\"name\":\"depositLength\",\"type\":\"uint256\"},{\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"name\":\"totalReferrals\",\"type\":\"uint256\"},{\"name\":\"totalBonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCommissionWallet\",\"type\":\"address\"}],\"name\":\"setCommissionWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_FEE2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"name\":\"plan\",\"type\":\"uint8\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCommissionWallet\",\"type\":\"address\"}],\"name\":\"setCommissionWallet3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_FEE3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCommissionWallet\",\"type\":\"address\"}],\"name\":\"setCommissionWallet2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"wallet2\",\"type\":\"address\"},{\"name\":\"wallet3\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"}]", "ContractName": "PlanetCity", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000063d2417fbb8ea156e08c4d5d9ba79f761cd32dd200000000000000000000000063d2417fbb8ea156e08c4d5d9ba79f761cd32dd200000000000000000000000063d2417fbb8ea156e08c4d5d9ba79f761cd32dd200000000000000000000000000000000000000000000000000000000651e67ad", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://136145982d5977ca03ab2be2ff78fa5397f82d35692057eef425c0976ecbd246"}