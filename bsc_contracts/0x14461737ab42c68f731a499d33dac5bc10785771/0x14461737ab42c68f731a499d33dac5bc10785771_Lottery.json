{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with 'using Counters for Counters.Counter;'\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract Lottery is Ownable {\r\n    using Counters for Counters.Counter;\r\n  \r\n    // Lottery data\r\n    struct LotteryData {\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint8 tax;\r\n        uint256 minTicketAmount;\r\n        uint256 totalCollected; \r\n    }\r\n\r\n    // Lottery ticket\r\n    struct Ticket {\r\n        uint256 lotteryId;\r\n        uint256 amount;\r\n    }\r\n\r\n    mapping(uint lotteryId => LotteryData) private lotteries;\r\n    mapping(address player => Ticket) private tickets;\r\n    mapping(uint lotteryId => address[]) private winners;\r\n\r\n    Counters.Counter public lotteryId;\r\n    IERC20 public lotteryToken;\r\n    address[] private _currentPlayers; // players in the current lottery\r\n    uint256[5] private _blockTracker;\r\n    uint private _currentBlockTrackerIndex;\r\n\r\n    // admin configurable variables\r\n    uint256 public roundDuration;\r\n    uint256 public minTicketAmount;\r\n    uint8 public tax;\r\n    address public feeAddress;\r\n\r\n    event NewLottery(uint256 lotteryId, uint256 endTime, uint256 minTicketAmount, uint8 tax);\r\n    event NewTicket(address indexed player, uint256 lotteryId, uint256 amount);\r\n    event TicketWithdrawn(address indexed player, uint256 amount);\r\n\r\n    constructor(address _lotteryToken, address _feeAddress) {\r\n        lotteryToken = IERC20(_lotteryToken);\r\n        feeAddress = _feeAddress;\r\n        tax = 1; // 1%\r\n        minTicketAmount = 1000e18;\r\n        roundDuration = 4 weeks;\r\n        _currentBlockTrackerIndex = 0;\r\n    }\r\n    /* \r\n    * Admin functions\r\n    */\r\n    function setFeeAddress(address _feeAddress) external onlyOwner {\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    function setTax(uint8 _tax) external onlyOwner {\r\n        tax = _tax;\r\n    }\r\n\r\n    function setMinTicketAmount(uint256 _minTicketAmount) external onlyOwner {\r\n        minTicketAmount = _minTicketAmount;\r\n    }\r\n\r\n    function setRoundDuration(uint256 _roundDuration) external onlyOwner {\r\n        roundDuration = _roundDuration;\r\n    }\r\n\r\n    function createLottery() external onlyOwner {\r\n        require(!lotteryIsActive(), \"Active lottery\");\r\n        require(\r\n            winners[lotteryId.current()].length > 0 || _currentPlayers.length == 0,\r\n            \"Call findWinners() before creating new lottery\"\r\n        );\r\n        lotteryId.increment();\r\n        uint256 _endTime = block.timestamp + roundDuration;\r\n        lotteries[lotteryId.current()] = LotteryData({\r\n            startTime: block.timestamp,\r\n            endTime: _endTime,\r\n            tax: tax,\r\n            minTicketAmount: minTicketAmount,\r\n            totalCollected: 0\r\n        });\r\n        // reset players\r\n        delete _currentPlayers;\r\n        emit NewLottery(lotteryId.current(), _endTime, minTicketAmount, tax);\r\n    }\r\n\r\n    function findWinners() external onlyOwner {\r\n        require(!lotteryIsActive(), \"Lottery is active\");\r\n        require(winners[lotteryId.current()].length == 0, \"Winners already found\");\r\n    \r\n        if (_currentPlayers.length < 3) {\r\n            winners[lotteryId.current()] = _currentPlayers;\r\n        } else {\r\n            uint256 chunk = _currentPlayers.length / 3;\r\n            uint256 randomIndex1 = _random(0, chunk);\r\n            uint256 randomIndex2 = _random(chunk, chunk * 2);\r\n            uint256 randomIndex3 = _random(chunk * 2, _currentPlayers.length);\r\n            winners[lotteryId.current()] = [_currentPlayers[randomIndex1], _currentPlayers[randomIndex2], _currentPlayers[randomIndex3]];\r\n        }\r\n    }\r\n\r\n    /* \r\n    * Private functions\r\n    */\r\n    function _random(uint256 _min, uint256 _max) private view returns (uint256) {\r\n        require(_min < _max, \"Invalid range\");\r\n        return (uint256(keccak256(abi.encodePacked(_min, _max, block.prevrandao, block.timestamp, _currentPlayers))) % (_max - _min)) + _min;\r\n    }\r\n\r\n    function _play(address _player, uint256 _amount) internal {\r\n        // deduct and transfer tax\r\n        uint256 _tax = _amount * lotteries[lotteryId.current()].tax / 100;\r\n        lotteryToken.transfer(feeAddress, _tax);\r\n\r\n        tickets[_player].amount = _amount - _tax;\r\n        tickets[_player].lotteryId = lotteryId.current();\r\n        lotteries[lotteryId.current()].totalCollected += _amount;\r\n        _currentPlayers.push(_player);\r\n        emit NewTicket(_player, lotteryId.current(), _amount);\r\n    }\r\n\r\n    /* \r\n    * Public functions\r\n    */\r\n    function getWinners(uint _lotteryId) external view returns (address[] memory) {\r\n        return winners[_lotteryId];\r\n    }\r\n\r\n    function getLottery(uint _lotteryId) external view returns (LotteryData memory) {\r\n        return lotteries[_lotteryId];\r\n    }\r\n\r\n    function getTicket(address _player) external view returns (Ticket memory) {\r\n        return tickets[_player];\r\n    }\r\n    \r\n    function lotteryIsActive() public view returns (bool) {\r\n        return lotteries[lotteryId.current()].endTime > block.timestamp;\r\n    }\r\n\r\n    function currentLottory() public view returns (LotteryData memory) {\r\n        return lotteries[lotteryId.current()];\r\n    }\r\n\r\n    // Join the current lottery\r\n    function play(uint256 amount) external {\r\n        require(lotteryIsActive(), \"Lottery is not active\");\r\n\r\n        address _player = _msgSender();\r\n        require(tickets[_player].lotteryId != lotteryId.current(), \"Already played\");\r\n        require(amount >= lotteries[lotteryId.current()].minTicketAmount, \"Amount is less than min ticket amount\");\r\n        \r\n        uint256 previousBalance = lotteryToken.balanceOf(address(this));\r\n        require(lotteryToken.transferFrom(_player, address(this), amount), \"Transfer failed\");\r\n        require(lotteryToken.balanceOf(address(this)) >= previousBalance + amount, \"Balance is not correct\");\r\n        // add existing tickets if any\r\n        _play(_player, amount + tickets[_player].amount);\r\n\r\n        // blocktracker\r\n        _blockTracker[_currentBlockTrackerIndex] = block.number;\r\n        _currentBlockTrackerIndex = (_currentBlockTrackerIndex + 1) % 5; // Update index circularly\r\n    }\r\n\r\n    // Transfer from a previous lottery to the current lottery\r\n    function transferTicket() external {\r\n        address _player = _msgSender();\r\n        Ticket memory _ticket = tickets[_player];\r\n        require(\r\n            _ticket.lotteryId != lotteryId.current() && lotteryIsActive(), \r\n            \"Same lottery or lottery is not active\"\r\n        );\r\n        require(_ticket.amount > lotteries[lotteryId.current()].minTicketAmount, \"Amount is less than min ticket amount\");\r\n        _play(_player, _ticket.amount);\r\n    }\r\n\r\n    // Player withdraws their ticket\r\n    function withdrawTicket() external {\r\n        address _player = _msgSender();\r\n        Ticket memory _ticket = tickets[_player];\r\n        require(\r\n            _ticket.lotteryId != lotteryId.current() || !lotteryIsActive(), \r\n            \"Lottery is not finished\"\r\n        );\r\n        require(_ticket.amount > 0, \"Zero ticket\");\r\n        require(lotteryToken.transfer(_player, _ticket.amount), \"Transfer failed\");\r\n        \r\n        delete tickets[_player];\r\n        emit TicketWithdrawn(_player, _ticket.amount);\r\n    }\r\n\r\n    function getBlockTracker() public view returns (uint256[5] memory) {\r\n        return _blockTracker;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotteryToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTicketAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tax\",\"type\":\"uint8\"}],\"name\":\"NewLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TicketWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"createLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLottory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tax\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minTicketAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollected\",\"type\":\"uint256\"}],\"internalType\":\"struct Lottery.LotteryData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"findWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTracker\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"getLottery\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tax\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minTicketAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollected\",\"type\":\"uint256\"}],\"internalType\":\"struct Lottery.LotteryData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getTicket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Lottery.Ticket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTicketAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTicketAmount\",\"type\":\"uint256\"}],\"name\":\"setMinTicketAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundDuration\",\"type\":\"uint256\"}],\"name\":\"setRoundDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tax\",\"type\":\"uint8\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lottery", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000893ae1fdf21ad92e54fcb97f3a87f47f8ecec2e6000000000000000000000000a09e3b73d5d3b23e1af227f7fda77e7c4bcbd5b2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://550958aed5b19ea00715bdf6d09e5a96c07b42fdb8908aab2809d89a7aacab42"}