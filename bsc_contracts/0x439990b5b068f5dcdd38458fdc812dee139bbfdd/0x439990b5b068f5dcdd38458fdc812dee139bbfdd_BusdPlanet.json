{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"BUSDPlanet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./ERC1363.sol\\\";\\r\\nimport \\\"./ERC2612.sol\\\";\\r\\nimport \\\"./ERC20Burnable.sol\\\";\\r\\nimport \\\"./ERC20TokenRecover.sol\\\";\\r\\nimport \\\"./IDEXRouter.sol\\\";\\r\\nimport \\\"./IDEXFactory.sol\\\";\\r\\nimport \\\"./IDEXPair.sol\\\";\\r\\nimport \\\"./IBUSDPlanet.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./IBUSDPlanetDividendTracker.sol\\\";\\r\\n\\r\\n\\r\\ncontract BusdPlanet is ERC20, ERC1363, ERC2612, ERC20Burnable, ERC20TokenRecover, IBUSDPlanet {\\r\\n    \\r\\n\\r\\n    mapping(address =\\u003e bool) public override dexRouters;\\r\\n    // store addresses that are automatic market maker (dex) pairs. Any transfer *to* these addresses\\r\\n    // could be subject to a maximum transfer amount\\r\\n    mapping(address =\\u003e bool) public override automatedMarketMakerPairs;\\r\\n\\r\\n    IDEXRouter public override defaultDexRouter;\\r\\n    address public override defaultPair;\\r\\n    \\r\\n\\r\\n    address public immutable override BUSD; \\r\\n    address public override marketingWallet;\\r\\n    address public override liquidityWallet;\\r\\n    address public override buyBackWallet;\\r\\n    address public override charityWallet;\\r\\n    IBusdPlanetDividendTracker public override dividendTracker;\\r\\n\\r\\n    bool public override transfersEnabled = false;\\r\\n    bool private isSwappingFees;\\r\\n\\r\\n    // Supply and amounts\\r\\n    // 10 millions (this will also be the total supply as there is not public mint function)\\r\\n    uint256 private _startSupply = 10000000 * (10**18);\\r\\n    uint256 public override swapTokensAtAmount = 2400 * (10**18);\\r\\n    uint256 public override maxWalletToken =  200000 * (10**18); // 2% of total supply\\r\\n\\r\\n    // fees (from a total of 10000)\\r\\n    uint256 public override buyFeesCollected = 0;\\r\\n    uint256 public override buyDividendFee = 600;\\r\\n    uint256 public override buyLiquidityFee = 200;\\r\\n    uint256 public override buyMarketingFee = 200;\\r\\n    uint256 public override buyBuybackFee = 100;\\r\\n    uint256 public override buyCharityFee = 100;\\r\\n    uint256 public override buyTotalFees = buyDividendFee + buyLiquidityFee + buyMarketingFee + buyBuybackFee + buyCharityFee;\\r\\n\\r\\n    uint256 public override sellFeesCollected = 0;\\r\\n    uint256 public override sellDividendFee = 600;\\r\\n    uint256 public override sellLiquidityFee = 200;\\r\\n    uint256 public override sellMarketingFee = 200;\\r\\n    uint256 public override sellBuybackFee = 100;\\r\\n    uint256 public override sellCharityFee = 100;\\r\\n    uint256 public override sellTotalFees = sellDividendFee + sellLiquidityFee + sellMarketingFee + sellBuybackFee + sellCharityFee;\\r\\n\\r\\n    // use by default 300,000 gas to process auto-claiming dividends\\r\\n    uint256 public override gasForProcessing = 300000;\\r\\n\\r\\n    // white listed adresses (excluded from fees and dividends)\\r\\n    // these addresses can also make transfers before presale is over\\r\\n    mapping(address =\\u003e bool) public override whitelistedAddresses;\\r\\n\\r\\n    // exlcude from fees and max transaction amount\\r\\n    mapping(address =\\u003e bool) private _isExcludedFromFees;\\r\\n\\r\\n    bool private nameChanged = false;\\r\\n\\r\\n    constructor(\\r\\n        address _routerAddress,\\r\\n        address _busd,\\r\\n        address _marketingWallet,\\r\\n        address _buyBackWallet,\\r\\n        address _charityWallet \\r\\n    ) ERC2612(\\\"BusdPlanet\\\", \\\"BPT\\\") {\\r\\n        IDEXRouter _dexRouter = IDEXRouter(_routerAddress);\\r\\n        BUSD = _busd;\\r\\n        marketingWallet = _marketingWallet;\\r\\n        liquidityWallet = owner();\\r\\n        charityWallet = _charityWallet;\\r\\n        buyBackWallet = _buyBackWallet;\\r\\n\\r\\n        defaultDexRouter = _dexRouter;\\r\\n        dexRouters[_routerAddress] = true;\\r\\n        defaultPair = IDEXFactory(_dexRouter.factory()).createPair(address(this), _dexRouter.WETH());\\r\\n        \\r\\n        _setAutomatedMarketMakerPair(defaultPair, true);\\r\\n        //_mint is an internal function in ERC20.sol that is only called here, and CANNOT be called ever again\\r\\n        _mint(owner(), _startSupply);\\r\\n    }\\r\\n\\r\\n    function initializeDividendTracker(IBusdPlanetDividendTracker _dividendTracker) external override onlyOwner {\\r\\n        require(address(dividendTracker) == address(0), \\\"BUSDPlanet: Dividend tracker already initialized\\\");\\r\\n        dividendTracker = _dividendTracker;\\r\\n\\r\\n        // exclude from receiving dividends\\r\\n        dividendTracker.excludeFromDividends(address(defaultPair));\\r\\n        dividendTracker.excludeFromDividends(address(dividendTracker));\\r\\n        dividendTracker.excludeFromDividends(address(defaultDexRouter));\\r\\n\\r\\n        // whitlist wallets f.e. owner wallet to send tokens before presales are over\\r\\n        setWhitelistAddress(address(this), true);\\r\\n        setWhitelistAddress(owner(), true);\\r\\n        setWhitelistAddress(marketingWallet, true);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    //== BEP20 owner function ==\\r\\n    function getOwner() public view override returns (address) {\\r\\n        return owner();\\r\\n    }\\r\\n\\r\\n    function updateNameAndSymbol(string memory name_, string memory symbol_) external onlyOwner {\\r\\n        require(!nameChanged, \\\"BUSDPlanet: Name already changed\\\");\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        nameChanged = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1363, ERC2612) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\r\\n        public\\r\\n        override(ERC20TokenRecover, IERC20TokenRecover)\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(tokenAddress != address(this), \\\"Cannot retrieve BUSDPlanets\\\");\\r\\n        super.recoverERC20(tokenAddress, tokenAmount);\\r\\n    }\\r\\n\\r\\n    function setWhitelistAddress(address _whitelistAddress, bool whitelisted) public override onlyOwner {\\r\\n        whitelistedAddresses[_whitelistAddress] = whitelisted;\\r\\n        excludeFromFees(_whitelistAddress, whitelisted);\\r\\n        if (whitelisted) {\\r\\n            dividendTracker.excludeFromDividends(_whitelistAddress);\\r\\n        } else {\\r\\n            dividendTracker.includeInDividends(_whitelistAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateDividendTracker(address newAddress) external override onlyOwner {\\r\\n        require(newAddress != address(0), \\\"BUSDPlanet: Dividend tracker not yet initialized\\\");\\r\\n        require(newAddress != address(dividendTracker), \\\"BUSDPlanet: The dividend tracker already has that address\\\");\\r\\n\\r\\n        IBusdPlanetDividendTracker newDividendTracker = IBusdPlanetDividendTracker(payable(newAddress));\\r\\n        require(\\r\\n            newDividendTracker.getOwner() == address(this),\\r\\n            \\\"BUSDPlanet: The new dividend tracker must be owned by the BUSDPlanet token contract\\\"\\r\\n        );\\r\\n\\r\\n        setWhitelistAddress(address(newDividendTracker), true);\\r\\n        dividendTracker = newDividendTracker;\\r\\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\\r\\n    }\\r\\n\\r\\n    function addNewRouter(address _router, bool makeDefault) external override onlyOwner {\\r\\n        dexRouters[_router] = true;\\r\\n        dividendTracker.excludeFromDividends(_router);\\r\\n\\r\\n        if (makeDefault) {\\r\\n            emit UpdateDefaultDexRouter(_router, address(defaultDexRouter));\\r\\n            defaultDexRouter = IDEXRouter(_router);\\r\\n            defaultPair = IDEXFactory(defaultDexRouter.factory()).createPair(address(this), defaultDexRouter.WETH());\\r\\n            _setAutomatedMarketMakerPair(defaultPair, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function excludeFromFees(address account, bool excluded) public override onlyOwner {\\r\\n        require(_isExcludedFromFees[account] != excluded, \\\"BUSDPlanet: Account is already the value of \\u0027excluded\\u0027\\\");\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) external override onlyOwner {\\r\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\r\\n            excludeFromFees(accounts[i], excluded);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value) external override onlyOwner {\\r\\n        require(\\r\\n            value || pair != defaultPair,\\r\\n            \\\"BUSDPlanet: The default pair cannot be removed from automatedMarketMakerPairs\\\"\\r\\n        );\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        require(\\r\\n            automatedMarketMakerPairs[pair] != value,\\r\\n            \\\"BUSDPlanet: Automated market maker pair is already set to that value\\\"\\r\\n        );\\r\\n\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n        if (value \\u0026\\u0026 address(dividendTracker) != address(0)) dividendTracker.excludeFromDividends(pair);\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function updateMinTokenBalance(uint256 minTokens) external override onlyOwner {\\r\\n        dividendTracker.updateMinTokenBalance(minTokens);\\r\\n    }\\r\\n\\r\\n    function updateMarketingWallet(address newMarketingWallet) external override onlyOwner {\\r\\n        require(newMarketingWallet != marketingWallet, \\\"BUSDPlanet: The marketing wallet is already this address\\\");\\r\\n        setWhitelistAddress(newMarketingWallet, true);\\r\\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\\r\\n        marketingWallet = newMarketingWallet;\\r\\n    }\\r\\n\\r\\n    function updateLiquidityWallet(address newLiquidityWallet) external override onlyOwner {\\r\\n        require(newLiquidityWallet != liquidityWallet, \\\"BUSDPlanet: The liquidity wallet is already this address\\\");\\r\\n        setWhitelistAddress(newLiquidityWallet, true);\\r\\n        emit LiquidityWalletUpdated(newLiquidityWallet, liquidityWallet);\\r\\n        liquidityWallet = newLiquidityWallet;\\r\\n    }\\r\\n\\r\\n    function updateBuyBackWallet(address newBuyBackWallet) external override onlyOwner {\\r\\n        require(newBuyBackWallet != buyBackWallet, \\\"BUSDPlanet: The liquidity wallet is already this address\\\");\\r\\n        setWhitelistAddress(newBuyBackWallet, true);\\r\\n        emit LiquidityWalletUpdated(newBuyBackWallet, buyBackWallet);\\r\\n        buyBackWallet = newBuyBackWallet;\\r\\n    }\\r\\n\\r\\n    function updateCharityWallet(address newCharityWallet) external override onlyOwner {\\r\\n        require(newCharityWallet != charityWallet, \\\"BUSDPlanet: The liquidity wallet is already this address\\\");\\r\\n        setWhitelistAddress(newCharityWallet, true);\\r\\n        emit LiquidityWalletUpdated(newCharityWallet, charityWallet);\\r\\n        charityWallet = newCharityWallet;\\r\\n    }\\r\\n\\r\\n    function updateGasForProcessing(uint256 newValue) external override onlyOwner {\\r\\n        require(\\r\\n            newValue \\u003e= 200000 \\u0026\\u0026 newValue \\u003c= 500000,\\r\\n            \\\"BUSDPlanet: gasForProcessing must be between 200,000 and 500,000\\\"\\r\\n        );\\r\\n        require(newValue != gasForProcessing, \\\"BUSDPlanet: Cannot update gasForProcessing to same value\\\");\\r\\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\\r\\n        gasForProcessing = newValue;\\r\\n    }\\r\\n\\r\\n    function updateClaimWait(uint256 claimWait) external override onlyOwner {\\r\\n        dividendTracker.updateClaimWait(claimWait);\\r\\n    }\\r\\n\\r\\n    function getClaimWait() external view override returns (uint256) {\\r\\n        return dividendTracker.claimWait();\\r\\n    }\\r\\n\\r\\n    function getTotalDividendsDistributed() external view override returns (uint256) {\\r\\n        return dividendTracker.totalDividendsDistributed();\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFees(address account) external view override returns (bool) {\\r\\n        return _isExcludedFromFees[account];\\r\\n    }\\r\\n\\r\\n    function withdrawableDividendOf(address account) external view override returns (uint256) {\\r\\n        return dividendTracker.withdrawableDividendOf(account);\\r\\n    }\\r\\n\\r\\n    function dividendTokenBalanceOf(address account) external view override returns (uint256) {\\r\\n        return dividendTracker.balanceOf(account);\\r\\n    }\\r\\n\\r\\n    function getAccountDividendsInfo(address account)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            address,\\r\\n            int256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return dividendTracker.getAccount(account);\\r\\n    }\\r\\n\\r\\n    function getAccountDividendsInfoAtIndex(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            address,\\r\\n            int256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        return dividendTracker.getAccountAtIndex(index);\\r\\n    }\\r\\n\\r\\n    function processDividendTracker(uint256 gas) external override {\\r\\n        (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\\r\\n        emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\\r\\n    }\\r\\n\\r\\n    function claim() external override {\\r\\n        dividendTracker.processAccount(payable(msg.sender), false);\\r\\n    }\\r\\n\\r\\n    function getLastProcessedIndex() external view override returns (uint256) {\\r\\n        return dividendTracker.getLastProcessedIndex();\\r\\n    }\\r\\n\\r\\n    function getNumberOfDividendTokenHolders() external view override returns (uint256) {\\r\\n        return dividendTracker.getNumberOfTokenHolders();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Enable or disable transfers, used before presale and on critical problems in or with the token contract\\r\\n     */\\r\\n    function setTransfersEnabled(bool enabled) external override onlyOwner {\\r\\n        transfersEnabled = enabled;\\r\\n    }\\r\\n\\r\\n    function updateBuyFees(\\r\\n        uint256 _dividendFee,\\r\\n        uint256 _liquidityFee,\\r\\n        uint256 _marketingFee,\\r\\n        uint256 _buyBackFee,\\r\\n        uint256 _charityFee\\r\\n    ) external override onlyOwner {\\r\\n        buyDividendFee = _dividendFee;\\r\\n        buyLiquidityFee = _liquidityFee;\\r\\n        buyMarketingFee = _marketingFee;\\r\\n        buyBuybackFee = _buyBackFee;\\r\\n        buyCharityFee = _charityFee;\\r\\n        buyTotalFees = buyDividendFee + buyLiquidityFee + buyMarketingFee + buyBuybackFee + buyCharityFee;\\r\\n        require(buyTotalFees \\u003c= 5000, \\\"Max fee  is 50%\\\");\\r\\n    }\\r\\n\\r\\n    function updateSellFees(\\r\\n        uint256 _dividendFee,\\r\\n        uint256 _liquidityFee,\\r\\n        uint256 _marketingFee,\\r\\n        uint256 _buyBackFee,\\r\\n        uint256 _charityFee\\r\\n    ) external override onlyOwner {\\r\\n        sellDividendFee = _dividendFee;\\r\\n        sellLiquidityFee = _liquidityFee;\\r\\n        sellMarketingFee = _marketingFee;\\r\\n        sellBuybackFee = _buyBackFee;\\r\\n        sellCharityFee = _charityFee;\\r\\n        sellTotalFees = sellDividendFee + sellLiquidityFee + sellMarketingFee + sellBuybackFee + sellCharityFee;\\r\\n        require(sellTotalFees \\u003c= 5000, \\\"Max fee is 50%\\\");\\r\\n    }\\r\\n\\r\\n    function updateSwapTokensAtAmount(uint256 _swapTokensAtAmount) external override onlyOwner {\\r\\n        require(_swapTokensAtAmount \\u003e 0, \\\"BUSDPlanet: Amount should be higher then 0\\\");\\r\\n        require(_swapTokensAtAmount \\u003c= 10 * (10**6) * (10**18), \\\"BUSDPlanet: Max should be at 10%\\\");\\r\\n        swapTokensAtAmount = _swapTokensAtAmount;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        // when NOT from or to owner, to burn address or to dex pair\\r\\n        // check if target wallet exeeds the maxWalletPAirs\\r\\n        if (\\r\\n            from != owner() \\u0026\\u0026\\r\\n            to != owner() \\u0026\\u0026\\r\\n            to != address(0) \\u0026\\u0026\\r\\n            to != 0x000000000000000000000000000000000000dEaD \\u0026\\u0026\\r\\n            !automatedMarketMakerPairs[to]\\r\\n        ) {\\r\\n            uint256 contractBalanceRecepient = balanceOf(to);\\r\\n            require(\\r\\n                contractBalanceRecepient + amount \\u003c= maxWalletToken,\\r\\n                \\\"BUSDPlanet: Exceeds maximum wallet token amount.\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // only whitelisted addresses can make transfers when transfers are disabled\\r\\n        if (!transfersEnabled) {\\r\\n            require(whitelistedAddresses[from], \\\"BUSDPlanet: Transfering is disabled\\\");\\r\\n        }\\r\\n\\r\\n        if (amount == 0) {\\r\\n            super._transfer(from, to, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 senderBalance = balanceOf(from);\\r\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\r\\n        // take fee\\r\\n        amount = collectFees(from, to, amount);\\r\\n\\r\\n        if (address(dividendTracker) != address(0)) {\\r\\n            try dividendTracker.setBalance(payable(from), balanceOf(from) - amount) {} catch {}\\r\\n            try dividendTracker.setBalance(payable(to), balanceOf(to) + amount) {} catch {}\\r\\n        }\\r\\n\\r\\n        // swap fees before transfer has happened and after dividend balances are done\\r\\n        swapFeesIfAmountIsReached(from, to);\\r\\n\\r\\n        super._transfer(from, to, amount);\\r\\n\\r\\n        if (address(dividendTracker) != address(0) \\u0026\\u0026 !isSwappingFees) {\\r\\n            uint256 gas = gasForProcessing;\\r\\n\\r\\n            try dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\\r\\n                emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\\r\\n            } catch {}\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function collectFees(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private returns (uint256) {\\r\\n        if (!isSwappingFees \\u0026\\u0026 !_isExcludedFromFees[from] \\u0026\\u0026 !_isExcludedFromFees[to]) {\\r\\n            uint256 fees;\\r\\n            if (automatedMarketMakerPairs[from]) {\\r\\n                fees = (amount * buyTotalFees) / 10000;\\r\\n                buyFeesCollected += fees;\\r\\n            } else if (automatedMarketMakerPairs[to]) {\\r\\n                fees = (amount * sellTotalFees) / 10000;\\r\\n                sellFeesCollected += fees;\\r\\n            }\\r\\n\\r\\n            amount = amount - fees;\\r\\n            super._transfer(from, address(this), fees);\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function swapFeesIfAmountIsReached(address from, address to) private {\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        \\r\\n        if (\\r\\n            contractTokenBalance \\u003e= swapTokensAtAmount \\u0026\\u0026\\r\\n            !isSwappingFees \\u0026\\u0026\\r\\n            !automatedMarketMakerPairs[from] \\u0026\\u0026 // do not swap fees on buys\\r\\n            from != liquidityWallet \\u0026\\u0026\\r\\n            to != liquidityWallet\\r\\n        ) {\\r\\n            isSwappingFees = true;\\r\\n\\r\\n            buyFeesCollected = (contractTokenBalance / (buyFeesCollected + sellFeesCollected)) * buyFeesCollected;\\r\\n            sellFeesCollected = contractTokenBalance - buyFeesCollected;\\r\\n\\r\\n            uint256 marketingTokens = (buyFeesCollected * buyMarketingFee) / buyTotalFees;\\r\\n            marketingTokens += (sellFeesCollected * sellMarketingFee) / sellTotalFees;\\r\\n            if (marketingTokens \\u003e 0) swapAndSendToFeeMarketing(marketingTokens);\\r\\n\\r\\n            uint256 buyBackTokens = (buyFeesCollected * buyBuybackFee) / buyTotalFees;\\r\\n            buyBackTokens += (sellFeesCollected * sellBuybackFee) / sellTotalFees;\\r\\n            if (buyBackTokens \\u003e 0) swapAndSendToFeeBuyBack(buyBackTokens);\\r\\n\\r\\n            uint256 charityTokens = (buyFeesCollected * buyCharityFee) / buyTotalFees;\\r\\n            charityTokens += (sellFeesCollected * sellCharityFee) / sellTotalFees;\\r\\n            if (charityTokens \\u003e 0) swapAndSendToFeeCharity(charityTokens);\\r\\n\\r\\n            uint256 swapTokens = (buyFeesCollected * buyLiquidityFee) / buyTotalFees;\\r\\n            swapTokens = (sellFeesCollected * sellLiquidityFee) / sellTotalFees;\\r\\n            if (swapTokens \\u003e 0) swapAndLiquify(swapTokens);\\r\\n\\r\\n            uint256 sellTokens = balanceOf(address(this));\\r\\n            if (sellTokens \\u003e 0) swapAndSendDividends(sellTokens);\\r\\n\\r\\n            buyFeesCollected = 0;\\r\\n            sellFeesCollected = 0;\\r\\n\\r\\n            isSwappingFees = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapAndSendToFeeMarketing(uint256 tokens) private {\\r\\n        uint256 initialBNBBalance = address(this).balance;\\r\\n        swapTokensForEth(tokens);\\r\\n        uint256 newBNBBalance = address(this).balance - initialBNBBalance;\\r\\n        payable(marketingWallet).transfer(newBNBBalance);\\r\\n    }\\r\\n\\r\\n    function swapAndSendToFeeBuyBack(uint256 tokens) private {\\r\\n        uint256 initialBNBBalance = address(this).balance;\\r\\n        swapTokensForEth(tokens);\\r\\n        uint256 newBNBBalance = address(this).balance - initialBNBBalance;\\r\\n        payable(buyBackWallet).transfer(newBNBBalance);\\r\\n    }\\r\\n\\r\\n    function swapAndSendToFeeCharity(uint256 tokens) private {\\r\\n        uint256 initialBNBBalance = address(this).balance;\\r\\n        swapTokensForEth(tokens);\\r\\n        uint256 newBNBBalance = address(this).balance - initialBNBBalance;\\r\\n        payable(charityWallet).transfer(newBNBBalance);\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 tokens) private {\\r\\n        // split the contract balance into halves\\r\\n        uint256 half = tokens / 2;\\r\\n        uint256 otherHalf = tokens - half;\\r\\n\\r\\n        // capture the contract\\u0027s current ETH balance.\\r\\n        // this is so that we can capture exactly the amount of ETH that the\\r\\n        // swap creates, and not make the liquidity event include any ETH that\\r\\n        // has been manually sent to the contract\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        // swap tokens for ETH\\r\\n        swapTokensForEth(half); // \\u003c- this breaks the ETH -\\u003e HATE swap when swap+liquify is triggered\\r\\n\\r\\n        // how much ETH did we just swap into?\\r\\n        uint256 newBalance = address(this).balance - initialBalance;\\r\\n\\r\\n        // add liquidity to uniswap\\r\\n        addLiquidity(otherHalf, newBalance);\\r\\n\\r\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the uniswap pair path of token -\\u003e weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = defaultDexRouter.WETH();\\r\\n\\r\\n        _approve(address(this), address(defaultDexRouter), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        defaultDexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(defaultDexRouter), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        defaultDexRouter.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            liquidityWallet,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapAndSendDividends(uint256 tokens) private {\\r\\n        swapTokensForBUSD(tokens, address(this));\\r\\n        uint256 dividends = IERC20(BUSD).balanceOf(address(this));\\r\\n        bool success = IERC20(BUSD).transfer(address(dividendTracker), dividends);\\r\\n\\r\\n        if (success) {\\r\\n            dividendTracker.distributeDividends(dividends);\\r\\n            emit SendDividends(tokens, dividends);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapTokensForBUSD(uint256 tokenAmount, address recipient) private {\\r\\n        // generate the uniswap pair path of weth -\\u003e BUSD\\r\\n        address[] memory path = new address[](3);\\r\\n        path[0] = address(this);\\r\\n        path[1] = defaultDexRouter.WETH();\\r\\n        path[2] = BUSD;\\r\\n\\r\\n        _approve(address(this), address(defaultDexRouter), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        defaultDexRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of BUSD\\r\\n            path,\\r\\n            recipient,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"ERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./ERC165.sol\\\";\\r\\n\\r\\nimport \\\"./IERC1363.sol\\\";\\r\\nimport \\\"./IERC1363Receiver.sol\\\";\\r\\nimport \\\"./IERC1363Spender.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC1363\\r\\n * @author Vittorio Minacori (https://github.com/vittominacori)\\r\\n * @dev Implementation of an ERC1363 interface\\r\\n */\\r\\nabstract contract ERC1363 is ERC165, ERC20, IERC1363 {\\r\\n    using Address for address;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC1363).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens to a specified address and then execute a callback on recipient.\\r\\n     * @param recipient The address to transfer to.\\r\\n     * @param amount The amount to be transferred.\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function transferAndCall(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        return transferAndCall(recipient, amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens to a specified address and then execute a callback on recipient.\\r\\n     * @param recipient The address to transfer to\\r\\n     * @param amount The amount to be transferred\\r\\n     * @param data Additional data with no specified format\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function transferAndCall(\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) public virtual override returns (bool) {\\r\\n        transfer(recipient, amount);\\r\\n        require(_checkAndCallTransfer(_msgSender(), recipient, amount, data), \\\"ERC1363: _checkAndCallTransfer reverts\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another and then execute a callback on recipient.\\r\\n     * @param sender The address which you want to send tokens from\\r\\n     * @param recipient The address which you want to transfer to\\r\\n     * @param amount The amount of tokens to be transferred\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function transferFromAndCall(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        return transferFromAndCall(sender, recipient, amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another and then execute a callback on recipient.\\r\\n     * @param sender The address which you want to send tokens from\\r\\n     * @param recipient The address which you want to transfer to\\r\\n     * @param amount The amount of tokens to be transferred\\r\\n     * @param data Additional data with no specified format\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function transferFromAndCall(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) public virtual override returns (bool) {\\r\\n        transferFrom(sender, recipient, amount);\\r\\n        require(_checkAndCallTransfer(sender, recipient, amount, data), \\\"ERC1363: _checkAndCallTransfer reverts\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve spender to transfer tokens and then execute a callback on recipient.\\r\\n     * @param spender The address allowed to transfer to\\r\\n     * @param amount The amount allowed to be transferred\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function approveAndCall(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        return approveAndCall(spender, amount, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve spender to transfer tokens and then execute a callback on recipient.\\r\\n     * @param spender The address allowed to transfer to.\\r\\n     * @param amount The amount allowed to be transferred.\\r\\n     * @param data Additional data with no specified format.\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function approveAndCall(\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) public virtual override returns (bool) {\\r\\n        approve(spender, amount);\\r\\n        require(_checkAndCallApprove(spender, amount, data), \\\"ERC1363: _checkAndCallApprove reverts\\\");\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke `onTransferReceived` on a target address\\r\\n     *  The call is not executed if the target address is not a contract\\r\\n     * @param sender address Representing the previous owner of the given token value\\r\\n     * @param recipient address Target address that will receive the tokens\\r\\n     * @param amount uint256 The amount mount of tokens to be transferred\\r\\n     * @param data bytes Optional data to send along with the call\\r\\n     * @return whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkAndCallTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) internal virtual returns (bool) {\\r\\n        if (!recipient.isContract()) {\\r\\n            return false;\\r\\n        }\\r\\n        bytes4 retval = IERC1363Receiver(recipient).onTransferReceived(_msgSender(), sender, amount, data);\\r\\n        return (retval == IERC1363Receiver(recipient).onTransferReceived.selector);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke `onApprovalReceived` on a target address\\r\\n     *  The call is not executed if the target address is not a contract\\r\\n     * @param spender address The address which will spend the funds\\r\\n     * @param amount uint256 The amount of tokens to be spent\\r\\n     * @param data bytes Optional data to send along with the call\\r\\n     * @return whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkAndCallApprove(\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) internal virtual returns (bool) {\\r\\n        if (!spender.isContract()) {\\r\\n            return false;\\r\\n        }\\r\\n        bytes4 retval = IERC1363Spender(spender).onApprovalReceived(_msgSender(), amount, data);\\r\\n        return (retval == IERC1363Spender(spender).onApprovalReceived.selector);\\r\\n    }\\r\\n}\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string internal _name;\\r\\n    string internal _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\"},\"ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\u0027./Context.sol\\u0027;\\r\\nimport \\u0027./ERC20.sol\\u0027;\\r\\nimport \\u0027./IERC20Burnable.sol\\u0027;\\r\\n\\r\\n/**\\r\\n * @dev Based on @openzeppelin/ERC20Burnable.sol\\r\\n */\\r\\nabstract contract ERC20Burnable is Context, ERC20, IERC20Burnable {\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     */\\r\\n    function burn(uint256 amount) public virtual override {\\r\\n        _burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\\u0027s allowance.\\r\\n     *\\r\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have allowance for ``accounts``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function burnFrom(address account, uint256 amount) public virtual override {\\r\\n        uint256 currentAllowance = allowance(account, _msgSender());\\r\\n        require(currentAllowance \\u003e= amount, \\u0027ERC20: burn amount exceeds allowance\\u0027);\\r\\n        _approve(account, _msgSender(), currentAllowance - amount);\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n}\"},\"ERC20TokenRecover.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\nimport \\u0027./SafeERC20.sol\\u0027;\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\nimport \\u0027./IERC20TokenRecover.sol\\u0027;\\r\\n\\r\\n/**\\r\\n * @title ERC20TokenRecover\\r\\n * @dev Allows owner to recover any ERC20 or ETH sent into the contract\\r\\n * based on https://github.com/vittominacori/eth-token-recover by Vittorio Minacori\\r\\n */\\r\\ncontract ERC20TokenRecover is Ownable, IERC20TokenRecover {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /**\\r\\n     * @notice function that transfers an token amount from this contract to the owner when accidentally sent\\r\\n     * @param tokenAddress The token contract address\\r\\n     * @param tokenAmount Number of tokens to be sent\\r\\n     */\\r\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public virtual override onlyOwner {\\r\\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice function that transfers an eth amount from this contract to the owner when accidentally sent\\r\\n     * @param amount Number of eth to be sent\\r\\n     */\\r\\n    function recoverETH(uint256 amount) public virtual override onlyOwner {\\r\\n        (bool sent, ) = owner().call{value: amount}(\\u0027\\u0027);\\r\\n        require(sent, \\u0027ERC20TokenRecover: SENDING_ETHER_FAILED\\u0027);\\r\\n    }\\r\\n}\"},\"ERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\u0027./ERC20.sol\\u0027;\\r\\nimport \\u0027./ERC165.sol\\u0027;\\r\\nimport \\u0027./IERC2612.sol\\u0027;\\r\\n\\r\\n/**\\r\\n * Implementation adapted from\\r\\n * https://github.com/albertocuestacanada/ERC20Permit/blob/master/contracts/ERC20Permit.sol.\\r\\n */\\r\\nabstract contract ERC2612 is ERC165, ERC20, IERC2612 {\\r\\n    mapping(address =\\u003e uint256) public override nonces;\\r\\n\\r\\n    bytes32 public immutable PERMIT_TYPEHASH =\\r\\n        keccak256(\\u0027Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\u0027);\\r\\n    bytes32 public immutable TRANSFER_TYPEHASH =\\r\\n        keccak256(\\u0027Transfer(address owner,address to,uint256 value,uint256 nonce,uint256 deadline)\\u0027);\\r\\n    bytes32 public override DOMAIN_SEPARATOR;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\u0027EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\u0027),\\r\\n                keccak256(bytes(name_)),\\r\\n                keccak256(bytes(version())),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\\r\\n        return interfaceId == type(IERC2612).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Setting the version as a function so that it can be overriden\\r\\n     */\\r\\n    function version() public pure virtual returns (string memory) {\\r\\n        return \\u00271\\u0027;\\r\\n    }\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external virtual override {\\r\\n        verifyPermit(PERMIT_TYPEHASH, owner, spender, value, deadline, v, r, s);\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function transferWithPermit(\\r\\n        address owner,\\r\\n        address to,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external virtual override returns (bool) {\\r\\n        verifyPermit(TRANSFER_TYPEHASH, owner, to, value, deadline, v, r, s);\\r\\n        _transfer(owner, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function verifyPermit(\\r\\n        bytes32 typehash,\\r\\n        address owner,\\r\\n        address to,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        require(block.timestamp \\u003c= deadline, \\u0027ERC20Permit: Expired permit\\u0027);\\r\\n\\r\\n        bytes32 hashStruct = keccak256(abi.encode(typehash, owner, to, value, nonces[owner]++, deadline));\\r\\n\\r\\n        require(\\r\\n            verifyEIP712(owner, hashStruct, v, r, s) || verifyPersonalSign(owner, hashStruct, v, r, s),\\r\\n            \\u0027ERC20Permit: invalid signature\\u0027\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function verifyEIP712(\\r\\n        address owner,\\r\\n        bytes32 hashStruct,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal view returns (bool) {\\r\\n        bytes32 hash = keccak256(abi.encodePacked(\\u0027\\\\x19\\\\x01\\u0027, DOMAIN_SEPARATOR, hashStruct));\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        return (signer != address(0) \\u0026\\u0026 signer == owner);\\r\\n    }\\r\\n\\r\\n    function verifyPersonalSign(\\r\\n        address owner,\\r\\n        bytes32 hashStruct,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal pure returns (bool) {\\r\\n        bytes32 hash = prefixed(hashStruct);\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        return (signer != address(0) \\u0026\\u0026 signer == owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Builds a prefixed hash to mimic the behavior of eth_sign.\\r\\n     */\\r\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\u0027\\\\x19Ethereum Signed Message:\\\\n32\\u0027, hash));\\r\\n    }\\r\\n}\"},\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\n\\r\\ninterface IBEP20 is IERC20, IERC20Metadata {\\r\\n    /**\\r\\n     * @dev Returns the bep token owner.\\r\\n     */\\r\\n    function getOwner() external view returns (address);\\r\\n}\"},\"IBUSDPlanet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IDEXRouter.sol\\\";\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./IERC1363.sol\\\";\\r\\nimport \\\"./IERC2612.sol\\\";\\r\\nimport \\\"./IERC20Burnable.sol\\\";\\r\\nimport \\\"./IERC20TokenRecover.sol\\\";\\r\\nimport \\\"./IBUSDPlanetDividendTracker.sol\\\";\\r\\n\\r\\ninterface IBUSDPlanet is IBEP20, IERC1363, IERC2612, IERC20Burnable, IERC20TokenRecover {\\r\\n    function dexRouters(address router) external view returns (bool);\\r\\n\\r\\n    // store addresses that are automatic market maker (dex) pairs. Any transfer *to* these addresses\\r\\n    // could be subject to a maximum transfer amount\\r\\n    function automatedMarketMakerPairs(address pair) external view returns (bool);\\r\\n\\r\\n    function defaultDexRouter() external view returns (IDEXRouter);\\r\\n\\r\\n    function defaultPair() external view returns (address);\\r\\n\\r\\n    function BUSD() external view returns (address);\\r\\n\\r\\n    function marketingWallet() external view returns (address);\\r\\n\\r\\n    function liquidityWallet() external view returns (address);\\r\\n\\r\\n    function charityWallet() external view returns (address);\\r\\n\\r\\n    function buyBackWallet() external view returns (address);\\r\\n\\r\\n    function dividendTracker() external view returns (IBusdPlanetDividendTracker);\\r\\n\\r\\n    function transfersEnabled() external view returns (bool);\\r\\n\\r\\n    // Supply and amounts\\r\\n    function swapTokensAtAmount() external view returns (uint256);\\r\\n\\r\\n    function maxWalletToken() external view returns (uint256);\\r\\n\\r\\n    // fees (from a total of 10000)\\r\\n    function buyFeesCollected() external view returns (uint256);\\r\\n\\r\\n    function buyDividendFee() external view returns (uint256);\\r\\n\\r\\n    function buyLiquidityFee() external view returns (uint256);\\r\\n\\r\\n    function buyMarketingFee() external view returns (uint256);\\r\\n\\r\\n    function buyCharityFee() external view returns (uint256);\\r\\n\\r\\n    function buyBuybackFee() external view returns (uint256);\\r\\n\\r\\n    function buyTotalFees() external view returns (uint256);\\r\\n\\r\\n    function sellFeesCollected() external view returns (uint256);\\r\\n\\r\\n    function sellDividendFee() external view returns (uint256);\\r\\n\\r\\n    function sellLiquidityFee() external view returns (uint256);\\r\\n\\r\\n    function sellMarketingFee() external view returns (uint256);\\r\\n\\r\\n    function sellBuybackFee() external view returns (uint256);\\r\\n\\r\\n    function sellCharityFee() external view returns (uint256);\\r\\n\\r\\n    function sellTotalFees() external view returns (uint256);\\r\\n\\r\\n    function gasForProcessing() external view returns (uint256);\\r\\n\\r\\n    // white listed adresses (excluded from fees and dividends)\\r\\n    // these addresses can also make transfers before presale is over\\r\\n    function whitelistedAddresses(address account) external view returns (bool);\\r\\n\\r\\n    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\\r\\n\\r\\n    event UpdateDefaultDexRouter(address indexed newAddress, address indexed oldAddress);\\r\\n\\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n\\r\\n    event marketingWalletUpdated(address indexed newMarketingWallet, address indexed oldMarketingWallet);\\r\\n\\r\\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\\r\\n\\r\\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n\\r\\n    event FixedSaleBuy(\\r\\n        address indexed account,\\r\\n        uint256 indexed amount,\\r\\n        bool indexed earlyParticipant,\\r\\n        uint256 numberOfBuyers\\r\\n    );\\r\\n\\r\\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\\r\\n\\r\\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\\r\\n\\r\\n    event ProcessedDividendTracker(\\r\\n        uint256 iterations,\\r\\n        uint256 claims,\\r\\n        uint256 lastProcessedIndex,\\r\\n        bool indexed automatic,\\r\\n        uint256 gas,\\r\\n        address indexed processor\\r\\n    );\\r\\n\\r\\n    function initializeDividendTracker(IBusdPlanetDividendTracker _dividendTracker) external;\\r\\n\\r\\n    function setWhitelistAddress(address _whitelistAddress, bool whitelisted) external;\\r\\n\\r\\n    function updateDividendTracker(address newAddress) external;\\r\\n\\r\\n    function addNewRouter(address _router, bool makeDefault) external;\\r\\n\\r\\n    function excludeFromFees(address account, bool excluded) external;\\r\\n\\r\\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) external;\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value) external;\\r\\n\\r\\n    function updateMinTokenBalance(uint256 minTokens) external;\\r\\n\\r\\n    function updateMarketingWallet(address newMarketingWallet) external;\\r\\n\\r\\n    function updateLiquidityWallet(address newLiquidityWallet) external;\\r\\n\\r\\n    function updateCharityWallet(address newMarketingWallet) external;\\r\\n\\r\\n    function updateBuyBackWallet(address newMarketingWallet) external;\\r\\n\\r\\n    function updateGasForProcessing(uint256 newValue) external;\\r\\n\\r\\n    function updateClaimWait(uint256 claimWait) external;\\r\\n\\r\\n    function getClaimWait() external view returns (uint256);\\r\\n\\r\\n    function getTotalDividendsDistributed() external view returns (uint256);\\r\\n\\r\\n    function isExcludedFromFees(address account) external view returns (bool);\\r\\n\\r\\n    function withdrawableDividendOf(address account) external view returns (uint256);\\r\\n\\r\\n    function dividendTokenBalanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function getAccountDividendsInfo(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            int256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function getAccountDividendsInfoAtIndex(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            int256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function processDividendTracker(uint256 gas) external;\\r\\n\\r\\n    function claim() external;\\r\\n\\r\\n    function getLastProcessedIndex() external view returns (uint256);\\r\\n\\r\\n    function getNumberOfDividendTokenHolders() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * Enable or disable transfers, used before presale and on critical problems in or with the token contract\\r\\n     */\\r\\n    function setTransfersEnabled(bool enabled) external;\\r\\n\\r\\n    function updateBuyFees(\\r\\n        uint256 _dividendFee,\\r\\n        uint256 _liquidityFee,\\r\\n        uint256 _marketingFee,\\r\\n        uint256 _buyBackFee,\\r\\n        uint256 _charityFee\\r\\n    ) external;\\r\\n\\r\\n    function updateSellFees(\\r\\n        uint256 _dividendFee,\\r\\n        uint256 _liquidityFee,\\r\\n        uint256 _marketingFee,\\r\\n        uint256 _buyBackFee,\\r\\n        uint256 _charityFee\\r\\n    ) external;\\r\\n\\r\\n    function updateSwapTokensAtAmount(uint256 _swapTokensAtAmount) external;\\r\\n}\"},\"IBUSDPlanetDividendTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./IDividendPayingTokenInterface.sol\\\";\\r\\nimport \\\"./IDividendPayingTokenOptionalInterface.sol\\\";\\r\\nimport \\\"./IERC20TokenRecover.sol\\\";\\r\\n\\r\\ninterface IBusdPlanetDividendTracker is\\r\\n    IBEP20,\\r\\n    IDividendPayingTokenInterface,\\r\\n    IDividendPayingTokenOptionalInterface,\\r\\n    IERC20TokenRecover\\r\\n{\\r\\n    function lastProcessedIndex() external view returns (uint256);\\r\\n\\r\\n    function excludedFromDividends(address account) external view returns (bool);\\r\\n\\r\\n    function lastClaimTimes(address account) external view returns (uint256);\\r\\n\\r\\n    function deployer() external view returns (address);\\r\\n\\r\\n    function claimWait() external view returns (uint256);\\r\\n\\r\\n    function minimumTokenBalanceForDividends() external view returns (uint256);\\r\\n\\r\\n    event ExcludeFromDividends(address indexed account);\\r\\n    event IncludedInDividends(address indexed account);\\r\\n\\r\\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n\\r\\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\\r\\n\\r\\n    function excludeFromDividends(address account) external;\\r\\n\\r\\n    function includeInDividends(address account) external;\\r\\n\\r\\n    function updateClaimWait(uint256 newClaimWait) external;\\r\\n\\r\\n    function updateMinTokenBalance(uint256 minTokens) external;\\r\\n\\r\\n    function getLastProcessedIndex() external view returns (uint256);\\r\\n\\r\\n    function getNumberOfTokenHolders() external view returns (uint256);\\r\\n\\r\\n    function getAccount(address _account)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address account,\\r\\n            int256 index,\\r\\n            int256 iterationsUntilProcessed,\\r\\n            uint256 withdrawableDividends,\\r\\n            uint256 totalDividends,\\r\\n            uint256 lastClaimTime,\\r\\n            uint256 nextClaimTime,\\r\\n            uint256 secondsUntilAutoClaimAvailable\\r\\n        );\\r\\n\\r\\n    function getAccountAtIndex(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address,\\r\\n            int256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function ensureBalance(bool _process) external;\\r\\n\\r\\n    function ensureBalanceForUsers(address payable[] memory accounts, bool _process) external;\\r\\n\\r\\n    function ensureBalanceForUser(address payable account, bool _process) external;\\r\\n\\r\\n    function setBalance(address payable account, uint256 newBalance) external;\\r\\n\\r\\n    function process(uint256 gas)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function processAccount(address payable account, bool automatic) external returns (bool);\\r\\n}\"},\"IDEXFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IDEXFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"IDEXPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IDEXPair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"},\"IDEXRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * Supports the Uniswap V1 + V2 structure\\r\\n */\\r\\n\\r\\ninterface IDEXRouter {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\r\\n\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\"},\"IDividendPayingTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IDividendPayingTokenInterface {\\r\\n    function dividendToken() external view returns(address);\\r\\n\\r\\n    function totalDividendsDistributed() external view returns(uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice View the amount of dividend in wei that an address can withdraw.\\r\\n     * @param _owner The address of a token holder.\\r\\n     * @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n     */\\r\\n    function dividendOf(address _owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws the ether distributed to the sender.\\r\\n     * @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` \\r\\n     *      SHOULD be 0 after the transfer.\\r\\n     *      MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\\r\\n     */\\r\\n    function withdrawDividend() external;\\r\\n\\r\\n    function distributeDividends(uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev This event MUST emit when ether is distributed to token holders.\\r\\n     * @param from The address which sends ether to this contract.\\r\\n     * @param weiAmount The amount of distributed ether in wei.\\r\\n     */\\r\\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\\r\\n\\r\\n    /**\\r\\n     * @dev This event MUST emit when an address withdraws their dividend.\\r\\n     * @param to The address which withdraws ether from this contract.\\r\\n     * @param weiAmount The amount of withdrawn ether in wei.\\r\\n     */\\r\\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\\r\\n}\"},\"IDividendPayingTokenOptionalInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IDividendPayingTokenOptionalInterface {\\r\\n    /**\\r\\n     * @notice View the amount of dividend in wei that an address can withdraw.\\r\\n     * @param _owner The address of a token holder.\\r\\n     * @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n     */\\r\\n    function withdrawableDividendOf(address _owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice View the amount of dividend in wei that an address has withdrawn.\\r\\n     * @param _owner The address of a token holder.\\r\\n     * @return The amount of dividend in wei that `_owner` has withdrawn.\\r\\n     */\\r\\n    function withdrawnDividendOf(address _owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice View the amount of dividend in wei that an address has earned in total.\\r\\n     * @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\r\\n     * @param _owner The address of a token holder.\\r\\n     * @return The amount of dividend in wei that `_owner` has earned in total.\\r\\n     */\\r\\n    function accumulativeDividendOf(address _owner) external view returns (uint256);\\r\\n}\"},\"IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IERC1363 Interface\\r\\n * @author Vittorio Minacori (https://github.com/vittominacori)\\r\\n * @dev Interface for a Payable Token contract as defined in\\r\\n *  https://eips.ethereum.org/EIPS/eip-1363\\r\\n */\\r\\ninterface IERC1363 {\\r\\n    /**\\r\\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\r\\n     * @param recipient address The address which you want to transfer to\\r\\n     * @param amount uint256 The amount of tokens to be transferred\\r\\n     * @return true unless throwing\\r\\n     */\\r\\n    function transferAndCall(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\r\\n     * @param recipient address The address which you want to transfer to\\r\\n     * @param amount uint256 The amount of tokens to be transferred\\r\\n     * @param data bytes Additional data with no specified format, sent in call to `recipient`\\r\\n     * @return true unless throwing\\r\\n     */\\r\\n    function transferAndCall(\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\\r\\n     * @param sender address The address which you want to send tokens from\\r\\n     * @param recipient address The address which you want to transfer to\\r\\n     * @param amount uint256 The amount of tokens to be transferred\\r\\n     * @return true unless throwing\\r\\n     */\\r\\n    function transferFromAndCall(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\\r\\n     * @param sender address The address which you want to send tokens from\\r\\n     * @param recipient address The address which you want to transfer to\\r\\n     * @param amount uint256 The amount of tokens to be transferred\\r\\n     * @param data bytes Additional data with no specified format, sent in call to `recipient`\\r\\n     * @return true unless throwing\\r\\n     */\\r\\n    function transferFromAndCall(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\\r\\n     * and then call `onApprovalReceived` on spender.\\r\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n     * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * @param spender address The address which will spend the funds\\r\\n     * @param amount uint256 The amount of tokens to be spent\\r\\n     */\\r\\n    function approveAndCall(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\\r\\n     * and then call `onApprovalReceived` on spender.\\r\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n     * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * @param spender address The address which will spend the funds\\r\\n     * @param amount uint256 The amount of tokens to be spent\\r\\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\\r\\n     */\\r\\n    function approveAndCall(\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external returns (bool);\\r\\n}\"},\"IERC1363Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IERC1363Receiver Interface\\r\\n * @author Vittorio Minacori (https://github.com/vittominacori)\\r\\n * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\\r\\n *  from ERC1363 token contracts as defined in\\r\\n *  https://eips.ethereum.org/EIPS/eip-1363\\r\\n */\\r\\ninterface IERC1363Receiver {\\r\\n    /**\\r\\n     * @notice Handle the receipt of ERC1363 tokens\\r\\n     * @dev Any ERC1363 smart contract calls this function on the recipient\\r\\n     * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\\r\\n     * transfer. Return of other than the magic value MUST result in the\\r\\n     * transaction being reverted.\\r\\n     * Note: the token contract address is always the message sender.\\r\\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\\r\\n     * @param sender address The address which are token transferred from\\r\\n     * @param amount uint256 The amount of tokens transferred\\r\\n     * @param data bytes Additional data with no specified format\\r\\n     * @return `bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))` unless throwing\\r\\n     */\\r\\n    function onTransferReceived(\\r\\n        address operator,\\r\\n        address sender,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\"},\"IERC1363Spender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IERC1363Spender Interface\\r\\n * @author Vittorio Minacori (https://github.com/vittominacori)\\r\\n * @dev Interface for any contract that wants to support approveAndCall\\r\\n *  from ERC1363 token contracts as defined in\\r\\n *  https://eips.ethereum.org/EIPS/eip-1363\\r\\n */\\r\\ninterface IERC1363Spender {\\r\\n    /**\\r\\n     * @notice Handle the approval of ERC1363 tokens\\r\\n     * @dev Any ERC1363 smart contract calls this function on the recipient\\r\\n     * after an `approve`. This function MAY throw to revert and reject the\\r\\n     * approval. Return of other than the magic value MUST result in the\\r\\n     * transaction being reverted.\\r\\n     * Note: the token contract address is always the message sender.\\r\\n     * @param sender address The address which called `approveAndCall` function\\r\\n     * @param amount uint256 The amount of tokens to be spent\\r\\n     * @param data bytes Additional data with no specified format\\r\\n     * @return `bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))` unless throwing\\r\\n     */\\r\\n    function onApprovalReceived(\\r\\n        address sender,\\r\\n        uint256 amount,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Based on @openzeppelin/ERC20Burnable.sol\\r\\n */\\r\\ninterface IERC20Burnable {\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     */\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\\u0027s allowance.\\r\\n     *\\r\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have allowance for ``accounts``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n}\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"},\"IERC20TokenRecover.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IERC20TokenRecover\\r\\n * @dev Allows owner to recover any ERC20 or ETH sent into the contract\\r\\n * based on https://github.com/vittominacori/eth-token-recover by Vittorio Minacori\\r\\n */\\r\\ninterface IERC20TokenRecover {\\r\\n    /**\\r\\n     * @notice function that transfers an token amount from this contract to the owner when accidentally sent\\r\\n     * @param tokenAddress The token contract address\\r\\n     * @param tokenAmount Number of tokens to be sent\\r\\n     */\\r\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function that transfers an eth amount from this contract to the owner when accidentally sent\\r\\n     * @param amount Number of eth to be sent\\r\\n     */\\r\\n    function recoverETH(uint256 amount) external;\\r\\n}\"},\"IERC2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change one\\u0027s\\r\\n * {IERC20-allowance} without having to send a transaction, by signing a\\r\\n * message. This allows users to spend tokens without having to hold Ether.\\r\\n *\\r\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\r\\n */\\r\\ninterface IERC2612 {\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``\\u0027s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `value` as allowance of `spender` account over `owner` account\\u0027s token,\\r\\n     * given `owner` account\\u0027s signed approval.\\r\\n     * Emits {Approval} event.\\r\\n     * Requirements:\\r\\n     *   - `deadline` must be timestamp in future.\\r\\n     *   - `v`, `r` and `s` must be valid `secp256k1` signature from `owner` account over\\r\\n     *      EIP712-formatted function arguments.\\r\\n     *   - the signature must use `owner` account\\u0027s current nonce (see {nonces}).\\r\\n     *   - the signer cannot be zero address and must be `owner` account.\\r\\n     * For more information on signature format, see\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Same as permit, but also performs a transfer\\r\\n     */\\r\\n    function transferWithPermit(\\r\\n        address owner,\\r\\n        address to,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (bool);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_busd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyBackWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charityWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"earlyParticipant\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfBuyers\",\"type\":\"uint256\"}],\"name\":\"FixedSaleBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDefaultDexRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"}],\"name\":\"marketingWalletUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"makeDefault\",\"type\":\"bool\"}],\"name\":\"addNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCharityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultDexRouter\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dexRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract IBusdPlanetDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBusdPlanetDividendTracker\",\"name\":\"_dividendTracker\",\"type\":\"address\"}],\"name\":\"initializeDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCharityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setTransfersEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferWithPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBuyBackWallet\",\"type\":\"address\"}],\"name\":\"updateBuyBackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_charityFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCharityWallet\",\"type\":\"address\"}],\"name\":\"updateCharityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"}],\"name\":\"updateLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"}],\"name\":\"updateMinTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"updateNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_charityFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BusdPlanet", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000f0b09841e18b007bf087994331b1e8462966531f0000000000000000000000000b6a9135e907eb0cdccffa5586d8f8e9e601ce5f000000000000000000000000aab0b6dc78ea5e6a2ddb211f1d9686d4612b5b46", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ac30e0db377e8fa80f27aae84a7604811d146cfc493d1060f9985b0af47453f8"}