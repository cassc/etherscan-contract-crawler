{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address PancakePair);\r\n}\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n}\r\ninterface IPair {\r\n    function getReserves() external view returns ( uint112 reserve0,uint112 reserve1,uint32 blockTimestampLast);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function totalSupply() external view returns (uint);\r\n}\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\nlibrary Utils{\r\n    function codeHash(address account) internal view returns (bytes32) {\r\n        bytes32 codehash;\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return codehash;\r\n    }\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract TokenRepository  {\r\n    address public owner;\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"DENIED\");\r\n        _;\r\n    }\r\n    constructor(address _owner){owner = _owner;}\r\n    receive() external payable {revert();} \r\n    function withdraw(IERC20 _token, address _recipient) public onlyOwner(){\r\n        _token.transfer(_recipient, _token.balanceOf(address(this)));\r\n    }\r\n}\r\n\r\ncontract HotTokenV1 is Context {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    enum TransferType{\r\n        Out,\r\n        In,\r\n        Transfer,\r\n        AddLiquidity,\r\n        RemoveLiquidity,\r\n        Buy,\r\n        Sell\r\n    }\r\n\r\n    address public _owner;\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"DENIED\");\r\n        _;\r\n    }\r\n\r\n    uint public constant MINIMUM_LIQUIDITY = 10**3;\r\n\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n    address private _tokenPair;\r\n    bytes32 private _tokenPairHash;\r\n    address private _tokenAddress;\r\n    address private _tokenRouter;\r\n\r\n    uint256 immutable private unitBase;\r\n\r\n    mapping(address => uint256) private _lastLps;\r\n\r\n    mapping(address => uint256) private _LockLpDates;\r\n    uint256  private _lockLpsInterval = 7776000; \r\n    uint256  private _openLpsInterval = 28800;  \r\n\r\n    mapping(address => address) private _upLines;\r\n    uint256 constant private uplevel = 3;           \r\n    \r\n    mapping(address => bool) private _blacklist;\r\n\r\n    TokenRepository _rewardsRepos;\r\n    uint256 constant private rewardsBalanceRequire = 100;\r\n    uint256 constant private rewardsInterval = 86400;\r\n    uint256 constant private rewardsRate = 500;\r\n    uint256 constant private rewardsDisRate = 1000;\r\n    mapping(address => uint256) private _lastRewardsDates;\r\n\r\n    TokenRepository _bonusRepos;\r\n    uint256 private _lastBonusDate;\r\n    uint256 private _lastBonusOffset;\r\n    address[]       _tradeAccounts;\r\n    uint256 constant private bonusInterval = 86400;\r\n    uint256 constant private bonusTradeRequire = 1000;\r\n    uint256 constant private bonusRate = 100;\r\n    uint256 constant private bonusCount = 10;\r\n\r\n    uint256 constant private inviteRate = 200;\r\n\r\n    uint256 constant private remainRate = 100;\r\n\r\n    uint256 constant private divBase = 10000;\r\n\r\n    uint256 constant private sellLockInterval = 1800;\r\n\r\n    mapping(address => uint256) private _sellLockDates;\r\n\r\n    bool  private accumulateTax = true;\r\n    \r\n    mapping(address => uint256) private _taxBase;\r\n\r\n    address immutable private feeAddress;\r\n    uint256 constant private feeRate = 3680;\r\n\r\n    uint256 constant private tradeLimit = 200;\r\n\r\n    uint256 constant private maxHold = 1000;\r\n\r\n    uint256 private rmLpRequire = 2000000;\r\n\r\n    bool    private  isPause;\r\n    \r\n    constructor(string memory name_, string memory symbol_,uint256 decimals_,uint256 total,address router_,address token_,address feeAddress_) {\r\n        _owner = _msgSender();\r\n        _lastBonusDate = block.timestamp;\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        _tokenRouter = router_;\r\n        _tokenAddress = token_;\r\n        feeAddress = feeAddress_;\r\n        unitBase = 10**_decimals;\r\n        _mint(msg.sender, total*10**_decimals);\r\n         _tokenPair = IFactory(IRouter(router_).factory()).createPair(\r\n            token_,\r\n            address(this)\r\n        );\r\n        _tokenPairHash = Utils.codeHash(_tokenPair);\r\n        _rewardsRepos = new TokenRepository(_msgSender());\r\n        _bonusRepos = new TokenRepository(_msgSender());\r\n    }\r\n\r\n    function name() public view  returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view  returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner_, address spender) public view  returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        \r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _isPancakePair(address account) internal view returns(bool){\r\n        return Utils.codeHash(account) == _tokenPairHash;\r\n    }\r\n\r\n    function _countLiquidity(uint256 balance0, uint256 balance1,uint256 reserve0, uint256 reserve1) internal view returns (uint liquidity) {\r\n        uint kLast = IPair(_tokenPair).kLast();\r\n        uint totalLP= IPair(_tokenPair).totalSupply();\r\n        if (kLast != 0) {\r\n            uint rootK = Math.sqrt(reserve0*reserve1);\r\n            uint rootKLast = Math.sqrt(kLast);\r\n            if (rootK > rootKLast) {\r\n                uint numerator = totalLP*(rootK-rootKLast)*8;\r\n                uint denominator = rootK*17+rootKLast*8;\r\n                totalLP += numerator / denominator;\r\n            }\r\n        }\r\n        uint amount0 = balance0 - reserve0;\r\n        uint amount1 = balance1 - reserve1;\r\n        if (totalLP == 0) {\r\n            liquidity = Math.sqrt(amount0*amount1)-MINIMUM_LIQUIDITY;\r\n        } else {\r\n            liquidity = Math.min(amount0*totalLP / reserve0, amount1*totalLP / reserve1);\r\n        }\r\n    }\r\n    function _addLiquidityImp(address user,uint256 liquidity) internal {\r\n         uint256 currentLp = IERC20(_tokenPair).balanceOf(user);\r\n          if(currentLp > _lastLps[user]){\r\n            _LockLpDates[user] = block.timestamp;\r\n            _lastRewardsDates[user] = _LockLpDates[user];\r\n            _lastLps[user] = currentLp + liquidity;\r\n        }else{\r\n            _lastLps[user] += liquidity;\r\n        }\r\n    }\r\n    function _removeLiquidityImp(address user,uint256 liquidity,uint256 remain) internal {\r\n        require(remain>=rmLpRequire*unitBase);\r\n        uint256 currentLp = IERC20(_tokenPair).balanceOf(user);\r\n        if(_lastLps[user] >= currentLp+liquidity){\r\n            _lastLps[user] = currentLp;\r\n            uint256 pastTime = block.timestamp - _LockLpDates[user];\r\n            uint256 period = _lockLpsInterval + _openLpsInterval;\r\n            uint256 offsetTime = pastTime%period;\r\n            if(offsetTime>=_lockLpsInterval&&offsetTime<=_openLpsInterval){}else{revert(\"faild\");}\r\n        }else{\r\n            revert(\"faild\");\r\n        }\r\n    }    \r\n    function _analyseType(bool isFromPancakePair,bool isToPancakePair,address from,address to,uint256 amount) internal returns (TransferType transferType,uint256 liquidity){\r\n        if(from == _tokenPair){\r\n            uint256 balance0 = IERC20(_tokenAddress).balanceOf(_tokenPair);\r\n            uint256 balance1 = balanceOf(_tokenPair);\r\n            (uint256 reserve0,,) = IPair(_tokenPair).getReserves();\r\n            if(balance0 < reserve0){\r\n                 \r\n                uint totalLP= IPair(_tokenPair).totalSupply();\r\n                uint amount0 = reserve0 - balance0;\r\n                uint amount1 = amount;\r\n                liquidity = Math.min(amount0*totalLP / balance0, amount1*totalLP / balance1);\r\n                _removeLiquidityImp(to,liquidity,reserve0);\r\n                transferType = TransferType.RemoveLiquidity;\r\n               \r\n            }else{\r\n                transferType = TransferType.Buy;\r\n            }\r\n        }else if(to == _tokenPair&&_msgSender() == _tokenRouter){\r\n            uint256 balance0 = IERC20(_tokenAddress).balanceOf(_tokenPair);\r\n            // console.log(\"ttttt\",balanceOf(_tokenPair),amount);\r\n            uint256 balance1 = balanceOf(_tokenPair);\r\n            (uint256 reserve0,uint256 reserve1,) = IPair(_tokenPair).getReserves();\r\n            if(balance0 > reserve0){\r\n                liquidity = _countLiquidity(balance0,balance1,reserve0,reserve1);\r\n                transferType = TransferType.AddLiquidity;\r\n                _addLiquidityImp(from,liquidity);\r\n            }else{\r\n                transferType = TransferType.Sell;\r\n            }\r\n        }else{\r\n            if(isFromPancakePair){\r\n                transferType = TransferType.In;\r\n            }else if(isToPancakePair){\r\n                transferType = TransferType.Out;\r\n            }else{\r\n                transferType = TransferType.Transfer;\r\n            }\r\n        }\r\n    }\r\n    function _processInviteRewards(address sender, uint256 rewards) internal returns(uint256) {\r\n        \r\n        uint256 remain = rewards;\r\n        address upLine = _upLines[sender];\r\n        if(upLine == address(0))return remain;\r\n        for(uint256 i; i<uplevel; i++) {\r\n            rewards = rewards/2;\r\n            remain -= rewards;\r\n            _unsafeTransfer(sender, upLine, rewards); \r\n            upLine = _upLines[upLine];\r\n            if(upLine == address(0))break;\r\n        }\r\n        return remain;\r\n    }\r\n    function _processRewards(address user,uint256 currentLp) internal {\r\n       uint256 rewardsAmount = balanceOf(address(_rewardsRepos));\r\n       if(currentLp>0&&rewardsAmount >= rewardsBalanceRequire*unitBase&&\r\n       block.timestamp>=_lastRewardsDates[user]+rewardsInterval){\r\n          uint256 amount = rewardsAmount*rewardsDisRate*currentLp/(IERC20(_tokenPair).totalSupply()*divBase);\r\n          uint256 fee = amount*feeRate/divBase;\r\n          _unsafeTransfer(address(_rewardsRepos), user, amount - fee); \r\n          _lastRewardsDates[user] = block.timestamp;\r\n          _balances[address(_rewardsRepos)] -= fee;\r\n          _balances[feeAddress] += fee;\r\n       }\r\n    }\r\n    function _rand(uint256 _length) internal view returns(uint256) {\r\n        uint nonce = gasleft();\r\n        uint256 random = uint256(keccak256(abi.encodePacked(nonce, msg.sender, block.difficulty, block.timestamp)));\r\n        return random%_length;\r\n    }\r\n    function _processBonus(address user) internal{\r\n       _tradeAccounts.push(user);\r\n       if(block.timestamp>=_lastBonusDate+bonusInterval&&_tradeAccounts.length>=bonusTradeRequire+_lastBonusOffset){\r\n            uint256 reward = balanceOf(address(_bonusRepos))/bonusCount;\r\n            for(uint256 i;i<bonusCount; i++) {\r\n                uint256 index = _rand(_tradeAccounts.length-_lastBonusOffset);\r\n                _unsafeTransfer(address(_bonusRepos), _tradeAccounts[_lastBonusOffset+index], reward);\r\n            }\r\n            _lastBonusDate = block.timestamp;\r\n            _lastBonusOffset = _tradeAccounts.length - 1;\r\n       }\r\n    }\r\n    function _extendImp(address from,address to,uint256 amount,bool bTransfer) internal {\r\n        //processing invate&reward&bonus\r\n        \r\n        address payer = to; //in\r\n        uint256 rewardsTax;\r\n        bool isFromPancakePair = _isPancakePair(from);\r\n        bool isToPancakePair = _isPancakePair(to);\r\n        if(bTransfer&&!isFromPancakePair){\r\n            //setting upLine;\r\n            if(_upLines[to] == address(0)){\r\n                _upLines[to] = from;\r\n            }\r\n        }\r\n        if(isPause)return;\r\n        if(!isFromPancakePair){ //out\r\n            require(!_blacklist[from],\"banned\");\r\n            if(block.timestamp>=_sellLockDates[from]+sellLockInterval){\r\n                _taxBase[from] = rewardsRate;\r\n                _sellLockDates[from] = block.timestamp;\r\n            }else{\r\n                if(accumulateTax){\r\n                    _taxBase[from] = Math.min(_taxBase[from] + rewardsRate,10000);\r\n                }\r\n                else{\r\n                    revert(\"sell is locking\");\r\n                }\r\n            }\r\n            \r\n            uint256 needAmount = (amount*(inviteRate+_taxBase[from]+bonusRate)/divBase); \r\n            require(balanceOf(from)>=needAmount,\"insufficient balance\");\r\n            uint256 remainAmount = balanceOf(from)-needAmount;\r\n            require(remainAmount>=amount*remainRate/divBase,\"the balance is less than min \");\r\n            rewardsTax = _taxBase[from];\r\n            payer = from;\r\n        }else{\r\n            require(balanceOf(payer) <= maxHold*unitBase,\"the balance must be less than or equal to assign\");\r\n            rewardsTax = rewardsRate;\r\n        }\r\n        (TransferType transferType,) = _analyseType(isFromPancakePair,isToPancakePair, from, to, amount);\r\n        if(transferType != TransferType.AddLiquidity&&transferType != TransferType.Transfer&&transferType != TransferType.Buy&&transferType != TransferType.In){\r\n            require(amount <= tradeLimit*unitBase,\"trade limit\");\r\n        }\r\n        uint256 remian = _processInviteRewards(payer,amount*inviteRate/divBase);\r\n        _unsafeTransfer(payer, address(_rewardsRepos), amount*rewardsTax/divBase+remian);\r\n                \r\n        _unsafeTransfer(payer, address(_bonusRepos), amount*bonusRate/divBase);\r\n        _processBonus(payer);\r\n        \r\n       \r\n        //to lock and sync lps\r\n        if(transferType != TransferType.RemoveLiquidity&&transferType != TransferType.AddLiquidity){\r\n            address user = from;\r\n            if(transferType == TransferType.Buy){\r\n                user = to;\r\n            }\r\n            uint256 currentLp = IERC20(_tokenPair).balanceOf(user);\r\n            if(currentLp > _lastLps[user]){\r\n                _LockLpDates[user] = block.timestamp;\r\n                _lastRewardsDates[user] = _LockLpDates[user];\r\n            }\r\n            _lastLps[user] = currentLp;\r\n            if(transferType == TransferType.Buy){\r\n                _processRewards(to,currentLp);\r\n            }\r\n           \r\n        } \r\n    }\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        _extendImp(owner,to,amount,true);\r\n        return true;\r\n    }\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public  returns (bool) {\r\n        \r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        _extendImp(from,to,amount,false);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n   \r\n    function _unsafeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        uint256 fromBalance = _balances[from];\r\n\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setOwner(address owner) onlyOwner public{\r\n        _owner = owner;\r\n    }\r\n\r\n    function ban(address account,bool isBan) onlyOwner public{\r\n        _blacklist[account] = isBan;\r\n    }\r\n\r\n    function setLPInfo(uint256 lockLpsInterval,uint256 openLpsInterval) onlyOwner public{\r\n        _lockLpsInterval = lockLpsInterval;\r\n        _openLpsInterval = openLpsInterval; \r\n    }\r\n\r\n    function batchTransfer(uint256 amount, address[] calldata list) onlyOwner public {\r\n        for (uint256 i; i < list.length; i++) {\r\n            _transfer(_msgSender(), list[i], amount);\r\n        }\r\n    }\r\n\r\n    function withdraw(address _recipient) public onlyOwner(){\r\n        _transfer(address(this), _recipient,balanceOf(address(this)));\r\n    }\r\n\r\n    function pause(bool _pause)public onlyOwner(){\r\n        isPause = _pause;\r\n    }\r\n\r\n    function setRMLpRequire(uint256 amount) public onlyOwner(){\r\n        rmLpRequire = amount;\r\n    }\r\n\r\n    function setAccumulateTax(bool isTax) public onlyOwner(){\r\n        accumulateTax = isTax;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBan\",\"type\":\"bool\"}],\"name\":\"ban\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isTax\",\"type\":\"bool\"}],\"name\":\"setAccumulateTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockLpsInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openLpsInterval\",\"type\":\"uint256\"}],\"name\":\"setLPInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRMLpRequire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HotTokenV1", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000061a7f00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000007dafd9dc3b550f4dbb947a63f8134bba00373b1c000000000000000000000000000000000000000000000000000000000000000a447265616d20706c616e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045241445400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2382643ad0d7366aff39cbea18e3c3abb471d7492e1205dec1038503283b943f"}