{"SourceCode": "pragma solidity 0.5.16;\r\n\r\n\r\ninterface IPancakeERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function expectPairFor(address token0, address token1) external view returns (address);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external pure returns (bytes32);\r\n}\r\n\r\ninterface IPancakeRouter {\r\n    function factory() external view returns (address);\r\n    function WETH() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IBEP20 {\r\n \r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function decimals() external view returns (uint8);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  \r\n  function name() external view returns (string memory);\r\n\r\n  \r\n  function getOwner() external view returns (address);\r\n\r\n \r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  \r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  \r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  \r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  \r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  \r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Context {\r\n  \r\n  constructor () internal { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n  \r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  \r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  \r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n \r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n \r\n  constructor () internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  \r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n \r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract BEP20TokenA is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n  \r\n    enum TransferType{TRANSFER,SWAP_BUY,SWAP_SELL}\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n  \r\n    mapping (address => address) public _referee;\r\n\r\n    uint256 private _totalSupply = 1300000000 * 10**8;\r\n    uint8 public _decimals = 8;\r\n    string public _symbol;\r\n    string public _name;\r\n    // address _pancakeRouterToken = address(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3);\r\n    address _pancakeRouterToken = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);//\u8584\u997c\u8def\u7531\u5408\u7ea6\u5730\u5740\r\n    // address _usdtToken = address(0xcDF5a36df0e57272e0BBdB40c6713Fb5709032eb);//USDT\u5408\u7ea6\u5730\u5740\uff08\u6d4b\u8bd5\u65f6\u5148\u53d1\u4e00\u4e2a\u6d4b\u8bd5\u5e01\u4ee3\u66ff\uff09\r\n    address _usdtToken = address(0x55d398326f99059fF775485246999027B3197955);//USDT\u5408\u7ea6\u5730\u5740\r\n    address _allToken;\r\n//   address _allToken;\r\n  \r\n    //   \u57fa\u91d1\u4f1a\r\n    // address _foundationAddress = address(0x2b194D3B9B708b0E3FFD58D24860d4e0247f390a);\r\n    address _foundationAddress = address(0x55E9d467d778DCAeea53AC11C9aBB58298a973dF);\r\n    //  \u5ba3\u53d1\r\n    // address _propagandaAddress = address(0x1127A2e7bA13F4b91E3796915C9084A51AD24B86);\r\n    address _propagandaAddress = address(0x8a08757fB9331ABEE2453C726f93Aea3FF2d078A);\r\n  \r\n    // address public _lpAddress = address(0x8deBBcb7Ed735cBbCF7eb3FB92D04dc933349bd7);\r\n    address public _lpAddress = address(0xe3f0C9F99BECced5197300d64ea3a814ECD862f7);\r\n  \r\n    address public _swapV2Pair;\r\n  \r\n    mapping(address => bool) _white;\r\n    \r\n    mapping(address => bool) _blacklist;\r\n    \r\n    mapping(address => bool) _whiteContract;\r\n    \r\n    uint256 _buyFee = 15;\r\n    uint256 _sellFee = 15;\r\n    \r\n    uint256 _minAToB;\r\n  \r\n    address[] _pathAToB;\r\n    bool _lockSwapFee;\r\n    \r\n    modifier lockSwapFee(){\r\n        _lockSwapFee = true;\r\n        _;\r\n        _lockSwapFee = false;\r\n    }\r\n    constructor(address addr, address allToken) public {\r\n        _name = \"RES\";\r\n        _symbol = \"RES\";\r\n        _balances[addr] = _totalSupply;\r\n        \r\n        _allToken = allToken;\r\n        \r\n        _pathAToB = new address[](3);\r\n        _pathAToB[0] = address(this);\r\n        _pathAToB[1] = _usdtToken;\r\n        _pathAToB[2] = _allToken;\r\n        \r\n        _white[_foundationAddress] = true;\r\n        _white[_propagandaAddress] = true;\r\n        _white[_lpAddress] = true;\r\n        _white[address(this)] = true;\r\n        _swapV2Pair = IPancakeFactory(IPancakeRouter(_pancakeRouterToken).factory()).createPair(\r\n            address(this),\r\n            _usdtToken\r\n            );\r\n            \r\n        _whiteContract[_swapV2Pair] = true;\r\n        emit Transfer(address(0), addr, _totalSupply);\r\n    }\r\n    \r\n    function setMinAToB(uint256 min) external onlyOwner(){\r\n        _minAToB = min;\r\n    }\r\n    \r\n    \r\n    function setBuyFee(uint256 buyFee) external onlyOwner(){\r\n        require(buyFee >=0 && buyFee <= 100, \"Buy fee fail\");\r\n        _buyFee = buyFee;\r\n    }\r\n    \r\n    function setSellFee(uint256 sellFee) external onlyOwner(){\r\n        require(sellFee >= 0 && sellFee <= 100, \"Sell fee fail\");\r\n        _sellFee = sellFee;\r\n    }\r\n   \r\n    function setFoundationAddress(address foundationAddress) external onlyOwner(){\r\n        _foundationAddress = foundationAddress;\r\n    }\r\n      \r\n    function setPropagandaAddress(address propagandaAddress) external onlyOwner(){\r\n        _propagandaAddress = propagandaAddress;\r\n    }\r\n      \r\n    function setLpAddress(address lpAddress) external onlyOwner(){\r\n        _lpAddress = lpAddress;\r\n    }\r\n      \r\n    function addWhite(address addressWhite) external onlyOwner(){\r\n        _white[addressWhite] = true;\r\n    }\r\n    \r\n    function addWhiteContract(address addressWhite) external onlyOwner(){\r\n        _whiteContract[addressWhite] = true;\r\n    }\r\n    \r\n    function addBlack(address addressBlack) external onlyOwner(){\r\n        _blacklist[addressBlack] = true;\r\n    }\r\n      \r\n    function bindReferee(address addr) external returns(bool success){\r\n        require(_referee[_msgSender()] == address(0), \"Already exists bind\");\r\n        _referee[_msgSender()] = addr;\r\n        success = true;\r\n    }\r\n\r\n \r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n    \r\n     \r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n      \r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n     \r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n     \r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n      \r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n  \r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n      \r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n     \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n      \r\n    function _isSkip(address sender, address recipient) view internal returns(bool){\r\n        return sender == address(this) || sender == owner() || _white[recipient] || _white[sender];\r\n    }\r\n      \r\n    function _transferType(address sender, address recipient) view internal returns(TransferType){\r\n        if (recipient == _swapV2Pair){\r\n            return TransferType.SWAP_SELL;\r\n        }\r\n        if (sender == _swapV2Pair){\r\n            return TransferType.SWAP_BUY;\r\n        }\r\n        return TransferType.TRANSFER;\r\n    }\r\n\r\n  \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n      \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function mint(uint256 amount) public onlyOwner returns (bool) {\r\n        _mint(_msgSender(), amount);\r\n        return true;\r\n    }\r\n    \r\n      \r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n  \r\n    function _promotionReward(uint256 amount) internal returns(uint256 refereeRate){\r\n        refereeRate = 0;\r\n        if (_referee[tx.origin] != address(0)){\r\n            refereeRate = refereeRate.add(2);\r\n            _balances[_referee[tx.origin]] = _balances[_referee[tx.origin]].add(amount.mul(2).div(15));\r\n            emit Transfer(tx.origin, _referee[tx.origin], amount.mul(2).div(15));\r\n            if (_referee[_referee[tx.origin]] != address(0)){\r\n                refereeRate = refereeRate.add(1);\r\n                _balances[_referee[_referee[tx.origin]]] = _balances[_referee[_referee[tx.origin]]].add(amount.mul(1).div(15));\r\n                emit Transfer(tx.origin, _referee[_referee[tx.origin]], amount.mul(1).div(15));\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(!_blacklist[tx.origin], \"blacklist!\");\r\n        require(!isContract(recipient) || _whiteContract[recipient] || sender == owner() || recipient == owner(), \"no white contract\");\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        require(recipient != address(this), \"transfer fail\");\r\n        require(_allToken != address(0), \"no set allToken\");\r\n        if(sender != owner() && recipient != owner() && IPancakePair(_swapV2Pair).totalSupply() == 0) {\r\n            require(recipient != _swapV2Pair,\"no start\");\r\n        }\r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n        \r\n        bool skip = _isSkip(sender, recipient);\r\n        TransferType transferType = _transferType(sender, recipient);\r\n        \r\n        uint256 amountRecipient = amount;\r\n        if (!_lockSwapFee && !skip && transferType != TransferType.TRANSFER){\r\n            if (transferType == TransferType.SWAP_BUY){\r\n                if (_isBuySwap(amount)){\r\n                    amountRecipient = amount.mul(uint256(100).sub(_buyFee)).div(100);\r\n                    _distBuyFee(recipient, amount.mul(_buyFee).div(100));\r\n                }\r\n            }else if(transferType == TransferType.SWAP_SELL){\r\n                if (_isSellSwap(amount)){\r\n                    amountRecipient = amount.mul(uint256(100).sub(_sellFee)).div(100);\r\n                    _distSellFee(sender, amount.mul(_sellFee).div(100));\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (transferType == TransferType.TRANSFER){\r\n            _thisAToB();\r\n        }\r\n        \r\n        //\u7ed1\u5b9a\u63a8\u8350\u5173\u7cfb\r\n        if(_referee[recipient] == address(0)\r\n            && !isContract(sender)\r\n            && !isContract(recipient)\r\n            ){\r\n            _referee[recipient] = sender;\r\n        }\r\n        \r\n        _balances[recipient] = _balances[recipient].add(amountRecipient);\r\n        \r\n        emit Transfer(sender, recipient, amountRecipient);\r\n    }\r\n    \r\n    // 2\u5ba3\u53d1 2\u57fa\u91d1\u4f1a 3\u63a8\u5e7f(\u7b2c\u4e00\u4ee32\uff0c\u7b2c\u4e8c\u4ee31) \u6ca1\u6709\u7ed1\u5b9a\u63a8\u8350\u5173\u7cfb\uff0c\u591a\u4f59\u7684A\u5206\u914d\u7ed9B\r\n    // 3\u5206\u914dB\u5e01\uff08\u6b64\u90e8\u5206\u4e70\u5165A\u5e01\u7684U\u56de\u6d41\u5230B\u5e01\u5e95\u6c60\uff0c\u540c\u65f6\u6309\u7167B\u5e01\u65f6\u4ef7\u7b49\u503c\u5151\u6362B\u5e01\u7ed9\u7528\u6237\uff0c\u540c\u65f6\u9500\u6bc1\u7ba1\u7406\u5458\u8d26\u6237\u7b49\u91cf\u7684A\uff09\r\n    // 5LP\u5206\u7ea2B\u5e01\r\n    function _distBuyFee(address recipient, uint256 amountFee) internal lockSwapFee(){\r\n        _balances[_propagandaAddress] = _balances[_propagandaAddress].add(amountFee.mul(2).div(15));\r\n        emit Transfer(tx.origin, _propagandaAddress, amountFee.mul(2).div(15));\r\n        _balances[_foundationAddress] = _balances[_foundationAddress].add(amountFee.mul(2).div(15));\r\n        emit Transfer(tx.origin, _foundationAddress, amountFee.mul(2).div(15));\r\n        uint256 refereeRate = _promotionReward(amountFee);\r\n        _distB(amountFee.mul(3).div(15), recipient);\r\n        _distB(amountFee.mul(8 - refereeRate).div(15), _lpAddress);            \r\n    }\r\n    \r\n    // 2\u5ba3\u53d1 1\u5206\u914dB\u5e01 5\u8fdb\u5165B\u5e01U\u6c60\u5b50\uff08\u6b64\u90e8\u4efd\u5356\u51faA\u5e01\u7684U\u56de\u6d41\u5230B\u5e01\u5e95\u6c60\uff0c\u540c\u65f6\uff0c\u8be5\u90e8\u4efdA\u5e01\u8fdb\u5165\u9ed1\u6d1e\u9500\u6bc1\uff097LP\u5206\u7ea2B\u5e01\r\n    function _distSellFee(address sender, uint256 amountFee) internal lockSwapFee(){\r\n        _balances[_propagandaAddress] = _balances[_propagandaAddress].add(amountFee.mul(4).div(15));\r\n        emit Transfer(tx.origin, _propagandaAddress, amountFee.mul(4).div(15));\r\n        _distB(amountFee.mul(1).div(15), sender);\r\n        _distB(amountFee.mul(5).div(15), address(this));\r\n        _distB(amountFee.mul(5).div(15), _lpAddress);\r\n    }\r\n    \r\n    function thisAToB() external{\r\n        _thisAToB();\r\n    }\r\n    \r\n    function _thisAToB() internal{\r\n        if (_balances[address(this)] > _minAToB){\r\n            uint256 burnNumber = _balances[address(this)];\r\n            _approve(address(this),_pancakeRouterToken, _balances[address(this)]);\r\n            IPancakeRouter(_pancakeRouterToken).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                _balances[address(this)],\r\n                0,\r\n                _pathAToB,\r\n                address(this),\r\n                block.timestamp);\r\n            _burn(_swapV2Pair, burnNumber);\r\n            IPancakePair(_swapV2Pair).sync();\r\n        }\r\n    }\r\n    \r\n    function _distB(uint amountA, address to) internal {\r\n        uint amountToSender = _atoB(amountA);\r\n        if(address(this) != to){\r\n            IBEP20(_allToken).transfer(to, amountToSender);\r\n        }\r\n        _balances[address(this)] = _balances[address(this)].add(amountA);\r\n    }\r\n    \r\n    function _atoB(uint amountA) internal view returns(uint amountB){\r\n        uint amountUSDT = _tokenACalcTokenB(amountA, address(this), _usdtToken);\r\n        amountB = _tokenACalcTokenB(amountUSDT, _usdtToken, _allToken);\r\n    }\r\n    \r\n    function _tokenACalcTokenB(uint amountIn , address tokenIn, address tokenOut) internal view returns(uint amountOut){\r\n        address factory = IPancakeRouter(_pancakeRouterToken).factory();\r\n        address pair = IPancakeFactory(factory).getPair(tokenIn, tokenOut);\r\n        require(address(pair) != address(0), \"no start\");\r\n        \r\n        \r\n        (uint112 _reserve0, uint112 _reserve1,) = IPancakePair(pair).getReserves();\r\n        (uint112 _reserveIn, uint112 _reserveOut) = tokenIn == IPancakePair(pair).token0() ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\r\n        amountOut = IPancakeRouter(_pancakeRouterToken).getAmountOut(amountIn, _reserveIn, _reserveOut);\r\n    }\r\n      \r\n    function _isBuySwap(uint256 amount) internal view returns(bool){\r\n        address token0 = IPancakePair(_swapV2Pair).token0();\r\n        address token1 = IPancakePair(_swapV2Pair).token1();\r\n        \r\n        address tokenB = token0 == address(this) ? token1 : token0;\r\n        (uint112 _reserve0, uint112 _reserve1,) = IPancakePair(_swapV2Pair).getReserves(); // gas savings\r\n        if(_reserve0 == 0 && _reserve1 == 0)return false;\r\n        (uint112 _reserveA, uint112 _reserveUSDT) = address(this) == token0 ? (_reserve0, _reserve1) : (_reserve1 , _reserve0);\r\n        \r\n        if (IBEP20(tokenB).balanceOf(_swapV2Pair) > _reserveUSDT){\r\n            uint256 amountIn = IPancakeRouter(_pancakeRouterToken).quote(amount, _reserveA, _reserveUSDT);\r\n            if(IBEP20(tokenB).balanceOf(_swapV2Pair).sub(_reserveUSDT) >= amountIn.mul(8).div(10)){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function _isSellSwap(uint256 amount) internal view returns (bool){\r\n        address token0 = IPancakePair(_swapV2Pair).token0();\r\n        address token1 = IPancakePair(_swapV2Pair).token1();\r\n        \r\n        address tokenB = token0 == address(this) ? token1 : token0;\r\n        (uint112 _reserve0, uint112 _reserve1,) = IPancakePair(_swapV2Pair).getReserves(); // gas savings\r\n        if(_reserve0 == 0 && _reserve1 == 0)return false;\r\n        \r\n        (uint112 _reserveA, uint112 _reserveUSDT) = address(this) == token0 ? (_reserve0, _reserve1) : (_reserve1 , _reserve0);\r\n        \r\n        if (IBEP20(tokenB).balanceOf(_swapV2Pair) > _reserveUSDT){\r\n            uint amountBOptimal = IPancakeRouter(_pancakeRouterToken).quote(amount, _reserveA, _reserveUSDT);\r\n            if(IBEP20(tokenB).balanceOf(_swapV2Pair).sub(_reserveUSDT) >= amountBOptimal){\r\n                require(uint256(amountBOptimal) >= 100 * 10 ** 18, \"addLiquidity min 100 USDT\");\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n    \r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n    \r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n \r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n    \r\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n    \r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n \r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\r\n    }\r\n  \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_lpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_referee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_swapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressBlack\",\"type\":\"address\"}],\"name\":\"addBlack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressWhite\",\"type\":\"address\"}],\"name\":\"addWhite\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressWhite\",\"type\":\"address\"}],\"name\":\"addWhiteContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"bindReferee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"foundationAddress\",\"type\":\"address\"}],\"name\":\"setFoundationAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"name\":\"setLpAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"setMinAToB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"propagandaAddress\",\"type\":\"address\"}],\"name\":\"setPropagandaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"thisAToB\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BEP20TokenA", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f53ff2f90ab93a429b5c6ac0e62825e50ccee19500000000000000000000000038f7ecc24f5c00840f07e59cdda9280493794609", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d3e9040a168c9adc8177c6705d89ff72d6141ca5837681255ac6c82931500cc8"}