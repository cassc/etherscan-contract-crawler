{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FarmDeployer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./IFarmDeployer.sol\\\";\\r\\n\\r\\n\\r\\ncontract FarmDeployer is Ownable, IFarmDeployer {\\r\\n\\r\\n    event DeployedERC20Farm(\\r\\n        address farmAddress,\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        uint256 _earlyWithdrawalFee,\\r\\n        address _feeReceiver,\\r\\n        bool _keepReflectionOnDeposit,\\r\\n        address owner\\r\\n    );\\r\\n\\r\\n    event DeployedERC20FarmFixEnd(\\r\\n        address farmAddress,\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        uint256 _earlyWithdrawalFee,\\r\\n        address _feeReceiver,\\r\\n        address owner\\r\\n    );\\r\\n\\r\\n    event DeployedERC721Farm(\\r\\n        address farmAddress,\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        address owner\\r\\n    );\\r\\n\\r\\n    event DeployedERC721FarmFixEnd(\\r\\n        address farmAddress,\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        address owner\\r\\n    );\\r\\n\\r\\n    event NewDeploymentCost(uint256);\\r\\n    event NewIncomeFee(uint256);\\r\\n    event NewMaxLockTime(uint256);\\r\\n    event NewFeeReceiver(address payable);\\r\\n    event SetFarmDeployers(\\r\\n        IFarmDeployer20 farmDeployer20,\\r\\n        IFarmDeployer20FixEnd farmDeployer20FixEnd,\\r\\n        IFarmDeployer721 farmDeployer721,\\r\\n        IFarmDeployer721 farmDeployer721FixEnd\\r\\n    );\\r\\n\\r\\n    uint256 public deploymentCost;\\r\\n    uint256 public maxLockTime;\\r\\n    uint256 public incomeFee;\\r\\n    address payable public feeReceiver;\\r\\n\\r\\n    IFarmDeployer20 public farmDeployer20;\\r\\n    IFarmDeployer20FixEnd public farmDeployer20FixEnd;\\r\\n    IFarmDeployer721 public farmDeployer721;\\r\\n    IFarmDeployer721 public farmDeployer721FixEnd;\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Initialize the contract\\r\\n     * @param _deploymentCost: Cost of pool creation (in BNB)\\r\\n     * @param _maxLockTime: Maximum number of blocks, that pools are allowed\\r\\n     * to demand for locking deposits\\r\\n     * @param _incomeFee: Amount of income fee (for reward tokens, in basis points)\\r\\n     * @param _feeReceiver: Address of receiver for deployment cost fee and reward tokens fee\\r\\n     */\\r\\n    constructor(\\r\\n        uint256 _deploymentCost,\\r\\n        uint256 _maxLockTime,\\r\\n        uint256 _incomeFee,\\r\\n        address payable _feeReceiver\\r\\n    ) {\\r\\n        require(_feeReceiver != address(0));\\r\\n        deploymentCost = _deploymentCost;\\r\\n        maxLockTime = _maxLockTime;\\r\\n        feeReceiver = _feeReceiver;\\r\\n        incomeFee = _incomeFee;\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Deploys ERC20Farm contract. Requires amount of BNB to be paid\\r\\n     * @param _stakeToken: Stake token contract address\\r\\n     * @param _rewardToken: Reward token contract address\\r\\n     * @param _startBlock: Start block\\r\\n     * @param _rewardPerBlock: Reward per block (in rewardToken)\\r\\n     * @param _userStakeLimit: Maximum amount of tokens a user is allowed to stake (if any, else 0)\\r\\n     * @param _minimumLockTime: Minimum number of blocks user should wait after deposit to withdraw without fee\\r\\n     * @param _earlyWithdrawalFee: Fee for early withdrawal - in basis points\\r\\n     * @param _feeReceiver: Receiver of early withdrawal fees\\r\\n     * @param _keepReflectionOnDeposit: Should the farm keep track of reflection tokens on deposit?\\r\\n     * @return farmAddress: Address of deployed pool contract\\r\\n     */\\r\\n    function deployERC20Farm(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        uint256 _earlyWithdrawalFee,\\r\\n        address _feeReceiver,\\r\\n        bool _keepReflectionOnDeposit\\r\\n    ) external payable returns(address farmAddress){\\r\\n        require(msg.value >= deploymentCost, \\\"Not enough ETH\\\");\\r\\n        require(_minimumLockTime <= maxLockTime, \\\"Over max lock time\\\");\\r\\n        require(_earlyWithdrawalFee <= 10000);\\r\\n        feeReceiver.transfer(msg.value);\\r\\n\\r\\n        farmAddress = farmDeployer20.deploy(\\r\\n                _stakeToken,\\r\\n                _rewardToken,\\r\\n                _startBlock,\\r\\n                _rewardPerBlock,\\r\\n                _userStakeLimit,\\r\\n                _minimumLockTime,\\r\\n                _earlyWithdrawalFee,\\r\\n                _feeReceiver,\\r\\n                _keepReflectionOnDeposit,\\r\\n                msg.sender\\r\\n            );\\r\\n\\r\\n        emit DeployedERC20Farm(\\r\\n            farmAddress,\\r\\n            _stakeToken,\\r\\n            _rewardToken,\\r\\n            _startBlock,\\r\\n            _rewardPerBlock,\\r\\n            _userStakeLimit,\\r\\n            _minimumLockTime,\\r\\n            _earlyWithdrawalFee,\\r\\n            _feeReceiver,\\r\\n            _keepReflectionOnDeposit,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Deploys ERC20FarmFixEnd contract. Requires amount of BNB to be paid\\r\\n     * @param _stakeToken: Stake token contract address\\r\\n     * @param _rewardToken: Reward token contract address\\r\\n     * @param _startBlock: Start block\\r\\n     * @param _endBlock: End block of reward distribution\\r\\n     * @param _userStakeLimit: Maximum amount of tokens a user is allowed to stake (if any, else 0)\\r\\n     * @param _minimumLockTime: Minimum number of blocks user should wait after deposit to withdraw without fee\\r\\n     * @param _earlyWithdrawalFee: Fee for early withdrawal - in basis points\\r\\n     * @param _feeReceiver: Receiver of early withdrawal fees\\r\\n     * @param _keepReflectionOnDeposit: Should the farm keep track of reflection tokens on deposit?\\r\\n     * @return farmAddress: Address of deployed pool contract\\r\\n     */\\r\\n    function deployERC20FarmFixEnd(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        uint256 _earlyWithdrawalFee,\\r\\n        address _feeReceiver\\r\\n    ) external payable returns(address farmAddress){\\r\\n        require(msg.value >= deploymentCost, \\\"Not enough ETH\\\");\\r\\n        require(_minimumLockTime <= maxLockTime, \\\"Over max lock time\\\");\\r\\n        require(_earlyWithdrawalFee <= 10000);\\r\\n        feeReceiver.transfer(msg.value);\\r\\n\\r\\n        farmAddress = farmDeployer20FixEnd.deploy(\\r\\n                _stakeToken,\\r\\n                _rewardToken,\\r\\n                _startBlock,\\r\\n                _endBlock,\\r\\n                _userStakeLimit,\\r\\n                _minimumLockTime,\\r\\n                _earlyWithdrawalFee,\\r\\n                _feeReceiver,\\r\\n                msg.sender\\r\\n            );\\r\\n\\r\\n        emit DeployedERC20FarmFixEnd(\\r\\n            farmAddress,\\r\\n            _stakeToken,\\r\\n            _rewardToken,\\r\\n            _startBlock,\\r\\n            _endBlock,\\r\\n            _userStakeLimit,\\r\\n            _minimumLockTime,\\r\\n            _earlyWithdrawalFee,\\r\\n            _feeReceiver,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Deploys ERC721Farm contract. Requires amount of BNB to be paid\\r\\n     * @param _stakeToken: Stake token address\\r\\n     * @param _rewardToken: Reward token address\\r\\n     * @param _startBlock: Start block\\r\\n     * @param _rewardPerBlock: Reward per block (in rewardToken)\\r\\n     * @param _userStakeLimit: Maximum amount of tokens a user is allowed to stake (if any, else 0)\\r\\n     * @param _minimumLockTime: Minimum number of blocks user should wait after deposit to withdraw without fee\\r\\n     * @return farmAddress: Address of deployed pool contract\\r\\n     */\\r\\n    function deployERC721Farm(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime\\r\\n    ) external payable returns(address farmAddress){\\r\\n        require(msg.value >= deploymentCost, \\\"Not enough ETH\\\");\\r\\n        require(_minimumLockTime <= maxLockTime, \\\"Over max lock time\\\");\\r\\n        feeReceiver.transfer(msg.value);\\r\\n\\r\\n        farmAddress = farmDeployer721.deploy(\\r\\n                _stakeToken,\\r\\n                _rewardToken,\\r\\n                _startBlock,\\r\\n                _rewardPerBlock,\\r\\n                _userStakeLimit,\\r\\n                _minimumLockTime,\\r\\n                msg.sender\\r\\n            );\\r\\n\\r\\n        emit DeployedERC721Farm(\\r\\n            farmAddress,\\r\\n            _stakeToken,\\r\\n            _rewardToken,\\r\\n            _startBlock,\\r\\n            _rewardPerBlock,\\r\\n            _userStakeLimit,\\r\\n            _minimumLockTime,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Deploys ERC721FarmFixEnd contract. Requires amount of BNB to be paid\\r\\n     * @param _stakeToken: Stake token address\\r\\n     * @param _rewardToken: Reward token address\\r\\n     * @param _startBlock: Start block\\r\\n     * @param _endBlock: End block of reward distribution\\r\\n     * @param _userStakeLimit: Maximum amount of tokens a user is allowed to stake (if any, else 0)\\r\\n     * @param _minimumLockTime: Minimum number of blocks user should wait after deposit to withdraw without fee\\r\\n     * @return farmAddress: Address of deployed pool contract\\r\\n     */\\r\\n    function deployERC721FarmFixEnd(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime\\r\\n    ) external payable returns(address farmAddress){\\r\\n        require(msg.value >= deploymentCost, \\\"Not enough ETH\\\");\\r\\n        require(_minimumLockTime <= maxLockTime, \\\"Over max lock time\\\");\\r\\n        feeReceiver.transfer(msg.value);\\r\\n\\r\\n        farmAddress = farmDeployer721FixEnd.deploy(\\r\\n                _stakeToken,\\r\\n                _rewardToken,\\r\\n                _startBlock,\\r\\n                    _endBlock,\\r\\n                _userStakeLimit,\\r\\n                _minimumLockTime,\\r\\n                msg.sender\\r\\n            );\\r\\n\\r\\n        emit DeployedERC721FarmFixEnd(\\r\\n            farmAddress,\\r\\n            _stakeToken,\\r\\n            _rewardToken,\\r\\n            _startBlock,\\r\\n            _endBlock,\\r\\n            _userStakeLimit,\\r\\n            _minimumLockTime,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Sets farm deployers contracts\\r\\n     * @param _farmDeployer20: ERC20 farm deployer address with fixed reward per block\\r\\n     * @param _farmDeployer20FixEnd: ERC20 farm deployer address with fixed end block\\r\\n     * @param _farmDeployer721: ERC721 farm deployer address with fixed reward per block\\r\\n     * @param _farmDeployer721FixEnd: ERC721 farm deployer address with fixed end block\\r\\n     */\\r\\n    function setDeployers(\\r\\n        IFarmDeployer20 _farmDeployer20,\\r\\n        IFarmDeployer20FixEnd _farmDeployer20FixEnd,\\r\\n        IFarmDeployer721 _farmDeployer721,\\r\\n        IFarmDeployer721 _farmDeployer721FixEnd\\r\\n    ) external onlyOwner {\\r\\n        farmDeployer20 = _farmDeployer20;\\r\\n        farmDeployer20FixEnd = _farmDeployer20FixEnd;\\r\\n        farmDeployer721 = _farmDeployer721;\\r\\n        farmDeployer721FixEnd = _farmDeployer721FixEnd;\\r\\n\\r\\n        emit SetFarmDeployers(\\r\\n            _farmDeployer20,\\r\\n            _farmDeployer20FixEnd,\\r\\n            _farmDeployer721,\\r\\n            _farmDeployer721FixEnd\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Sets the cost for deploying pools\\r\\n     * @param _deploymentCost: Amount of BNB to pay\\r\\n     */\\r\\n    function setDeploymentCost(uint256 _deploymentCost) external onlyOwner {\\r\\n        require(deploymentCost != _deploymentCost, \\\"Already set\\\");\\r\\n        deploymentCost = _deploymentCost;\\r\\n\\r\\n        emit NewDeploymentCost(_deploymentCost);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Sets fee receiver address\\r\\n     * @param _feeReceiver: Address of fee receiver\\r\\n     */\\r\\n    function setFeeReceiver(address payable _feeReceiver) external onlyOwner {\\r\\n        require(feeReceiver != _feeReceiver, \\\"Already set\\\");\\r\\n        require(address(0) != _feeReceiver);\\r\\n        feeReceiver = _feeReceiver;\\r\\n\\r\\n        emit NewFeeReceiver(_feeReceiver);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Sets income fee share for the pools\\r\\n     * @param _incomeFee: Income fee (in basis points)\\r\\n     * (can't be higher than 5000 (50%)\\r\\n     */\\r\\n    function setIncomeFee(uint256 _incomeFee) external onlyOwner {\\r\\n        require(_incomeFee <= 5000, \\\"Over 50%\\\");\\r\\n        incomeFee = _incomeFee;\\r\\n\\r\\n        emit NewIncomeFee(_incomeFee);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Sets Maximum number of blocks, that pools are allowed\\r\\n     * to demand for locking deposits\\r\\n     * @param _maxLockTime: Maximum number of blocks, that pools are allowed\\r\\n     * to demand for locking deposits\\r\\n     */\\r\\n    function setMaxLockTime(uint256 _maxLockTime) external onlyOwner {\\r\\n        require(maxLockTime != _maxLockTime, \\\"Already set\\\");\\r\\n        maxLockTime = _maxLockTime;\\r\\n\\r\\n        emit NewMaxLockTime(_maxLockTime);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IFarmDeployer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\ninterface IFarmDeployer {\\r\\n    function maxLockTime() external returns(uint256);\\r\\n    function incomeFee() external returns(uint256);\\r\\n    function feeReceiver() external returns(address payable);\\r\\n}\\r\\n\\r\\ninterface IFarmDeployer20 {\\r\\n    function farmDeployer() external returns(address);\\r\\n    function deploy(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        uint256 _earlyWithdrawalFee,\\r\\n        address _feeReceiver,\\r\\n        bool _keepReflectionOnDeposit,\\r\\n        address owner\\r\\n    ) external returns(address);\\r\\n}\\r\\n\\r\\ninterface IFarmDeployer20FixEnd {\\r\\n    function farmDeployer() external returns(address);\\r\\n    function deploy(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        uint256 _earlyWithdrawalFee,\\r\\n        address _feeReceiver,\\r\\n        address owner\\r\\n    ) external returns(address);\\r\\n}\\r\\n\\r\\ninterface IFarmDeployer721 {\\r\\n    function farmDeployer() external returns(address);\\r\\n    function deploy(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        address owner\\r\\n    ) external returns(address);\\r\\n}\\r\\n\\r\\ninterface IFarmDeployer721FixEnd {\\r\\n    function farmDeployer() external returns(address);\\r\\n    function deploy(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        address owner\\r\\n    ) external returns(address);\\r\\n}\\r\\n\\r\\ninterface IERC20Farm {\\r\\n    function initialize(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        uint256 _earlyWithdrawalFee,\\r\\n        address _feeReceiver,\\r\\n        bool _keepReflectionOnDeposit,\\r\\n        address owner\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IERC20FarmFixEnd {\\r\\n    function initialize(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        uint256 _earlyWithdrawalFee,\\r\\n        address _feeReceiver,\\r\\n        address owner\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IERC721Farm {\\r\\n    function initialize(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _rewardPerBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        address owner\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IERC721FarmFixEnd {\\r\\n    function initialize(\\r\\n        address _stakeToken,\\r\\n        address _rewardToken,\\r\\n        uint256 _startBlock,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _userStakeLimit,\\r\\n        uint256 _minimumLockTime,\\r\\n        address owner\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incomeFee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userStakeLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_earlyWithdrawalFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_keepReflectionOnDeposit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DeployedERC20Farm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userStakeLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_earlyWithdrawalFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DeployedERC20FarmFixEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userStakeLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DeployedERC721Farm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userStakeLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"DeployedERC721FarmFixEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewDeploymentCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NewFeeReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewIncomeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewMaxLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IFarmDeployer20\",\"name\":\"farmDeployer20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IFarmDeployer20FixEnd\",\"name\":\"farmDeployer20FixEnd\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IFarmDeployer721\",\"name\":\"farmDeployer721\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IFarmDeployer721\",\"name\":\"farmDeployer721FixEnd\",\"type\":\"address\"}],\"name\":\"SetFarmDeployers\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userStakeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumLockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlyWithdrawalFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_keepReflectionOnDeposit\",\"type\":\"bool\"}],\"name\":\"deployERC20Farm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userStakeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumLockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlyWithdrawalFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"deployERC20FarmFixEnd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userStakeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumLockTime\",\"type\":\"uint256\"}],\"name\":\"deployERC721Farm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userStakeLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumLockTime\",\"type\":\"uint256\"}],\"name\":\"deployERC721FarmFixEnd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploymentCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmDeployer20\",\"outputs\":[{\"internalType\":\"contract IFarmDeployer20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmDeployer20FixEnd\",\"outputs\":[{\"internalType\":\"contract IFarmDeployer20FixEnd\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmDeployer721\",\"outputs\":[{\"internalType\":\"contract IFarmDeployer721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmDeployer721FixEnd\",\"outputs\":[{\"internalType\":\"contract IFarmDeployer721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incomeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFarmDeployer20\",\"name\":\"_farmDeployer20\",\"type\":\"address\"},{\"internalType\":\"contract IFarmDeployer20FixEnd\",\"name\":\"_farmDeployer20FixEnd\",\"type\":\"address\"},{\"internalType\":\"contract IFarmDeployer721\",\"name\":\"_farmDeployer721\",\"type\":\"address\"},{\"internalType\":\"contract IFarmDeployer721\",\"name\":\"_farmDeployer721FixEnd\",\"type\":\"address\"}],\"name\":\"setDeployers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deploymentCost\",\"type\":\"uint256\"}],\"name\":\"setDeploymentCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_incomeFee\",\"type\":\"uint256\"}],\"name\":\"setIncomeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLockTime\",\"type\":\"uint256\"}],\"name\":\"setMaxLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FarmDeployer", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000000000000000d2f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf4b5e2ab674e30ccb37ad5ea926169bbde562a0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}