{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract AbsPreSale is Ownable {\r\n    struct SaleInfo {\r\n        uint256 price;\r\n        uint256 saleNum;\r\n        address cashAddress;\r\n    }\r\n\r\n    struct UserInfo {\r\n        bool isActive;\r\n        uint256 buyUsdtAmount;\r\n        uint256 inviteUsdt;\r\n    }\r\n\r\n    address private _usdtAddress;\r\n\r\n    SaleInfo[] private _saleInfo;\r\n    mapping(address => UserInfo) private _userInfo;\r\n\r\n    bool private _pauseBuy = false;\r\n\r\n    uint256 private _totalUsdt;\r\n    uint256 private _totalInviteUsdt;\r\n\r\n    mapping(address => address) public _invitor;\r\n    mapping(address => address[]) public _binder;\r\n    mapping(uint256 => uint256) public _inviteFee;\r\n    mapping(uint256 => uint256) public _inviteFeeCondition;\r\n    uint256 private constant _inviteLen = 3;\r\n    mapping(uint256 => address[]) public _saleAccounts;\r\n    mapping(uint256 => mapping(address => uint256)) public _teamNum;\r\n\r\n    constructor(\r\n        address UsdtAddress\r\n    ){\r\n        _usdtAddress = UsdtAddress;\r\n        _inviteFee[0] = 500;\r\n        _inviteFee[1] = 200;\r\n        _inviteFee[2] = 300;\r\n\r\n        _inviteFeeCondition[0] = 1;\r\n        _inviteFeeCondition[1] = 3;\r\n        _inviteFeeCondition[2] = 4;\r\n\r\n        uint256 usdtUnit = 10 ** IERC20(UsdtAddress).decimals();\r\n        _saleInfo.push(SaleInfo(100 * usdtUnit, 0, address(0x0c999d86A916F4ec9421FFbC3cD533D46c64105C)));\r\n        _saleInfo.push(SaleInfo(300 * usdtUnit, 0, address(0x8bf7664197e7A156804aab0a6457cE7AEE1299c5)));\r\n        _saleInfo.push(SaleInfo(1000 * usdtUnit, 0, address(0x9e0CFd03e14AF51EBC0420720Bf0F8B92b7c3bCE)));\r\n    }\r\n\r\n    function buy(uint256 saleId, address invitor) external {\r\n        require(!_pauseBuy, \"pauseBuy\");\r\n\r\n        address account = msg.sender;\r\n        _bindInvitor(account, invitor);\r\n\r\n        SaleInfo storage sale = _saleInfo[saleId];\r\n        sale.saleNum += 1;\r\n\r\n        uint256 price = sale.price;\r\n\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        require(0 == userInfo.buyUsdtAmount, \"bought\");\r\n        userInfo.buyUsdtAmount += price;\r\n\r\n        _totalUsdt += price;\r\n\r\n        address usdtAddress = _usdtAddress;\r\n\r\n        uint256 len = _inviteLen;\r\n        address current = account;\r\n        uint256 totalInviteUsdt;\r\n        for (uint256 i; i < len; ++i) {\r\n            invitor = _invitor[current];\r\n            if (address(0) == invitor) {\r\n                break;\r\n            }\r\n\r\n            if (_binder[invitor].length >= _inviteFeeCondition[i]) {\r\n                uint256 inviteAmount = price * _inviteFee[i] / 10000;\r\n                totalInviteUsdt += inviteAmount;\r\n                _userInfo[invitor].inviteUsdt += inviteAmount;\r\n                _takeToken(usdtAddress, account, invitor, inviteAmount);\r\n            }\r\n\r\n            current = invitor;\r\n        }\r\n\r\n        _takeToken(usdtAddress, account, sale.cashAddress, price - totalInviteUsdt);\r\n        _totalInviteUsdt += totalInviteUsdt;\r\n        _saleAccounts[saleId].push(account);\r\n    }\r\n\r\n    function _bindInvitor(address account, address invitor) private {\r\n        UserInfo storage user = _userInfo[account];\r\n        if (!user.isActive) {\r\n            if (_userInfo[invitor].isActive) {\r\n                _invitor[account] = invitor;\r\n                _binder[invitor].push(account);\r\n                for (uint256 i; i < _inviteLen;) {\r\n                    if (address(0) == invitor) {\r\n                        break;\r\n                    }\r\n                    _teamNum[i][invitor] += 1;\r\n                    invitor = _invitor[invitor];\r\n                unchecked{\r\n                    ++i;\r\n                }\r\n                }\r\n            }\r\n            user.isActive = true;\r\n        }\r\n    }\r\n\r\n    function _giveToken(address tokenAddress, address account, uint256 amount) private {\r\n        if (0 == amount) {\r\n            return;\r\n        }\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.balanceOf(address(this)) >= amount, \"PTNE\");\r\n        safeTransfer(tokenAddress, account, amount);\r\n    }\r\n\r\n    function _takeToken(address tokenAddress, address from, address to, uint256 tokenNum) private {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.balanceOf(address(from)) >= tokenNum, \"TNE\");\r\n        safeTransferFrom(tokenAddress, from, to, tokenNum);\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TF');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value : value}(new bytes(0));\r\n        require(success, 'ETF');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TFF');\r\n    }\r\n\r\n    function allSaleInfo() external view returns (\r\n        uint256[] memory prices, uint256[] memory saleNum, address[] memory cashAddress\r\n    ) {\r\n        uint256 len = _saleInfo.length;\r\n        prices = new uint256[](len);\r\n        saleNum = new uint256[](len);\r\n        cashAddress = new address[](len);\r\n        for (uint256 i; i < len; i++) {\r\n            SaleInfo storage sale = _saleInfo[i];\r\n            prices[i] = sale.price;\r\n            saleNum[i] = sale.saleNum;\r\n            cashAddress[i] = sale.cashAddress;\r\n        }\r\n    }\r\n\r\n    function shopInfo() external view returns (\r\n        address usdtAddress, uint256 usdtDecimals, string memory usdtSymbol,\r\n        bool pauseBuy, uint256 totalUsdt, uint256 totalInviteUsdt\r\n    ){\r\n        usdtAddress = _usdtAddress;\r\n        usdtDecimals = IERC20(usdtAddress).decimals();\r\n        usdtSymbol = IERC20(usdtAddress).symbol();\r\n        pauseBuy = _pauseBuy;\r\n        totalUsdt = _totalUsdt;\r\n        totalInviteUsdt = _totalInviteUsdt;\r\n    }\r\n\r\n    function getUserInfo(address account) external view returns (\r\n        uint256 usdtBalance, uint256 usdtAllowance,\r\n        uint256 buyUsdtAmount, uint256 inviteUsdt,\r\n        bool isActive, address invitor,\r\n        uint256 binder0Length, uint256 binder1Length, uint256 binder2Length\r\n    ){\r\n        usdtBalance = IERC20(_usdtAddress).balanceOf(account);\r\n        usdtAllowance = IERC20(_usdtAddress).allowance(account, address(this));\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        buyUsdtAmount = userInfo.buyUsdtAmount;\r\n        inviteUsdt = userInfo.inviteUsdt;\r\n        isActive = userInfo.isActive;\r\n        invitor = _invitor[account];\r\n        binder0Length = _teamNum[0][account];\r\n        binder1Length = _teamNum[1][account];\r\n        binder2Length = _teamNum[2][account];\r\n    }\r\n\r\n    function getBinderLength(address account) public view returns (uint256){\r\n        return _binder[account].length;\r\n    }\r\n\r\n    function getSaleAccountLength(uint256 i) public view returns (uint256){\r\n        return _saleAccounts[i].length;\r\n    }\r\n\r\n    function getSaleAccounts(uint256 i) public view returns (address[] memory accounts){\r\n        accounts = _saleAccounts[i];\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function addSale(uint256 usdtAmount, address cash) external onlyOwner {\r\n        _saleInfo.push(SaleInfo(usdtAmount, 0, cash));\r\n    }\r\n\r\n    function setPrice(uint256 saleId, uint256 price) external onlyOwner {\r\n        _saleInfo[saleId].price = price;\r\n    }\r\n\r\n    function setTokenAmount(uint256 saleId, address cash) external onlyOwner {\r\n        _saleInfo[saleId].cashAddress = cash;\r\n    }\r\n\r\n    function setUsdtAddress(address adr) external onlyOwner {\r\n        _usdtAddress = adr;\r\n    }\r\n\r\n    function setPauseBuy(bool pause) external onlyOwner {\r\n        _pauseBuy = pause;\r\n    }\r\n\r\n    function setInviteFee(uint256 i, uint256 fee) external onlyOwner {\r\n        _inviteFee[i] = fee;\r\n    }\r\n\r\n    function setInviteFeeCondition(uint256 i, uint256 c) external onlyOwner {\r\n        _inviteFeeCondition[i] = c;\r\n    }\r\n\r\n    function claimBalance(address to, uint256 amount) external onlyOwner {\r\n        safeTransferETH(to, amount);\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external onlyOwner {\r\n        _giveToken(token, to, amount);\r\n    }\r\n}\r\n\r\ncontract TokenSale is AbsPreSale {\r\n    constructor() AbsPreSale(\r\n    //USDT\r\n        address(0x55d398326f99059fF775485246999027B3197955)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_binder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_inviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_inviteFeeCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_invitor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_saleAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_teamNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cash\",\"type\":\"address\"}],\"name\":\"addSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allSaleInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"saleNum\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"cashAddress\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBinderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getSaleAccountLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getSaleAccounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyUsdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteUsdt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"binder0Length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"binder1Length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"binder2Length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setInviteFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setInviteFeeCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"setPauseBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cash\",\"type\":\"address\"}],\"name\":\"setTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setUsdtAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shopInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"usdtAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdtDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"usdtSymbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"pauseBuy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInviteUsdt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TokenSale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4c8470bd334955356c61ad2b7ce5f37d7c0e35299c378b59b2b2fe5d6d410381"}