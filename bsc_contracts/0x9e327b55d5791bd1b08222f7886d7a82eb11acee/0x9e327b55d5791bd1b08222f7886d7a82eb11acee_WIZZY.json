{"SourceCode": "/*\r\n \u2588     \u2588\u2591 \u2588\u2588\u2593\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2593\u2588\u2588   \u2588\u2588\u2593\r\n\u2593\u2588\u2591 \u2588 \u2591\u2588\u2591\u2593\u2588\u2588\u2592\u2592 \u2592 \u2592 \u2584\u2580\u2591\u2592 \u2592 \u2592 \u2584\u2580\u2591 \u2592\u2588\u2588  \u2588\u2588\u2592\r\n\u2592\u2588\u2591 \u2588 \u2591\u2588 \u2592\u2588\u2588\u2592\u2591 \u2592 \u2584\u2580\u2592\u2591 \u2591 \u2592 \u2584\u2580\u2592\u2591   \u2592\u2588\u2588 \u2588\u2588\u2591\r\n\u2591\u2588\u2591 \u2588 \u2591\u2588 \u2591\u2588\u2588\u2591  \u2584\u2580\u2592   \u2591  \u2584\u2580\u2592   \u2591  \u2591 \u2590\u2588\u2588\u2593\u2591\r\n\u2591\u2591\u2588\u2588\u2592\u2588\u2588\u2593 \u2591\u2588\u2588\u2591\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592  \u2591 \u2588\u2588\u2592\u2593\u2591\r\n\u2591 \u2593\u2591\u2592 \u2592  \u2591\u2593  \u2591\u2592\u2592 \u2593\u2591\u2592\u2591\u2592\u2591\u2592\u2592 \u2593\u2591\u2592\u2591\u2592   \u2588\u2588\u2592\u2592\u2592 \r\n  \u2592 \u2591 \u2591   \u2592 \u2591\u2591\u2591\u2592 \u2592 \u2591 \u2592\u2591\u2591\u2592 \u2592 \u2591 \u2592 \u2593\u2588\u2588 \u2591\u2592\u2591 \r\n  \u2591   \u2591   \u2592 \u2591\u2591 \u2591 \u2591 \u2591 \u2591\u2591 \u2591 \u2591 \u2591 \u2591 \u2592 \u2592 \u2591\u2591  \r\n    \u2591     \u2591    \u2591 \u2591      \u2591 \u2591     \u2591 \u2591     \r\n             \u2591        \u2591         \u2591 \u2591                                                                                  \r\n*/\r\n// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract WizContracts is Ownable {\r\n    mapping(address => bool) private wizardiumContracts;\r\n\r\n    function addToWizardiumContracts(address _wizContract) public onlyOwner {\r\n        require(!wizardiumContracts[_wizContract], \"This contract is already a wizardiumContract\");\r\n        wizardiumContracts[_wizContract] = true;\r\n    }\r\n    function removeWizardiumContract(address _wizContract) public onlyOwner {\r\n        wizardiumContracts[_wizContract] = false;\r\n    }\r\n\r\n    function isWizzContract(address _cont) public view returns(bool){\r\n        return(wizardiumContracts[_cont]);\r\n    }\r\n\r\n    modifier isWizContract() {\r\n        require(wizardiumContracts[_msgSender()], \"This contract is not a wizardium contract\");\r\n        _;\r\n    }\r\n}\r\n\r\nabstract contract BotProtection is Ownable {\r\n    uint256 private maxTradable = 10000 ether;\r\n    uint256 private constant botProtectionLength = 300; // in seconds\r\n\r\n    function setMaxTradable(uint256 _max) public onlyOwner {\r\n        maxTradable = _max;\r\n    }\r\n\r\n    function _scan(uint256 activationTS, uint256 amount, address from, address to) internal view returns(bool){\r\n        if(_msgSender() == owner() || (from == owner() || to == owner())){\r\n            return true;\r\n        }else{\r\n            require(activationTS != 0, \"WIZZY20: Token has not yet been activated\");\r\n            if(block.timestamp > activationTS+botProtectionLength){\r\n                return true;\r\n            }else{\r\n                require(amount <= maxTradable, \"Cannot trade more than the max the first 5 minutes\");\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier noBotAllowed(uint256 activationTS, uint256 amount, address from, address to) {\r\n       require(_scan(activationTS, amount, from, to), \"BotProtection: potential bot behavior\");\r\n        _;\r\n    }\r\n}\r\n\r\ninterface WIZZ20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface WIZZ20Metadata is WIZZ20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract WIZZY is BotProtection, WIZZ20, WIZZ20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private constant _maxSupply = 100000000 ether;\r\n    string private _name = \"WizardiumToken\";\r\n    string private _symbol = \"WIZZY\";\r\n\r\n    bool public active;\r\n    uint256 public activationTimestamp;\r\n    uint256 public transactionFees = 7; // Fees 7/1000 = 0.007 => 0.7% \r\n\r\n    function setTXNFees(uint256 _txnFee) external onlyOwner {\r\n        require(_txnFee <= 30, \"WIZZY20: transaction fees are capped at 3%\");\r\n        transactionFees = _txnFee;\r\n    }\r\n\r\n    enum Allocations {\r\n        INITIAL,\r\n        TEAM,\r\n        MARKETING,\r\n        PARTNERS,\r\n        NFTFARMING,\r\n        VESTING,\r\n        IDO,\r\n        STAKING,\r\n        RESERVE,\r\n        P2E\r\n    }\r\n\r\n    struct WizAllocations {\r\n        uint256 _allocationPercentage;\r\n        address _allocationAddress;\r\n        bool _allocated;\r\n    }\r\n\r\n    mapping(Allocations => WizAllocations) private _allocations;\r\n\r\n    constructor() {\r\n        initAllocations();\r\n    }\r\n\r\n    function ActivateWizzy() external onlyOwner {\r\n        require(!active, \"WIZZY20: can only activate the token contract once\");\r\n        activationTimestamp = block.timestamp;\r\n        active = true;\r\n    }\r\n\r\n\r\n    function initAllocations() internal {\r\n        _allocations[Allocations.INITIAL] = WizAllocations(40,msg.sender,false);\r\n        _allocations[Allocations.TEAM] = WizAllocations(120, address(0),  false);\r\n        _allocations[Allocations.MARKETING] = WizAllocations(86, msg.sender,  false);\r\n        _allocations[Allocations.PARTNERS] = WizAllocations(80, address(0),  false);\r\n        _allocations[Allocations.NFTFARMING] = WizAllocations(200, address(0),  false);\r\n        _allocations[Allocations.VESTING] = WizAllocations(50, address(0),  false);\r\n        _allocations[Allocations.IDO] = WizAllocations(34, address(0),  false);\r\n        _allocations[Allocations.STAKING] = WizAllocations(100, address(0), false);\r\n        _allocations[Allocations.RESERVE] = WizAllocations(140, address(0),  false);\r\n        _allocations[Allocations.P2E] = WizAllocations(150, address(0), false);\r\n    }\r\n\r\n    function setAllocAddress(Allocations alloc, address allocAddr) external onlyOwner {\r\n        require(_allocations[alloc]._allocationAddress == address(0),\"WIZZY20: allocation already has an address\");\r\n        _allocations[alloc]._allocationAddress = allocAddr;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function maxSupply() public pure returns(uint256) {\r\n        return _maxSupply;\r\n    }\r\n \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom( address sender,address recipient,uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"WIZZY20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"WIZZY20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function releaseAllocation(Allocations alloc) external onlyOwner {\r\n        require(_canAllocate(alloc), \"WIZZY20: Cannot Allocate Funds\");\r\n        _mint(_allocations[alloc]._allocationAddress, _calculateAllocation(_allocations[alloc]._allocationPercentage));\r\n        _allocations[alloc]._allocated = true;\r\n    }\r\n\r\n    function _calculateAllocation(uint256 allocPercentage) internal pure returns(uint256){\r\n        return(((allocPercentage*_maxSupply)/1000));\r\n    }\r\n\r\n    function _canAllocate(Allocations alloc) internal view returns(bool) {\r\n        require(!_allocations[alloc]._allocated, \"WIZZY20: Already Allocated\");\r\n        require(_allocations[alloc]._allocationAddress != address(0), \"WIZZY20: Cannot allocate to zero address\");\r\n        return true;\r\n    }\r\n\r\n    function _calculateTXNFees(uint256 amount) internal view returns(uint256 postAmount, uint256 feesAmount){\r\n        if(amount > 1 ether){\r\n            feesAmount = ((amount*transactionFees)/1000);\r\n        }else{\r\n            feesAmount = 0;\r\n        }\r\n        postAmount = (amount - feesAmount);\r\n    }\r\n\r\n    function _transfer(address sender,address recipient,uint256 amount) internal virtual {\r\n        require(sender != address(0), \"WIZZY20: transfer from the zero address\");\r\n        require(recipient != address(0), \"WIZZY20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"WIZZY20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        (uint256 recpAmount, uint256 fees) = _calculateTXNFees(amount);\r\n        _balances[recipient] += recpAmount;\r\n        _balances[owner()] += fees;\r\n        emit Transfer(sender, recipient, amount);\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"WIZZY20: mint to the zero address\");\r\n        require(_totalSupply + amount <= _maxSupply, \"WIZZY20: cannot mint more than max supply\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"WIZZY20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"WIZZY20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner,address spender,uint256 amount) internal virtual {\r\n        require(owner != address(0), \"WIZZY20: approve from the zero address\");\r\n        require(spender != address(0), \"WIZZY20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from,address to,uint256 amount) internal virtual noBotAllowed(activationTimestamp, amount, from, to) {\r\n\r\n    }\r\n\r\n\r\n    function _afterTokenTransfer(address from,address to,uint256 amount) internal virtual {\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ActivateWizzy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum WIZZY.Allocations\",\"name\":\"alloc\",\"type\":\"uint8\"}],\"name\":\"releaseAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum WIZZY.Allocations\",\"name\":\"alloc\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"allocAddr\",\"type\":\"address\"}],\"name\":\"setAllocAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxTradable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txnFee\",\"type\":\"uint256\"}],\"name\":\"setTXNFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WIZZY", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6e593b38d33d48ec0bf7d346ee3c76293fe5da5aab0eacce0031d7a458069a09"}