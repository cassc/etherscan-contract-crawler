{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()  {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n \r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n   \r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n   \r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n   \r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract BNBcoinToken is Context, IERC20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    string private _name = \"BNBcoin\";\r\n    string private _symbol = \"BNBcoin\";\r\n    uint8 private _decimals = 18;\r\n     address public  deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address payable public marketingWalletAddress = payable(0x4a22E437b18fC3f5354280DF8599d2130af2C402); \r\n    address payable public marketingAddress2 = payable(0xD079F570491cf3937176ADa22f80a0834b4b416F); \r\n    address public lpFenhongAddress = address(this);\r\n    address public recipientLpAddress = address(0x62bbAEa8ED80C3e4F743143881a8573AA1f7F773);\r\n\r\n    // test :0x8BaBbB98678facC7342735486C851ABD7A0d17Ca  \u6b63\u5f0f 0x2170Ed0880ac9A755fd29B2688956BD959F933F8\r\n    address ethAddress = address(0x2170Ed0880ac9A755fd29B2688956BD959F933F8);\r\n    //test 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3   \u6b63\u5f0f\u8584\u997c\u5730\u5740 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n    address  public wapV2RouterAddress = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    uint256 public genesisBlock;\r\n    uint256 public coolBlock = 10;\r\n   \r\n    uint256 private _limitBuy =400;\r\n    uint256 private _limitBuyBlock = 20;\r\n\r\n    mapping(address => uint256)  private _limitAddressMap;\r\n    \r\n    uint256 private minimumTokensBeforeSwap = 2000*10**8 * 10**_decimals; \r\n    uint256 _saleKeepFee = 1000;\r\n\r\n    uint256 private _totalSupply = 10000000* 10**8 * 10**_decimals;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    mapping (address => bool) public isExcludedFromFee;\r\n    mapping (address => bool) public isWalletLimitExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping (address => bool) public isMarketPair;\r\n\r\n    uint256 public _buyDestoryFee = 1;\r\n    uint256 public _buyBackLpFee = 3;\r\n    uint256 public _buyLpFenhongFee = 6;\r\n    uint256 public _buyMarketingFee = 3;\r\n    uint256 public _buyTotalFee = _buyDestoryFee.add(_buyBackLpFee).add(_buyLpFenhongFee).add(_buyMarketingFee);\r\n\r\n    uint256 public _sellDestoryFee = 1;\r\n    uint256 public _sellBackLpFee = 3;\r\n    uint256 public _sellLpFenhongFee = 6;\r\n    uint256 public _sellMarketingFee = 3;\r\n    uint256 public _sellTotalFee = _sellDestoryFee.add(_sellBackLpFee).add(_sellLpFenhongFee).add(_sellMarketingFee);\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapPair;\r\n\r\n    address private _administrator;\r\n\r\n    uint256 public LPFeefenhongTime;\r\n    uint256 public minPeriod = 1 minutes;\r\n\r\n    uint256 distributorGas = 500000;\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping(address => bool) private _updated;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n    uint256 currentIndex;  \r\n    uint256 minEthVal = 1000000;\r\n    mapping (address => bool) isDividendExempt;\r\n\r\n    uint256 internal constant magnitude = 2**128;   \r\n   \r\n    bool inSwapAndLiquify;\r\n    \r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    \r\n    event SwapETHForTokens(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n    \r\n    event SwapTokensForETH(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n        require(_administrator == msg.sender, \" caller is not the administrator\");\r\n        _;\r\n    }\r\n\r\n    constructor () {\r\n        _administrator = msg.sender;\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(wapV2RouterAddress);  \r\n\r\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;\r\n\r\n        isDividendExempt[address(uniswapPair)] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(deadAddress)] = true;\r\n\r\n        isExcludedFromFee[owner()] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        \r\n        isWalletLimitExempt[owner()] = true;\r\n        isWalletLimitExempt[address(uniswapPair)] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n        \r\n        isTxLimitExempt[owner()] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n\r\n        isMarketPair[address(uniswapPair)] = true;\r\n\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\r\n        return minimumTokensBeforeSwap;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setMarketPairStatus(address account, bool newValue) public onlyOwner {\r\n        isMarketPair[account] = newValue;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n    \r\n    function setIsExcludedFromFee(address account, bool newValue) public onlyOwner {\r\n        isExcludedFromFee[account] = newValue;\r\n    }\r\n\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(deadAddress));\r\n    }\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n    \r\n     //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_limitAddressMap[sender] != 1, \"ERC20: transfer is limit\");\r\n\r\n        if(recipient == uniswapPair && !isTxLimitExempt[sender])\r\n        {\r\n              uint256 balance = balanceOf(sender);\r\n              if (amount == balance) {\r\n                amount = amount.sub(amount.div(_saleKeepFee));\r\n            }\r\n            \r\n        }\r\n        if(recipient == uniswapPair && balanceOf(address(recipient)) == 0){\r\n            genesisBlock = block.number;\r\n        }\r\n\r\n        if(sender == uniswapPair && (block.number > ( genesisBlock + coolBlock) && block.number <= ( genesisBlock + _limitBuyBlock)))\r\n        {\r\n            uint256 limitAccout = balanceOf(uniswapPair).mul(_limitBuy).div(1000);\r\n            require(amount < limitAccout, \"ERC20: transfer limit  mount < balanceOf(uniswapPair)*0.4 \");\r\n            if(_limitAddressMap[recipient]== 0)\r\n            {\r\n                _limitAddressMap[recipient] = 1;\r\n            }\r\n        }\r\n\r\n        if(inSwapAndLiquify)\r\n        { \r\n            return _basicTransfer(sender, recipient, amount); \r\n        }\r\n        else\r\n        {\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\r\n            \r\n            if (overMinimumTokenBalance && !inSwapAndLiquify && !isMarketPair[sender]) \r\n            {\r\n                if(sender !=  address(uniswapV2Router))\r\n                {\r\n                    swapAndLiquify(contractTokenBalance);    \r\n                }\r\n               \r\n            }\r\n            _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n            uint256 finalAmount = (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) ? \r\n                                         amount : takeFee(sender, recipient, amount);\r\n\r\n            _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n            \r\n            emit Transfer(sender, recipient, finalAmount);\r\n            if (block.number <= ( genesisBlock + coolBlock) && sender == uniswapPair )\r\n            {\r\n                _basicTransfer(recipient,deadAddress, finalAmount);\r\n            }\r\n\r\n            if(fromAddress == address(0) )fromAddress = sender;\r\n            if(toAddress == address(0) )toAddress = recipient;  \r\n            if(!isDividendExempt[fromAddress]  ) setShare(fromAddress);\r\n            if(!isDividendExempt[toAddress]  ) setShare(toAddress);\r\n            \r\n            fromAddress = sender;\r\n            toAddress = recipient;  \r\n           if(IERC20(ethAddress).balanceOf(address(this)) >= minEthVal && LPFeefenhongTime.add(minPeriod) <= block.timestamp) {\r\n                process(distributorGas) ;\r\n                LPFeefenhongTime = block.timestamp;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    function process(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if(shareholderCount == 0)return;\r\n        uint256 nowbananceEth = IERC20(ethAddress).balanceOf(address(this));\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n        uint256 divper = nowbananceEth.mul(magnitude).div(totalSupply());\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n        uint256 amount   = balanceOf(shareholders[currentIndex]).mul(divper).div(magnitude);\r\n  \r\n         if( amount <  10) {\r\n             currentIndex++;\r\n             iterations++;\r\n             return;\r\n         }\r\n         if(IERC20(ethAddress).balanceOf(address(this))  < amount )return;\r\n            distributeDividend(shareholders[currentIndex],amount);\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n\r\n    function distributeDividend(address shareholder ,uint256 amount) internal {\r\n        IERC20(ethAddress).transfer(shareholder, amount);\r\n    }\r\n\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tAmount) private lockTheSwap {\r\n      \r\n        uint256 backLpTokenNum = tAmount.mul(125).div(1000);\r\n        uint256 fenhongTokenNum = tAmount.mul(500).div(1000);\r\n        uint256 marketNum1 =  tAmount.mul(166).div(1000);\r\n        uint256 marketNum2 =  tAmount.mul(83).div(1000);\r\n        uint256 letfBackLpToken = tAmount.sub(backLpTokenNum).sub(fenhongTokenNum).sub(marketNum1).sub(marketNum2);\r\n        swapTokensForEth(tAmount.sub(letfBackLpToken));\r\n    \r\n        uint256 amountBNB = address(this).balance;\r\n        uint256 markentBNB = amountBNB.mul(2857).div(10000);\r\n        uint256 fenhongBNB = amountBNB.mul(5714).div(10000);\r\n        uint256 lpBNB = amountBNB.sub(markentBNB).sub(fenhongBNB);\r\n        uint256 markentBNB1 = markentBNB.mul(2).div(3);\r\n        uint256 markentBNB2 = markentBNB.sub(markentBNB1);\r\n        if(markentBNB1 > 0)\r\n         {\r\n            transferToAddressETH(marketingWalletAddress, markentBNB1);\r\n        }  \r\n        if(markentBNB2 > 0)\r\n        {\r\n            transferToAddressETH(marketingAddress2, markentBNB2);  \r\n        }\r\n        if(lpBNB > 0 && letfBackLpToken > 0)\r\n        {\r\n            addLiquidity(letfBackLpToken,lpBNB);\r\n        }   \r\n        if(fenhongBNB >0 )   \r\n        {\r\n            swapEthForToken(fenhongBNB);\r\n        }\r\n        \r\n    }\r\n    \r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function swapTokensForEth2(uint256 tokenAmount,address recipient) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n           recipient, // The contract\r\n            block.timestamp+15\r\n        );\r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            recipientLpAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n     function swapTokensForCake(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = ethAddress;\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = 0;\r\n        if(isMarketPair[sender]) {//\u4e70\u5165 \u53d6\u56de\r\n              uint256 burnNum = amount.mul(_buyDestoryFee).div(100);\r\n            _takeFee(sender,deadAddress, burnNum);\r\n            uint256 lpNum = amount.mul(_buyLpFenhongFee).div(100);\r\n            _takeFee(sender,address(this), lpNum);\r\n         \r\n            uint256 buyBackLpNum = amount.mul(_buyBackLpFee).div(100);\r\n            _takeFee(sender,address(this), buyBackLpNum);\r\n\r\n            uint256 buyMarketingNum = amount.mul(_buyMarketingFee).div(100);\r\n            _takeFee(sender,address(this), buyMarketingNum);\r\n\r\n            feeAmount = amount.mul(_buyTotalFee).div(100);//\u603b\u5171\u7684\u6ed1\u70b9\u6570\r\n        }\r\n        else if(isMarketPair[recipient]) {\r\n            uint256 burnNum = amount.mul(_sellDestoryFee).div(100);\r\n            _takeFee(sender,deadAddress, burnNum);\r\n            uint256 lpNum = amount.mul(_buyLpFenhongFee).div(100);\r\n            _takeFee(sender,address(this), lpNum);\r\n         \r\n            uint256 sellBackLpNum = amount.mul(_sellBackLpFee).div(100);\r\n            _takeFee(sender,address(this), sellBackLpNum);\r\n\r\n            uint256 sellMarketingNum = amount.mul(_sellMarketingFee).div(100);\r\n            _takeFee(sender,address(this), sellMarketingNum);\r\n\r\n            feeAmount = amount.mul(_sellTotalFee).div(100);\r\n        }\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n   function _takeFee(address sender, address recipient,uint256 tAmount) private {\r\n        if (tAmount == 0 ) return;\r\n        _balances[recipient] = _balances[recipient].add(tAmount);\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n    function swapEthForToken(uint256 ethAmount) private{\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(ethAddress);\r\n       \r\n        // make the swap\r\n        uniswapV2Router.swapExactETHForTokens{value:ethAmount}(\r\n            0, // accept any amount of token\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n    }\r\n\r\n    function unLockLimit(address addr,uint256 val) public onlyAdmin\r\n    {\r\n        _limitAddressMap[addr] = val;\r\n    }\r\n\r\n    function unLockLimitByArray(address[] memory addrArray,uint256 val) public onlyAdmin\r\n    {\r\n        for(uint256 i =0;i< addrArray.length;i++)\r\n        {\r\n            _limitAddressMap[addrArray[i]] = val;\r\n        }\r\n    }\r\n    \r\n    function setShare(address shareholder) private {\r\n           if(_updated[shareholder] ){      \r\n                if(balanceOf(shareholder) == 0) quitShare(shareholder);              \r\n                return;  \r\n           }\r\n           if(balanceOf(shareholder) == 0) return;  \r\n            addShareholder(shareholder);\r\n            _updated[shareholder] = true;\r\n          \r\n    }\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n    function quitShare(address shareholder) private {\r\n           removeShareholder(shareholder);   \r\n           _updated[shareholder] = false; \r\n    }\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPFeefenhongTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBackLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDestoryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLpFenhongFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBackLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDestoryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLpFenhongFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFenhongAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipientLpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setMarketPairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"unLockLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"unLockLimitByArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wapV2RouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BNBcoinToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8fc7240bb07838efcc83c9a5c63231822489e71ccf655e266208ca60f050da94"}