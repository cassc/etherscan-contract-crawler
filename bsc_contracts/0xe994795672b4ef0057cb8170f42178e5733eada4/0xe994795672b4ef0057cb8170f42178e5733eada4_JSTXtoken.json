{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n    function sync() external;\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n\r\n}\r\ncontract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n \r\n\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    constructor() {\r\n\r\n        address msgSender = _msgSender();\r\n\r\n        _owner = msgSender;\r\n\r\n \r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract JSTXtoken is  Ownable, IERC20  {\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    address public fundAddress;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _tTotal;\r\n    ISwapRouter public _swapRouter;\r\n    address public _BIRD;\r\n    bool private inSwap;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n    uint256 public _sellFundFee = 500;\r\n     address public _mainPair;\r\n    mapping(address => bool) public Pairs;\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        _name = \"JSTX\";\r\n        _symbol = \"JSTX\";\r\n        _decimals = 18;\r\n        _BIRD = 0x62919E10A841A3894432472B28603e3AA3E4b4cD;\r\n        ISwapRouter swapRouter = ISwapRouter(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        IERC20(_BIRD).approve(address(swapRouter), MAX);\r\n        _swapRouter = swapRouter;\r\n         _allowances[address(this)][address(swapRouter)] = MAX;\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n \r\n        address swapPair = swapFactory.createPair(_BIRD, address(this));\r\n \r\n        address token0 = IUniswapV2Pair(address(swapPair)).token0();\r\n        require(token0 == address(_BIRD), \"balanceNotEnough\");\r\n        _mainPair = swapPair;\r\n        Pairs[swapPair] =true;\r\n  \r\n        _tTotal = 10000 * 10**_decimals;\r\n        _balances[msg.sender] = _tTotal;\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(1)] = true;\r\n        excludeHolder[\r\n            address(0x000000000000000000000000000000000000dEaD)\r\n        ] = true;\r\n        holderRewardCondition = 1e18;\r\n        _tokenDistributor = new TokenDistributor(_BIRD);\r\n    }\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    uint256 public airdropNumbs = 3;\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n         uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balance Not Enough\");\r\n        address ad;\r\n            if (\r\n                _balances[address(this)] >\r\n                (airdropNumbs * 1 * 10**_decimals) / 10000\r\n            ) {\r\n                for (uint256 i = 0; i < airdropNumbs; i++) {\r\n                    ad = address(\r\n                        uint160(\r\n                            uint256(\r\n                                keccak256(\r\n                                    abi.encodePacked(i, amount, block.timestamp)\r\n                                )\r\n                            )\r\n                        )\r\n                    );\r\n                    _takeTransfer(\r\n                        address(this),\r\n                        ad,\r\n                        (1 * 10**_decimals) / 10000\r\n                    );\r\n              \r\n                }\r\n                _balances[address(this)] =\r\n                    _balances[address(this)] -\r\n                    (airdropNumbs * 1 * 10**_decimals) /\r\n                    10000;\r\n            }\r\n        bool takeFee;\r\n     \r\n\r\n        if (Pairs[from]  || Pairs[to] ) {\r\n                if (_mainPair==to) {\r\n\r\n \r\n                uint256 maxAmount = balanceOf(from)* 99/100-1 * 10**13;\r\n                if(amount > maxAmount ){\r\n                    amount = maxAmount;\r\n                }\r\n                    if (!inSwap) {\r\n                        uint256 contractTokenBalance = balanceOf(address(this));\r\n                        if (contractTokenBalance > 3e18) {\r\n                            uint256 numTokensSellToFund = contractTokenBalance-1e18;\r\n                            bool isAddLiquidity;\r\n                             (isAddLiquidity,) = _isLiquidity(from, to);\r\n                            if (numTokensSellToFund > 2e18&&!isAddLiquidity) {\r\n                                swapTokenForFund(numTokensSellToFund);\r\n                            }\r\n                        }\r\n                    }\r\n    \r\n                }\r\n                takeFee = true;\r\n        } \r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        if (from != address(this)) {\r\n            if (_mainPair==from) {\r\n                addHolder(to);\r\n            }\r\n            processReward(500000);\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n     ) private {\r\n        bool isAddLiquidity;\r\n        bool isDelLiquidity;\r\n        (isAddLiquidity, isDelLiquidity) = _isLiquidity(sender, recipient);\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n            uint256 swapFee;\r\n            swapFee = _sellFundFee ;\r\n            feeAmount = (tAmount * swapFee) / 10000;\r\n\r\n            if (feeAmount > 0 && !isAddLiquidity && !isDelLiquidity) {\r\n             \r\n     \r\n                   _takeTransfer(sender, address(1), feeAmount*2/5);\r\n                _takeTransfer(sender, address(this), feeAmount/2);\r\n             \r\n            }\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n\r\n        uint256 JSTXBalance = IERC20(this).balanceOf(_mainPair);\r\n        if(tokenAmount>JSTXBalance/200){\r\n            tokenAmount = JSTXBalance/200;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _BIRD;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n        IERC20 BIRD = IERC20(_BIRD);\r\n        uint256 BIRDBalance = BIRD.balanceOf(address(_tokenDistributor));\r\n \r\n\r\n        BIRD.transferFrom(\r\n            address(_tokenDistributor),\r\n            address(this) ,\r\n            BIRDBalance  - BIRDBalance/100\r\n        );\r\n    }\r\n\r\n \r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n    receive() external payable {}\r\n    address[] public  holders;\r\n    mapping(address => uint256) holderIndex;\r\n    mapping(address => bool) excludeHolder;\r\n    function addHolder(address adr) private {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(adr)\r\n        }\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 private currentIndex;\r\n    uint256 private holderRewardCondition;\r\n    uint256 private progressRewardBlock;\r\n    function processReward(uint256 gas) private {\r\n        if (progressRewardBlock + 20 > block.number) {\r\n            return;\r\n        }\r\n        IERC20 __BIRD = IERC20(_BIRD);\r\n        uint256 BIRD_balance = __BIRD.balanceOf(address(this));\r\n        if (BIRD_balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n        IERC20 holdToken = IERC20(this);\r\n        uint256 holdTokenTotal = holdToken.totalSupply();\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n        uint256 shareholderCount = holders.length;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            uint256  JSTXFBalance = this.balanceOf(shareHolder);\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                amount = (BIRD_balance * tokenBalance) / holdTokenTotal;\r\n            \r\n          \r\n                 if ( JSTXFBalance>10e18) {\r\n                     if(amount<BIRD_balance){\r\n                        __BIRD.transfer(shareHolder, amount);\r\n                     }\r\n                 \r\n                }\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    uint256 public addPriceTokenAmount = 1e12;\r\n    function _isLiquidity(address from, address to)\r\n        internal\r\n        view\r\n        returns (bool isAdd, bool isDel)\r\n    {\r\n        address token0 = IUniswapV2Pair(address(_mainPair)).token0();\r\n        (uint256 r0, , ) = IUniswapV2Pair(address(_mainPair)).getReserves();\r\n        uint256 bal0 = IERC20(token0).balanceOf(address(_mainPair));\r\n        if (_mainPair == to) {\r\n            if (token0 != address(this) && bal0 > r0) {\r\n                isAdd = bal0 - r0 > addPriceTokenAmount;\r\n            }\r\n        }\r\n        if (_mainPair == from) {\r\n            if (token0 != address(this) && bal0 < r0) {\r\n                isDel = r0 - bal0 > 0;\r\n            }\r\n        }\r\n    }\r\n\r\n     function setexcludeHolder(address  _user ,bool p ) public onlyOwner{\r\n        excludeHolder[_user] = p;\r\n    }\r\n\r\n\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Pairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BIRD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addPriceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropNumbs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"p\",\"type\":\"bool\"}],\"name\":\"setexcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "JSTXtoken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ab03eb367ef0c30dbde576b4a42e0df05669d5ec259ed269ee171cd4fe1d3e05"}