{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n    \r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    \r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    \r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    \r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    \r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    \r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    \r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    \r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    \r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    \r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    \r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    \r\n    function name() external view returns (string memory);\r\n\r\n    \r\n    function symbol() external view returns (string memory);\r\n\r\n    \r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        \r\n        \r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    \r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    \r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length > 0) {\r\n                \r\n                \r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    \r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        \r\n        \r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    \r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    \r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    \r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    \r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    \r\n    string private _name;\r\n\r\n    \r\n    string private _symbol;\r\n\r\n    \r\n    mapping(uint256 => address) private _owners;\r\n\r\n    \r\n    mapping(address => uint256) private _balances;\r\n\r\n    \r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    \r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    \r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    \r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    \r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    \r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: invalid token ID\");\r\n        return owner;\r\n    }\r\n\r\n    \r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    \r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    \r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    \r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    \r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not token owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    \r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        _requireMinted(tokenId);\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    \r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    \r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        \r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    \r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    \r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, data);\r\n    }\r\n\r\n    \r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    \r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    \r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n    }\r\n\r\n    \r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    \r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    \r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n\r\n    \r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        \r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        \r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    \r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    \r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    \r\n    function _requireMinted(uint256 tokenId) internal view virtual {\r\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\r\n    }\r\n\r\n    \r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    \r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    \r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    \r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\nabstract contract Pausable is Context {\r\n    \r\n    event Paused(address account);\r\n\r\n    \r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    \r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    \r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    \r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    \r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    \r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    \r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    \r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\nlibrary NFTModels {\r\n  \r\n  struct NFTProperty {\r\n    uint256 price;\r\n    uint256 limit;\r\n    bool isPaused;\r\n    bool isFree;\r\n  }\r\n\r\n}\r\n\r\nlibrary Constants {\r\n\r\n  \r\n\r\n  uint256 internal constant PERCENT_PRECISION = 1e4;\r\n\r\n  \r\n  uint256 public constant MIN_PRICE = 0.01 ether;\r\n  uint256 public constant FEE_PERCENT = 1000; \r\n  uint256 public constant BUY_FREE_LIMIT = 300 ether;\r\n\r\n  \r\n  uint256 public constant MIN_INVESTMENT_TO_GET_BOOST = 0.1 ether;\r\n\r\n  \r\n  uint256 public constant STAKES_LIMIT = 100;\r\n\r\n}\r\n\r\nlibrary Boosts {\r\n\r\n  enum BoostType{ PROFIT, TIME, TEAM }\r\n\r\n  struct Boost {\r\n    BoostType boostType;\r\n    uint256 boostTimePercent;\r\n    uint256 boostProfitPercent;\r\n  }\r\n\r\n}\r\n\r\nlibrary Models {\r\n\r\n  struct Buyer {\r\n    uint256[] purchases;\r\n    uint256 totalSpent;\r\n    address referrer;\r\n    address[] referrals;\r\n    uint256 bonus;\r\n    uint256[10] refs;\r\n    uint256[10] refsNumber;\r\n    uint8 refLevel;\r\n    uint256 refTurnover;\r\n\r\n    uint8 leaderLevel;\r\n    bool mayBecomeLeader;\r\n    bool isLeader;\r\n  }\r\n\r\n  struct StakeType {\r\n    uint256 dailyPercent;\r\n    uint256 term;\r\n  }\r\n\r\n  struct Stake {\r\n    uint8 stakeTypeIdx;\r\n    uint256 startTime;\r\n    uint256 tokenId;\r\n    mapping(uint8 => Boosts.Boost) boosts;\r\n    uint8 boostsSize;\r\n    uint256 lastWithdrawalTime;\r\n    uint256 withdrawnAmount;\r\n    bool isExpired;\r\n  }\r\n\r\n}\r\n\r\nlibrary Events {\r\n  event NFTBought(\r\n    address indexed buyer,\r\n    address indexed referrer,\r\n    uint256 amount,\r\n    uint256 indexed tokenId,\r\n    uint256 timestamp\r\n  );\r\n\r\n  event NewBoost(\r\n    address indexed buyer,\r\n    Boosts.BoostType indexed boostType,\r\n    uint256 indexed tokenId,\r\n    string currency,\r\n    uint256 amount,\r\n    uint256 timePercent,\r\n    uint256 profitPercent,\r\n    uint256 timestamp\r\n  );\r\n\r\n  event Staked(\r\n    address indexed investor,\r\n    uint8 indexed stakeTypeIdx,\r\n    uint256 indexed stakeIdx,\r\n    uint256 tokenId,\r\n    uint256 amount,\r\n    uint256 timestamp\r\n  );\r\n\r\n  event Withdrawn(\r\n    address indexed investor,\r\n    uint8 indexed stakeTypeIdx,\r\n    uint256 indexed stakeIdx,\r\n    uint256 tokenId,\r\n    uint256 reward,\r\n    uint256 timestamp\r\n  );\r\n\r\n  event Unstaked(\r\n    address indexed investor,\r\n    uint8 indexed stakeTypeIdx,\r\n    uint256 indexed stakeIdx,\r\n    uint256 tokenId,\r\n    uint256 timestamp\r\n  );\r\n\r\n  event ReferralBonusReceived(\r\n    address indexed referrer,\r\n    address indexed referral,\r\n    uint256 indexed level,\r\n    uint256 amount,\r\n    uint256 timestamp\r\n  );\r\n\r\n  event BoostApplied(\r\n    address indexed buyer,\r\n    uint256 indexed stakeIdx,\r\n    uint256 indexed boostTokenId,\r\n    uint256 timestamp\r\n  );\r\n\r\n  event NewLeader(\r\n    address indexed buyer,\r\n    uint8 indexed leaderLevel,\r\n    uint256 timestamp\r\n  );\r\n\r\n}\r\n\r\ninterface CommonInterface {\r\n\r\n  \r\n\r\n  function getPrice(uint256 tokenId) external view returns(uint256);\r\n\r\n  function getProperties(uint256 tokenId) external view returns(NFTModels.NFTProperty memory);\r\n\r\n  function paused() external view returns (bool);\r\n\r\n  function buy(address[] calldata referrerAddrs_) external payable;\r\n\r\n  \r\n\r\n  function mintBoost(address receiver, Boosts.BoostType boostType, uint8 boostLevel) external;\r\n\r\n  function mintLeaderBoost(address receiver, uint8 boostLevel) external;\r\n\r\n  function getBoost(uint256 boostId) external view returns(Boosts.Boost memory boost);\r\n\r\n  \r\n\r\n  function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n}\r\n\r\ncontract ReferralProgram {\r\n\r\n  address payable public immutable DEFAULT_REFERRER;\r\n  address public immutable BOOST_NFT_CONTRACT_ADDRESS;\r\n\r\n  uint256[] public REFERRAL_LEVELS_PERCENTS = [500, 700, 900, 1100, 1400, 1600, 1800, 2000];\r\n  uint256[] public REFERRAL_LEVELS_MILESTONES = [0, 30 ether, 100 ether, 300 ether, 500 ether, 1_000 ether, 3_000 ether, 10_000 ether];\r\n  uint256[] public LEADER_LEVELS_MILESTONES = [0, 0.01 ether, 30 ether, 100 ether, 300 ether, 500 ether, 1_000 ether, 3_000 ether, 10_000 ether, 20_000 ether, 50_000 ether];\r\n  uint256[] public LEADER_LEVELS_USERS_MILESTONES = [0, 10, 15, 25, 50, 100, 150, 300, 500, 1_000, 2_500];\r\n  uint8 constant public REFERRAL_DEPTH = 10;\r\n  uint8 constant public REFERRAL_TURNOVER_DEPTH = 5;\r\n\r\n  mapping (address => Models.Buyer) public buyers;\r\n\r\n  mapping(address => mapping(uint8 => bool)) boostsReceived;\r\n\r\n  constructor(address boostNFTContractAddress, address defaultReferrerAddress) {\r\n    require(Address.isContract(boostNFTContractAddress), \"01\");\r\n\r\n    BOOST_NFT_CONTRACT_ADDRESS = boostNFTContractAddress;\r\n    DEFAULT_REFERRER = payable(defaultReferrerAddress);\r\n  }\r\n\r\n  function _distributeReferralReward(address buyerAddr_, address[] memory referrerAddrs_, uint256 amount_) internal {\r\n    require(referrerAddrs_.length > 0 || buyers[buyerAddr_].referrer != address(0x0), \"04\");\r\n\r\n    Models.Buyer storage buyer = buyers[buyerAddr_];\r\n\r\n    bool isNewUser = false;\r\n    if (buyer.referrer == address(0x0)) {\r\n      isNewUser = true;\r\n      if (referrerAddrs_[0] == address(0x0) || referrerAddrs_[0] == buyerAddr_) {\r\n        buyer.referrer = DEFAULT_REFERRER;\r\n        buyers[DEFAULT_REFERRER].referrals.push(buyerAddr_);\r\n      } else {\r\n        buyer.referrer = referrerAddrs_[0];\r\n        buyers[referrerAddrs_[0]].referrals.push(buyerAddr_);\r\n      }\r\n\r\n      if (referrerAddrs_.length > 1 && buyer.referrer != DEFAULT_REFERRER) { \r\n        for (uint8 i = 0; i < REFERRAL_DEPTH && i < referrerAddrs_.length - 1; i++) {\r\n          if (buyers[referrerAddrs_[i]].referrer == address(0x0)) { \r\n            if (referrerAddrs_[i + 1] != address(0x0) && referrerAddrs_[i + 1] != referrerAddrs_[i]) {\r\n              buyers[referrerAddrs_[i]].referrer = referrerAddrs_[i + 1];\r\n              buyers[referrerAddrs_[i + 1]].referrals.push(referrerAddrs_[i]);\r\n\r\n              for (uint8 j = 0; j < i; j++) {\r\n                buyers[referrerAddrs_[i + 1]].refsNumber[j]++;\r\n              }\r\n            } else {\r\n              buyers[referrerAddrs_[i]].referrer = DEFAULT_REFERRER;\r\n              buyers[DEFAULT_REFERRER].referrals.push(referrerAddrs_[i]);\r\n\r\n              for (uint8 j = 0; j < i; j++) {\r\n                buyers[DEFAULT_REFERRER].refsNumber[j]++;\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    bool[] memory distributedLevels = new bool[](REFERRAL_LEVELS_PERCENTS.length);\r\n\r\n    address current = buyerAddr_;\r\n    address upline = buyer.referrer;\r\n    uint8 maxRefLevel = 0;\r\n    for (uint8 i = 0; i < REFERRAL_DEPTH; i++) {\r\n        uint256 refPercent = 0;\r\n        if (i == 0) {\r\n          refPercent = REFERRAL_LEVELS_PERCENTS[buyers[upline].refLevel];\r\n\r\n          maxRefLevel = buyers[upline].refLevel;\r\n          for (uint8 j = buyers[upline].refLevel; j >= 0; j--) {\r\n            distributedLevels[j] = true;\r\n\r\n            if (j == 0) {\r\n              break;\r\n            }\r\n          }\r\n        } else if (buyers[upline].refLevel > maxRefLevel && !distributedLevels[buyers[upline].refLevel]) {\r\n          refPercent = REFERRAL_LEVELS_PERCENTS[buyers[upline].refLevel] - REFERRAL_LEVELS_PERCENTS[maxRefLevel];\r\n\r\n          maxRefLevel = buyers[upline].refLevel;\r\n          for (uint8 j = buyers[upline].refLevel; j >= 0; j--) {\r\n            distributedLevels[j] = true;\r\n\r\n            if (j == 0) {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        uint256 amount = amount_ * refPercent / Constants.PERCENT_PRECISION;\r\n        if (amount > 0) {\r\n          if (buyers[upline].totalSpent > 0) {\r\n            payable(upline).transfer(amount);\r\n            buyers[upline].bonus+= amount;\r\n\r\n            emit Events.ReferralBonusReceived(upline, buyerAddr_, i, amount, block.timestamp);\r\n          } else {\r\n            DEFAULT_REFERRER.transfer(amount);\r\n\r\n            emit Events.ReferralBonusReceived(DEFAULT_REFERRER, buyerAddr_, i, amount, block.timestamp);\r\n          }\r\n        }\r\n\r\n        buyers[upline].refs[i]++;\r\n        if (isNewUser) {\r\n          buyers[upline].refsNumber[i]++;\r\n        }\r\n\r\n        current = upline;\r\n        upline = buyers[upline].referrer;\r\n    }\r\n\r\n    upline = buyerAddr_; \r\n    for (uint256 i = 0; i <= REFERRAL_TURNOVER_DEPTH; i++) {\r\n        if (upline == address(0)) {\r\n          break;\r\n        }\r\n\r\n        _updateReferralLevel(upline, amount_);\r\n        _updateLeaderLevel(upline);\r\n\r\n        upline = buyers[upline].referrer;\r\n    }\r\n  }\r\n\r\n  function _updateReferralLevel(address buyerAddr_, uint256 amount_) private {\r\n    buyers[buyerAddr_].refTurnover+= amount_;\r\n\r\n    for (uint8 level = uint8(REFERRAL_LEVELS_MILESTONES.length - 1); level > 0; level--) {\r\n      if (buyers[buyerAddr_].refTurnover >= REFERRAL_LEVELS_MILESTONES[level]) {\r\n        buyers[buyerAddr_].refLevel = level;\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function _updateLeaderLevel(address buyerAddr_) private {\r\n    \r\n\r\n    if (buyerAddr_ == DEFAULT_REFERRER) {\r\n      return;\r\n    }\r\n    uint256 totalUsersAttracted = getTotalAttractedUsers(buyerAddr_);\r\n\r\n    for (uint8 level = uint8(LEADER_LEVELS_MILESTONES.length - 1); level > buyers[buyerAddr_].leaderLevel; level--) {\r\n      if (buyers[buyerAddr_].refTurnover >= LEADER_LEVELS_MILESTONES[level]\r\n       && totalUsersAttracted >= LEADER_LEVELS_USERS_MILESTONES[level]\r\n      ) {\r\n        buyers[buyerAddr_].leaderLevel = level;\r\n        buyers[buyerAddr_].mayBecomeLeader = true;\r\n\r\n        address upline = buyers[buyerAddr_].referrer;\r\n        for (uint8 i = 0; i < 100; i++) {\r\n          if (upline == DEFAULT_REFERRER) {\r\n            break;\r\n          }\r\n\r\n          if (buyers[upline].isLeader && buyers[upline].leaderLevel >= buyers[buyerAddr_].leaderLevel) {\r\n            buyers[buyerAddr_].mayBecomeLeader = false;\r\n            \r\n            break;\r\n          }\r\n\r\n          upline = buyers[upline].referrer;\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function getTotalAttractedUsers(address leaderAddr) public view returns (uint256 usersCount) {\r\n    for (uint8 i = 0; i < REFERRAL_TURNOVER_DEPTH; i++) {\r\n      usersCount+= buyers[leaderAddr].refsNumber[i];\r\n    }\r\n  }\r\n\r\n  function claimLeadership() external returns(bool) {\r\n    \r\n    require(buyers[msg.sender].mayBecomeLeader, \"05\");\r\n\r\n    address upline = buyers[msg.sender].referrer;\r\n    for (uint8 i = 0; i < 100; i++) {\r\n      if (upline == DEFAULT_REFERRER) {\r\n        break;\r\n      }\r\n\r\n      if (buyers[upline].isLeader && buyers[upline].leaderLevel >= buyers[msg.sender].leaderLevel) {\r\n        buyers[msg.sender].mayBecomeLeader = false;\r\n        \r\n        \r\n\r\n        break;\r\n      }\r\n\r\n      upline = buyers[upline].referrer;\r\n    }\r\n\r\n    if (buyers[msg.sender].mayBecomeLeader) {\r\n      buyers[msg.sender].mayBecomeLeader = false;\r\n      buyers[msg.sender].isLeader = true;\r\n      claimBoost();\r\n\r\n      emit Events.NewLeader(msg.sender, buyers[msg.sender].leaderLevel, block.timestamp);\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function claimBoost() public {\r\n    \r\n    require(buyers[msg.sender].totalSpent >= Constants.MIN_INVESTMENT_TO_GET_BOOST, \"06\");\r\n\r\n    if (buyers[msg.sender].isLeader) { \r\n      if (!boostsReceived[msg.sender][buyers[msg.sender].leaderLevel]) {\r\n        CommonInterface(BOOST_NFT_CONTRACT_ADDRESS)\r\n          .mintLeaderBoost(msg.sender, buyers[msg.sender].leaderLevel - 1);\r\n\r\n        boostsReceived[msg.sender][buyers[msg.sender].leaderLevel] = true;\r\n      } else {\r\n        revert(\"07\");\r\n      }\r\n    } else { \r\n      address leader = findLeader(msg.sender);\r\n\r\n      if (leader != DEFAULT_REFERRER) {\r\n        if (!boostsReceived[msg.sender][buyers[leader].leaderLevel]) {\r\n          CommonInterface(BOOST_NFT_CONTRACT_ADDRESS)\r\n            .mintLeaderBoost(msg.sender, buyers[leader].leaderLevel - 1);\r\n\r\n          boostsReceived[msg.sender][buyers[leader].leaderLevel] = true;\r\n        } else {\r\n          revert(\"07\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function findLeader(address attractedAddr) public view returns(address) {\r\n    address upline = buyers[attractedAddr].referrer;\r\n    for (uint8 i = 0; i < 100; i++) {\r\n      if (buyers[upline].isLeader || upline == DEFAULT_REFERRER) {\r\n        break;\r\n      }\r\n\r\n      upline = buyers[upline].referrer;\r\n    }\r\n\r\n    return upline;\r\n  }\r\n\r\n  function getBuyerReferralsStats(address buyerAddr) external view\r\n    returns (address, uint256, uint256[REFERRAL_DEPTH] memory, uint256[REFERRAL_DEPTH] memory, uint256, uint256)\r\n  {\r\n    Models.Buyer memory buyer = buyers[buyerAddr];\r\n\r\n    return (\r\n      buyer.referrer,\r\n      buyer.bonus,\r\n      buyer.refs,\r\n      buyer.refsNumber,\r\n      buyer.refLevel,\r\n      buyer.refTurnover\r\n    );\r\n  }\r\n\r\n  function referrals(address buyerAddr) external view returns(address[] memory) {\r\n    return buyers[buyerAddr].referrals;\r\n  }\r\n\r\n}\r\n\r\ncontract AnimalFarmNFT is ReferralProgram, ERC721, Pausable, Ownable {\r\n\r\n  address payable public immutable FEE_RECEIVER_1;\r\n  address payable public FEE_RECEIVER_2;\r\n  address payable public FEE_RECEIVER_3;\r\n\r\n  string private baseURI;\r\n  address public mainContractAddress;\r\n\r\n  \r\n  uint256 public totalSpent;\r\n  uint256 public nftOwnersCount;\r\n\r\n  mapping(uint256 => NFTModels.NFTProperty) private properties;\r\n\r\n  uint256 public totalSupply;\r\n\r\n  constructor(\r\n    string memory name_,\r\n    string memory symbol_,\r\n    string memory uri_,\r\n    address boostNFTContractAddress,\r\n    address defaultReferrerAddress,\r\n    address feeReceiverAddress1,\r\n    address feeReceiverAddress2,\r\n    address feeReceiverAddress3\r\n  ) ERC721(name_, symbol_) ReferralProgram(boostNFTContractAddress, defaultReferrerAddress) {\r\n    baseURI = uri_;\r\n\r\n    FEE_RECEIVER_1 = payable(feeReceiverAddress1);\r\n    FEE_RECEIVER_2 = payable(feeReceiverAddress2);\r\n    FEE_RECEIVER_3 = payable(feeReceiverAddress3);\r\n  }\r\n\r\n  receive() external payable {\r\n    \r\n    (bool sent, ) = mainContractAddress.call{value: msg.value}(\"\");\r\n    require(sent, \"03\");\r\n  }\r\n\r\n  function setMainContractAddress(address contractAddress) external onlyOwner {\r\n    require(Address.isContract(contractAddress), \"01\");\r\n    require(mainContractAddress == address(0x0), \"13\");\r\n\r\n    mainContractAddress = contractAddress;\r\n  }\r\n\r\n  function changeFeeReceiver2(address newAddr) external onlyOwner {\r\n    require(newAddr != address(0), \"x\");\r\n\r\n    FEE_RECEIVER_2 = payable(newAddr);\r\n  }\r\n\r\n  function changeFeeReceiver3(address newAddr) external onlyOwner {\r\n    require(newAddr != address(0), \"x\");\r\n\r\n    FEE_RECEIVER_3 = payable(newAddr);\r\n  }\r\n\r\n  function setLimit(uint256 tokenId, uint256 limit) external onlyOwner {\r\n    require(properties[tokenId].isFree, \"27\");\r\n\r\n    properties[tokenId].limit = limit;\r\n  }\r\n\r\n  function pause() external onlyOwner {\r\n    _pause();\r\n  }\r\n\r\n  function unpause() external onlyOwner {\r\n    require(paused(), \"Contract is not paused\");\r\n\r\n    _unpause();\r\n  }\r\n\r\n  function pauseToken(uint256 tokenId) external onlyOwner {\r\n    require(properties[tokenId].isFree, \"27\");\r\n\r\n    properties[tokenId].isPaused = true;\r\n  }\r\n\r\n  function unpauseToken(uint256 tokenId) external onlyOwner {\r\n    require(properties[tokenId].isFree, \"27\");\r\n\r\n    properties[tokenId].isPaused = false;\r\n  }\r\n\r\n  function buy(address[] calldata referrerAddrs_) public payable {\r\n    require(msg.value >= Constants.MIN_PRICE, \"02\");\r\n\r\n    totalSpent+= msg.value;\r\n\r\n    uint256 id = getID();\r\n    buyers[msg.sender].purchases.push(id);\r\n    buyers[msg.sender].totalSpent+= msg.value;\r\n    properties[id].price = msg.value;\r\n\r\n    _distributeReferralReward(msg.sender, referrerAddrs_, msg.value);\r\n\r\n    totalSupply++;\r\n    _mint(msg.sender, id);\r\n    FEE_RECEIVER_1.transfer(msg.value * Constants.FEE_PERCENT / 2 / Constants.PERCENT_PRECISION);\r\n    FEE_RECEIVER_2.transfer(msg.value * Constants.FEE_PERCENT / 4 / Constants.PERCENT_PRECISION);\r\n    FEE_RECEIVER_3.transfer(msg.value * Constants.FEE_PERCENT / 4 / Constants.PERCENT_PRECISION);\r\n\r\n    payable(mainContractAddress).transfer(address(this).balance);\r\n\r\n    emit Events.NFTBought(\r\n      msg.sender,\r\n      referrerAddrs_.length > 0 ? referrerAddrs_[0] : address(0x0),\r\n      msg.value,\r\n      id,\r\n      block.timestamp\r\n    );\r\n  }\r\n\r\n  uint256 private mintAmount;\r\n  function mint(uint256 amount, bool isPaused) external onlyOwner {\r\n    require(amount >= Constants.MIN_PRICE, \"02\");\r\n    require(mintAmount + amount <= Constants.BUY_FREE_LIMIT, \"26\");\r\n\r\n    mintAmount+= amount;\r\n\r\n    uint256 id = getID();\r\n    properties[id].price = amount;\r\n    properties[id].isFree = true;\r\n    properties[id].isPaused = isPaused;\r\n\r\n    totalSupply++;\r\n    _mint(msg.sender, id);\r\n  }\r\n\r\n  function changeBaseURI(string calldata newURI) external onlyOwner {\r\n    baseURI = newURI;\r\n  }\r\n\r\n  function _baseURI() internal view override returns (string memory) {\r\n    return baseURI;\r\n  }\r\n\r\n  \r\n\r\n  \r\n\r\n  function getProperties(uint256 tokenId) external view returns(NFTModels.NFTProperty memory) {\r\n    return properties[tokenId];\r\n  }\r\n\r\n\r\n  function getPrice(uint256 tokenId) external view returns(uint256) {\r\n    return properties[tokenId].price;\r\n  }\r\n\r\n  function buy() external payable {\r\n    payable(msg.sender).transfer(msg.value);\r\n  }\r\n\r\n  function getID() private view returns(uint256) {\r\n    uint256 id = block.timestamp;\r\n    while (_exists(id)) { \r\n      id++;\r\n    }\r\n\r\n    return id;\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"boostNFTContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultReferrerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiverAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiverAddress2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeReceiverAddress3\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOOST_NFT_CONTRACT_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_REFERRER\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_RECEIVER_1\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_RECEIVER_2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_RECEIVER_3\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEADER_LEVELS_MILESTONES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEADER_LEVELS_USERS_MILESTONES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_DEPTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_LEVELS_MILESTONES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_LEVELS_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_TURNOVER_DEPTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"referrerAddrs_\",\"type\":\"address[]\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"refLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"refTurnover\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"leaderLevel\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"mayBecomeLeader\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLeader\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"changeBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"changeFeeReceiver2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"changeFeeReceiver3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLeadership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attractedAddr\",\"type\":\"address\"}],\"name\":\"findLeader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyerAddr\",\"type\":\"address\"}],\"name\":\"getBuyerReferralsStats\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getProperties\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFree\",\"type\":\"bool\"}],\"internalType\":\"struct NFTModels.NFTProperty\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"leaderAddr\",\"type\":\"address\"}],\"name\":\"getTotalAttractedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usersCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftOwnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pauseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyerAddr\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setMainContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unpauseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AnimalFarmNFT", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000a84611bacf841f1fe1aa88008bfab59726da1db0000000000000000000000000df65900fbcf496d801dcf1532cd64883a629e483000000000000000000000000cd9ef6f1bffbcf57bc5e9db7653eb4537fd51404000000000000000000000000dd306dcc3d0b3162be92cd31257a21d3847794f5000000000000000000000000ed3e57fe36bf7fbe252a675c459598fde46877270000000000000000000000000000000000000000000000000000000000000014416e696d616c4661726d436f6c6c656374696f6e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000003414643000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012f00000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1fd44514d4f2a34631979720b50714a178660fa3e80e7fc1f845ffcc925471c3"}