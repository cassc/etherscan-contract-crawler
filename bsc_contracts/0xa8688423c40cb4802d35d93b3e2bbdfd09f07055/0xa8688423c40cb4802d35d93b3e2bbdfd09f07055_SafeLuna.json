{"SourceCode": "/*\r\nSafe Luna\r\n\r\nWhitePaper: https://safe-luna.gitbook.io/safe-luna-whitepaper/\r\nWebsite DAPP: https://www.safeluna.app\r\nTwitter: https://twitter.com/safelunacoin\r\nTelegram: https://t.me/safelunacoin\r\n\r\nEvery Buy and Sell will feed the Jackpot fund (4% Buy/6% Sell). \r\n\r\nJackpot Wars: \r\nJackpot will be paused until the Jackpot Wars start (scheduled). Big Bang will be raised to 20 BNB.\r\nMin Buy will be set at 0.5 BNB for every 5 Minutes. If for 5 minutes, no buys at least 0.5 BNB are recorded,\r\nthe last buyer will receive 50% of the entire Jackpot Fund.\r\nThis will drive EXTREME BUY PRESSURE AND MOMENTUM!\r\n\r\nNormal Jackpot:\r\nMin Buy will be set at 0.15 BNB for every 15 Minutes. If for 15 minutes, no buys at least 0.15 BNB are recorded,\r\nthe last buyer will receive 50% of the entire Jackpot Fund.\r\nThis will drive consistent buy pressure and momentum!\r\n\r\nJackpot Big Bang Event:\r\nThe jackpot has a 12 BNB hard limit that, if reached, will trigger the big bang event.\r\n50% will go to back to the Jackpot Fund / 50% will spark a Huge Buyback and Burn event!\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.13;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _lockedLiquidity;\r\n    address payable private _devWallet;\r\n    address payable private _marketingWallet;\r\n    address payable private _buybackWallet;\r\n\r\n    mapping(address => bool) internal authorizations;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    event AuthorizationGranted(address indexed wallet);\r\n    event AuthorizationRevoked(address indexed wallet);\r\n\r\n    event DevWalletChanged(address indexed from, address indexed to);\r\n    event MarketingWalletChanged(address indexed from, address indexed to);\r\n    event BuybackWalletChanged(address indexed from, address indexed to);\r\n    event LockedLiquidityAddressChanged(\r\n        address indexed from,\r\n        address indexed to\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        _owner = initialOwner;\r\n        authorizations[_owner] = true;\r\n\r\n        emit OwnershipTransferred(address(0), initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function lockedLiquidity() public view returns (address) {\r\n        return _lockedLiquidity;\r\n    }\r\n\r\n    function devWallet() public view returns (address payable) {\r\n        return _devWallet;\r\n    }\r\n\r\n    function marketingWallet() public view returns (address payable) {\r\n        return _marketingWallet;\r\n    }\r\n\r\n    function buybackWallet() public view returns (address payable) {\r\n        return _buybackWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the dev wallet owner.\r\n     */\r\n    modifier onlyDev() {\r\n        require(\r\n            _devWallet == _msgSender(),\r\n            \"Ownable: caller is not the dev wallet owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the marketing wallet owner.\r\n     */\r\n    modifier onlyMarketing() {\r\n        require(\r\n            _marketingWallet == _msgSender(),\r\n            \"Ownable: caller is not the marketing wallet owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the buyback wallet owner.\r\n     */\r\n    modifier onlyBuyback() {\r\n        require(\r\n            _buybackWallet == _msgSender(),\r\n            \"Ownable: caller is not the buyback wallet owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setDevWalletAddress(address payable devWalletAddress)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(\r\n            devWalletAddress != address(0),\r\n            \"You must supply a non-zero address\"\r\n        );\r\n        emit DevWalletChanged(_devWallet, devWalletAddress);\r\n        _devWallet = devWalletAddress;\r\n    }\r\n\r\n    function setMarketingWalletAddress(address payable marketingWalletAddress)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(\r\n            marketingWalletAddress != address(0),\r\n            \"You must supply a non-zero address\"\r\n        );\r\n        emit MarketingWalletChanged(_marketingWallet, marketingWalletAddress);\r\n        _marketingWallet = marketingWalletAddress;\r\n    }\r\n\r\n    function setBuybackWallet(address payable buybackWalletAddress)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(\r\n            buybackWalletAddress != address(0),\r\n            \"You must supply a non-zero address\"\r\n        );\r\n        emit BuybackWalletChanged(_buybackWallet, buybackWalletAddress);\r\n        _buybackWallet = buybackWalletAddress;\r\n    }\r\n\r\n    function setLockedLiquidityAddress(address liquidityAddress)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(\r\n            liquidityAddress != _lockedLiquidity,\r\n            \"The same liquidity address is used\"\r\n        );\r\n        emit LockedLiquidityAddressChanged(_lockedLiquidity, liquidityAddress);\r\n        _lockedLiquidity = liquidityAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _owner = newOwner;\r\n        authorizations[newOwner] = true;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier onlyAuthorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        require(!authorizations[adr], \"Address is already authorized\");\r\n        authorizations[adr] = true;\r\n\r\n        emit AuthorizationGranted(adr);\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        require(authorizations[adr], \"Address is already NOT authorized\");\r\n        authorizations[adr] = false;\r\n\r\n        emit AuthorizationRevoked(adr);\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set)\r\n        internal\r\n        view\r\n        returns (bytes32[] memory)\r\n    {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set)\r\n        internal\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract SafeLuna is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    EnumerableSet.AddressSet private _isExcludedFromFee;\r\n    EnumerableSet.AddressSet private _isExcludedFromSwapAndLiquify;\r\n\r\n    // 100%\r\n    uint256 private constant MAX_PCT = 10000;\r\n    uint256 private constant BNB_DECIMALS = 18;\r\n    uint256 private constant USDT_DECIMALS = 18;\r\n    address private constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    // At any given time, buy and sell fees can NOT exceed 98% each\r\n    uint256 private constant TOTAL_FEES_LIMIT = 9800;\r\n    // We don't add to liquidity unless we have at least 1 Safe Luna token\r\n    uint256 private constant LIQ_SWAP_THRESH = 10**_decimals;\r\n\r\n    // PCS takes 0.25% fee on all txs\r\n    uint256 private constant ROUTER_FEE = 25;\r\n\r\n    // Jackpot hard limits\r\n    uint256 private constant JACKPOT_TIMESPAN_LIMIT_MIN = 30;\r\n    uint256 private constant JACKPOT_TIMESPAN_LIMIT_MAX = 1200000;\r\n\r\n    uint256 private constant JACKPOT_BIGBANG_MIN = 30 * 10**USDT_DECIMALS;\r\n    uint256 private constant JACKPOT_BIGBANG_MAX = 250000 * 10**USDT_DECIMALS;\r\n\r\n    uint256 private constant JACKPOT_BUYER_SHARE_MIN = 500;\r\n    uint256 private constant JACKPOT_BUYER_SHARE_MAX = 10000;\r\n\r\n    uint256 private constant JACKPOT_MINBUY_MIN = 5 * 10**(BNB_DECIMALS - 2);\r\n    uint256 private constant JACKPOT_MINBUY_MAX = 5 * 10**(BNB_DECIMALS - 1);\r\n\r\n    uint256 private constant JACKPOT_CASHOUT_MIN = 400;\r\n    uint256 private constant JACKPOT_CASHOUT_MAX = 7000;\r\n\r\n    uint256 private constant JACKPOT_BIGBANG_BUYBACK_MIN = 300;\r\n    uint256 private constant JACKPOT_BIGBANG_BUYBACK_MAX = 7000;\r\n\r\n    string private constant _name = \"Safe Luna\";\r\n    string private constant _symbol = \"SafeLuna\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 10000000 * 10**_decimals;\r\n\r\n    // Max wallet size initially set to 1%\r\n    uint256 public maxWalletSize = _tTotal.div(100);\r\n\r\n    // Buy fees\r\n    // liquidity\r\n    uint256 public bLiquidityFee = 100;\r\n    // marketing\r\n    uint256 public bMarketingFee = 300;\r\n    // dev\r\n    uint256 public bDevFee = 100;\r\n    // jackpot\r\n    uint256 public bJackpotFee = 400;\r\n\r\n    // Sell fees\r\n    // liquidity\r\n    uint256 public sLiquidityFee = 100;\r\n    // marketing\r\n    uint256 public sMarketingFee = 300;\r\n    // dev\r\n    uint256 public sDevFee = 100;\r\n    // jackpot\r\n    uint256 public sJackpotFee = 600;\r\n\r\n    // Fee variables for cross-method usage\r\n    uint256 private _liquidityFee = 0;\r\n    uint256 private _marketingFee = 0;\r\n    uint256 private _devFee = 0;\r\n    uint256 private _jackpotFee = 0;\r\n\r\n    // Token distribution held by the contract\r\n    uint256 private _liquidityTokens = 0;\r\n    uint256 private _marketingTokens = 0;\r\n    uint256 private _devTokens = 0;\r\n    uint256 private _jackpotTokens = 0;\r\n\r\n    // Jackpot related variables\r\n    // 55.55% jackpot cashout to last buyer\r\n    uint256 public jackpotCashout = 5555;\r\n    // 90% of jackpot cashout to last buyer\r\n    uint256 public jackpotBuyerShare = 9000;\r\n    // Buys > 0.1 BNB will be eligible for the jackpot\r\n    uint256 public jackpotMinBuy = 1 * 10**(BNB_DECIMALS - 1);\r\n    // Jackpot time span is initially set to 10 mins\r\n    uint256 public jackpotTimespan = 10 * 60;\r\n    // Jackpot hard limit, BNB value\r\n    uint256 public jackpotHardLimit = 250 * 10**(BNB_DECIMALS);\r\n    // Jackpot hard limit buyback share\r\n    uint256 public jackpotHardBuyback = 5000;\r\n\r\n    address payable private _lastBuyer = payable(address(this));\r\n    uint256 private _lastBuyTimestamp = 0;\r\n\r\n    address private _lastAwarded = address(0);\r\n    uint256 private _lastAwardedCash = 0;\r\n    uint256 private _lastAwardedTokens = 0;\r\n    uint256 private _lastAwardedTimestamp = 0;\r\n\r\n    uint256 private _lastBigBangCash = 0;\r\n    uint256 private _lastBigBangTokens = 0;\r\n    uint256 private _lastBigBangTimestamp = 0;\r\n\r\n    // The minimum transaction limit that can be set is 0.1% of the total supply\r\n    uint256 private constant MIN_TX_LIMIT = 10;\r\n    // Initially, max TX amount is set to the total supply\r\n    uint256 public maxTxAmount = _tTotal;\r\n\r\n    uint256 public numTokensSellToAddToLiquidity = 2000 * 10**_decimals;\r\n\r\n    // Pending balances (BNB) ready to be collected\r\n    uint256 private _pendingMarketingBalance = 0;\r\n    uint256 private _pendingDevBalance = 0;\r\n    uint256 private _pendingJackpotBalance = 0;\r\n\r\n    // Total BNB/LAS collected by various mechanisms (dev, marketing, jackpot)\r\n    uint256 private _totalMarketingFeesCollected = 0;\r\n    uint256 private _totalDevFeesCollected = 0;\r\n    uint256 private _totalJackpotCashedOut = 0;\r\n    uint256 private _totalJackpotTokensOut = 0;\r\n    uint256 private _totalJackpotBuyer = 0;\r\n    uint256 private _totalJackpotBuyback = 0;\r\n    uint256 private _totalJackpotBuyerTokens = 0;\r\n    uint256 private _totalJackpotBuybackTokens = 0;\r\n\r\n    bool public tradingOpen = false;\r\n    // Liquidity\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool private _inSwapAndLiquify;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 bnbReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n    event DevFeesCollected(uint256 bnbCollected);\r\n    event MarketingFeesCollected(uint256 bnbCollected);\r\n    event JackpotAwarded(\r\n        uint256 cashedOut,\r\n        uint256 tokensOut,\r\n        uint256 buyerShare,\r\n        uint256 tokensToBuyer,\r\n        uint256 toBuyback,\r\n        uint256 tokensToBuyback\r\n    );\r\n    event BigBang(uint256 cashedOut, uint256 tokensOut);\r\n\r\n    event BuyFeesChanged(\r\n        uint256 liquidityFee,\r\n        uint256 marketingFee,\r\n        uint256 devFee,\r\n        uint256 jackpotFee\r\n    );\r\n\r\n    event SellFeesChanged(\r\n        uint256 liquidityFee,\r\n        uint256 marketingFee,\r\n        uint256 devFee,\r\n        uint256 jackpotFee\r\n    );\r\n\r\n    event JackpotFeaturesChanged(\r\n        uint256 jackpotCashout,\r\n        uint256 jackpotBuyerShare,\r\n        uint256 jackpotMinBuy\r\n    );\r\n\r\n    event JackpotTimespanChanged(uint256 jackpotTimespan);\r\n\r\n    event MaxTransferAmountChanged(uint256 maxTxAmount);\r\n\r\n    event MaxWalletSizeChanged(uint256 maxWalletSize);\r\n\r\n    event TokenToSellOnSwapChanged(uint256 numTokens);\r\n\r\n    event BigBangFeaturesChanged(\r\n        uint256 jackpotHardBuyback,\r\n        uint256 jackpotHardLimit\r\n    );\r\n\r\n    event JackpotFund(uint256 bnbSent, uint256 tokenAmount);\r\n\r\n    modifier lockTheSwap() {\r\n        _inSwapAndLiquify = true;\r\n        _;\r\n        _inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor(address cOwner) Ownable(cOwner) {\r\n        _tOwned[cOwner] = _tTotal;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n                address(this),\r\n                uniswapV2Router.WETH()\r\n            );\r\n\r\n        // Exclude system addresses from fee\r\n        _isExcludedFromFee.add(owner());\r\n        _isExcludedFromFee.add(address(this));\r\n\r\n        _isExcludedFromSwapAndLiquify.add(uniswapV2Pair);\r\n\r\n        emit Transfer(address(0), cOwner, _tTotal);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        transfer(sender, recipient, amount);\r\n        approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"BEP20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"BEP20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function totalMarketingFeesCollected()\r\n        external\r\n        view\r\n        onlyMarketing\r\n        returns (uint256)\r\n    {\r\n        return _totalMarketingFeesCollected;\r\n    }\r\n\r\n    function totalDevFeesCollected() external view onlyDev returns (uint256) {\r\n        return _totalDevFeesCollected;\r\n    }\r\n\r\n    function totalJackpotOut() external view returns (uint256, uint256) {\r\n        return (_totalJackpotCashedOut, _totalJackpotTokensOut);\r\n    }\r\n\r\n    function totalJackpotBuyer() external view returns (uint256, uint256) {\r\n        return (_totalJackpotBuyer, _totalJackpotBuyerTokens);\r\n    }\r\n\r\n    function totalJackpotBuyback() external view returns (uint256, uint256) {\r\n        return (_totalJackpotBuyback, _totalJackpotBuybackTokens);\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyAuthorized {\r\n        _isExcludedFromFee.add(account);\r\n    }\r\n\r\n    function includeInFee(address account) public onlyAuthorized {\r\n        _isExcludedFromFee.remove(account);\r\n    }\r\n\r\n    function setBuyFees(\r\n        uint256 liquidityFee,\r\n        uint256 marketingFee,\r\n        uint256 devFee,\r\n        uint256 jackpotFee\r\n    ) external onlyAuthorized {\r\n        require(\r\n            liquidityFee.add(marketingFee).add(devFee).add(jackpotFee) <=\r\n                TOTAL_FEES_LIMIT,\r\n            \"Total fees can not exceed the declared limit\"\r\n        );\r\n        bLiquidityFee = liquidityFee;\r\n        bMarketingFee = marketingFee;\r\n        bDevFee = devFee;\r\n        bJackpotFee = jackpotFee;\r\n\r\n        emit BuyFeesChanged(bLiquidityFee, bMarketingFee, bDevFee, bJackpotFee);\r\n    }\r\n\r\n    function getBuyTax() public view returns (uint256) {\r\n        return bLiquidityFee.add(bMarketingFee).add(bDevFee).add(bJackpotFee);\r\n    }\r\n\r\n    function setSellFees(\r\n        uint256 liquidityFee,\r\n        uint256 marketingFee,\r\n        uint256 devFee,\r\n        uint256 jackpotFee\r\n    ) external onlyAuthorized {\r\n        require(\r\n            liquidityFee.add(marketingFee).add(devFee).add(jackpotFee) <=\r\n                TOTAL_FEES_LIMIT,\r\n            \"Total fees can not exceed the declared limit\"\r\n        );\r\n        sLiquidityFee = liquidityFee;\r\n        sMarketingFee = marketingFee;\r\n        sDevFee = devFee;\r\n        sJackpotFee = jackpotFee;\r\n\r\n        emit SellFeesChanged(\r\n            sLiquidityFee,\r\n            sMarketingFee,\r\n            sDevFee,\r\n            sJackpotFee\r\n        );\r\n    }\r\n\r\n    function getSellTax() public view returns (uint256) {\r\n        return sLiquidityFee.add(sMarketingFee).add(sDevFee).add(sJackpotFee);\r\n    }\r\n\r\n    function setJackpotFeatures(\r\n        uint256 _jackpotCashout,\r\n        uint256 _jackpotBuyerShare,\r\n        uint256 _jackpotMinBuy\r\n    ) external onlyAuthorized {\r\n        require(\r\n            _jackpotCashout >= JACKPOT_CASHOUT_MIN &&\r\n                _jackpotCashout <= JACKPOT_CASHOUT_MAX,\r\n            \"Jackpot cashout percentage needs to be between 40% and 70%\"\r\n        );\r\n        require(\r\n            _jackpotBuyerShare >= JACKPOT_BUYER_SHARE_MIN &&\r\n                _jackpotBuyerShare <= JACKPOT_BUYER_SHARE_MAX,\r\n            \"Jackpot buyer share percentage needs to be between 50% and 100%\"\r\n        );\r\n        require(\r\n            _jackpotMinBuy >= JACKPOT_MINBUY_MIN &&\r\n                _jackpotMinBuy <= JACKPOT_MINBUY_MAX,\r\n            \"Jackpot min buy needs to be between 0.05 and 0.5 BNB\"\r\n        );\r\n        jackpotCashout = _jackpotCashout;\r\n        jackpotBuyerShare = _jackpotBuyerShare;\r\n        jackpotMinBuy = _jackpotMinBuy;\r\n\r\n        emit JackpotFeaturesChanged(\r\n            jackpotCashout,\r\n            jackpotBuyerShare,\r\n            jackpotMinBuy\r\n        );\r\n    }\r\n\r\n    function setJackpotHardFeatures(\r\n        uint256 _jackpotHardBuyback,\r\n        uint256 _jackpotHardLimit\r\n    ) external onlyAuthorized {\r\n        require(\r\n            _jackpotHardBuyback >= JACKPOT_BIGBANG_BUYBACK_MIN &&\r\n                _jackpotHardBuyback <= JACKPOT_BIGBANG_BUYBACK_MAX,\r\n            \"Jackpot hard buyback percentage needs to be between 30% and 70%\"\r\n        );\r\n        jackpotHardBuyback = _jackpotHardBuyback;\r\n\r\n        uint256 hardLimitUsd = usdEquivalent(_jackpotHardLimit);\r\n        require(\r\n            hardLimitUsd >= JACKPOT_BIGBANG_MIN &&\r\n                hardLimitUsd <= JACKPOT_BIGBANG_MAX,\r\n            \"Jackpot hard value limit for the big bang needs to be between 30K and 250K USD\"\r\n        );\r\n        jackpotHardLimit = _jackpotHardLimit;\r\n\r\n        emit BigBangFeaturesChanged(jackpotHardBuyback, jackpotHardLimit);\r\n    }\r\n\r\n    function setJackpotTimespanInSeconds(uint256 _jackpotTimespan)\r\n        external\r\n        onlyAuthorized\r\n    {\r\n        require(\r\n            _jackpotTimespan >= JACKPOT_TIMESPAN_LIMIT_MIN &&\r\n                _jackpotTimespan <= JACKPOT_TIMESPAN_LIMIT_MAX,\r\n            \"Jackpot timespan needs to be between 30 and 1200 seconds (20 minutes)\"\r\n        );\r\n        jackpotTimespan = _jackpotTimespan;\r\n\r\n        emit JackpotTimespanChanged(jackpotTimespan);\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 txAmount) external onlyAuthorized {\r\n        require(\r\n            txAmount >= _tTotal.mul(MIN_TX_LIMIT).div(MAX_PCT),\r\n            \"Maximum transaction limit can't be less than 0.1% of the total supply\"\r\n        );\r\n        maxTxAmount = txAmount;\r\n\r\n        emit MaxTransferAmountChanged(maxTxAmount);\r\n    }\r\n\r\n    function setMaxWallet(uint256 amount) external onlyAuthorized {\r\n        require(\r\n            amount >= _tTotal.div(1000),\r\n            \"Max wallet size must be at least 0.1% of the total supply\"\r\n        );\r\n        maxWalletSize = amount;\r\n\r\n        emit MaxWalletSizeChanged(maxWalletSize);\r\n    }\r\n\r\n    function setNumTokensSellToAddToLiquidity(uint256 numTokens)\r\n        external\r\n        onlyAuthorized\r\n    {\r\n        numTokensSellToAddToLiquidity = numTokens;\r\n\r\n        emit TokenToSellOnSwapChanged(numTokensSellToAddToLiquidity);\r\n    }\r\n\r\n    function fundJackpot(uint256 tokenAmount) external payable onlyAuthorized {\r\n        require(\r\n            balanceOf(msg.sender) >= tokenAmount,\r\n            \"You don't have enough tokens to fund the jackpot\"\r\n        );\r\n        uint256 bnbSent = msg.value;\r\n        _pendingJackpotBalance = _pendingJackpotBalance.add(bnbSent);\r\n        if (tokenAmount > 0) {\r\n            transferBasic(msg.sender, address(this), tokenAmount);\r\n            _jackpotTokens = _jackpotTokens.add(tokenAmount);\r\n        }\r\n\r\n        emit JackpotFund(bnbSent, tokenAmount);\r\n    }\r\n\r\n    function isJackpotEligible(uint256 tokenAmount) public view returns (bool) {\r\n        if (jackpotMinBuy == 0) {\r\n            return true;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        uint256 tokensOut = uniswapV2Router\r\n        .getAmountsOut(jackpotMinBuy, path)[1].mul(MAX_PCT.sub(ROUTER_FEE)).div(\r\n                // We don't subtract the buy fee since the tokenAmount is pre-tax\r\n                MAX_PCT\r\n            );\r\n        return tokenAmount >= tokensOut;\r\n    }\r\n\r\n    function usdEquivalent(uint256 bnbAmount) public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = USDT;\r\n\r\n        return uniswapV2Router.getAmountsOut(bnbAmount, path)[1];\r\n    }\r\n\r\n    function getUsedTokens(\r\n        uint256 accSum,\r\n        uint256 tokenAmount,\r\n        uint256 tokens\r\n    ) private pure returns (uint256, uint256) {\r\n        if (accSum >= tokenAmount) {\r\n            return (0, accSum);\r\n        }\r\n        uint256 available = tokenAmount - accSum;\r\n        if (tokens <= available) {\r\n            return (tokens, accSum.add(tokens));\r\n        }\r\n        return (available, accSum.add(available));\r\n    }\r\n\r\n    function getTokenShares(uint256 tokenAmount)\r\n        private\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 accSum = 0;\r\n        uint256 liquidityTokens = 0;\r\n        uint256 marketingTokens = 0;\r\n        uint256 devTokens = 0;\r\n        uint256 jackpotTokens = 0;\r\n\r\n        // Either 0 or 1+ Safe Luna to prevent PCS errors on liq swap\r\n        if (_liquidityTokens >= LIQ_SWAP_THRESH) {\r\n            (liquidityTokens, accSum) = getUsedTokens(\r\n                accSum,\r\n                tokenAmount,\r\n                _liquidityTokens\r\n            );\r\n            _liquidityTokens = _liquidityTokens.sub(liquidityTokens);\r\n        }\r\n\r\n        (marketingTokens, accSum) = getUsedTokens(\r\n            accSum,\r\n            tokenAmount,\r\n            _marketingTokens\r\n        );\r\n        _marketingTokens = _marketingTokens.sub(marketingTokens);\r\n\r\n        (devTokens, accSum) = getUsedTokens(accSum, tokenAmount, _devTokens);\r\n        _devTokens = _devTokens.sub(devTokens);\r\n\r\n        (jackpotTokens, accSum) = getUsedTokens(\r\n            accSum,\r\n            tokenAmount,\r\n            _jackpotTokens\r\n        );\r\n        _jackpotTokens = _jackpotTokens.sub(jackpotTokens);\r\n\r\n        return (liquidityTokens, marketingTokens, devTokens, jackpotTokens);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(enabled);\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee.contains(account);\r\n    }\r\n\r\n    function isExcludedFromSwapAndLiquify(address account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _isExcludedFromSwapAndLiquify.contains(account);\r\n    }\r\n\r\n    function includeFromSwapAndLiquify(address account) external onlyOwner {\r\n        _isExcludedFromSwapAndLiquify.remove(account);\r\n    }\r\n\r\n    function excludeFromSwapAndLiquify(address account) external onlyOwner {\r\n        _isExcludedFromSwapAndLiquify.add(account);\r\n    }\r\n\r\n    function setUniswapRouter(address otherRouterAddress) external onlyOwner {\r\n        uniswapV2Router = IUniswapV2Router02(otherRouterAddress);\r\n    }\r\n\r\n    function setUniswapPair(address otherPairAddress) external onlyOwner {\r\n        require(\r\n            otherPairAddress != address(0),\r\n            \"You must supply a non-zero address\"\r\n        );\r\n        uniswapV2Pair = otherPairAddress;\r\n    }\r\n\r\n    function transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(to != devWallet(), \"Dev wallet address cannot receive tokens\");\r\n        require(from != devWallet(), \"Dev wallet address cannot send tokens\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (from != owner() && to != owner()) {\r\n            require(\r\n                amount <= maxTxAmount,\r\n                \"Transfer amount exceeds the maxTxAmount\"\r\n            );\r\n        }\r\n\r\n        if (!authorizations[from] && !authorizations[to]) {\r\n            require(tradingOpen, \"Trading is currently not open\");\r\n        }\r\n\r\n        // Jackpot mechanism locks the swap if triggered. We should handle it as\r\n        // soon as possible so that we could award the jackpot on a sell and on a buy\r\n        if (!_inSwapAndLiquify && _pendingJackpotBalance >= jackpotHardLimit) {\r\n            processBigBang();\r\n        } else if (\r\n            // We can't award the jackpot in swap and liquify\r\n            // Pending balances need to be untouched (externally) for swaps\r\n            !_inSwapAndLiquify &&\r\n            _lastBuyer != address(0) &&\r\n            _lastBuyer != address(this) &&\r\n            block.timestamp.sub(_lastBuyTimestamp) >= jackpotTimespan\r\n        ) {\r\n            awardJackpot();\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        if (contractTokenBalance >= maxTxAmount) {\r\n            contractTokenBalance = maxTxAmount;\r\n        }\r\n\r\n        bool isOverMinTokenBalance = contractTokenBalance >=\r\n            numTokensSellToAddToLiquidity;\r\n        if (\r\n            isOverMinTokenBalance &&\r\n            !_inSwapAndLiquify &&\r\n            !_isExcludedFromSwapAndLiquify.contains(from) &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            swapAndLiquify(numTokensSellToAddToLiquidity);\r\n        }\r\n\r\n        bool takeFee = true;\r\n        if (\r\n            _isExcludedFromFee.contains(from) ||\r\n            _isExcludedFromFee.contains(to) ||\r\n            (uniswapV2Pair != from && uniswapV2Pair != to)\r\n        ) {\r\n            takeFee = false;\r\n        }\r\n\r\n        tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function enableTrading() public onlyOwner {\r\n        // Trading can only be enabled, so it can never be turned off\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function collectMarketingFees() public onlyMarketing {\r\n        _totalMarketingFeesCollected = _totalMarketingFeesCollected.add(\r\n            _pendingMarketingBalance\r\n        );\r\n        marketingWallet().transfer(_pendingMarketingBalance);\r\n        emit MarketingFeesCollected(_pendingMarketingBalance);\r\n        _pendingMarketingBalance = 0;\r\n    }\r\n\r\n    function collectDevFees() public onlyDev {\r\n        _totalDevFeesCollected = _totalDevFeesCollected.add(_pendingDevBalance);\r\n        devWallet().transfer(_pendingDevBalance);\r\n        emit DevFeesCollected(_pendingDevBalance);\r\n        _pendingDevBalance = 0;\r\n    }\r\n\r\n    function getJackpot() public view returns (uint256, uint256) {\r\n        return (_pendingJackpotBalance, _jackpotTokens);\r\n    }\r\n\r\n    function jackpotBuyerShareAmount() public view returns (uint256, uint256) {\r\n        uint256 bnb = _pendingJackpotBalance\r\n            .mul(jackpotCashout)\r\n            .div(MAX_PCT)\r\n            .mul(jackpotBuyerShare)\r\n            .div(MAX_PCT);\r\n        uint256 tokens = _jackpotTokens\r\n            .mul(jackpotCashout)\r\n            .div(MAX_PCT)\r\n            .mul(jackpotBuyerShare)\r\n            .div(MAX_PCT);\r\n        return (bnb, tokens);\r\n    }\r\n\r\n    function jackpotBuybackAmount() public view returns (uint256, uint256) {\r\n        uint256 bnb = _pendingJackpotBalance\r\n            .mul(jackpotCashout)\r\n            .div(MAX_PCT)\r\n            .mul(MAX_PCT.sub(jackpotBuyerShare))\r\n            .div(MAX_PCT);\r\n        uint256 tokens = _jackpotTokens\r\n            .mul(jackpotCashout)\r\n            .div(MAX_PCT)\r\n            .mul(MAX_PCT.sub(jackpotBuyerShare))\r\n            .div(MAX_PCT);\r\n\r\n        return (bnb, tokens);\r\n    }\r\n\r\n    function getLastBuy() public view returns (address, uint256) {\r\n        return (_lastBuyer, _lastBuyTimestamp);\r\n    }\r\n\r\n    function getLastAwarded()\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            _lastAwarded,\r\n            _lastAwardedCash,\r\n            _lastAwardedTokens,\r\n            _lastAwardedTimestamp\r\n        );\r\n    }\r\n\r\n    function getLastBigBang()\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (_lastBigBangCash, _lastBigBangTokens, _lastBigBangTimestamp);\r\n    }\r\n\r\n    function getPendingBalances()\r\n        public\r\n        view\r\n        onlyAuthorized\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            _pendingMarketingBalance,\r\n            _pendingDevBalance,\r\n            _pendingJackpotBalance\r\n        );\r\n    }\r\n\r\n    function getPendingTokens()\r\n        public\r\n        view\r\n        onlyAuthorized\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (_liquidityTokens, _marketingTokens, _devTokens, _jackpotTokens);\r\n    }\r\n\r\n    function processBigBang() private lockTheSwap {\r\n        uint256 cashedOut = _pendingJackpotBalance.mul(jackpotHardBuyback).div(\r\n            MAX_PCT\r\n        );\r\n        uint256 tokensOut = _jackpotTokens.mul(jackpotHardBuyback).div(MAX_PCT);\r\n\r\n        buybackWallet().transfer(cashedOut);\r\n        transferBasic(address(this), buybackWallet(), tokensOut);\r\n        emit BigBang(cashedOut, tokensOut);\r\n\r\n        _lastBigBangCash = cashedOut;\r\n        _lastBigBangTokens = tokensOut;\r\n        _lastBigBangTimestamp = block.timestamp;\r\n\r\n        _pendingJackpotBalance = _pendingJackpotBalance.sub(cashedOut);\r\n        _jackpotTokens = _jackpotTokens.sub(tokensOut);\r\n\r\n        _totalJackpotCashedOut = _totalJackpotCashedOut.add(cashedOut);\r\n        _totalJackpotBuyback = _totalJackpotBuyback.add(cashedOut);\r\n        _totalJackpotTokensOut = _totalJackpotTokensOut.add(tokensOut);\r\n        _totalJackpotBuybackTokens = _totalJackpotBuybackTokens.add(tokensOut);\r\n    }\r\n\r\n    function awardJackpot() private lockTheSwap {\r\n        require(\r\n            _lastBuyer != address(0) && _lastBuyer != address(this),\r\n            \"No last buyer detected\"\r\n        );\r\n        uint256 cashedOut = _pendingJackpotBalance.mul(jackpotCashout).div(\r\n            MAX_PCT\r\n        );\r\n        uint256 tokensOut = _jackpotTokens.mul(jackpotCashout).div(MAX_PCT);\r\n        uint256 buyerShare = cashedOut.mul(jackpotBuyerShare).div(MAX_PCT);\r\n        uint256 tokensToBuyer = tokensOut.mul(jackpotBuyerShare).div(MAX_PCT);\r\n        uint256 toBuyback = cashedOut - buyerShare;\r\n        uint256 tokensToBuyback = tokensOut - tokensToBuyer;\r\n        _lastBuyer.transfer(buyerShare);\r\n        transferBasic(address(this), _lastBuyer, tokensToBuyer);\r\n        buybackWallet().transfer(toBuyback);\r\n        transferBasic(address(this), buybackWallet(), tokensToBuyback);\r\n\r\n        _pendingJackpotBalance = _pendingJackpotBalance.sub(cashedOut);\r\n        _jackpotTokens = _jackpotTokens.sub(tokensOut);\r\n\r\n        emit JackpotAwarded(\r\n            cashedOut,\r\n            tokensOut,\r\n            buyerShare,\r\n            tokensToBuyer,\r\n            toBuyback,\r\n            tokensToBuyback\r\n        );\r\n\r\n        _lastAwarded = _lastBuyer;\r\n        _lastAwardedTimestamp = block.timestamp;\r\n        _lastAwardedCash = buyerShare;\r\n        _lastAwardedTokens = tokensToBuyer;\r\n\r\n        _lastBuyer = payable(address(this));\r\n        _lastBuyTimestamp = 0;\r\n\r\n        _totalJackpotCashedOut = _totalJackpotCashedOut.add(cashedOut);\r\n        _totalJackpotTokensOut = _totalJackpotTokensOut.add(tokensOut);\r\n        _totalJackpotBuyer = _totalJackpotBuyer.add(buyerShare);\r\n        _totalJackpotBuyerTokens = _totalJackpotBuyerTokens.add(tokensToBuyer);\r\n        _totalJackpotBuyback = _totalJackpotBuyback.add(toBuyback);\r\n        _totalJackpotBuybackTokens = _totalJackpotBuybackTokens.add(\r\n            tokensToBuyback\r\n        );\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokenAmount) private lockTheSwap {\r\n        (\r\n            uint256 liqTokens,\r\n            uint256 marketingTokens,\r\n            uint256 devTokens,\r\n            uint256 jackpotTokens\r\n        ) = getTokenShares(tokenAmount);\r\n        uint256 toBeSwapped = liqTokens.add(marketingTokens).add(devTokens).add(\r\n            jackpotTokens\r\n        );\r\n        // This variable holds the liquidity tokens that won't be converted\r\n        uint256 pureLiqTokens = liqTokens.div(2);\r\n\r\n        // Everything else from the tokens should be converted\r\n        uint256 tokensForBnbExchange = toBeSwapped.sub(pureLiqTokens);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForBnb(tokensForBnbExchange);\r\n\r\n        // How many BNBs did we gain after this conversion?\r\n        uint256 gainedBnb = address(this).balance.sub(initialBalance);\r\n\r\n        // Calculate the amount of BNB that's assigned to the marketing wallet\r\n        uint256 balanceToMarketing = gainedBnb.mul(marketingTokens).div(\r\n            tokensForBnbExchange\r\n        );\r\n        _pendingMarketingBalance += balanceToMarketing;\r\n\r\n        // Same for dev\r\n        uint256 balanceToDev = gainedBnb.mul(devTokens).div(\r\n            tokensForBnbExchange\r\n        );\r\n        _pendingDevBalance += balanceToDev;\r\n\r\n        // Same for Jackpot\r\n        uint256 balanceToJackpot = gainedBnb.mul(jackpotTokens).div(\r\n            tokensForBnbExchange\r\n        );\r\n        _pendingJackpotBalance += balanceToJackpot;\r\n\r\n        uint256 remainingBnb = gainedBnb\r\n            .sub(balanceToMarketing)\r\n            .sub(balanceToDev)\r\n            .sub(balanceToJackpot);\r\n\r\n        if (liqTokens >= LIQ_SWAP_THRESH) {\r\n            // The leftover BNBs are purely for liquidity here\r\n            // We are not guaranteed to have all the pure liq tokens to be transferred to the pair\r\n            // This is because the uniswap router, PCS in this case, will make a quote based\r\n            // on the current reserves of the pair, so one of the parameters will be fully\r\n            // consumed, but the other will have leftovers.\r\n            uint256 prevBalance = balanceOf(address(this));\r\n            uint256 prevBnbBalance = address(this).balance;\r\n            addLiquidity(pureLiqTokens, remainingBnb);\r\n            uint256 usedBnbs = prevBnbBalance.sub(address(this).balance);\r\n            uint256 usedTokens = prevBalance.sub(balanceOf(address(this)));\r\n            // Reallocate the tokens that weren't used back to the internal liquidity tokens tracker\r\n            if (usedTokens < pureLiqTokens) {\r\n                _liquidityTokens += pureLiqTokens.sub(usedTokens);\r\n            }\r\n            // Reallocate the unused BNBs to the pending marketing wallet balance\r\n            if (usedBnbs < remainingBnb) {\r\n                _pendingMarketingBalance += remainingBnb.sub(usedBnbs);\r\n            }\r\n\r\n            emit SwapAndLiquify(tokensForBnbExchange, usedBnbs, usedTokens);\r\n        } else {\r\n            // We could have some dust, so we'll just add it to the pending marketing wallet balance\r\n            _pendingMarketingBalance += remainingBnb;\r\n\r\n            emit SwapAndLiquify(tokensForBnbExchange, 0, 0);\r\n        }\r\n    }\r\n\r\n    function swapTokensForBnb(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        // Approve token transfer to cover all possible scenarios\r\n        approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // Add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            lockedLiquidity(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) {\r\n            // If we're here, it means either the sender or recipient is excluded from taxes\r\n            // Also, it could be that this is just a transfer of tokens between wallets\r\n            _liquidityFee = 0;\r\n            _marketingFee = 0;\r\n            _devFee = 0;\r\n            _jackpotFee = 0;\r\n        } else if (recipient == uniswapV2Pair) {\r\n            // This is a sell\r\n            _liquidityFee = sLiquidityFee;\r\n            _marketingFee = sMarketingFee;\r\n            _devFee = sDevFee;\r\n            _jackpotFee = sJackpotFee;\r\n        } else {\r\n            // If we're here, it must mean that the sender is the uniswap pair\r\n            // This is a buy\r\n            if (isJackpotEligible(amount)) {\r\n                _lastBuyTimestamp = block.timestamp;\r\n                _lastBuyer = payable(recipient);\r\n            }\r\n\r\n            _liquidityFee = bLiquidityFee;\r\n            _marketingFee = bMarketingFee;\r\n            _devFee = bDevFee;\r\n            _jackpotFee = bJackpotFee;\r\n        }\r\n\r\n        transferStandard(sender, recipient, amount);\r\n    }\r\n\r\n    function transferBasic(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(amount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 tTransferAmount,\r\n            uint256 tLiquidity,\r\n            uint256 tMarketing,\r\n            uint256 tDev,\r\n            uint256 tJackpot\r\n        ) = processAmount(tAmount);\r\n        uint256 tFees = tLiquidity.add(tMarketing).add(tDev).add(tJackpot);\r\n        if (recipient != uniswapV2Pair && recipient != DEAD) {\r\n            require(\r\n                isExcludedFromFee(recipient) ||\r\n                    balanceOf(recipient).add(tTransferAmount) <= maxWalletSize,\r\n                \"Transfer amount will push this wallet beyond the maximum allowed size\"\r\n            );\r\n        }\r\n\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\r\n        takeTransactionFee(address(this), tFees);\r\n        _liquidityTokens += tLiquidity;\r\n        _marketingTokens += tMarketing;\r\n        _devTokens += tDev;\r\n        _jackpotTokens += tJackpot;\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function processAmount(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tLiquidity = tAmount.mul(_liquidityFee).div(MAX_PCT);\r\n        uint256 tMarketing = tAmount.mul(_marketingFee).div(MAX_PCT);\r\n        uint256 tDev = tAmount.mul(_devFee).div(MAX_PCT);\r\n        uint256 tJackpot = tAmount.mul(_jackpotFee).div(MAX_PCT);\r\n        uint256 tTransferAmount = tAmount.sub(\r\n            tLiquidity.add(tMarketing).add(tDev).add(tJackpot)\r\n        );\r\n        return (tTransferAmount, tLiquidity, tMarketing, tDev, tJackpot);\r\n    }\r\n\r\n    function takeTransactionFee(address to, uint256 tAmount) private {\r\n        if (tAmount <= 0) {\r\n            return;\r\n        }\r\n        _tOwned[to] = _tOwned[to].add(tAmount);\r\n    }\r\n\r\n    function aboutMe() public pure returns (uint256) {\r\n        return 0xbf919525b1bd565e29ab61d33ebd2194;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AuthorizationGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AuthorizationRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashedOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"}],\"name\":\"BigBang\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jackpotHardBuyback\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jackpotHardLimit\",\"type\":\"uint256\"}],\"name\":\"BigBangFeaturesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jackpotFee\",\"type\":\"uint256\"}],\"name\":\"BuyFeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"BuybackWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbCollected\",\"type\":\"uint256\"}],\"name\":\"DevFeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"DevWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashedOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensToBuyer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBuyback\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensToBuyback\",\"type\":\"uint256\"}],\"name\":\"JackpotAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jackpotCashout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jackpotBuyerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jackpotMinBuy\",\"type\":\"uint256\"}],\"name\":\"JackpotFeaturesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"JackpotFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jackpotTimespan\",\"type\":\"uint256\"}],\"name\":\"JackpotTimespanChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"LockedLiquidityAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbCollected\",\"type\":\"uint256\"}],\"name\":\"MarketingFeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MarketingWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTransferAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"MaxWalletSizeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jackpotFee\",\"type\":\"uint256\"}],\"name\":\"SellFeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"TokenToSellOnSwapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aboutMe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bJackpotFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectDevFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectMarketingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"fundJackpot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastAwarded\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBigBang\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeFromSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"isJackpotEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotBuybackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotBuyerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotBuyerShareAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotCashout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotHardBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotHardLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotMinBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotTimespan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sJackpotFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jackpotFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"buybackWalletAddress\",\"type\":\"address\"}],\"name\":\"setBuybackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"devWalletAddress\",\"type\":\"address\"}],\"name\":\"setDevWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jackpotCashout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jackpotBuyerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jackpotMinBuy\",\"type\":\"uint256\"}],\"name\":\"setJackpotFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jackpotHardBuyback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jackpotHardLimit\",\"type\":\"uint256\"}],\"name\":\"setJackpotHardFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jackpotTimespan\",\"type\":\"uint256\"}],\"name\":\"setJackpotTimespanInSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAddress\",\"type\":\"address\"}],\"name\":\"setLockedLiquidityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingWalletAddress\",\"type\":\"address\"}],\"name\":\"setMarketingWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jackpotFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otherPairAddress\",\"type\":\"address\"}],\"name\":\"setUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otherRouterAddress\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDevFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalJackpotBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalJackpotBuyer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalJackpotOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketingFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"usdEquivalent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SafeLuna", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000198b7e2a3088f59c5d2cc113e98c780dcf9303c7", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8575181abdce6cba50b0dfa2e09e2c683d319a8d829604a32f2bb1de80023822"}