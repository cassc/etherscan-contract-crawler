{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Pools/VestedPool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./Pool.sol\\\";\\n\\ncontract VestedPool is Pool {\\n    uint256 public unlockPeriod;\\n    uint256 public totalUnlock;\\n    uint256 public cliff;\\n    uint256 public afterPurchaseCliff;\\n\\n    uint256 public initialUnlock;\\n    uint256 public unlockPerPeriod;\\n\\n    uint256 public constant ONE_HUNDRED_PERCENT = 1e18 * 100;\\n\\n    event Claimed(address who, uint256 tokens);\\n\\n    constructor(\\n        address _paymentToken,\\n        address _poolToken,\\n        uint256 _startDate,\\n        uint256 _closeDate,\\n        uint256 _goal,\\n        uint256 _initialUnlock,\\n        uint256 _unlockPeriod,\\n        uint256 _totalUnlock,\\n        uint256 _cliff,\\n        uint256 _afterPurchaseCliff,\\n        uint256 _unlockPerPeriod\\n    ) Pool(_paymentToken, _poolToken, _startDate, _closeDate, _goal) {\\n        poolType = PoolTypes.Vested;\\n\\n        initialUnlock = _initialUnlock;\\n        unlockPeriod = _unlockPeriod;\\n        totalUnlock = _totalUnlock;\\n        cliff = _cliff;\\n        afterPurchaseCliff = _afterPurchaseCliff;\\n        unlockPerPeriod = _unlockPerPeriod;\\n    }\\n\\n    function canClaim(address user) public view returns (bool) {\\n        return (getClaimableTokens(user) > 0);\\n    }\\n\\n    function getClaimableTokens(address user) public view returns (uint256) {\\n        if (block.timestamp < (startDate + afterPurchaseCliff) || !hasBought(user)) return 0;\\n\\n        uint256 tokensToClaimAfterPurchase = (allocations[user].amount * initialUnlock) / ONE_HUNDRED_PERCENT;\\n        uint256 tokenstToClaimPerPeriod = (allocations[user].amount * unlockPerPeriod) / ONE_HUNDRED_PERCENT;\\n        uint256 claimed = allocations[user].claimed;\\n        uint256 amount = allocations[user].amount;\\n        if (block.timestamp >= totalUnlock + startDate + cliff || claimed + tokenstToClaimPerPeriod > amount) return amount - claimed;\\n\\n        if (claimed == 0) {\\n            uint256 claimable = tokensToClaimAfterPurchase;\\n            return claimable;\\n        } else {\\n            if (block.timestamp < startDate + afterPurchaseCliff + cliff) return 0;\\n            uint256 claimable = (((block.timestamp - startDate - afterPurchaseCliff - cliff) / unlockPeriod)) * tokenstToClaimPerPeriod + tokensToClaimAfterPurchase - claimed;\\n            if (claimable > amount - claimed) return amount - claimable;\\n\\n            return claimable;\\n        }\\n    }\\n\\n    function buy() public override(Pool) {\\n        super.buy();\\n\\n        if (afterPurchaseCliff == 0) {\\n            uint256 tokensToClaimAfterPurchase = (allocations[msg.sender].amount * initialUnlock) / ONE_HUNDRED_PERCENT;\\n            allocations[msg.sender].claimed = tokensToClaimAfterPurchase;\\n            allocations[msg.sender].claimedAt = block.timestamp;\\n            poolToken.transfer(msg.sender, tokensToClaimAfterPurchase);\\n            emit Claimed(msg.sender, tokensToClaimAfterPurchase);\\n        }\\n    }\\n\\n    function claim() public {\\n        uint256 claimable = getClaimableTokens(msg.sender);\\n        require(claimable > 0, \\\"Nothing to claim\\\");\\n\\n        allocations[msg.sender].claimed += claimable;\\n        allocations[msg.sender].claimedAt = block.timestamp;\\n        poolToken.transfer(msg.sender, claimable);\\n\\n        emit Claimed(msg.sender, claimable);\\n    }\\n\\n    function finishedClaiming(address user) external view returns (bool) {\\n        return (allocations[user].claimed == allocations[user].amount);\\n    }\\n\\n    function nextClaimingAt(address wallet) public view returns (uint256) {\\n        if (canClaim(wallet) || !hasBought(wallet)) return 0;\\n        if (allocations[wallet].claimed == 0) {\\n            return startDate + afterPurchaseCliff;\\n        } else {\\n            if (block.timestamp - startDate < afterPurchaseCliff) return startDate + afterPurchaseCliff;\\n            if (block.timestamp - startDate - afterPurchaseCliff < cliff) return startDate + afterPurchaseCliff + cliff + unlockPeriod;\\n            uint256 periodsPassed = (block.timestamp - startDate - cliff - afterPurchaseCliff) / unlockPeriod;\\n            return startDate + afterPurchaseCliff + cliff + unlockPeriod * (periodsPassed + 1);\\n        }\\n    }\\n\\n    function remained(address wallet) public view returns (uint256) {\\n        return allocations[wallet].amount - allocations[wallet].claimed;\\n    }\\n\\n    function batchSetBuyData(\\n        address[] calldata _recepients,\\n        uint256[] calldata _amounts,\\n        uint256[] calldata _claimed,\\n        uint256[] calldata _claimedAt,\\n        uint256 _rate\\n    ) external onlyOwner {\\n        uint256 _tokensSold;\\n        uint256 _paymentsReceived;\\n        for (uint32 i = 0; i < _recepients.length; i++) {\\n            allocations[_recepients[i]].amount = _amounts[i];\\n            allocations[_recepients[i]].claimed = _claimed[i];\\n            allocations[_recepients[i]].claimedAt = _claimedAt[i];\\n            allocations[_recepients[i]].rate = _rate;\\n            allocations[_recepients[i]].bought = true;\\n\\n            _tokensSold += _amounts[i];\\n            _paymentsReceived += (_amounts[i] * _rate) / _divider;\\n        }\\n        paymentsReceived = _paymentsReceived;\\n        tokensSold = _tokensSold;\\n    }\\n\\n    function claimingInfo(address wallet)\\n        external\\n        view\\n        returns (\\n            uint256 allocation,\\n            uint256 claimed,\\n            uint256 remainedToClaim,\\n            uint256 available,\\n            bool _canClaim,\\n            uint256 _nextClaimingAt\\n        )\\n    {\\n        return (allocations[wallet].amount, allocations[wallet].claimed, remained(wallet), getClaimableTokens(wallet), canClaim(wallet), nextClaimingAt(wallet));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Pools/Pool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Pool is Ownable {\\n    enum PoolTypes {\\n        Regular,\\n        Vested\\n    }\\n\\n    PoolTypes public poolType;\\n\\n    struct Allocation {\\n        uint256 amount;\\n        bool bought;\\n        uint256 claimed;\\n        uint256 rate;\\n        uint256 claimedAt;\\n    }\\n    mapping(address => Allocation) public allocations;\\n\\n    IERC20 public paymentToken;\\n    IERC20 public poolToken;\\n    address _receiver = 0x2983cF6AEc2165BBd314252fE2Ab2aC1671e592D;\\n\\n    uint256 public startDate;\\n    uint256 public closeDate;\\n\\n    uint256 public paymentsReceived;\\n    uint256 public goal;\\n    uint256 public tokensSold;\\n\\n    uint256 internal _divider = 100000;\\n\\n    event TokensBought(address participant, uint256 amount, uint256 spent);\\n\\n    function saleActive() public view returns (bool) {\\n        return (block.timestamp >= startDate && block.timestamp <= closeDate);\\n    }\\n\\n    function canBuy(address wallet) public view returns (bool) {\\n        if (!saleActive()) return false;\\n        if (allocations[wallet].amount == 0 || allocations[wallet].bought == true) return false;\\n        return true;\\n    }\\n\\n    function hasBought(address wallet) public view returns (bool) {\\n        return (allocations[wallet].bought);\\n    }\\n\\n    function isVested() external view returns (bool) {\\n        return poolType == PoolTypes.Vested;\\n    }\\n\\n    function buy() public virtual {\\n        require(saleActive(), \\\"The sale is not active\\\");\\n        require(canBuy(msg.sender), \\\"You cant buy tokens\\\");\\n        require(!hasBought(msg.sender), \\\"Youve already bought tokens\\\");\\n        require(paymentsReceived <= goal, \\\"Sale goal reached\\\");\\n\\n        uint256 rate = allocations[msg.sender].rate;\\n        uint256 amount = allocations[msg.sender].amount;\\n\\n        uint256 paymentToReceive = (amount * rate) / _divider;\\n\\n        require(paymentToken.allowance(msg.sender, address(this)) >= paymentToReceive, \\\"Payment token wasnt approved\\\");\\n\\n        allocations[msg.sender].bought = true;\\n\\n        paymentToken.transferFrom(msg.sender, _receiver, paymentToReceive);\\n\\n        tokensSold += amount;\\n        paymentsReceived += paymentToReceive;\\n\\n        emit TokensBought(msg.sender, amount, paymentToReceive);\\n    }\\n\\n    constructor(\\n        address _paymentToken,\\n        address _poolToken,\\n        uint256 _startDate,\\n        uint256 _closeDate,\\n        uint256 _goal\\n    ) {\\n        require(_startDate < _closeDate, \\\"Wrong dates\\\");\\n\\n        goal = _goal;\\n        paymentToken = IERC20(_paymentToken);\\n        poolToken = IERC20(_poolToken);\\n        startDate = _startDate;\\n        closeDate = _closeDate;\\n    }\\n\\n    function setGoal(uint256 _goal) external onlyOwner {\\n        goal = _goal;\\n    }\\n\\n    function setSaleDates(uint256 _startDate, uint256 _closeDate) external onlyOwner {\\n        require(startDate < closeDate && startDate != 0 && closeDate != 0, \\\"Wrong dates\\\");\\n        startDate = _startDate;\\n        closeDate = _closeDate;\\n    }\\n\\n    function setPoolTokens(address _paymentToken, address _poolToken) external onlyOwner {\\n        paymentToken = IERC20(_paymentToken);\\n        poolToken = IERC20(_poolToken);\\n    }\\n\\n    function setAllocation(\\n        address _to,\\n        uint256 _amount,\\n        uint256 _rate\\n    ) external onlyOwner {\\n        allocations[_to].amount = _amount;\\n        allocations[_to].claimed = 0;\\n        allocations[_to].rate = _rate;\\n        allocations[_to].bought = false;\\n    }\\n\\n    function batchSetAllocations(\\n        address[] calldata _recepients,\\n        uint256[] calldata _amounts,\\n        uint256 _rate\\n    ) external onlyOwner {\\n        for (uint32 i = 0; i < _recepients.length; i++) {\\n            allocations[_recepients[i]].amount = _amounts[i];\\n            allocations[_recepients[i]].claimed = 0;\\n            allocations[_recepients[i]].rate = _rate;\\n            allocations[_recepients[i]].bought = false;\\n        }\\n    }\\n\\n    function extractPaymentToken() external onlyOwner {\\n        paymentToken.transfer(msg.sender, paymentToken.balanceOf(address(this)));\\n    }\\n\\n    function extractPoolToken() external onlyOwner {\\n        poolToken.transfer(msg.sender, poolToken.balanceOf(address(this)));\\n    }\\n\\n    function extractBNB() external onlyOwner {\\n        msg.sender.call{value: address(this).balance}(\\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_closeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_goal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialUnlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalUnlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_afterPurchaseCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockPerPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spent\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterPurchaseCliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bought\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recepients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"batchSetAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recepients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimed\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimedAt\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"batchSetBuyData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"canBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"claimingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainedToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_canClaim\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_nextClaimingAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractPoolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"finishedClaiming\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"hasBought\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"nextClaimingAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentsReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolType\",\"outputs\":[{\"internalType\":\"enum Pool.PoolTypes\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"remained\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_goal\",\"type\":\"uint256\"}],\"name\":\"setGoal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"setPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_closeDate\",\"type\":\"uint256\"}],\"name\":\"setSaleDates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VestedPool", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000000000000000000000000000000000061b879300000000000000000000000000000000000000000000000000000000061b8a10900000000000000000000000000000000000000000000152d02c7e14af600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000000000000000000000000000000000000076a700000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000007080000000000000000000000000000000000000000000000001a055690d9db80000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}