{"SourceCode": "// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                0,\r\n                \"Address: low-level call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage)\r\n        private\r\n        pure\r\n    {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: newLaunchpadd.sol\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract MaxiRuby is ReentrancyGuard, Ownable {\r\n    uint256 public presaleId;\r\n    uint256 public BASE_MULTIPLIER;\r\n    uint256 public MONTH;\r\n    uint256 public totalBnbReceivedInAllTier;\r\n    uint256 public totalBnbInTierOne;\r\n    uint256 public totalBnbInTierTwo;\r\n    uint256 public totalBnbInTierThree;\r\n    uint256 public totalBnbInTierFour;\r\n    uint256 public totalBnbInTierFive;\r\n    uint256 public totalparticipants;\r\n    address payable public projectOwner;\r\n    uint256 public tierOneMaxCap;\r\n    uint256 public tierTwoMaxCap;\r\n    uint256 public tierThreeMaxCap;\r\n    uint256 public tierFourMaxCap;\r\n    uint256 public tierFiveMaxCap;\r\n    uint256 public totalUserInTierOne;\r\n    uint256 public totalUserInTierTwo;\r\n    uint256 public totalUserInTierThree;\r\n    uint256 public totalUserInTierFour;\r\n    uint256 public totalUserInTierFive;\r\n    address[] private whitelistTierOne;\r\n    address[] private whitelistTierTwo;\r\n    address[] private whitelistTierThree;\r\n    address[] private whitelistTierFour;\r\n    address[] private whitelistTierFive;\r\n    mapping(address => uint256) public buyInOneTier;\r\n    mapping(address => uint256) public buyInTwoTier;\r\n    mapping(address => uint256) public buyInThreeTier;\r\n    mapping(address => uint256) public buyInFourTier;\r\n    mapping(address => uint256) public buyInFiveTier;\r\n    mapping(address => uint256) public minBuyInOneTier;\r\n    mapping(address => uint256) public minBuyInTwoTier;\r\n    mapping(address => uint256) public minBuyInThreeTier;\r\n    mapping(address => uint256) public minBuyInFourTier;\r\n    mapping(address => uint256) public minBuyInFiveTier;\r\n\r\n    struct Presale {\r\n        address saleToken;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 price;\r\n        uint256 tokensToSell;\r\n        uint256 baseDecimals;\r\n        uint256 inSale;\r\n        uint256 vestingStartTime;\r\n        uint256 vestingCliff;\r\n        uint256 vestingPeriod;\r\n        uint256 enableBuyWithEth;\r\n        uint256 enableBuyWithUsdt;\r\n        bool whitelistEnabled;\r\n    }\r\n\r\n    struct Vesting {\r\n        uint256 totalAmount;\r\n        uint256 claimedAmount;\r\n        uint256 claimStart;\r\n        uint256 claimEnd;\r\n    }\r\n\r\n    IERC20 public USDTInterface;\r\n    AggregatorV3Interface internal aggregatorInterface;\r\n\r\n    mapping(uint256 => bool) public paused;\r\n    mapping(uint256 => Presale) public presale;\r\n    mapping(address => mapping(uint256 => Vesting)) public userVesting;\r\n    // Mapping for minimum allocation per user in a tier\r\n    mapping(uint256 => uint256) public minAllocaPerUserTier;\r\n\r\n    // Mapping for maximum allocation per user in a tier\r\n    mapping(uint256 => uint256) public maxAllocaPerUserTier;\r\n\r\n    event PresaleCreated(\r\n        uint256 indexed _id,\r\n        uint256 _totalTokens,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 enableBuyWithEth,\r\n        uint256 enableBuyWithUsdt,\r\n        bool whitelistEnabled\r\n    );\r\n\r\n    event PresaleUpdated(\r\n        bytes32 indexed key,\r\n        uint256 prevValue,\r\n        uint256 newValue,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event TokensBought(\r\n        address indexed user,\r\n        uint256 indexed id,\r\n        address indexed purchaseToken,\r\n        uint256 tokensBought,\r\n        uint256 amountPaid,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event TokensClaimed(\r\n        address indexed user,\r\n        uint256 indexed id,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event PresaleTokenAddressUpdated(\r\n        address indexed prevValue,\r\n        address indexed newValue,\r\n        uint256 timestamp\r\n    );\r\n\r\n    //Modifier\r\n\r\n    modifier checkUserTier(uint256 amount) {\r\n        uint256 userTier = getUserTier(msg.sender);\r\n\r\n        if (userTier > 0) {\r\n            uint256 userTierAllocation;\r\n            if (userTier == 1) userTierAllocation = buyInOneTier[msg.sender];\r\n            else if (userTier == 2)\r\n                userTierAllocation = buyInTwoTier[msg.sender];\r\n            else if (userTier == 3)\r\n                userTierAllocation = buyInThreeTier[msg.sender];\r\n            else if (userTier == 4)\r\n                userTierAllocation = buyInFourTier[msg.sender];\r\n            else if (userTier == 5)\r\n                userTierAllocation = buyInFiveTier[msg.sender];\r\n\r\n            require(\r\n                userTierAllocation + amount <= maxAllocaPerUserTier[userTier],\r\n                \"Exceeds tier allocation\"\r\n            );\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    modifier checkPresaleId(uint256 _id) {\r\n        require(_id > 0 && _id <= presaleId, \"Invalid presale id\");\r\n        _;\r\n    }\r\n\r\n    modifier checkSaleState(uint256 _id, uint256 amount) {\r\n        require(\r\n            block.timestamp >= presale[_id].startTime &&\r\n                block.timestamp <= presale[_id].endTime,\r\n            \"Invalid time for buying\"\r\n        );\r\n        require(\r\n            amount > 0 && amount <= presale[_id].inSale,\r\n            \"Invalid sale amount\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    event PresalePaused(uint256 indexed id, uint256 timestamp);\r\n    event PresaleUnpaused(uint256 indexed id, uint256 timestamp);\r\n\r\n    constructor() {\r\n        address _oracle = 0x1A26d803C2e796601794f8C5609549643832702C;\r\n        address _usdt = 0x90e650225178dc0dDd49ad238FDF4CA2CCFE6f25;\r\n        require(_oracle != address(0), \"Zero aggregator address\");\r\n        require(_usdt != address(0), \"Zero USDT address\");\r\n\r\n        aggregatorInterface = AggregatorV3Interface(_oracle);\r\n        USDTInterface = IERC20(_usdt);\r\n        BASE_MULTIPLIER = (10**18);\r\n        MONTH = (30 * 24 * 3600);\r\n        // Tier 1 settings\r\n        minAllocaPerUserTier[1] = 1 ether; // Minimum allocation for tier 1\r\n        maxAllocaPerUserTier[1] = 500 ether; // Maximum allocation for tier 1\r\n\r\n        // Tier 2 settings\r\n        minAllocaPerUserTier[2] = 1 ether; // Minimum allocation for tier 2\r\n        maxAllocaPerUserTier[2] = 300 ether; // Maximum allocation for tier 2\r\n        // Tier 3 settings\r\n        minAllocaPerUserTier[3] = 1 ether; // Minimum allocation for tier 3\r\n        maxAllocaPerUserTier[3] = 300 ether; // Maximum allocation for tier 3\r\n        // Tier 4 settings\r\n        minAllocaPerUserTier[4] = 1 ether; // Minimum allocation for tier 4\r\n        maxAllocaPerUserTier[4] = 300 ether; // Maximum allocation for tier 4\r\n        // Tier 2 settings\r\n        minAllocaPerUserTier[5] = 1 ether; // Minimum allocation for tier 5\r\n        maxAllocaPerUserTier[5] = 300 ether; // Maximum allocation for tier 5\r\n    }\r\n\r\n    function changeUsdtAddress(address _newUsdtAddress) external onlyOwner {\r\n        require(_newUsdtAddress != address(0), \"Zero USDT address\");\r\n        USDTInterface = IERC20(_newUsdtAddress);\r\n    }\r\n\r\n    function changeOraleAddress(address _newOracleAddress) external onlyOwner {\r\n        require(_newOracleAddress != address(0), \"Zero Oracle Addresss\");\r\n        aggregatorInterface = AggregatorV3Interface(_newOracleAddress);\r\n    }\r\n\r\n    function createPresale(\r\n        address _tokenAddress,\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _price,\r\n        uint256 _tokensToSell,\r\n        uint256 _baseDecimals,\r\n        uint256 _vestingStartTime,\r\n        uint256 _vestingCliff,\r\n        uint256 _vestingPeriod,\r\n        uint256 _enableBuyWithEth,\r\n        uint256 _enableBuyWithUsdt,\r\n        bool _whitelistEnabled\r\n    ) external onlyOwner {\r\n        require(\r\n            _startTime > block.timestamp && _endTime > _startTime,\r\n            \"Invalid time\"\r\n        );\r\n        require(_price > 0, \"Zero price\");\r\n        require(_tokensToSell > 0, \"Zero tokens to sell\");\r\n        require(_baseDecimals > 0, \"Zero decimals for the token\");\r\n        require(\r\n            _vestingStartTime >= _endTime,\r\n            \"Vesting starts before Presale ends\"\r\n        );\r\n        require(\r\n            _tokenAddress != address(0),\r\n            \"Token Address not be equal zero address\"\r\n        );\r\n\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), _tokensToSell),\r\n            \"Token transfer failed\"\r\n        );\r\n\r\n        presaleId++;\r\n        presale[presaleId] = Presale(\r\n            _tokenAddress,\r\n            _startTime,\r\n            _endTime,\r\n            _price,\r\n            _tokensToSell,\r\n            _baseDecimals,\r\n            _tokensToSell,\r\n            _vestingStartTime,\r\n            _vestingCliff,\r\n            _vestingPeriod,\r\n            _enableBuyWithEth,\r\n            _enableBuyWithUsdt,\r\n            _whitelistEnabled\r\n        );\r\n\r\n        emit PresaleCreated(\r\n            presaleId,\r\n            _tokensToSell,\r\n            _startTime,\r\n            _endTime,\r\n            _enableBuyWithEth,\r\n            _enableBuyWithUsdt,\r\n            _whitelistEnabled\r\n        );\r\n    }\r\n\r\n    function changeSaleTimes(\r\n        uint256 _id,\r\n        uint256 _startTime,\r\n        uint256 _endTime\r\n    ) external checkPresaleId(_id) onlyOwner {\r\n        require(_startTime > 0 || _endTime > 0, \"Invalid parameters\");\r\n        if (_startTime > 0) {\r\n            uint256 prevValue = presale[_id].startTime;\r\n            presale[_id].startTime = _startTime;\r\n            emit PresaleUpdated(\r\n                bytes32(\"START\"),\r\n                prevValue,\r\n                _startTime,\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        if (_endTime > 0) {\r\n            uint256 prevValue = presale[_id].endTime;\r\n            presale[_id].endTime = _endTime;\r\n            emit PresaleUpdated(\r\n                bytes32(\"END\"),\r\n                prevValue,\r\n                _endTime,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function changeVestingStartTime(uint256 _id, uint256 _vestingStartTime)\r\n        external\r\n        checkPresaleId(_id)\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _vestingStartTime >= presale[_id].endTime,\r\n            \"Vesting starts before Presale ends\"\r\n        );\r\n        uint256 prevValue = presale[_id].vestingStartTime;\r\n        presale[_id].vestingStartTime = _vestingStartTime;\r\n        emit PresaleUpdated(\r\n            bytes32(\"VESTING_START_TIME\"),\r\n            prevValue,\r\n            _vestingStartTime,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function changeSaleTokenAddress(uint256 _id, address _newAddress)\r\n        external\r\n        checkPresaleId(_id)\r\n        onlyOwner\r\n    {\r\n        require(_newAddress != address(0), \"Zero token address\");\r\n        address prevValue = presale[_id].saleToken;\r\n        presale[_id].saleToken = _newAddress;\r\n        emit PresaleTokenAddressUpdated(\r\n            prevValue,\r\n            _newAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function changePrice(uint256 _id, uint256 _newPrice)\r\n        external\r\n        checkPresaleId(_id)\r\n        onlyOwner\r\n    {\r\n        require(_newPrice > 0, \"Zero price\");\r\n        uint256 prevValue = presale[_id].price;\r\n        presale[_id].price = _newPrice;\r\n        emit PresaleUpdated(\r\n            bytes32(\"PRICE\"),\r\n            prevValue,\r\n            _newPrice,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function changeEnableBuyWithEth(uint256 _id, uint256 _enableToBuyWithEth)\r\n        external\r\n        checkPresaleId(_id)\r\n        onlyOwner\r\n    {\r\n        uint256 prevValue = presale[_id].enableBuyWithEth;\r\n        presale[_id].enableBuyWithEth = _enableToBuyWithEth;\r\n        emit PresaleUpdated(\r\n            bytes32(\"ENABLE_BUY_WITH_ETH\"),\r\n            prevValue,\r\n            _enableToBuyWithEth,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function changeEnableBuyWithUsdt(uint256 _id, uint256 _enableToBuyWithUsdt)\r\n        external\r\n        checkPresaleId(_id)\r\n        onlyOwner\r\n    {\r\n        uint256 prevValue = presale[_id].enableBuyWithUsdt;\r\n        presale[_id].enableBuyWithUsdt = _enableToBuyWithUsdt;\r\n        emit PresaleUpdated(\r\n            bytes32(\"ENABLE_BUY_WITH_USDT\"),\r\n            prevValue,\r\n            _enableToBuyWithUsdt,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function pausePresale(uint256 _id) external checkPresaleId(_id) onlyOwner {\r\n        require(!paused[_id], \"Already paused\");\r\n        paused[_id] = true;\r\n        emit PresalePaused(_id, block.timestamp);\r\n    }\r\n\r\n    function unPausePresale(uint256 _id)\r\n        external\r\n        checkPresaleId(_id)\r\n        onlyOwner\r\n    {\r\n        require(paused[_id], \"Not paused\");\r\n        paused[_id] = false;\r\n        emit PresaleUnpaused(_id, block.timestamp);\r\n    }\r\n\r\n    function addWhitelistTierOne(address[] calldata users) external onlyOwner {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            whitelistTierOne.push(users[i]);\r\n        }\r\n    }\r\n\r\n    function addWhitelistTierTwo(address[] calldata users) external onlyOwner {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            whitelistTierTwo.push(users[i]);\r\n        }\r\n    }\r\n\r\n    function addWhitelistTierThree(address[] calldata users)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            whitelistTierThree.push(users[i]);\r\n        }\r\n    }\r\n\r\n    function addWhitelistTierFour(address[] calldata users) external onlyOwner {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            whitelistTierFour.push(users[i]);\r\n        }\r\n    }\r\n\r\n    function addWhitelistTierFive(address[] calldata users) external onlyOwner {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            whitelistTierFive.push(users[i]);\r\n        }\r\n    }\r\n\r\n    function removeWhitelistTierOne(address[] calldata users)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            uint256 indexToRemove = findIndex(whitelistTierOne, users[i]);\r\n            if (indexToRemove < whitelistTierOne.length) {\r\n                whitelistTierOne[indexToRemove] = whitelistTierOne[\r\n                    whitelistTierOne.length - 1\r\n                ];\r\n                whitelistTierOne.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeWhitelistTierTwo(address[] calldata users)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            uint256 indexToRemove = findIndex(whitelistTierTwo, users[i]);\r\n            if (indexToRemove < whitelistTierTwo.length) {\r\n                whitelistTierTwo[indexToRemove] = whitelistTierTwo[\r\n                    whitelistTierTwo.length - 1\r\n                ];\r\n                whitelistTierTwo.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeWhitelistTierThree(address[] calldata users)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            uint256 indexToRemove = findIndex(whitelistTierThree, users[i]);\r\n            if (indexToRemove < whitelistTierThree.length) {\r\n                whitelistTierThree[indexToRemove] = whitelistTierThree[\r\n                    whitelistTierThree.length - 1\r\n                ];\r\n                whitelistTierThree.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeWhitelistTierFour(address[] calldata users)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            uint256 indexToRemove = findIndex(whitelistTierFour, users[i]);\r\n            if (indexToRemove < whitelistTierFour.length) {\r\n                whitelistTierFour[indexToRemove] = whitelistTierFour[\r\n                    whitelistTierFour.length - 1\r\n                ];\r\n                whitelistTierFour.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeWhitelistTierFive(address[] calldata users)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            uint256 indexToRemove = findIndex(whitelistTierFive, users[i]);\r\n            if (indexToRemove < whitelistTierFive.length) {\r\n                whitelistTierFive[indexToRemove] = whitelistTierFive[\r\n                    whitelistTierFive.length - 1\r\n                ];\r\n                whitelistTierFive.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    function findIndex(address[] storage whitelist, address user)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        for (uint256 i = 0; i < whitelist.length; i++) {\r\n            if (whitelist[i] == user) {\r\n                return i;\r\n            }\r\n        }\r\n        return uint256(0);\r\n    }\r\n\r\n    function updateMinAllocation(uint256 tier, uint256 newMinAllocation)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(tier >= 1 && tier <= 5, \"Invalid tier\");\r\n        minAllocaPerUserTier[tier] = newMinAllocation;\r\n    }\r\n\r\n    function updateMaxAllocation(uint256 tier, uint256 newMaxAllocation)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(tier >= 1 && tier <= 5, \"Invalid tier\");\r\n        maxAllocaPerUserTier[tier] = newMaxAllocation;\r\n    }\r\n\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (, int256 price, , , ) = aggregatorInterface.latestRoundData();\r\n        price = (price * (10**10));\r\n        return uint256(price);\r\n    }\r\n\r\n    function isAddressInWhitelist(address[] memory tier, address user)\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        for (uint256 i = 0; i < tier.length; i++) {\r\n            if (tier[i] == user) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function buyWithUSDT(uint256 _id, uint256 amount)\r\n        external\r\n        checkPresaleId(_id)\r\n        checkSaleState(_id, amount)\r\n        checkUserTier(amount)\r\n        returns (bool)\r\n    {\r\n        if (presale[_id].whitelistEnabled) {\r\n            require(\r\n                isAddressInWhitelist(whitelistTierOne, _msgSender()) ||\r\n                    isAddressInWhitelist(whitelistTierTwo, _msgSender()) ||\r\n                    isAddressInWhitelist(whitelistTierThree, _msgSender()) ||\r\n                    isAddressInWhitelist(whitelistTierFour, _msgSender()) ||\r\n                    isAddressInWhitelist(whitelistTierFive, _msgSender()),\r\n                \"You are not whitelisted!\"\r\n            );\r\n        }\r\n        if (presale[_id].whitelistEnabled) {\r\n            uint256 userTier = getUserTier(msg.sender);\r\n            require(amount >= minAllocaPerUserTier[userTier], \"Amount too low\");\r\n            require(\r\n                amount <= maxAllocaPerUserTier[userTier],\r\n                \"Amount too high\"\r\n            );\r\n        }\r\n        uint256 usdPrice = amount * presale[_id].price;\r\n        usdPrice = usdPrice / (10**18);\r\n        presale[_id].inSale -= amount;\r\n        Presale memory _presale = presale[_id];\r\n\r\n        if (userVesting[_msgSender()][_id].totalAmount > 0) {\r\n            userVesting[_msgSender()][_id].totalAmount += (amount);\r\n        } else {\r\n            userVesting[_msgSender()][_id] = Vesting(\r\n                (amount),\r\n                0,\r\n                _presale.vestingStartTime + _presale.vestingCliff,\r\n                _presale.vestingStartTime +\r\n                    _presale.vestingCliff +\r\n                    _presale.vestingPeriod\r\n            );\r\n        }\r\n        require(\r\n            USDTInterface.transferFrom(_msgSender(), owner(), usdPrice),\r\n            \"Transfer of USDT failed\"\r\n        );\r\n\r\n        emit TokensBought(\r\n            _msgSender(),\r\n            _id,\r\n            address(USDTInterface),\r\n            amount,\r\n            usdPrice,\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function buyWithEth(uint256 _id, uint256 amount)\r\n        external\r\n        payable\r\n        checkPresaleId(_id)\r\n        checkSaleState(_id, amount)\r\n        checkUserTier(amount)\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(!paused[_id], \"Presale paused\");\r\n        require(\r\n            presale[_id].enableBuyWithEth > 0,\r\n            \"Not allowed to buy with ETH\"\r\n        );\r\n        if (presale[_id].whitelistEnabled) {\r\n            require(\r\n                isAddressInWhitelist(whitelistTierOne, _msgSender()) ||\r\n                    isAddressInWhitelist(whitelistTierTwo, _msgSender()) ||\r\n                    isAddressInWhitelist(whitelistTierThree, _msgSender()) ||\r\n                    isAddressInWhitelist(whitelistTierFour, _msgSender()) ||\r\n                    isAddressInWhitelist(whitelistTierFive, _msgSender()),\r\n                \"You are not whitelisted!\"\r\n            );\r\n        }\r\n        if (presale[_id].whitelistEnabled) {\r\n            uint256 userTier = getUserTier(msg.sender);\r\n            require(amount >= minAllocaPerUserTier[userTier], \"Amount too low\");\r\n            require(\r\n                amount <= maxAllocaPerUserTier[userTier],\r\n                \"Amount too high\"\r\n            );\r\n        }\r\n        uint256 usdPrice = amount * presale[_id].price;\r\n        uint256 ethAmount = (usdPrice * BASE_MULTIPLIER) / getLatestPrice();\r\n        require(msg.value >= ethAmount, \"Less payment\");\r\n        uint256 excess = msg.value - ethAmount;\r\n        presale[_id].inSale -= amount;\r\n        Presale memory _presale = presale[_id];\r\n\r\n        if (userVesting[_msgSender()][_id].totalAmount > 0) {\r\n            userVesting[_msgSender()][_id].totalAmount += (amount);\r\n        } else {\r\n            userVesting[_msgSender()][_id] = Vesting(\r\n                (amount),\r\n                0,\r\n                _presale.vestingStartTime + _presale.vestingCliff,\r\n                _presale.vestingStartTime +\r\n                    _presale.vestingCliff +\r\n                    _presale.vestingPeriod\r\n            );\r\n        }\r\n        sendValue(payable(owner()), ethAmount);\r\n        if (excess > 0) sendValue(payable(_msgSender()), excess);\r\n        emit TokensBought(\r\n            _msgSender(),\r\n            _id,\r\n            address(0),\r\n            amount,\r\n            ethAmount,\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function ethBuyHelper(uint256 _id, uint256 amount)\r\n        external\r\n        view\r\n        checkPresaleId(_id)\r\n        returns (uint256 ethAmount)\r\n    {\r\n        uint256 usdPrice = amount * presale[_id].price;\r\n        ethAmount = (usdPrice * BASE_MULTIPLIER) / getLatestPrice();\r\n    }\r\n\r\n    function usdtBuyHelper(uint256 _id, uint256 amount)\r\n        external\r\n        view\r\n        checkPresaleId(_id)\r\n        returns (uint256 usdPrice)\r\n    {\r\n        usdPrice = amount * presale[_id].price;\r\n        usdPrice = usdPrice / (10**12);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Low balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"ETH Payment failed\");\r\n    }\r\n\r\n    function claimableAmount(address user, uint256 _id)\r\n        public\r\n        view\r\n        checkPresaleId(_id)\r\n        returns (uint256)\r\n    {\r\n        Vesting memory _user = userVesting[user][_id];\r\n        require(_user.totalAmount > 0, \"Nothing to claim\");\r\n        uint256 amount = _user.totalAmount - _user.claimedAmount;\r\n        require(amount > 0, \"Already claimed\");\r\n\r\n        if (block.timestamp < _user.claimStart) return 0;\r\n        if (block.timestamp >= _user.claimEnd) return amount;\r\n\r\n        uint256 noOfMonthsPassed = (block.timestamp - _user.claimStart) / MONTH;\r\n\r\n        uint256 perMonthClaim = (_user.totalAmount * BASE_MULTIPLIER * MONTH) /\r\n            (_user.claimEnd - _user.claimStart);\r\n\r\n        uint256 amountToClaim = ((noOfMonthsPassed * perMonthClaim) /\r\n            BASE_MULTIPLIER) - _user.claimedAmount;\r\n\r\n        return amountToClaim;\r\n    }\r\n\r\n    function claim(address user, uint256 _id) public returns (bool) {\r\n        uint256 amount = claimableAmount(user, _id);\r\n        require(amount > 0, \"Zero claim amount\");\r\n        require(\r\n            presale[_id].saleToken != address(0),\r\n            \"Presale token address not set\"\r\n        );\r\n        require(\r\n            amount <= IERC20(presale[_id].saleToken).balanceOf(address(this)),\r\n            \"Not enough tokens in the contract\"\r\n        );\r\n        userVesting[user][_id].claimedAmount += amount;\r\n        bool status = IERC20(presale[_id].saleToken).transfer(user, amount);\r\n        require(status, \"Token transfer failed\");\r\n        emit TokensClaimed(user, _id, amount, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function claimMultiple(address[] calldata users, uint256 _id)\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(users.length > 0, \"Zero users length\");\r\n        for (uint256 i; i < users.length; i++) {\r\n            require(claim(users[i], _id), \"Claim failed\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getUserTier(address user) public view returns (uint256) {\r\n        for (uint256 i = 0; i < whitelistTierOne.length; i++) {\r\n            if (whitelistTierOne[i] == user) {\r\n                return 1;\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < whitelistTierTwo.length; i++) {\r\n            if (whitelistTierTwo[i] == user) {\r\n                return 2;\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < whitelistTierThree.length; i++) {\r\n            if (whitelistTierThree[i] == user) {\r\n                return 3;\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < whitelistTierFour.length; i++) {\r\n            if (whitelistTierFour[i] == user) {\r\n                return 4;\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < whitelistTierFive.length; i++) {\r\n            if (whitelistTierFive[i] == user) {\r\n                return 5;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function withdrawBNB(uint256 _amount) external onlyOwner {\r\n        require(address(this).balance >= _amount, \"Not enough BNB in contract\");\r\n        payable(msg.sender).transfer(_amount);\r\n    }\r\n\r\n    function withdraw(address _tokenAddress, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        require(token.transfer(msg.sender, _amount), \"Token transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"enableBuyWithEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"enableBuyWithUsdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelistEnabled\",\"type\":\"bool\"}],\"name\":\"PresaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleTokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTInterface\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"addWhitelistTierFive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"addWhitelistTierFour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"addWhitelistTierOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"addWhitelistTierThree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"addWhitelistTierTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyInFiveTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyInFourTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyInOneTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyInThreeTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyInTwoTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyWithEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enableToBuyWithEth\",\"type\":\"uint256\"}],\"name\":\"changeEnableBuyWithEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enableToBuyWithUsdt\",\"type\":\"uint256\"}],\"name\":\"changeEnableBuyWithUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracleAddress\",\"type\":\"address\"}],\"name\":\"changeOraleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeSaleTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeSaleTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUsdtAddress\",\"type\":\"address\"}],\"name\":\"changeUsdtAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStartTime\",\"type\":\"uint256\"}],\"name\":\"changeVestingStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enableBuyWithEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enableBuyWithUsdt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_whitelistEnabled\",\"type\":\"bool\"}],\"name\":\"createPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxAllocaPerUserTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minAllocaPerUserTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minBuyInFiveTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minBuyInFourTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minBuyInOneTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minBuyInThreeTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minBuyInTwoTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"saleToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enableBuyWithEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enableBuyWithUsdt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelistEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistTierFive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistTierFour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistTierOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistTierThree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistTierTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierFiveMaxCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierFourMaxCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierOneMaxCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierThreeMaxCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierTwoMaxCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBnbInTierFive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBnbInTierFour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBnbInTierOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBnbInTierThree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBnbInTierTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBnbReceivedInAllTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUserInTierFive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUserInTierFour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUserInTierOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUserInTierThree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUserInTierTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalparticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unPausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxAllocation\",\"type\":\"uint256\"}],\"name\":\"updateMaxAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinAllocation\",\"type\":\"uint256\"}],\"name\":\"updateMinAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MaxiRuby", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "20", "ConstructorArguments": "", "EVMVersion": "byzantium", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://879831954a1c0e18628962509096ebf3a5fb7a2b768d07d54d6843d9c3836387"}