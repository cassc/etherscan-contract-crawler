{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ncontract Crypto_Mischief {\r\n    using SafeMath for uint256;\r\n\r\n    bool private locked;\r\n    IERC20 public token_BUSD;\r\n\taddress erctoken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Mainnet BUSD\r\n\r\n    /** base parameters **/\r\n    uint256 public EGGS_TO_HIRE_1MINERS = 2592000; // 3%\r\n    uint256 public REFERRAL = 80;  \r\n    bool private contractStarted;                // 8%\r\n    uint256 public PERCENTS_DIVIDER = 1000;    \r\n    uint256 public FEE = 5;                        // 0.5%\r\n    uint256 public MARKET_EGGS_DIVISOR = 20;\r\n\r\n\tbool public LOTTERY_ACTIVATED;\r\n    bool public TOP_DEPOSIT_ACTIVATED;\r\n    uint256 public LOTTERY_START_TIME;\r\n    uint256 public TOP_DEPOSIT_START_TIME;\r\n    uint256 public TOP_DEPOSIT_PERCENT = 50;\r\n    uint256 public LOTTERY_PERCENT = 50;\r\n    uint256 public LOTTERY_STEP = 86400; // 24 hrs\r\n    uint256 public TOP_DEPOSIT_STEP = 86400; // 24 hrs\r\n    uint256 public LOTTERY_TICKET_PRICE = 5 ether;\r\n    uint256 public MAX_LOTTERY_TICKET = 20;\r\n    uint256 public MAX_LOTTERY_PARTICIPANTS = 1000;\r\n    uint256 public MAX_LOTTERY_POOL_PER_ROUND = 1000 ether;\r\n    uint256 public lotteryRound = 0; //round will be same as index\r\n    uint256 public currentPot = 0;\r\n    uint256 public participants = 0;\r\n    uint256 public totalTickets = 0;\r\n\r\n    /* statistics */\r\n    uint256 public totalStaked;\r\n    uint256 public totalDeposits;\r\n    uint256 public totalCompound;\r\n    uint256 public totalRefBonus;\r\n    uint256 public totalWithdrawn;\r\n    uint256 public totalDripAirdropped;\r\n    uint256 public totalLotteryMinerBonus;\r\n    uint256 public totalTopDepositMinerBonus;\r\n\r\n    /* miner parameters */\r\n    uint256 public marketEggs = 259200000000;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n\r\n    /** whale control features **/\r\n\tuint256 public CUTOFF_STEP = 172800; /** 48 hours  **/\r\n    uint256 public MIN_INVEST = 50 ether; /** 50 BUSD  **/\r\n\tuint256 public ACTION_COOLDOWN = 86400; /** 24 hours  **/    \r\n    uint256 public WALLET_DEPOSIT_LIMIT = 10000 ether; /** 10,000 BUSD  **/\r\n\r\n    /* biggest deposit per day. */\r\n    uint8[] public pool_bonuses;\r\n    uint256 public pool_cycle = 1;\r\n    uint256 public pool_balance;\r\n    uint256 public max_pool_balance = 2000 ether; /** 2,000 BUSD  **/\r\n\r\n    /* addresses */\r\n    address private owner;\r\n    address private dev1;\r\n    address private dev2;    \r\n    address private charity;\r\n    address private treasury;\r\n    address private genesis;\r\n    \r\n    bool public whitelistActive;\r\n\r\n    struct User {\r\n        uint256 initialDeposit;\r\n        uint256 userDeposit;\r\n        uint256 miners;\r\n        uint256 claimedEggs;\r\n        uint256 lottery_bonus_as_miners;\r\n        uint256 lastHatch;\r\n        address referrer;\r\n        uint256 referralsCount;\r\n        uint256 referralEggRewards;\r\n        uint256 referralMinerRewards;\r\n        uint256 totalWithdrawn;\r\n        uint256 pool_bonus_as_miners;\r\n    }\r\n\r\n    struct LotteryHistory {\r\n        uint256 round;\r\n        address winnerAddress;\r\n        uint256 pot;\r\n        uint256 miners;\r\n        uint256 totalLotteryParticipants;\r\n        uint256 totalLotteryTickets;\r\n    }\r\n\r\n    LotteryHistory[] internal lotteryHistory;\r\n\r\n    mapping(address => bool) private whitelisted;\r\n    mapping(address => uint256) private buyCount;\r\n    mapping(address => bool) private blacklisted;\r\n    mapping(uint8 => address) public pool_top; \r\n    mapping(address => User) public users;\r\n    mapping(uint256 => mapping(address => uint256)) public ticketOwners; /** round => address => amount of owned points **/\r\n    mapping(uint256 => mapping(uint256 => address)) public participantAdresses; /** round => id => address **/\r\n    mapping(uint256 => mapping(address => uint256)) public pool_users_deposits_sum; \r\n    event LotteryWinner(address indexed investor, uint256 pot, uint256 miner, uint256 indexed round);\r\n    event PoolPayout(address indexed addr, uint256 amount);\r\n\r\n    constructor(address _dev1, address _dev2, address _charity, address _treasury, address _genesis) {\r\n\t\trequire(!isContract(_dev1) && !isContract(_dev2) && !isContract(_charity) && !isContract(_treasury) && !isContract(_genesis));\r\n        token_BUSD = IERC20(erctoken);\r\n        owner = msg.sender;\r\n        dev1 = _dev1;\r\n        dev2 = _dev2;\r\n        charity = _charity;\r\n        treasury = _treasury;\r\n        genesis = _genesis;\r\n\r\n        pool_bonuses.push(30);\r\n        pool_bonuses.push(25);\r\n        pool_bonuses.push(20);\r\n        pool_bonuses.push(15);\r\n        pool_bonuses.push(10);\r\n    }\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    modifier nonReentrant {\r\n        require(!locked, \"No re-entrancy.\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    function activateLaunch() external {\r\n        require(msg.sender == owner);\r\n\t    contractStarted = true;\r\n\t    TOP_DEPOSIT_ACTIVATED = true;\r\n\t    TOP_DEPOSIT_START_TIME = block.timestamp;\r\n\t    whitelistActive = true;        \r\n    }\r\n\r\n    //will need to be triggered every 6 hours if no user action triggered the events.\r\n    function runEvents() external {\r\n        if (LOTTERY_ACTIVATED) {\r\n            if(getTimeStamp().sub(LOTTERY_START_TIME) >= LOTTERY_STEP || participants >= MAX_LOTTERY_PARTICIPANTS || currentPot >= MAX_LOTTERY_POOL_PER_ROUND){\r\n                chooseWinner();\r\n            }\r\n\t\t}\r\n\r\n        if (TOP_DEPOSIT_ACTIVATED) {\r\n            if(getTimeStamp().sub(TOP_DEPOSIT_START_TIME) >=  TOP_DEPOSIT_STEP) {\r\n                _drawPool();\r\n            }\r\n\t\t}    \r\n    }\r\n    \r\n    //set referral boost to true before changing the value\r\n    function SET_REF_PERCENTAGE(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value > 0 && value <= 160); /** cannot be 0, max 16%**/\r\n        REFERRAL = value;\r\n    }\r\n\r\n    //enable/disable whitelist.\r\n    function setWhitelistActive(bool isActive) public {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        whitelistActive = isActive;\r\n    }\r\n\r\n    //update total drip airdropped.\r\n    function setTotalDripAirdropped(uint256 totalAmount) public {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        totalDripAirdropped = totalAmount;\r\n    }\r\n\r\n    //single entry.\r\n    function whitelistAddress(address addr, bool value) public {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        whitelisted[addr] = value;\r\n    }  \r\n\r\n    //multiple entry.\r\n    function whitelistAddresses(address[] memory addr, bool whitelist) public {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        for(uint256 i = 0; i < addr.length; i++){\r\n            whitelisted[addr[i]] = whitelist;\r\n        }\r\n    }\r\n\r\n    //check if whitelisted.\r\n    function isWhitelisted(address Wallet) public view returns(bool whitelist){\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        whitelist = whitelisted[Wallet];\r\n    }\r\n    \r\n    //check if blacklisted.\r\n    function isBlacklisted(address Wallet) public view returns(bool blacklist, uint256 hireAttemptCount) {\r\n        return(blacklisted[Wallet], buyCount[Wallet]);\r\n    }\r\n\r\n    function fundFromGenesis(uint256 amount) public {\r\n    \trequire(msg.sender == genesis, \"Genesis wallet can only use this function.\");\r\n        buyEggs(msg.sender, amount);\r\n    }\r\n\r\n    function buyEggs(address ref, uint256 amount) public nonReentrant {\r\n        if(!contractStarted && msg.sender != genesis){\r\n            if(buyCount[msg.sender] >= 2) //interacting to buy in the contract more than 2 times before launch will be blacklisted.\r\n            {\r\n                buyCount[msg.sender]++;\r\n                blacklisted[msg.sender] = true;\r\n            }\r\n            else{   \r\n                buyCount[msg.sender]++;\r\n            }\r\n        }\r\n        else{\r\n            User storage user = users[msg.sender]; \r\n            //if whitelist is active, only whitelisted addresses can invest in the project. \r\n            if (whitelistActive) {\r\n                require(whitelisted[msg.sender], \"Address is not Whitelisted.\");\r\n            }\r\n            require(!blacklisted[msg.sender], \"Address is blacklisted.\");\r\n            require(contractStarted || msg.sender == genesis); //genesis wallet will be funding and will eliminate early advantage.\r\n            require(amount >= MIN_INVEST, \"Mininum investment not met.\");\r\n            require(user.initialDeposit.add(amount) <= WALLET_DEPOSIT_LIMIT, \"Max deposit limit reached.\");\r\n            \r\n            token_BUSD.transferFrom(address(msg.sender), address(this), amount);\r\n\r\n            if(user.initialDeposit < 1){ //new user! add count for new deposits only for precise record of data.\r\n                totalDeposits++; \r\n            }\r\n            else{ //existing user - add the current yield to the total compound before adding new deposits for precise record of data.\r\n                uint256 currEggsValue = calculateEggSell(getEggsSinceLastHatch(msg.sender));\r\n                user.userDeposit = user.userDeposit.add(currEggsValue);\r\n                totalCompound = totalCompound.add(currEggsValue);\r\n            }\r\n            \r\n            uint256 eggsBought = calculateEggBuy(amount, getBalance().sub(amount));\r\n            user.userDeposit = user.userDeposit.add(amount);\r\n            user.initialDeposit = user.initialDeposit.add(amount);\r\n            user.claimedEggs = user.claimedEggs.add(eggsBought);\r\n\r\n            if (LOTTERY_ACTIVATED) {\r\n                if(getTimeStamp().sub(LOTTERY_START_TIME) >= LOTTERY_STEP || participants >= MAX_LOTTERY_PARTICIPANTS || currentPot >= MAX_LOTTERY_POOL_PER_ROUND) {\r\n                    chooseWinner();\r\n                }\r\n                _buyTickets(msg.sender, amount);\r\n            }\r\n\r\n            if (TOP_DEPOSIT_ACTIVATED) {\r\n                if(getTimeStamp().sub(TOP_DEPOSIT_START_TIME) >=  TOP_DEPOSIT_STEP) {\r\n                    _drawPool();\r\n                }\r\n                _topDeposits(msg.sender, amount);\r\n            }\r\n            \r\n            if(!whitelistActive){ //referrals will only be enabled after whitelist period \r\n                if (user.referrer == address(0)) {\r\n                    if (ref != msg.sender) {\r\n                        user.referrer = ref;\r\n                    }\r\n\r\n                    address upline1 = user.referrer;\r\n                    if (upline1 != address(0)) {\r\n                        users[upline1].referralsCount = users[upline1].referralsCount.add(1);\r\n                    }\r\n                }\r\n                        \r\n                if (user.referrer != address(0)) {\r\n                    address upline = user.referrer;\r\n                    if (upline != address(0) && users[upline].miners > 0) {\r\n                        uint256 refRewards = amount.mul(REFERRAL).div(PERCENTS_DIVIDER);\r\n                        uint256 eggsReward = calculateEggBuy(refRewards, getBalance().sub(refRewards));\r\n                        uint256 minerRewards = eggsReward.div(EGGS_TO_HIRE_1MINERS);\r\n                        users[upline].miners = users[upline].miners.add(minerRewards);\r\n                        marketEggs = marketEggs.add(eggsReward.div(MARKET_EGGS_DIVISOR)); //fix inflation\r\n                        users[upline].referralMinerRewards = users[upline].referralMinerRewards.add(minerRewards); //miner amount.\r\n                        users[upline].referralEggRewards = users[upline].referralEggRewards.add(refRewards); //ether amount.\r\n                        totalRefBonus = totalRefBonus.add(refRewards); //ether amount.\r\n                    }\r\n                }\r\n            }\r\n\r\n            uint256 eggsPayout = payFees(amount);\r\n            totalStaked = totalStaked.add(amount.sub(eggsPayout));\r\n            hatchEggs(false);\r\n        }\r\n    }\r\n\r\n    function hatchEggs(bool isCompound) public {\r\n        User storage user = users[msg.sender];\r\n        require(contractStarted || msg.sender == genesis);\r\n\r\n        uint256 eggsUsed = getMyEggs();\r\n        uint256 eggsForCompound = eggsUsed;\r\n        if(isCompound) {\r\n            if(user.lastHatch.add(ACTION_COOLDOWN) > block.timestamp) revert(\"Can only compound after action cooldown.\");\r\n            uint256 eggsUsedValue = calculateEggSell(eggsForCompound);\r\n            user.userDeposit = user.userDeposit.add(eggsUsedValue);\r\n            totalCompound = totalCompound.add(eggsUsedValue);\r\n\r\n            if (LOTTERY_ACTIVATED && eggsUsedValue >= LOTTERY_TICKET_PRICE) {\r\n                _buyTickets(msg.sender, eggsUsedValue);\r\n            }\r\n\t    \r\n            if(TOP_DEPOSIT_ACTIVATED && getTimeStamp().sub(TOP_DEPOSIT_START_TIME) >=  TOP_DEPOSIT_STEP) {\r\n                _drawPool();\r\n            }\r\n        }\r\n\r\n        user.miners = user.miners.add(eggsForCompound.div(EGGS_TO_HIRE_1MINERS));\r\n        user.claimedEggs = 0;\r\n        user.lastHatch = getTimeStamp();\r\n        marketEggs = marketEggs.add(eggsUsed.div(MARKET_EGGS_DIVISOR));\r\n    }\r\n\r\n    function sellEggs() public nonReentrant {\r\n        require(contractStarted, \"Contract is not Started.\");\r\n        require(msg.sender != genesis, \"Genesis wallet is blocked from selling.\");\r\n        User storage user = users[msg.sender];\r\n        uint256 hasEggs = getMyEggs();\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n\r\n        if(user.lastHatch.add(ACTION_COOLDOWN) > block.timestamp) revert(\"Withdrawals can only be done after withdraw cooldown.\");\r\n\r\n        user.claimedEggs = 0;\r\n        \r\n        user.lastHatch = getTimeStamp();\r\n\r\n        marketEggs = marketEggs.add(hasEggs.div(MARKET_EGGS_DIVISOR));\r\n        \r\n        if(getBalance() < eggValue) {\r\n            eggValue = getBalance();\r\n        }\r\n\r\n        uint256 eggsPayout = eggValue.sub(payFees(eggValue));\r\n        token_BUSD.transfer(msg.sender, eggsPayout);\r\n        user.totalWithdrawn = user.totalWithdrawn.add(eggsPayout);\r\n        totalWithdrawn = totalWithdrawn.add(eggsPayout);\r\n\r\n        if(LOTTERY_ACTIVATED && getTimeStamp().sub(LOTTERY_START_TIME) >= LOTTERY_STEP || participants >= MAX_LOTTERY_PARTICIPANTS) {\r\n            chooseWinner();\r\n        }\r\n\r\n        if(TOP_DEPOSIT_ACTIVATED && getTimeStamp().sub(TOP_DEPOSIT_START_TIME) >=  TOP_DEPOSIT_STEP) {\r\n            _drawPool();\r\n        }\r\n    }\r\n\r\n    function _topDeposits(address _addr, uint256 _amount) private {\r\n        if(_addr == address(0) || _addr == owner) return;\r\n\r\n\t    uint256 pool_amount = _amount.mul(TOP_DEPOSIT_PERCENT).div(PERCENTS_DIVIDER);\r\n\t\t\r\n        if(pool_balance.add(pool_amount) > max_pool_balance){   \r\n            pool_balance += max_pool_balance.sub(pool_balance);\r\n        }else{\r\n            pool_balance += pool_amount;\r\n        }\r\n\r\n        pool_users_deposits_sum[pool_cycle][_addr] += _amount;\r\n\r\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\r\n            if(pool_top[i] == _addr) break;\r\n\r\n            if(pool_top[i] == address(0)) {\r\n                pool_top[i] = _addr;\r\n                break;\r\n            }\r\n\r\n            if(pool_users_deposits_sum[pool_cycle][_addr] > pool_users_deposits_sum[pool_cycle][pool_top[i]]) {\r\n                for(uint8 j = i + 1; j < pool_bonuses.length; j++) {\r\n                    if(pool_top[j] == _addr) {\r\n                        for(uint8 k = j; k <= pool_bonuses.length; k++) {\r\n                            pool_top[k] = pool_top[k + 1];\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                for(uint8 j = uint8(pool_bonuses.length.sub(1)); j > i; j--) {\r\n                    pool_top[j] = pool_top[j - 1];\r\n                }\r\n                pool_top[i] = _addr;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _drawPool() private {\r\n        pool_cycle++;\r\n        TOP_DEPOSIT_START_TIME = getTimeStamp();\r\n        uint256 draw_amount = pool_balance;\r\n\r\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\r\n            if(pool_top[i] == address(0)) break;\r\n            User storage user = users[pool_top[i]];\r\n\r\n            uint256 win = draw_amount.mul(pool_bonuses[i]) / 100;\r\n            uint256 eggsReward = calculateEggBuy(win, getBalance().sub(win));\r\n            uint256 minerRewards = eggsReward.div(EGGS_TO_HIRE_1MINERS);\r\n            user.miners = user.miners.add(minerRewards);\r\n            marketEggs = marketEggs.add(eggsReward.div(MARKET_EGGS_DIVISOR));\r\n            users[pool_top[i]].pool_bonus_as_miners += minerRewards;\r\n            totalTopDepositMinerBonus = totalTopDepositMinerBonus.add(minerRewards);\r\n            pool_balance -= win;\r\n            emit PoolPayout(pool_top[i], minerRewards);\r\n        }\r\n\r\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\r\n            pool_top[i] = address(0);\r\n        }\r\n    }  \r\n\r\n    function payFees(uint256 eggValue) internal returns(uint256) {\r\n        (uint256 dev1Fee, uint256 dev2Fee, uint256 charityFee, uint256 treasuryFee) = getFees(eggValue);\r\n        token_BUSD.transfer(dev1, dev1Fee);\r\n\t\ttoken_BUSD.transfer(dev2, dev2Fee);\r\n        token_BUSD.transfer(charity, charityFee);\r\n        token_BUSD.transfer(treasury, treasuryFee);        \r\n        return treasuryFee.add(dev1Fee).add(dev2Fee).add(charityFee); // 5%\r\n    }\r\n\r\n    function getFees(uint256 eggValue) public view returns(uint256 _dev1Fee, uint256 _dev2Fee, uint256 _charityFee, uint256 _treasuryFee) {\r\n        _treasuryFee = (eggValue.mul(FEE).div(PERCENTS_DIVIDER)).mul(6); \r\n        _dev1Fee     = (eggValue.mul(FEE).div(PERCENTS_DIVIDER)).mul(2); \r\n        _dev2Fee     = eggValue.mul(FEE).div(PERCENTS_DIVIDER);       \r\n        _charityFee  = eggValue.mul(FEE).div(PERCENTS_DIVIDER);       \r\n    }\r\n\r\n    function _buyTickets(address userAddress, uint256 amount) private {\r\n        require(amount != 0, \"zero purchase amount\");\r\n        uint256 userTickets = ticketOwners[lotteryRound][userAddress];\r\n        uint256 numTickets = amount.div(LOTTERY_TICKET_PRICE);\r\n\r\n        if(userTickets == 0) {\r\n            participantAdresses[lotteryRound][participants] = userAddress;\r\n\r\n            if(numTickets > 0){\r\n              participants = participants.add(1);\r\n            }\r\n        }\r\n\r\n        if (userTickets.add(numTickets) > MAX_LOTTERY_TICKET) {\r\n            numTickets = MAX_LOTTERY_TICKET.sub(userTickets);\r\n        }\r\n\r\n        ticketOwners[lotteryRound][userAddress] = userTickets.add(numTickets);\r\n        uint256 addToPot = amount.mul(LOTTERY_PERCENT).div(PERCENTS_DIVIDER);\r\n\r\n        if(currentPot.add(addToPot) > MAX_LOTTERY_POOL_PER_ROUND){       \r\n            currentPot += MAX_LOTTERY_POOL_PER_ROUND.sub(currentPot);\r\n        }\r\n        else{\r\n            currentPot += addToPot;\r\n        }\r\n\r\n        totalTickets = totalTickets.add(numTickets);\r\n    }\r\n\r\n    function chooseWinner() private {\r\n        if(participants > 0){\r\n            uint256[] memory init_range = new uint256[](participants);\r\n            uint256[] memory end_range = new uint256[](participants);\r\n\r\n            uint256 last_range = 0;\r\n\r\n            for(uint256 i = 0; i < participants; i++){\r\n                uint256 range0 = last_range.add(1);\r\n                uint256 range1 = range0.add(ticketOwners[lotteryRound][participantAdresses[lotteryRound][i]].div(1e18));\r\n\r\n                init_range[i] = range0;\r\n                end_range[i] = range1;\r\n                last_range = range1;\r\n            }\r\n\r\n            uint256 random = _getRandom().mod(last_range).add(1);\r\n\r\n            for(uint256 i = 0; i < participants; i++){\r\n                if((random >= init_range[i]) && (random <= end_range[i])){\r\n\r\n                    address winnerAddress = participantAdresses[lotteryRound][i];\r\n                    User storage user = users[winnerAddress];\r\n\r\n                    uint256 burnTax = currentPot.mul(100).div(PERCENTS_DIVIDER);\r\n                    uint256 eggs = currentPot.sub(burnTax);\r\n                    uint256 eggsReward = calculateEggBuy(eggs, getBalance().sub(eggs));\r\n                    uint256 minerRewards = eggsReward.div(EGGS_TO_HIRE_1MINERS);\r\n                    user.miners = user.miners.add(minerRewards);\r\n                    marketEggs = marketEggs.add(eggsReward.div(MARKET_EGGS_DIVISOR));\r\n\r\n                    user.lottery_bonus_as_miners = user.lottery_bonus_as_miners.add(minerRewards);\r\n                    totalLotteryMinerBonus = totalLotteryMinerBonus.add(minerRewards);\r\n\r\n                    lotteryHistory.push(LotteryHistory(lotteryRound, winnerAddress, eggs, minerRewards, participants, totalTickets));\r\n                    emit LotteryWinner(winnerAddress, eggs, minerRewards, lotteryRound);\r\n\r\n                    currentPot = 0;\r\n                    participants = 0;\r\n                    totalTickets = 0;\r\n                    LOTTERY_START_TIME = getTimeStamp();\r\n                    lotteryRound++;\r\n                    break;\r\n                }\r\n            }\r\n        }else{\r\n            LOTTERY_START_TIME = getTimeStamp();\r\n        }\r\n    }\r\n\r\n    function _getRandom() private view returns(uint256){\r\n        bytes32 _blockhash = blockhash(block.number-1);\r\n        return uint256(keccak256(abi.encode(_blockhash,getTimeStamp(),currentPot,block.difficulty, marketEggs, getBalance())));\r\n    }\r\n\r\n    function getLotteryHistory(uint256 index) public view returns(uint256 round, address winnerAddress, uint256 pot, uint256 miners,\r\n\t  uint256 totalLotteryParticipants, uint256 totalLotteryTickets) {\r\n\t\tround = lotteryHistory[index].round;\r\n\t\twinnerAddress = lotteryHistory[index].winnerAddress;\r\n\t\tpot = lotteryHistory[index].pot;\r\n\t\tminers = lotteryHistory[index].miners;\r\n\t\ttotalLotteryParticipants = lotteryHistory[index].totalLotteryParticipants;\r\n\t\ttotalLotteryTickets = lotteryHistory[index].totalLotteryTickets;\r\n\t}\r\n\r\n    function getLotteryInfo() public view returns (uint256 lotteryStartTime,  uint256 lotteryStep, uint256 lotteryCurrentPot,\r\n\t  uint256 lotteryParticipants, uint256 maxLotteryParticipants, uint256 totalLotteryTickets, uint256 lotteryTicketPrice, \r\n      uint256 maxLotteryTicket, uint256 lotteryPercent, uint256 round){\r\n\t\tlotteryStartTime = LOTTERY_START_TIME;\r\n\t\tlotteryStep = LOTTERY_STEP;\r\n\t\tlotteryTicketPrice = LOTTERY_TICKET_PRICE;\r\n\t\tmaxLotteryParticipants = MAX_LOTTERY_PARTICIPANTS;\r\n\t\tround = lotteryRound;\r\n\t\tlotteryCurrentPot = currentPot;\r\n\t\tlotteryParticipants = participants;\r\n\t    totalLotteryTickets = totalTickets;\r\n        maxLotteryTicket = MAX_LOTTERY_TICKET;\r\n        lotteryPercent = LOTTERY_PERCENT;\r\n\t}\r\n\r\n    function getUserInfo(address _adr) public view returns(uint256 _initialDeposit, uint256 _userDeposit, uint256 _miners,\r\n     uint256 _claimedEggs, uint256 _lastHatch, address _referrer, uint256 _referrals,\r\n\t uint256 _totalWithdrawn, uint256 _referralEggRewards, uint256 _referralMinerRewards) {\r\n         _initialDeposit = users[_adr].initialDeposit;\r\n         _userDeposit = users[_adr].userDeposit;\r\n         _miners = users[_adr].miners;\r\n         _claimedEggs = users[_adr].claimedEggs;\r\n         _lastHatch = users[_adr].lastHatch;\r\n         _referrer = users[_adr].referrer;\r\n         _referrals = users[_adr].referralsCount;\r\n         _totalWithdrawn = users[_adr].totalWithdrawn;\r\n         _referralEggRewards = users[_adr].referralEggRewards;\r\n         _referralMinerRewards = users[_adr].referralMinerRewards;\r\n\t}\r\n\r\n    function getUserBonusInfo(address _adr) public view returns(uint256 _lottery_bonus_as_miners, uint256 _pool_bonus_as_miners) {\r\n         _lottery_bonus_as_miners = users[_adr].lottery_bonus_as_miners;        \r\n         _pool_bonus_as_miners = users[_adr].pool_bonus_as_miners;            \r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return token_BUSD.balanceOf(address(this));\r\n\t}\r\n\r\n    function getTimeStamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getUserTickets(address _userAddress) public view returns(uint256) {\r\n         return ticketOwners[lotteryRound][_userAddress];\r\n    }\r\n\r\n    function getLotteryTimer() public view returns(uint256) {\r\n        return LOTTERY_START_TIME.add(LOTTERY_STEP);\r\n    }\r\n\r\n    function getAvailableEarnings(address _adr) public view returns(uint256) {\r\n        uint256 userEggs = users[_adr].claimedEggs.add(getEggsSinceLastHatch(_adr));\r\n        return calculateEggSell(userEggs);\r\n    }\r\n\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256) {\r\n        return SafeMath.div(SafeMath.mul(PSN, bs), SafeMath.add(PSNH, SafeMath.div(SafeMath.add(SafeMath.mul(PSN, rs), SafeMath.mul(PSNH, rt)), rt)));\r\n    }\r\n\r\n    function calculateEggSell(uint256 eggs) public view returns(uint256) {\r\n        return calculateTrade(eggs, marketEggs, getBalance());\r\n    }\r\n\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth, contractBalance, marketEggs);\r\n    }\r\n\r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256) {\r\n        return calculateEggBuy(eth, getBalance());\r\n    }\r\n\r\n    function getEggsYield(uint256 amount) public view returns(uint256,uint256) {\r\n        uint256 eggsAmount = calculateEggBuy(amount , getBalance());\r\n        uint256 miners = eggsAmount.div(EGGS_TO_HIRE_1MINERS);\r\n        uint256 day = 1 days;\r\n        uint256 eggsPerDay = day.mul(miners);\r\n        uint256 earningsPerDay = calculateEggSellForYield(eggsPerDay, amount);\r\n        return(miners, earningsPerDay);\r\n    }\r\n\r\n    function calculateEggSellForYield(uint256 eggs,uint256 amount) public view returns(uint256){\r\n        return calculateTrade(eggs,marketEggs, getBalance().add(amount));\r\n    }\r\n\r\n    function poolTopInfo() view external returns(address[5] memory addrs, uint256[5] memory deps) {\r\n        for(uint8 i = 0; i < pool_bonuses.length; i++) {\r\n            if(pool_top[i] == address(0)) break;\r\n\r\n            addrs[i] = pool_top[i];\r\n            deps[i] = pool_users_deposits_sum[pool_cycle][pool_top[i]];\r\n        }\r\n    }\r\n\r\n    function getSiteInfo() public view returns (uint256 _totalStaked, uint256 _totalDeposits, uint256 _totalCompound, uint256 _totalRefBonus, uint256 _totalTopDepositMinerBonus, uint256 _totalLotteryMinerBonus, uint256 _pool_balance, uint256 _pool_leader) {\r\n        return (totalStaked, totalDeposits, totalCompound, totalRefBonus, totalTopDepositMinerBonus, totalLotteryMinerBonus, pool_balance, pool_users_deposits_sum[pool_cycle][pool_top[0]]);\r\n    }\r\n\r\n    function getMyMiners() public view returns(uint256) {\r\n        return users[msg.sender].miners;\r\n    }\r\n\r\n    function getMyEggs() public view returns(uint256) {\r\n        return users[msg.sender].claimedEggs.add(getEggsSinceLastHatch(msg.sender));\r\n    }\r\n\r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256) {\r\n        uint256 secondsSinceLastHatch = getTimeStamp().sub(users[adr].lastHatch);\r\n        uint256 cutoffTime = min(secondsSinceLastHatch, CUTOFF_STEP);\r\n        uint256 secondsPassed = min(EGGS_TO_HIRE_1MINERS, cutoffTime);\r\n        return secondsPassed.mul(users[adr].miners);\r\n    }\r\n    \r\n    function PRC_EGGS_TO_HIRE_1MINERS(uint256 value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(value >= 479520 && value <= 2592000); /** min 3% max 12%**/\r\n        EGGS_TO_HIRE_1MINERS = value;\r\n    }\r\n\r\n    function CHANGE_OWNERSHIP(address value) external {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        owner = value;\r\n    }\r\n    \r\n    function ENABLE_LOTTERY(bool value) public {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(contractStarted);\r\n        if (LOTTERY_ACTIVATED) {\r\n            if(getTimeStamp().sub(LOTTERY_START_TIME) >= LOTTERY_STEP || participants >= MAX_LOTTERY_PARTICIPANTS || currentPot >= MAX_LOTTERY_POOL_PER_ROUND){\r\n                chooseWinner();\r\n            }\r\n\t\t}\r\n        if(value){\r\n            LOTTERY_ACTIVATED = true; \r\n            LOTTERY_START_TIME = block.timestamp; //enabling the function will start a new start time.           \r\n        }else{\r\n            LOTTERY_ACTIVATED = false;\r\n        }\r\n    }\r\n    \r\n    function ENABLE_TOP_DEPOSIT(bool value) public {\r\n        require(msg.sender == owner, \"Admin use only.\");\r\n        require(contractStarted);\r\n                \r\n        if (TOP_DEPOSIT_ACTIVATED) {\r\n            if(getTimeStamp().sub(TOP_DEPOSIT_START_TIME) >=  TOP_DEPOSIT_STEP){\r\n            _drawPool();\r\n            }\r\n        }\r\n        \r\n        if(value){\r\n            TOP_DEPOSIT_ACTIVATED = true;   \r\n            TOP_DEPOSIT_START_TIME = block.timestamp; //enabling the function will start a new start time.         \r\n        }else{\r\n            TOP_DEPOSIT_ACTIVATED = false;\r\n        }\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_genesis\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"miner\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"LotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolPayout\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACTION_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_OWNERSHIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUTOFF_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EGGS_TO_HIRE_1MINERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ENABLE_LOTTERY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ENABLE_TOP_DEPOSIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_ACTIVATED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_TICKET_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_EGGS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOTTERY_PARTICIPANTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOTTERY_POOL_PER_ROUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOTTERY_TICKET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_EGGS_TO_HIRE_1MINERS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_REF_PERCENTAGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOP_DEPOSIT_ACTIVATED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOP_DEPOSIT_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOP_DEPOSIT_START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOP_DEPOSIT_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_DEPOSIT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateEggSellForYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundFromGenesis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getAvailableEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEggsYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggValue\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_dev1Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev2Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_charityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLotteryHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLotteryParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLotteryTickets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryCurrentPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLotteryParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLotteryTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLotteryTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRefBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTopDepositMinerBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLotteryMinerBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool_leader\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getUserBonusInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lottery_bonus_as_miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pool_bonus_as_miners\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralEggRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralMinerRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"blacklist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"hireAttemptCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_pool_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participantAdresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTopInfo\",\"outputs\":[{\"internalType\":\"address[5]\",\"name\":\"addrs\",\"type\":\"address[5]\"},{\"internalType\":\"uint256[5]\",\"name\":\"deps\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_bonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_cycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"pool_top\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pool_users_deposits_sum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runEvents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"setTotalDripAirdropped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setWhitelistActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDripAirdropped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLotteryMinerBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTopDepositMinerBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lottery_bonus_as_miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralEggRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralMinerRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool_bonus_as_miners\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Crypto_Mischief", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000af596c5892a6c497a74175a34985dc22262f59250000000000000000000000002f0ead34abdd8375382ad56b8da4b14d94ad9b66000000000000000000000000b485e66ab85473e0a717eb7d33b7aa74330a392c000000000000000000000000d52f5885778559dc97a67b0102f85b62e777f7f2000000000000000000000000e3940c5593f06b28fbec4afa8bdb4e015616f817", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4ebccadb8aa831ea2fcafc3c84837180d1a21d158dcabdff664cd6ed3713f626"}