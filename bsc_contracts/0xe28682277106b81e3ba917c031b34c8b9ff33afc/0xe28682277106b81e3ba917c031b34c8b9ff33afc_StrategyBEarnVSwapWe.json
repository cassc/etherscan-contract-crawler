{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface Balancer {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\r\n\r\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\r\n\r\n    function swapExactAmountIn(\r\n        address tokenIn,\r\n        uint256 tokenAmountIn,\r\n        address tokenOut,\r\n        uint256 minAmountOut,\r\n        uint256 maxPrice\r\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\r\n\r\n    function swapExactAmountOut(\r\n        address tokenIn,\r\n        uint256 maxAmountIn,\r\n        address tokenOut,\r\n        uint256 tokenAmountOut,\r\n        uint256 maxPrice\r\n    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\r\n\r\n    function joinswapExternAmountIn(\r\n        address tokenIn,\r\n        uint256 tokenAmountIn,\r\n        uint256 minPoolAmountOut\r\n    ) external returns (uint256 poolAmountOut);\r\n\r\n    function exitswapPoolAmountIn(\r\n        address tokenOut,\r\n        uint256 poolAmountIn,\r\n        uint256 minAmountOut\r\n    ) external returns (uint256 tokenAmountOut);\r\n\r\n    function getBalance(address token) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function getTotalDenormalizedWeight() external view returns (uint256);\r\n\r\n    function getNormalizedWeight(address token) external view returns (uint256);\r\n\r\n    function getDenormalizedWeight(address token) external view returns (uint256);\r\n}\r\n\r\ninterface IVSafeVault {\r\n    function cap() external view returns (uint256);\r\n\r\n    function getVaultMaster() external view returns (address);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function available() external view returns (uint256);\r\n\r\n    function accept(address _input) external view returns (bool);\r\n\r\n    function earn() external;\r\n\r\n    function harvest(address reserve, uint256 amount) external;\r\n\r\n    function addNewCompound(uint256, uint256) external;\r\n\r\n    function withdraw_fee(uint256 _shares) external view returns (uint256);\r\n\r\n    function calc_token_amount_deposit(uint256 _amount) external view returns (uint256);\r\n\r\n    function calc_token_amount_withdraw(uint256 _shares) external view returns (uint256);\r\n\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function deposit(uint256 _amount, uint256 _min_mint_amount) external returns (uint256);\r\n\r\n    function depositFor(\r\n        address _account,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _min_mint_amount\r\n    ) external returns (uint256 _mint_amount);\r\n\r\n    function withdraw(uint256 _shares, uint256 _min_output_amount) external returns (uint256);\r\n\r\n    function withdrawFor(\r\n        address _account,\r\n        uint256 _shares,\r\n        uint256 _min_output_amount\r\n    ) external returns (uint256 _output_amount);\r\n\r\n    function harvestStrategy(address _strategy) external;\r\n\r\n    function harvestAllStrategies() external;\r\n}\r\n\r\ninterface IController {\r\n    function vault() external view returns (IVSafeVault);\r\n\r\n    function getStrategyCount() external view returns (uint256);\r\n\r\n    function strategies(uint256 _stratId)\r\n        external\r\n        view\r\n        returns (\r\n            address _strategy,\r\n            uint256 _quota,\r\n            uint256 _percent\r\n        );\r\n\r\n    function getBestStrategy() external view returns (address _strategy);\r\n\r\n    function want() external view returns (address);\r\n\r\n    function balanceOf() external view returns (uint256);\r\n\r\n    function withdraw_fee(uint256 _amount) external view returns (uint256); // eg. 3CRV => pJar: 0.5% (50/10000)\r\n\r\n    function investDisabled() external view returns (bool);\r\n\r\n    function withdraw(uint256) external returns (uint256 _withdrawFee);\r\n\r\n    function earn(address _token, uint256 _amount) external;\r\n\r\n    function harvestStrategy(address _strategy) external;\r\n\r\n    function harvestAllStrategies() external;\r\n\r\n    function beforeDeposit() external;\r\n}\r\n\r\ninterface IVaultMaster {\r\n    event UpdateBank(address bank, address vault);\r\n    event UpdateVault(address vault, bool isAdd);\r\n    event UpdateController(address controller, bool isAdd);\r\n    event UpdateStrategy(address strategy, bool isAdd);\r\n\r\n    function bank(address) external view returns (address);\r\n\r\n    function isVault(address) external view returns (bool);\r\n\r\n    function isController(address) external view returns (bool);\r\n\r\n    function isStrategy(address) external view returns (bool);\r\n\r\n    function slippage(address) external view returns (uint256);\r\n\r\n    function convertSlippage(address _input, address _output) external view returns (uint256);\r\n\r\n    function reserveFund() external view returns (address);\r\n\r\n    function performanceReward() external view returns (address);\r\n\r\n    function performanceFee() external view returns (uint256);\r\n\r\n    function gasFee() external view returns (uint256);\r\n\r\n    function withdrawalProtectionFee() external view returns (uint256);\r\n}\r\n\r\ninterface IValueLiquidRouter {\r\n    function factory() external view returns (address);\r\n\r\n    function controller() external view returns (address);\r\n\r\n    function formula() external view returns (address);\r\n\r\n    function WETH() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address pair,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address pair,\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        address tokenOut,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        address tokenIn,\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        address tokenIn,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        address tokenOut,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        address tokenIn,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee,\r\n        address to\r\n    ) external returns (uint256 liquidity);\r\n\r\n    function createPairETH(\r\n        address token,\r\n        uint256 amountToken,\r\n        uint32 tokenWeight,\r\n        uint32 swapFee,\r\n        address to\r\n    ) external payable returns (uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address pair,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address pair,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n}\r\n\r\ninterface IStrategy {\r\n    event Deposit(address token, uint256 amount);\r\n    event Withdraw(address token, uint256 amount, address to);\r\n    event Harvest(uint256 priceShareBefore, uint256 priceShareAfter, address compoundToken, uint256 compoundBalance, uint256 reserveFundAmount);\r\n\r\n    function baseToken() external view returns (address);\r\n\r\n    function deposit() external;\r\n\r\n    function withdraw(address _asset) external returns (uint256);\r\n\r\n    function withdraw(uint256 _amount) external returns (uint256);\r\n\r\n    function withdrawToController(uint256 _amount) external;\r\n\r\n    function skim() external;\r\n\r\n    function harvest(address _mergedStrategy) external;\r\n\r\n    function withdrawAll() external returns (uint256);\r\n\r\n    function balanceOf() external view returns (uint256);\r\n\r\n    function withdrawFee(uint256) external view returns (uint256); // pJar: 0.5% (50/10000)\r\n\r\n    function beforeDeposit() external;\r\n}\r\n\r\n/*\r\n\r\n A strategy must implement the following calls;\r\n\r\n - deposit()\r\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\r\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\r\n - balanceOf()\r\n\r\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\r\n\r\n*/\r\nabstract contract StrategyBase is IStrategy {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router public unirouter = IUniswapV2Router(0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F);\r\n    IValueLiquidRouter public vSwaprouter = IValueLiquidRouter(0xb7e19a1188776f32E8C2B790D9ca578F2896Da7C);\r\n\r\n    address public override baseToken;\r\n    address public farmingToken;\r\n    address public targetCompoundToken;\r\n\r\n    uint256 public withdrawalFee = 0; // over 10000\r\n\r\n    address public governance;\r\n    address public timelock = address(0x36fcf1c1525854b2d195F5d03d483f01549e06f2);\r\n\r\n    address public controller;\r\n    address public strategist;\r\n\r\n    IVSafeVault public vault;\r\n    IVaultMaster public vaultMaster;\r\n\r\n    mapping(address => mapping(address => address[])) public uniswapPaths; // [input -> output] => uniswap_path\r\n    mapping(address => mapping(address => address[])) public vSwapPairs; // [input -> output] => vswap pair\r\n\r\n    uint256 public performanceFee = 0; //1400 <-> 14.0%\r\n    uint256 public lastHarvestTimeStamp;\r\n\r\n    constructor(\r\n        address _baseToken,\r\n        address _farmingToken,\r\n        address _controller,\r\n        address _targetCompoundToken\r\n    ) public {\r\n        baseToken = _baseToken;\r\n        farmingToken = _farmingToken;\r\n        targetCompoundToken = _targetCompoundToken;\r\n        controller = _controller;\r\n        vault = IController(_controller).vault();\r\n        require(address(vault) != address(0), \"!vault\");\r\n        vaultMaster = IVaultMaster(vault.getVaultMaster());\r\n        governance = msg.sender;\r\n        strategist = msg.sender;\r\n\r\n        if (farmingToken != address(0)) {\r\n            IERC20(farmingToken).safeApprove(address(unirouter), type(uint256).max);\r\n            IERC20(farmingToken).safeApprove(address(vSwaprouter), type(uint256).max);\r\n        }\r\n        if (targetCompoundToken != farmingToken) {\r\n            IERC20(targetCompoundToken).safeApprove(address(unirouter), type(uint256).max);\r\n            IERC20(targetCompoundToken).safeApprove(address(vSwaprouter), type(uint256).max);\r\n        }\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance, \"!governance\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyStrategist() {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == address(controller) || msg.sender == strategist || msg.sender == governance, \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    function getName() public pure virtual returns (string memory);\r\n\r\n    function approveForSpender(\r\n        IERC20 _token,\r\n        address _spender,\r\n        uint256 _amount\r\n    ) external onlyGovernance {\r\n        _token.safeApprove(_spender, _amount);\r\n    }\r\n\r\n    function setUnirouter(IUniswapV2Router _unirouter) external onlyGovernance {\r\n        unirouter = _unirouter;\r\n        if (farmingToken != address(0)) {\r\n            IERC20(farmingToken).safeApprove(address(unirouter), type(uint256).max);\r\n        }\r\n        if (targetCompoundToken != farmingToken) IERC20(targetCompoundToken).safeApprove(address(unirouter), type(uint256).max);\r\n    }\r\n\r\n    function setVSwaprouter(IValueLiquidRouter _vSwaprouter) external onlyGovernance {\r\n        vSwaprouter = _vSwaprouter;\r\n        if (farmingToken != address(0)) {\r\n            IERC20(farmingToken).safeApprove(address(vSwaprouter), type(uint256).max);\r\n        }\r\n        if (targetCompoundToken != farmingToken) IERC20(targetCompoundToken).safeApprove(address(vSwaprouter), type(uint256).max);\r\n    }\r\n\r\n    function setUnirouterPath(\r\n        address _input,\r\n        address _output,\r\n        address[] memory _path\r\n    ) public onlyStrategist {\r\n        uniswapPaths[_input][_output] = _path;\r\n    }\r\n\r\n    function setVSwapPairs(\r\n        address _input,\r\n        address _output,\r\n        address[] memory _pair\r\n    ) public onlyStrategist {\r\n        vSwapPairs[_input][_output] = _pair;\r\n    }\r\n\r\n    function beforeDeposit() external virtual override onlyAuthorized {}\r\n\r\n    function deposit() public virtual override;\r\n\r\n    function skim() external override {\r\n        IERC20(baseToken).safeTransfer(controller, IERC20(baseToken).balanceOf(address(this)));\r\n    }\r\n\r\n    function withdraw(address _asset) external override onlyAuthorized returns (uint256 balance) {\r\n        require(baseToken != _asset, \"lpPair\");\r\n\r\n        balance = IERC20(_asset).balanceOf(address(this));\r\n        IERC20(_asset).safeTransfer(controller, balance);\r\n        emit Withdraw(_asset, balance, controller);\r\n    }\r\n\r\n    function withdrawToController(uint256 _amount) external override onlyAuthorized {\r\n        require(controller != address(0), \"!controller\"); // additional protection so we don't burn the funds\r\n\r\n        uint256 _balance = IERC20(baseToken).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n\r\n        IERC20(baseToken).safeTransfer(controller, _amount);\r\n        emit Withdraw(baseToken, _amount, controller);\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\r\n\r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint256 _amount) external override onlyAuthorized returns (uint256) {\r\n        uint256 _balance = IERC20(baseToken).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n\r\n        IERC20(baseToken).safeTransfer(address(vault), _amount);\r\n        emit Withdraw(baseToken, _amount, address(vault));\r\n        return _amount;\r\n    }\r\n\r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external override onlyAuthorized returns (uint256 balance) {\r\n        _withdrawAll();\r\n        balance = IERC20(baseToken).balanceOf(address(this));\r\n        IERC20(baseToken).safeTransfer(address(vault), balance);\r\n        emit Withdraw(baseToken, balance, address(vault));\r\n    }\r\n\r\n    function _withdrawAll() internal virtual;\r\n\r\n    function claimReward() public virtual;\r\n\r\n    function _swapTokens(\r\n        address _input,\r\n        address _output,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_input == _output) return;\r\n        address[] memory path = vSwapPairs[_input][_output];\r\n        if (path.length > 0) {\r\n            // use vSwap\r\n            vSwaprouter.swapExactTokensForTokens(_input, _output, _amount, 1, path, address(this), now.add(1800));\r\n        } else {\r\n            // use Uniswap\r\n            path = uniswapPaths[_input][_output];\r\n            if (path.length == 0) {\r\n                // path: _input -> _output\r\n                path = new address[](2);\r\n                path[0] = _input;\r\n                path[1] = _output;\r\n            }\r\n            unirouter.swapExactTokensForTokens(_amount, 1, path, address(this), now.add(1800));\r\n        }\r\n    }\r\n\r\n    function _buyWantAndReinvest() internal virtual;\r\n\r\n    function harvest(address _mergedStrategy) external virtual override {\r\n        require(msg.sender == controller || msg.sender == strategist || msg.sender == governance, \"!authorized\");\r\n\r\n        uint256 pricePerFullShareBefore = vault.getPricePerFullShare();\r\n        claimReward();\r\n        address _targetCompoundToken = targetCompoundToken;\r\n        {\r\n            address _farmingToken = farmingToken;\r\n            if (_farmingToken != address(0)) {\r\n                uint256 _farmingTokenBal = IERC20(_farmingToken).balanceOf(address(this));\r\n                if (_farmingTokenBal > 0) {\r\n                    _swapTokens(_farmingToken, _targetCompoundToken, _farmingTokenBal);\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 _targetCompoundBal = IERC20(_targetCompoundToken).balanceOf(address(this));\r\n\r\n        if (_targetCompoundBal > 0) {\r\n            if (_mergedStrategy != address(0)) {\r\n                require(vaultMaster.isStrategy(_mergedStrategy), \"!strategy\"); // additional protection so we don't burn the funds\r\n                IERC20(_targetCompoundToken).safeTransfer(_mergedStrategy, _targetCompoundBal); // forward WETH to one strategy and do the profit split all-in-one there (gas saving)\r\n            } else {\r\n                address _reserveFund = vaultMaster.reserveFund();\r\n                address _performanceReward = vaultMaster.performanceReward();\r\n                uint256 _performanceFee = getPerformanceFee();\r\n                uint256 _gasFee = vaultMaster.gasFee();\r\n\r\n                uint256 _reserveFundAmount;\r\n                if (_performanceFee > 0 && _reserveFund != address(0)) {\r\n                    _reserveFundAmount = _targetCompoundBal.mul(_performanceFee).div(10000);\r\n                    IERC20(_targetCompoundToken).safeTransfer(_reserveFund, _reserveFundAmount);\r\n                }\r\n\r\n                if (_gasFee > 0 && _performanceReward != address(0)) {\r\n                    uint256 _amount = _targetCompoundBal.mul(_gasFee).div(10000);\r\n                    IERC20(_targetCompoundToken).safeTransfer(_performanceReward, _amount);\r\n                }\r\n\r\n                _buyWantAndReinvest();\r\n\r\n                uint256 pricePerFullShareAfter = vault.getPricePerFullShare();\r\n                emit Harvest(pricePerFullShareBefore, pricePerFullShareAfter, _targetCompoundToken, _targetCompoundBal, _reserveFundAmount);\r\n            }\r\n        }\r\n\r\n        lastHarvestTimeStamp = block.timestamp;\r\n    }\r\n\r\n    // Only allows to earn some extra yield from non-core tokens\r\n    function earnExtra(address _token) public {\r\n        require(msg.sender == address(this) || msg.sender == controller || msg.sender == strategist || msg.sender == governance, \"!authorized\");\r\n        require(address(_token) != address(baseToken), \"token\");\r\n        uint256 _amount = IERC20(_token).balanceOf(address(this));\r\n        _swapTokens(_token, targetCompoundToken, _amount);\r\n    }\r\n\r\n    function balanceOfPool() public view virtual returns (uint256);\r\n\r\n    function balanceOf() public view override returns (uint256) {\r\n        return IERC20(baseToken).balanceOf(address(this)).add(balanceOfPool());\r\n    }\r\n\r\n    function claimable_tokens() external view virtual returns (address[] memory, uint256[] memory);\r\n\r\n    function getTargetFarm() external view virtual returns (address);\r\n\r\n    function getTargetPoolId() external view virtual returns (uint256);\r\n\r\n    function withdrawFee(uint256 _amount) external view override returns (uint256) {\r\n        return _amount.mul(withdrawalFee).div(10000);\r\n    }\r\n\r\n    function getPerformanceFee() public view returns (uint256) {\r\n        if (performanceFee > 0) {\r\n            return performanceFee;\r\n        } else {\r\n            return vaultMaster.performanceFee();\r\n        }\r\n    }\r\n\r\n    function setGovernance(address _governance) external onlyGovernance {\r\n        governance = _governance;\r\n    }\r\n\r\n    function setTimelock(address _timelock) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        timelock = _timelock;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external onlyGovernance {\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n        vault = IVSafeVault(IController(_controller).vault());\r\n        require(address(vault) != address(0), \"!vault\");\r\n        vaultMaster = IVaultMaster(vault.getVaultMaster());\r\n    }\r\n\r\n    function setWithdrawalFee(uint256 _withdrawalFee) external onlyGovernance {\r\n        withdrawalFee = _withdrawalFee;\r\n    }\r\n\r\n    function setPerformanceFee(uint256 _performanceFee) public onlyGovernance {\r\n        performanceFee = _performanceFee;\r\n    }\r\n\r\n    function setFarmingToken(address _farmingToken) public onlyStrategist {\r\n        farmingToken = _farmingToken;\r\n    }\r\n\r\n    function setTargetCompoundToken(address _targetCompoundToken) public onlyStrategist {\r\n        targetCompoundToken = _targetCompoundToken;\r\n    }\r\n\r\n    function setApproveRouterForToken(address _token, uint256 _amount) public onlyStrategist {\r\n        IERC20(_token).safeApprove(address(unirouter), _amount);\r\n        IERC20(_token).safeApprove(address(vSwaprouter), _amount);\r\n    }\r\n\r\n    event ExecuteTransaction(address indexed target, uint256 value, string signature, bytes data);\r\n\r\n    /**\r\n     * @dev This is from Timelock contract.\r\n     */\r\n    function executeTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data\r\n    ) public returns (bytes memory) {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n\r\n        bytes memory callData;\r\n\r\n        if (bytes(signature).length == 0) {\r\n            callData = data;\r\n        } else {\r\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n        }\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\r\n        require(success, string(abi.encodePacked(getName(), \"::executeTransaction: Transaction execution reverted.\")));\r\n\r\n        emit ExecuteTransaction(target, value, signature, data);\r\n\r\n        return returnData;\r\n    }\r\n}\r\n\r\ninterface IBvaultsBank {\r\n    function deposit(uint256 _pid, uint256 _wantAmt) external;\r\n\r\n    function withdraw(uint256 _pid, uint256 _wantAmt) external;\r\n\r\n    function withdrawAll(uint256 _pid) external;\r\n\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n\r\n    function rewardPoolLength() external view returns (uint256);\r\n\r\n    function rewardPoolInfo(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            address rewardToken,\r\n            uint256 rewardPerBlock,\r\n            uint256 totalPaidRewards\r\n        );\r\n\r\n    function pendingReward(\r\n        uint256 _pid,\r\n        uint256 _rewardPid,\r\n        address _user\r\n    ) external view returns (uint256);\r\n\r\n    function stakedWantTokens(uint256 _pid, address _user) external view returns (uint256);\r\n}\r\n\r\n/*\r\n\r\n A strategy must implement the following calls;\r\n\r\n - deposit()\r\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\r\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\r\n - balanceOf()\r\n\r\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\r\n\r\n*/\r\ncontract StrategyBEarnVSwapWeightLp is StrategyBase {\r\n    uint256 public blocksToReleaseCompound = 0; // disable\r\n\r\n    address public bVaultBank;\r\n    uint256 public poolId;\r\n\r\n    address public token0;\r\n    address public token1;\r\n    uint256 public token0Weight; //max 100\r\n    uint256 public token1Weight; //max 100\r\n\r\n    // baseToken       = 0xf98313f818c53E40Bd758C5276EF4B434463Bec4 (gvValueBUSD-vSwapLP)\r\n    // farmingToken = 0x0 (dynamic)\r\n    // targetCompound = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56 (BUSD)\r\n    // token0 = 0x0610C2d9F6EbC40078cf081e2D1C4252dD50ad15 (gvValue)\r\n    // token1 = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56 (BUSD)\r\n    constructor(\r\n        address _baseToken,\r\n        address _farmingToken,\r\n        address _bVaultBank,\r\n        uint256 _poolId,\r\n        address _targetCompound,\r\n        uint256 _token0Weight,\r\n        address _token0,\r\n        address _token1,\r\n        address _controller\r\n    ) public StrategyBase(_baseToken, _farmingToken, _controller, _targetCompound) {\r\n        bVaultBank = _bVaultBank;\r\n        poolId = _poolId;\r\n        token0 = _token0;\r\n        token0Weight = _token0Weight;\r\n        token1Weight = 100 - _token0Weight;\r\n        token1 = _token1;\r\n\r\n        IERC20(baseToken).safeApprove(address(bVaultBank), type(uint256).max);\r\n        if (token0 != farmingToken && token0 != targetCompoundToken) {\r\n            IERC20(token0).safeApprove(address(unirouter), type(uint256).max);\r\n            IERC20(token0).safeApprove(address(vSwaprouter), type(uint256).max);\r\n        }\r\n        if (token1 != farmingToken && token1 != targetCompoundToken && token1 != token0) {\r\n            IERC20(token1).safeApprove(address(unirouter), type(uint256).max);\r\n            IERC20(token1).safeApprove(address(vSwaprouter), type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function getName() public pure override returns (string memory) {\r\n        return \"StrategyBEarnVSwapWeightLp\";\r\n    }\r\n\r\n    function deposit() public override {\r\n        uint256 _baseBal = IERC20(baseToken).balanceOf(address(this));\r\n        if (_baseBal > 0) {\r\n            IBvaultsBank(bVaultBank).deposit(poolId, _baseBal);\r\n            emit Deposit(baseToken, _baseBal);\r\n        }\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal override returns (uint256) {\r\n        uint256 _stakedAmount = IBvaultsBank(bVaultBank).stakedWantTokens(poolId, address(this));\r\n        if (_amount > _stakedAmount) {\r\n            _amount = _stakedAmount;\r\n        }\r\n\r\n        uint256 _before = IERC20(baseToken).balanceOf(address(this));\r\n        IBvaultsBank(bVaultBank).withdraw(poolId, _amount);\r\n        uint256 _after = IERC20(baseToken).balanceOf(address(this));\r\n        _amount = _after.sub(_before);\r\n\r\n        return _amount;\r\n    }\r\n\r\n    function _withdrawAll() internal override {\r\n        IBvaultsBank(bVaultBank).withdrawAll(poolId);\r\n    }\r\n\r\n    function claimReward() public override {\r\n        address _bVaultBank = bVaultBank;\r\n        IBvaultsBank(_bVaultBank).deposit(poolId, 0);\r\n\r\n        uint256 rewardPoolLength = IBvaultsBank(_bVaultBank).rewardPoolLength();\r\n        for (uint256 index = 0; index < rewardPoolLength; index++) {\r\n            (address _rewardToken, , ) = IBvaultsBank(_bVaultBank).rewardPoolInfo(index);\r\n            uint256 _rewardBal = IERC20(_rewardToken).balanceOf(address(this));\r\n            if (_rewardBal > 0) {\r\n                _swapTokens(_rewardToken, targetCompoundToken, _rewardBal);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _buyWantAndReinvest() internal override {\r\n        {\r\n            address _targetCompoundToken = targetCompoundToken;\r\n            uint256 _targetCompoundBal = IERC20(_targetCompoundToken).balanceOf(address(this));\r\n            if (_targetCompoundToken != token0) {\r\n                uint256 _compoundToBuyToken0 = _targetCompoundBal.mul(token0Weight).div(100);\r\n                _swapTokens(_targetCompoundToken, token0, _compoundToBuyToken0);\r\n            }\r\n            if (_targetCompoundToken != token1) {\r\n                uint256 _compoundToBuyToken1 = _targetCompoundBal.mul(token1Weight).div(100);\r\n                _swapTokens(_targetCompoundToken, token1, _compoundToBuyToken1);\r\n            }\r\n        }\r\n\r\n        address _baseToken = baseToken;\r\n        uint256 _before = IERC20(_baseToken).balanceOf(address(this));\r\n        _addLiquidity();\r\n        uint256 _after = IERC20(_baseToken).balanceOf(address(this));\r\n        if (_after > 0) {\r\n            if (_after > _before) {\r\n                uint256 _compound = _after.sub(_before);\r\n                vault.addNewCompound(_compound, blocksToReleaseCompound);\r\n            }\r\n            deposit();\r\n        }\r\n    }\r\n\r\n    function _addLiquidity() internal {\r\n        address _token0 = token0;\r\n        address _token1 = token1;\r\n        uint256 _amount0 = IERC20(_token0).balanceOf(address(this));\r\n        uint256 _amount1 = IERC20(_token1).balanceOf(address(this));\r\n        if (_amount0 > 0 && _amount1 > 0) {\r\n            IValueLiquidRouter(vSwaprouter).addLiquidity(baseToken, _token0, _token1, _amount0, _amount1, 0, 0, address(this), block.timestamp + 1);\r\n        }\r\n    }\r\n\r\n    function balanceOfPool() public view override returns (uint256) {\r\n        uint256 amount = IBvaultsBank(bVaultBank).stakedWantTokens(poolId, address(this));\r\n        return amount;\r\n    }\r\n\r\n    function claimable_tokens() external view override returns (address[] memory farmToken, uint256[] memory totalDistributedValue) {\r\n        uint256 rewardPoolLength = IBvaultsBank(bVaultBank).rewardPoolLength();\r\n        farmToken = new address[](rewardPoolLength);\r\n        totalDistributedValue = new uint256[](rewardPoolLength);\r\n\r\n        for (uint256 index = 0; index < rewardPoolLength; index++) {\r\n            (address _rewardToken, , ) = IBvaultsBank(bVaultBank).rewardPoolInfo(index);\r\n            farmToken[index] = _rewardToken;\r\n            totalDistributedValue[index] = IBvaultsBank(bVaultBank).pendingReward(poolId, index, address(this));\r\n        }\r\n    }\r\n\r\n    function getTargetFarm() external view override returns (address) {\r\n        return bVaultBank;\r\n    }\r\n\r\n    function getTargetPoolId() external view override returns (uint256) {\r\n        return poolId;\r\n    }\r\n\r\n    /**\r\n     * @dev Function that has to be called as part of strat migration. It sends all the available funds back to the\r\n     * vault, ready to be migrated to the new strat.\r\n     */\r\n    function retireStrat() external onlyStrategist {\r\n        IBvaultsBank(bVaultBank).emergencyWithdraw(poolId);\r\n\r\n        uint256 baseBal = IERC20(baseToken).balanceOf(address(this));\r\n        IERC20(baseToken).transfer(address(vault), baseBal);\r\n    }\r\n\r\n    function setBlocksToReleaseCompound(uint256 _blocks) external onlyStrategist {\r\n        blocksToReleaseCompound = _blocks;\r\n    }\r\n\r\n    function setBVaultBankContract(address _bVaultBank) external onlyStrategist {\r\n        bVaultBank = _bVaultBank;\r\n    }\r\n\r\n    function setPoolId(uint256 _poolId) external onlyStrategist {\r\n        poolId = _poolId;\r\n    }\r\n\r\n    function setTokenLp(\r\n        address _token0,\r\n        address _token1,\r\n        uint256 _token0Weight\r\n    ) external onlyStrategist {\r\n        token0 = _token0;\r\n        token0Weight = _token0Weight;\r\n        token1Weight = 100 - _token0Weight;\r\n        token1 = _token1;\r\n\r\n        if (token0 != farmingToken && token0 != targetCompoundToken) {\r\n            IERC20(token0).safeApprove(address(unirouter), type(uint256).max);\r\n            IERC20(token0).safeApprove(address(vSwaprouter), type(uint256).max);\r\n        }\r\n        if (token1 != farmingToken && token1 != targetCompoundToken && token1 != token0) {\r\n            IERC20(token1).safeApprove(address(unirouter), type(uint256).max);\r\n            IERC20(token1).safeApprove(address(vSwaprouter), type(uint256).max);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bVaultBank\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_targetCompound\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token0Weight\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceShareBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceShareAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"compoundToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compoundBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveFundAmount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bVaultBank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksToReleaseCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimable_tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"farmToken\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalDistributedValue\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"earnExtra\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mergedStrategy\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retireStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setApproveRouterForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bVaultBank\",\"type\":\"address\"}],\"name\":\"setBVaultBankContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"setBlocksToReleaseCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmingToken\",\"type\":\"address\"}],\"name\":\"setFarmingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"setPoolId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetCompoundToken\",\"type\":\"address\"}],\"name\":\"setTargetCompoundToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token0Weight\",\"type\":\"uint256\"}],\"name\":\"setTokenLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"_unirouter\",\"type\":\"address\"}],\"name\":\"setUnirouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setUnirouterPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pair\",\"type\":\"address[]\"}],\"name\":\"setVSwapPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValueLiquidRouter\",\"name\":\"_vSwaprouter\",\"type\":\"address\"}],\"name\":\"setVSwaprouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetCompoundToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0Weight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1Weight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswapPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vSwapPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vSwaprouter\",\"outputs\":[{\"internalType\":\"contract IValueLiquidRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVSafeVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultMaster\",\"outputs\":[{\"internalType\":\"contract IVaultMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StrategyBEarnVSwapWeightLp", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "000000000000000000000000f98313f818c53e40bd758c5276ef4b434463bec40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b390b07fcf76678089cb12d8e615d5fe494b01fb000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000000000000000000000000000000000000000000620000000000000000000000000610c2d9f6ebc40078cf081e2d1c4252dd50ad15000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000bea812e57ef51ae40ba2cc56cd1172deddb95f94", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c8f3d26d64e178cf95668bbc09d728dc6fda58b86c95a7e8d299b5c83af34e3f"}