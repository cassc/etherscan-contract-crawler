{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Ola/Core/Interfaces/EIP20Interface.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Peripheral/Lens/OlaLens.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../Core/LendingNetwork/OTokens/CToken.sol\\\";\\nimport \\\"../../Core/LendingNetwork/PriceOracle/PriceOracle.sol\\\";\\nimport \\\"../../Core/Interfaces/EIP20Interface.sol\\\";\\n\\ninterface CErc20ForUniswapConfigOlaLens {\\n    function underlying() external view returns (address);\\n}\\n\\ninterface DynamicRainMakerForOlaLens {\\n    function compSpeeds(address cToken) external view returns (uint);\\n\\n    function compSupplySpeeds(address cToken) external view returns (uint);\\n\\n    function compBorrowSpeeds(address cToken) external view returns (uint);\\n\\n    function claimComp(address holder) external;\\n\\n    function compAccrued(address holder) external view returns (uint);\\n\\n    function lnIncentiveTokenAddress() external view returns (EIP20Interface);\\n}\\n\\ninterface MinistryOlaLensInterface {\\n    function getOracleForAsset(address asset) external view returns (PriceOracle);\\n\\n    function getPriceForAsset(address asset) external view returns (uint256);\\n}\\n\\ninterface ComptrollerOlaLensInterface {\\n    // isListed, collateralFactorMantissa, liquidationFactorMantissa, liquidationIncentiveMantissa\\n    function markets(address) external view returns (bool, uint, uint, uint);\\n    // function oracle() external view returns (PriceOracle);\\n    function getAccountLiquidity(address) external view returns (uint, uint, uint);\\n    // OLA_ADDITIONS : liquidity by factor\\n    function getAccountLiquidityByLiquidationFactor(address) external view returns (uint, uint, uint);\\n\\n    function getAssetsIn(address) external view returns (CToken[] memory);\\n\\n    function getAllMarkets() external view returns (CToken[] memory);\\n    // function claimComp(address) external;\\n    // function compAccrued(address) external view returns (uint);\\n    // function compSpeeds(address) external view returns (uint);\\n\\n    function getRegistry() external view returns (MinistryOlaLensInterface);\\n\\n    // NOTE : For now assuming only one type of RainMaker\\n    function rainMaker() external view returns (DynamicRainMakerForOlaLens);\\n\\n    function hasRainMaker() view external returns (bool);\\n}\\n\\n// IMPORTANT : We currently assume that the native coin has 18 decimals.\\n\\ncontract OlaLens {\\n    struct RainBalances {\\n        uint balance;\\n        uint allocated;\\n    }\\n\\n    function calculateActiveRainBalances(ComptrollerOlaLensInterface comptroller, address account) external returns (RainBalances memory) {\\n        uint balance;\\n        uint allocated;\\n\\n        if (comptroller.hasRainMaker()) {\\n            return calculateRainBalancesInternal(comptroller.rainMaker(), account);\\n        } else {\\n            return RainBalances({\\n            balance : 0,\\n            allocated : 0\\n            });\\n        }\\n    }\\n\\n    function calculateRainBalances(DynamicRainMakerForOlaLens rainMaker, address account) external returns (RainBalances memory) {\\n        return calculateRainBalancesInternal(rainMaker, account);\\n    }\\n\\n    function calculateRainBalancesInternal(DynamicRainMakerForOlaLens rainMaker, address account) internal returns (RainBalances memory) {\\n        EIP20Interface rainyToken = rainMaker.lnIncentiveTokenAddress();\\n\\n        uint balance = rainyToken.balanceOf(account);\\n\\n        rainMaker.claimComp(account);\\n\\n        uint newBalance = rainyToken.balanceOf(account);\\n        uint accrued = 0;\\n\\n        accrued = rainMaker.compAccrued(account);\\n\\n        uint total = add(accrued, newBalance, \\\"sum comp total\\\");\\n        uint allocated = sub(total, balance, \\\"sub allocated\\\");\\n\\n        return RainBalances({\\n        balance : balance,\\n        allocated : allocated\\n        });\\n    }\\n\\n    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/OTokens/CToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"../ErrorReporter/ErrorReporter.sol\\\";\\nimport \\\"../../Math/Exponential.sol\\\";\\nimport \\\"../../Interfaces/EIP20Interface.sol\\\";\\nimport \\\"../../OlaPlatform/InterestRateModels/InterestRateModel.sol\\\";\\n\\ninterface RegistryForOToken {\\n    function isSupportedInterestRateModel(address interestRateModel) external returns (bool);\\n    function olaBankAddress() external view returns (address payable);\\n    function blocksBased() external view returns (bool);\\n}\\n\\ninterface ComptrollerForOToken {\\n    function adminBankAddress() external view returns (address payable);\\n}\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenStorage, CTokenInterface, CTokenViewInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the Comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on Comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        accrualBlockTimestamp = getBlockTimestamp();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the calculation based flag from the ministry\\n        RegistryForOToken ministry = RegistryForOToken(comptroller.getRegistry());\\n        blocksBased = ministry.blocksBased();\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        // unused function\\n         comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by Comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        uint cTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block timestamp\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockTimestamp() internal view returns (uint) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Get the accrual block number of this cToken\\n     * @return The accrual block number\\n     */\\n    function getAccrualBlockNumber() external view returns (uint) {\\n        return accrualBlockNumber;\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n        uint currentBlockTimestamp = getBlockTimestamp();\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // OLA_ADDITIONS : Distinction between time and block based calculations\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        MathError mathErr;\\n        uint delta;\\n\\n        if (blocksBased) {\\n            (mathErr, delta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        } else {\\n            // This variable is defined here due to solidity limits\\n            uint accrualBlockTimestampPrior = accrualBlockTimestamp;\\n\\n            /* Short-circuit accumulating 0 interest on time based chains + extra safety for weird timestamps */\\n            if (currentBlockTimestamp <= accrualBlockTimestampPrior) {\\n                return uint(Error.NO_ERROR);\\n            }\\n\\n            (mathErr, delta) = subUInt(currentBlockTimestamp, accrualBlockTimestampPrior);\\n        }\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate delta\\\");\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * delta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), delta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        accrualBlockTimestamp = currentBlockTimestamp;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // Comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // Comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = cTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.getAccrualBlockNumber() != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // Comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense hook */\\n        // Transfer verify is required here due to tokens being transferred, and have to keep the\\n        // ACC accounting in check\\n        // This works, because the 'borrower' has to be in this market. and so, the active collateral usage can either remain unchanged\\n        // (if the liquidator is also in the market) or reduce (if the liquidator is not in the market)\\n        comptroller.transferVerify(address(this), borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // Comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() external returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * OLA_ADDITIONS : Made internal and removes Admin check.\\n      * @notice Sets a new Comptroller for the market\\n      * @dev Admin function to set a new Comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) internal returns (uint) {\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke Comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's Comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        // OLA_ADDITIONS :This constraint\\n        // Check newReserveFactor >= minReserveFactor\\n        if (newReserveFactorMantissa < reserveFactorMinMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n\\n\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to the LeN admin and to Ola bank their respective shares\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // OLA_ADDITIONS : Allowing anyone to reduce reserves\\n        // Check caller is admin\\n        // if (msg.sender != admin) {\\n        //     return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        // }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        // OLA_ADDITIONS : Dividing the reduced amount between the Admin and Ola (+validations)\\n        //                 Important to notice that we have added Math calculations to this function.\\n        //                 Where as before, it only used pre-calculated numbers.\\n        MathError mathErr;\\n        uint adminPart;\\n        uint olaPart;\\n        uint olaReserveFactor = fetchOlaReserveFactorMantissa();\\n        address payable olaBankAddress = fetchOlaBankAddress();\\n        address payable adminBankAddress = fetchAdminBankAddress();\\n\\n        // Calculate olaPart\\n        (mathErr, olaPart) = mulScalarTruncate(Exp({mantissa: olaReserveFactor}), reduceAmount);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDUCE_RESERVES_OLA_PART_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        // Sanity check, should never be a problem in a well parameterized system\\n        if (olaPart >= reduceAmount) {\\n            return fail(Error.BAD_SYSTEM_PARAMS, FailureInfo.REDUCE_RESERVES_OLA_PART_CALCULATION_FAILED);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // Calculate admin part\\n        adminPart = reduceAmount - olaPart;\\n        // We checked olaPart < reduceAmount above, so this should never revert.\\n        require(adminPart < reduceAmount, \\\"reduce reserves unexpected adminPart underflow\\\");\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\n        require(totalReservesNew <= totalReserves, \\\"reduce reserves unexpected underflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // OLA_ADDITIONS : Transfer reserves to both admin and Ola bank addresses\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(adminBankAddress, adminPart);\\n        doTransferOut(olaBankAddress, olaPart);\\n\\n        emit ReservesReduced(adminBankAddress, adminPart, olaBankAddress, olaPart, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Ensure interest rate model is an approved contracts\\n        RegistryForOToken registry = RegistryForOToken(comptroller.getRegistry());\\n\\n        require(registry.isSupportedInterestRateModel(address(newInterestRateModel)), \\\"Unapproved interest rate model\\\");\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal;\\n\\n    /**\\n     * OLA_ADDITIONS: This function\\n     * @dev Returns the ola reserves factor.\\n     */\\n    function fetchOlaReserveFactorMantissa() internal pure returns (uint) {\\n        return olaReserveFactorMantissa;\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS: This function\\n     * @dev Fetches the ola bank address.\\n     */\\n    function fetchOlaBankAddress() internal returns (address payable) {\\n        return RegistryForOToken(comptroller.getRegistry()).olaBankAddress();\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS: This function\\n     * @dev Fetches the admin bank address.\\n     */\\n    function fetchAdminBankAddress() internal view returns (address payable) {\\n        return ComptrollerForOToken(address(comptroller)).adminBankAddress();\\n    }\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/PriceOracle/PriceOracle.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../OTokens/CToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n     * OLA_ADDITIONS : This function\\n     * @notice Get the price an asset\\n     * @param asset The asset to get the price of\\n     * @return The asset price mantissa (scaled by 1e18).\\n     *  Zero means the price is unavailable.\\n     */\\n    function getAssetPrice(address asset) external view returns (uint);\\n\\n    /**\\n     * OLA_ADDITIONS : This function\\n     * @notice Get the price update timestamp for the asset\\n     * @param asset The asset address for price update timestamp retrieval.\\n     * @return Last price update timestamp for the asset\\n     */\\n    function getAssetPriceUpdateTimestamp(address asset) external view returns (uint);\\n\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint);\\n\\n    /**\\n     * OLA_ADDITIONS : This function\\n     * @notice Get the price update timestamp for the cToken underlying\\n     * @param cToken The cToken address for price update timestamp retrieval.\\n     * @return Last price update timestamp for the cToken underlying asset\\n     */\\n    function getUnderlyingPriceUpdateTimestamp(address cToken) external view returns (uint);\\n}\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/Comptroller/ComptrollerInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../OTokens/CToken.sol\\\";\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** OLA_ADDITIONS : registry getter ***/\\n    /*** Registry ***/\\n    function getRegistry() external view returns (address);\\n\\n    /*** Assets supported by the Comptroller ***/\\n    function getAllMarkets() public view returns (CToken[] memory);\\n\\n    /*** OLA_ADDITIONS : peripheral checkers ***/\\n    /*** Peripherals ***/\\n    function hasRainMaker() view public returns (bool);\\n    function hasBouncer() view public returns (bool);\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/OTokens/CTokenInterfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../../OlaPlatform/InterestRateModels/InterestRateModel.sol\\\";\\nimport \\\"../../Interfaces/EIP20NonStandardInterface.sol\\\";\\n\\n/**\\n * OLA_ADDITIONS : This base admin storage.\\n */\\ncontract CTokenAdminStorage {\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n\\n    // OLA_ADDITIONS : Contract hash name\\n    bytes32 public contractNameHash;\\n}\\n\\n/**\\n * @notice DO NOT ADD ANY MORE STORAGE VARIABLES HERE (add them to their respective type storage)\\n */\\ncontract CTokenStorage is CTokenAdminStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n\\n    // @notice Indicates if the calculations should be blocks or time based\\n    bool public blocksBased;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockTimestamp;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * OLA_ADDITIONS : Removed option to 'add reserves' as it makes no sense when reducing reserves\\n     *                 sends a part to Ola Bank.\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    // IMPORTANT : DO NOT ADD ANY MORE STORAGE VARIABLES HERE (add them to their respective type storage)\\n}\\n\\ncontract CTokenDelegatorInterface {\\n\\n    /*** Implementation Events ***/\\n\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address indexed oldImplementation, address indexed newImplementation);\\n\\n    /**\\n     * @notice Emitted when implementation is not changed under a system version update\\n     */\\n    event ImplementationDidNotChange(address indexed implementation);\\n\\n\\n    /*** Implementation functions ***/\\n\\n    // OLA_ADDITIONS : Update implementation from the Registry\\n    function updateImplementationFromRegistry(bool allowResign, bytes calldata becomeImplementationData) external returns (bool);\\n}\\n\\ncontract CTokenInterface {\\n    // OLA_ADDITIONS : \\\"Underlying field\\\"\\n    address constant public nativeCoinUnderlying = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    /**\\n     * OLA_ADDITIONS : This field\\n     * @notice This value is hard coded to 0.5 (50% for the Ola ecosystem and the LeN owner each)\\n     */\\n    uint constant public olaReserveFactorMantissa = 0.5e18;\\n\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 0.3e18;\\n\\n    /**\\n     * OLA_ADDITIONS : This value\\n     * @notice Minimum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMinMantissa = 0.05e18;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when Comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    // TODO : Change to 'adminBank'\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint adminPart, address olaBank, uint olaPart, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getAccrualBlockNumber() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\n/**\\n * View functions that are not used by the core contracts.\\n */\\ncontract CTokenViewInterface {\\n    /*** View Interface ***/\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n\\n    /**\\n     * @notice Used by the Maximilion\\n     */\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function getCash() external view returns (uint);\\n}\\n\\ncontract CErc20Interface {\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n    function sweepToken(EIP20NonStandardInterface token) external;\\n}\\n\\ncontract CErc20StorageV0_01 {}\\n\\ncontract CErc20StorageV0_02 is CErc20StorageV0_01 {}\\n\\ncontract ONativeInterface {\\n    /*** User Interface ***/\\n\\n    function mint() external payable;\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow() external payable;\\n    function repayBorrowBehalf(address borrower) external payable;\\n    function liquidateBorrow(address borrower, CTokenInterface cTokenCollateral) external payable;\\n    function sweepToken(EIP20NonStandardInterface token) external;\\n}\\n\\ncontract CEtherStorageV0_01 {}\\n\\ncontract CEtherStorageV0_02 is CEtherStorageV0_01 {}\\n\\ncontract CDelegateInterface {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\\ncontract CLPStakingStorageV0_05 {\\n\\n    /**\\n     * @notice The token that is distributed via the farm\\n     */\\n    address public rewardToken;\\n\\n    /**\\n     * @notice The farm contract\\n     */\\n    address public farmAddress;\\n\\n    /**\\n     * @notice The pool id in the farm\\n     */\\n    uint public pid;\\n\\n    /**\\n     * @notice The market's last updated staking index\\n     */\\n    uint public marketStakingIndex;\\n\\n    /// @notice The Reward Token index for each supplier as of the last time they accrued rewards\\n    mapping(address => uint) public supplierStakingIndex;\\n\\n    /// @notice The Reward Token accrued but not yet transferred to each supplier\\n    mapping(address => uint) public rewardsAccrued;\\n}\\n\\ncontract CLPStakingInterfaceV0_05 {\\n    /**\\n     * @notice Event emitted when rewards-interest is accrued\\n     */\\n    event AccrueRewardsInterest(uint oldStakingIndex, uint newStakingIndex, uint oldReserves, uint newReserves);\\n\\n    event DistributeSupplierRewards(address supplier, uint supplierDelta, uint marketStakignIndex);\\n}\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/ErrorReporter/ErrorReporter.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY,\\n\\n        // OLA_ADDITIONS : All Enums from here\\n        NOT_IN_MARKET,\\n        TOO_LITTLE_BORROW,\\n        IN_FRESH_LIQUIDATION_LIMITED_PERIOD,\\n        INVALID_LIQUIDATION_FACTOR,\\n        BORROWED_AGAINST_FAILED,\\n        TOTAL_BORROWED_AGAINST_TOO_HIGH,\\n        TOO_MUCH_COLLATERAL_ACTIVATION,\\n\\n        // V0.02\\n        NOT_APPROVED_TO_MINT,\\n        NOT_APPROVED_TO_BORROW\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK,\\n\\n        // OLA_ADDITIONS : All Enums from here\\n        SET_LIQUIDATION_INCENTIVE_NO_EXISTS,\\n        SET_LIQUIDATION_INCENTIVE_WITHOUT_PRICE,\\n        SET_LIQUIDATION_FACTOR_OWNER_CHECK,\\n        SET_LIQUIDATION_FACTOR_NO_EXISTS,\\n        SET_LIQUIDATION_FACTOR_VALIDATION,\\n        SET_LIQUIDATION_FACTOR_WITHOUT_PRICE,\\n        SET_LIQUIDATION_FACTOR_LOWER_THAN_COLLATERAL_FACTOR,\\n        SET_LIQUIDATION_FACTOR_LOWER_THAN_EXISTING_FACTOR,\\n        SET_COLLATERAL_FACTOR_HIGHER_THAN_LIQUIDATION_FACTOR,\\n        SET_RAIN_MAKER_OWNER_CHECK,\\n        ENTER_MARKET_NOT_ALLOWED,\\n        UPDATE_LN_VERSION_ADMIN_OWNER_CHECK,\\n        // V0.002\\n        SET_BOUNCER_OWNER_CHECK,\\n        SET_LIMIT_MINTING_OWNER_CHECK,\\n        SET_LIMIT_BORROWING_OWNER_CHECK,\\n        SET_MIN_BORROW_AMOUNT_USD_OWNER_CHECK,\\n        SUPPORT_NEW_MARKET_OWNER_CHECK,\\n        SUPPORT_NEW_MARKET_COMBINATION_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED,\\n\\n        // OLA_ADDITIONS : All Enums from here\\n        BAD_SYSTEM_PARAMS\\n    }\\n\\n    /*\\n     * Notice: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\\n\\n        // OLA_ADDITIONS : All Enums from here\\n        REDUCE_RESERVES_OLA_PART_CALCULATION_FAILED\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ola/Core/Math/Exponential.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @dev Legacy contract for compatibility reasons with existing contracts that still use MathError\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath, ExponentialNoError {\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/OlaPlatform/InterestRateModels/InterestRateModel.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/Interfaces/EIP20NonStandardInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/Math/CarefulMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ola/Core/Math/ExponentialNoError.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful Math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Peripheral/ComptrollerPeripherals/RainMaker/SingleAssetRainMaker.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"./RainMakerStorage.sol\\\";\\nimport \\\"./RainMakerInterface.sol\\\";\\nimport \\\"../../../Core/Math/ExponentialNoError.sol\\\";\\nimport \\\"../IComptrollerPeripheral.sol\\\";\\nimport \\\"../../../Core/LendingNetwork/OTokens/CToken.sol\\\";\\n\\ninterface Erc20ForSingleAssetRainMaker {\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n}\\n\\ncontract SingleAssetRainMaker is SingleAssetRainMakerStorage, SingleAssetRainMakerInterface, ExponentialNoError, IComptrollerPeripheral {\\n    bytes32 constant public SingleAssetRainMakerContractHash = keccak256(\\\"SingleAssetRainMaker\\\");\\n\\n    /// @notice The initial COMP index for a market\\n    uint224 public constant compInitialIndex = 1e36;\\n\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(CToken cToken);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /// @notice Emitted when lnIncentiveTokenAddress is set by admin\\n    event LnIncentiveTokenUpdated(address lnIncentiveToken, uint blockNumber);\\n\\n    /// @notice Emitted when a new COMP speed is calculated for a market\\n    event CompSpeedUpdated(CToken indexed cToken, uint newSpeed);\\n\\n    /// @notice Emitted when COMP is distributed to a supplier\\n    event DistributedSupplierComp(CToken indexed cToken, address indexed supplier, uint compDelta, uint compSupplyIndex);\\n\\n    /// @notice Emitted when COMP is distributed to a borrower\\n    event DistributedBorrowerComp(CToken indexed cToken, address indexed borrower, uint compDelta, uint compBorrowIndex);\\n\\n    /*** Constructor ***/\\n    constructor(address _comptroller, address _admin) public {\\n        admin = _admin;\\n        comptroller = ComptrollerInterface(_comptroller);\\n        contractNameHash = SingleAssetRainMakerContractHash;\\n\\n        // Ensure supported markets are synced with the Comptroller\\n        CToken[] memory markets = comptroller.getAllMarkets();\\n        uint marketsCount = markets.length;\\n        for (uint i = 0; i < marketsCount; i++) {\\n            CToken market = markets[i];\\n            _supportMarketInternal(address(market));\\n        }\\n    }\\n\\n    /**\\n     * @notice Return the address of the COMP token\\n     * @return The address of COMP\\n     */\\n    function getLnIncentiveTokenAddress() public view returns (address) {\\n        return lnIncentiveTokenAddress;\\n    }\\n\\n    /*** Comp claiming ***/\\n\\n    /**\\n     * @notice Claim all the comp accrued by holder in all markets\\n     * @param holder The address to claim COMP for\\n     */\\n    function claimComp(address holder) public {\\n        return claimComp(holder, allMarkets);\\n    }\\n\\n    /**\\n     * @notice Claim all the comp accrued by holder in the specified markets\\n     * @param holder The address to claim COMP for\\n     * @param cTokens The list of markets to claim COMP in\\n     */\\n    function claimComp(address holder, CToken[] memory cTokens) public {\\n        address[] memory holders = new address[](1);\\n        holders[0] = holder;\\n        claimComp(holders, cTokens, true, true);\\n    }\\n\\n    /**\\n     * @notice Claim all comp accrued by the holders\\n     * @param holders The addresses to claim COMP for\\n     * @param cTokens The list of markets to claim COMP in\\n     * @param borrowers Whether or not to claim COMP earned by borrowing\\n     * @param suppliers Whether or not to claim COMP earned by supplying\\n     */\\n    function claimComp(address[] memory holders, CToken[] memory cTokens, bool borrowers, bool suppliers) public {\\n        for (uint i = 0; i < cTokens.length; i++) {\\n            CToken cToken = cTokens[i];\\n            require(isListed[address(cToken)], \\\"market must be listed\\\");\\n            if (borrowers == true) {\\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\n                updateCompBorrowIndexInternal(address(cToken), borrowIndex);\\n                for (uint j = 0; j < holders.length; j++) {\\n                    distributeBorrowerCompInternal(address(cToken), holders[j], borrowIndex);\\n                    compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);\\n                }\\n            }\\n            if (suppliers == true) {\\n                updateCompSupplyIndexInternal(address(cToken));\\n                for (uint j = 0; j < holders.length; j++) {\\n                    distributeSupplierCompInternal(address(cToken), holders[j]);\\n                    compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);\\n                }\\n            }\\n        }\\n    }\\n\\n    /*** Comp Distribution ***/\\n    function updateCompSupplyIndex(address cToken) external {\\n        require(isComptroller(), \\\"Not comptroller\\\");\\n        updateCompSupplyIndexInternal(cToken);\\n    }\\n\\n    function updateCompBorrowIndex(address cToken, uint marketBorrowIndex_) external {\\n        require(isComptroller(), \\\"Not comptroller\\\");\\n        Exp memory marketBorrowIndex = Exp({mantissa: marketBorrowIndex_});\\n        updateCompBorrowIndexInternal(cToken, marketBorrowIndex);\\n    }\\n\\n    function distributeSupplierComp(address cToken, address supplier) external {\\n        require(isComptroller(), \\\"Not comptroller\\\");\\n        distributeSupplierCompInternal(cToken, supplier);\\n    }\\n\\n    function distributeBorrowerComp(address cToken, address borrower, uint marketBorrowIndex_) external {\\n        require(isComptroller(), \\\"Not comptroller\\\");\\n        Exp memory marketBorrowIndex = Exp({mantissa: marketBorrowIndex_});\\n        distributeBorrowerCompInternal(cToken, borrower, marketBorrowIndex);\\n    }\\n\\n    /*** Comp Distribution internal ***/\\n    /**\\n     * @notice Accrue COMP to the market by updating the supply index\\n     * @param cToken The market whose supply index to update\\n     */\\n    function updateCompSupplyIndexInternal(address cToken) internal {\\n        if (isRetired) {\\n            return;\\n        }\\n\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        uint supplySpeed = compSpeeds[cToken];\\n        uint blockNumber = getBlockNumber();\\n        uint deltaBlocks = sub_(blockNumber, uint(supplyState.block));\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\n            uint supplyTokens = CToken(cToken).totalSupply();\\n            uint compAccrued = mul_(deltaBlocks, supplySpeed);\\n            Double memory ratio = supplyTokens > 0 ? fraction(compAccrued, supplyTokens) : Double({mantissa: 0});\\n            Double memory index = add_(Double({mantissa: supplyState.index}), ratio);\\n            compSupplyState[cToken] = CompMarketState({\\n            index: safe224(index.mantissa, \\\"new index exceeds 224 bits\\\"),\\n            block: safe32(blockNumber, \\\"block number exceeds 32 bits\\\")\\n            });\\n        } else if (deltaBlocks > 0) {\\n            supplyState.block = safe32(blockNumber, \\\"block number exceeds 32 bits\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue COMP to the market by updating the borrow index\\n     * @param cToken The market whose borrow index to update\\n     */\\n    function updateCompBorrowIndexInternal(address cToken, Exp memory marketBorrowIndex) internal {\\n        if (isRetired) {\\n            return;\\n        }\\n\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n        uint borrowSpeed = compSpeeds[cToken];\\n        uint blockNumber = getBlockNumber();\\n        uint deltaBlocks = sub_(blockNumber, uint(borrowState.block));\\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\\n            uint borrowAmount = div_(CToken(cToken).totalBorrows(), marketBorrowIndex);\\n            uint compAccrued = mul_(deltaBlocks, borrowSpeed);\\n            Double memory ratio = borrowAmount > 0 ? fraction(compAccrued, borrowAmount) : Double({mantissa: 0});\\n            Double memory index = add_(Double({mantissa: borrowState.index}), ratio);\\n            compBorrowState[cToken] = CompMarketState({\\n            index: safe224(index.mantissa, \\\"new index exceeds 224 bits\\\"),\\n            block: safe32(blockNumber, \\\"block number exceeds 32 bits\\\")\\n            });\\n        } else if (deltaBlocks > 0) {\\n            borrowState.block = safe32(blockNumber, \\\"block number exceeds 32 bits\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\\n     * @param cToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute COMP to\\n     */\\n    function distributeSupplierCompInternal(address cToken, address supplier) internal {\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        Double memory supplyIndex = Double({mantissa: supplyState.index});\\n        Double memory supplierIndex = Double({mantissa: compSupplierIndex[cToken][supplier]});\\n        compSupplierIndex[cToken][supplier] = supplyIndex.mantissa;\\n\\n        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\\n            supplierIndex.mantissa = compInitialIndex;\\n        }\\n\\n        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\\n        uint supplierTokens = CToken(cToken).balanceOf(supplier);\\n        uint supplierDelta = mul_(supplierTokens, deltaIndex);\\n        uint supplierAccrued = add_(compAccrued[supplier], supplierDelta);\\n        compAccrued[supplier] = supplierAccrued;\\n        emit DistributedSupplierComp(CToken(cToken), supplier, supplierDelta, supplyIndex.mantissa);\\n    }\\n\\n    /**\\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param cToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute COMP to\\n     */\\n    function distributeBorrowerCompInternal(address cToken, address borrower, Exp memory marketBorrowIndex) internal {\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n        Double memory borrowIndex = Double({mantissa: borrowState.index});\\n        Double memory borrowerIndex = Double({mantissa: compBorrowerIndex[cToken][borrower]});\\n        compBorrowerIndex[cToken][borrower] = borrowIndex.mantissa;\\n\\n        if (borrowerIndex.mantissa > 0) {\\n            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\\n            uint borrowerAmount = div_(CToken(cToken).borrowBalanceStored(borrower), marketBorrowIndex);\\n            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n            uint borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\\n            compAccrued[borrower] = borrowerAccrued;\\n            emit DistributedBorrowerComp(CToken(cToken), borrower, borrowerDelta, borrowIndex.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS : Changes from 'Comp' to the generic ERC20.\\n     * @notice Transfer COMP to the user\\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\n     * @param user The address of the user to transfer COMP to\\n     * @param amount The amount of COMP to (possibly) transfer\\n     * @return The amount of COMP which was NOT transferred to the user\\n     */\\n    function grantCompInternal(address user, uint amount) internal returns (uint) {\\n        Erc20ForSingleAssetRainMaker lnToken = Erc20ForSingleAssetRainMaker(getLnIncentiveTokenAddress());\\n        uint lnTokenRemaining = lnToken.balanceOf(address(this));\\n        if (amount > 0 && amount <= lnTokenRemaining) {\\n            lnToken.transfer(user, amount);\\n            return 0;\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Set COMP speed for a single market\\n     * @param cToken The market whose COMP speed to update\\n     * @param compSpeed New COMP speed for market\\n     */\\n    function setCompSpeedInternal(CToken cToken, uint compSpeed) internal {\\n        uint currentCompSpeed = compSpeeds[address(cToken)];\\n        if (currentCompSpeed != 0) {\\n            // note that COMP speed could be set to 0 to halt liquidity rewards for a market\\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\n            updateCompSupplyIndexInternal(address(cToken));\\n            updateCompBorrowIndexInternal(address(cToken), borrowIndex);\\n        } else if (compSpeed != 0) {\\n            // Add the COMP market\\n            require(isListed[address(cToken)] == true, \\\"comp market is not listed\\\");\\n\\n            if (compSupplyState[address(cToken)].index == 0 && compSupplyState[address(cToken)].block == 0) {\\n                compSupplyState[address(cToken)] = CompMarketState({\\n                index: compInitialIndex,\\n                block: safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\")\\n                });\\n            }\\n\\n            if (compBorrowState[address(cToken)].index == 0 && compBorrowState[address(cToken)].block == 0) {\\n                compBorrowState[address(cToken)] = CompMarketState({\\n                index: compInitialIndex,\\n                block: safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\")\\n                });\\n            }\\n        }\\n\\n        if (currentCompSpeed != compSpeed) {\\n            compSpeeds[address(cToken)] = compSpeed;\\n            emit CompSpeedUpdated(cToken, compSpeed);\\n        }\\n    }\\n\\n    /*** Comp Distribution Admin ***/\\n\\n    /**\\n     * @notice Set COMP speeds for a multiple markets\\n     * @param _cTokens The markets whose COMP speeds to update\\n     * @param _compSpeeds New COMP speed per market\\n     */\\n    function _setCompSpeeds(CToken[] calldata _cTokens, uint[] calldata _compSpeeds) external {\\n        require(_cTokens.length == _compSpeeds.length, \\\"markets and speeds should be 1:1\\\");\\n        require(isAdmin(), \\\"only admin can set comp speed\\\");\\n\\n        for (uint i = 0; i < _cTokens.length; i++) {\\n            setCompSpeedInternal(_cTokens[i], _compSpeeds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set COMP speed for a single market\\n     * @param cToken The market whose COMP speed to update\\n     * @param compSpeed New COMP speed for market\\n     */\\n    function _setCompSpeed(CToken cToken, uint compSpeed) public {\\n        require(isAdmin(), \\\"only admin can set comp speed\\\");\\n        setCompSpeedInternal(cToken, compSpeed);\\n    }\\n\\n    /*** Comptroller Functions ***/\\n    function _supportMarket(address cToken) external  {\\n        require(isComptroller(), \\\"Not comptroller\\\");\\n        require(!isListed[cToken], \\\"Already listed\\\");\\n\\n        _supportMarketInternal(address(cToken));\\n    }\\n\\n    function _supportMarketInternal(address cToken) internal {\\n        CToken(cToken).isCToken(); // Sanity check to make sure its really a CToken\\n        allMarkets.push(CToken(cToken));\\n        isListed[cToken] = true;\\n        emit MarketListed(CToken(cToken));\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n\\n    /**\\n     * @notice Periphery hook. Does nothing at the moment.\\n     */\\n    function connect(bytes calldata params) external {\\n        // Shh -- currently unused\\n        params;\\n    }\\n\\n    /**\\n     * @notice Periphery hook. Syncs for the last time for all supported markets and prevents this RainMaker from updating any more.\\n     */\\n    function retire(bytes calldata params) external {\\n        // Shh -- currently unused\\n        params;\\n\\n        retireInternal();\\n    }\\n\\n    /**\\n     * Legacy function\\n     */\\n    function retireRainMaker() external {\\n        retireInternal();\\n    }\\n\\n    function retireInternal() internal {\\n        require(isComptroller(), \\\"Not comptroller\\\");\\n\\n        for (uint i = 0; i < allMarkets.length; i ++) {\\n            CToken cToken = allMarkets[i];\\n\\n            // Extra sanity\\n            if (isListed[address(cToken)]) {\\n                // Update supply incentive  index\\n                updateCompSupplyIndexInternal(address(cToken));\\n\\n                // Update borrow incentive index\\n                uint borrowIndex = cToken.borrowIndex();\\n                Exp memory marketBorrowIndex = Exp({mantissa: borrowIndex});\\n                updateCompBorrowIndexInternal(address(cToken), marketBorrowIndex);\\n            }\\n        }\\n\\n        // This basically locks the supply and borrow indexes to their current values\\n        // and by thus, stops the accumulating.\\n        isRetired = true;\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\n        // Check caller = admin\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return 0;\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() public returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\\n        require(msg.sender == pendingAdmin && msg.sender != address(0), \\\"Not the EXISTING pending admin\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Set lnTokenAddress.\\n     * @param incentiveTokenAddress The ERC20 compatible token to be used for incentivizing the system.\\n     */\\n    function _setLnIncentiveToken(address incentiveTokenAddress) public {\\n        require(isAdmin(), \\\"only admin can set comp speed\\\");\\n        require(incentiveTokenAddress != address(0), \\\"LN incentive token must have a proper address\\\");\\n        require(getLnIncentiveTokenAddress() == address(0), \\\"Cannot change the LN incentive token once it is set\\\");\\n\\n        lnIncentiveTokenAddress = incentiveTokenAddress;\\n        emit LnIncentiveTokenUpdated(lnIncentiveTokenAddress, block.number);\\n    }\\n\\n    /**\\n     * @notice Checks caller is Comptroller\\n     */\\n    function isComptroller() internal view returns (bool) {\\n        return msg.sender == address(comptroller);\\n    }\\n\\n    /**\\n     * @notice Checks caller is admin\\n     */\\n    function isAdmin() internal view returns (bool) {\\n        return msg.sender == admin;\\n    }\\n\\n    /*** Utils ***/\\n\\n    function getBlockNumber() public view returns (uint)\\n    {\\n        return block.number;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ola/Peripheral/ComptrollerPeripherals/RainMaker/RainMakerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.5.16;\\n\\nimport \\\"../../../Core/LendingNetwork/Comptroller/ComptrollerInterface.sol\\\";\\n\\ncontract RainMakerAdminStorage {\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Comptroller for this contract\\n    */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n}\\n\\ncontract SingleAssetRainMakerStorage is RainMakerAdminStorage {\\n    /**\\n    * @notice If true - stops updating supply and borrow indexes\\n    */\\n    bool public isRetired;\\n\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /// @notice OToken => is market listed by Comptroller\\n    mapping(address => bool) public isListed;\\n\\n    /// @notice The amount of incentive tokens each side (supply and borrow) receives per block.\\n    mapping(address => uint) public compSpeeds;\\n\\n    /// @notice The COMP market supply state for each market\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP market borrow state for each market\\n    mapping(address => CompMarketState) public compBorrowState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compSupplierIndex;\\n\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compBorrowerIndex;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    mapping(address => uint) public compAccrued;\\n\\n    /// @notice The address of the erc20 token used by the network for participation incentive.\\n    address public lnIncentiveTokenAddress;\\n}\\n\\ncontract SingleAssetDynamicRainMakerStorage is RainMakerAdminStorage {\\n    /**\\n    * @notice If true - stops updating supply and borrow indexes\\n    */\\n    bool public isRetired;\\n\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /// @notice OToken => is market listed by Comptroller\\n    mapping(address => bool) public isListed;\\n\\n    /// @notice The amount of incentive tokens the whole supply side receives per block.\\n    mapping(address => uint) public compSupplySpeeds;\\n\\n    /// @notice The amount of incentive tokens the whole borrow side receives per block.\\n    mapping(address => uint) public compBorrowSpeeds;\\n\\n    /// @notice The COMP market supply state for each market\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP market borrow state for each market\\n    mapping(address => CompMarketState) public compBorrowState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compSupplierIndex;\\n\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compBorrowerIndex;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    mapping(address => uint) public compAccrued;\\n\\n    /// @notice The address of the erc20 token used by the network for participation incentive.\\n    address public lnIncentiveTokenAddress;\\n\\n    /// @notice (market => base unit) The base unit (1 of) for this market underlying\\n    mapping(address => uint) public baseUnits;\\n}\"\r\n    },\r\n    \"contracts/Ola/Peripheral/ComptrollerPeripherals/RainMaker/RainMakerInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../../Core/LendingNetwork/OTokens/CToken.sol\\\";\\n\\ncontract RainMakerInterface {\\n    bool public isRainMaker = true;\\n    bytes32 public contractNameHash;\\n\\n    /*** Market support ***/\\n    function _supportMarket(address cToken) external;\\n\\n    /*** Comp Distribution ***/\\n    function updateCompSupplyIndex(address cToken) external;\\n    function updateCompBorrowIndex(address cToken, uint marketBorrowIndex_) external;\\n    function distributeSupplierComp(address cToken, address supplier) external;\\n    function distributeBorrowerComp(address cToken, address borrower, uint marketBorrowIndex_) external;\\n}\\n\\ncontract SingleAssetRainMakerInterface is RainMakerInterface {\\n    /*** Comp claiming ***/\\n    function claimComp(address holder) external;\\n    function claimComp(address holder, CToken[] calldata cTokens) external;\\n    function claimComp(address[] calldata holders, CToken[] calldata cTokens, bool borrowers, bool suppliers) external;\\n}\"\r\n    },\r\n    \"contracts/Ola/Peripheral/ComptrollerPeripherals/IComptrollerPeripheral.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\ninterface IComptrollerPeripheral {\\n    /**\\n     * Called when the contract is connected to the comptroller\\n     */\\n    function connect(bytes calldata params) external;\\n\\n    /**\\n     * Called when the contract is disconnected from the comptroller\\n     */\\n    function retire(bytes calldata params) external;\\n}\"\r\n    },\r\n    \"contracts/Ola/Peripheral/ComptrollerPeripherals/RainMaker/SingleAssetDynamicRainMaker.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"./RainMakerStorage.sol\\\";\\nimport \\\"./RainMakerInterface.sol\\\";\\nimport \\\"../../../Core/Math/ExponentialNoError.sol\\\";\\nimport \\\"../IComptrollerPeripheral.sol\\\";\\nimport \\\"../../../Core/LendingNetwork/OTokens/CToken.sol\\\";\\n\\ninterface IMinistryForSingleAssetDynamicRainMaker {\\n    function isAssetSupported(address asset) external view returns (bool);\\n}\\n\\ncontract SingleAssetDynamicRainMaker is SingleAssetDynamicRainMakerStorage, SingleAssetRainMakerInterface, ExponentialNoError, IComptrollerPeripheral {\\n    bytes32 constant public SingleAssetDynamicRainMakerContractHash = keccak256(\\\"SingleAssetDynamicRainMaker\\\");\\n\\n    /// @notice The initial COMP index for a market\\n    uint224 public constant compInitialIndex = 1e36;\\n\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(CToken cToken);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /// @notice Emitted when lnIncentiveTokenAddress is set by admin\\n    event LnIncentiveTokenUpdated(address lnIncentiveToken, uint blockNumber);\\n\\n    /// @notice Emitted when a new COMP supply speed is calculated for a market\\n    event CompSupplySpeedUpdated(CToken indexed cToken, uint newSpeed);\\n\\n    /// @notice Emitted when a new COMP borrow speed is calculated for a market\\n    event CompBorrowSpeedUpdated(CToken indexed cToken, uint newSpeed);\\n\\n    /// @notice Emitted when COMP is distributed to a supplier\\n    event DistributedSupplierComp(CToken indexed cToken, address indexed supplier, uint compDelta, uint compSupplyIndex);\\n\\n    /// @notice Emitted when COMP is distributed to a borrower\\n    event DistributedBorrowerComp(CToken indexed cToken, address indexed borrower, uint compDelta, uint compBorrowIndex);\\n\\n    // V1.0\\n    uint public constant version = 100;\\n\\n    /*** Constructor ***/\\n    constructor(address _comptroller, address _admin) public {\\n        admin = _admin;\\n        comptroller = ComptrollerInterface(_comptroller);\\n        contractNameHash = SingleAssetDynamicRainMakerContractHash;\\n\\n        // Ensure supported markets are synced with the Comptroller\\n        CToken[] memory markets = comptroller.getAllMarkets();\\n        uint marketsCount = markets.length;\\n        for (uint i = 0; i < marketsCount; i++) {\\n            CToken market = markets[i];\\n            _supportMarketInternal(address(market));\\n        }\\n    }\\n\\n    /**\\n     * @notice Return the address of the COMP token\\n     * @return The address of COMP\\n     */\\n    function getLnIncentiveTokenAddress() public view returns (address) {\\n        return lnIncentiveTokenAddress;\\n    }\\n\\n    /*** Comp claiming ***/\\n\\n    /**\\n     * @notice Claim all the comp accrued by holder in all markets\\n     * @param holder The address to claim COMP for\\n     */\\n    function claimComp(address holder) public {\\n        return claimComp(holder, allMarkets);\\n    }\\n\\n    /**\\n     * @notice Claim all the comp accrued by holder in the specified markets\\n     * @param holder The address to claim COMP for\\n     * @param cTokens The list of markets to claim COMP in\\n     */\\n    function claimComp(address holder, CToken[] memory cTokens) public {\\n        address[] memory holders = new address[](1);\\n        holders[0] = holder;\\n        claimComp(holders, cTokens, true, true);\\n    }\\n\\n    /**\\n     * @notice Claim all comp accrued by the holders\\n     * @param holders The addresses to claim COMP for\\n     * @param cTokens The list of markets to claim COMP in\\n     * @param borrowers Whether or not to claim COMP earned by borrowing\\n     * @param suppliers Whether or not to claim COMP earned by supplying\\n     */\\n    function claimComp(address[] memory holders, CToken[] memory cTokens, bool borrowers, bool suppliers) public {\\n        for (uint i = 0; i < cTokens.length; i++) {\\n            CToken cToken = cTokens[i];\\n            require(isListed[address(cToken)], \\\"market must be listed\\\");\\n            if (borrowers == true) {\\n                Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\n                updateCompBorrowIndexInternal(address(cToken), borrowIndex);\\n                for (uint j = 0; j < holders.length; j++) {\\n                    distributeBorrowerCompInternal(address(cToken), holders[j], borrowIndex);\\n                }\\n            }\\n            if (suppliers == true) {\\n                updateCompSupplyIndexInternal(address(cToken));\\n                for (uint j = 0; j < holders.length; j++) {\\n                    distributeSupplierCompInternal(address(cToken), holders[j]);\\n                }\\n            }\\n        }\\n\\n        for (uint j = 0; j < holders.length; j++) {\\n            compAccrued[holders[j]] = grantCompInternal(holders[j], compAccrued[holders[j]]);\\n        }\\n    }\\n\\n    /*** Comp Distribution ***/\\n    function updateCompSupplyIndex(address cToken) external {\\n        require(isComptroller(), \\\"Not comptroller\\\");\\n        updateCompSupplyIndexInternal(cToken);\\n    }\\n\\n    function updateCompBorrowIndex(address cToken, uint marketBorrowIndex_) external {\\n        require(isComptroller(), \\\"Not comptroller\\\");\\n        Exp memory marketBorrowIndex = Exp({mantissa: marketBorrowIndex_});\\n        updateCompBorrowIndexInternal(cToken, marketBorrowIndex);\\n    }\\n\\n    function distributeSupplierComp(address cToken, address supplier) external {\\n        require(isComptroller(), \\\"Not comptroller\\\");\\n        distributeSupplierCompInternal(cToken, supplier);\\n    }\\n\\n    function distributeBorrowerComp(address cToken, address borrower, uint marketBorrowIndex_) external {\\n        require(isComptroller(), \\\"Not comptroller\\\");\\n        Exp memory marketBorrowIndex = Exp({mantissa: marketBorrowIndex_});\\n        distributeBorrowerCompInternal(cToken, borrower, marketBorrowIndex);\\n    }\\n\\n    /*** Comp Distribution internal ***/\\n\\n    /**\\n     * @notice Accrue COMP to the market by updating the supply index\\n     * @param cToken The market whose supply index to update\\n     * @dev Index is a cumulative sum of the COMP per cToken accrued.\\n     */\\n    function updateCompSupplyIndexInternal(address cToken) internal {\\n        if (isRetired) {\\n            return;\\n        }\\n\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        uint supplySpeed = compSupplySpeeds[cToken];\\n        uint32 blockNumber = safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\");\\n        uint deltaBlocks = sub_(uint(blockNumber), uint(supplyState.block));\\n        if (deltaBlocks > 0 && supplySpeed > 0) {\\n            uint supplyTokens = CToken(cToken).totalSupply();\\n            uint supplyCompAccrued = mul_(deltaBlocks, supplySpeed);\\n            uint baseUnit = baseUnits[cToken];\\n            Double memory ratio = supplyTokens > baseUnit ? fraction(supplyCompAccrued, supplyTokens) : Double({mantissa: 0});\\n            supplyState.index = safe224(add_(Double({mantissa: supplyState.index}), ratio).mantissa, \\\"new index exceeds 224 bits\\\");\\n            supplyState.block = blockNumber;\\n        } else if (deltaBlocks > 0) {\\n            supplyState.block = blockNumber;\\n        }\\n    }\\n\\n    /**\\n     * @notice Accrue COMP to the market by updating the borrow index\\n     * @param cToken The market whose borrow index to update\\n     * @dev Index is a cumulative sum of the COMP per cToken accrued.\\n     */\\n    function updateCompBorrowIndexInternal(address cToken, Exp memory marketBorrowIndex) internal {\\n        if (isRetired) {\\n            return;\\n        }\\n\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n        uint borrowSpeed = compBorrowSpeeds[cToken];\\n        uint32 blockNumber = safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\");\\n        uint deltaBlocks = sub_(uint(blockNumber), uint(borrowState.block));\\n        if (deltaBlocks > 0 && borrowSpeed > 0) {\\n            uint borrowAmount = div_(CToken(cToken).totalBorrows(), marketBorrowIndex);\\n            uint borrowCompAccrued = mul_(deltaBlocks, borrowSpeed);\\n            uint baseUnit = baseUnits[cToken];\\n            Double memory ratio = borrowAmount > baseUnit ? fraction(borrowCompAccrued, borrowAmount) : Double({mantissa: 0});\\n            borrowState.index = safe224(add_(Double({mantissa: borrowState.index}), ratio).mantissa, \\\"new index exceeds 224 bits\\\");\\n            borrowState.block = blockNumber;\\n        } else if (deltaBlocks > 0) {\\n            borrowState.block = blockNumber;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate COMP accrued by a supplier and possibly transfer it to them\\n     * @param cToken The market in which the supplier is interacting\\n     * @param supplier The address of the supplier to distribute COMP to\\n     */\\n    function distributeSupplierCompInternal(address cToken, address supplier) internal {\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        uint supplyIndex = supplyState.index;\\n        uint supplierIndex = compSupplierIndex[cToken][supplier];\\n\\n        // Update supplier's index to the current index since we are distributing accrued COMP\\n        compSupplierIndex[cToken][supplier] = supplyIndex;\\n\\n        if (supplierIndex == 0 && supplyIndex >= compInitialIndex) {\\n            // Covers the case where users supplied tokens before the market's supply state index was set.\\n            // Rewards the user with COMP accrued from the start of when supplier rewards were first\\n            // set for the market.\\n            supplierIndex = isRetired ? supplyIndex : compInitialIndex;\\n        }\\n\\n        // Calculate change in the cumulative sum of the COMP per cToken accrued\\n        Double memory deltaIndex = Double({mantissa: sub_(supplyIndex, supplierIndex)});\\n\\n        uint supplierTokens = CToken(cToken).balanceOf(supplier);\\n\\n        // Calculate COMP accrued: cTokenAmount * accruedPerCToken\\n        uint supplierDelta = mul_(supplierTokens, deltaIndex);\\n\\n        uint supplierAccrued = add_(compAccrued[supplier], supplierDelta);\\n        compAccrued[supplier] = supplierAccrued;\\n\\n        emit DistributedSupplierComp(CToken(cToken), supplier, supplierDelta, supplyIndex);\\n    }\\n\\n    /**\\n     * @notice Calculate COMP accrued by a borrower and possibly transfer it to them\\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\\n     * @param cToken The market in which the borrower is interacting\\n     * @param borrower The address of the borrower to distribute COMP to\\n     */\\n    function distributeBorrowerCompInternal(address cToken, address borrower, Exp memory marketBorrowIndex) internal {\\n\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n        uint borrowIndex = borrowState.index;\\n        uint borrowerIndex = compBorrowerIndex[cToken][borrower];\\n\\n        // Update borrowers's index to the current index since we are distributing accrued COMP\\n        compBorrowerIndex[cToken][borrower] = borrowIndex;\\n\\n        if (borrowerIndex == 0 && borrowIndex >= compInitialIndex) {\\n            // Covers the case where users borrowed tokens before the market's borrow state index was set.\\n            // Rewards the user with COMP accrued from the start of when borrower rewards were first\\n            // set for the market.\\n\\n            borrowerIndex = isRetired ? borrowIndex : compInitialIndex;\\n        }\\n\\n        // Calculate change in the cumulative sum of the COMP per borrowed unit accrued\\n        Double memory deltaIndex = Double({mantissa: sub_(borrowIndex, borrowerIndex)});\\n\\n        uint borrowerAmount = div_(CToken(cToken).borrowBalanceStored(borrower), marketBorrowIndex);\\n\\n        // Calculate COMP accrued: cTokenAmount * accruedPerBorrowedUnit\\n        uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n\\n        uint borrowerAccrued = add_(compAccrued[borrower], borrowerDelta);\\n        compAccrued[borrower] = borrowerAccrued;\\n\\n        emit DistributedBorrowerComp(CToken(cToken), borrower, borrowerDelta, borrowIndex);\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS : Changes from 'Comp' to the generic ERC20.\\n     * @notice Transfer COMP to the user\\n     * @dev Note: If there is not enough COMP, we do not perform the transfer all.\\n     * @param user The address of the user to transfer COMP to\\n     * @param amount The amount of COMP to (possibly) transfer\\n     * @return The amount of COMP which was NOT transferred to the user\\n     */\\n    function grantCompInternal(address user, uint amount) internal returns (uint) {\\n        EIP20Interface lnToken = EIP20Interface(getLnIncentiveTokenAddress());\\n        uint lnTokenRemaining = lnToken.balanceOf(address(this));\\n        if (amount > 0 && amount <= lnTokenRemaining) {\\n            lnToken.transfer(user, amount);\\n            return 0;\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Set COMP supply speed for a single market\\n     * @param cToken The market whose COMP speed to update\\n     * @param compSupplySpeed New COMP supply speed for market\\n     */\\n    function setCompSupplySpeedInternal(CToken cToken, uint compSupplySpeed) internal {\\n        uint currentCompSupplySpeed = compSupplySpeeds[address(cToken)];\\n\\n        if (currentCompSupplySpeed != compSupplySpeed) {\\n            // Supply speed updated so let's update supply state to ensure that\\n            //  1. COMP accrued properly for the old speed, and\\n            //  2. COMP accrued at the new speed starts after this block.\\n            // note that COMP speed could be set to 0 to halt liquidity rewards for a market\\n            updateCompSupplyIndexInternal(address(cToken));\\n\\n            compSupplySpeeds[address(cToken)] = compSupplySpeed;\\n            emit CompSupplySpeedUpdated(cToken, compSupplySpeed);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set COMP speed for a single market\\n     * @param cToken The market whose COMP speed to update\\n\\n     * @param compBorrowSpeed New COMP borrow speed for market\\n     */\\n    function setCompBorrowSpeedInternal(CToken cToken, uint compBorrowSpeed) internal {\\n        uint currentCompBorrowSpeed = compBorrowSpeeds[address(cToken)];\\n\\n        if (currentCompBorrowSpeed != compBorrowSpeed) {\\n            // Borrow speed updated so let's update borrow state to ensure that\\n            //  1. COMP accrued properly for the old speed, and\\n            //  2. COMP accrued at the new speed starts after this block.\\n            // note that COMP speed could be set to 0 to halt liquidity rewards for a market\\n            Exp memory borrowIndex = Exp({mantissa: cToken.borrowIndex()});\\n            updateCompBorrowIndexInternal(address(cToken), borrowIndex);\\n\\n            compBorrowSpeeds[address(cToken)] = compBorrowSpeed;\\n            emit CompBorrowSpeedUpdated(cToken, compBorrowSpeed);\\n        }\\n    }\\n\\n    /*** Comp Distribution Admin ***/\\n\\n    /**\\n     * @notice Set COMP speeds for a multiple markets\\n     * @param _cTokens The markets whose COMP speeds to update\\n     * @param _compSupplySpeeds New COMP speed per market\\n     * @param _compBorrowSpeeds New COMP speed per market\\n     */\\n    function _setDynamicCompSpeeds(CToken[] calldata _cTokens, uint[] calldata _compSupplySpeeds, uint[] calldata _compBorrowSpeeds) external {\\n        require(_cTokens.length == _compSupplySpeeds.length, \\\"markets and supply speeds should be 1:1\\\");\\n        require(_cTokens.length == _compBorrowSpeeds.length, \\\"markets and borrow speeds should be 1:1\\\");\\n        require(isAdmin(), \\\"only admin can set comp speed\\\");\\n\\n        for (uint i = 0; i < _cTokens.length; i++) {\\n            CToken cToken = _cTokens[i];\\n            require(isListed[address(cToken)], \\\"market not listed\\\");\\n            setCompSupplySpeedInternal(cToken, _compSupplySpeeds[i]);\\n            setCompBorrowSpeedInternal(cToken, _compBorrowSpeeds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set COMP speed for a single market\\n     * @param cToken The market whose COMP speed to update\\n     * @param compSupplySpeed New COMP supply speed for market\\n     * @param compBorrowSpeed New COMP borrow speed for market\\n     */\\n    function _setDynamicCompSpeed(CToken cToken, uint compSupplySpeed, uint compBorrowSpeed) public {\\n        require(isAdmin(), \\\"only admin can set comp speed\\\");\\n        require(isListed[address(cToken)], \\\"market not listed\\\");\\n        setCompSupplySpeedInternal(cToken, compSupplySpeed);\\n        setCompBorrowSpeedInternal(cToken, compBorrowSpeed);\\n    }\\n\\n    /*** Comptroller Functions ***/\\n    function _supportMarket(address cToken) external  {\\n        require(isComptroller(), \\\"Not comptroller\\\");\\n        require(!isListed[cToken], \\\"Already listed\\\");\\n\\n        _supportMarketInternal(address(cToken));\\n    }\\n\\n    function _supportMarketInternal(address cToken) internal {\\n        CToken(cToken).isCToken(); // Sanity check to make sure its really a CToken\\n\\n        allMarkets.push(CToken(cToken));\\n        isListed[cToken] = true;\\n\\n        _initializeMarket(cToken);\\n\\n        emit MarketListed(CToken(cToken));\\n    }\\n\\n    /**\\n     * Should only be called once for market\\n     */\\n    function _initializeMarket(address cToken) internal {\\n        uint32 blockNumber = safe32(getBlockNumber(), \\\"block number exceeds 32 bits\\\");\\n\\n        address underlying = CToken(cToken).underlying();\\n        bool isForNativeCoin = underlying == CToken(cToken).nativeCoinUnderlying();\\n\\n        // Set the base unit\\n        uint8 decimals = isForNativeCoin ? 18 : EIP20Interface(underlying).decimals();\\n        uint baseUnit = 10 ** decimals;\\n        baseUnits[cToken] = baseUnit;\\n\\n        CompMarketState storage supplyState = compSupplyState[cToken];\\n        CompMarketState storage borrowState = compBorrowState[cToken];\\n\\n        /*\\n         * Update market state indices\\n         */\\n        if (supplyState.index == 0) {\\n            // Initialize supply state index with default value\\n            supplyState.index = compInitialIndex;\\n            // Update market state block numbers\\n            supplyState.block = blockNumber;\\n        }\\n\\n        if (borrowState.index == 0) {\\n            // Initialize borrow state index with default value\\n            borrowState.index = compInitialIndex;\\n            borrowState.block = blockNumber;\\n        }\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n\\n    /**\\n     * @notice Periphery hook. Does nothing at the moment.\\n     */\\n    function connect(bytes calldata params) external {\\n        // Shh -- currently unused\\n        params;\\n    }\\n\\n    /**\\n     * @notice Periphery hook. Syncs for the last time for all supported markets and prevents this RainMaker from updating any more.\\n     */\\n    function retire(bytes calldata params) external {\\n        // Shh -- currently unused\\n        params;\\n\\n        retireInternal();\\n    }\\n\\n    /**\\n     * Legacy function\\n     */\\n    function retireRainMaker() external {\\n        retireInternal();\\n    }\\n\\n    function retireInternal() internal {\\n        require(isComptroller(), \\\"Not comptroller\\\");\\n\\n        for (uint i = 0; i < allMarkets.length; i ++) {\\n            CToken cToken = allMarkets[i];\\n\\n            // Extra sanity\\n            if (isListed[address(cToken)]) {\\n                // Update supply incentive  index\\n                updateCompSupplyIndexInternal(address(cToken));\\n\\n                // Update borrow incentive index\\n                uint borrowIndex = cToken.borrowIndex();\\n                Exp memory marketBorrowIndex = Exp({mantissa: borrowIndex});\\n                updateCompBorrowIndexInternal(address(cToken), marketBorrowIndex);\\n            }\\n        }\\n\\n        // This basically locks the supply and borrow indexes to their current values\\n        // and by thus, stops the accumulating.\\n        isRetired = true;\\n    }\\n\\n    /**\\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (Timelock)\\n     * @param token The address of the ERC-20 token to sweep\\n     */\\n    function sweepToken(EIP20NonStandardInterface token) external {\\n        // Check caller = admin\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n\\n        EIP20NonStandardInterface rainToken = EIP20NonStandardInterface(lnIncentiveTokenAddress);\\n\\n        uint256 balance = EIP20NonStandardInterface(lnIncentiveTokenAddress).balanceOf(address(this));\\n        rainToken.transfer(admin, balance);\\n    }\\n\\n    /**\\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n     * @param newPendingAdmin New pending admin.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\n        // Check caller = admin\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return 0;\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() public returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\\n        require(msg.sender == pendingAdmin && msg.sender != address(0), \\\"Not the EXISTING pending admin\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Set lnTokenAddress.\\n     * @param incentiveTokenAddress The ERC20 compatible token to be used for incentivizing the system.\\n     */\\n    function _setLnIncentiveToken(address incentiveTokenAddress) public {\\n        require(isAdmin(), \\\"only admin can set comp speed\\\");\\n        require(incentiveTokenAddress != address(0), \\\"LN incentive token must have a proper address\\\");\\n        require(getLnIncentiveTokenAddress() == address(0), \\\"Cannot change the LN incentive token once it is set\\\");\\n\\n        require(IMinistryForSingleAssetDynamicRainMaker(comptroller.getRegistry()).isAssetSupported(incentiveTokenAddress), \\\"Token not supported\\\");\\n\\n        lnIncentiveTokenAddress = incentiveTokenAddress;\\n        emit LnIncentiveTokenUpdated(lnIncentiveTokenAddress, block.number);\\n    }\\n\\n    /**\\n     * @notice Checks caller is Comptroller\\n     */\\n    function isComptroller() internal view returns (bool) {\\n        return msg.sender == address(comptroller);\\n    }\\n\\n    /**\\n     * @notice Checks caller is admin\\n     */\\n    function isAdmin() internal view returns (bool) {\\n        return msg.sender == admin;\\n    }\\n\\n    /*** Compound Lens Compatibility ***/\\n\\n    /**\\n     * Keeping this to be somewhat compatible with the uniform rainmaker\\n     */\\n    function compSpeeds(address market) public view returns (uint) {\\n        return compSupplySpeeds[market];\\n    }\\n\\n    /*** Utils ***/\\n\\n    function getBlockNumber() public view returns (uint)\\n    {\\n        return block.number;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ola/Legacy/BorrowedAgainst.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../Core/LendingNetwork/PriceOracle/PriceOracle.sol\\\";\\nimport \\\"../Core/LendingNetwork/OTokens/CTokenInterfaces.sol\\\";\\nimport \\\"../Core/Math/Exponential.sol\\\";\\nimport \\\"./BorrowedAgainstInterface.sol\\\";\\n\\ncontract AdjustedComptrollerInterface {\\n    /// @notice The address (and interface) of the contract that checks the borrowedAgainst caps\\n    BorrowedAgainstInterface public borrowedAgainst;\\n\\n    function markets(address) external view returns (bool);\\n    function getAssetsIn(address) external view returns (CToken[] memory);\\n    function getAllMarkets() public view returns (CToken[] memory);\\n}\\n\\n\\n\\ncontract BorrowedAgainstErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        SANITY,\\n        MATH_ERROR,\\n        PRICE_ERROR,\\n        UNAUTHORIZED,\\n        CANT_GET_CTOKENCOLLATERAL\\n    }\\n\\n    enum FailureInfo {\\n        BORROWER_ASSETS_NOT_TWO,\\n        BORROWER_NOT_IN_CTOKEN,\\n        ACCRUAL_BLOCK_NUMBER_FROM_PAST,\\n        BORROW_BALANCE_TOO_SMALL,\\n        PRICE_RETURNED_ZERO,\\n        BORROW_ALLOWED_CALLER_CHECK,\\n        UPDATE_BORROWED_AGAINST_CALLER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SET_BORROWED_AGAINST_OWNER_CHECK,\\n        BORROW_BALANCE_CALCULATION_FAILED,\\n        ADD_BORROW_BALANCE_AND_AMOUNT_FAILED,\\n        SUB_BORROW_BALANCE_AND_AMOUNT_FAILED\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\n\\n\\ncontract BorrowedAgainst is Exponential, BorrowedAgainstErrorReporter {\\n\\n\\n    /*** Events ***/\\n\\n\\n    // TODO: add more events \\n    \\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n      * @notice Emitted when price oracle is changed\\n      */\\n    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\\n\\n    /**\\n      * @notice Emitted when a new usd cap is set for cTokenCollateral\\n      */\\n    event NewMaxAllowedBorrowedAgainst(address cTokenCollateral, uint oldUsdCap, uint newUsdCap);\\n\\n    \\n    /*** State ***/\\n\\n\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    AdjustedComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice mapping from cTokenCollateral to the max allowed usd value that can be borrowed against that type of collateral \\n     */\\n    mapping (address => uint) public maxAllowedBorrowedAgainst;\\n\\n    // TODO: fix bug. doesn't recognize struct Borrowsnapshot defined in CTokenInterfaces.sol, so needed to redfine here\\n    struct NewBorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice mapping from cTokenCollateral and cTokenBorrow to the current amount of tokens that are borrowed against that type of collateral     \\n        struct BorrowSnapshot {\\n            uint principal;\\n            uint interestIndex;\\n        }\\n     */\\n    mapping (address => mapping (address => NewBorrowSnapshot)) public borrowedAgainstMap;\\n\\n\\n    /*** Logic Functions ***/\\n\\n\\n    constructor() public {\\n        admin = msg.sender;\\n    }\\n\\n    // called from cTokenBorrow.borrow()\\n    function commitBorrowedAgainstBorrow(address borrower, uint borrowAmount) \\n    external \\n    // onlyCToken \\n    returns (uint)\\n    {\\n        address cTokenBorrow = msg.sender;\\n        bool isListed = comptroller.markets(cTokenBorrow);\\n        if (!isListed) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.UPDATE_BORROWED_AGAINST_CALLER_CHECK);\\n        }\\n\\n        address cTokenCollateral;\\n        uint err;\\n        (err, cTokenCollateral) = getCTokenCollateralInternal(borrower, cTokenBorrow);\\n        if (err != uint(Error.NO_ERROR)) {\\n            return err;\\n        }\\n        NewBorrowSnapshot storage borrowSnapshot = borrowedAgainstMap[cTokenCollateral][cTokenBorrow];\\n\\n        if (CToken(cTokenBorrow).accrualBlockNumber() < block.number) {\\n            return fail(Error.SANITY, FailureInfo.ACCRUAL_BLOCK_NUMBER_FROM_PAST);\\n        }\\n\\n        uint borrowBalance;\\n        MathError mErr;\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(cTokenCollateral, cTokenBorrow);\\n        if (mErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_BALANCE_CALCULATION_FAILED, uint(mErr));\\n        }\\n        if (borrowBalance < borrowSnapshot.principal) {\\n            return fail(Error.SANITY, FailureInfo.BORROW_BALANCE_TOO_SMALL);\\n        }\\n\\n        uint borrowAmountAfter;\\n        (mErr, borrowAmountAfter) = addUInt(borrowBalance, borrowAmount);\\n        if (mErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ADD_BORROW_BALANCE_AND_AMOUNT_FAILED, uint(mErr));\\n        }\\n\\n        // TODO: make sure this writes to storage \\n        borrowSnapshot.principal = borrowAmountAfter;\\n        borrowSnapshot.interestIndex = CToken(cTokenBorrow).borrowIndex();\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    // called from cTokenBorrow.repayBorrow()\\n    function commitBorrowedAgainstRepayBorrow(address borrower, uint repayBorrowAmount) \\n    external\\n    // onlyCToken \\n    returns (uint)\\n    {\\n        address cTokenBorrow = msg.sender;\\n        bool isListed = comptroller.markets(cTokenBorrow);\\n        if (!isListed) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.UPDATE_BORROWED_AGAINST_CALLER_CHECK);\\n        }\\n        \\n        address cTokenCollateral;\\n        uint err;\\n        (err, cTokenCollateral) = getCTokenCollateralInternal(borrower, cTokenBorrow);\\n        if (err != uint(Error.NO_ERROR)) {\\n            return err;\\n        }\\n        NewBorrowSnapshot storage borrowSnapshot = borrowedAgainstMap[cTokenCollateral][cTokenBorrow];\\n\\n        if (CToken(cTokenBorrow).accrualBlockNumber() < block.number) {\\n            return fail(Error.SANITY, FailureInfo.ACCRUAL_BLOCK_NUMBER_FROM_PAST);\\n        }\\n\\n        uint borrowBalance;\\n        MathError mErr;\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(cTokenCollateral, cTokenBorrow);\\n        if (mErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_BALANCE_CALCULATION_FAILED, uint(mErr));\\n        }\\n        if (borrowBalance < borrowSnapshot.principal) {\\n            return fail(Error.SANITY, FailureInfo.BORROW_BALANCE_TOO_SMALL);\\n        }\\n\\n        uint borrowAmountAfter;\\n        (mErr, borrowAmountAfter) = subUInt(borrowBalance, repayBorrowAmount);\\n        if (mErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.SUB_BORROW_BALANCE_AND_AMOUNT_FAILED, uint(mErr));\\n        }\\n\\n        // TODO: make sure this writes to storage  \\n        borrowSnapshot.principal = borrowAmountAfter;\\n        borrowSnapshot.interestIndex = CToken(cTokenBorrow).borrowIndex();\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    // called from Comptroller.borrowAllowed()\\n    function borrowAllowedBorrowedAgainst(address borrower, address cTokenBorrow, uint borrowAmountUsd)\\n    external\\n    // onlyComptroller\\n    returns (uint, bool)\\n    {\\n        if (msg.sender != address(comptroller)) {\\n            return (fail(Error.UNAUTHORIZED, FailureInfo.BORROW_ALLOWED_CALLER_CHECK), false);\\n        }\\n\\n        address cTokenCollateral;\\n        uint err;\\n        (err, cTokenCollateral) = getCTokenCollateralInternal(borrower, cTokenBorrow);\\n        if (err != uint(Error.NO_ERROR)) {\\n            return (err, false);\\n        }\\n\\n        if (maxAllowedBorrowedAgainst[cTokenCollateral] == 0) {\\n            return (uint(Error.NO_ERROR), true);\\n        }\\n\\n        // get all cTokens\\n        CToken[] memory cTokenBorrows = comptroller.getAllMarkets();\\n\\n        uint sumBorrowBalanceUsd;\\n        for (uint i = 0; i < cTokenBorrows.length; i++) {\\n            CToken cTokenBorrow = cTokenBorrows[i];\\n\\n            // get the normalized price of the asset\\n            uint oraclePriceMantissa = oracle.getUnderlyingPrice(cTokenBorrow);\\n            if (oraclePriceMantissa == 0) {\\n                return (fail(Error.PRICE_ERROR, FailureInfo.PRICE_RETURNED_ZERO), false);\\n            }\\n            Exp memory oraclePrice = Exp({mantissa: oraclePriceMantissa});\\n\\n            // note: we're using a borrowIndex from the past.. if we want absolute accuracy we need to accrue interest first in cTokenBorrow\\n            (MathError mErr, uint borrowBalance) = borrowBalanceStoredInternal(cTokenCollateral, address(cTokenBorrow));\\n            if (mErr != MathError.NO_ERROR) {\\n                return (failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_BALANCE_CALCULATION_FAILED, uint(mErr)), false);\\n            }\\n            \\n            sumBorrowBalanceUsd = mul_ScalarTruncateAddUInt(oraclePrice, borrowBalance, sumBorrowBalanceUsd);\\n        }\\n        (MathError mErr, uint borrowBalanceTotalUsd) = addUInt(sumBorrowBalanceUsd, borrowAmountUsd);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_BALANCE_CALCULATION_FAILED, uint(mErr)), false);\\n        }\\n \\n        if (borrowBalanceTotalUsd > maxAllowedBorrowedAgainst[cTokenCollateral]) {\\n            return (uint(Error.NO_ERROR), false);\\n        }\\n\\n        return (uint(Error.NO_ERROR), true);\\n    }\\n\\n    function getCTokenCollateralInternal(address borrower, address cTokenBorrow) \\n    internal \\n    returns (uint, address)\\n    {\\n        CToken[] memory assets = comptroller.getAssetsIn(borrower);\\n        if (assets.length != 2) {\\n            return (fail(Error.CANT_GET_CTOKENCOLLATERAL, FailureInfo.BORROWER_ASSETS_NOT_TWO), address(0));\\n        }\\n\\n        if (address(assets[0]) != cTokenBorrow) {\\n            if (address(assets[1]) == cTokenBorrow) {\\n                return (uint(Error.NO_ERROR), address(assets[0]));\\n            }\\n            // error: borrowerNotInCTokenBorrow\\n            return (fail(Error.CANT_GET_CTOKENCOLLATERAL, FailureInfo.BORROWER_NOT_IN_CTOKEN), address(0));\\n        }\\n\\n        if (address(assets[1]) != cTokenBorrow) {\\n            return (uint(Error.NO_ERROR), address(assets[1]));\\n        }\\n\\n        // note: cTokenCollateral == cTokenBorrow\\n        return (uint(Error.NO_ERROR), cTokenBorrow);\\n    }\\n\\n    // /**\\n    //  * @dev passes only if invoked by a listed cToken.\\n    //  */\\n    // modifier onlyCToken() \\n    // {\\n    //     // is this syntax ok? markets() returns a tuple \\n    //     (bool isListed, ) = Comptroller.markets(msg.sender);\\n    //     require(isListed, \\\"invoker must be listed as a mraket\\\");\\n    //     _;\\n    // }\\n\\n    // /**\\n    //  * @dev passes only if invoked by the Comptroller.\\n    //  */\\n    // modifier onlyComptroller() \\n    // {\\n    //     require(msg.sender == address(Comptroller), \\\"invoker must be the Comptroller\\\");\\n    //     _;\\n    // }\\n\\n\\n    // from CToken.sol\\n    /**\\n     * @notice Return the total balance borrowed from cTokenBorrow whose collateral is cTokenCollateral \\n     * @param cTokenCollateral cTokenCollateral\\n     * @param cTokenBorrow cTokenBorrow\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address cTokenCollateral, address cTokenBorrow) \\n    internal\\n    view \\n    returns (MathError, uint) \\n    {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        NewBorrowSnapshot storage borrowSnapshot = borrowedAgainstMap[cTokenCollateral][cTokenBorrow];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, CToken(cTokenBorrow).borrowIndex());\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address newPendingAdmin) \\n    public \\n    returns (uint) \\n    {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() \\n    public \\n    returns (uint) \\n    {\\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets a new price oracle for the Comptroller\\n      * @dev Admin function to set a new price oracle\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPriceOracle(PriceOracle newOracle) \\n    public \\n    returns (uint) \\n    {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\\n        }\\n\\n        // Track the old oracle for the Comptroller\\n        PriceOracle oldOracle = oracle;\\n\\n        // Set Comptroller's oracle to newOracle\\n        oracle = newOracle;\\n\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\n        emit NewPriceOracle(oldOracle, newOracle);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets a new price oracle for the Comptroller\\n      * @dev Admin function to set a new price oracle\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setMaxAllowedBorrowedAgainst(address cTokenCollateral, uint newUsdCap) \\n    public \\n    returns (uint) \\n    {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_BORROWED_AGAINST_OWNER_CHECK);\\n        }\\n\\n        // Track the old max for cTokenCollateral\\n        uint oldUsdCap = maxAllowedBorrowedAgainst[cTokenCollateral];\\n\\n        // Set max for cTokenCollateral to newUsdCap\\n        maxAllowedBorrowedAgainst[cTokenCollateral] = newUsdCap;\\n\\n        // Emit NewPriceOracle(oldOracle, newOracle)\\n        emit NewMaxAllowedBorrowedAgainst(cTokenCollateral, oldUsdCap, newUsdCap);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/Ola/Legacy/BorrowedAgainstInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\ncontract BorrowedAgainstInterface {\\n    function commitBorrowedAgainstBorrow(address borrower, uint borrowAmount) external returns (uint);\\n    function commitBorrowedAgainstRepayBorrow(address borrower, uint repayBorrowAmount) external returns (uint);\\n    function borrowAllowedBorrowedAgainst(address borrower, address cTokenBorrow, uint borrowAmountUsd) external returns (uint, bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/OTokens/CLPStake.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"../ErrorReporter/ErrorReporter.sol\\\";\\nimport \\\"../../Math/Exponential.sol\\\";\\nimport \\\"../../Interfaces/EIP20Interface.sol\\\";\\nimport \\\"../../OlaPlatform/InterestRateModels/InterestRateModel.sol\\\";\\nimport \\\"./CToken.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CLPSTake is CTokenStorage, CLPStakingStorageV0_05, CTokenInterface, CTokenViewInterface, CLPStakingInterfaceV0_05, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        // TODO : DES : Remove IRM\\n                        InterestRateModel interestRateModel_,\\n                        // TODO : DES : Add params for farm contract,\\n                        // TODO : DES : Add params for farm PID,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // TODO : DES : Change to be always 1 (better UX)\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the Comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on Comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        accrualBlockTimestamp = getBlockTimestamp();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the calculation based flag from the ministry\\n        RegistryForOToken ministry = RegistryForOToken(comptroller.getRegistry());\\n        blocksBased = ministry.blocksBased();\\n\\n        // TODO : DES : Initialzie marketStakingIndex with something link 'stakingInitialIndex'\\n        // TODO : DES : Add setters for new fields + ministry verifications (farm, reward etc...)\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        // TODO : DES : Remove IRM\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    // TODO : DES : Remove Function\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        // unused function\\n         comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        // TODO : DES : Revert\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\n        // TODO : DES : Revert\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        // TODO : DES : Revert\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by Comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        uint cTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block timestamp\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockTimestamp() internal view returns (uint) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        // TODO : DES : Return 0\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        // TODO : DES : Return 0 or manage to calculate the interest on-demand (from the farming contract)\\n        //              Add abstract function\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        // TODO : DES : Return 0\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        // TODO : DES : Return initialExchangeRateMantissa\\n\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Get the accrual block number of this cToken\\n     * @return The accrual block number\\n     */\\n    function getAccrualBlockNumber() external view returns (uint) {\\n        return accrualBlockNumber;\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n        uint currentBlockTimestamp = getBlockTimestamp();\\n        uint currentMarketStakingIndex = marketStakingIndex;\\n        MathError mathErr;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        uint deltaBlocks = sub_(currentBlockNumber, accrualBlockNumberPrior);\\n\\n\\n        uint rewardsReceived = doClaimFromFarm();\\n\\n        uint marketStakingIndexNew = currentMarketStakingIndex;\\n        if (rewardsReceived > 0) {\\n            uint supplyTokens = totalSupply;\\n            Double memory ratio = supplyTokens > 0 ? fraction(rewardsReceived, supplyTokens) : Double({mantissa: 0});\\n            marketStakingIndexNew = uint(add_(Double({ mantissa: currentMarketStakingIndex}), ratio).mantissa);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint reservesPrior = totalReserves;\\n        uint totalReservesNew;\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), rewardsReceived, reservesPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        accrualBlockTimestamp = currentBlockTimestamp;\\n        totalReserves = totalReservesNew;\\n        marketStakingIndex = marketStakingIndexNew;\\n\\n        /* We emit an AccrueRewardsInterest event */\\n        emit AccrueRewardsInterest(currentMarketStakingIndex, marketStakingIndex, reservesPrior, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n    * @notice Calculate Rewards accrued by a supplier.\\n    * @param supplier The address of the supplier to distribute Rewards to\\n    */\\n    function distributeSupplierRewardsInternal(address supplier) internal {\\n        uint supplyIndex = marketStakingIndex;\\n        uint supplierIndex = supplierStakingIndex[supplier];\\n\\n        // Update supplier's index to the current index since we are distributing accrued COMP\\n        supplierStakingIndex[supplier] = supplyIndex;\\n\\n        uint supplierDelta = 0;\\n\\n        if (supplierIndex > 0) {\\n            // Calculate change in the cumulative sum of the Rewards per cToken accrued\\n            Double memory deltaIndex = Double({mantissa: sub_(supplyIndex, supplierIndex)});\\n            uint supplierTokens = accountTokens[supplier];\\n\\n            // Calculate Rewards accrued: cTokenAmount * accruedPerCToken\\n            supplierDelta = mul_(supplierTokens, deltaIndex);\\n\\n            uint supplierAccrued = add_(rewardsAccrued[supplier], supplierDelta);\\n            rewardsAccrued[supplier] = supplierAccrued;\\n        }\\n\\n        emit DistributeSupplierRewards(supplier, supplierDelta, supplyIndex);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // TODO : DES : Added this\\n        distributeSupplierRewardsInternal(minter);\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        // TODO : DES : Stake LP tokens in farm contract\\n\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // TODO : DES : Added this function\\n        distributeSupplierRewardsInternal(redeemer);\\n\\n        // TODO : DES : Withdraw required amount from farm contract (vars.redeemAmount)\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    // TODO : DES : Remove borrow function\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    // TODO : DES : Remove borrow function\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    // TODO : DES : Remove borrow function\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // Comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    // TODO : DES : Remove borrow function\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    // TODO : DES : Remove borrow function\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    // TODO : DES : Remove borrow function\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    // TODO : DES : Remove borrow function\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // Comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    // TODO : DES : Remove borrow function\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = cTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n    }\\n\\n    // TODO : DES : Remove borrow function\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.getAccrualBlockNumber() != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // Comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // TODO : DES : Added this functions\\n        distributeSupplierRewardsInternal(borrower);\\n        distributeSupplierRewardsInternal(liquidator);\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense hook */\\n        // Transfer verify is required here due to tokens being transferred, and have to keep the\\n        // ACC accounting in check\\n        // This works, because the 'borrower' has to be in this market. and so, the active collateral usage can either remain unchanged\\n        // (if the liquidator is also in the market) or reduce (if the liquidator is not in the market)\\n        comptroller.transferVerify(address(this), borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // Comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() external returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * OLA_ADDITIONS : Made internal and removes Admin check.\\n      * @notice Sets a new Comptroller for the market\\n      * @dev Admin function to set a new Comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) internal returns (uint) {\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke Comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's Comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        // OLA_ADDITIONS :This constraint\\n        // Check newReserveFactor >= minReserveFactor\\n        if (newReserveFactorMantissa < reserveFactorMinMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to the LeN admin and to Ola bank their respective shares\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // OLA_ADDITIONS : Allowing anyone to reduce reserves\\n        // Check caller is admin\\n        // if (msg.sender != admin) {\\n        //     return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        // }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        // OLA_ADDITIONS : Dividing the reduced amount between the Admin and Ola (+validations)\\n        //                 Important to notice that we have added Math calculations to this function.\\n        //                 Where as before, it only used pre-calculated numbers.\\n        MathError mathErr;\\n        uint adminPart;\\n        uint olaPart;\\n        uint olaReserveFactor = fetchOlaReserveFactorMantissa();\\n        address payable olaBankAddress = fetchOlaBankAddress();\\n        address payable adminBankAddress = fetchAdminBankAddress();\\n\\n        // Calculate olaPart\\n        (mathErr, olaPart) = mulScalarTruncate(Exp({mantissa: olaReserveFactor}), reduceAmount);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDUCE_RESERVES_OLA_PART_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        // Sanity check, should never be a problem in a well parameterized system\\n        if (olaPart >= reduceAmount) {\\n            return fail(Error.BAD_SYSTEM_PARAMS, FailureInfo.REDUCE_RESERVES_OLA_PART_CALCULATION_FAILED);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        // Calculate admin part\\n        adminPart = reduceAmount - olaPart;\\n        // We checked olaPart < reduceAmount above, so this should never revert.\\n        require(adminPart < reduceAmount, \\\"reduce reserves unexpected adminPart underflow\\\");\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\n        require(totalReservesNew <= totalReserves, \\\"reduce reserves unexpected underflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // OLA_ADDITIONS : Transfer reserves to both admin and Ola bank addresses\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(adminBankAddress, adminPart);\\n        doTransferOut(olaBankAddress, olaPart);\\n\\n        emit ReservesReduced(adminBankAddress, adminPart, olaBankAddress, olaPart, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    // TODO : DES : Remove IRM functions\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    // TODO : DES : Remove IRM functions\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Ensure interest rate model is an approved contracts\\n        RegistryForOToken registry = RegistryForOToken(comptroller.getRegistry());\\n\\n        require(registry.isSupportedInterestRateModel(address(newInterestRateModel)), \\\"Unapproved interest rate model\\\");\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal;\\n\\n    // TODO : DES : Implement\\n    function doStake(uint amount) internal;\\n\\n    // TODO : DES : Implement\\n    function doUnstake(uint amount) internal returns (uint);\\n\\n    // TODO : DES : Implement\\n    function doClaimFromFarm() internal returns (uint);\\n\\n    // TODO : DES : Implement\\n    function claimSupplierRewards() internal;\\n\\n    /**\\n     * OLA_ADDITIONS: This function\\n     * @dev Returns the ola reserves factor.\\n     */\\n    function fetchOlaReserveFactorMantissa() internal pure returns (uint) {\\n        return olaReserveFactorMantissa;\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS: This function\\n     * @dev Fetches the ola bank address.\\n     */\\n    function fetchOlaBankAddress() internal returns (address payable) {\\n        return RegistryForOToken(comptroller.getRegistry()).olaBankAddress();\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS: This function\\n     * @dev Fetches the admin bank address.\\n     */\\n    function fetchAdminBankAddress() internal view returns (address payable) {\\n        return ComptrollerForOToken(address(comptroller)).adminBankAddress();\\n    }\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/versions/0.05/CLPStakeV0_05.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../OTokens/CToken.sol\\\";\\nimport \\\"../../OTokens/CLPStake.sol\\\";\\n\\ninterface IMasterChefForClpStateV0_05 {\\n    // Deposit LP tokens to MasterChef for SPIRIT allocation.\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n}\\n\\n/**\\n * @title Ola's CErc20 Contract V0.01\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Ola\\n */\\ncontract CLPStakeV0_05 is CLPSTake {\\n    /**\\n     * @notice Initialize the new money market\\n     * @param underlying_ The address of the underlying asset\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ ERC-20 name of this token\\n     * @param symbol_ ERC-20 symbol of this token\\n     * @param decimals_ ERC-20 decimal precision of this token\\n     */\\n    function initialize(address underlying_,\\n                        ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        // CToken initialize does the bulk of the work\\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\n\\n        // Set underlying and sanity check it\\n        underlying = underlying_;\\n        EIP20Interface(underlying).totalSupply();\\n    }\\n\\n    /*** User Interface ***/\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function mint(uint mintAmount) external returns (uint) {\\n        (uint err,) = mintInternal(mintAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeem(uint redeemTokens) external returns (uint) {\\n        return redeemInternal(redeemTokens);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to redeem\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlying(uint redeemAmount) external returns (uint) {\\n        return redeemUnderlyingInternal(redeemAmount);\\n    }\\n\\n    // TODO : DES : Remove borrow functions / Revert\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrow(uint borrowAmount) external returns (uint) {\\n        return borrowInternal(borrowAmount);\\n    }\\n\\n    // TODO : DES : Remove borrow functions / Revert\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function repayBorrow(uint repayAmount) external returns (uint) {\\n        (uint err,) = repayBorrowInternal(repayAmount);\\n        return err;\\n    }\\n\\n    // TODO : DES : Remove borrow functions / Revert\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint) {\\n        (uint err,) = repayBorrowBehalfInternal(borrower, repayAmount);\\n        return err;\\n    }\\n\\n    // TODO : DES : Remove borrow functions / Revert\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint) {\\n        (uint err,) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (Timelock)\\n     * @param token The address of the ERC-20 token to sweep\\n     */\\n    function sweepToken(EIP20NonStandardInterface token) external {\\n    \\trequire(address(token) != underlying, \\\"CErc20::sweepToken: can not sweep underlying token\\\");\\n    \\tuint256 balance = token.balanceOf(address(this));\\n    \\ttoken.transfer(admin, balance);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying tokens owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint) {\\n        EIP20Interface token = EIP20Interface(underlying);\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\n     *      This will revert due to insufficient balance or insufficient allowance.\\n     *      This function returns the actual amount received,\\n     *      which may be less than `amount` if there is a fee attached to the transfer.\\n     *\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint) {\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\n        uint balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\\n        token.transferFrom(from, address(this), amount);\\n\\n        bool success;\\n        assembly {\\n            switch returndatasize()\\n                case 0 {                       // This is a non-standard ERC-20\\n                    success := not(0)          // set success to true\\n                }\\n                case 32 {                      // This is a compliant ERC-20\\n                    returndatacopy(0, 0, 32)\\n                    success := mload(0)        // Set `success = returndata` of external call\\n                }\\n                default {                      // This is an excessively non-compliant ERC-20, revert.\\n                    revert(0, 0)\\n                }\\n        }\\n        require(success, \\\"TOKEN_TRANSFER_IN_FAILED\\\");\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\\n        require(balanceAfter >= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\n        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract\\n    }\\n\\n    /**\\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\n     *      it is >= amount, this should not revert in normal conditions.\\n     *\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n     */\\n    function doTransferOut(address payable to, uint amount) internal {\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\n        token.transfer(to, amount);\\n\\n        bool success;\\n        assembly {\\n            switch returndatasize()\\n                case 0 {                      // This is a non-standard ERC-20\\n                    success := not(0)          // set success to true\\n                }\\n                case 32 {                     // This is a compliant ERC-20\\n                    returndatacopy(0, 0, 32)\\n                    success := mload(0)        // Set `success = returndata` of external call\\n                }\\n                default {                     // This is an excessively non-compliant ERC-20, revert.\\n                    revert(0, 0)\\n                }\\n        }\\n        require(success, \\\"TOKEN_TRANSFER_OUT_FAILED\\\");\\n    }\\n\\n    function doStake(uint amount) internal {\\n        // TODO : DES : Think about reverting if rewards were received due to deposit\\n\\n        safeApprove(underlying, farmAddress, 0);\\n        safeApprove(underlying, farmAddress, amount);\\n\\n        IMasterChefForClpStateV0_05(farmAddress).deposit(pid, amount);\\n    }\\n\\n    function doUnstake(uint amount) internal returns (uint) {\\n        uint balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\\n\\n        // TODO : DES : Think about reverting if rewards were received due to withdraw (Does not go together with the 'doClaimFromFarm')\\n        IMasterChefForClpStateV0_05(farmAddress).withdraw(pid, amount);\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\\n        require(balanceAfter >= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\n        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract\\n    }\\n\\n    function doClaimFromFarm() internal returns (uint) {\\n        uint balanceBefore = EIP20Interface(rewardToken).balanceOf(address(this));\\n        // Expected to receive rewards\\n        doUnstake(0);\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint balanceAfter = EIP20Interface(rewardToken).balanceOf(address(this));\\n        require(balanceAfter >= balanceBefore, \\\"REWARD_CLAIMING_IN_OVERFLOW\\\");\\n        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract\\n    }\\n\\n    // https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/versions/0.05/delegates/CLPStakeDelegateV0_05.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../CLPStakeV0_05.sol\\\";\\n\\n/**\\n * @title Compound's CErc20Delegate Contract\\n * @notice CTokens which wrap an EIP-20 underlying and are delegated to\\n * @author Compound\\n */\\ncontract CLPStakeDelegateV0_05 is CLPStakeV0_05, CDelegateInterface {\\n    /**\\n     * @notice Construct an empty delegate\\n     */\\n    constructor() public {}\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public {\\n        // Shh -- currently unused\\n        data;\\n\\n        // Shh -- we don't ever want this hook to be marked pure\\n        if (false) {\\n            implementation = address(0);\\n        }\\n\\n        // OLA_ADDITION : The 'or Comptroller'\\n        // The only time where msg.sender is the admin is during construction of the 'delegator' contract\\n        require(msg.sender == admin || msg.sender == address(comptroller), \\\"only the admin and comptroller may call _becomeImplementation\\\");\\n    }\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public {\\n        // Shh -- we don't ever want this hook to be marked pure\\n        if (false) {\\n            implementation = address(0);\\n        }\\n\\n        // OLA_ADDITION : Was 'only admin'. Now, 'only Comptroller'\\n        require(msg.sender == address(comptroller), \\\"only the comptroller may call _resignImplementation\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/OlaPlatform/InterestRateModels/JumpRateModelV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"./BaseJumpRateModelV2.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n\\n/**\\n  * @title Compound's JumpRateModel Contract V2 for V2 cTokens\\n  * @author Arr00\\n  * @notice Supports only for V2 cTokens\\n  */\\ncontract JumpRateModelV2 is InterestRateModel, BaseJumpRateModelV2  {\\n\\n\\t/**\\n     * @notice Calculates the current borrow rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint) {\\n        return getBorrowRateInternal(cash, borrows, reserves);\\n    }\\n\\n    constructor(uint blocksPerYear_, uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_)\\n    \\tBaseJumpRateModelV2(blocksPerYear_, baseRatePerYear,multiplierPerYear,jumpMultiplierPerYear,kink_,owner_) public {}\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/OlaPlatform/InterestRateModels/BaseJumpRateModelV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../Math/SafeMath.sol\\\";\\n\\n/**\\n  * @title Logic for Compound's JumpRateModel Contract V2.\\n  * @author Compound (modified by Dharma Labs, refactored by Arr00)\\n  * @notice Version 2 modifies Version 1 by enabling updateable parameters.\\n  */\\ncontract BaseJumpRateModelV2 {\\n    using SafeMath for uint;\\n\\n    event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock, uint jumpMultiplierPerBlock, uint kink);\\n\\n    /**\\n     * @notice The address of the owner, i.e. the Timelock contract, which can update parameters directly\\n     */\\n    address public owner;\\n\\n    /**\\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\\n     */\\n    uint public blocksPerYear;\\n\\n    /**\\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\\n     */\\n    uint public multiplierPerBlock;\\n\\n    /**\\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\\n     */\\n    uint public baseRatePerBlock;\\n\\n    /**\\n     * @notice The multiplierPerBlock after hitting a specified utilization point\\n     */\\n    uint public jumpMultiplierPerBlock;\\n\\n    /**\\n     * @notice The utilization point at which the jump multiplier is applied\\n     */\\n    uint public kink;\\n\\n    /**\\n     * @notice Construct an interest rate model\\n     * @param blocksPerYear_ The approximate number of blocks per year that is assumed by the interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     * @param owner_ The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)\\n     */\\n    constructor(uint blocksPerYear_, uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_) internal {\\n        owner = owner_;\\n        blocksPerYear = blocksPerYear_;\\n\\n        updateJumpRateModelInternal(baseRatePerYear,  multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    /**\\n     * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function updateJumpRateModel(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) external {\\n        require(msg.sender == owner, \\\"only the owner may call this function.\\\");\\n\\n        updateJumpRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    /**\\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market (currently unused)\\n     * @return The utilization rate as a mantissa between [0, 1e18]\\n     */\\n    function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {\\n        // Utilization rate is 0 when there are no borrows\\n        if (borrows == 0) {\\n            return 0;\\n        }\\n\\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\\n    }\\n\\n    /**\\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getBorrowRateInternal(uint cash, uint borrows, uint reserves) internal view returns (uint) {\\n        uint util = utilizationRate(cash, borrows, reserves);\\n\\n        if (util <= kink) {\\n            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\n        } else {\\n            uint normalRate = kink.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\n            uint excessUtil = util.sub(kink);\\n            return excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(normalRate);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the current supply rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @param reserveFactorMantissa The current reserve factor for the market\\n     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) public view returns (uint) {\\n        uint oneMinusReserveFactor = uint(1e18).sub(reserveFactorMantissa);\\n        uint borrowRate = getBorrowRateInternal(cash, borrows, reserves);\\n        uint rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\\n        return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\\n    }\\n\\n    /**\\n     * @notice Internal function to update the parameters of the interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function updateJumpRateModelInternal(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) internal {\\n        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\\n        multiplierPerBlock = (multiplierPerYear.mul(1e18)).div(blocksPerYear.mul(kink_));\\n        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\\n        kink = kink_;\\n\\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/Math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/OlaPlatform/InterestRateModels/LegacyJumpRateModelV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"./BaseJumpRateModelV2.sol\\\";\\nimport \\\"./LegacyInterestRateModel.sol\\\";\\n\\n\\n/**\\n  * @title Compound's JumpRateModel Contract V2 for Legacy cTokens\\n  * @author Arr00\\n  * @notice Supports only Legacy cTokens\\n  */\\ncontract LegacyJumpRateModelV2 is LegacyInterestRateModel, BaseJumpRateModelV2  {\\n\\n\\t/**\\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return (Error, The borrow rate percentage per block as a mantissa (scaled by 1e18))\\n     */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint, uint) {\\n        return (0,getBorrowRateInternal(cash, borrows, reserves));\\n    }\\n    \\n    constructor(uint blocksPerYear_, uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_, address owner_)\\n    \\tBaseJumpRateModelV2(blocksPerYear_, baseRatePerYear,multiplierPerYear,jumpMultiplierPerYear,kink_,owner_) public {}\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/OlaPlatform/InterestRateModels/LegacyInterestRateModel.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's Legacy InterestRateModel Interface\\n  * @author Compound (modified by Arr00)\\n  */\\ncontract LegacyInterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @return error code (0 = no error), The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint,uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Peripheral/Timelock/Timelock.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../Core/Math/SafeMath.sol\\\";\\n\\ncontract Timelock {\\n    using SafeMath for uint;\\n\\n    event NewAdmin(address indexed newAdmin);\\n    event NewPendingAdmin(address indexed newPendingAdmin);\\n    event NewDelay(uint indexed newDelay);\\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\\n\\n    uint public constant GRACE_PERIOD = 14 days;\\n    uint public constant MINIMUM_DELAY = 2 days;\\n    uint public constant MAXIMUM_DELAY = 30 days;\\n    // OLA_ADDITIONS : This constant\\n    // We would like to prevent the scheduling of transactions too distant in the future\\n    uint public constant ETA_TIME_FRAME = 30 days;\\n\\n    address public admin;\\n    address public pendingAdmin;\\n    uint public delay;\\n\\n    mapping (bytes32 => bool) public queuedTransactions;\\n\\n\\n    constructor(address admin_, uint delay_) public {\\n        require(delay_ >= MINIMUM_DELAY, \\\"Timelock::constructor: Delay must exceed minimum delay.\\\");\\n        require(delay_ <= MAXIMUM_DELAY, \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\");\\n\\n        admin = admin_;\\n        delay = delay_;\\n    }\\n\\n    function() external payable { }\\n\\n    function setDelay(uint delay_) public {\\n        require(msg.sender == address(this), \\\"Timelock::setDelay: Call must come from Timelock.\\\");\\n        require(delay_ >= MINIMUM_DELAY, \\\"Timelock::setDelay: Delay must exceed minimum delay.\\\");\\n        require(delay_ <= MAXIMUM_DELAY, \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\");\\n        delay = delay_;\\n\\n        emit NewDelay(delay);\\n    }\\n\\n    function acceptAdmin() public {\\n        require(msg.sender == pendingAdmin, \\\"Timelock::acceptAdmin: Call must come from pendingAdmin.\\\");\\n        admin = msg.sender;\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(admin);\\n    }\\n\\n    function setPendingAdmin(address pendingAdmin_) public {\\n        require(msg.sender == address(this), \\\"Timelock::setPendingAdmin: Call must come from Timelock.\\\");\\n        pendingAdmin = pendingAdmin_;\\n\\n        emit NewPendingAdmin(pendingAdmin);\\n    }\\n\\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\\n        require(msg.sender == admin, \\\"Timelock::queueTransaction: Call must come from admin.\\\");\\n        require(eta >= getBlockTimestamp().add(delay), \\\"Timelock::queueTransaction: Estimated execution block must satisfy delay.\\\");\\n        require(eta <= getBlockTimestamp().add(delay).add(ETA_TIME_FRAME), \\\"Timelock::queueTransaction: Estimated execution block must satisfy the scheduling time frame.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        queuedTransactions[txHash] = true;\\n\\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\\n        return txHash;\\n    }\\n\\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\\n        require(msg.sender == admin, \\\"Timelock::cancelTransaction: Call must come from admin.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        queuedTransactions[txHash] = false;\\n\\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\\n    }\\n\\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\\n        require(msg.sender == admin, \\\"Timelock::executeTransaction: Call must come from admin.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        require(queuedTransactions[txHash], \\\"Timelock::executeTransaction: Transaction hasn't been queued.\\\");\\n        require(getBlockTimestamp() >= eta, \\\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\\\");\\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \\\"Timelock::executeTransaction: Transaction is stale.\\\");\\n\\n        queuedTransactions[txHash] = false;\\n\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\n        }\\n\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, bytes memory returnData) = target.call.value(value)(callData);\\n        require(success, \\\"Timelock::executeTransaction: Transaction execution reverted.\\\");\\n\\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\\n\\n        return returnData;\\n    }\\n\\n    function getBlockTimestamp() internal view returns (uint) {\\n        // solium-disable-next-line security/no-block-members\\n        return block.timestamp;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ola/Core/OlaPlatform/InterestRateModels/BaseImmutableJumpRateModel.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../Math/SafeMath.sol\\\";\\n\\n/**\\n  * @title Logic for immutable JumpRateModel.\\n  * @author Ola\\n  */\\ncontract BaseImmutableJumpRateModel {\\n    using SafeMath for uint;\\n\\n    event NewInterestParams(uint baseRatePerBlock, uint multiplierPerBlock, uint jumpMultiplierPerBlock, uint kink);\\n\\n    /**\\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\\n     */\\n    uint public blocksPerYear;\\n\\n    /**\\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\\n     */\\n    uint public multiplierPerBlock;\\n\\n    /**\\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\\n     */\\n    uint public baseRatePerBlock;\\n\\n    /**\\n     * @notice The multiplierPerBlock after hitting a specified utilization point\\n     */\\n    uint public jumpMultiplierPerBlock;\\n\\n    /**\\n     * @notice The utilization point at which the jump multiplier is applied\\n     */\\n    uint public kink;\\n\\n    /**\\n     * @notice Construct an immutable interest rate model\\n     * @param blocksPerYear_ The approximate number of blocks per year that is assumed by the interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    constructor(uint blocksPerYear_, uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) internal {\\n        blocksPerYear = blocksPerYear_;\\n\\n        updateJumpRateModelInternal(baseRatePerYear,  multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    /**\\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market (currently unused)\\n     * @return The utilization rate as a mantissa between [0, 1e18]\\n     */\\n    function utilizationRate(uint cash, uint borrows, uint reserves) public pure returns (uint) {\\n        // Utilization rate is 0 when there are no borrows\\n        if (borrows == 0) {\\n            return 0;\\n        }\\n\\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\\n    }\\n\\n    /**\\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getBorrowRateInternal(uint cash, uint borrows, uint reserves) internal view returns (uint) {\\n        uint util = utilizationRate(cash, borrows, reserves);\\n\\n        if (util <= kink) {\\n            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\n        } else {\\n            uint normalRate = kink.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\n            uint excessUtil = util.sub(kink);\\n            return excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(normalRate);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the current supply rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @param reserveFactorMantissa The current reserve factor for the market\\n     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) public view returns (uint) {\\n        uint oneMinusReserveFactor = uint(1e18).sub(reserveFactorMantissa);\\n        uint borrowRate = getBorrowRateInternal(cash, borrows, reserves);\\n        uint rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\\n        return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\\n    }\\n\\n    /**\\n     * @notice Internal function to update the parameters of the interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function updateJumpRateModelInternal(uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_) internal {\\n        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\\n        multiplierPerBlock = (multiplierPerYear.mul(1e18)).div(blocksPerYear.mul(kink_));\\n        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\\n        kink = kink_;\\n\\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/OlaPlatform/InterestRateModels/ImmutableJumpRateModel.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"./BaseImmutableJumpRateModel.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n\\n/**\\n  * @title Compound's JumpRateModel Contract V2 for V2 cTokens\\n  * @author Arr00\\n  * @notice Supports only for V2 cTokens\\n  */\\ncontract ImmutableJumpRateModel is InterestRateModel, BaseImmutableJumpRateModel  {\\n\\n\\t/**\\n     * @notice Calculates the current borrow rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint) {\\n        return getBorrowRateInternal(cash, borrows, reserves);\\n    }\\n\\n    constructor(uint blocksPerYear_, uint baseRatePerYear, uint multiplierPerYear, uint jumpMultiplierPerYear, uint kink_)\\n        BaseImmutableJumpRateModel(blocksPerYear_, baseRatePerYear,multiplierPerYear,jumpMultiplierPerYear,kink_) public {}\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/versions/0.04/ComptrollerV0_04.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../OTokens/CToken.sol\\\";\\nimport \\\"../../ErrorReporter/ErrorReporter.sol\\\";\\nimport \\\"../../PriceOracle/PriceOracle.sol\\\";\\nimport \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../../Comptroller/ComptrollerStorage.sol\\\";\\nimport \\\"../../Comptroller/Unitroller.sol\\\";\\nimport \\\"../../../../Peripheral/ComptrollerPeripherals/RainMaker/RainMakerInterface.sol\\\";\\nimport \\\"../../../../Peripheral/ComptrollerPeripherals/Bouncer/IBouncer.sol\\\";\\nimport \\\"../../../../Peripheral/ComptrollerPeripherals/IComptrollerPeripheral.sol\\\";\\n\\ninterface RegistryForComptrollerV0_04 {\\n    function deployOToken(address underlying,\\n        bytes32 contractNameHash,\\n        bytes calldata params,\\n        address interestRateModel,\\n        address admin,\\n        bytes calldata becomeImplementationData) external returns (address);\\n\\n    function deployPeripheralContract(bytes32 contractNameHash,\\n        bytes calldata params,\\n        address contractAdmin) external returns (address);\\n\\n    function getPriceForUnderling(address cToken) external view returns (uint256);\\n}\\n\\ninterface IBouncerForComptroller {\\n    function isAccountApproved(address account) external view returns (bool);\\n}\\n\\n/**\\n * @title Ola's Comptroller Contract V0.02\\n * @author Ola\\n * -- Changes form V0.02 :\\n * --- Same as V0.02\\n */\\ncontract ComptrollerV0_04 is ComptrollerStorageOlaV0_02, ComptrollerInterface, ComptrollerErrorReporter, ExponentialNoError {\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(CToken cToken);\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(CToken cToken, address account);\\n\\n    /// @notice Emitted when an account exits a market\\n    event MarketExited(CToken cToken, address account);\\n\\n    /// @notice Emitted when a collateral factor is changed by admin\\n    event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\\n\\n    /// @notice Emitted when a liquidation factor is changed by admin\\n    event NewLiquidationFactor(CToken cToken, uint oldLiquidationFactorMantissa, uint newLiquidationFactorMantissa);\\n\\n    /// @notice Emitted when liquidation incentive is changed by admin\\n    /// OLA_ADDITIONS : Added 'cToken' to support 'liquidation incentive per market'\\n    event NewLiquidationIncentive(CToken ctoken, uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the Rain Maker is changed\\n    event NewRainMaker(address oldRainMaker, address newRainMaker);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the bouncer is changed\\n    event NewBouncer(address oldBouncer, address newBouncer);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the min borrow amount is changed\\n    event NewMinBorrowAmount(uint oldMinBorrowAmount, uint newMinBorrowAmount);\\n\\n    /// @notice Emitted when pause guardian is changed\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    /// @notice Emitted when an action is paused globally\\n    event ActionPaused(string action, bool pauseState);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event ActionPaused(CToken cToken, string action, bool pauseState);\\n\\n    /// @notice Emitted when borrow cap for a cToken is changed\\n    event NewBorrowCap(CToken indexed cToken, uint newBorrowCap);\\n\\n    /// @notice Emitted when borrow cap guardian is changed\\n    event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\\n\\n    /// @notice Emitted when admin bank address is changed\\n    event NewAdminBankAddress(address oldAdminBankAddress, address newAdminBankAddress);\\n\\n    /// @notice Emitted when active collateral cap for a cToken is changed\\n    event NewActiveCollateralCap(CToken indexed cToken, uint newActiveCollateralCap);\\n\\n    /// @notice Emitted when active collateral usage for a cToken is changed\\n    event ActiveCollateralUsageChange(CToken indexed cToken, uint oldCollateralUsage, uint newCollateralUsage);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the 'Limit Minting' flag is changed\\n    event LimitMintingFlagChanged(bool newValue);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the 'Limit Borrowing' flag is changed\\n    event LimitBorrowingFlagChanged(bool newValue);\\n\\n    // No collateralFactorMantissa may exceed this value\\n    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // No liquidationFactorMantissa may exceed this value\\n    uint internal constant liquidationFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // liquidationIncentiveMantissa of any market must be strictly greater than this value\\n    // OLA_ADDITIONS: This field\\n    uint internal constant liquidationIncentiveMinMantissa = 1.05e18; // 1.05\\n\\n    // liquidationIncentiveMantissa of any market must not exceed this value\\n    // OLA_ADDITIONS: This field\\n    uint internal constant liquidationIncentiveMaxMantissa = 1.3e18; // 1.3\\n\\n    // Hard coded value to limit amount of asset in a single LN\\n    // OLA_ADDITIONS: This field\\n    uint internal constant maxAllowedAssets = 25;\\n\\n    // Hard coded value for the liquidation close factor\\n    // OLA_ADDITIONS: This field\\n    uint internal constant fixedCloseFactorMantissa = 0.5e18;\\n\\n    constructor() public {\\n        admin = msg.sender;\\n    }\\n\\n    /*** Registry ***/\\n\\n    function getRegistry() public view returns (address) {\\n        return address(registry);\\n    }\\n\\n    /*** Assets You Are In ***/\\n\\n    /**\\n     * @notice Returns the assets an account has entered\\n     * @param account The address of the account to pull assets for\\n     * @return A dynamic list with the assets the account has entered\\n     */\\n    function getAssetsIn(address account) external view returns (CToken[] memory) {\\n        CToken[] memory assetsIn = accountAssets[account];\\n\\n        return assetsIn;\\n    }\\n\\n    /**\\n     * @notice Returns whether the given account is entered in the given asset\\n     * @param account The address of the account to check\\n     * @param cToken The cToken to check\\n     * @return True if the account is in the asset, otherwise false.\\n     */\\n    function checkMembership(address account, CToken cToken) external view returns (bool) {\\n        return markets[address(cToken)].accountMembership[account];\\n    }\\n\\n    /**\\n     * @notice Add assets to be included in account liquidity calculation\\n     * @param cTokens The list of addresses of the cToken markets to be enabled\\n     * @return Success indicator for whether each corresponding market was entered\\n     */\\n    function enterMarkets(address[] memory cTokens) public returns (uint[] memory) {\\n        uint len = cTokens.length;\\n\\n        uint[] memory results = new uint[](len);\\n        for (uint i = 0; i < len; i++) {\\n            CToken cToken = CToken(cTokens[i]);\\n\\n            // OLA_ADDITIONS : Emitting Failure events\\n            Error error = addToMarketInternal(cToken, msg.sender);\\n            if (error != Error.NO_ERROR) {\\n                fail(error, FailureInfo.ENTER_MARKET_NOT_ALLOWED);\\n            }\\n\\n            results[i] = uint(error);\\n        }\\n\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to activate this additional amount of collateral.\\n     * @param cToken The cToken to verify the active collateral cap against\\n     * @param market The market to verify the active collateral cap against (assumes the given market is listed)\\n     * @param cTokensToActivate The amount of cTokens being activated as collateral\\n     * @return 0 if the activation is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function collateralActivationAllowed(CToken cToken, Market memory market, uint256 cTokensToActivate) internal view returns (uint) {\\n        uint256 activeCollateralUSDCap = market.activeCollateralUSDCap;\\n        uint256 activeCTokenUsage = market.activeCollateralCTokenUsage;\\n\\n        // 0 Means \\\"No Cap\\\"\\n        if (activeCollateralUSDCap == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // No amount ? no problem\\n        if (cTokensToActivate == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // Calculate new usage USD value\\n        uint newCTokenUsage = add_(activeCTokenUsage, cTokensToActivate);\\n\\n        uint exchangeRateMantissa = cToken.exchangeRateStored();\\n\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateMantissa});\\n\\n        // Get the normalized price of the asset\\n        uint oraclePriceMantissa = getUnderlyingPriceForCToken(address(cToken));\\n\\n        if (oraclePriceMantissa == 0) {\\n            return uint(Error.PRICE_ERROR);\\n        }\\n\\n        Exp memory oraclePrice = Exp({mantissa: oraclePriceMantissa});\\n\\n        uint newUnderlyingUsage = mul_(newCTokenUsage, exchangeRate);\\n        uint newUsageValueInUsd = mul_(newUnderlyingUsage, oraclePrice);\\n\\n        // Is it within the allowed cap ?\\n        if (newUsageValueInUsd <= activeCollateralUSDCap) {\\n            // All good here\\n            return uint(Error.NO_ERROR);\\n        } else {\\n            return uint(Error.TOO_MUCH_COLLATERAL_ACTIVATION);\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases the underlying actively used as collateral.\\n     */\\n    function increaseActiveCollateralUsed(Market storage market, uint256 cTokensActivated, CToken cToken) internal {\\n        uint oldCTokenUsage = market.activeCollateralCTokenUsage;\\n        uint newCTokenUsage = add_(oldCTokenUsage, cTokensActivated);\\n        market.activeCollateralCTokenUsage = newCTokenUsage;\\n        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);\\n    }\\n\\n    /**\\n     * @notice Reduces the underlying actively used as collateral.\\n    */\\n    function reduceActiveCollateralUsed(Market storage market, uint256 cTokensDeactivated, CToken cToken) internal {\\n        uint oldCTokenUsage = market.activeCollateralCTokenUsage;\\n        uint newCTokenUsage = sub_(oldCTokenUsage, cTokensDeactivated);\\n        market.activeCollateralCTokenUsage = newCTokenUsage;\\n        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param cToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {\\n        Market storage marketToJoin = markets[address(cToken)];\\n\\n        if (!marketToJoin.isListed) {\\n            // market is not listed, cannot join\\n            return Error.MARKET_NOT_LISTED;\\n        }\\n\\n        if (marketToJoin.accountMembership[borrower] == true) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n\\n\\n        // NOTE : This function call will\\n        uint cTokensToBeActivatedAsCollateral = cToken.balanceOf(borrower);\\n        uint collateralActivationError = collateralActivationAllowed(cToken, marketToJoin, cTokensToBeActivatedAsCollateral);\\n\\n        // OLA_ADDITIONS : This test\\n        if (collateralActivationError != uint(Error.NO_ERROR)) {\\n            return Error(collateralActivationError);\\n        }\\n\\n        // Increase active collateral used\\n        increaseActiveCollateralUsed(marketToJoin, cTokensToBeActivatedAsCollateral, cToken);\\n\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(cToken);\\n\\n        emit MarketEntered(cToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Removes asset from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *  or be providing necessary collateral for an outstanding borrow.\\n     * @param cTokenAddress The address of the asset to be removed\\n     * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarket(address cTokenAddress) external returns (uint) {\\n        CToken cToken = CToken(cTokenAddress);\\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\\n        require(oErr == 0, \\\"Snapshot failed\\\"); // semi-opaque error code\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (amountOwed != 0) {\\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\\n        if (allowed != 0) {\\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\n        }\\n\\n        Market storage marketToExit = markets[cTokenAddress];\\n\\n        /* Return true if the sender is not already \u2018in\u2019 the market */\\n        if (marketToExit.accountMembership[msg.sender]) {\\n            uint err = exitMarketInternal(marketToExit, address(cToken), msg.sender);\\n\\n            // If no err, reduce\\n            if (err != uint(Error.NO_ERROR)) {\\n                return err;\\n            }\\n\\n            // Reduce the active collateral usage - Only if removal from market\\n            reduceActiveCollateralUsed(marketToExit, tokensHeld, cToken);\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Checks if the account is done (no supply and no borrow at all) in the given market\\n     * and if so, exits the market for the user.\\n     * @dev .\\n     * @param cTokenAddress The address of the asset to be removed\\n     * @param account The account which would exit the market (if done with it)\\n     * @return If done - returns the result of 'exitMarketInternal' and if not done - \\\"No error\\\".\\n     */\\n    function exitMarketIfDone(address cTokenAddress, address account) internal returns (uint) {\\n        CToken cToken = CToken(cTokenAddress);\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(account);\\n        require(oErr == 0, \\\"Snapshot failed\\\"); // semi-opaque error code\\n\\n        if (tokensHeld == 0 && amountOwed == 0) {\\n            Market storage marketToExit = markets[cTokenAddress];\\n\\n            /* Return true if the sender is not already \u2018in\u2019 the market */\\n            if (marketToExit.accountMembership[account]) {\\n                return exitMarketInternal(marketToExit, cTokenAddress, account);\\n            } else {\\n                return uint(Error.NO_ERROR);\\n            }\\n        } else {\\n            return uint(Error.NO_ERROR);\\n        }\\n    }\\n\\n    /**\\n      * @notice Performs the state change that Removes asset from sender's account liquidity calculation\\n      * @notice This function will revert if inconsistencies are found within the 'accountsAssets' mechanism\\n      * @dev This function should only be called after ensuring the user can exit the market (e.g no outstanding\\n      * debts or active collateral) AND only for users who are actually in the market.\\n      * @param cTokenAddress The address of the asset to be removed\\n      * @param account The account which would exit the market\\n      * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarketInternal(Market storage marketToExit, address cTokenAddress, address account) internal returns (uint) {\\n        /* Set cToken account membership to false */\\n        delete marketToExit.accountMembership[account];\\n\\n        /* Delete cToken from the account\u2019s list of assets */\\n        // load into memory for faster iteration\\n        CToken[] memory userAssetList = accountAssets[account];\\n        uint len = userAssetList.length;\\n        uint assetIndex = len;\\n        for (uint i = 0; i < len; i++) {\\n            if (userAssetList[i] == CToken(cTokenAddress)) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        require(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        CToken[] storage storedList = accountAssets[account];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.length--;\\n\\n        emit MarketExited(CToken(cTokenAddress), account);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Policy Hooks ***/\\n\\n    /**\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\n     * @param cToken The market to verify the mint against\\n     * @param minter The account which would get the minted tokens\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!mintGuardianPaused[cToken], \\\"paused\\\");\\n\\n        // Shh - currently unused\\n        minter;\\n        mintAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // OLA_ADDITIONS : Can limit minting\\n        // If borrowing is limited the account has to be approved\\n        if (limitMinting && !isAccountApprovedInternal(minter)) {\\n            return uint (Error.NOT_APPROVED_TO_MINT);\\n        }\\n\\n        // Keep the flywheel moving\\n        if (hasRainMaker()) {\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, minter);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates mint and reverts on rejection. May emit logs.\\n     * @param cToken Asset being minted\\n     * @param minter The address minting the tokens\\n     * @param actualMintAmount The amount of the underlying asset being minted\\n     * @param mintTokens The number of tokens being minted\\n     */\\n    function mintVerify(address cToken, address minter, uint actualMintAmount, uint mintTokens) external {\\n        // OLA_ADDITIONS : All from here\\n        // only cTokens may call 'mintVerify'\\n        require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n        // Get market + safety\\n        Market storage marketToMintIn = markets[address(cToken)];\\n        require(marketToMintIn.isListed, \\\"!listed\\\");\\n\\n        // We only care about active collateral caps if the minter is part of the market\\n        if (marketToMintIn.accountMembership[minter]) {\\n            // Is activating that much new collateral allowed ?\\n            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToMintIn, mintTokens);\\n            require(collateralActivationError == uint(Error.NO_ERROR), \\\"activation not allowed\\\");\\n\\n            // All seems to be ok, increase the usage count\\n            increaseActiveCollateralUsed(marketToMintIn, mintTokens, CToken(cToken));\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\n     * @param cToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint) {\\n        uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, redeemer);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[cToken].accountMembership[redeemer]) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, , uint shortfall, ) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0, true);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\n     * @param cToken Asset being redeemed\\n     * @param redeemer The address redeeming the tokens\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external {\\n        // Require tokens is zero or amount is also zero\\n        if (redeemTokens == 0 && redeemAmount > 0) {\\n            revert(\\\"redeemTokens zero\\\");\\n        }\\n\\n        // OLA_ADDITIONS : All from here\\n        // only cTokens may call 'redeemVerify'\\n        require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n        // Get market + safety\\n        Market storage marketToRedeemFrom = markets[address(cToken)];\\n        require(marketToRedeemFrom.isListed, \\\"!listed\\\");\\n\\n        // We only care about active collateral caps if the minter is in the market\\n        if (marketToRedeemFrom.accountMembership[redeemer]) {\\n            // Some cleanups, if the user is done with this market\\n            require(exitMarketIfDone(cToken, redeemer) == uint(Error.NO_ERROR), \\\"Exit failure\\\");\\n\\n            // The redeemer is reducing the collateral value in a market they are part of.\\n            // let's reduce the used active collateral.\\n            reduceActiveCollateralUsed(marketToRedeemFrom, redeemTokens, CToken(cToken));\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param cToken The market to verify the borrow against\\n     * @param borrower The account which would borrow the asset\\n     * @param borrowAmount The amount of underlying the account would borrow\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!borrowGuardianPaused[cToken], \\\"paused\\\");\\n\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // OLA_ADDITIONS : Can limit borrow\\n        // If borrowing is limited the account has to be approved\\n        if (limitBorrowing && !isAccountApprovedInternal(borrower)) {\\n            return uint (Error.NOT_APPROVED_TO_BORROW);\\n        }\\n\\n        if (!markets[cToken].accountMembership[borrower])\\n{\\n            // only cTokens may call borrowAllowed if borrower not in market\\n            require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n            // attempt to add borrower to the market\\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\\n            if (err != Error.NO_ERROR) {\\n                return uint(err);\\n            }\\n\\n            // it should be impossible to break the important invariant\\n            assert(markets[cToken].accountMembership[borrower]);\\n        }\\n\\n        if (getUnderlyingPriceForCToken(cToken) == 0) {\\n            return uint(Error.PRICE_ERROR);\\n        }\\n\\n        uint borrowCap = borrowCaps[cToken];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint totalBorrows = CToken(cToken).totalBorrows();\\n            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);\\n            require(nextTotalBorrows < borrowCap, \\\"Borrow cap reached\\\");\\n        }\\n\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, , uint shortfall, uint borrowAmountUsd) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount, true);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        // OLA_ADDITIONS : Adds 'min borrow usd' requirement\\n        if (borrowAmountUsd < minBorrowAmountUsd) {\\n            return uint(Error.TOO_LITTLE_BORROW);\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            uint borrowIndex = CToken(cToken).borrowIndex();\\n            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);\\n            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates borrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset whose underlying is being borrowed\\n     * @param borrower The address borrowing the underlying\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\n     */\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external {\\n        // Shh - currently unused\\n        cToken;\\n        borrower;\\n        borrowAmount;\\n\\n        // Uncomment if adding logic\\n        // Only cTokens may call 'borrowVerify'\\n        // require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param cToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which would borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint) {\\n        // Shh - currently unused\\n        payer;\\n        borrower;\\n        repayAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            uint borrowIndex = CToken(cToken).borrowIndex();\\n            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);\\n            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset being repaid\\n     * @param payer The address repaying the borrow\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint actualRepayAmount,\\n        uint borrowerIndex) external {\\n\\n        // Only cTokens may call 'repayBorrowVerify'\\n        require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n        // Some cleanups, if the user is done with this market\\n        require(exitMarketIfDone(cToken, borrower) == uint(Error.NO_ERROR), \\\"Exit failure\\\");\\n    }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint) {\\n        // Shh - currently unused\\n        liquidator;\\n\\n        if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* The borrower must have shortfall in order to be liquidateable */\\n        // OLA_ADDITIONS : Use liquidation factor for liquidation calculation\\n        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower, false);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall == 0) {\\n            return uint(Error.INSUFFICIENT_SHORTFALL);\\n        }\\n\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\n        uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);\\n        // OLA_ADDITIONS : Using the constant value instead of the storage one ('closeFactorMantissa')\\n        uint maxClose = mul_ScalarTruncate(Exp({mantissa: fixedCloseFactorMantissa}), borrowBalance);\\n        if (repayAmount > maxClose) {\\n            return uint(Error.TOO_MUCH_REPAY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint actualRepayAmount,\\n        uint seizeTokens) external {\\n        // Shh - currently unused\\n        cTokenBorrowed;\\n        cTokenCollateral;\\n        liquidator;\\n        borrower;\\n        actualRepayAmount;\\n        seizeTokens;\\n\\n        // Uncomment if adding logic\\n        // Only cTokens may call 'liquidateBorrowVerify'\\n        // require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint) {\\n        // OLA_ADDITIONS : Preventing LN admin from stopping liquidations (By removing the setter for the flag)\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        // require(!seizeGuardianPaused, \\\"seize is paused\\\");\\n\\n        // Shh - currently unused\\n        seizeTokens;\\n\\n        if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {\\n            return uint(Error.COMPTROLLER_MISMATCH);\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cTokenCollateral);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, borrower);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, liquidator);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates seize and reverts on rejection. May emit logs.\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external {\\n        // Shh - currently unused\\n        cTokenCollateral;\\n        cTokenBorrowed;\\n        liquidator;\\n        borrower;\\n        seizeTokens;\\n\\n        // Uncomment if adding logic\\n        // Only cTokens may call 'seizeVerify'\\n        // require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param cToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!transferGuardianPaused, \\\"transfer paused\\\");\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        uint allowed = redeemAllowedInternal(cToken, src, transferTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, src);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, dst);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates transfer and reverts on rejection. May emit logs.\\n     * IMPORTANT : This function is also called from a cToken's 'seizeInternal', so, it is\\n     *             imperative to make sure that any change to this function is in line with\\n     *             the logic requirements of 'seizeInternal'.\\n     * @param cToken Asset being transferred\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     */\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external {\\n        // OLA_ADDITIONS : All from here\\n        // only cTokens may call 'transferVerify'\\n        require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n        // Get market + safety\\n        Market storage marketToTransferIn = markets[address(cToken)];\\n        require(marketToTransferIn.isListed, \\\"!listed\\\");\\n\\n        bool srcMembership = marketToTransferIn.accountMembership[src];\\n        bool dstMembership = marketToTransferIn.accountMembership[dst];\\n\\n        // If no side is in the market, the active collateral is not changed.\\n        // If both of them are in the market, the active collateral stays the same.\\n        if (srcMembership == dstMembership) {\\n            return;\\n        } else if (srcMembership) {\\n            // This is an easy one, active collateral usage only decreases\\n            return reduceActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));\\n        } else if (dstMembership) {\\n            // This is a complex one. The dst might not be able to receive the transferred cTokens if\\n            // it will exceed the allowed active collateral cap.\\n            // So, let's check whether activating that much new collateral is allowed.\\n            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToTransferIn, transferTokens);\\n            require(collateralActivationError == uint(Error.NO_ERROR), \\\"Collateral activation is not allowed\\\");\\n\\n            // All seems to be ok, increase the usage count\\n            increaseActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));\\n        }\\n    }\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint sumCollateral;\\n        uint sumBorrowPlusEffects;\\n        uint cTokenBalance;\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n        uint oraclePriceMantissa;\\n        // OLA_ADDITIONS : Renamed from 'collateralFactor' to 'collateralOrLiquidationFactor'\\n        Exp collateralOrLiquidationFactor;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToDenom;\\n\\n        // OLA_ADDITIONS : Added 'borrowAmountUsd' for \\\"min borrow usd check\\\"\\n        uint borrowAmountUsd;\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, true);\\n\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * OLA ADDITIONS : This function\\n     * @notice Determine the current account liquidity wrt liquidation requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of liquidation requirements,\\n     *          account shortfall below liquidation requirements)\\n     */\\n    function getAccountLiquidityByLiquidationFactor(address account) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, false);\\n\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidityInternal(address account, bool useCollateralFactor) internal view returns (Error, uint, uint) {\\n        // OLA_ADDITIONS : added 'useCollateralFactor' + changed from direct 'return' to 'de-construct and return'\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, useCollateralFactor);\\n        return (err, liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) public view returns (uint, uint, uint) {\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, true);\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS : This function\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of liquidation requirements,\\n     *          hypothetical account shortfall below liquidation requirements)\\n     */\\n    function getHypotheticalAccountLiquidityByLiquidationFactor(\\n        address account,\\n        address cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, false);\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @param useCollateralFactor True - use the \\\"default\\\" 'collateralFactorMantissa', False - use 'liquidationFactorMantissa'\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements,\\n     *          USD value of the given borrowAmount)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        CToken cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount,\\n        // OLA_ADDITIONS : added 'useCollateralFactor'\\n        bool useCollateralFactor) internal view returns (Error, uint, uint, uint) {\\n\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n        uint oErr;\\n\\n        // For each asset the account is in\\n        CToken[] memory assets = accountAssets[account];\\n        for (uint i = 0; i < assets.length; i++) {\\n            CToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the cToken\\n            (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\\n            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                return (Error.SNAPSHOT_ERROR, 0, 0, 0);\\n            }\\n\\n            // OLA_ADDITIONS : Added the distinction between using collateralFactorMantissa and liquidationFactorMantissa\\n            if (useCollateralFactor) {\\n                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});\\n            } else {\\n                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].liquidationFactorMantissa});\\n            }\\n\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\n\\n            // Get the normalized price of the asset\\n            vars.oraclePriceMantissa = getUnderlyingPriceForCToken(address(asset));\\n\\n            if (vars.oraclePriceMantissa == 0) {\\n                return (Error.PRICE_ERROR, 0, 0, 0);\\n            }\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n            vars.tokensToDenom = mul_(mul_(vars.collateralOrLiquidationFactor, vars.exchangeRate), vars.oraclePrice);\\n            // sumCollateral += tokensToDenom * cTokenBalance\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);\\n\\n            // Calculate effects of interacting with cTokenModify\\n            if (asset == cTokenModify) {\\n                // redeem effect\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);\\n\\n                // borrow effect\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);\\n\\n                // OLA_ADDITIONS : Assigning value to the newly added 'borrowAmountUsd'\\n                // This will only have a non-zero value when the calculation is made for a 'borrow' action.\\n                vars.borrowAmountUsd = mul_ScalarTruncate(vars.oraclePrice, borrowAmount);\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0, vars.borrowAmountUsd);\\n        } else {\\n            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral, vars.borrowAmountUsd);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\n     * @param cTokenBorrowed The address of the borrowed cToken\\n     * @param cTokenCollateral The address of the collateral cToken\\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\n     */\\n    function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint priceBorrowedMantissa = getUnderlyingPriceForCToken(cTokenBorrowed);\\n        uint priceCollateralMantissa = getUnderlyingPriceForCToken(cTokenCollateral);\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n            return (uint(Error.PRICE_ERROR), 0);\\n        }\\n\\n        /*\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n         *  seizeTokens = seizeAmount / exchangeRate\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n         */\\n        uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error\\n        uint seizeTokens;\\n        Exp memory numerator;\\n        Exp memory denominator;\\n        Exp memory ratio;\\n\\n        // OLA_ADDITIONS : Added a direct read for the market 'liquidationIncentiveMantissa'.\\n        // notice: will be 0 for unsupported 'cTokenCollateral'\\n        numerator = mul_(Exp({mantissa: markets[cTokenCollateral].liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));\\n        denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));\\n        ratio = div_(numerator, denominator);\\n\\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n\\n        return (uint(Error.NO_ERROR), seizeTokens);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    function _setRainMaker(bytes32 contractNameHash, bytes calldata deployParams, bytes calldata retireParams, bytes calldata connectParams) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RAIN_MAKER_OWNER_CHECK);\\n        }\\n\\n        // Before saying goodbye, run all retirement logic (e.g. ensure all of the indexes are updated)\\n        if (hasRainMaker()) {\\n            IComptrollerPeripheral(rainMaker).retire(retireParams);\\n        }\\n\\n        // Track the old rain maker for the Comptroller\\n        address oldRainMaker = rainMaker;\\n\\n        address newRainMaker = address(0);\\n\\n        if (contractNameHash != bytes32(0)) {\\n            // Ask the ministry to deploy a new RainMaker for us\\n            newRainMaker = RegistryForComptrollerV0_04(registry).deployPeripheralContract(contractNameHash, deployParams, admin);\\n\\n            // Sanity, ensure a rainMaker was deployed\\n            require(RainMakerInterface(newRainMaker).isRainMaker());\\n\\n            // Call initialization hook\\n            IComptrollerPeripheral(newRainMaker).connect(connectParams);\\n        }\\n\\n        // Set Comptroller's RainMaker to newRainMaker\\n        rainMaker = newRainMaker;\\n\\n        // Emit NewRainMaker(oldRainMaker, newRainMaker)\\n        emit NewRainMaker(oldRainMaker, newRainMaker);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new bouncer for the Comptroller (after asking the ministry to deploy one)\\n     * @dev deployParams Dynamic parameters to be used for the contract deployment.\\n     * @dev retireParams Dynamic parameters to be used for the retire function of the existing bouncer.\\n     * @dev connectParams Dynamic parameters to be used for the connection of the new bouncer.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setBouncer(bytes32 contractNameHash, bytes calldata deployParams, bytes calldata retireParams, bytes calldata connectParams) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_BOUNCER_OWNER_CHECK);\\n        }\\n\\n        // Track the bouncer for the Comptroller\\n        address oldBouncer = bouncer;\\n        address newBouncer = address(0);\\n\\n        // Before saying goodbye, run all retirement logic\\n        if (hasBouncer()) {\\n            IComptrollerPeripheral(bouncer).retire(retireParams);\\n        }\\n\\n        if (contractNameHash != bytes32(0)) {\\n            // Ask the ministry to deploy a new Bouncer for us\\n            newBouncer = RegistryForComptrollerV0_04(registry).deployPeripheralContract(contractNameHash, deployParams, admin);\\n\\n            // Sanity, ensure a bouncer was deployed\\n            require(IBouncer(newBouncer).isBouncer());\\n\\n            // Call initialization hook\\n            IComptrollerPeripheral(newBouncer).connect(connectParams);\\n        }\\n\\n        // Set Comptroller's bouncer to newBouncer\\n        bouncer = newBouncer;\\n\\n        emit NewBouncer(oldBouncer, bouncer);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the 'limit supplying' flag to the given value (if they are different)\\n     * @dev Admin function to set value for 'limitSupplying'\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setLimitMinting(bool flagValue) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIMIT_MINTING_OWNER_CHECK);\\n        }\\n\\n        if (limitMinting != flagValue) {\\n            limitMinting = flagValue;\\n            emit LimitMintingFlagChanged(flagValue);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the 'limit borrowing' flag to the given value (if they are different)\\n     * @dev Admin function to set value for 'limitBorrowing'\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setLimitBorrowing(bool flagValue) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIMIT_BORROWING_OWNER_CHECK);\\n        }\\n\\n        if (limitBorrowing != flagValue) {\\n            limitBorrowing = flagValue;\\n            emit LimitBorrowingFlagChanged(flagValue);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the 'minBorrowAmountUsd' (scaled by 18)\\n     * @dev Admin function to set value for 'minBorrowAmountUsd'\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setMinBorrowAmountUsd(uint minBorrowAmountUsd_) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_MIN_BORROW_AMOUNT_USD_OWNER_CHECK);\\n        }\\n\\n        uint oldMinBorrowAmount = minBorrowAmountUsd;\\n        minBorrowAmountUsd = minBorrowAmountUsd_;\\n\\n        emit NewMinBorrowAmount(oldMinBorrowAmount, minBorrowAmountUsd);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the collateralFactor for a market\\n      * @dev Admin function to set per-market collateralFactor\\n      * @param cToken The market to set the factor on\\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\n        }\\n\\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\\n\\n        // Check collateral factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n        }\\n\\n        // Ensure liquidationFactor is greater or equal to the new collateralFactor\\n        uint marketLiquidationFactorMantissa = market.liquidationFactorMantissa;\\n        if (newCollateralFactorMantissa > marketLiquidationFactorMantissa) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_HIGHER_THAN_LIQUIDATION_FACTOR);\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        if (newCollateralFactorMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Set market's collateral factor to new collateral factor, remember old value\\n        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n        // Emit event with asset, old collateral factor, and new collateral factor\\n        emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the liquidationFactor for a market.\\n      *         Important : In order to avoid the possibility of existing positions becoming liquidateable -\\n      *                     This value can only be increased.\\n      * @dev Admin function to set per-market liquidationFactor\\n      * @param cToken The market to set the factor on\\n      * @param newLiquidationFactorMantissa The new liquidation factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setLiquidationFactor(CToken cToken, uint newLiquidationFactorMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_FACTOR_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_FACTOR_NO_EXISTS);\\n        }\\n\\n        Exp memory newLiquidationFactorExp = Exp({mantissa: newLiquidationFactorMantissa});\\n\\n        // Check liquidation factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: liquidationFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newLiquidationFactorExp)) {\\n            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_VALIDATION);\\n        }\\n\\n        // Ensure new liquidationFactor is greater or equal to the collateralFactor\\n        uint marketCollateralFactorMantissa = market.collateralFactorMantissa;\\n        if (newLiquidationFactorMantissa < marketCollateralFactorMantissa) {\\n            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_COLLATERAL_FACTOR);\\n        }\\n\\n        // Ensure new liquidation factor is strictly greater than the existing one\\n        uint oldLiquidationFactorMantissa = market.liquidationFactorMantissa;\\n        if (oldLiquidationFactorMantissa >= newLiquidationFactorMantissa) {\\n            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_EXISTING_FACTOR);\\n        }\\n\\n        // If liquidation factor != 0, fail if price == 0\\n        if (newLiquidationFactorMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Set market's liquidation factor to new liquidation factor, remember old value\\n        market.liquidationFactorMantissa = newLiquidationFactorMantissa;\\n\\n        // Emit event with asset, old liquidation factor, and new liquidation factor\\n        emit NewCollateralFactor(cToken, oldLiquidationFactorMantissa, newLiquidationFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * OLA_ADDITIONS : Added 'cToken' to support 'incentive per market'\\n      * @notice Sets liquidationIncentive\\n      * @dev Admin function to set liquidationIncentive\\n      * @param cToken The market to set the factor on\\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setLiquidationIncentive(CToken cToken, uint newLiquidationIncentiveMantissa) external returns (uint) {\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_INCENTIVE_NO_EXISTS);\\n        }\\n\\n        // OLA_ADDITIONS : All of the validations for 'newLiquidationIncentiveMantissa'\\n        Exp memory newLiquidationIncentiveExp = Exp({mantissa: newLiquidationIncentiveMantissa});\\n\\n        // Check liquidation incentive <= 0.3 AND >= 0.05 [5,30]\\n        Exp memory highLimit = Exp({mantissa: liquidationIncentiveMaxMantissa});\\n        Exp memory lowLimit = Exp({mantissa: liquidationIncentiveMinMantissa});\\n        if (lessThanExp(highLimit, newLiquidationIncentiveExp) || lessThanExp(newLiquidationIncentiveExp, lowLimit)) {\\n            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\n        }\\n\\n        // If liquidation incentive != 0, fail if price == 0 (Extra safety check)\\n        if (newLiquidationIncentiveMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_INCENTIVE_WITHOUT_PRICE);\\n        }\\n\\n        // Save current value for use in log\\n        uint oldLiquidationIncentiveMantissa = market.liquidationIncentiveMantissa;\\n\\n        // Set liquidation incentive to new incentive\\n        market.liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        // Emit event with old incentive, new incentive\\n        emit NewLiquidationIncentive(cToken, oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Add the market to the markets mapping and set it as listed\\n     * @dev Admin function to deploy a new cTokens and then set isListed and add support for the market\\n     * @param underlying The address of the asset (token or native) to be used for the market\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _supportNewMarket(address underlying,\\n        bytes32 contractNameHash,\\n        bytes calldata params,\\n        address interestRateModel,\\n        bytes calldata becomeImplementationData) external returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_NEW_MARKET_OWNER_CHECK);\\n        }\\n\\n        // We allow one instance of the same underlying-contractName combination\\n        if (existingMarketTypes[underlying][contractNameHash] != address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_NEW_MARKET_COMBINATION_CHECK);\\n        }\\n\\n        // IMPORTANT : No graceful failure after contract deployment !\\n        address deployedCToken = RegistryForComptrollerV0_04(registry).deployOToken(underlying, contractNameHash, params, interestRateModel, admin, becomeImplementationData);\\n\\n        CToken(deployedCToken).isCToken(); // Sanity check to make sure its really a CToken\\n\\n        // OLA_ADDITIONS : Changed to require\\n        // Legacy safety\\n        require(!markets[deployedCToken].isListed, \\\"SUPPORT_MARKET_EXISTS\\\");\\n\\n        // Save asset - contract combination\\n        existingMarketTypes[underlying][contractNameHash] = deployedCToken;\\n\\n        // OLA_ADDITIONS : Added 'liquidationFactorMantissa', 'liquidationIncentiveMantissa'\\n        markets[deployedCToken] = Market({isListed: true, collateralFactorMantissa: 0,\\n        liquidationFactorMantissa: 0, liquidationIncentiveMantissa: 0,\\n        activeCollateralUSDCap: 0, activeCollateralCTokenUsage: 0\\n        });\\n\\n        _addMarketInternal(deployedCToken);\\n\\n        emit MarketListed(CToken(deployedCToken));\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _addMarketInternal(address cToken) internal {\\n        // OLA_ADDITIONS : Added this 'max assets' limitation\\n        require(allMarkets.length <= maxAllowedAssets, \\\"Too many assets\\\");\\n\\n        for (uint i = 0; i < allMarkets.length; i ++) {\\n            require(allMarkets[i] != CToken(cToken), \\\"Already added\\\");\\n        }\\n        allMarkets.push(CToken(cToken));\\n\\n        // OLA_ADDITIONS : Initializing the market at the RainMaker as well\\n        if (hasRainMaker()) {\\n            RainMakerInterface(rainMaker)._supportMarket(cToken);\\n        }\\n    }\\n\\n    /**\\n      * OLA_ADDITIONS : This function\\n      * @notice Set the given active collateral caps (in USD) for the given cToken markets. Any action that brings total active collateral to or above borrow cap will revert.\\n      * @dev Admin function to set the active collateral caps. A active-collateral cap of 0 corresponds to unlimited active collateral.\\n      * @param cTokens The addresses of the markets (tokens) to change the active-collateral caps for\\n      * @param newActiveCollateralCaps The new active-collateral cap values in usd to be set. A value of 0 corresponds to unlimited borrowing.\\n      */\\n    function _setActiveCollateralCaps(CToken[] calldata cTokens, uint[] calldata newActiveCollateralCaps) external {\\n        require(msg.sender == admin, \\\"!Admin\\\");\\n\\n        uint numMarkets = cTokens.length;\\n        uint numActiveCollateralCaps = newActiveCollateralCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numActiveCollateralCaps, \\\"invalid input\\\");\\n\\n        for(uint i = 0; i < numMarkets; i++) {\\n            Market storage marketToJoin = markets[address(cTokens[i])];\\n\\n            require(marketToJoin.isListed,\\\"!listed\\\");\\n\\n            marketToJoin.activeCollateralUSDCap = newActiveCollateralCaps[i];\\n\\n            emit NewActiveCollateralCap(cTokens[i], newActiveCollateralCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to change the admin bank address\\n     * @param newAdminBankAddress The new admin bank address\\n     */\\n    function _setAdminBankAddress(address payable newAdminBankAddress) external {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n\\n        // Save current value for inclusion in log\\n        address oldAdminBankAddress = adminBankAddress;\\n\\n        // Store adminBankAddress with value newAdminBankAddress\\n        adminBankAddress = newAdminBankAddress;\\n\\n        // Emit NewAdminBankAddress(newAdminBankAddress, newAdminBankAddress)\\n        emit NewAdminBankAddress(oldAdminBankAddress, newAdminBankAddress);\\n    }\\n\\n    /**\\n      * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n      */\\n    function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external {\\n    \\trequire(msg.sender == admin || msg.sender == borrowCapGuardian, \\\"!admin||borrow cap guardian\\\");\\n\\n        uint numMarkets = cTokens.length;\\n        uint numBorrowCaps = newBorrowCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"invalid input\\\");\\n\\n        for(uint i = 0; i < numMarkets; i++) {\\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Borrow Cap Guardian\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n     */\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n\\n        // Save current value for inclusion in log\\n        address oldBorrowCapGuardian = borrowCapGuardian;\\n\\n        // Store borrowCapGuardian with value newBorrowCapGuardian\\n        borrowCapGuardian = newBorrowCapGuardian;\\n\\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\\n        }\\n\\n        // Save current value for inclusion in log\\n        address oldPauseGuardian = pauseGuardian;\\n\\n        // Store pauseGuardian with value newPauseGuardian\\n        pauseGuardian = newPauseGuardian;\\n\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\\n        require(markets[address(cToken)].isListed, \\\"!listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"!pause guardian||admin\\\");\\n        require(msg.sender == admin || state == true, \\\"!admin\\\");\\n\\n        mintGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Mint\\\", state);\\n        return state;\\n    }\\n\\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\\n        require(markets[address(cToken)].isListed, \\\"!listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"!pause guardian||admin\\\");\\n        require(msg.sender == admin || state == true, \\\"!admin\\\");\\n\\n        borrowGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Borrow\\\", state);\\n        return state;\\n    }\\n\\n    function _setTransferPaused(bool state) public returns (bool) {\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"!pause guardian||admin\\\");\\n        require(msg.sender == admin || state == true, \\\"!admin\\\");\\n\\n        transferGuardianPaused = state;\\n        emit ActionPaused(\\\"Transfer\\\", state);\\n        return state;\\n    }\\n\\n    /**\\n     * @notice Checks caller is admin\\n     */\\n    function isAdmin() internal view returns (bool) {\\n        return msg.sender == admin;\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS : This function\\n     * @notice Ensures all markets are updating their implementation from the Registry\\n     */\\n    function updateDelegatedImplementations(bytes calldata becomeImplementationData) external {\\n        require(isAdmin(), \\\"!admin\\\");\\n\\n        // Update all markets\\n        for (uint i = 0; i < allMarkets.length; i ++) {\\n            CToken oToken = allMarkets[i];\\n            require(CTokenDelegatorInterface(address(oToken)).updateImplementationFromRegistry(false, becomeImplementationData), \\\"Update failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Return all of the markets\\n     * @dev The automatic getter may be used to access an individual market.\\n     * @return The list of market addresses\\n     */\\n    function getAllMarkets() public view returns (CToken[] memory) {\\n        return allMarkets;\\n    }\\n\\n\\n    /**\\n     * Fetches the underlying price from the ministry.\\n     * 0 means an error.\\n     */\\n    function getUnderlyingPriceForCToken(address cToken) internal view returns (uint256) {\\n        return RegistryForComptrollerV0_04(registry).getPriceForUnderling(cToken);\\n    }\\n\\n    function hasRainMaker() view public returns (bool) {\\n        return address(rainMaker) != address(0);\\n    }\\n\\n    function hasBouncer() view public returns (bool) {\\n        return address(bouncer) != address(0);\\n    }\\n\\n    function isAccountApproved(address account) view external returns (bool) {\\n        return isAccountApprovedInternal(account);\\n    }\\n\\n    /**\\n     * @notice This function assumes that any account not actively approved is denied\\n     *         and so, if no bouncer is set, the response is always false.\\n     */\\n    function isAccountApprovedInternal(address account) view internal returns (bool) {\\n        if (hasBouncer()) {\\n            return IBouncerForComptroller(bouncer).isAccountApproved(account);\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/Comptroller/ComptrollerStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../OTokens/CToken.sol\\\";\\nimport \\\"../PriceOracle/PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n    * @notice Registry address\\n    */\\n    address public registry;\\n\\n    address public implementation;\\n\\n    // OLA_ADDITIONS : This contract name hash\\n    bytes32 constant public unitrollerContractHash = keccak256(\\\"Unitroller\\\");\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint public closeFactorMantissa;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint public maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint collateralFactorMantissa;\\n\\n        /**\\n         * OLA_ADDITIONS : Added the field liquidationFactorMantissa.\\n         * @notice Multiplier representing the borrow to collateral ratio from which liquidations can occur in this market.\\n         *  For instance, 0.9 indicates that liquidations can occur when the borrowed value reaches 90% (or more) of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         *  Must be greater or equal to 'collateralFactorMantissa'.\\n         */\\n        uint liquidationFactorMantissa;\\n\\n        /**\\n         * @notice Multiplier representing the discount on collateral that a liquidator receives\\n         * OLA_ADDITIONS : Now supports incentives per market (Added this)\\n         */\\n        uint liquidationIncentiveMantissa;\\n\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n\\n        // OLA_ADDITIONS : Fields after this line\\n\\n        // @notice Active collateral caps enforced by  for each cToken address. Defaults to zero which corresponds to unlimited active collateral.\\n        uint activeCollateralUSDCap;\\n\\n        // @notice Amount of cTokens actively used as collateral.\\n        uint activeCollateralCTokenUsage;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n}\\n\\ncontract ComptrollerV4Storage is ComptrollerV3Storage {\\n    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n    address public borrowCapGuardian;\\n\\n    // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n    mapping(address => uint) public borrowCaps;\\n}\\n\\ncontract ComptrollerV5Storage is ComptrollerV4Storage {\\n\\n}\\n\\ncontract ComptrollerStorageOlaV0_01 is ComptrollerV5Storage {\\n    /// @notice Borrow requests for less than this USD amount will not be approved.\\n    uint public minBorrowAmountUsd;\\n\\n    // @notice an address to turn to in order to distribute tokens for participation\\n    address public rainMaker;\\n}\\n\\ncontract ComptrollerStorageOlaV0_02 is ComptrollerStorageOlaV0_01 {\\n    // The address to send the 'Admin Part' when reducing reserves.\\n    address payable public adminBankAddress;\\n\\n    // Underlying asset -> contractNameHash -> deployed oTokens\\n    mapping(address => mapping(bytes32 => address)) public existingMarketTypes;\\n\\n    // @notice An address to turn to in order to check if an account is approved for specific actions.\\n    address public bouncer;\\n\\n    // If on, supplying will be limited only to approved accounts\\n    bool public limitMinting;\\n    // If on, borrowing will be limited only to approved accounts\\n    bool public limitBorrowing;\\n}\\n\\n/// @notice Time period (in seconds) in which liquidation is to be limited (e.g: 60 for one minute)\\n//    uint public freshLiquidationLimitedPeriod;\\n\\n/// @notice The liquidators that are allowed to liquidate while still in the 'freshLiquidationLimitedPeriod'\\n//    mapping(address => bool) whitelistedLiquidators;\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/Comptroller/Unitroller.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../ErrorReporter/ErrorReporter.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\n\\ninterface RegistryForUnitroller {\\n    function getImplementationForLn(address lnUnitroller, bytes32 contractNameHash) external returns (address);\\n    function getLnVersion(address lnUnitroller) external returns (uint256);\\n    function updateLnVersion(uint256 newVersion) external returns (bool);\\n}\\n\\n/**\\n * @title ComptrollerCore\\n * @dev Storage for the Comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their Comptroller.\\n */\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\n    /**\\n     * @notice Emitted when pendingComptrollerImplementation is accepted, which means Comptroller implementation is updated\\n     */\\n    event NewImplementation(address indexed oldImplementation, address indexed newImplementation);\\n\\n    /**\\n     * @notice Emitted when implementation is not changed under a system version update\\n     */\\n    event ImplementationDidNotChange(address indexed implementation);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor(address registry_) public {\\n        // Set admin to caller\\n        admin = msg.sender;\\n\\n        // Set once and do not change\\n        registry = registry_;\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS : This function.\\n     * Should be registered before calling this function.\\n     */\\n    function initialize() external {\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n        require(implementation == address(0), \\\"Already initialized\\\");\\n\\n        address comptrollerImplementation = RegistryForUnitroller(address(registry)).getImplementationForLn(address(this), unitrollerContractHash);\\n\\n        implementation = comptrollerImplementation;\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Updates the LN to the given version. And then refreshes implementation addresses from the Registry\\n     * for this contract (unitroller) and for all markets (OTokenDelegators)\\n     * @dev Admin function to update version on LN\\n     * @return uint true=success, otherwise a failure (Will revert on failure)\\n     */\\n    function _upgradeLnSystemVersion(uint256 newSystemVersion, bytes calldata becomeImplementationData) external returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.UPDATE_LN_VERSION_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Update Version\\n        bool updateSuccessful = RegistryForUnitroller(registry).updateLnVersion(newSystemVersion);\\n        require(updateSuccessful, \\\"Version update failed\\\");\\n\\n        // First, update the implementation used by the unitroller\\n        address comptrollerImplementation = RegistryForUnitroller(registry).getImplementationForLn(address(this), unitrollerContractHash);\\n\\n        if (comptrollerImplementation != implementation) {\\n            address oldImplementation = implementation;\\n            implementation = comptrollerImplementation;\\n            emit NewImplementation(oldImplementation, implementation);\\n        } else {\\n            emit ImplementationDidNotChange(implementation);\\n        }\\n\\n        // Update all of the implementation addresses\\n        delegateToImplementation(abi.encodeWithSignature(\\\"updateDelegatedImplementations(bytes)\\\", becomeImplementationData));\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() public returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\\n        if (msg.sender != pendingAdmin || pendingAdmin == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Delegates execution to the implementation contract\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n     * @param data The raw data to delegatecall\\n     * @return The returned bytes from the delegatecall\\n     */\\n    function delegateToImplementation(bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returnData) = implementation.delegatecall(data);\\n        assembly {\\n            if eq(success, 0) {\\n                revert(add(returnData, 0x20), returndatasize)\\n            }\\n        }\\n        return returnData;\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    function () payable external {\\n        // delegate all other functions to current implementation\\n        (bool success, ) = implementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\n              default { return(free_mem_ptr, returndatasize) }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Peripheral/ComptrollerPeripherals/Bouncer/IBouncer.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\ncontract IBouncer {\\n    bool public isBouncer = true;\\n    bytes32 public contractNameHash;\\n\\n    function isAccountApproved(address account) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/Ola/Peripheral/ComptrollerPeripherals/Bouncer/WhiteListBouncer.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"./IBouncer.sol\\\";\\nimport \\\"../IComptrollerPeripheral.sol\\\";\\n\\ncontract WhiteListBouncer is IBouncer, IComptrollerPeripheral {\\n    bytes32 constant public WhiteListBouncerContractHash = keccak256(\\\"WhiteListBouncer\\\");\\n    address public admin;\\n    address public comptroller;\\n\\n    mapping(address => bool) public whitelist;\\n\\n    event WhitelistedAddressAdded(address addr);\\n    event WhitelistedAddressRemoved(address addr);\\n\\n    constructor(address _comptroller, address _admin) public {\\n        comptroller = _comptroller;\\n\\n        admin = _admin;\\n\\n        contractNameHash = WhiteListBouncerContractHash;\\n    }\\n\\n    /**\\n     * @notice Periphery hook. Does nothing at the moment.\\n     */\\n    function connect(bytes calldata params) external {\\n\\n    }\\n\\n    /**\\n     * @notice Periphery hook. Does nothing at the moment.\\n     */\\n    function retire(bytes calldata params) external {\\n\\n    }\\n\\n    function isAccountApproved(address account) external view returns (bool) {\\n        return whitelist[account];\\n    }\\n\\n    // @notice Adds the given account to the whitelist\\n    // @param account The account to add\\n    function approveAccount(address account) external {\\n        require(isAdmin(), \\\"only admin can approve account\\\");\\n        approveAccountInternal(account);\\n    }\\n\\n    // @notice Adds the given account to the whitelist\\n    // @param accounts The accounts to add\\n    function approveAccounts(address[] calldata accounts) external {\\n        require(isAdmin(), \\\"only admin can approve accounts\\\");\\n        for (uint256 i =0; i < accounts.length; i++) {\\n            approveAccountInternal(accounts[i]);\\n        }\\n    }\\n\\n    // @notice Removes the given account from the whitelist\\n    // @param account The account to remove\\n    function denyAccount(address account) external {\\n        require(isAdmin(), \\\"only admin can set deny account\\\");\\n        denyAccountInternal(account);\\n    }\\n\\n    // @notice Removes the given account from the whitelist\\n    // @param accounts The accounts to remove\\n    function denyAccounts(address[] calldata accounts) external {\\n        require(isAdmin(), \\\"only admin can set deny accounts\\\");\\n        for (uint256 i =0; i < accounts.length; i++) {\\n            denyAccountInternal(accounts[i]);\\n        }\\n    }\\n\\n    // @notice Adds the account to the whitelist if it is not there yet,\\n    // @param account The account to add\\n    function approveAccountInternal(address account) internal {\\n        if (!whitelist[account]) {\\n            whitelist[account] = true;\\n            emit WhitelistedAddressAdded(account);\\n        }\\n    }\\n\\n    // @notice Removes the account to the whitelist if it is there,\\n    // @param account The account to remove\\n    function denyAccountInternal(address account) internal {\\n        if (whitelist[account]) {\\n            whitelist[account] = false;\\n            emit WhitelistedAddressRemoved(account);\\n        }\\n    }\\n\\n    /**\\n         * @notice Checks caller is admin\\n         */\\n    function isAdmin() internal view returns (bool) {\\n        return msg.sender == admin;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ola/Peripheral/ComptrollerPeripherals/Bouncer/deployers/WhiteListBouncerDeployer.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../WhiteListBouncer.sol\\\";\\n\\ncontract WhiteListBouncerDeployer {\\n    function deploy(address _comptroller, address _admin) external returns (address) {\\n        WhiteListBouncer whitelistBouncer = new WhiteListBouncer(_comptroller, _admin);\\n\\n        return address(whitelistBouncer);\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/versions/0.03/ComptrollerV0_03.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../OTokens/CToken.sol\\\";\\nimport \\\"../../ErrorReporter/ErrorReporter.sol\\\";\\nimport \\\"../../PriceOracle/PriceOracle.sol\\\";\\nimport \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../../Comptroller/ComptrollerStorage.sol\\\";\\nimport \\\"../../Comptroller/Unitroller.sol\\\";\\nimport \\\"../../../../Peripheral/ComptrollerPeripherals/RainMaker/RainMakerInterface.sol\\\";\\nimport \\\"../../../../Peripheral/ComptrollerPeripherals/Bouncer/IBouncer.sol\\\";\\nimport \\\"../../../../Peripheral/ComptrollerPeripherals/IComptrollerPeripheral.sol\\\";\\n\\ninterface RegistryForComptrollerV0_03 {\\n    function deployOToken(address underlying,\\n        bytes32 contractNameHash,\\n        bytes calldata params,\\n        address interestRateModel,\\n        address admin,\\n        bytes calldata becomeImplementationData) external returns (address);\\n\\n    function deployPeripheralContract(bytes32 contractNameHash,\\n        bytes calldata params,\\n        address contractAdmin) external returns (address);\\n\\n    function getPriceForUnderling(address cToken) external view returns (uint256);\\n}\\n\\ninterface IBouncerForComptroller {\\n    function isAccountApproved(address account) external view returns (bool);\\n}\\n\\n/**\\n * @title Ola's Comptroller Contract V0.02\\n * @author Ola\\n * -- Changes form V0.02 :\\n * --- Adds 'changeMinistry' function\\n */\\ncontract ComptrollerV0_03 is ComptrollerStorageOlaV0_02, ComptrollerInterface, ComptrollerErrorReporter, ExponentialNoError {\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(CToken cToken);\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(CToken cToken, address account);\\n\\n    /// @notice Emitted when an account exits a market\\n    event MarketExited(CToken cToken, address account);\\n\\n    /// @notice Emitted when a collateral factor is changed by admin\\n    event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\\n\\n    /// @notice Emitted when a liquidation factor is changed by admin\\n    event NewLiquidationFactor(CToken cToken, uint oldLiquidationFactorMantissa, uint newLiquidationFactorMantissa);\\n\\n    /// @notice Emitted when liquidation incentive is changed by admin\\n    /// OLA_ADDITIONS : Added 'cToken' to support 'liquidation incentive per market'\\n    event NewLiquidationIncentive(CToken ctoken, uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the Rain Maker is changed\\n    event NewRainMaker(address oldRainMaker, address newRainMaker);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the bouncer is changed\\n    event NewBouncer(address oldBouncer, address newBouncer);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the min borrow amount is changed\\n    event NewMinBorrowAmount(uint oldMinBorrowAmount, uint newMinBorrowAmount);\\n\\n    /// @notice Emitted when pause guardian is changed\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    /// @notice Emitted when an action is paused globally\\n    event ActionPaused(string action, bool pauseState);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event ActionPaused(CToken cToken, string action, bool pauseState);\\n\\n    /// @notice Emitted when borrow cap for a cToken is changed\\n    event NewBorrowCap(CToken indexed cToken, uint newBorrowCap);\\n\\n    /// @notice Emitted when borrow cap guardian is changed\\n    event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\\n\\n    /// @notice Emitted when admin bank address is changed\\n    event NewAdminBankAddress(address oldAdminBankAddress, address newAdminBankAddress);\\n\\n    /// @notice Emitted when active collateral cap for a cToken is changed\\n    event NewActiveCollateralCap(CToken indexed cToken, uint newActiveCollateralCap);\\n\\n    /// @notice Emitted when active collateral usage for a cToken is changed\\n    event ActiveCollateralUsageChange(CToken indexed cToken, uint oldCollateralUsage, uint newCollateralUsage);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the 'Limit Minting' flag is changed\\n    event LimitMintingFlagChanged(bool newValue);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the 'Limit Borrowing' flag is changed\\n    event LimitBorrowingFlagChanged(bool newValue);\\n\\n    // No collateralFactorMantissa may exceed this value\\n    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // No liquidationFactorMantissa may exceed this value\\n    uint internal constant liquidationFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // liquidationIncentiveMantissa of any market must be strictly greater than this value\\n    // OLA_ADDITIONS: This field\\n    uint internal constant liquidationIncentiveMinMantissa = 1.05e18; // 1.05\\n\\n    // liquidationIncentiveMantissa of any market must not exceed this value\\n    // OLA_ADDITIONS: This field\\n    uint internal constant liquidationIncentiveMaxMantissa = 1.3e18; // 1.3\\n\\n    // Hard coded value to limit amount of asset in a single LN\\n    // OLA_ADDITIONS: This field\\n    uint internal constant maxAllowedAssets = 25;\\n\\n    // Hard coded value for the liquidation close factor\\n    // OLA_ADDITIONS: This field\\n    uint internal constant fixedCloseFactorMantissa = 0.5e18;\\n\\n    constructor() public {\\n        admin = msg.sender;\\n    }\\n\\n    /*** Registry ***/\\n\\n    function getRegistry() public view returns (address) {\\n        return address(registry);\\n    }\\n\\n    /*** Assets You Are In ***/\\n\\n    /**\\n     * @notice Returns the assets an account has entered\\n     * @param account The address of the account to pull assets for\\n     * @return A dynamic list with the assets the account has entered\\n     */\\n    function getAssetsIn(address account) external view returns (CToken[] memory) {\\n        CToken[] memory assetsIn = accountAssets[account];\\n\\n        return assetsIn;\\n    }\\n\\n    /**\\n     * @notice Returns whether the given account is entered in the given asset\\n     * @param account The address of the account to check\\n     * @param cToken The cToken to check\\n     * @return True if the account is in the asset, otherwise false.\\n     */\\n    function checkMembership(address account, CToken cToken) external view returns (bool) {\\n        return markets[address(cToken)].accountMembership[account];\\n    }\\n\\n    /**\\n     * @notice Add assets to be included in account liquidity calculation\\n     * @param cTokens The list of addresses of the cToken markets to be enabled\\n     * @return Success indicator for whether each corresponding market was entered\\n     */\\n    function enterMarkets(address[] memory cTokens) public returns (uint[] memory) {\\n        uint len = cTokens.length;\\n\\n        uint[] memory results = new uint[](len);\\n        for (uint i = 0; i < len; i++) {\\n            CToken cToken = CToken(cTokens[i]);\\n\\n            // OLA_ADDITIONS : Emitting Failure events\\n            Error error = addToMarketInternal(cToken, msg.sender);\\n            if (error != Error.NO_ERROR) {\\n                fail(error, FailureInfo.ENTER_MARKET_NOT_ALLOWED);\\n            }\\n\\n            results[i] = uint(error);\\n        }\\n\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to activate this additional amount of collateral.\\n     * @param cToken The cToken to verify the active collateral cap against\\n     * @param market The market to verify the active collateral cap against (assumes the given market is listed)\\n     * @param cTokensToActivate The amount of cTokens being activated as collateral\\n     * @return 0 if the activation is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function collateralActivationAllowed(CToken cToken, Market memory market, uint256 cTokensToActivate) internal view returns (uint) {\\n        uint256 activeCollateralUSDCap = market.activeCollateralUSDCap;\\n        uint256 activeCTokenUsage = market.activeCollateralCTokenUsage;\\n\\n        // 0 Means \\\"No Cap\\\"\\n        if (activeCollateralUSDCap == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // No amount ? no problem\\n        if (cTokensToActivate == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // Calculate new usage USD value\\n        uint newCTokenUsage = add_(activeCTokenUsage, cTokensToActivate);\\n\\n        uint exchangeRateMantissa = cToken.exchangeRateStored();\\n\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateMantissa});\\n\\n        // Get the normalized price of the asset\\n        uint oraclePriceMantissa = getUnderlyingPriceForCToken(address(cToken));\\n\\n        if (oraclePriceMantissa == 0) {\\n            return uint(Error.PRICE_ERROR);\\n        }\\n\\n        Exp memory oraclePrice = Exp({mantissa: oraclePriceMantissa});\\n\\n        uint newUnderlyingUsage = mul_(newCTokenUsage, exchangeRate);\\n        uint newUsageValueInUsd = mul_(newUnderlyingUsage, oraclePrice);\\n\\n        // Is it within the allowed cap ?\\n        if (newUsageValueInUsd <= activeCollateralUSDCap) {\\n            // All good here\\n            return uint(Error.NO_ERROR);\\n        } else {\\n            return uint(Error.TOO_MUCH_COLLATERAL_ACTIVATION);\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases the underlying actively used as collateral.\\n     */\\n    function increaseActiveCollateralUsed(Market storage market, uint256 cTokensActivated, CToken cToken) internal {\\n        uint oldCTokenUsage = market.activeCollateralCTokenUsage;\\n        uint newCTokenUsage = add_(oldCTokenUsage, cTokensActivated);\\n        market.activeCollateralCTokenUsage = newCTokenUsage;\\n        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);\\n    }\\n\\n    /**\\n     * @notice Reduces the underlying actively used as collateral.\\n    */\\n    function reduceActiveCollateralUsed(Market storage market, uint256 cTokensDeactivated, CToken cToken) internal {\\n        uint oldCTokenUsage = market.activeCollateralCTokenUsage;\\n        uint newCTokenUsage = sub_(oldCTokenUsage, cTokensDeactivated);\\n        market.activeCollateralCTokenUsage = newCTokenUsage;\\n        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param cToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {\\n        Market storage marketToJoin = markets[address(cToken)];\\n\\n        if (!marketToJoin.isListed) {\\n            // market is not listed, cannot join\\n            return Error.MARKET_NOT_LISTED;\\n        }\\n\\n        if (marketToJoin.accountMembership[borrower] == true) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n\\n\\n        // NOTE : This function call will\\n        uint cTokensToBeActivatedAsCollateral = cToken.balanceOf(borrower);\\n        uint collateralActivationError = collateralActivationAllowed(cToken, marketToJoin, cTokensToBeActivatedAsCollateral);\\n\\n        // OLA_ADDITIONS : This test\\n        if (collateralActivationError != uint(Error.NO_ERROR)) {\\n            return Error(collateralActivationError);\\n        }\\n\\n        // Increase active collateral used\\n        increaseActiveCollateralUsed(marketToJoin, cTokensToBeActivatedAsCollateral, cToken);\\n\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(cToken);\\n\\n        emit MarketEntered(cToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Removes asset from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *  or be providing necessary collateral for an outstanding borrow.\\n     * @param cTokenAddress The address of the asset to be removed\\n     * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarket(address cTokenAddress) external returns (uint) {\\n        CToken cToken = CToken(cTokenAddress);\\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\\n        require(oErr == 0, \\\"Snapshot failed\\\"); // semi-opaque error code\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (amountOwed != 0) {\\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\\n        if (allowed != 0) {\\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\n        }\\n\\n        Market storage marketToExit = markets[cTokenAddress];\\n\\n        /* Return true if the sender is not already \u2018in\u2019 the market */\\n        if (marketToExit.accountMembership[msg.sender]) {\\n            uint err = exitMarketInternal(marketToExit, address(cToken), msg.sender);\\n\\n            // If no err, reduce\\n            if (err != uint(Error.NO_ERROR)) {\\n                return err;\\n            }\\n\\n            // Reduce the active collateral usage - Only if removal from market\\n            reduceActiveCollateralUsed(marketToExit, tokensHeld, cToken);\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Checks if the account is done (no supply and no borrow at all) in the given market\\n     * and if so, exits the market for the user.\\n     * @dev .\\n     * @param cTokenAddress The address of the asset to be removed\\n     * @param account The account which would exit the market (if done with it)\\n     * @return If done - returns the result of 'exitMarketInternal' and if not done - \\\"No error\\\".\\n     */\\n    function exitMarketIfDone(address cTokenAddress, address account) internal returns (uint) {\\n        CToken cToken = CToken(cTokenAddress);\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(account);\\n        require(oErr == 0, \\\"Snapshot failed\\\"); // semi-opaque error code\\n\\n        if (tokensHeld == 0 && amountOwed == 0) {\\n            Market storage marketToExit = markets[cTokenAddress];\\n\\n            /* Return true if the sender is not already \u2018in\u2019 the market */\\n            if (marketToExit.accountMembership[account]) {\\n                return exitMarketInternal(marketToExit, cTokenAddress, account);\\n            } else {\\n                return uint(Error.NO_ERROR);\\n            }\\n        } else {\\n            return uint(Error.NO_ERROR);\\n        }\\n    }\\n\\n    /**\\n      * @notice Performs the state change that Removes asset from sender's account liquidity calculation\\n      * @notice This function will revert if inconsistencies are found within the 'accountsAssets' mechanism\\n      * @dev This function should only be called after ensuring the user can exit the market (e.g no outstanding\\n      * debts or active collateral) AND only for users who are actually in the market.\\n      * @param cTokenAddress The address of the asset to be removed\\n      * @param account The account which would exit the market\\n      * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarketInternal(Market storage marketToExit, address cTokenAddress, address account) internal returns (uint) {\\n        /* Set cToken account membership to false */\\n        delete marketToExit.accountMembership[account];\\n\\n        /* Delete cToken from the account\u2019s list of assets */\\n        // load into memory for faster iteration\\n        CToken[] memory userAssetList = accountAssets[account];\\n        uint len = userAssetList.length;\\n        uint assetIndex = len;\\n        for (uint i = 0; i < len; i++) {\\n            if (userAssetList[i] == CToken(cTokenAddress)) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        require(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        CToken[] storage storedList = accountAssets[account];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.length--;\\n\\n        emit MarketExited(CToken(cTokenAddress), account);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Policy Hooks ***/\\n\\n    /**\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\n     * @param cToken The market to verify the mint against\\n     * @param minter The account which would get the minted tokens\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!mintGuardianPaused[cToken], \\\"paused\\\");\\n\\n        // Shh - currently unused\\n        minter;\\n        mintAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // OLA_ADDITIONS : Can limit minting\\n        // If borrowing is limited the account has to be approved\\n        if (limitMinting && !isAccountApprovedInternal(minter)) {\\n            return uint (Error.NOT_APPROVED_TO_MINT);\\n        }\\n\\n        // Keep the flywheel moving\\n        if (hasRainMaker()) {\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, minter);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates mint and reverts on rejection. May emit logs.\\n     * @param cToken Asset being minted\\n     * @param minter The address minting the tokens\\n     * @param actualMintAmount The amount of the underlying asset being minted\\n     * @param mintTokens The number of tokens being minted\\n     */\\n    function mintVerify(address cToken, address minter, uint actualMintAmount, uint mintTokens) external {\\n        // OLA_ADDITIONS : All from here\\n        // only cTokens may call 'mintVerify'\\n        require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n        // Get market + safety\\n        Market storage marketToMintIn = markets[address(cToken)];\\n        require(marketToMintIn.isListed, \\\"!listed\\\");\\n\\n        // We only care about active collateral caps if the minter is part of the market\\n        if (marketToMintIn.accountMembership[minter]) {\\n            // Is activating that much new collateral allowed ?\\n            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToMintIn, mintTokens);\\n            require(collateralActivationError == uint(Error.NO_ERROR), \\\"activation not allowed\\\");\\n\\n            // All seems to be ok, increase the usage count\\n            increaseActiveCollateralUsed(marketToMintIn, mintTokens, CToken(cToken));\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\n     * @param cToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint) {\\n        uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, redeemer);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[cToken].accountMembership[redeemer]) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, , uint shortfall, ) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0, true);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\n     * @param cToken Asset being redeemed\\n     * @param redeemer The address redeeming the tokens\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external {\\n        // Require tokens is zero or amount is also zero\\n        if (redeemTokens == 0 && redeemAmount > 0) {\\n            revert(\\\"redeemTokens zero\\\");\\n        }\\n\\n        // OLA_ADDITIONS : All from here\\n        // only cTokens may call 'redeemVerify'\\n        require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n        // Get market + safety\\n        Market storage marketToRedeemFrom = markets[address(cToken)];\\n        require(marketToRedeemFrom.isListed, \\\"!listed\\\");\\n\\n        // We only care about active collateral caps if the minter is in the market\\n        if (marketToRedeemFrom.accountMembership[redeemer]) {\\n            // Some cleanups, if the user is done with this market\\n            require(exitMarketIfDone(cToken, redeemer) == uint(Error.NO_ERROR), \\\"Exit failure\\\");\\n\\n            // The redeemer is reducing the collateral value in a market they are part of.\\n            // let's reduce the used active collateral.\\n            reduceActiveCollateralUsed(marketToRedeemFrom, redeemTokens, CToken(cToken));\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param cToken The market to verify the borrow against\\n     * @param borrower The account which would borrow the asset\\n     * @param borrowAmount The amount of underlying the account would borrow\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!borrowGuardianPaused[cToken], \\\"paused\\\");\\n\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // OLA_ADDITIONS : Can limit borrow\\n        // If borrowing is limited the account has to be approved\\n        if (limitBorrowing && !isAccountApprovedInternal(borrower)) {\\n            return uint (Error.NOT_APPROVED_TO_BORROW);\\n        }\\n\\n        if (!markets[cToken].accountMembership[borrower])\\n{\\n            // only cTokens may call borrowAllowed if borrower not in market\\n            require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n            // attempt to add borrower to the market\\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\\n            if (err != Error.NO_ERROR) {\\n                return uint(err);\\n            }\\n\\n            // it should be impossible to break the important invariant\\n            assert(markets[cToken].accountMembership[borrower]);\\n        }\\n\\n        if (getUnderlyingPriceForCToken(cToken) == 0) {\\n            return uint(Error.PRICE_ERROR);\\n        }\\n\\n        uint borrowCap = borrowCaps[cToken];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint totalBorrows = CToken(cToken).totalBorrows();\\n            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);\\n            require(nextTotalBorrows < borrowCap, \\\"Borrow cap reached\\\");\\n        }\\n\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, , uint shortfall, uint borrowAmountUsd) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount, true);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        // OLA_ADDITIONS : Adds 'min borrow usd' requirement\\n        if (borrowAmountUsd < minBorrowAmountUsd) {\\n            return uint(Error.TOO_LITTLE_BORROW);\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            uint borrowIndex = CToken(cToken).borrowIndex();\\n            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);\\n            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates borrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset whose underlying is being borrowed\\n     * @param borrower The address borrowing the underlying\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\n     */\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external {\\n        // Shh - currently unused\\n        cToken;\\n        borrower;\\n        borrowAmount;\\n\\n        // Uncomment if adding logic\\n        // Only cTokens may call 'borrowVerify'\\n        // require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param cToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which would borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint) {\\n        // Shh - currently unused\\n        payer;\\n        borrower;\\n        repayAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            uint borrowIndex = CToken(cToken).borrowIndex();\\n            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);\\n            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset being repaid\\n     * @param payer The address repaying the borrow\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint actualRepayAmount,\\n        uint borrowerIndex) external {\\n\\n        // Only cTokens may call 'repayBorrowVerify'\\n        require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n        // Some cleanups, if the user is done with this market\\n        require(exitMarketIfDone(cToken, borrower) == uint(Error.NO_ERROR), \\\"Exit failure\\\");\\n    }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint) {\\n        // Shh - currently unused\\n        liquidator;\\n\\n        if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* The borrower must have shortfall in order to be liquidateable */\\n        // OLA_ADDITIONS : Use liquidation factor for liquidation calculation\\n        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower, false);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall == 0) {\\n            return uint(Error.INSUFFICIENT_SHORTFALL);\\n        }\\n\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\n        uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);\\n        // OLA_ADDITIONS : Using the constant value instead of the storage one ('closeFactorMantissa')\\n        uint maxClose = mul_ScalarTruncate(Exp({mantissa: fixedCloseFactorMantissa}), borrowBalance);\\n        if (repayAmount > maxClose) {\\n            return uint(Error.TOO_MUCH_REPAY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint actualRepayAmount,\\n        uint seizeTokens) external {\\n        // Shh - currently unused\\n        cTokenBorrowed;\\n        cTokenCollateral;\\n        liquidator;\\n        borrower;\\n        actualRepayAmount;\\n        seizeTokens;\\n\\n        // Uncomment if adding logic\\n        // Only cTokens may call 'liquidateBorrowVerify'\\n        // require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint) {\\n        // OLA_ADDITIONS : Preventing LN admin from stopping liquidations (By removing the setter for the flag)\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        // require(!seizeGuardianPaused, \\\"seize is paused\\\");\\n\\n        // Shh - currently unused\\n        seizeTokens;\\n\\n        if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {\\n            return uint(Error.COMPTROLLER_MISMATCH);\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cTokenCollateral);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, borrower);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, liquidator);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates seize and reverts on rejection. May emit logs.\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external {\\n        // Shh - currently unused\\n        cTokenCollateral;\\n        cTokenBorrowed;\\n        liquidator;\\n        borrower;\\n        seizeTokens;\\n\\n        // Uncomment if adding logic\\n        // Only cTokens may call 'seizeVerify'\\n        // require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param cToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!transferGuardianPaused, \\\"transfer paused\\\");\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        uint allowed = redeemAllowedInternal(cToken, src, transferTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, src);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, dst);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates transfer and reverts on rejection. May emit logs.\\n     * IMPORTANT : This function is also called from a cToken's 'seizeInternal', so, it is\\n     *             imperative to make sure that any change to this function is in line with\\n     *             the logic requirements of 'seizeInternal'.\\n     * @param cToken Asset being transferred\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     */\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external {\\n        // OLA_ADDITIONS : All from here\\n        // only cTokens may call 'transferVerify'\\n        require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n        // Get market + safety\\n        Market storage marketToTransferIn = markets[address(cToken)];\\n        require(marketToTransferIn.isListed, \\\"!listed\\\");\\n\\n        bool srcMembership = marketToTransferIn.accountMembership[src];\\n        bool dstMembership = marketToTransferIn.accountMembership[dst];\\n\\n        // If no side is in the market, the active collateral is not changed.\\n        // If both of them are in the market, the active collateral stays the same.\\n        if (srcMembership == dstMembership) {\\n            return;\\n        } else if (srcMembership) {\\n            // This is an easy one, active collateral usage only decreases\\n            return reduceActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));\\n        } else if (dstMembership) {\\n            // This is a complex one. The dst might not be able to receive the transferred cTokens if\\n            // it will exceed the allowed active collateral cap.\\n            // So, let's check whether activating that much new collateral is allowed.\\n            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToTransferIn, transferTokens);\\n            require(collateralActivationError == uint(Error.NO_ERROR), \\\"Collateral activation is not allowed\\\");\\n\\n            // All seems to be ok, increase the usage count\\n            increaseActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));\\n        }\\n    }\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint sumCollateral;\\n        uint sumBorrowPlusEffects;\\n        uint cTokenBalance;\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n        uint oraclePriceMantissa;\\n        // OLA_ADDITIONS : Renamed from 'collateralFactor' to 'collateralOrLiquidationFactor'\\n        Exp collateralOrLiquidationFactor;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToDenom;\\n\\n        // OLA_ADDITIONS : Added 'borrowAmountUsd' for \\\"min borrow usd check\\\"\\n        uint borrowAmountUsd;\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, true);\\n\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * OLA ADDITIONS : This function\\n     * @notice Determine the current account liquidity wrt liquidation requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of liquidation requirements,\\n     *          account shortfall below liquidation requirements)\\n     */\\n    function getAccountLiquidityByLiquidationFactor(address account) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, false);\\n\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidityInternal(address account, bool useCollateralFactor) internal view returns (Error, uint, uint) {\\n        // OLA_ADDITIONS : added 'useCollateralFactor' + changed from direct 'return' to 'de-construct and return'\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, useCollateralFactor);\\n        return (err, liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) public view returns (uint, uint, uint) {\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, true);\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS : This function\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of liquidation requirements,\\n     *          hypothetical account shortfall below liquidation requirements)\\n     */\\n    function getHypotheticalAccountLiquidityByLiquidationFactor(\\n        address account,\\n        address cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, false);\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @param useCollateralFactor True - use the \\\"default\\\" 'collateralFactorMantissa', False - use 'liquidationFactorMantissa'\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements,\\n     *          USD value of the given borrowAmount)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        CToken cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount,\\n        // OLA_ADDITIONS : added 'useCollateralFactor'\\n        bool useCollateralFactor) internal view returns (Error, uint, uint, uint) {\\n\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n        uint oErr;\\n\\n        // For each asset the account is in\\n        CToken[] memory assets = accountAssets[account];\\n        for (uint i = 0; i < assets.length; i++) {\\n            CToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the cToken\\n            (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\\n            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                return (Error.SNAPSHOT_ERROR, 0, 0, 0);\\n            }\\n\\n            // OLA_ADDITIONS : Added the distinction between using collateralFactorMantissa and liquidationFactorMantissa\\n            if (useCollateralFactor) {\\n                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});\\n            } else {\\n                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].liquidationFactorMantissa});\\n            }\\n\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\n\\n            // Get the normalized price of the asset\\n            vars.oraclePriceMantissa = getUnderlyingPriceForCToken(address(asset));\\n\\n            if (vars.oraclePriceMantissa == 0) {\\n                return (Error.PRICE_ERROR, 0, 0, 0);\\n            }\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n            vars.tokensToDenom = mul_(mul_(vars.collateralOrLiquidationFactor, vars.exchangeRate), vars.oraclePrice);\\n            // sumCollateral += tokensToDenom * cTokenBalance\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);\\n\\n            // Calculate effects of interacting with cTokenModify\\n            if (asset == cTokenModify) {\\n                // redeem effect\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);\\n\\n                // borrow effect\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);\\n\\n                // OLA_ADDITIONS : Assigning value to the newly added 'borrowAmountUsd'\\n                // This will only have a non-zero value when the calculation is made for a 'borrow' action.\\n                vars.borrowAmountUsd = mul_ScalarTruncate(vars.oraclePrice, borrowAmount);\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0, vars.borrowAmountUsd);\\n        } else {\\n            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral, vars.borrowAmountUsd);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\n     * @param cTokenBorrowed The address of the borrowed cToken\\n     * @param cTokenCollateral The address of the collateral cToken\\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\n     */\\n    function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint priceBorrowedMantissa = getUnderlyingPriceForCToken(cTokenBorrowed);\\n        uint priceCollateralMantissa = getUnderlyingPriceForCToken(cTokenCollateral);\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n            return (uint(Error.PRICE_ERROR), 0);\\n        }\\n\\n        /*\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n         *  seizeTokens = seizeAmount / exchangeRate\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n         */\\n        uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error\\n        uint seizeTokens;\\n        Exp memory numerator;\\n        Exp memory denominator;\\n        Exp memory ratio;\\n\\n        // OLA_ADDITIONS : Added a direct read for the market 'liquidationIncentiveMantissa'.\\n        // notice: will be 0 for unsupported 'cTokenCollateral'\\n        numerator = mul_(Exp({mantissa: markets[cTokenCollateral].liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));\\n        denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));\\n        ratio = div_(numerator, denominator);\\n\\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n\\n        return (uint(Error.NO_ERROR), seizeTokens);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Sets a new rain-maker for the Comptroller (\\n     *          Important : We assume that the 'RainMaker' handles the syncing of all of the markets\\n     *                      already supported by this contract.\\n     * @dev Admin function to set a new rain maker\\n     * @dev deployParams Dynamic parameters to be used for the contract deployment.\\n     * @dev retireParams Dynamic parameters to be used for the retire function of the existing rain maker.\\n     * @dev connectParams Dynamic parameters to be used for the connection of the new rain maker.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setMinistry(address _newMinistry) external {\\n        require(msg.sender == admin && _newMinistry != address(0));\\n        registry = _newMinistry;\\n    }\\n\\n    function _setRainMaker(bytes32 contractNameHash, bytes calldata deployParams, bytes calldata retireParams, bytes calldata connectParams) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RAIN_MAKER_OWNER_CHECK);\\n        }\\n\\n        // Before saying goodbye, run all retirement logic (e.g. ensure all of the indexes are updated)\\n        if (hasRainMaker()) {\\n            IComptrollerPeripheral(rainMaker).retire(retireParams);\\n        }\\n\\n        // Track the old rain maker for the Comptroller\\n        address oldRainMaker = rainMaker;\\n\\n        address newRainMaker = address(0);\\n\\n        if (contractNameHash != bytes32(0)) {\\n            // Ask the ministry to deploy a new RainMaker for us\\n            newRainMaker = RegistryForComptrollerV0_03(registry).deployPeripheralContract(contractNameHash, deployParams, admin);\\n\\n            // Sanity, ensure a rainMaker was deployed\\n            require(RainMakerInterface(newRainMaker).isRainMaker());\\n\\n            // Call initialization hook\\n            IComptrollerPeripheral(newRainMaker).connect(connectParams);\\n        }\\n\\n        // Set Comptroller's RainMaker to newRainMaker\\n        rainMaker = newRainMaker;\\n\\n        // Emit NewRainMaker(oldRainMaker, newRainMaker)\\n        emit NewRainMaker(oldRainMaker, newRainMaker);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new bouncer for the Comptroller (after asking the ministry to deploy one)\\n     * @dev deployParams Dynamic parameters to be used for the contract deployment.\\n     * @dev retireParams Dynamic parameters to be used for the retire function of the existing bouncer.\\n     * @dev connectParams Dynamic parameters to be used for the connection of the new bouncer.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setBouncer(bytes32 contractNameHash, bytes calldata deployParams, bytes calldata retireParams, bytes calldata connectParams) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_BOUNCER_OWNER_CHECK);\\n        }\\n\\n        // Track the bouncer for the Comptroller\\n        address oldBouncer = bouncer;\\n        address newBouncer = address(0);\\n\\n        // Before saying goodbye, run all retirement logic\\n        if (hasBouncer()) {\\n            IComptrollerPeripheral(bouncer).retire(retireParams);\\n        }\\n\\n        if (contractNameHash != bytes32(0)) {\\n            // Ask the ministry to deploy a new Bouncer for us\\n            newBouncer = RegistryForComptrollerV0_03(registry).deployPeripheralContract(contractNameHash, deployParams, admin);\\n\\n            // Sanity, ensure a bouncer was deployed\\n            require(IBouncer(newBouncer).isBouncer());\\n\\n            // Call initialization hook\\n            IComptrollerPeripheral(newBouncer).connect(connectParams);\\n        }\\n\\n        // Set Comptroller's bouncer to newBouncer\\n        bouncer = newBouncer;\\n\\n        emit NewBouncer(oldBouncer, bouncer);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the 'limit supplying' flag to the given value (if they are different)\\n     * @dev Admin function to set value for 'limitSupplying'\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setLimitMinting(bool flagValue) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIMIT_MINTING_OWNER_CHECK);\\n        }\\n\\n        if (limitMinting != flagValue) {\\n            limitMinting = flagValue;\\n            emit LimitMintingFlagChanged(flagValue);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the 'limit borrowing' flag to the given value (if they are different)\\n     * @dev Admin function to set value for 'limitBorrowing'\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setLimitBorrowing(bool flagValue) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIMIT_BORROWING_OWNER_CHECK);\\n        }\\n\\n        if (limitBorrowing != flagValue) {\\n            limitBorrowing = flagValue;\\n            emit LimitBorrowingFlagChanged(flagValue);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the 'minBorrowAmountUsd' (scaled by 18)\\n     * @dev Admin function to set value for 'minBorrowAmountUsd'\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setMinBorrowAmountUsd(uint minBorrowAmountUsd_) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_MIN_BORROW_AMOUNT_USD_OWNER_CHECK);\\n        }\\n\\n        uint oldMinBorrowAmount = minBorrowAmountUsd;\\n        minBorrowAmountUsd = minBorrowAmountUsd_;\\n\\n        emit NewMinBorrowAmount(oldMinBorrowAmount, minBorrowAmountUsd);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the collateralFactor for a market\\n      * @dev Admin function to set per-market collateralFactor\\n      * @param cToken The market to set the factor on\\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\n        }\\n\\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\\n\\n        // Check collateral factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n        }\\n\\n        // Ensure liquidationFactor is greater or equal to the new collateralFactor\\n        uint marketLiquidationFactorMantissa = market.liquidationFactorMantissa;\\n        if (newCollateralFactorMantissa > marketLiquidationFactorMantissa) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_HIGHER_THAN_LIQUIDATION_FACTOR);\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        if (newCollateralFactorMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Set market's collateral factor to new collateral factor, remember old value\\n        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n        // Emit event with asset, old collateral factor, and new collateral factor\\n        emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the liquidationFactor for a market.\\n      *         Important : In order to avoid the possibility of existing positions becoming liquidateable -\\n      *                     This value can only be increased.\\n      * @dev Admin function to set per-market liquidationFactor\\n      * @param cToken The market to set the factor on\\n      * @param newLiquidationFactorMantissa The new liquidation factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setLiquidationFactor(CToken cToken, uint newLiquidationFactorMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_FACTOR_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_FACTOR_NO_EXISTS);\\n        }\\n\\n        Exp memory newLiquidationFactorExp = Exp({mantissa: newLiquidationFactorMantissa});\\n\\n        // Check liquidation factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: liquidationFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newLiquidationFactorExp)) {\\n            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_VALIDATION);\\n        }\\n\\n        // Ensure new liquidationFactor is greater or equal to the collateralFactor\\n        uint marketCollateralFactorMantissa = market.collateralFactorMantissa;\\n        if (newLiquidationFactorMantissa < marketCollateralFactorMantissa) {\\n            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_COLLATERAL_FACTOR);\\n        }\\n\\n        // Ensure new liquidation factor is strictly greater than the existing one\\n        uint oldLiquidationFactorMantissa = market.liquidationFactorMantissa;\\n        if (oldLiquidationFactorMantissa >= newLiquidationFactorMantissa) {\\n            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_EXISTING_FACTOR);\\n        }\\n\\n        // If liquidation factor != 0, fail if price == 0\\n        if (newLiquidationFactorMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Set market's liquidation factor to new liquidation factor, remember old value\\n        market.liquidationFactorMantissa = newLiquidationFactorMantissa;\\n\\n        // Emit event with asset, old liquidation factor, and new liquidation factor\\n        emit NewCollateralFactor(cToken, oldLiquidationFactorMantissa, newLiquidationFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * OLA_ADDITIONS : Added 'cToken' to support 'incentive per market'\\n      * @notice Sets liquidationIncentive\\n      * @dev Admin function to set liquidationIncentive\\n      * @param cToken The market to set the factor on\\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setLiquidationIncentive(CToken cToken, uint newLiquidationIncentiveMantissa) external returns (uint) {\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_INCENTIVE_NO_EXISTS);\\n        }\\n\\n        // OLA_ADDITIONS : All of the validations for 'newLiquidationIncentiveMantissa'\\n        Exp memory newLiquidationIncentiveExp = Exp({mantissa: newLiquidationIncentiveMantissa});\\n\\n        // Check liquidation incentive <= 0.3 AND >= 0.05 [5,30]\\n        Exp memory highLimit = Exp({mantissa: liquidationIncentiveMaxMantissa});\\n        Exp memory lowLimit = Exp({mantissa: liquidationIncentiveMinMantissa});\\n        if (lessThanExp(highLimit, newLiquidationIncentiveExp) || lessThanExp(newLiquidationIncentiveExp, lowLimit)) {\\n            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\n        }\\n\\n        // If liquidation incentive != 0, fail if price == 0 (Extra safety check)\\n        if (newLiquidationIncentiveMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_INCENTIVE_WITHOUT_PRICE);\\n        }\\n\\n        // Save current value for use in log\\n        uint oldLiquidationIncentiveMantissa = market.liquidationIncentiveMantissa;\\n\\n        // Set liquidation incentive to new incentive\\n        market.liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        // Emit event with old incentive, new incentive\\n        emit NewLiquidationIncentive(cToken, oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Add the market to the markets mapping and set it as listed\\n     * @dev Admin function to deploy a new cTokens and then set isListed and add support for the market\\n     * @param underlying The address of the asset (token or native) to be used for the market\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _supportNewMarket(address underlying,\\n        bytes32 contractNameHash,\\n        bytes calldata params,\\n        address interestRateModel,\\n        bytes calldata becomeImplementationData) external returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_NEW_MARKET_OWNER_CHECK);\\n        }\\n\\n        // We allow one instance of the same underlying-contractName combination\\n        if (existingMarketTypes[underlying][contractNameHash] != address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_NEW_MARKET_COMBINATION_CHECK);\\n        }\\n\\n        // IMPORTANT : No graceful failure after contract deployment !\\n        address deployedCToken = RegistryForComptrollerV0_03(registry).deployOToken(underlying, contractNameHash, params, interestRateModel, admin, becomeImplementationData);\\n\\n        CToken(deployedCToken).isCToken(); // Sanity check to make sure its really a CToken\\n\\n        // OLA_ADDITIONS : Changed to require\\n        // Legacy safety\\n        require(!markets[deployedCToken].isListed, \\\"SUPPORT_MARKET_EXISTS\\\");\\n\\n        // Save asset - contract combination\\n        existingMarketTypes[underlying][contractNameHash] = deployedCToken;\\n\\n        // OLA_ADDITIONS : Added 'liquidationFactorMantissa', 'liquidationIncentiveMantissa'\\n        markets[deployedCToken] = Market({isListed: true, collateralFactorMantissa: 0,\\n        liquidationFactorMantissa: 0, liquidationIncentiveMantissa: 0,\\n        activeCollateralUSDCap: 0, activeCollateralCTokenUsage: 0\\n        });\\n\\n        _addMarketInternal(deployedCToken);\\n\\n        emit MarketListed(CToken(deployedCToken));\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _addMarketInternal(address cToken) internal {\\n        // OLA_ADDITIONS : Added this 'max assets' limitation\\n        require(allMarkets.length <= maxAllowedAssets, \\\"Too many assets\\\");\\n\\n        for (uint i = 0; i < allMarkets.length; i ++) {\\n            require(allMarkets[i] != CToken(cToken), \\\"Already added\\\");\\n        }\\n        allMarkets.push(CToken(cToken));\\n\\n        // OLA_ADDITIONS : Initializing the market at the RainMaker as well\\n        if (hasRainMaker()) {\\n            RainMakerInterface(rainMaker)._supportMarket(cToken);\\n        }\\n    }\\n\\n    /**\\n      * OLA_ADDITIONS : This function\\n      * @notice Set the given active collateral caps (in USD) for the given cToken markets. Any action that brings total active collateral to or above borrow cap will revert.\\n      * @dev Admin function to set the active collateral caps. A active-collateral cap of 0 corresponds to unlimited active collateral.\\n      * @param cTokens The addresses of the markets (tokens) to change the active-collateral caps for\\n      * @param newActiveCollateralCaps The new active-collateral cap values in usd to be set. A value of 0 corresponds to unlimited borrowing.\\n      */\\n    function _setActiveCollateralCaps(CToken[] calldata cTokens, uint[] calldata newActiveCollateralCaps) external {\\n        require(msg.sender == admin, \\\"!Admin\\\");\\n\\n        uint numMarkets = cTokens.length;\\n        uint numActiveCollateralCaps = newActiveCollateralCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numActiveCollateralCaps, \\\"invalid input\\\");\\n\\n        for(uint i = 0; i < numMarkets; i++) {\\n            Market storage marketToJoin = markets[address(cTokens[i])];\\n\\n            require(marketToJoin.isListed,\\\"!listed\\\");\\n\\n            marketToJoin.activeCollateralUSDCap = newActiveCollateralCaps[i];\\n\\n            emit NewActiveCollateralCap(cTokens[i], newActiveCollateralCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to change the admin bank address\\n     * @param newAdminBankAddress The new admin bank address\\n     */\\n    function _setAdminBankAddress(address payable newAdminBankAddress) external {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n\\n        // Save current value for inclusion in log\\n        address oldAdminBankAddress = adminBankAddress;\\n\\n        // Store adminBankAddress with value newAdminBankAddress\\n        adminBankAddress = newAdminBankAddress;\\n\\n        // Emit NewAdminBankAddress(newAdminBankAddress, newAdminBankAddress)\\n        emit NewAdminBankAddress(oldAdminBankAddress, newAdminBankAddress);\\n    }\\n\\n    /**\\n      * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n      */\\n    function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external {\\n    \\trequire(msg.sender == admin || msg.sender == borrowCapGuardian, \\\"!admin||borrow cap guardian\\\");\\n\\n        uint numMarkets = cTokens.length;\\n        uint numBorrowCaps = newBorrowCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"invalid input\\\");\\n\\n        for(uint i = 0; i < numMarkets; i++) {\\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Borrow Cap Guardian\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n     */\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n\\n        // Save current value for inclusion in log\\n        address oldBorrowCapGuardian = borrowCapGuardian;\\n\\n        // Store borrowCapGuardian with value newBorrowCapGuardian\\n        borrowCapGuardian = newBorrowCapGuardian;\\n\\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\\n        }\\n\\n        // Save current value for inclusion in log\\n        address oldPauseGuardian = pauseGuardian;\\n\\n        // Store pauseGuardian with value newPauseGuardian\\n        pauseGuardian = newPauseGuardian;\\n\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\\n        require(markets[address(cToken)].isListed, \\\"!listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"!pause guardian||admin\\\");\\n        require(msg.sender == admin || state == true, \\\"!admin\\\");\\n\\n        mintGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Mint\\\", state);\\n        return state;\\n    }\\n\\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\\n        require(markets[address(cToken)].isListed, \\\"!listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"!pause guardian||admin\\\");\\n        require(msg.sender == admin || state == true, \\\"!admin\\\");\\n\\n        borrowGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Borrow\\\", state);\\n        return state;\\n    }\\n\\n    function _setTransferPaused(bool state) public returns (bool) {\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"!pause guardian||admin\\\");\\n        require(msg.sender == admin || state == true, \\\"!admin\\\");\\n\\n        transferGuardianPaused = state;\\n        emit ActionPaused(\\\"Transfer\\\", state);\\n        return state;\\n    }\\n\\n    /**\\n     * @notice Checks caller is admin\\n     */\\n    function isAdmin() internal view returns (bool) {\\n        return msg.sender == admin;\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS : This function\\n     * @notice Ensures all markets are updating their implementation from the Registry\\n     */\\n    function updateDelegatedImplementations(bytes calldata becomeImplementationData) external {\\n        require(isAdmin(), \\\"!admin\\\");\\n\\n        // Update all markets\\n        for (uint i = 0; i < allMarkets.length; i ++) {\\n            CToken oToken = allMarkets[i];\\n            require(CTokenDelegatorInterface(address(oToken)).updateImplementationFromRegistry(false, becomeImplementationData), \\\"Update failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Return all of the markets\\n     * @dev The automatic getter may be used to access an individual market.\\n     * @return The list of market addresses\\n     */\\n    function getAllMarkets() public view returns (CToken[] memory) {\\n        return allMarkets;\\n    }\\n\\n\\n    /**\\n     * Fetches the underlying price from the ministry.\\n     * 0 means an error.\\n     */\\n    function getUnderlyingPriceForCToken(address cToken) internal view returns (uint256) {\\n        return RegistryForComptrollerV0_03(registry).getPriceForUnderling(cToken);\\n    }\\n\\n    function hasRainMaker() view public returns (bool) {\\n        return address(rainMaker) != address(0);\\n    }\\n\\n    function hasBouncer() view public returns (bool) {\\n        return address(bouncer) != address(0);\\n    }\\n\\n    function isAccountApproved(address account) view external returns (bool) {\\n        return isAccountApprovedInternal(account);\\n    }\\n\\n    /**\\n     * @notice This function assumes that any account not actively approved is denied\\n     *         and so, if no bouncer is set, the response is always false.\\n     */\\n    function isAccountApprovedInternal(address account) view internal returns (bool) {\\n        if (hasBouncer()) {\\n            return IBouncerForComptroller(bouncer).isAccountApproved(account);\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/versions/0.02/ComptrollerV0_02.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../OTokens/CToken.sol\\\";\\nimport \\\"../../ErrorReporter/ErrorReporter.sol\\\";\\nimport \\\"../../PriceOracle/PriceOracle.sol\\\";\\nimport \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../../Comptroller/ComptrollerStorage.sol\\\";\\nimport \\\"../../Comptroller/Unitroller.sol\\\";\\nimport \\\"../../../../Peripheral/ComptrollerPeripherals/RainMaker/RainMakerInterface.sol\\\";\\nimport \\\"../../../../Peripheral/ComptrollerPeripherals/Bouncer/IBouncer.sol\\\";\\nimport \\\"../../../../Peripheral/ComptrollerPeripherals/IComptrollerPeripheral.sol\\\";\\n\\ninterface RegistryForComptrollerV0_02 {\\n    function deployOToken(address underlying,\\n        bytes32 contractNameHash,\\n        bytes calldata params,\\n        address interestRateModel,\\n        address admin,\\n        bytes calldata becomeImplementationData) external returns (address);\\n\\n    function deployPeripheralContract(bytes32 contractNameHash,\\n        bytes calldata params,\\n        address contractAdmin) external returns (address);\\n\\n    function getPriceForUnderling(address cToken) external view returns (uint256);\\n}\\n\\ninterface IBouncerForComptroller {\\n    function isAccountApproved(address account) external view returns (bool);\\n}\\n\\n/**\\n * @title Ola's Comptroller Contract V0.02\\n * @author Ola\\n * -- Changes form V0.01 :\\n * --- Setters&Events for new storage state.\\n * --- Supports bouncer\\n */\\ncontract ComptrollerV0_02 is ComptrollerStorageOlaV0_02, ComptrollerInterface, ComptrollerErrorReporter, ExponentialNoError {\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(CToken cToken);\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(CToken cToken, address account);\\n\\n    /// @notice Emitted when an account exits a market\\n    event MarketExited(CToken cToken, address account);\\n\\n    /// @notice Emitted when a collateral factor is changed by admin\\n    event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\\n\\n    /// @notice Emitted when a liquidation factor is changed by admin\\n    event NewLiquidationFactor(CToken cToken, uint oldLiquidationFactorMantissa, uint newLiquidationFactorMantissa);\\n\\n    /// @notice Emitted when liquidation incentive is changed by admin\\n    /// OLA_ADDITIONS : Added 'cToken' to support 'liquidation incentive per market'\\n    event NewLiquidationIncentive(CToken ctoken, uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the Rain Maker is changed\\n    event NewRainMaker(address oldRainMaker, address newRainMaker);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the bouncer is changed\\n    event NewBouncer(address oldBouncer, address newBouncer);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the min borrow amount is changed\\n    event NewMinBorrowAmount(uint oldMinBorrowAmount, uint newMinBorrowAmount);\\n\\n    /// @notice Emitted when pause guardian is changed\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    /// @notice Emitted when an action is paused globally\\n    event ActionPaused(string action, bool pauseState);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event ActionPaused(CToken cToken, string action, bool pauseState);\\n\\n    /// @notice Emitted when borrow cap for a cToken is changed\\n    event NewBorrowCap(CToken indexed cToken, uint newBorrowCap);\\n\\n    /// @notice Emitted when borrow cap guardian is changed\\n    event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\\n\\n    /// @notice Emitted when admin bank address is changed\\n    event NewAdminBankAddress(address oldAdminBankAddress, address newAdminBankAddress);\\n\\n    /// @notice Emitted when active collateral cap for a cToken is changed\\n    event NewActiveCollateralCap(CToken indexed cToken, uint newActiveCollateralCap);\\n\\n    /// @notice Emitted when active collateral usage for a cToken is changed\\n    event ActiveCollateralUsageChange(CToken indexed cToken, uint oldCollateralUsage, uint newCollateralUsage);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the 'Limit Minting' flag is changed\\n    event LimitMintingFlagChanged(bool newValue);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when the 'Limit Borrowing' flag is changed\\n    event LimitBorrowingFlagChanged(bool newValue);\\n\\n    // No collateralFactorMantissa may exceed this value\\n    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // No liquidationFactorMantissa may exceed this value\\n    uint internal constant liquidationFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // liquidationIncentiveMantissa of any market must be strictly greater than this value\\n    // OLA_ADDITIONS: This field\\n    uint internal constant liquidationIncentiveMinMantissa = 1.05e18; // 1.05\\n\\n    // liquidationIncentiveMantissa of any market must not exceed this value\\n    // OLA_ADDITIONS: This field\\n    uint internal constant liquidationIncentiveMaxMantissa = 1.3e18; // 1.3\\n\\n    // Hard coded value to limit amount of asset in a single LN\\n    // OLA_ADDITIONS: This field\\n    uint internal constant maxAllowedAssets = 25;\\n\\n    // Hard coded value for the liquidation close factor\\n    // OLA_ADDITIONS: This field\\n    uint internal constant fixedCloseFactorMantissa = 0.5e18;\\n\\n    constructor() public {\\n        admin = msg.sender;\\n    }\\n\\n    /*** Registry ***/\\n\\n    function getRegistry() public view returns (address) {\\n        return address(registry);\\n    }\\n\\n    /*** Assets You Are In ***/\\n\\n    /**\\n     * @notice Returns the assets an account has entered\\n     * @param account The address of the account to pull assets for\\n     * @return A dynamic list with the assets the account has entered\\n     */\\n    function getAssetsIn(address account) external view returns (CToken[] memory) {\\n        CToken[] memory assetsIn = accountAssets[account];\\n\\n        return assetsIn;\\n    }\\n\\n    /**\\n     * @notice Returns whether the given account is entered in the given asset\\n     * @param account The address of the account to check\\n     * @param cToken The cToken to check\\n     * @return True if the account is in the asset, otherwise false.\\n     */\\n    function checkMembership(address account, CToken cToken) external view returns (bool) {\\n        return markets[address(cToken)].accountMembership[account];\\n    }\\n\\n    /**\\n     * @notice Add assets to be included in account liquidity calculation\\n     * @param cTokens The list of addresses of the cToken markets to be enabled\\n     * @return Success indicator for whether each corresponding market was entered\\n     */\\n    function enterMarkets(address[] memory cTokens) public returns (uint[] memory) {\\n        uint len = cTokens.length;\\n\\n        uint[] memory results = new uint[](len);\\n        for (uint i = 0; i < len; i++) {\\n            CToken cToken = CToken(cTokens[i]);\\n\\n            // OLA_ADDITIONS : Emitting Failure events\\n            Error error = addToMarketInternal(cToken, msg.sender);\\n            if (error != Error.NO_ERROR) {\\n                fail(error, FailureInfo.ENTER_MARKET_NOT_ALLOWED);\\n            }\\n\\n            results[i] = uint(error);\\n        }\\n\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to activate this additional amount of collateral.\\n     * @param cToken The cToken to verify the active collateral cap against\\n     * @param market The market to verify the active collateral cap against (assumes the given market is listed)\\n     * @param cTokensToActivate The amount of cTokens being activated as collateral\\n     * @return 0 if the activation is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function collateralActivationAllowed(CToken cToken, Market memory market, uint256 cTokensToActivate) internal view returns (uint) {\\n        uint256 activeCollateralUSDCap = market.activeCollateralUSDCap;\\n        uint256 activeCTokenUsage = market.activeCollateralCTokenUsage;\\n\\n        // 0 Means \\\"No Cap\\\"\\n        if (activeCollateralUSDCap == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // No amount ? no problem\\n        if (cTokensToActivate == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // Calculate new usage USD value\\n        uint newCTokenUsage = add_(activeCTokenUsage, cTokensToActivate);\\n\\n        uint exchangeRateMantissa = cToken.exchangeRateStored();\\n\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateMantissa});\\n\\n        // Get the normalized price of the asset\\n        uint oraclePriceMantissa = getUnderlyingPriceForCToken(address(cToken));\\n\\n        if (oraclePriceMantissa == 0) {\\n            return uint(Error.PRICE_ERROR);\\n        }\\n\\n        Exp memory oraclePrice = Exp({mantissa: oraclePriceMantissa});\\n\\n        uint newUnderlyingUsage = mul_(newCTokenUsage, exchangeRate);\\n        uint newUsageValueInUsd = mul_(newUnderlyingUsage, oraclePrice);\\n\\n        // Is it within the allowed cap ?\\n        if (newUsageValueInUsd <= activeCollateralUSDCap) {\\n            // All good here\\n            return uint(Error.NO_ERROR);\\n        } else {\\n            return uint(Error.TOO_MUCH_COLLATERAL_ACTIVATION);\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases the underlying actively used as collateral.\\n     */\\n    function increaseActiveCollateralUsed(Market storage market, uint256 cTokensActivated, CToken cToken) internal {\\n        uint oldCTokenUsage = market.activeCollateralCTokenUsage;\\n        uint newCTokenUsage = add_(oldCTokenUsage, cTokensActivated);\\n        market.activeCollateralCTokenUsage = newCTokenUsage;\\n        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);\\n    }\\n\\n    /**\\n     * @notice Reduces the underlying actively used as collateral.\\n    */\\n    function reduceActiveCollateralUsed(Market storage market, uint256 cTokensDeactivated, CToken cToken) internal {\\n        uint oldCTokenUsage = market.activeCollateralCTokenUsage;\\n        uint newCTokenUsage = sub_(oldCTokenUsage, cTokensDeactivated);\\n        market.activeCollateralCTokenUsage = newCTokenUsage;\\n        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param cToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {\\n        Market storage marketToJoin = markets[address(cToken)];\\n\\n        if (!marketToJoin.isListed) {\\n            // market is not listed, cannot join\\n            return Error.MARKET_NOT_LISTED;\\n        }\\n\\n        if (marketToJoin.accountMembership[borrower] == true) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n\\n\\n        // NOTE : This function call will\\n        uint cTokensToBeActivatedAsCollateral = cToken.balanceOf(borrower);\\n        uint collateralActivationError = collateralActivationAllowed(cToken, marketToJoin, cTokensToBeActivatedAsCollateral);\\n\\n        // OLA_ADDITIONS : This test\\n        if (collateralActivationError != uint(Error.NO_ERROR)) {\\n            return Error(collateralActivationError);\\n        }\\n\\n        // Increase active collateral used\\n        increaseActiveCollateralUsed(marketToJoin, cTokensToBeActivatedAsCollateral, cToken);\\n\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(cToken);\\n\\n        emit MarketEntered(cToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Removes asset from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *  or be providing necessary collateral for an outstanding borrow.\\n     * @param cTokenAddress The address of the asset to be removed\\n     * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarket(address cTokenAddress) external returns (uint) {\\n        CToken cToken = CToken(cTokenAddress);\\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\\n        require(oErr == 0, \\\"Snapshot failed\\\"); // semi-opaque error code\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (amountOwed != 0) {\\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\\n        if (allowed != 0) {\\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\n        }\\n\\n        Market storage marketToExit = markets[cTokenAddress];\\n\\n        /* Return true if the sender is not already \u2018in\u2019 the market */\\n        if (marketToExit.accountMembership[msg.sender]) {\\n            uint err = exitMarketInternal(marketToExit, address(cToken), msg.sender);\\n\\n            // If no err, reduce\\n            if (err != uint(Error.NO_ERROR)) {\\n                return err;\\n            }\\n\\n            // Reduce the active collateral usage - Only if removal from market\\n            reduceActiveCollateralUsed(marketToExit, tokensHeld, cToken);\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Checks if the account is done (no supply and no borrow at all) in the given market\\n     * and if so, exits the market for the user.\\n     * @dev .\\n     * @param cTokenAddress The address of the asset to be removed\\n     * @param account The account which would exit the market (if done with it)\\n     * @return If done - returns the result of 'exitMarketInternal' and if not done - \\\"No error\\\".\\n     */\\n    function exitMarketIfDone(address cTokenAddress, address account) internal returns (uint) {\\n        CToken cToken = CToken(cTokenAddress);\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(account);\\n        require(oErr == 0, \\\"Snapshot failed\\\"); // semi-opaque error code\\n\\n        if (tokensHeld == 0 && amountOwed == 0) {\\n            Market storage marketToExit = markets[cTokenAddress];\\n\\n            /* Return true if the sender is not already \u2018in\u2019 the market */\\n            if (marketToExit.accountMembership[account]) {\\n                return exitMarketInternal(marketToExit, cTokenAddress, account);\\n            } else {\\n                return uint(Error.NO_ERROR);\\n            }\\n        } else {\\n            return uint(Error.NO_ERROR);\\n        }\\n    }\\n\\n    /**\\n      * @notice Performs the state change that Removes asset from sender's account liquidity calculation\\n      * @notice This function will revert if inconsistencies are found within the 'accountsAssets' mechanism\\n      * @dev This function should only be called after ensuring the user can exit the market (e.g no outstanding\\n      * debts or active collateral) AND only for users who are actually in the market.\\n      * @param cTokenAddress The address of the asset to be removed\\n      * @param account The account which would exit the market\\n      * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarketInternal(Market storage marketToExit, address cTokenAddress, address account) internal returns (uint) {\\n        /* Set cToken account membership to false */\\n        delete marketToExit.accountMembership[account];\\n\\n        /* Delete cToken from the account\u2019s list of assets */\\n        // load into memory for faster iteration\\n        CToken[] memory userAssetList = accountAssets[account];\\n        uint len = userAssetList.length;\\n        uint assetIndex = len;\\n        for (uint i = 0; i < len; i++) {\\n            if (userAssetList[i] == CToken(cTokenAddress)) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        require(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        CToken[] storage storedList = accountAssets[account];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.length--;\\n\\n        emit MarketExited(CToken(cTokenAddress), account);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Policy Hooks ***/\\n\\n    /**\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\n     * @param cToken The market to verify the mint against\\n     * @param minter The account which would get the minted tokens\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!mintGuardianPaused[cToken], \\\"paused\\\");\\n\\n        // Shh - currently unused\\n        minter;\\n        mintAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // OLA_ADDITIONS : Can limit minting\\n        // If borrowing is limited the account has to be approved\\n        if (limitMinting && !isAccountApprovedInternal(minter)) {\\n            return uint (Error.NOT_APPROVED_TO_MINT);\\n        }\\n\\n        // Keep the flywheel moving\\n        if (hasRainMaker()) {\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, minter);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates mint and reverts on rejection. May emit logs.\\n     * @param cToken Asset being minted\\n     * @param minter The address minting the tokens\\n     * @param actualMintAmount The amount of the underlying asset being minted\\n     * @param mintTokens The number of tokens being minted\\n     */\\n    function mintVerify(address cToken, address minter, uint actualMintAmount, uint mintTokens) external {\\n        // OLA_ADDITIONS : All from here\\n        // only cTokens may call 'mintVerify'\\n        require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n        // Get market + safety\\n        Market storage marketToMintIn = markets[address(cToken)];\\n        require(marketToMintIn.isListed, \\\"!listed\\\");\\n\\n        // We only care about active collateral caps if the minter is part of the market\\n        if (marketToMintIn.accountMembership[minter]) {\\n            // Is activating that much new collateral allowed ?\\n            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToMintIn, mintTokens);\\n            require(collateralActivationError == uint(Error.NO_ERROR), \\\"activation not allowed\\\");\\n\\n            // All seems to be ok, increase the usage count\\n            increaseActiveCollateralUsed(marketToMintIn, mintTokens, CToken(cToken));\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\n     * @param cToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint) {\\n        uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, redeemer);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[cToken].accountMembership[redeemer]) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, , uint shortfall, ) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0, true);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\n     * @param cToken Asset being redeemed\\n     * @param redeemer The address redeeming the tokens\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external {\\n        // Require tokens is zero or amount is also zero\\n        if (redeemTokens == 0 && redeemAmount > 0) {\\n            revert(\\\"redeemTokens zero\\\");\\n        }\\n\\n        // OLA_ADDITIONS : All from here\\n        // only cTokens may call 'redeemVerify'\\n        require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n        // Get market + safety\\n        Market storage marketToRedeemFrom = markets[address(cToken)];\\n        require(marketToRedeemFrom.isListed, \\\"!listed\\\");\\n\\n        // We only care about active collateral caps if the minter is in the market\\n        if (marketToRedeemFrom.accountMembership[redeemer]) {\\n            // Some cleanups, if the user is done with this market\\n            require(exitMarketIfDone(cToken, redeemer) == uint(Error.NO_ERROR), \\\"Exit failure\\\");\\n\\n            // The redeemer is reducing the collateral value in a market they are part of.\\n            // let's reduce the used active collateral.\\n            reduceActiveCollateralUsed(marketToRedeemFrom, redeemTokens, CToken(cToken));\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param cToken The market to verify the borrow against\\n     * @param borrower The account which would borrow the asset\\n     * @param borrowAmount The amount of underlying the account would borrow\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!borrowGuardianPaused[cToken], \\\"paused\\\");\\n\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // OLA_ADDITIONS : Can limit borrow\\n        // If borrowing is limited the account has to be approved\\n        if (limitBorrowing && !isAccountApprovedInternal(borrower)) {\\n            return uint (Error.NOT_APPROVED_TO_BORROW);\\n        }\\n\\n        if (!markets[cToken].accountMembership[borrower])\\n{\\n            // only cTokens may call borrowAllowed if borrower not in market\\n            require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n            // attempt to add borrower to the market\\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\\n            if (err != Error.NO_ERROR) {\\n                return uint(err);\\n            }\\n\\n            // it should be impossible to break the important invariant\\n            assert(markets[cToken].accountMembership[borrower]);\\n        }\\n\\n        if (getUnderlyingPriceForCToken(cToken) == 0) {\\n            return uint(Error.PRICE_ERROR);\\n        }\\n\\n        uint borrowCap = borrowCaps[cToken];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint totalBorrows = CToken(cToken).totalBorrows();\\n            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);\\n            require(nextTotalBorrows < borrowCap, \\\"Borrow cap reached\\\");\\n        }\\n\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, , uint shortfall, uint borrowAmountUsd) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount, true);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        // OLA_ADDITIONS : Adds 'min borrow usd' requirement\\n        if (borrowAmountUsd < minBorrowAmountUsd) {\\n            return uint(Error.TOO_LITTLE_BORROW);\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            uint borrowIndex = CToken(cToken).borrowIndex();\\n            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);\\n            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates borrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset whose underlying is being borrowed\\n     * @param borrower The address borrowing the underlying\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\n     */\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external {\\n        // Shh - currently unused\\n        cToken;\\n        borrower;\\n        borrowAmount;\\n\\n        // Uncomment if adding logic\\n        // Only cTokens may call 'borrowVerify'\\n        // require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param cToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which would borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint) {\\n        // Shh - currently unused\\n        payer;\\n        borrower;\\n        repayAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            uint borrowIndex = CToken(cToken).borrowIndex();\\n            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);\\n            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset being repaid\\n     * @param payer The address repaying the borrow\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint actualRepayAmount,\\n        uint borrowerIndex) external {\\n\\n        // Only cTokens may call 'repayBorrowVerify'\\n        require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n        // Some cleanups, if the user is done with this market\\n        require(exitMarketIfDone(cToken, borrower) == uint(Error.NO_ERROR), \\\"Exit failure\\\");\\n    }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint) {\\n        // Shh - currently unused\\n        liquidator;\\n\\n        if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* The borrower must have shortfall in order to be liquidateable */\\n        // OLA_ADDITIONS : Use liquidation factor for liquidation calculation\\n        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower, false);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall == 0) {\\n            return uint(Error.INSUFFICIENT_SHORTFALL);\\n        }\\n\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\n        uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);\\n        // OLA_ADDITIONS : Using the constant value instead of the storage one ('closeFactorMantissa')\\n        uint maxClose = mul_ScalarTruncate(Exp({mantissa: fixedCloseFactorMantissa}), borrowBalance);\\n        if (repayAmount > maxClose) {\\n            return uint(Error.TOO_MUCH_REPAY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint actualRepayAmount,\\n        uint seizeTokens) external {\\n        // Shh - currently unused\\n        cTokenBorrowed;\\n        cTokenCollateral;\\n        liquidator;\\n        borrower;\\n        actualRepayAmount;\\n        seizeTokens;\\n\\n        // Uncomment if adding logic\\n        // Only cTokens may call 'liquidateBorrowVerify'\\n        // require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint) {\\n        // OLA_ADDITIONS : Preventing LN admin from stopping liquidations (By removing the setter for the flag)\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        // require(!seizeGuardianPaused, \\\"seize is paused\\\");\\n\\n        // Shh - currently unused\\n        seizeTokens;\\n\\n        if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {\\n            return uint(Error.COMPTROLLER_MISMATCH);\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cTokenCollateral);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, borrower);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, liquidator);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates seize and reverts on rejection. May emit logs.\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external {\\n        // Shh - currently unused\\n        cTokenCollateral;\\n        cTokenBorrowed;\\n        liquidator;\\n        borrower;\\n        seizeTokens;\\n\\n        // Uncomment if adding logic\\n        // Only cTokens may call 'seizeVerify'\\n        // require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param cToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!transferGuardianPaused, \\\"transfer paused\\\");\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        uint allowed = redeemAllowedInternal(cToken, src, transferTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, src);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, dst);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates transfer and reverts on rejection. May emit logs.\\n     * IMPORTANT : This function is also called from a cToken's 'seizeInternal', so, it is\\n     *             imperative to make sure that any change to this function is in line with\\n     *             the logic requirements of 'seizeInternal'.\\n     * @param cToken Asset being transferred\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     */\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external {\\n        // OLA_ADDITIONS : All from here\\n        // only cTokens may call 'transferVerify'\\n        require(msg.sender == cToken, \\\"!cToken\\\");\\n\\n        // Get market + safety\\n        Market storage marketToTransferIn = markets[address(cToken)];\\n        require(marketToTransferIn.isListed, \\\"!listed\\\");\\n\\n        bool srcMembership = marketToTransferIn.accountMembership[src];\\n        bool dstMembership = marketToTransferIn.accountMembership[dst];\\n\\n        // If no side is in the market, the active collateral is not changed.\\n        // If both of them are in the market, the active collateral stays the same.\\n        if (srcMembership == dstMembership) {\\n            return;\\n        } else if (srcMembership) {\\n            // This is an easy one, active collateral usage only decreases\\n            return reduceActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));\\n        } else if (dstMembership) {\\n            // This is a complex one. The dst might not be able to receive the transferred cTokens if\\n            // it will exceed the allowed active collateral cap.\\n            // So, let's check whether activating that much new collateral is allowed.\\n            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToTransferIn, transferTokens);\\n            require(collateralActivationError == uint(Error.NO_ERROR), \\\"Collateral activation is not allowed\\\");\\n\\n            // All seems to be ok, increase the usage count\\n            increaseActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));\\n        }\\n    }\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint sumCollateral;\\n        uint sumBorrowPlusEffects;\\n        uint cTokenBalance;\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n        uint oraclePriceMantissa;\\n        // OLA_ADDITIONS : Renamed from 'collateralFactor' to 'collateralOrLiquidationFactor'\\n        Exp collateralOrLiquidationFactor;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToDenom;\\n\\n        // OLA_ADDITIONS : Added 'borrowAmountUsd' for \\\"min borrow usd check\\\"\\n        uint borrowAmountUsd;\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, true);\\n\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * OLA ADDITIONS : This function\\n     * @notice Determine the current account liquidity wrt liquidation requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of liquidation requirements,\\n     *          account shortfall below liquidation requirements)\\n     */\\n    function getAccountLiquidityByLiquidationFactor(address account) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, false);\\n\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidityInternal(address account, bool useCollateralFactor) internal view returns (Error, uint, uint) {\\n        // OLA_ADDITIONS : added 'useCollateralFactor' + changed from direct 'return' to 'de-construct and return'\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, useCollateralFactor);\\n        return (err, liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) public view returns (uint, uint, uint) {\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, true);\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS : This function\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of liquidation requirements,\\n     *          hypothetical account shortfall below liquidation requirements)\\n     */\\n    function getHypotheticalAccountLiquidityByLiquidationFactor(\\n        address account,\\n        address cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, false);\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @param useCollateralFactor True - use the \\\"default\\\" 'collateralFactorMantissa', False - use 'liquidationFactorMantissa'\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements,\\n     *          USD value of the given borrowAmount)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        CToken cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount,\\n        // OLA_ADDITIONS : added 'useCollateralFactor'\\n        bool useCollateralFactor) internal view returns (Error, uint, uint, uint) {\\n\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n        uint oErr;\\n\\n        // For each asset the account is in\\n        CToken[] memory assets = accountAssets[account];\\n        for (uint i = 0; i < assets.length; i++) {\\n            CToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the cToken\\n            (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\\n            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                return (Error.SNAPSHOT_ERROR, 0, 0, 0);\\n            }\\n\\n            // OLA_ADDITIONS : Added the distinction between using collateralFactorMantissa and liquidationFactorMantissa\\n            if (useCollateralFactor) {\\n                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});\\n            } else {\\n                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].liquidationFactorMantissa});\\n            }\\n\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\n\\n            // Get the normalized price of the asset\\n            vars.oraclePriceMantissa = getUnderlyingPriceForCToken(address(asset));\\n\\n            if (vars.oraclePriceMantissa == 0) {\\n                return (Error.PRICE_ERROR, 0, 0, 0);\\n            }\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n            vars.tokensToDenom = mul_(mul_(vars.collateralOrLiquidationFactor, vars.exchangeRate), vars.oraclePrice);\\n            // sumCollateral += tokensToDenom * cTokenBalance\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);\\n\\n            // Calculate effects of interacting with cTokenModify\\n            if (asset == cTokenModify) {\\n                // redeem effect\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);\\n\\n                // borrow effect\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);\\n\\n                // OLA_ADDITIONS : Assigning value to the newly added 'borrowAmountUsd'\\n                // This will only have a non-zero value when the calculation is made for a 'borrow' action.\\n                vars.borrowAmountUsd = mul_ScalarTruncate(vars.oraclePrice, borrowAmount);\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0, vars.borrowAmountUsd);\\n        } else {\\n            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral, vars.borrowAmountUsd);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\n     * @param cTokenBorrowed The address of the borrowed cToken\\n     * @param cTokenCollateral The address of the collateral cToken\\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\n     */\\n    function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint priceBorrowedMantissa = getUnderlyingPriceForCToken(cTokenBorrowed);\\n        uint priceCollateralMantissa = getUnderlyingPriceForCToken(cTokenCollateral);\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n            return (uint(Error.PRICE_ERROR), 0);\\n        }\\n\\n        /*\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n         *  seizeTokens = seizeAmount / exchangeRate\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n         */\\n        uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error\\n        uint seizeTokens;\\n        Exp memory numerator;\\n        Exp memory denominator;\\n        Exp memory ratio;\\n\\n        // OLA_ADDITIONS : Added a direct read for the market 'liquidationIncentiveMantissa'.\\n        // notice: will be 0 for unsupported 'cTokenCollateral'\\n        numerator = mul_(Exp({mantissa: markets[cTokenCollateral].liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));\\n        denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));\\n        ratio = div_(numerator, denominator);\\n\\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n\\n        return (uint(Error.NO_ERROR), seizeTokens);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Sets a new rain-maker for the Comptroller (\\n     *          Important : We assume that the 'RainMaker' handles the syncing of all of the markets\\n     *                      already supported by this contract.\\n     * @dev Admin function to set a new rain maker\\n     * @dev deployParams Dynamic parameters to be used for the contract deployment.\\n     * @dev retireParams Dynamic parameters to be used for the retire function of the existing rain maker.\\n     * @dev connectParams Dynamic parameters to be used for the connection of the new rain maker.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setRainMaker(bytes32 contractNameHash, bytes calldata deployParams, bytes calldata retireParams, bytes calldata connectParams) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RAIN_MAKER_OWNER_CHECK);\\n        }\\n\\n        // Before saying goodbye, run all retirement logic (e.g. ensure all of the indexes are updated)\\n        if (hasRainMaker()) {\\n            IComptrollerPeripheral(rainMaker).retire(retireParams);\\n        }\\n\\n        // Track the old rain maker for the Comptroller\\n        address oldRainMaker = rainMaker;\\n\\n        address newRainMaker = address(0);\\n\\n        if (contractNameHash != bytes32(0)) {\\n            // Ask the ministry to deploy a new RainMaker for us\\n            newRainMaker = RegistryForComptrollerV0_02(registry).deployPeripheralContract(contractNameHash, deployParams, admin);\\n\\n            // Sanity, ensure a rainMaker was deployed\\n            require(RainMakerInterface(newRainMaker).isRainMaker());\\n\\n            // Call initialization hook\\n            IComptrollerPeripheral(newRainMaker).connect(connectParams);\\n        }\\n\\n        // Set Comptroller's RainMaker to newRainMaker\\n        rainMaker = newRainMaker;\\n\\n        // Emit NewRainMaker(oldRainMaker, newRainMaker)\\n        emit NewRainMaker(oldRainMaker, newRainMaker);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets a new bouncer for the Comptroller (after asking the ministry to deploy one)\\n     * @dev deployParams Dynamic parameters to be used for the contract deployment.\\n     * @dev retireParams Dynamic parameters to be used for the retire function of the existing bouncer.\\n     * @dev connectParams Dynamic parameters to be used for the connection of the new bouncer.\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setBouncer(bytes32 contractNameHash, bytes calldata deployParams, bytes calldata retireParams, bytes calldata connectParams) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_BOUNCER_OWNER_CHECK);\\n        }\\n\\n        // Track the bouncer for the Comptroller\\n        address oldBouncer = bouncer;\\n        address newBouncer = address(0);\\n\\n        // Before saying goodbye, run all retirement logic\\n        if (hasBouncer()) {\\n            IComptrollerPeripheral(bouncer).retire(retireParams);\\n        }\\n\\n        if (contractNameHash != bytes32(0)) {\\n            // Ask the ministry to deploy a new Bouncer for us\\n            newBouncer = RegistryForComptrollerV0_02(registry).deployPeripheralContract(contractNameHash, deployParams, admin);\\n\\n            // Sanity, ensure a bouncer was deployed\\n            require(IBouncer(newBouncer).isBouncer());\\n\\n            // Call initialization hook\\n            IComptrollerPeripheral(newBouncer).connect(connectParams);\\n        }\\n\\n        // Set Comptroller's bouncer to newBouncer\\n        bouncer = newBouncer;\\n\\n        emit NewBouncer(oldBouncer, bouncer);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the 'limit supplying' flag to the given value (if they are different)\\n     * @dev Admin function to set value for 'limitSupplying'\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setLimitMinting(bool flagValue) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIMIT_MINTING_OWNER_CHECK);\\n        }\\n\\n        if (limitMinting != flagValue) {\\n            limitMinting = flagValue;\\n            emit LimitMintingFlagChanged(flagValue);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the 'limit borrowing' flag to the given value (if they are different)\\n     * @dev Admin function to set value for 'limitBorrowing'\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setLimitBorrowing(bool flagValue) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIMIT_BORROWING_OWNER_CHECK);\\n        }\\n\\n        if (limitBorrowing != flagValue) {\\n            limitBorrowing = flagValue;\\n            emit LimitBorrowingFlagChanged(flagValue);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sets the 'minBorrowAmountUsd' (scaled by 18)\\n     * @dev Admin function to set value for 'minBorrowAmountUsd'\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setMinBorrowAmountUsd(uint minBorrowAmountUsd_) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_MIN_BORROW_AMOUNT_USD_OWNER_CHECK);\\n        }\\n\\n        uint oldMinBorrowAmount = minBorrowAmountUsd;\\n        minBorrowAmountUsd = minBorrowAmountUsd_;\\n\\n        emit NewMinBorrowAmount(oldMinBorrowAmount, minBorrowAmountUsd);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the collateralFactor for a market\\n      * @dev Admin function to set per-market collateralFactor\\n      * @param cToken The market to set the factor on\\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\n        }\\n\\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\\n\\n        // Check collateral factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n        }\\n\\n        // Ensure liquidationFactor is greater or equal to the new collateralFactor\\n        uint marketLiquidationFactorMantissa = market.liquidationFactorMantissa;\\n        if (newCollateralFactorMantissa > marketLiquidationFactorMantissa) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_HIGHER_THAN_LIQUIDATION_FACTOR);\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        if (newCollateralFactorMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Set market's collateral factor to new collateral factor, remember old value\\n        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n        // Emit event with asset, old collateral factor, and new collateral factor\\n        emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the liquidationFactor for a market.\\n      *         Important : In order to avoid the possibility of existing positions becoming liquidateable -\\n      *                     This value can only be increased.\\n      * @dev Admin function to set per-market liquidationFactor\\n      * @param cToken The market to set the factor on\\n      * @param newLiquidationFactorMantissa The new liquidation factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setLiquidationFactor(CToken cToken, uint newLiquidationFactorMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_FACTOR_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_FACTOR_NO_EXISTS);\\n        }\\n\\n        Exp memory newLiquidationFactorExp = Exp({mantissa: newLiquidationFactorMantissa});\\n\\n        // Check liquidation factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: liquidationFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newLiquidationFactorExp)) {\\n            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_VALIDATION);\\n        }\\n\\n        // Ensure new liquidationFactor is greater or equal to the collateralFactor\\n        uint marketCollateralFactorMantissa = market.collateralFactorMantissa;\\n        if (newLiquidationFactorMantissa < marketCollateralFactorMantissa) {\\n            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_COLLATERAL_FACTOR);\\n        }\\n\\n        // Ensure new liquidation factor is strictly greater than the existing one\\n        uint oldLiquidationFactorMantissa = market.liquidationFactorMantissa;\\n        if (oldLiquidationFactorMantissa >= newLiquidationFactorMantissa) {\\n            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_EXISTING_FACTOR);\\n        }\\n\\n        // If liquidation factor != 0, fail if price == 0\\n        if (newLiquidationFactorMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Set market's liquidation factor to new liquidation factor, remember old value\\n        market.liquidationFactorMantissa = newLiquidationFactorMantissa;\\n\\n        // Emit event with asset, old liquidation factor, and new liquidation factor\\n        emit NewCollateralFactor(cToken, oldLiquidationFactorMantissa, newLiquidationFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * OLA_ADDITIONS : Added 'cToken' to support 'incentive per market'\\n      * @notice Sets liquidationIncentive\\n      * @dev Admin function to set liquidationIncentive\\n      * @param cToken The market to set the factor on\\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setLiquidationIncentive(CToken cToken, uint newLiquidationIncentiveMantissa) external returns (uint) {\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_INCENTIVE_NO_EXISTS);\\n        }\\n\\n        // OLA_ADDITIONS : All of the validations for 'newLiquidationIncentiveMantissa'\\n        Exp memory newLiquidationIncentiveExp = Exp({mantissa: newLiquidationIncentiveMantissa});\\n\\n        // Check liquidation incentive <= 0.3 AND >= 0.05 [5,30]\\n        Exp memory highLimit = Exp({mantissa: liquidationIncentiveMaxMantissa});\\n        Exp memory lowLimit = Exp({mantissa: liquidationIncentiveMinMantissa});\\n        if (lessThanExp(highLimit, newLiquidationIncentiveExp) || lessThanExp(newLiquidationIncentiveExp, lowLimit)) {\\n            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\n        }\\n\\n        // If liquidation incentive != 0, fail if price == 0 (Extra safety check)\\n        if (newLiquidationIncentiveMantissa != 0 && getUnderlyingPriceForCToken(address(cToken)) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_INCENTIVE_WITHOUT_PRICE);\\n        }\\n\\n        // Save current value for use in log\\n        uint oldLiquidationIncentiveMantissa = market.liquidationIncentiveMantissa;\\n\\n        // Set liquidation incentive to new incentive\\n        market.liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        // Emit event with old incentive, new incentive\\n        emit NewLiquidationIncentive(cToken, oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Add the market to the markets mapping and set it as listed\\n     * @dev Admin function to deploy a new cTokens and then set isListed and add support for the market\\n     * @param underlying The address of the asset (token or native) to be used for the market\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _supportNewMarket(address underlying,\\n        bytes32 contractNameHash,\\n        bytes calldata params,\\n        address interestRateModel,\\n        bytes calldata becomeImplementationData) external returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_NEW_MARKET_OWNER_CHECK);\\n        }\\n\\n        // We allow one instance of the same underlying-contractName combination\\n        if (existingMarketTypes[underlying][contractNameHash] != address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_NEW_MARKET_COMBINATION_CHECK);\\n        }\\n\\n        // IMPORTANT : No graceful failure after contract deployment !\\n        address deployedCToken = RegistryForComptrollerV0_02(registry).deployOToken(underlying, contractNameHash, params, interestRateModel, admin, becomeImplementationData);\\n\\n        CToken(deployedCToken).isCToken(); // Sanity check to make sure its really a CToken\\n\\n        // OLA_ADDITIONS : Changed to require\\n        // Legacy safety\\n        require(!markets[deployedCToken].isListed, \\\"SUPPORT_MARKET_EXISTS\\\");\\n\\n        // Save asset - contract combination\\n        existingMarketTypes[underlying][contractNameHash] = deployedCToken;\\n\\n        // OLA_ADDITIONS : Added 'liquidationFactorMantissa', 'liquidationIncentiveMantissa'\\n        markets[deployedCToken] = Market({isListed: true, collateralFactorMantissa: 0,\\n        liquidationFactorMantissa: 0, liquidationIncentiveMantissa: 0,\\n        activeCollateralUSDCap: 0, activeCollateralCTokenUsage: 0\\n        });\\n\\n        _addMarketInternal(deployedCToken);\\n\\n        emit MarketListed(CToken(deployedCToken));\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _addMarketInternal(address cToken) internal {\\n        // OLA_ADDITIONS : Added this 'max assets' limitation\\n        require(allMarkets.length <= maxAllowedAssets, \\\"Too many assets\\\");\\n\\n        for (uint i = 0; i < allMarkets.length; i ++) {\\n            require(allMarkets[i] != CToken(cToken), \\\"Already added\\\");\\n        }\\n        allMarkets.push(CToken(cToken));\\n\\n        // OLA_ADDITIONS : Initializing the market at the RainMaker as well\\n        if (hasRainMaker()) {\\n            RainMakerInterface(rainMaker)._supportMarket(cToken);\\n        }\\n    }\\n\\n    /**\\n      * OLA_ADDITIONS : This function\\n      * @notice Set the given active collateral caps (in USD) for the given cToken markets. Any action that brings total active collateral to or above borrow cap will revert.\\n      * @dev Admin function to set the active collateral caps. A active-collateral cap of 0 corresponds to unlimited active collateral.\\n      * @param cTokens The addresses of the markets (tokens) to change the active-collateral caps for\\n      * @param newActiveCollateralCaps The new active-collateral cap values in usd to be set. A value of 0 corresponds to unlimited borrowing.\\n      */\\n    function _setActiveCollateralCaps(CToken[] calldata cTokens, uint[] calldata newActiveCollateralCaps) external {\\n        require(msg.sender == admin, \\\"!Admin\\\");\\n\\n        uint numMarkets = cTokens.length;\\n        uint numActiveCollateralCaps = newActiveCollateralCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numActiveCollateralCaps, \\\"invalid input\\\");\\n\\n        for(uint i = 0; i < numMarkets; i++) {\\n            Market storage marketToJoin = markets[address(cTokens[i])];\\n\\n            require(marketToJoin.isListed,\\\"!listed\\\");\\n\\n            marketToJoin.activeCollateralUSDCap = newActiveCollateralCaps[i];\\n\\n            emit NewActiveCollateralCap(cTokens[i], newActiveCollateralCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to change the admin bank address\\n     * @param newAdminBankAddress The new admin bank address\\n     */\\n    function _setAdminBankAddress(address payable newAdminBankAddress) external {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n\\n        // Save current value for inclusion in log\\n        address oldAdminBankAddress = adminBankAddress;\\n\\n        // Store adminBankAddress with value newAdminBankAddress\\n        adminBankAddress = newAdminBankAddress;\\n\\n        // Emit NewAdminBankAddress(newAdminBankAddress, newAdminBankAddress)\\n        emit NewAdminBankAddress(oldAdminBankAddress, newAdminBankAddress);\\n    }\\n\\n    /**\\n      * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n      */\\n    function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external {\\n    \\trequire(msg.sender == admin || msg.sender == borrowCapGuardian, \\\"!admin||borrow cap guardian\\\");\\n\\n        uint numMarkets = cTokens.length;\\n        uint numBorrowCaps = newBorrowCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"invalid input\\\");\\n\\n        for(uint i = 0; i < numMarkets; i++) {\\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Borrow Cap Guardian\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n     */\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\n        require(msg.sender == admin, \\\"!admin\\\");\\n\\n        // Save current value for inclusion in log\\n        address oldBorrowCapGuardian = borrowCapGuardian;\\n\\n        // Store borrowCapGuardian with value newBorrowCapGuardian\\n        borrowCapGuardian = newBorrowCapGuardian;\\n\\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\\n        }\\n\\n        // Save current value for inclusion in log\\n        address oldPauseGuardian = pauseGuardian;\\n\\n        // Store pauseGuardian with value newPauseGuardian\\n        pauseGuardian = newPauseGuardian;\\n\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\\n        require(markets[address(cToken)].isListed, \\\"!listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"!pause guardian||admin\\\");\\n        require(msg.sender == admin || state == true, \\\"!admin\\\");\\n\\n        mintGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Mint\\\", state);\\n        return state;\\n    }\\n\\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\\n        require(markets[address(cToken)].isListed, \\\"!listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"!pause guardian||admin\\\");\\n        require(msg.sender == admin || state == true, \\\"!admin\\\");\\n\\n        borrowGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Borrow\\\", state);\\n        return state;\\n    }\\n\\n    function _setTransferPaused(bool state) public returns (bool) {\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"!pause guardian||admin\\\");\\n        require(msg.sender == admin || state == true, \\\"!admin\\\");\\n\\n        transferGuardianPaused = state;\\n        emit ActionPaused(\\\"Transfer\\\", state);\\n        return state;\\n    }\\n\\n    /**\\n     * @notice Checks caller is admin\\n     */\\n    function isAdmin() internal view returns (bool) {\\n        return msg.sender == admin;\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS : This function\\n     * @notice Ensures all markets are updating their implementation from the Registry\\n     */\\n    function updateDelegatedImplementations(bytes calldata becomeImplementationData) external {\\n        require(isAdmin(), \\\"!admin\\\");\\n\\n        // Update all markets\\n        for (uint i = 0; i < allMarkets.length; i ++) {\\n            CToken oToken = allMarkets[i];\\n            require(CTokenDelegatorInterface(address(oToken)).updateImplementationFromRegistry(false, becomeImplementationData), \\\"Update failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Return all of the markets\\n     * @dev The automatic getter may be used to access an individual market.\\n     * @return The list of market addresses\\n     */\\n    function getAllMarkets() public view returns (CToken[] memory) {\\n        return allMarkets;\\n    }\\n\\n\\n    /**\\n     * Fetches the underlying price from the ministry.\\n     * 0 means an error.\\n     */\\n    function getUnderlyingPriceForCToken(address cToken) internal view returns (uint256) {\\n        return RegistryForComptrollerV0_02(registry).getPriceForUnderling(cToken);\\n    }\\n\\n    function hasRainMaker() view public returns (bool) {\\n        return address(rainMaker) != address(0);\\n    }\\n\\n    function hasBouncer() view public returns (bool) {\\n        return address(bouncer) != address(0);\\n    }\\n\\n    function isAccountApproved(address account) view external returns (bool) {\\n        return isAccountApprovedInternal(account);\\n    }\\n\\n    /**\\n     * @notice This function assumes that any account not actively approved is denied\\n     *         and so, if no bouncer is set, the response is always false.\\n     */\\n    function isAccountApprovedInternal(address account) view internal returns (bool) {\\n        if (hasBouncer()) {\\n            return IBouncerForComptroller(bouncer).isAccountApproved(account);\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/versions/0.01/ComptrollerV0_01.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../OTokens/CToken.sol\\\";\\nimport \\\"../../ErrorReporter/ErrorReporter.sol\\\";\\nimport \\\"../../PriceOracle/PriceOracle.sol\\\";\\nimport \\\"../../Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../../Comptroller/ComptrollerStorage.sol\\\";\\nimport \\\"../../Comptroller/Unitroller.sol\\\";\\nimport \\\"../../../../Peripheral/ComptrollerPeripherals/RainMaker/RainMakerInterface.sol\\\";\\nimport \\\"../../../../Peripheral/ComptrollerPeripherals/IComptrollerPeripheral.sol\\\";\\n\\ninterface RegistryForComptrollerV0_01 {\\n    function getOracleForAsset(address asset) external view returns (address);\\n}\\n\\n/**\\n * @title Compound's Comptroller Contract\\n * @author Compound\\n */\\ncontract ComptrollerV0_01 is ComptrollerStorageOlaV0_01, ComptrollerInterface, ComptrollerErrorReporter, ExponentialNoError {\\n    /// @notice Emitted when an admin supports a market\\n    event MarketListed(CToken cToken);\\n\\n    /// @notice Emitted when an account enters a market\\n    event MarketEntered(CToken cToken, address account);\\n\\n    /// @notice Emitted when an account exits a market\\n    event MarketExited(CToken cToken, address account);\\n\\n    /// @notice Emitted when a collateral factor is changed by admin\\n    event NewCollateralFactor(CToken cToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\\n\\n    /// @notice Emitted when a liquidation factor is changed by admin\\n    event NewLiquidationFactor(CToken cToken, uint oldLiquidationFactorMantissa, uint newLiquidationFactorMantissa);\\n\\n    /// @notice Emitted when liquidation incentive is changed by admin\\n    /// OLA_ADDITIONS : Added 'cToken' to support 'liquidation incentive per market'\\n    event NewLiquidationIncentive(CToken ctoken, uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\\n\\n    // OLA_ADDITIONS : This event\\n    /// @notice Emitted when price rain maker is changed\\n    event NewRainMaker(address oldRainMaker, address newRainMaker);\\n\\n    /// @notice Emitted when pause guardian is changed\\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\\n\\n    /// @notice Emitted when an action is paused globally\\n    event ActionPaused(string action, bool pauseState);\\n\\n    /// @notice Emitted when an action is paused on a market\\n    event ActionPaused(CToken cToken, string action, bool pauseState);\\n\\n    /// @notice Emitted when borrow cap for a cToken is changed\\n    event NewBorrowCap(CToken indexed cToken, uint newBorrowCap);\\n\\n    /// @notice Emitted when borrow cap guardian is changed\\n    event NewBorrowCapGuardian(address oldBorrowCapGuardian, address newBorrowCapGuardian);\\n\\n    /// @notice Emitted when active collateral cap for a cToken is changed\\n    event NewActiveCollateralCap(CToken indexed cToken, uint newActiveCollateralCap);\\n\\n    /// @notice Emitted when active collateral usage for a cToken is changed\\n    event ActiveCollateralUsageChange(CToken indexed cToken, uint oldCollateralUsage, uint newCollateralUsage);\\n\\n    // No collateralFactorMantissa may exceed this value\\n    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // No liquidationFactorMantissa may exceed this value\\n    uint internal constant liquidationFactorMaxMantissa = 0.9e18; // 0.9\\n\\n    // liquidationIncentiveMantissa of any market must be strictly greater than this value\\n    // OLA_ADDITIONS: This field\\n    uint internal constant liquidationIncentiveMinMantissa = 1.05e18; // 1.05\\n\\n    // liquidationIncentiveMantissa of any market must not exceed this value\\n    // OLA_ADDITIONS: This field\\n    uint internal constant liquidationIncentiveMaxMantissa = 1.3e18; // 1.3\\n\\n    // Hard coded value to limit amount of asset in a single LN\\n    // OLA_ADDITIONS: This field\\n    uint internal constant maxAllowedAssets = 8;\\n\\n    // Hard coded value for the liquidation close factor\\n    // OLA_ADDITIONS: This field\\n    uint internal constant fixedCloseFactorMantissa = 0.5e18;\\n\\n    constructor() public {\\n        admin = msg.sender;\\n    }\\n\\n    /*** Registry ***/\\n\\n    function getRegistry() public view returns (address) {\\n        return address(registry);\\n    }\\n\\n    /*** Assets You Are In ***/\\n\\n    /**\\n     * @notice Returns the assets an account has entered\\n     * @param account The address of the account to pull assets for\\n     * @return A dynamic list with the assets the account has entered\\n     */\\n    function getAssetsIn(address account) external view returns (CToken[] memory) {\\n        CToken[] memory assetsIn = accountAssets[account];\\n\\n        return assetsIn;\\n    }\\n\\n    /**\\n     * @notice Returns whether the given account is entered in the given asset\\n     * @param account The address of the account to check\\n     * @param cToken The cToken to check\\n     * @return True if the account is in the asset, otherwise false.\\n     */\\n    function checkMembership(address account, CToken cToken) external view returns (bool) {\\n        return markets[address(cToken)].accountMembership[account];\\n    }\\n\\n    /**\\n     * @notice Add assets to be included in account liquidity calculation\\n     * @param cTokens The list of addresses of the cToken markets to be enabled\\n     * @return Success indicator for whether each corresponding market was entered\\n     */\\n    function enterMarkets(address[] memory cTokens) public returns (uint[] memory) {\\n        uint len = cTokens.length;\\n\\n        uint[] memory results = new uint[](len);\\n        for (uint i = 0; i < len; i++) {\\n            CToken cToken = CToken(cTokens[i]);\\n\\n            // OLA_ADDITIONS : Emitting Failure events\\n            Error error = addToMarketInternal(cToken, msg.sender);\\n            if (error != Error.NO_ERROR) {\\n                fail(error, FailureInfo.ENTER_MARKET_NOT_ALLOWED);\\n            }\\n\\n            results[i] = uint(error);\\n        }\\n\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to activate this additional amount of collateral.\\n     * @param cToken The cToken to verify the active collateral cap against\\n     * @param market The market to verify the active collateral cap against (assumes the given market is listed)\\n     * @param cTokensToActivate The amount of cTokens being activated as collateral\\n     * @return 0 if the activation is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function collateralActivationAllowed(CToken cToken, Market memory market, uint256 cTokensToActivate) internal view returns (uint) {\\n        uint256 activeCollateralUSDCap = market.activeCollateralUSDCap;\\n        uint256 activeCTokenUsage = market.activeCollateralCTokenUsage;\\n\\n        // 0 Means \\\"No Cap\\\"\\n        if (activeCollateralUSDCap == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // No amount ? no problem\\n        if (cTokensToActivate == 0) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        // Calculate new usage USD value\\n        uint newCTokenUsage = add_(activeCTokenUsage, cTokensToActivate);\\n\\n        uint exchangeRateMantissa = cToken.exchangeRateStored();\\n\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateMantissa});\\n\\n        // Get the normalized price of the asset\\n        PriceOracle oracle = getOracleForCToken(address(cToken));\\n        uint oraclePriceMantissa = oracle.getUnderlyingPrice(cToken);\\n\\n        if (oraclePriceMantissa == 0) {\\n            return uint(Error.PRICE_ERROR);\\n        }\\n\\n        Exp memory oraclePrice = Exp({mantissa: oraclePriceMantissa});\\n\\n        uint newUnderlyingUsage = mul_(newCTokenUsage, exchangeRate);\\n        uint newUsageValueInUsd = mul_(newUnderlyingUsage, oraclePrice);\\n\\n        // Is it within the allowed cap ?\\n        if (newUsageValueInUsd <= activeCollateralUSDCap) {\\n            // All good here\\n            return uint(Error.NO_ERROR);\\n        } else {\\n            return uint(Error.TOO_MUCH_COLLATERAL_ACTIVATION);\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases the underlying actively used as collateral.\\n     */\\n    function increaseActiveCollateralUsed(Market storage market, uint256 cTokensActivated, CToken cToken) internal {\\n        uint oldCTokenUsage = market.activeCollateralCTokenUsage;\\n        uint newCTokenUsage = add_(oldCTokenUsage, cTokensActivated);\\n        market.activeCollateralCTokenUsage = newCTokenUsage;\\n        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);\\n    }\\n\\n    /**\\n     * @notice Reduces the underlying actively used as collateral.\\n    */\\n    function reduceActiveCollateralUsed(Market storage market, uint256 cTokensDeactivated, CToken cToken) internal {\\n        uint oldCTokenUsage = market.activeCollateralCTokenUsage;\\n        uint newCTokenUsage = sub_(oldCTokenUsage, cTokensDeactivated);\\n        market.activeCollateralCTokenUsage = newCTokenUsage;\\n        emit ActiveCollateralUsageChange(cToken, oldCTokenUsage, newCTokenUsage);\\n    }\\n\\n    /**\\n     * @notice Add the market to the borrower's \\\"assets in\\\" for liquidity calculations\\n     * @param cToken The market to enter\\n     * @param borrower The address of the account to modify\\n     * @return Success indicator for whether the market was entered\\n     */\\n    function addToMarketInternal(CToken cToken, address borrower) internal returns (Error) {\\n        Market storage marketToJoin = markets[address(cToken)];\\n\\n        if (!marketToJoin.isListed) {\\n            // market is not listed, cannot join\\n            return Error.MARKET_NOT_LISTED;\\n        }\\n\\n        if (marketToJoin.accountMembership[borrower] == true) {\\n            // already joined\\n            return Error.NO_ERROR;\\n        }\\n\\n\\n        // NOTE : This function call will\\n        uint cTokensToBeActivatedAsCollateral = cToken.balanceOf(borrower);\\n        uint collateralActivationError = collateralActivationAllowed(cToken, marketToJoin, cTokensToBeActivatedAsCollateral);\\n\\n        // OLA_ADDITIONS : This test\\n        if (collateralActivationError != uint(Error.NO_ERROR)) {\\n            return Error(collateralActivationError);\\n        }\\n\\n        // Increase active collateral used\\n        increaseActiveCollateralUsed(marketToJoin, cTokensToBeActivatedAsCollateral, cToken);\\n\\n        // survived the gauntlet, add to list\\n        // NOTE: we store these somewhat redundantly as a significant optimization\\n        //  this avoids having to iterate through the list for the most common use cases\\n        //  that is, only when we need to perform liquidity checks\\n        //  and not whenever we want to check if an account is in a particular market\\n        marketToJoin.accountMembership[borrower] = true;\\n        accountAssets[borrower].push(cToken);\\n\\n        emit MarketEntered(cToken, borrower);\\n\\n        return Error.NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Removes asset from sender's account liquidity calculation\\n     * @dev Sender must not have an outstanding borrow balance in the asset,\\n     *  or be providing necessary collateral for an outstanding borrow.\\n     * @param cTokenAddress The address of the asset to be removed\\n     * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarket(address cTokenAddress) external returns (uint) {\\n        CToken cToken = CToken(cTokenAddress);\\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(msg.sender);\\n        require(oErr == 0, \\\"exitMarket: getAccountSnapshot failed\\\"); // semi-opaque error code\\n\\n        /* Fail if the sender has a borrow balance */\\n        if (amountOwed != 0) {\\n            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\\n        }\\n\\n        /* Fail if the sender is not permitted to redeem all of their tokens */\\n        uint allowed = redeemAllowedInternal(cTokenAddress, msg.sender, tokensHeld);\\n        if (allowed != 0) {\\n            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\\n        }\\n\\n        Market storage marketToExit = markets[cTokenAddress];\\n\\n        /* Return true if the sender is not already \u2018in\u2019 the market */\\n        if (marketToExit.accountMembership[msg.sender]) {\\n            uint err = exitMarketInternal(marketToExit, address(cToken), msg.sender);\\n\\n            // If no err, reduce\\n            if (err != uint(Error.NO_ERROR)) {\\n                return err;\\n            }\\n\\n            // Reduce the active collateral usage - Only if removal from market\\n            reduceActiveCollateralUsed(marketToExit, tokensHeld, cToken);\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Checks if the account is done (no supply and no borrow at all) in the given market\\n     * and if so, exits the market for the user.\\n     * @dev .\\n     * @param cTokenAddress The address of the asset to be removed\\n     * @param account The account which would exit the market (if done with it)\\n     * @return If done - returns the result of 'exitMarketInternal' and if not done - \\\"No error\\\".\\n     */\\n    function exitMarketIfDone(address cTokenAddress, address account) internal returns (uint) {\\n        CToken cToken = CToken(cTokenAddress);\\n        (uint oErr, uint tokensHeld, uint amountOwed, ) = cToken.getAccountSnapshot(account);\\n        require(oErr == 0, \\\"exitMarketIfDone: getAccountSnapshot failed\\\"); // semi-opaque error code\\n\\n        if (tokensHeld == 0 && amountOwed == 0) {\\n            Market storage marketToExit = markets[cTokenAddress];\\n\\n            /* Return true if the sender is not already \u2018in\u2019 the market */\\n            if (marketToExit.accountMembership[account]) {\\n                return exitMarketInternal(marketToExit, cTokenAddress, account);\\n            } else {\\n                return uint(Error.NO_ERROR);\\n            }\\n        } else {\\n            return uint(Error.NO_ERROR);\\n        }\\n    }\\n\\n    /**\\n      * @notice Performs the state change that Removes asset from sender's account liquidity calculation\\n      * @notice This function will revert if inconsistencies are found within the 'accountsAssets' mechanism\\n      * @dev This function should only be called after ensuring the user can exit the market (e.g no outstanding\\n      * debts or active collateral) AND only for users who are actually in the market.\\n      * @param cTokenAddress The address of the asset to be removed\\n      * @param account The account which would exit the market\\n      * @return Whether or not the account successfully exited the market\\n     */\\n    function exitMarketInternal(Market storage marketToExit, address cTokenAddress, address account) internal returns (uint) {\\n        /* Set cToken account membership to false */\\n        delete marketToExit.accountMembership[account];\\n\\n        /* Delete cToken from the account\u2019s list of assets */\\n        // load into memory for faster iteration\\n        CToken[] memory userAssetList = accountAssets[account];\\n        uint len = userAssetList.length;\\n        uint assetIndex = len;\\n        for (uint i = 0; i < len; i++) {\\n            if (userAssetList[i] == CToken(cTokenAddress)) {\\n                assetIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // We *must* have found the asset in the list or our redundant data structure is broken\\n        require(assetIndex < len);\\n\\n        // copy last item in list to location of item to be removed, reduce length by 1\\n        CToken[] storage storedList = accountAssets[account];\\n        storedList[assetIndex] = storedList[storedList.length - 1];\\n        storedList.length--;\\n\\n        emit MarketExited(CToken(cTokenAddress), account);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Policy Hooks ***/\\n\\n    /**\\n     * @notice Checks if the account should be allowed to mint tokens in the given market\\n     * @param cToken The market to verify the mint against\\n     * @param minter The account which would get the minted tokens\\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!mintGuardianPaused[cToken], \\\"mint is paused\\\");\\n\\n        // Shh - currently unused\\n        minter;\\n        mintAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        // Keep the flywheel moving\\n        if (hasRainMaker()) {\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, minter);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates mint and reverts on rejection. May emit logs.\\n     * @param cToken Asset being minted\\n     * @param minter The address minting the tokens\\n     * @param actualMintAmount The amount of the underlying asset being minted\\n     * @param mintTokens The number of tokens being minted\\n     */\\n    function mintVerify(address cToken, address minter, uint actualMintAmount, uint mintTokens) external {\\n        // OLA_ADDITIONS : All from here\\n        // only cTokens may call 'mintVerify'\\n        require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Get market + safety\\n        Market storage marketToMintIn = markets[address(cToken)];\\n        require(marketToMintIn.isListed, \\\"Market is not listed\\\");\\n\\n        // We only care about active collateral caps if the minter is part of the market\\n        if (marketToMintIn.accountMembership[minter]) {\\n            // Is activating that much new collateral allowed ?\\n            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToMintIn, mintTokens);\\n            require(collateralActivationError == uint(Error.NO_ERROR), \\\"Collateral activation is not allowed\\\");\\n\\n            // All seems to be ok, increase the usage count\\n            increaseActiveCollateralUsed(marketToMintIn, mintTokens, CToken(cToken));\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\\n     * @param cToken The market to verify the redeem against\\n     * @param redeemer The account which would redeem the tokens\\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint) {\\n        uint allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, redeemer);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function redeemAllowedInternal(address cToken, address redeemer, uint redeemTokens) internal view returns (uint) {\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\\n        if (!markets[cToken].accountMembership[redeemer]) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, , uint shortfall, ) = getHypotheticalAccountLiquidityInternal(redeemer, CToken(cToken), redeemTokens, 0, true);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates redeem and reverts on rejection. May emit logs.\\n     * @param cToken Asset being redeemed\\n     * @param redeemer The address redeeming the tokens\\n     * @param redeemAmount The amount of the underlying asset being redeemed\\n     * @param redeemTokens The number of tokens being redeemed\\n     */\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external {\\n        require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Require tokens is zero or amount is also zero\\n        if (redeemTokens == 0 && redeemAmount > 0) {\\n            revert(\\\"redeemTokens zero\\\");\\n        }\\n\\n        // OLA_ADDITIONS : All from here\\n        // only cTokens may call 'redeemVerify'\\n        require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Get market + safety\\n        Market storage marketToRedeemFrom = markets[address(cToken)];\\n        require(marketToRedeemFrom.isListed, \\\"Market is not listed\\\");\\n\\n        // We only care about active collateral caps if the minter is in the market\\n        if (marketToRedeemFrom.accountMembership[redeemer]) {\\n            // Some cleanups, if the user is done with this market\\n            require(exitMarketIfDone(cToken, redeemer) == uint(Error.NO_ERROR), \\\"Exit market failure\\\");\\n\\n            // The redeemer is reducing the collateral value in a market they are part of.\\n            // let's reduce the used active collateral.\\n            reduceActiveCollateralUsed(marketToRedeemFrom, redeemTokens, CToken(cToken));\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\\n     * @param cToken The market to verify the borrow against\\n     * @param borrower The account which would borrow the asset\\n     * @param borrowAmount The amount of underlying the account would borrow\\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!borrowGuardianPaused[cToken], \\\"borrow is paused\\\");\\n\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (!markets[cToken].accountMembership[borrower])\\n{\\n            // only cTokens may call borrowAllowed if borrower not in market\\n            require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n            // attempt to add borrower to the market\\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\\n            if (err != Error.NO_ERROR) {\\n                return uint(err);\\n            }\\n\\n            // it should be impossible to break the important invariant\\n            assert(markets[cToken].accountMembership[borrower]);\\n        }\\n\\n        PriceOracle oracle = getOracleForCToken(cToken);\\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\\n            return uint(Error.PRICE_ERROR);\\n        }\\n\\n\\n        uint borrowCap = borrowCaps[cToken];\\n        // Borrow cap of 0 corresponds to unlimited borrowing\\n        if (borrowCap != 0) {\\n            uint totalBorrows = CToken(cToken).totalBorrows();\\n            uint nextTotalBorrows = add_(totalBorrows, borrowAmount);\\n            require(nextTotalBorrows < borrowCap, \\\"market borrow cap reached\\\");\\n        }\\n\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, , uint shortfall, uint borrowAmountUsd) = getHypotheticalAccountLiquidityInternal(borrower, CToken(cToken), 0, borrowAmount, true);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall > 0) {\\n            return uint(Error.INSUFFICIENT_LIQUIDITY);\\n        }\\n\\n        // OLA_ADDITIONS : Adds 'min borrow usd' requirement\\n        if (borrowAmountUsd < minBorrowAmountUsd) {\\n            return uint(Error.TOO_LITTLE_BORROW);\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            uint borrowIndex = CToken(cToken).borrowIndex();\\n            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);\\n            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates borrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset whose underlying is being borrowed\\n     * @param borrower The address borrowing the underlying\\n     * @param borrowAmount The amount of the underlying asset requested to borrow\\n     */\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external {\\n        // Shh - currently unused\\n        cToken;\\n        borrower;\\n        borrowAmount;\\n\\n        // Uncomment if adding logic\\n        // Only cTokens may call 'borrowVerify'\\n        // require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\\n     * @param cToken The market to verify the repay against\\n     * @param payer The account which would repay the asset\\n     * @param borrower The account which would borrowed the asset\\n     * @param repayAmount The amount of the underlying asset the account would repay\\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint) {\\n        // Shh - currently unused\\n        payer;\\n        borrower;\\n        repayAmount;\\n\\n        if (!markets[cToken].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            uint borrowIndex = CToken(cToken).borrowIndex();\\n            RainMakerInterface(rainMaker).updateCompBorrowIndex(cToken, borrowIndex);\\n            RainMakerInterface(rainMaker).distributeBorrowerComp(cToken, borrower, borrowIndex);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\\n     * @param cToken Asset being repaid\\n     * @param payer The address repaying the borrow\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint actualRepayAmount,\\n        uint borrowerIndex) external {\\n\\n        // Only cTokens may call 'repayBorrowVerify'\\n        require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Some cleanups, if the user is done with this market\\n        require(exitMarketIfDone(cToken, borrower) == uint(Error.NO_ERROR), \\\"Exit market failure\\\");\\n    }\\n\\n    /**\\n     * @notice Checks if the liquidation should be allowed to occur\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param repayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint) {\\n        // Shh - currently unused\\n        liquidator;\\n\\n        if (!markets[cTokenBorrowed].isListed || !markets[cTokenCollateral].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        /* The borrower must have shortfall in order to be liquidateable */\\n        // OLA_ADDITIONS : Use liquidation factor for liquidation calculation\\n        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower, false);\\n        if (err != Error.NO_ERROR) {\\n            return uint(err);\\n        }\\n        if (shortfall == 0) {\\n            return uint(Error.INSUFFICIENT_SHORTFALL);\\n        }\\n\\n        /* The liquidator may not repay more than what is allowed by the closeFactor */\\n        uint borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(borrower);\\n        // OLA_ADDITIONS : Using the constant value instead of the storage one ('closeFactorMantissa')\\n        uint maxClose = mul_ScalarTruncate(Exp({mantissa: fixedCloseFactorMantissa}), borrowBalance);\\n        if (repayAmount > maxClose) {\\n            return uint(Error.TOO_MUCH_REPAY);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param actualRepayAmount The amount of underlying being repaid\\n     */\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint actualRepayAmount,\\n        uint seizeTokens) external {\\n        // Shh - currently unused\\n        cTokenBorrowed;\\n        cTokenCollateral;\\n        liquidator;\\n        borrower;\\n        actualRepayAmount;\\n        seizeTokens;\\n\\n        // Uncomment if adding logic\\n        // Only cTokens may call 'liquidateBorrowVerify'\\n        // require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the seizing of assets should be allowed to occur\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint) {\\n        // OLA_ADDITIONS : Preventing LN admin from stopping liquidations (By removing the setter for the flag)\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        // require(!seizeGuardianPaused, \\\"seize is paused\\\");\\n\\n        // Shh - currently unused\\n        seizeTokens;\\n\\n        if (!markets[cTokenCollateral].isListed || !markets[cTokenBorrowed].isListed) {\\n            return uint(Error.MARKET_NOT_LISTED);\\n        }\\n\\n        if (CToken(cTokenCollateral).comptroller() != CToken(cTokenBorrowed).comptroller()) {\\n            return uint(Error.COMPTROLLER_MISMATCH);\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cTokenCollateral);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, borrower);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cTokenCollateral, liquidator);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates seize and reverts on rejection. May emit logs.\\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\\n     * @param liquidator The address repaying the borrow and seizing the collateral\\n     * @param borrower The address of the borrower\\n     * @param seizeTokens The number of collateral tokens to seize\\n     */\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external {\\n        // Shh - currently unused\\n        cTokenCollateral;\\n        cTokenBorrowed;\\n        liquidator;\\n        borrower;\\n        seizeTokens;\\n\\n        // Uncomment if adding logic\\n        // Only cTokens may call 'seizeVerify'\\n        // require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Shh - we don't ever want this hook to be marked pure\\n        if (false) {\\n            maxAssets = maxAssets;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\\n     * @param cToken The market to verify the transfer against\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\\n     */\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint) {\\n        // Pausing is a very serious situation - we revert to sound the alarms\\n        require(!transferGuardianPaused, \\\"transfer is paused\\\");\\n\\n        // Currently the only consideration is whether or not\\n        //  the src is allowed to redeem this many tokens\\n        uint allowed = redeemAllowedInternal(cToken, src, transferTokens);\\n        if (allowed != uint(Error.NO_ERROR)) {\\n            return allowed;\\n        }\\n\\n        if (hasRainMaker()) {\\n            // Keep the flywheel moving\\n            RainMakerInterface(rainMaker).updateCompSupplyIndex(cToken);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, src);\\n            RainMakerInterface(rainMaker).distributeSupplierComp(cToken, dst);\\n        }\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Validates transfer and reverts on rejection. May emit logs.\\n     * IMPORTANT : This function is also called from a cToken's 'seizeInternal', so, it is\\n     *             imperative to make sure that any change to this function is in line with\\n     *             the logic requirements of 'seizeInternal'.\\n     * @param cToken Asset being transferred\\n     * @param src The account which sources the tokens\\n     * @param dst The account which receives the tokens\\n     * @param transferTokens The number of cTokens to transfer\\n     */\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external {\\n        // OLA_ADDITIONS : All from here\\n        // only cTokens may call 'transferVerify'\\n        require(msg.sender == cToken, \\\"sender must be cToken\\\");\\n\\n        // Get market + safety\\n        Market storage marketToTransferIn = markets[address(cToken)];\\n        require(marketToTransferIn.isListed, \\\"Market is not listed\\\");\\n\\n        bool srcMembership = marketToTransferIn.accountMembership[src];\\n        bool dstMembership = marketToTransferIn.accountMembership[dst];\\n\\n        // If no side is in the market, the active collateral is not changed.\\n        // If both of them are in the market, the active collateral stays the same.\\n        if (srcMembership == dstMembership) {\\n            return;\\n        } else if (srcMembership) {\\n            // This is an easy one, active collateral usage only decreases\\n            return reduceActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));\\n        } else if (dstMembership) {\\n            // This is a complex one. The dst might not be able to receive the transferred cTokens if\\n            // it will exceed the allowed active collateral cap.\\n            // So, let's check whether activating that much new collateral is allowed.\\n            uint collateralActivationError = collateralActivationAllowed(CToken(cToken), marketToTransferIn, transferTokens);\\n            require(collateralActivationError == uint(Error.NO_ERROR), \\\"Collateral activation is not allowed\\\");\\n\\n            // All seems to be ok, increase the usage count\\n            increaseActiveCollateralUsed(marketToTransferIn, transferTokens, CToken(cToken));\\n        }\\n    }\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    /**\\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\\n     */\\n    struct AccountLiquidityLocalVars {\\n        uint sumCollateral;\\n        uint sumBorrowPlusEffects;\\n        uint cTokenBalance;\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n        uint oraclePriceMantissa;\\n        // OLA_ADDITIONS : Renamed from 'collateralFactor' to 'collateralOrLiquidationFactor'\\n        Exp collateralOrLiquidationFactor;\\n        Exp exchangeRate;\\n        Exp oraclePrice;\\n        Exp tokensToDenom;\\n\\n        // OLA_ADDITIONS : Added 'borrowAmountUsd' for \\\"min borrow usd check\\\"\\n        uint borrowAmountUsd;\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, true);\\n\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * OLA ADDITIONS : This function\\n     * @notice Determine the current account liquidity wrt liquidation requirements\\n     * @return (possible error code (semi-opaque),\\n                account liquidity in excess of liquidation requirements,\\n     *          account shortfall below liquidation requirements)\\n     */\\n    function getAccountLiquidityByLiquidationFactor(address account) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, false);\\n\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine the current account liquidity wrt collateral requirements\\n     * @return (possible error code,\\n                account liquidity in excess of collateral requirements,\\n     *          account shortfall below collateral requirements)\\n     */\\n    function getAccountLiquidityInternal(address account, bool useCollateralFactor) internal view returns (Error, uint, uint) {\\n        // OLA_ADDITIONS : added 'useCollateralFactor' + changed from direct 'return' to 'de-construct and return'\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(0), 0, 0, useCollateralFactor);\\n        return (err, liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidity(\\n        address account,\\n        address cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) public view returns (uint, uint, uint) {\\n        // OLA_ADDITIONS : added 'true' to keep using the default 'collateralFactor'\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, true);\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS : This function\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @return (possible error code (semi-opaque),\\n                hypothetical account liquidity in excess of liquidation requirements,\\n     *          hypothetical account shortfall below liquidation requirements)\\n     */\\n    function getHypotheticalAccountLiquidityByLiquidationFactor(\\n        address account,\\n        address cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount) public view returns (uint, uint, uint) {\\n        (Error err, uint liquidity, uint shortfall, ) = getHypotheticalAccountLiquidityInternal(account, CToken(cTokenModify), redeemTokens, borrowAmount, false);\\n        return (uint(err), liquidity, shortfall);\\n    }\\n\\n    /**\\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\\n     * @param cTokenModify The market to hypothetically redeem/borrow in\\n     * @param account The account to determine liquidity for\\n     * @param redeemTokens The number of tokens to hypothetically redeem\\n     * @param borrowAmount The amount of underlying to hypothetically borrow\\n     * @param useCollateralFactor True - use the \\\"default\\\" 'collateralFactorMantissa', False - use 'liquidationFactorMantissa'\\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\\n     *  without calculating accumulated interest.\\n     * @return (possible error code,\\n                hypothetical account liquidity in excess of collateral requirements,\\n     *          hypothetical account shortfall below collateral requirements)\\n     */\\n    function getHypotheticalAccountLiquidityInternal(\\n        address account,\\n        CToken cTokenModify,\\n        uint redeemTokens,\\n        uint borrowAmount,\\n        // OLA_ADDITIONS : added 'useCollateralFactor'\\n        bool useCollateralFactor) internal view returns (Error, uint, uint, uint) {\\n\\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\\n        uint oErr;\\n\\n        // For each asset the account is in\\n        CToken[] memory assets = accountAssets[account];\\n        for (uint i = 0; i < assets.length; i++) {\\n            CToken asset = assets[i];\\n\\n            // Read the balances and exchange rate from the cToken\\n            (oErr, vars.cTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = asset.getAccountSnapshot(account);\\n            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n                return (Error.SNAPSHOT_ERROR, 0, 0, 0);\\n            }\\n\\n            // OLA_ADDITIONS : Added the distinction between using collateralFactorMantissa and liquidationFactorMantissa\\n            if (useCollateralFactor) {\\n                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});\\n            } else {\\n                vars.collateralOrLiquidationFactor = Exp({mantissa: markets[address(asset)].liquidationFactorMantissa});\\n            }\\n\\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\\n\\n            // Get the normalized price of the asset\\n            PriceOracle oracle = getOracleForCToken(address(asset));\\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\\n\\n            if (vars.oraclePriceMantissa == 0) {\\n                return (Error.PRICE_ERROR, 0, 0, 0);\\n            }\\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\\n\\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\\n            vars.tokensToDenom = mul_(mul_(vars.collateralOrLiquidationFactor, vars.exchangeRate), vars.oraclePrice);\\n            // sumCollateral += tokensToDenom * cTokenBalance\\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(vars.tokensToDenom, vars.cTokenBalance, vars.sumCollateral);\\n\\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);\\n\\n            // Calculate effects of interacting with cTokenModify\\n            if (asset == cTokenModify) {\\n                // redeem effect\\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);\\n\\n                // borrow effect\\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);\\n\\n                // OLA_ADDITIONS : Assigning value to the newly added 'borrowAmountUsd'\\n                // This will only have a non-zero value when the calculation is made for a 'borrow' action.\\n                vars.borrowAmountUsd = mul_ScalarTruncate(vars.oraclePrice, borrowAmount);\\n            }\\n        }\\n\\n        // These are safe, as the underflow condition is checked first\\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\\n            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0, vars.borrowAmountUsd);\\n        } else {\\n            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral, vars.borrowAmountUsd);\\n        }\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS : This function\\n     * @notice Determine what is the latest price update timestamp between all of the markets the account is in.\\n     * @param account The account to determine liquidity for\\n     * @return (possible error code (semi-opaque),\\n     *          latest price update timestamp for all of the assets the account has liquidity/borrow balance,\\n     */\\n//    function getLastPriceUpdateTimestampForAccount(\\n//        address account) public view returns (Error, uint) {\\n//        return getLastPriceUpdateTimestampForAccountInternal(account);\\n//    }\\n\\n    /**\\n     * OLA_ADDITIONS : This function\\n     * @notice Determine what is the latest price update timestamp between all of the markets the account is in.\\n     * @param account The account to determine liquidity for\\n     * @return (possible error code (semi-opaque),\\n     *          latest price update timestamp for all of the assets the account has liquidity/borrow balance,\\n     */\\n//    function getLastPriceUpdateTimestampForAccountInternal(\\n//        address account) internal view returns (Error, uint) {\\n//        uint latestPriceUpdateTimestamp = 0;\\n//\\n//        // For each asset the account is in\\n//        CToken[] memory assets = accountAssets[account];\\n//        for (uint i = 0; i < assets.length; i++) {\\n//            CToken asset = assets[i];\\n//\\n//            // Read the balances and exchange rate from the cToken\\n//            (uint oErr, uint cTokenBalance, uint borrowBalance, ) = asset.getAccountSnapshot(account);\\n//            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\\n//                return (Error.SNAPSHOT_ERROR, 0);\\n//            } else if (cTokenBalance > 0 || borrowBalance > 0) { // Account has any balance in asset ?\\n//                uint priceUpdateTimestampForAsset = oracle.getUnderlyingPriceUpdateTimestamp(address(asset));\\n//\\n    //                if (priceUpdateTimestampForAsset > latestPriceUpdateTimestamp) {\\n//                // Is this asset the last one to get it's price updated ?\\n//                    latestPriceUpdateTimestamp = priceUpdateTimestampForAsset;\\n//                }\\n//            }\\n//        }\\n//\\n//        return (Error.NO_ERROR, latestPriceUpdateTimestamp);\\n//    }\\n\\n    /**\\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\\n     * @param cTokenBorrowed The address of the borrowed cToken\\n     * @param cTokenCollateral The address of the collateral cToken\\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\\n     */\\n    function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint actualRepayAmount) external view returns (uint, uint) {\\n        /* Read oracle prices for borrowed and collateral markets */\\n        uint priceBorrowedMantissa = getOracleForCToken(cTokenBorrowed).getUnderlyingPrice(CToken(cTokenBorrowed));\\n        uint priceCollateralMantissa = getOracleForCToken(cTokenCollateral).getUnderlyingPrice(CToken(cTokenCollateral));\\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\\n            return (uint(Error.PRICE_ERROR), 0);\\n        }\\n\\n        /*\\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\\n         *  seizeTokens = seizeAmount / exchangeRate\\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\\n         */\\n        uint exchangeRateMantissa = CToken(cTokenCollateral).exchangeRateStored(); // Note: reverts on error\\n        uint seizeTokens;\\n        Exp memory numerator;\\n        Exp memory denominator;\\n        Exp memory ratio;\\n\\n        // OLA_ADDITIONS : Added a direct read for the market 'liquidationIncentiveMantissa'.\\n        // notice: will be 0 for unsupported 'cTokenCollateral'\\n        numerator = mul_(Exp({mantissa: markets[cTokenCollateral].liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));\\n        denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));\\n        ratio = div_(numerator, denominator);\\n\\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\\n\\n        return (uint(Error.NO_ERROR), seizeTokens);\\n    }\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n     * @notice Sets a new rain-maker for the Comptroller\\n     *          Important : We assume that the 'RainMaker' handles the syncing of all of the markets\\n     *                      already supported by this contract.\\n     * @dev Admin function to set a new rain maker\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setRainMaker(address newRainMaker) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RAIN_MAKER_OWNER_CHECK);\\n        }\\n\\n        // Before saying goodbye, run all retirement logic (e.g. ensure all of the indexes are updated)\\n        if (hasRainMaker()) {\\n            bytes memory retireParams;\\n            IComptrollerPeripheral(rainMaker).retire(retireParams);\\n        }\\n\\n        // Track the old rain maker for the Comptroller\\n        address oldRainMaker = rainMaker;\\n\\n        // Set Comptroller's RainMaker to newRainMaker\\n        rainMaker = newRainMaker;\\n\\n        // Emit NewRainMaker(oldRainMaker, newRainMaker)\\n        emit NewRainMaker(oldRainMaker, newRainMaker);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the collateralFactor for a market\\n      * @dev Admin function to set per-market collateralFactor\\n      * @param cToken The market to set the factor on\\n      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setCollateralFactor(CToken cToken, uint newCollateralFactorMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\\n        }\\n\\n        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\\n\\n        // Check collateral factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\\n        }\\n\\n        // Ensure liquidationFactor is greater or equal to the new collateralFactor\\n        uint marketLiquidationFactorMantissa = market.liquidationFactorMantissa;\\n        if (newCollateralFactorMantissa > marketLiquidationFactorMantissa) {\\n            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_HIGHER_THAN_LIQUIDATION_FACTOR);\\n        }\\n\\n        // If collateral factor != 0, fail if price == 0\\n        PriceOracle oracle = getOracleForCToken(address(cToken));\\n        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Set market's collateral factor to new collateral factor, remember old value\\n        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\\n\\n        // Emit event with asset, old collateral factor, and new collateral factor\\n        emit NewCollateralFactor(cToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets the liquidationFactor for a market.\\n      *         Important : In order to avoid the possibility of existing positions becoming liquidateable -\\n      *                     This value can only be increased.\\n      * @dev Admin function to set per-market liquidationFactor\\n      * @param cToken The market to set the factor on\\n      * @param newLiquidationFactorMantissa The new liquidation factor, scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setLiquidationFactor(CToken cToken, uint newLiquidationFactorMantissa) external returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_FACTOR_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_FACTOR_NO_EXISTS);\\n        }\\n\\n        Exp memory newLiquidationFactorExp = Exp({mantissa: newLiquidationFactorMantissa});\\n\\n        // Check liquidation factor <= 0.9\\n        Exp memory highLimit = Exp({mantissa: liquidationFactorMaxMantissa});\\n        if (lessThanExp(highLimit, newLiquidationFactorExp)) {\\n            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_VALIDATION);\\n        }\\n\\n        // Ensure new liquidationFactor is greater or equal to the collateralFactor\\n        uint marketCollateralFactorMantissa = market.collateralFactorMantissa;\\n        if (newLiquidationFactorMantissa < marketCollateralFactorMantissa) {\\n            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_COLLATERAL_FACTOR);\\n        }\\n\\n        // Ensure new liquidation factor is strictly greater than the existing one\\n        uint oldLiquidationFactorMantissa = market.liquidationFactorMantissa;\\n        if (oldLiquidationFactorMantissa >= newLiquidationFactorMantissa) {\\n            return fail(Error.INVALID_LIQUIDATION_FACTOR, FailureInfo.SET_LIQUIDATION_FACTOR_LOWER_THAN_EXISTING_FACTOR);\\n        }\\n\\n        // If liquidation factor != 0, fail if price == 0\\n        PriceOracle oracle = getOracleForCToken(address(cToken));\\n        if (newLiquidationFactorMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_FACTOR_WITHOUT_PRICE);\\n        }\\n\\n        // Set market's liquidation factor to new liquidation factor, remember old value\\n        market.liquidationFactorMantissa = newLiquidationFactorMantissa;\\n\\n        // Emit event with asset, old liquidation factor, and new liquidation factor\\n        emit NewCollateralFactor(cToken, oldLiquidationFactorMantissa, newLiquidationFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * OLA_ADDITIONS : Added 'cToken' to support 'incentive per market'\\n      * @notice Sets liquidationIncentive\\n      * @dev Admin function to set liquidationIncentive\\n      * @param cToken The market to set the factor on\\n      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\\n      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\\n      */\\n    function _setLiquidationIncentive(CToken cToken, uint newLiquidationIncentiveMantissa) external returns (uint) {\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\\n        }\\n\\n        // Verify market is listed\\n        Market storage market = markets[address(cToken)];\\n        if (!market.isListed) {\\n            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_LIQUIDATION_INCENTIVE_NO_EXISTS);\\n        }\\n\\n        // OLA_ADDITIONS : All of the validations for 'newLiquidationIncentiveMantissa'\\n        Exp memory newLiquidationIncentiveExp = Exp({mantissa: newLiquidationIncentiveMantissa});\\n\\n        // Check liquidation incentive <= 0.3 AND >= 0.05 [5,30]\\n        Exp memory highLimit = Exp({mantissa: liquidationIncentiveMaxMantissa});\\n        Exp memory lowLimit = Exp({mantissa: liquidationIncentiveMinMantissa});\\n        if (lessThanExp(highLimit, newLiquidationIncentiveExp) || lessThanExp(newLiquidationIncentiveExp, lowLimit)) {\\n            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\\n        }\\n\\n        // If liquidation incentive != 0, fail if price == 0 (Extra safety check)\\n        PriceOracle oracle = getOracleForCToken(address(cToken));\\n        if (newLiquidationIncentiveMantissa != 0 && oracle.getUnderlyingPrice(cToken) == 0) {\\n            return fail(Error.PRICE_ERROR, FailureInfo.SET_LIQUIDATION_INCENTIVE_WITHOUT_PRICE);\\n        }\\n\\n        // Save current value for use in log\\n        uint oldLiquidationIncentiveMantissa = market.liquidationIncentiveMantissa;\\n\\n        // Set liquidation incentive to new incentive\\n        market.liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\\n\\n        // Emit event with old incentive, new incentive\\n        emit NewLiquidationIncentive(cToken, oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Add the market to the markets mapping and set it as listed\\n      * @dev Admin function to set isListed and add support for the market\\n      * @param cToken The address of the market (token) to list\\n      * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n      */\\n    function _supportMarket(CToken cToken) external returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\\n        }\\n\\n        if (markets[address(cToken)].isListed) {\\n            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\\n        }\\n\\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\\n\\n        // OLA_ADDITIONS : Added 'liquidationFactorMantissa', 'liquidationIncentiveMantissa', 'activeCollateralUSDCap', 'activeCollateralCTokenUsage'\\n        markets[address(cToken)] = Market({isListed: true, collateralFactorMantissa: 0,\\n        liquidationFactorMantissa: 0, liquidationIncentiveMantissa: 0,\\n        activeCollateralUSDCap: 0, activeCollateralCTokenUsage: 0\\n        });\\n\\n        _addMarketInternal(address(cToken));\\n\\n        emit MarketListed(cToken);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _addMarketInternal(address cToken) internal {\\n        // OLA_ADDITIONS : Added this 'max assets' limitation\\n        require(allMarkets.length < maxAllowedAssets, \\\"Too many assets\\\");\\n\\n        for (uint i = 0; i < allMarkets.length; i ++) {\\n            require(allMarkets[i] != CToken(cToken), \\\"market already added\\\");\\n        }\\n        allMarkets.push(CToken(cToken));\\n\\n        // OLA_ADDITIONS : Initializing the market at the RainMaker as well\\n        if (hasRainMaker()) {\\n            RainMakerInterface(rainMaker)._supportMarket(cToken);\\n        }\\n    }\\n\\n\\n    /**\\n      * OLA_ADDITIONS : This function\\n      * @notice Set the given active collateral caps (in USD) for the given cToken markets. Any action that brings total active collateral to or above borrow cap will revert.\\n      * @dev Admin function to set the active collateral caps. A active-collateral cap of 0 corresponds to unlimited active collateral.\\n      * @param cTokens The addresses of the markets (tokens) to change the active-collateral caps for\\n      * @param newActiveCollateralCaps The new active-collateral cap values in usd to be set. A value of 0 corresponds to unlimited borrowing.\\n      */\\n    function _setActiveCollateralCaps(CToken[] calldata cTokens, uint[] calldata newActiveCollateralCaps) external {\\n        require(msg.sender == admin, \\\"only admin can set active collateral caps\\\");\\n\\n        uint numMarkets = cTokens.length;\\n        uint numActiveCollateralCaps = newActiveCollateralCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numActiveCollateralCaps, \\\"invalid input\\\");\\n\\n        for(uint i = 0; i < numMarkets; i++) {\\n            Market storage marketToJoin = markets[address(cTokens[i])];\\n\\n            require(marketToJoin.isListed,\\\"Market not listed\\\");\\n\\n            marketToJoin.activeCollateralUSDCap = newActiveCollateralCaps[i];\\n\\n            emit NewActiveCollateralCap(cTokens[i], newActiveCollateralCaps[i]);\\n        }\\n    }\\n\\n    /**\\n      * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\\n      * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\\n      * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\\n      * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\\n      */\\n    function _setMarketBorrowCaps(CToken[] calldata cTokens, uint[] calldata newBorrowCaps) external {\\n    \\trequire(msg.sender == admin || msg.sender == borrowCapGuardian, \\\"only admin or borrow cap guardian can set borrow caps\\\"); \\n\\n        uint numMarkets = cTokens.length;\\n        uint numBorrowCaps = newBorrowCaps.length;\\n\\n        require(numMarkets != 0 && numMarkets == numBorrowCaps, \\\"invalid input\\\");\\n\\n        for(uint i = 0; i < numMarkets; i++) {\\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Borrow Cap Guardian\\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\\n     */\\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\\n        require(msg.sender == admin, \\\"only admin can set borrow cap guardian\\\");\\n\\n        // Save current value for inclusion in log\\n        address oldBorrowCapGuardian = borrowCapGuardian;\\n\\n        // Store borrowCapGuardian with value newBorrowCapGuardian\\n        borrowCapGuardian = newBorrowCapGuardian;\\n\\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\\n    }\\n\\n    /**\\n     * @notice Admin function to change the Pause Guardian\\n     * @param newPauseGuardian The address of the new Pause Guardian\\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\\n     */\\n    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\\n        }\\n\\n        // Save current value for inclusion in log\\n        address oldPauseGuardian = pauseGuardian;\\n\\n        // Store pauseGuardian with value newPauseGuardian\\n        pauseGuardian = newPauseGuardian;\\n\\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\\n        require(markets[address(cToken)].isListed, \\\"cannot pause a market that is not listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        mintGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Mint\\\", state);\\n        return state;\\n    }\\n\\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\\n        require(markets[address(cToken)].isListed, \\\"cannot pause a market that is not listed\\\");\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        borrowGuardianPaused[address(cToken)] = state;\\n        emit ActionPaused(cToken, \\\"Borrow\\\", state);\\n        return state;\\n    }\\n\\n    function _setTransferPaused(bool state) public returns (bool) {\\n        require(msg.sender == pauseGuardian || msg.sender == admin, \\\"only pause guardian and admin can pause\\\");\\n        require(msg.sender == admin || state == true, \\\"only admin can unpause\\\");\\n\\n        transferGuardianPaused = state;\\n        emit ActionPaused(\\\"Transfer\\\", state);\\n        return state;\\n    }\\n\\n    /**\\n     * @notice Checks caller is admin\\n     */\\n    function isAdmin() internal view returns (bool) {\\n        return msg.sender == admin;\\n    }\\n\\n    /**\\n     * OLA_ADDITIONS : This function\\n     * @notice Ensures all markets are updating their implementation from the Registry\\n     */\\n    function updateDelegatedImplementations(bytes calldata becomeImplementationData) external {\\n        require(isAdmin(), \\\"Only admin can implement\\\");\\n\\n        // Update all markets\\n        for (uint i = 0; i < allMarkets.length; i ++) {\\n            CToken oToken = allMarkets[i];\\n            require(CTokenDelegatorInterface(address(oToken)).updateImplementationFromRegistry(false, becomeImplementationData), \\\"Update failed\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Return all of the markets\\n     * @dev The automatic getter may be used to access an individual market.\\n     * @return The list of market addresses\\n     */\\n    function getAllMarkets() public view returns (CToken[] memory) {\\n        return allMarkets;\\n    }\\n\\n    function getOracleForCToken(address cToken) view public returns (PriceOracle) {\\n        PriceOracle oracle = PriceOracle(RegistryForComptrollerV0_01(registry).getOracleForAsset(CToken(cToken).underlying()));\\n        return oracle;\\n    }\\n\\n    function hasRainMaker() view public returns (bool) {\\n        return address(rainMaker) != address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/OlaPlatform/versions/1/RegistryV1.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../Registry/RegistryInterface.sol\\\";\\nimport \\\"../../Registry/RegistryStorage.sol\\\";\\nimport \\\"../../Registry/Ministry.sol\\\";\\nimport \\\"../../../LendingNetwork/Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../../../LendingNetwork/PriceOracle/PriceOracle.sol\\\";\\n\\ninterface ICTokenForRegistryV1 {\\n    function underlying() external view returns (address);\\n}\\n\\ninterface OTokensFactoryForRegistry {\\n    function deployODelegator(\\n        address underlying,\\n        bytes32 contractNameHash,\\n        bytes calldata params,\\n        address comptroller,\\n        address interestRateModel,\\n        address admin,\\n        bytes calldata becomeImplementationData\\n    ) external returns (address);\\n}\\n\\ninterface PeripheralFactoryForRegistry {\\n    function deployPeripheryContract(bytes32 contractNameHash, address _comptroller, address _admin, bytes calldata params) external returns (address);\\n}\\n\\n/**\\n * @title Ola's Registry Contract V1\\n * @author Ola\\n */\\ncontract RegistryV1 is RegistryV1Storage, RegistryV1Interface {\\n    /// @notice Emitted when an admin changes Ola reserve factor\\n    event NewOlaReserveFactor(uint oldOlaReserveFactorMantissa, uint newOlaReserveFactorMantissa);\\n\\n    /// @notice Emitted when an admin changes Ola reserve factor\\n    event NewOlaBankAddress(address oldOlaBankAddress, address newOlaBankAddress);\\n\\n    /// @notice Emitted when an admin changes the price oracle of an asset\\n    event NewOracleForAsset(address indexed asset, address indexed oldOracle, address indexed newOracle);\\n\\n    /// @notice Emitted when an admin changes the factory for a peripheral contract\\n    event NewPeripheralFactory(bytes32 indexed contracNameHash, address indexed oldFactory, address indexed newFactory);\\n\\n    /// @notice Emitted when Ola network publishes a new system version\\n    event OlaSystemVersionPublished(uint indexed systemVersion);\\n\\n    /// @notice Emitted when Ola network publishes a new system version\\n    event OlaLatestSystemVersionUpdated(uint indexed oldLatestystemVersion, uint indexed newLatestystemVersion);\\n\\n    /// @notice Emitted when a LeN has been registered\\n    event LendingNetworkRegistered(address indexed lnUnitroller, uint indexed systemVersion);\\n\\n    /// @notice Emitted when a LeN has upgraded it's system version\\n    event LendingNetworkVersionUpdated(address indexed lnUnitroller, uint indexed oldVersion, uint indexed newVersion);\\n\\n    /// @notice Emitted when a new OToken is deployed\\n    event OTokenDeployed(address indexed lendingNetwork, address indexed underlying, address oTokenAddress, address indexed admin);\\n\\n    /// @notice Emitted when a new peripheral contract is deployed\\n    event PeripheralContractDeployed(address indexed lendingNetwork, address indexed admin, bytes32 indexed contracNameHash);\\n\\n    constructor() public {\\n        admin = msg.sender;\\n    }\\n\\n    /*** Price oracles ***/\\n\\n    /**\\n     * Returns the oracle address for the given asset\\n     */\\n    function getOracleForAsset(address asset) external view returns (address) {\\n        return priceOracles[asset];\\n    }\\n\\n    /**\\n     * Returns the oracle price for the given asset\\n     */\\n    function getPriceForAsset(address asset) external view returns (uint256) {\\n        return getPriceForAssetInternal(asset);\\n    }\\n\\n    /**\\n     * Returns the oracle price for the given cToken's underlying asset\\n     */\\n    function getPriceForUnderling(address cToken) external view returns (uint256) {\\n        return getPriceForAssetInternal(ICTokenForRegistryV1(cToken).underlying());\\n    }\\n\\n    /*** Interest rate model ***/\\n    function isSupportedInterestRateModel(address interestRateModel) external view returns (bool) {\\n        return isInterestRateModelSupportedInternal(interestRateModel);\\n    }\\n\\n    /*** Versions and implementations ***/\\n\\n    /**\\n     *\\n     */\\n    function isSystemVersionSupported(uint256 systemVersion) public view returns (bool) {\\n        return supportedSystemVersions[systemVersion];\\n    }\\n\\n    function isLnRegistered(address lnUnitroller) public view returns (bool) {\\n        return lnVersions[lnUnitroller] != 0;\\n    }\\n\\n    /**\\n     * @notice Returns implementation address for the given contract name hash for the version of the given LeN\\n     */\\n    function getImplementationForLn(address lnUnitroller, bytes32 contractNameHash) external view returns (address) {\\n        uint256 lnSystemVersion = getLnVersion(lnUnitroller);\\n\\n        require(isLnRegistered(lnUnitroller), \\\"No version found\\\");\\n\\n        return getImplementation(lnSystemVersion, contractNameHash);\\n    }\\n\\n    /**\\n     * @notice Returns the implementation address for the given contract name hash and system version\\n     */\\n    function getImplementation(uint256 systemVersion, bytes32 contractNameHash) public view returns (address) {\\n        return implementations[systemVersion][contractNameHash];\\n    }\\n\\n    /**\\n     * @notice Returns the version that is associated with the given LeN\\n     */\\n    function getLnVersion(address lnUnitroller) public view returns (uint256) {\\n        return lnVersions[lnUnitroller];\\n    }\\n\\n    /*** LN Admin functions ***/\\n\\n    function updateLnVersion(uint256 newVersion) external returns (bool) {\\n        address lnUnitroller = msg.sender;\\n\\n        // Only the Unitroller can update itself\\n        require(isLnRegistered(lnUnitroller), \\\"Not Registered\\\");\\n\\n        // Ensure valid version\\n        require(isSystemVersionSupported(newVersion), \\\"Wrong Version\\\");\\n\\n        // Only going forward\\n        uint256 currentLnVersion = lnVersions[lnUnitroller];\\n        require(currentLnVersion < newVersion, \\\"Only going forward\\\");\\n\\n        // Ensure it is in range\\n        require(newVersion <= latestSystemVersion, \\\"Too high version\\\");\\n\\n        // Finally, update the ln version\\n        return updateLnVersionInternal(lnUnitroller, newVersion);\\n    }\\n\\n    /**\\n     * @notice Called by the comptroller in order to create a new oToken instance.\\n     * @param underlying The asset to be managed by the created oToken\\n     * @param contractNameHash The hash of the wanted contract identifier\\n     * @param params Dynamic array to allow expansion of logic without interface change\\n     * @param interestRateModel The address for the wanted IRM\\n     * @param contractAdmin The admin address for the newly created oToken\\n     * @param becomeImplementationData Legacy byte array to pass to 'become implementation'\\n     */\\n    function deployOToken(address underlying,\\n        bytes32 contractNameHash,\\n        bytes calldata params,\\n        address interestRateModel,\\n        address contractAdmin,\\n        bytes calldata becomeImplementationData) external returns (address) {\\n        address lnUnitroller = msg.sender;\\n\\n        // Only the Unitroller can ask for oToken deployment\\n        require(isLnRegistered(lnUnitroller), \\\"Not Registered\\\");\\n\\n        // Must provide supported interest rate model\\n        require(isInterestRateModelSupportedInternal(interestRateModel), \\\"IRM not supported\\\");\\n\\n        uint256 currentLnVersion = lnVersions[lnUnitroller];\\n\\n        // Must be a supported contract name for current LeN current LeN version\\n        require(isContractNameHashSupportedForVersion(currentLnVersion, contractNameHash), \\\"Contract not supported for LeN version\\\");\\n\\n        // Ensure the underlying is supported (has price oracle)\\n        require(isAssetSupported(underlying), \\\"Asset not supported\\\");\\n\\n        address oTokensFactory = tokenFactories[currentLnVersion];\\n        require(oTokensFactory != address(0), \\\"No OTokensFactory found\\\");\\n\\n        address deployedOToken =  OTokensFactoryForRegistry(oTokensFactory).deployODelegator(underlying, contractNameHash, params, lnUnitroller, interestRateModel, contractAdmin, becomeImplementationData);\\n\\n        emit OTokenDeployed(lnUnitroller, underlying, deployedOToken, contractAdmin);\\n\\n        return deployedOToken;\\n    }\\n\\n    /**\\n     * @notice Called by the comptroller in order to create a new peripheral contract instance.\\n     * @param contractNameHash The hash of the wanted contract identifier\\n     * @param params Dynamic array to allow expansion of logic without interface change\\n     * @param contractAdmin The admin address for the newly created contract\\n     */\\n    function deployPeripheralContract(bytes32 contractNameHash,\\n        bytes calldata params,\\n        address contractAdmin) external returns (address) {\\n        address lnUnitroller = msg.sender;\\n\\n        // Only the Unitroller can ask for a peripheral contract deployment\\n        require(isLnRegistered(lnUnitroller), \\\"Not Registered\\\");\\n\\n        address peripheralFactory = peripheralFactories[contractNameHash];\\n        require(peripheralFactory != address(0), \\\"No peripheral factory found\\\");\\n\\n        address deployedPeripheralContract = PeripheralFactoryForRegistry(peripheralFactory).deployPeripheryContract(contractNameHash, lnUnitroller, contractAdmin, params);\\n\\n        emit PeripheralContractDeployed(lnUnitroller, contractAdmin, contractNameHash);\\n\\n        return deployedPeripheralContract;\\n    }\\n\\n    /*** Initialization functions ***/\\n    function _become(Ministry ministry) public {\\n        require(msg.sender == ministry.admin(), \\\"only Ministry admin can change brains\\\");\\n        require(ministry._acceptImplementation() == 0, \\\"change not authorized\\\");\\n    }\\n\\n    /*** Admin functions ***/\\n\\n    function publishNewSystemVersion(uint256 systemVersion, bytes32[] calldata contractNameHashes, address[] calldata contractImplementations, address oTokensFactory) external {\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n        require(contractNameHashes.length == contractImplementations.length, \\\"Arrays must be 1:1\\\");\\n\\n        require(!supportedSystemVersions[systemVersion], \\\"Already published\\\");\\n\\n        // Adds the flag.\\n        supportedSystemVersions[systemVersion] = true;\\n\\n        // Set the implementations\\n        for (uint i = 0; i < contractNameHashes.length; i++) {\\n            bytes32 contractNameHash = contractNameHashes[i];\\n            address contractImplementation = contractImplementations[i];\\n\\n            implementations[systemVersion][contractNameHash] = contractImplementation;\\n        }\\n\\n        // Set the OTokens Factory\\n        require(oTokensFactory != address(0), \\\"Must have oTokens factory\\\");\\n        tokenFactories[systemVersion] = oTokensFactory;\\n\\n        if (systemVersion > latestSystemVersion) {\\n            uint oldLatestSystemVersion  = latestSystemVersion;\\n            latestSystemVersion = systemVersion;\\n            emit OlaLatestSystemVersionUpdated(oldLatestSystemVersion, latestSystemVersion);\\n        }\\n\\n\\n        emit OlaSystemVersionPublished(systemVersion);\\n    }\\n\\n    function registerNewLn(address lnUnitroller) external {\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n        require(lnUnitroller != address(0), \\\"Empty unitroller\\\");\\n        require(!isLnRegistered(lnUnitroller), \\\"Already registered\\\");\\n\\n        registerNewLnInternal(lnUnitroller);\\n    }\\n\\n    function setOlaBankAddress(address olaBankAddress_) external {\\n        require(msg.sender == admin, \\\"Not admin\\\");\\n        address oldOlaBankAddress = olaBankAddress;\\n        olaBankAddress = olaBankAddress_;\\n        emit NewOlaBankAddress(oldOlaBankAddress, olaBankAddress);\\n    }\\n\\n    function registerNewLnInternal(address lnUnitroller) internal {\\n        lnVersions[lnUnitroller] = latestSystemVersion;\\n\\n        emit LendingNetworkRegistered(lnUnitroller, latestSystemVersion);\\n    }\\n\\n    function updateLnVersionInternal(address lnUnitroller, uint256 newVersion) internal returns (bool) {\\n        uint previousVersion = lnVersions[lnUnitroller];\\n\\n        lnVersions[lnUnitroller] = newVersion;\\n\\n        emit LendingNetworkVersionUpdated(lnUnitroller, previousVersion, newVersion);\\n\\n        return true;\\n    }\\n\\n    function setOracleForAsset(address asset, address oracleAddress) external returns (bool) {\\n        // TODO : Add price fetching check\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n\\n        address oldOracle = priceOracles[asset];\\n\\n        priceOracles[asset] = oracleAddress;\\n\\n        emit NewOracleForAsset(asset, oldOracle, oracleAddress);\\n\\n        return true;\\n    }\\n\\n    function setFactoryForPeripheralContract(bytes32 contractNameHash, address factory) external returns (bool) {\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n\\n        address oldFactory = peripheralFactories[contractNameHash];\\n\\n        peripheralFactories[contractNameHash] = factory;\\n\\n        emit NewPeripheralFactory(contractNameHash, oldFactory, factory);\\n\\n        return true;\\n    }\\n\\n    function setSupportedInterestRateModel(address interestRateModel) external returns (bool) {\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n\\n        supportedInterestRateModels[interestRateModel] = true;\\n\\n        return true;\\n    }\\n\\n    function removeSupportedInterestRateModel(address interestRateModel) external returns (bool) {\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n        require(supportedInterestRateModels[interestRateModel], \\\"IRM is not supported\\\");\\n\\n        supportedInterestRateModels[interestRateModel] = false;\\n\\n        return true;\\n    }\\n\\n    /*** Util checkers ***/\\n\\n    /**\\n     * @notice Asset is considered supported if it has a price oracle\\n     */\\n    function isAssetSupported(address asset) public view returns (bool) {\\n        return priceOracles[asset] != address(0);\\n    }\\n\\n    /**\\n     * @notice Check if the given contract name hash is supported for the given version\\n     */\\n    function isContractNameHashSupportedForVersion(uint systemVersion, bytes32 contractNameHash) public view returns (bool) {\\n        return implementations[systemVersion][contractNameHash] != address(0);\\n    }\\n\\n    function isInterestRateModelSupportedInternal(address interestRateModel) internal view returns (bool) {\\n        return supportedInterestRateModels[interestRateModel];\\n    }\\n\\n    /**\\n     * Fetches the oracle price for the given asset (Or 0 if no oracle is defined)\\n     */\\n    function getPriceForAssetInternal(address asset) internal view returns (uint256) {\\n        address priceOracle = priceOracles[asset];\\n\\n        if (priceOracle != address(0)) {\\n            return PriceOracle(priceOracle).getAssetPrice(asset);\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/OlaPlatform/Registry/RegistryInterface.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\ncontract RegistryBaseInterface {\\n    /// @notice Indicator that this is a Registry contract (for inspection)\\n    bool public constant isRegistry = true;\\n\\n    /*** Interest rate model ***/\\n    function isSupportedInterestRateModel(address interestRateModel) external view returns (bool);\\n\\n    /*** Price oracles ***/\\n    function getOracleForAsset(address asset) external view returns (address);\\n    function getPriceForAsset(address asset) external view returns (uint256);\\n    function getPriceForUnderling(address cToken) external view returns (uint256);\\n\\n    /*** Versions and implementations ***/\\n    function isSystemVersionSupported(uint256 systemVersion) public view returns (bool);\\n    function isLnRegistered(address lnUnitroller) external view  returns (bool);\\n    function getImplementationForLn(address lnUnitroller, bytes32 contractNameHash) external view returns (address);\\n    function getImplementation(uint256 systemVersion, bytes32 contractNameHash) external view returns (address);\\n    function getLnVersion(address lnUnitroller) public view returns (uint256);\\n\\n    /*** LN Admin functions ***/\\n    function updateLnVersion(uint256 newVersion) external returns (bool);\\n}\\n\\ncontract RegistryV0Interface is RegistryBaseInterface {\\n    /*** Admin functions ***/\\n    function publishNewSystemVersion(uint256 systemVersion, bytes32[] calldata contractNameHashes, address[] calldata implementations) external;\\n    function registerNewLn(address lnUnitroller) external;\\n    function setOlaBankAddress(address olaAddress_) external;\\n    function setOlaReserveFactorMantissa(uint256 olaReserveFactorMantissa_) external;\\n    function setOracleForAsset(address asset, address oracleAddress) external returns (bool);\\n    function setSupportedInterestRateModel(address interestRateModel) external returns (bool);\\n}\\n\\ncontract RegistryV1Interface is RegistryBaseInterface {\\n    /*** LN Admin functions ***/\\n    function deployOToken(address underlying,\\n        bytes32 contractNameHash,\\n        bytes calldata params,\\n        address interestRateModel,\\n        address admin,\\n        bytes calldata becomeImplementationData) external returns (address);\\n\\n    /*** Admin functions ***/\\n    function publishNewSystemVersion(uint256 systemVersion, bytes32[] calldata contractNameHashes, address[] calldata implementations, address oTokensFactory) external;\\n    function registerNewLn(address lnUnitroller) external;\\n    function setOlaBankAddress(address olaAddress_) external;\\n    function setOracleForAsset(address asset, address oracleAddress) external returns (bool);\\n    function setSupportedInterestRateModel(address interestRateModel) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/OlaPlatform/Registry/RegistryStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\ncontract UnistryAdminStorage {\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n    * @notice Active brains of Ministry\\n    */\\n    address public implementation;\\n\\n    /**\\n    * @notice Pending brains of Ministry\\n    */\\n    address public pendingImplementation;\\n\\n    // Indicates if calculations should be block based or time based\\n    bool public blocksBased;\\n}\\n\\ncontract RegistryV0Storage is UnistryAdminStorage {\\n    // The address to send the 'Ola Part' when reducing reserves.\\n    address public olaBankAddress;\\n\\n    // Part of reserves that are allocated to Ola (Deprecated)\\n    uint256 public olaReservesFactorMantissa;\\n\\n    // Asset address -> Price oracle address\\n    mapping(address => address) public priceOracles;\\n\\n    // The latest system version\\n    uint256 public latestSystemVersion;\\n\\n    // Unitroller address -> System version (MAX_INT means always take latest)\\n    mapping(address => uint256) public lnVersions;\\n\\n    // System version -> (contract name hash -> implementation)\\n    mapping(uint256 => mapping(bytes32 => address)) public implementations;\\n\\n    // System versions => isSupported\\n    mapping(uint256 => bool) public supportedSystemVersions;\\n\\n    // Interest rate model address => isSupported\\n    mapping(address => bool) public supportedInterestRateModels;\\n}\\n\\ncontract RegistryV1Storage is RegistryV0Storage {\\n    // System version -> OTokens Factory\\n    mapping(uint256 => address) public tokenFactories;\\n\\n    // Contract name hash => Contract factory\\n    mapping(bytes32 => address) public peripheralFactories;\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/OlaPlatform/Registry/Ministry.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"./RegistryStorage.sol\\\";\\n\\n/**\\n * @title RegistryCore\\n * @dev Storage for the Registry is at this address, while execution is delegated to the `implementation`.\\n * OTokens and Unitrollers should reference this contract as their Registry.\\n */\\ncontract Ministry is UnistryAdminStorage {\\n\\n    /**\\n      * @notice Emitted when implementation is changed\\n      */\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingImplementation is accepted, which means Registry implementation is updated\\n      */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor(bool _blocksBased) public {\\n        // Set admin to caller\\n        admin = msg.sender;\\n\\n        // Set the calculation base for this blockchain contracts\\n        blocksBased = _blocksBased;\\n    }\\n\\n    /*** Admin Functions ***/\\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\\n\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n\\n        address oldPendingImplementation = pendingImplementation;\\n\\n        pendingImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, pendingImplementation);\\n\\n//        return uint(Error.NO_ERROR);\\n        return 0;\\n    }\\n\\n    /**\\n    * @notice Accepts new implementation of Registry. msg.sender must be pendingImplementation\\n    * @dev Admin function for new implementation to accept it's role as implementation\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n    */\\n    function _acceptImplementation() public returns (uint) {\\n        // Check caller is pendingImplementation and pendingImplementation \u2260 address(0)\\n        require(msg.sender == pendingImplementation && pendingImplementation != address(0), \\\"Not the EXISTING registry implementation\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldImplementation = implementation;\\n        address oldPendingImplementation = pendingImplementation;\\n\\n        implementation = pendingImplementation;\\n\\n        pendingImplementation = address(0);\\n\\n        emit NewImplementation(oldImplementation, implementation);\\n        emit NewPendingImplementation(oldPendingImplementation, pendingImplementation);\\n\\n        return 0;\\n    }\\n\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\n        // Check caller = admin\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n//        return uint(Error.NO_ERROR);\\n        return 0;\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() public returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \u2260 address(0)\\n        require(msg.sender == pendingAdmin && pendingAdmin != address(0), \\\"Not the EXISTING pending admin\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n//        return uint(Error.NO_ERROR);\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    function () payable external {\\n        // delegate all other functions to current implementation\\n        (bool success, ) = implementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\n              default { return(free_mem_ptr, returndatasize) }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/OlaPlatform/versions/0/RegistryV0.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../Registry/RegistryInterface.sol\\\";\\nimport \\\"../../Registry/RegistryStorage.sol\\\";\\nimport \\\"../../Registry/Ministry.sol\\\";\\nimport \\\"../../../LendingNetwork/Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../../../LendingNetwork/PriceOracle/PriceOracle.sol\\\";\\n\\ninterface ICTokenForRegistryV0 {\\n    function underlying() external view returns (address);\\n}\\n\\n/**\\n * @title Ola's Registry Contract\\n * @author Ola\\n */\\ncontract RegistryV0 is RegistryV0Storage, RegistryV0Interface {\\n    /// @notice Emitted when an admin changes Ola reserve factor\\n    event NewOlaReserveFactor(uint oldOlaReserveFactorMantissa, uint newOlaReserveFactorMantissa);\\n\\n    /// @notice Emitted when an admin changes Ola reserve factor\\n    event NewOlaBankAddress(address oldOlaBankAddress, address newOlaBankAddress);\\n\\n    /// @notice Emitted when an admin changes the price oracle of an asset\\n    event NewOracleForAsset(address indexed asset, address indexed oldOracle, address indexed newOracle);\\n\\n    /// @notice Emitted when Ola network publishes a new system version\\n    event OlaSystemVersionPublished(uint indexed systemVersion);\\n\\n    /// @notice Emitted when Ola network publishes a new system version\\n    event OlaLatestSystemVersionUpdated(uint indexed oldLatestystemVersion, uint indexed newLatestystemVersion);\\n\\n    /// @notice Emitted when a LeN has been registered\\n    event LendingNetworkRegistered(address indexed lnUnitroller, uint indexed systemVersion);\\n\\n    /// @notice Emitted when a LeN has upgraded it's system version\\n    event LendingNetworkVersionUpdated(address indexed lnUnitroller, uint indexed oldVersion, uint indexed newVersion);\\n\\n\\n\\n    constructor() public {\\n        admin = msg.sender;\\n    }\\n\\n    /*** Price oracles ***/\\n\\n    /**\\n     * Returns the oracle address for the given asset\\n     */\\n    function getOracleForAsset(address asset) external view returns (address) {\\n        return priceOracles[asset];\\n    }\\n\\n    /**\\n     * Returns the oracle price for the given asset\\n     */\\n    function getPriceForAsset(address asset) external view returns (uint256) {\\n        return getPriceForAssetInternal(asset);\\n    }\\n\\n    /**\\n     * Returns the oracle price for the given cToken's underlying asset\\n     */\\n    function getPriceForUnderling(address cToken) external view returns (uint256) {\\n        return getPriceForAssetInternal(ICTokenForRegistryV0(cToken).underlying());\\n    }\\n\\n    /*** Interest rate model ***/\\n    function isSupportedInterestRateModel(address interestRateModel) external view returns (bool) {\\n        return supportedInterestRateModels[interestRateModel];\\n    }\\n\\n    /*** Versions and implementations ***/\\n\\n    /**\\n     *\\n     */\\n    function isSystemVersionSupported(uint256 systemVersion) public view returns (bool) {\\n        return supportedSystemVersions[systemVersion];\\n    }\\n\\n    function isLnRegistered(address lnUnitroller) public view returns (bool) {\\n        return lnVersions[lnUnitroller] != 0;\\n    }\\n\\n    function getImplementationForLn(address lnUnitroller, bytes32 contractNameHash) external view returns (address) {\\n        uint256 lnSystemVersion = getLnVersion(lnUnitroller);\\n\\n        require(isLnRegistered(lnUnitroller), \\\"No version found\\\");\\n\\n        return getImplementation(lnSystemVersion, contractNameHash);\\n    }\\n\\n    function getImplementation(uint256 systemVersion, bytes32 contractNameHash) public view returns (address) {\\n        return implementations[systemVersion][contractNameHash];\\n    }\\n\\n    function getLnVersion(address lnUnitroller) public view returns (uint256) {\\n        return lnVersions[lnUnitroller];\\n    }\\n\\n    /*** LN Admin functions ***/\\n\\n    function updateLnVersion(uint256 newVersion) external returns (bool) {\\n        address lnUnitroller = msg.sender;\\n\\n        // Only the Unitroller can update itself\\n        require(isLnRegistered(lnUnitroller), \\\"Not Registered\\\");\\n\\n        // Ensure valid version\\n        require(isSystemVersionSupported(newVersion), \\\"Wrong Version\\\");\\n\\n        // Only going forward\\n        uint256 currentLnVersion = lnVersions[lnUnitroller];\\n        require(currentLnVersion < newVersion, \\\"Only going forward\\\");\\n\\n        // Ensure it is in range\\n        require(newVersion <= latestSystemVersion, \\\"Too high version\\\");\\n\\n        // Finally, update the ln version\\n        return updateLnVersionInternal(lnUnitroller, newVersion);\\n    }\\n\\n    /*** Initialization functions ***/\\n    function _become(Ministry ministry) public {\\n        require(msg.sender == ministry.admin(), \\\"only Ministry admin can change brains\\\");\\n        require(ministry._acceptImplementation() == 0, \\\"change not authorized\\\");\\n    }\\n\\n    /*** Admin functions ***/\\n\\n    function publishNewSystemVersion(uint256 systemVersion, bytes32[] calldata contractNameHashes, address[] calldata contractImplementations) external {\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n        require(contractNameHashes.length == contractImplementations.length, \\\"Arrays must be 1:1\\\");\\n\\n        require(!supportedSystemVersions[systemVersion], \\\"Already published\\\");\\n\\n        // Adds the flag.\\n        supportedSystemVersions[systemVersion] = true;\\n\\n        // Set the implementations\\n        for (uint i = 0; i < contractNameHashes.length; i++) {\\n            bytes32 contractNameHash = contractNameHashes[i];\\n            address contractImplementation = contractImplementations[i];\\n\\n            implementations[systemVersion][contractNameHash] = contractImplementation;\\n        }\\n\\n        if (systemVersion > latestSystemVersion) {\\n            uint oldLatestSystemVersion  = latestSystemVersion;\\n            latestSystemVersion = systemVersion;\\n            emit OlaLatestSystemVersionUpdated(oldLatestSystemVersion, latestSystemVersion);\\n        }\\n\\n        emit OlaSystemVersionPublished(systemVersion);\\n    }\\n\\n\\n    function registerNewLn(address lnUnitroller) external {\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n        require(lnUnitroller != address(0), \\\"Empty unitroller\\\");\\n        require(!isLnRegistered(lnUnitroller), \\\"Already registered\\\");\\n\\n        registerNewLnInternal(lnUnitroller);\\n    }\\n\\n    function setOlaBankAddress(address olaBankAddress_) external {\\n        require(msg.sender == admin, \\\"Not admin\\\");\\n        address oldOlaBankAddress = olaBankAddress;\\n        olaBankAddress = olaBankAddress_;\\n        emit NewOlaBankAddress(oldOlaBankAddress, olaBankAddress);\\n    }\\n\\n    function setOlaReserveFactorMantissa(uint256 olaReserveFactorMantissa_) external {\\n        require(msg.sender == admin, \\\"Not admin\\\");\\n        uint oldOlaReservesFactorMantissa = olaReservesFactorMantissa;\\n        olaReservesFactorMantissa = olaReserveFactorMantissa_;\\n        emit NewOlaReserveFactor(oldOlaReservesFactorMantissa, olaReservesFactorMantissa);\\n    }\\n\\n    function registerNewLnInternal(address lnUnitroller) internal {\\n        uint256 latestSystemVersion = latestSystemVersion;\\n\\n        lnVersions[lnUnitroller] = latestSystemVersion;\\n\\n        emit LendingNetworkRegistered(lnUnitroller, latestSystemVersion);\\n    }\\n\\n    function updateLnVersionInternal(address lnUnitroller, uint256 newVersion) internal returns (bool) {\\n        uint previousVersion = lnVersions[lnUnitroller];\\n\\n        lnVersions[lnUnitroller] = newVersion;\\n\\n        emit LendingNetworkVersionUpdated(lnUnitroller, previousVersion, newVersion);\\n\\n        return true;\\n    }\\n\\n    function setOracleForAsset(address asset, address oracleAddress) external returns (bool) {\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n\\n        address oldOracle = priceOracles[asset];\\n\\n        priceOracles[asset] = oracleAddress;\\n\\n        emit NewOracleForAsset(asset, oldOracle, oracleAddress);\\n\\n        return true;\\n    }\\n\\n    function setSupportedInterestRateModel(address interestRateModel) external returns (bool) {\\n        require(msg.sender == admin, \\\"Not Admin\\\");\\n\\n        supportedInterestRateModels[interestRateModel] = true;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * Fetches the oracle price for the given asset (Or 0 if no oracle is defined)\\n     */\\n    function getPriceForAssetInternal(address asset) internal view returns (uint256) {\\n        address priceOracle = priceOracles[asset];\\n\\n        if (priceOracle != address(0)) {\\n            return PriceOracle(priceOracle).getAssetPrice(asset);\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Others/forTest/TestRegistry.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../Ola/Core/OlaPlatform/Registry/RegistryStorage.sol\\\";\\nimport \\\"../../Ola/Core/OlaPlatform/Registry/RegistryInterface.sol\\\";\\n\\n\\nimport \\\"../../Ola/Core/OlaPlatform/versions/0/RegistryV0.sol\\\";\\n\\n/**\\n * @title Ola's Test Registry Contract\\n * @author Ola\\n */\\ncontract TestRegistry is RegistryV0 {\\n    // DEV_NOTE : A field that will indicate that this is indeed the test contract\\n    bool public isTestRegistry;\\n\\n    function _become(Ministry ministry) public {\\n\\n\\n        super._become(ministry);\\n    }\\n\\n    function setTestFlags() public {\\n\\n        isTestRegistry = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/OlaPlatform/Factories/deployers/ONativeDelegatorDeployer.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../../LendingNetwork/Comptroller/ComptrollerInterface.sol\\\";\\nimport \\\"../../../LendingNetwork/Delegators/ONativeDelegator.sol\\\";\\n\\ncontract ONativeDelegatorDeployer {\\n    function deployODelegator(\\n        // Unused, just to keep the signature\\n        address underlying_,\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint initialExchangeRateMantissa_,\\n        string calldata name_,\\n        string calldata symbol_,\\n        uint8 decimals_,\\n        address payable admin_,\\n        bytes calldata becomeImplementationData\\n    ) external returns (address) {\\n        ONativeDelegator oNativeDelegator = new ONativeDelegator(\\n                comptroller_,\\n                interestRateModel_,\\n                initialExchangeRateMantissa_,\\n                name_,\\n                symbol_,\\n                decimals_,\\n                admin_,\\n                becomeImplementationData);\\n        address oNativeDelegatorAddress = address(oNativeDelegator);\\n\\n        return oNativeDelegatorAddress;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/Delegators/ONativeDelegator.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../OTokens/CTokenInterfaces.sol\\\";\\nimport \\\"./ODelegator.sol\\\";\\n\\n/**\\n * @title Ola's ONativeDelegator Contract\\n * @notice OTokens which wrap a native coin underlying and delegate to an implementation\\n * @author Ola\\n */\\ncontract ONativeDelegator is ODelegator, CTokenInterface, ONativeInterface {\\n    // OLA_ADDITIONS : This contract name hash\\n    bytes32 constant public ONativeDelegatorContractHash = keccak256(\\\"ONativeDelegator\\\");\\n\\n    /**\\n     * @notice Construct a new money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ ERC-20 name of this token\\n     * @param symbol_ ERC-20 symbol of this token\\n     * @param decimals_ ERC-20 decimal precision of this token\\n     * @param admin_ Address of the administrator of this token\\n     * @param becomeImplementationData The encoded args for becomeImplementation\\n     */\\n    constructor(ComptrollerInterface comptroller_,\\n                InterestRateModel interestRateModel_,\\n                uint initialExchangeRateMantissa_,\\n                string memory name_,\\n                string memory symbol_,\\n                uint8 decimals_,\\n                address payable admin_,\\n                bytes memory becomeImplementationData) public {\\n        // Creator of the contract is admin during initialization\\n        admin = msg.sender;\\n\\n        // Initialize name hash\\n        contractNameHash = ONativeDelegatorContractHash;\\n\\n        address oNativeImplementation = RegistryForODelegator(comptroller_.getRegistry()).getImplementationForLn(address(comptroller_), ONativeDelegatorContractHash);\\n\\n        // First delegate gets to initialize the delegator (i.e. storage contract)\\n        delegateTo(oNativeImplementation, abi.encodeWithSignature(\\\"initialize(address,address,uint256,string,string,uint8)\\\",\\n                                                            comptroller_,\\n                                                            interestRateModel_,\\n                                                            initialExchangeRateMantissa_,\\n                                                            name_,\\n                                                            symbol_,\\n                                                            decimals_));\\n\\n        // New implementations always get set via the setter (post-initialize)\\n        _setImplementation(oNativeImplementation, false, becomeImplementationData);\\n\\n        // Set the proper admin now that initialization is done\\n        admin = admin_;\\n    }\\n\\n    /**\\n * @notice Sender supplies assets into the market and receives OTokens in exchange\\n * @dev Reverts upon any failure\\n */\\n    function mint() external payable {\\n        delegateToImplementation(abi.encodeWithSignature(\\\"mint()\\\"));\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeem(uint redeemTokens) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"redeem(uint256)\\\", redeemTokens));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to redeem\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlying(uint redeemAmount) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"redeemUnderlying(uint256)\\\", redeemAmount));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrow(uint borrowAmount) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"borrow(uint256)\\\", borrowAmount));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @dev Reverts upon any failure\\n     */\\n    function repayBorrow() external payable {\\n        delegateToImplementation(abi.encodeWithSignature(\\\"repayBorrow()\\\"));\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @dev Reverts upon any failure\\n     * @param borrower the account with the debt being payed off\\n     */\\n    function repayBorrowBehalf(address borrower) external payable {\\n        delegateToImplementation(abi.encodeWithSignature(\\\"repayBorrowBehalf(address)\\\", borrower));\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @dev Reverts upon any failure\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     */\\n    function liquidateBorrow(address borrower, CTokenInterface cTokenCollateral) external payable {\\n        delegateToImplementation(abi.encodeWithSignature(\\\"liquidateBorrow(address,address)\\\", borrower, cTokenCollateral));\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint amount) external returns (bool) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", dst, amount));\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", src, dst, amount));\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"approve(address,uint256)\\\", spender, amount));\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"allowance(address,address)\\\", owner, spender));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"balanceOf(address)\\\", owner));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"balanceOfUnderlying(address)\\\", owner));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by Comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"getAccountSnapshot(address)\\\", account));\\n        return abi.decode(data, (uint, uint, uint, uint));\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"borrowRatePerBlock()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"supplyRatePerBlock()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"totalBorrowsCurrent()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"borrowBalanceCurrent(address)\\\", account));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"borrowBalanceStored(address)\\\", account));\\n        return abi.decode(data, (uint));\\n    }\\n\\n   /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"exchangeRateCurrent()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"exchangeRateStored()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"getCash()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Get the accrual block number of this cToken\\n     * @return The accrual block number\\n     */\\n    function getAccrualBlockNumber() external view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"getAccrualBlockNumber()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n      * @notice Applies accrued interest to total borrows and reserves.\\n      * @dev This calculates interest accrued from the last checkpointed block\\n      *      up to the current block and writes new checkpoint to storage.\\n      */\\n    function accrueInterest() public returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"accrueInterest()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"seize(address,address,uint256)\\\", liquidator, borrower, seizeTokens));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (Timelock)\\n     * @param token The address of the ERC-20 token to sweep\\n     */\\n    function sweepToken(EIP20NonStandardInterface token) external {\\n        delegateToImplementation(abi.encodeWithSignature(\\\"sweepToken(address)\\\", token));\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"_setPendingAdmin(address)\\\", newPendingAdmin));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"_setReserveFactor(uint256)\\\", newReserveFactorMantissa));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"_acceptAdmin()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"_reduceReserves(uint256)\\\", reduceAmount));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"_setInterestRateModel(address)\\\", newInterestRateModel));\\n        return abi.decode(data, (uint));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/Delegators/ODelegator.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../OTokens/CTokenInterfaces.sol\\\";\\nimport \\\"../OTokens/CToken.sol\\\";\\n\\ninterface RegistryForODelegator {\\n    function getImplementationForLn(address lnUnitroller, bytes32 contractNameHash) external returns (address);\\n}\\n\\n/**\\n * @title Ola's ODelegator Contract\\n * @notice OTokens which delegate to an implementation\\n * @author Ola\\n */\\ncontract ODelegator is CTokenAdminStorage, CTokenDelegatorInterface {\\n\\n    /**\\n     * @notice Called by the Comptroller (most of the time) or by the admin (only via the constructor) to update the\\n     *         implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) internal {\\n        if (allowResign) {\\n            delegateToImplementation(abi.encodeWithSignature(\\\"_resignImplementation()\\\"));\\n        }\\n\\n        // Basic sanity\\n        require(CToken(implementation_).isCToken(), \\\"Not CTokens\\\");\\n\\n        address oldImplementation = implementation;\\n        implementation = implementation_;\\n\\n\\n        delegateToImplementation(abi.encodeWithSignature(\\\"_becomeImplementation(bytes)\\\", becomeImplementationData));\\n\\n        emit NewImplementation(oldImplementation, implementation);\\n    }\\n\\n    /**\\n     * @notice Internal method to delegate execution to another contract\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n     * @param callee The contract to delegatecall\\n     * @param data The raw data to delegatecall\\n     * @return The returned bytes from the delegatecall\\n     */\\n    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\\n        assembly {\\n            if eq(success, 0) {\\n                revert(add(returnData, 0x20), returndatasize)\\n            }\\n        }\\n        return returnData;\\n    }\\n\\n    /**\\n     * @notice Delegates execution to the implementation contract\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n     * @param data The raw data to delegatecall\\n     * @return The returned bytes from the delegatecall\\n     */\\n    function delegateToImplementation(bytes memory data) public returns (bytes memory) {\\n        return delegateTo(implementation, data);\\n    }\\n\\n    /**\\n     * @notice Delegates execution to an implementation contract\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n     *  There are an additional 2 prefix uints from the wrapper returndata, which we ignore since we make an extra hop.\\n     * @param data The raw data to delegatecall\\n     * @return The returned bytes from the delegatecall\\n     */\\n    function delegateToViewImplementation(bytes memory data) public view returns (bytes memory) {\\n        (bool success, bytes memory returnData) = address(this).staticcall(abi.encodeWithSignature(\\\"delegateToImplementation(bytes)\\\", data));\\n        assembly {\\n            if eq(success, 0) {\\n                revert(add(returnData, 0x20), returndatasize)\\n            }\\n        }\\n        return abi.decode(returnData, (bytes));\\n    }\\n\\n    function updateImplementationFromRegistry(bool allowResign, bytes calldata becomeImplementationData) external returns (bool) {\\n        require(msg.sender == address(comptroller), \\\"Not comptroller\\\");\\n        address implementationToSet = RegistryForODelegator(comptroller.getRegistry()).getImplementationForLn(address(comptroller), contractNameHash);\\n        require(implementationToSet != address(0), \\\"No implementation\\\");\\n\\n        if (implementationToSet != implementation) {\\n            // New implementations always get set via the setter (post-initialize)\\n            _setImplementation(implementationToSet, allowResign, becomeImplementationData);\\n        } else {\\n            emit ImplementationDidNotChange(implementation);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegates execution to an implementation contract\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n     */\\n    function () external payable {\\n        require(msg.value == 0,\\\"ODelegator:fallback: cannot send value to fallback\\\");\\n\\n        // delegate all other functions to current implementation\\n        (bool success, ) = implementation.delegatecall(msg.data);\\n\\n        assembly {\\n            let free_mem_ptr := mload(0x40)\\n            returndatacopy(free_mem_ptr, 0, returndatasize)\\n\\n            switch success\\n            case 0 { revert(free_mem_ptr, returndatasize) }\\n            default { return(free_mem_ptr, returndatasize) }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/Delegators/CErc20Delegator.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../OTokens/CTokenInterfaces.sol\\\";\\nimport \\\"./ODelegator.sol\\\";\\n/**\\n * @title Compound's CErc20Delegator Contract\\n * @notice CTokens which wrap an EIP-20 underlying and delegate to an implementation\\n * @author Compound\\n */\\ncontract CErc20Delegator is ODelegator, CTokenInterface, CErc20Interface {\\n    // OLA_ADDITIONS : This contract name hash\\n    bytes32 constant public CErc20DelegatorContractHash = keccak256(\\\"CErc20Delegator\\\");\\n\\n    /**\\n     * @notice Construct a new money market\\n     * @param underlying_ The address of the underlying asset\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ ERC-20 name of this token\\n     * @param symbol_ ERC-20 symbol of this token\\n     * @param decimals_ ERC-20 decimal precision of this token\\n     * @param admin_ Address of the administrator of this token\\n     * @param becomeImplementationData The encoded args for becomeImplementation\\n     */\\n    constructor(address underlying_,\\n                ComptrollerInterface comptroller_,\\n                InterestRateModel interestRateModel_,\\n                uint initialExchangeRateMantissa_,\\n                string memory name_,\\n                string memory symbol_,\\n                uint8 decimals_,\\n                address payable admin_,\\n                bytes memory becomeImplementationData) public {\\n        // Creator of the contract is admin during initialization\\n        admin = msg.sender;\\n\\n        // Initialize name hash\\n        contractNameHash = CErc20DelegatorContractHash;\\n\\n        address cErc20Implementation = RegistryForODelegator(comptroller_.getRegistry()).getImplementationForLn(address(comptroller_), CErc20DelegatorContractHash);\\n\\n        // First delegate gets to initialize the delegator (i.e. storage contract)\\n        delegateTo(cErc20Implementation, abi.encodeWithSignature(\\\"initialize(address,address,address,uint256,string,string,uint8)\\\",\\n                                                            underlying_,\\n                                                            comptroller_,\\n                                                            interestRateModel_,\\n                                                            initialExchangeRateMantissa_,\\n                                                            name_,\\n                                                            symbol_,\\n                                                            decimals_));\\n\\n        // New implementations always get set via the setter (post-initialize)\\n        _setImplementation(cErc20Implementation, false, becomeImplementationData);\\n\\n        // Set the proper admin now that initialization is done\\n        admin = admin_;\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function mint(uint mintAmount) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"mint(uint256)\\\", mintAmount));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeem(uint redeemTokens) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"redeem(uint256)\\\", redeemTokens));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to redeem\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlying(uint redeemAmount) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"redeemUnderlying(uint256)\\\", redeemAmount));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrow(uint borrowAmount) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"borrow(uint256)\\\", borrowAmount));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function repayBorrow(uint repayAmount) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"repayBorrow(uint256)\\\", repayAmount));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"repayBorrowBehalf(address,uint256)\\\", borrower, repayAmount));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"liquidateBorrow(address,uint256,address)\\\", borrower, repayAmount, cTokenCollateral));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint amount) external returns (bool) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", dst, amount));\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", src, dst, amount));\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"approve(address,uint256)\\\", spender, amount));\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"allowance(address,address)\\\", owner, spender));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"balanceOf(address)\\\", owner));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"balanceOfUnderlying(address)\\\", owner));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by Comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"getAccountSnapshot(address)\\\", account));\\n        return abi.decode(data, (uint, uint, uint, uint));\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"borrowRatePerBlock()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"supplyRatePerBlock()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"totalBorrowsCurrent()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"borrowBalanceCurrent(address)\\\", account));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"borrowBalanceStored(address)\\\", account));\\n        return abi.decode(data, (uint));\\n    }\\n\\n   /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"exchangeRateCurrent()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"exchangeRateStored()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"getCash()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Get the accrual block number of this cToken\\n     * @return The accrual block number\\n     */\\n    function getAccrualBlockNumber() external view returns (uint) {\\n        bytes memory data = delegateToViewImplementation(abi.encodeWithSignature(\\\"getAccrualBlockNumber()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n      * @notice Applies accrued interest to total borrows and reserves.\\n      * @dev This calculates interest accrued from the last checkpointed block\\n      *      up to the current block and writes new checkpoint to storage.\\n      */\\n    function accrueInterest() public returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"accrueInterest()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"seize(address,address,uint256)\\\", liquidator, borrower, seizeTokens));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (Timelock)\\n     * @param token The address of the ERC-20 token to sweep\\n     */\\n    function sweepToken(EIP20NonStandardInterface token) external {\\n        delegateToImplementation(abi.encodeWithSignature(\\\"sweepToken(address)\\\", token));\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"_setPendingAdmin(address)\\\", newPendingAdmin));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"_setReserveFactor(uint256)\\\", newReserveFactorMantissa));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"_acceptAdmin()\\\"));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) external returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"_reduceReserves(uint256)\\\", reduceAmount));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\n        bytes memory data = delegateToImplementation(abi.encodeWithSignature(\\\"_setInterestRateModel(address)\\\", newInterestRateModel));\\n        return abi.decode(data, (uint));\\n    }\\n\\n    /**\\n     * @notice Delegates execution to an implementation contract\\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n     */\\n    function () external payable {\\n        require(msg.value == 0,\\\"CErc20Delegator:fallback: cannot send value to fallback\\\");\\n\\n        // delegate all other functions to current implementation\\n        (bool success, ) = implementation.delegatecall(msg.data);\\n\\n        assembly {\\n            let free_mem_ptr := mload(0x40)\\n            returndatacopy(free_mem_ptr, 0, returndatasize)\\n\\n            switch success\\n            case 0 { revert(free_mem_ptr, returndatasize) }\\n            default { return(free_mem_ptr, returndatasize) }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/OlaPlatform/Factories/deployers/CErc20DelegatorDeployer.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../../LendingNetwork/Delegators/CErc20Delegator.sol\\\";\\nimport \\\"../../../LendingNetwork/Comptroller/ComptrollerInterface.sol\\\";\\n\\ncontract CErc20DelegatorDeployer {\\n    function deployODelegator(\\n        address underlying_,\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint initialExchangeRateMantissa_,\\n        string calldata name_,\\n        string calldata symbol_,\\n        uint8 decimals_,\\n        address payable admin_,\\n        bytes calldata becomeImplementationData\\n    ) external returns (address) {\\n        CErc20Delegator cErc20Delegator = new CErc20Delegator(underlying_, comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_, admin_, becomeImplementationData);\\n        address cErc20DelegatorAddress = address(cErc20Delegator);\\n\\n        return cErc20DelegatorAddress;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ola/Peripheral/ComptrollerPeripherals/RainMaker/deployers/SingleAssetDynamicRainMakerDeployer.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../SingleAssetDynamicRainMaker.sol\\\";\\n\\ncontract SingleAssetDynamicRainMakerDeployer {\\n    function deploy(address _comptroller, address _admin) external returns (address) {\\n        SingleAssetDynamicRainMaker singleAssetDynamicRainMaker = new SingleAssetDynamicRainMaker(_comptroller, _admin);\\n\\n        return address(singleAssetDynamicRainMaker);\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ola/Peripheral/ComptrollerPeripherals/RainMaker/deployers/SingleAssetRainMakerDeployer.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../SingleAssetRainMaker.sol\\\";\\n\\ncontract SingleAssetRainMakerDeployer {\\n    function deploy(address _comptroller, address _admin) external returns (address) {\\n        SingleAssetRainMaker singleAssetRainMaker = new SingleAssetRainMaker(_comptroller, _admin);\\n\\n        return address(singleAssetRainMaker);\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/OTokens/Maximillion.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../versions/0.01/CEtherV0_01.sol\\\";\\n\\n/**\\n * @title Compound's Maximillion Contract\\n * @author Compound\\n */\\ncontract Maximillion {\\n    /**\\n     * @notice The default cEther market to repay in\\n     */\\n    ONativeInterface public cEther;\\n\\n    /**\\n     * @notice Construct a Maximillion to repay max in a CEther market\\n     */\\n    constructor(ONativeInterface cEther_) public {\\n        cEther = cEther_;\\n    }\\n\\n    /**\\n     * @notice msg.sender sends Ether to repay an account's borrow in the cEther market\\n     * @dev The provided Ether is applied towards the borrow balance, any excess is refunded\\n     * @param borrower The address of the borrower account to repay on behalf of\\n     */\\n    function repayBehalf(address borrower) public payable {\\n        repayBehalfExplicit(borrower, cEther);\\n    }\\n\\n    /**\\n     * @notice msg.sender sends Ether to repay an account's borrow in a cEther market\\n     * @dev The provided Ether is applied towards the borrow balance, any excess is refunded\\n     * @param borrower The address of the borrower account to repay on behalf of\\n     * @param cEther_ The address of the cEther contract to repay in\\n     */\\n    function repayBehalfExplicit(address borrower, ONativeInterface cEther_) public payable {\\n        uint received = msg.value;\\n        uint borrows = CTokenViewInterface(address(cEther_)).borrowBalanceCurrent(borrower);\\n        if (received > borrows) {\\n            cEther_.repayBorrowBehalf.value(borrows)(borrower);\\n            msg.sender.transfer(received - borrows);\\n        } else {\\n            cEther_.repayBorrowBehalf.value(received)(borrower);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/versions/0.01/CEtherV0_01.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../OTokens/CToken.sol\\\";\\n\\n/**\\n * @title Compound's CEther Contract\\n * @notice CToken which wraps Ether\\n * @author Compound\\n */\\ncontract CEtherV0_01 is CToken, CEtherStorageV0_01 {\\n    /**\\n     * OLA_ADDITIONS : Now using initialize for Native\\n     * @notice Initialize the new (native) money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ ERC-20 name of this token\\n     * @param symbol_ ERC-20 symbol of this token\\n     * @param decimals_ ERC-20 decimal precision of this token\\n     */\\n    function initialize(\\n        ComptrollerInterface comptroller_,\\n        InterestRateModel interestRateModel_,\\n        uint initialExchangeRateMantissa_,\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_) public {\\n\\n        // OLA_ADDITIONS : All 'CEther' are considered to be the native coin 'cToken' for the chain\\n        underlying = nativeCoinUnderlying;\\n\\n        // CToken initialize does the bulk of the work\\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\n    }\\n\\n    /*** User Interface ***/\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Reverts upon any failure\\n     */\\n    function mint() external payable {\\n        (uint err,) = mintInternal(msg.value);\\n        requireNoError(err, \\\"mint failed\\\");\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeem(uint redeemTokens) external returns (uint) {\\n        return redeemInternal(redeemTokens);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to redeem\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlying(uint redeemAmount) external returns (uint) {\\n        return redeemUnderlyingInternal(redeemAmount);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrow(uint borrowAmount) external returns (uint) {\\n        return borrowInternal(borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @dev Reverts upon any failure\\n     */\\n    function repayBorrow() external payable {\\n        (uint err,) = repayBorrowInternal(msg.value);\\n        requireNoError(err, \\\"repayBorrow failed\\\");\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @dev Reverts upon any failure\\n     * @param borrower the account with the debt being payed off\\n     */\\n    function repayBorrowBehalf(address borrower) external payable {\\n        (uint err,) = repayBorrowBehalfInternal(borrower, msg.value);\\n        requireNoError(err, \\\"repayBorrowBehalf failed\\\");\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @dev Reverts upon any failure\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     */\\n    function liquidateBorrow(address borrower, CToken cTokenCollateral) external payable {\\n        (uint err,) = liquidateBorrowInternal(borrower, msg.value, cTokenCollateral);\\n        requireNoError(err, \\\"liquidateBorrow failed\\\");\\n    }\\n\\n    /**\\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (Timelock)\\n     * @param token The address of the ERC-20 token to sweep\\n     */\\n    function sweepToken(EIP20NonStandardInterface token) external {\\n        require(address(token) != underlying, \\\"CErc20::sweepToken: can not sweep underlying token\\\");\\n        uint256 balance = token.balanceOf(address(this));\\n        token.transfer(admin, balance);\\n    }\\n\\n    /**\\n     * @notice Send Ether to CEther to mint\\n     */\\n//    function () external payable {\\n\\n//        (uint err,) = mintInternal(msg.value);\\n\\n//        requireNoError(err, \\\"mint failed\\\");\\n//    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of Ether, before this message\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of Ether owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint) {\\n        (MathError err, uint startingBalance) = subUInt(address(this).balance, msg.value);\\n        require(err == MathError.NO_ERROR);\\n        return startingBalance;\\n    }\\n\\n    /**\\n     * @notice Perform the actual transfer in, which is a no-op\\n     * @param from Address sending the Ether\\n     * @param amount Amount of Ether being sent\\n     * @return The actual amount of Ether transferred\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint) {\\n        // Sanity checks\\n        require(msg.sender == from, \\\"sender mismatch\\\");\\n        require(msg.value == amount, \\\"value mismatch\\\");\\n        return amount;\\n    }\\n\\n    function doTransferOut(address payable to, uint amount) internal {\\n        /* Send the Ether, with minimal gas and revert on failure */\\n        to.transfer(amount);\\n    }\\n\\n    function requireNoError(uint errCode, string memory message) internal pure {\\n        if (errCode == uint(Error.NO_ERROR)) {\\n            return;\\n        }\\n\\n        bytes memory fullMessage = new bytes(bytes(message).length + 5);\\n        uint i;\\n\\n        for (i = 0; i < bytes(message).length; i++) {\\n            fullMessage[i] = bytes(message)[i];\\n        }\\n\\n        fullMessage[i+0] = byte(uint8(32));\\n        fullMessage[i+1] = byte(uint8(40));\\n        fullMessage[i+2] = byte(uint8(48 + ( errCode / 10 )));\\n        fullMessage[i+3] = byte(uint8(48 + ( errCode % 10 )));\\n        fullMessage[i+4] = byte(uint8(41));\\n\\n        require(errCode == uint(Error.NO_ERROR), string(fullMessage));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/versions/0.02/CErc20V0_02.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../OTokens/CToken.sol\\\";\\nimport \\\"../0.01/CErc20V0_01.sol\\\";\\n\\n/**\\n * @title Ola's CErc20 Contract V0.01\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Ola\\n * -- Changes form V0.01 : NONE\\n */\\ncontract CErc20V0_02 is CErc20V0_01, CErc20StorageV0_02 {\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/versions/0.01/CErc20V0_01.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../OTokens/CToken.sol\\\";\\n\\n/**\\n * @title Ola's CErc20 Contract V0.01\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Ola\\n */\\ncontract CErc20V0_01 is CToken, CErc20StorageV0_01 {\\n    /**\\n     * @notice Initialize the new money market\\n     * @param underlying_ The address of the underlying asset\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ ERC-20 name of this token\\n     * @param symbol_ ERC-20 symbol of this token\\n     * @param decimals_ ERC-20 decimal precision of this token\\n     */\\n    function initialize(address underlying_,\\n                        ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        // CToken initialize does the bulk of the work\\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\n\\n        // Set underlying and sanity check it\\n        underlying = underlying_;\\n        EIP20Interface(underlying).totalSupply();\\n    }\\n\\n    /*** User Interface ***/\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function mint(uint mintAmount) external returns (uint) {\\n        (uint err,) = mintInternal(mintAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeem(uint redeemTokens) external returns (uint) {\\n        return redeemInternal(redeemTokens);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to redeem\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlying(uint redeemAmount) external returns (uint) {\\n        return redeemUnderlyingInternal(redeemAmount);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrow(uint borrowAmount) external returns (uint) {\\n        return borrowInternal(borrowAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function repayBorrow(uint repayAmount) external returns (uint) {\\n        (uint err,) = repayBorrowInternal(repayAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint) {\\n        (uint err,) = repayBorrowBehalfInternal(borrower, repayAmount);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint) {\\n        (uint err,) = liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\\n        return err;\\n    }\\n\\n    /**\\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (Timelock)\\n     * @param token The address of the ERC-20 token to sweep\\n     */\\n    function sweepToken(EIP20NonStandardInterface token) external {\\n    \\trequire(address(token) != underlying, \\\"CErc20::sweepToken: can not sweep underlying token\\\");\\n    \\tuint256 balance = token.balanceOf(address(this));\\n    \\ttoken.transfer(admin, balance);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying tokens owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint) {\\n        EIP20Interface token = EIP20Interface(underlying);\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\\n     *      This will revert due to insufficient balance or insufficient allowance.\\n     *      This function returns the actual amount received,\\n     *      which may be less than `amount` if there is a fee attached to the transfer.\\n     *\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint) {\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\n        uint balanceBefore = EIP20Interface(underlying).balanceOf(address(this));\\n        token.transferFrom(from, address(this), amount);\\n\\n        bool success;\\n        assembly {\\n            switch returndatasize()\\n                case 0 {                       // This is a non-standard ERC-20\\n                    success := not(0)          // set success to true\\n                }\\n                case 32 {                      // This is a compliant ERC-20\\n                    returndatacopy(0, 0, 32)\\n                    success := mload(0)        // Set `success = returndata` of external call\\n                }\\n                default {                      // This is an excessively non-compliant ERC-20, revert.\\n                    revert(0, 0)\\n                }\\n        }\\n        require(success, \\\"TOKEN_TRANSFER_IN_FAILED\\\");\\n\\n        // Calculate the amount that was *actually* transferred\\n        uint balanceAfter = EIP20Interface(underlying).balanceOf(address(this));\\n        require(balanceAfter >= balanceBefore, \\\"TOKEN_TRANSFER_IN_OVERFLOW\\\");\\n        return balanceAfter - balanceBefore;   // underflow already checked above, just subtract\\n    }\\n\\n    /**\\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\\n     *      it is >= amount, this should not revert in normal conditions.\\n     *\\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n     */\\n    function doTransferOut(address payable to, uint amount) internal {\\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\\n        token.transfer(to, amount);\\n\\n        bool success;\\n        assembly {\\n            switch returndatasize()\\n                case 0 {                      // This is a non-standard ERC-20\\n                    success := not(0)          // set success to true\\n                }\\n                case 32 {                     // This is a compliant ERC-20\\n                    returndatacopy(0, 0, 32)\\n                    success := mload(0)        // Set `success = returndata` of external call\\n                }\\n                default {                     // This is an excessively non-compliant ERC-20, revert.\\n                    revert(0, 0)\\n                }\\n        }\\n        require(success, \\\"TOKEN_TRANSFER_OUT_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Core/LendingNetwork/versions/0.01/CErc20ImmutableV0_01.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"./CErc20V0_01.sol\\\";\\n\\n/**\\n * @title Compound's CErc20Immutable Contract\\n * @notice CTokens which wrap an EIP-20 underlying and are immutable\\n * @author Compound\\n */\\ncontract CErc20ImmutableV0_01 is CErc20V0_01 {\\n    /**\\n     * @notice Construct a new money market\\n     * @param underlying_ The address of the underlying asset\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ ERC-20 name of this token\\n     * @param symbol_ ERC-20 symbol of this token\\n     * @param decimals_ ERC-20 decimal precision of this token\\n     * @param admin_ Address of the administrator of this token\\n     */\\n    constructor(address underlying_,\\n                ComptrollerInterface comptroller_,\\n                InterestRateModel interestRateModel_,\\n                uint initialExchangeRateMantissa_,\\n                string memory name_,\\n                string memory symbol_,\\n                uint8 decimals_,\\n                address payable admin_) public {\\n        // Creator of the contract is admin during initialization\\n        admin = msg.sender;\\n\\n        // Initialize the market\\n        initialize(underlying_, comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\n\\n        // Set the proper admin now that initialization is done\\n        admin = admin_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ola/Peripheral/ComptrollerPeripherals/RainMaker/Reservoir.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../../../Core/Interfaces/EIP20Interface.sol\\\";\\n\\n/**\\n * @title Reservoir Contract\\n * @notice Distributes a token to a different contract at a fixed rate.\\n * @dev This contract must be poked via the `drip()` function every so often.\\n * @author Compound\\n */\\ncontract Reservoir {\\n\\n  /// @notice The block number when the Reservoir started (immutable)\\n  uint public dripStart;\\n\\n  /// @notice Tokens per block that to drip to target (immutable)\\n  uint public dripRate;\\n\\n  /// @notice Reference to token to drip (immutable)\\n  EIP20Interface public token;\\n\\n  /// @notice Target to receive dripped tokens (immutable)\\n  address public target;\\n\\n  /// @notice Amount that has already been dripped\\n  uint public dripped;\\n\\n  /**\\n    * @notice Constructs a Reservoir\\n    * @param dripRate_ Numer of tokens per block to drip\\n    * @param token_ The token to drip\\n    * @param target_ The recipient of dripped tokens\\n    */\\n  constructor(uint dripRate_, EIP20Interface token_, address target_) public {\\n    dripStart = block.number;\\n    dripRate = dripRate_;\\n    token = token_;\\n    target = target_;\\n    dripped = 0;\\n  }\\n\\n  /**\\n    * @notice Drips the maximum amount of tokens to match the drip rate since inception\\n    * @dev Note: this will only drip up to the amount of tokens available.\\n    * @return The amount of tokens dripped in this call\\n    */\\n  function drip() public returns (uint) {\\n    // First, read storage into memory\\n    EIP20Interface token_ = token;\\n    uint reservoirBalance_ = token_.balanceOf(address(this)); // TODO: Verify this is a static call\\n    uint dripRate_ = dripRate;\\n    uint dripStart_ = dripStart;\\n    uint dripped_ = dripped;\\n    address target_ = target;\\n    uint blockNumber_ = block.number;\\n\\n    // Next, calculate intermediate values\\n    uint dripTotal_ = mul(dripRate_, blockNumber_ - dripStart_, \\\"dripTotal overflow\\\");\\n    uint deltaDrip_ = sub(dripTotal_, dripped_, \\\"deltaDrip underflow\\\");\\n    uint toDrip_ = min(reservoirBalance_, deltaDrip_);\\n    uint drippedNext_ = add(dripped_, toDrip_, \\\"tautological\\\");\\n\\n    // Finally, write new `dripped` value and transfer tokens to target\\n    dripped = drippedNext_;\\n    token_.transfer(target_, toDrip_);\\n\\n    return toDrip_;\\n  }\\n\\n  /* Internal helper functions for safe Math */\\n\\n  function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n    uint c = a + b;\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n    require(b <= a, errorMessage);\\n    uint c = a - b;\\n    return c;\\n  }\\n\\n  function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    uint c = a * b;\\n    require(c / a == b, errorMessage);\\n    return c;\\n  }\\n\\n  function min(uint a, uint b) internal pure returns (uint) {\\n    if (a <= b) {\\n      return a;\\n    } else {\\n      return b;\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"\": {\r\n        \"__CACHE_BREAKER__\": \"0x00000000d41867734bbee4c6863d9255b2b06ac1\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"CompBorrowSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpeed\",\"type\":\"uint256\"}],\"name\":\"CompSupplySpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedBorrowerComp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compSupplyIndex\",\"type\":\"uint256\"}],\"name\":\"DistributedSupplierComp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lnIncentiveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"LnIncentiveTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"MarketListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"SingleAssetDynamicRainMakerContractHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"compSupplySpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compBorrowSpeed\",\"type\":\"uint256\"}],\"name\":\"_setDynamicCompSpeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract CToken[]\",\"name\":\"_cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_compSupplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_compBorrowSpeeds\",\"type\":\"uint256[]\"}],\"name\":\"_setDynamicCompSpeeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"incentiveTokenAddress\",\"type\":\"address\"}],\"name\":\"_setLnIncentiveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"_supportMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"baseUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"claimComp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"contract CToken[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"borrowers\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"suppliers\",\"type\":\"bool\"}],\"name\":\"claimComp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimComp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compInitialIndex\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"compSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplySpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplyState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"connect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractNameHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketBorrowIndex_\",\"type\":\"uint256\"}],\"name\":\"distributeBorrowerComp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"name\":\"distributeSupplierComp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLnIncentiveTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRainMaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRetired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lnIncentiveTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"retire\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retireRainMaker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract EIP20NonStandardInterface\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketBorrowIndex_\",\"type\":\"uint256\"}],\"name\":\"updateCompBorrowIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"updateCompSupplyIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SingleAssetDynamicRainMaker", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ad48b2c9dc6709a560018c678e918253a65df86e000000000000000000000000c333a03e8040cad31993e02615fd1b3f88447d95", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}