{"SourceCode": "// SPDX-License-Identifier: GLT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor (address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!o\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public immutable _swapRouter;\r\n    address public immutable _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public immutable _tokenDistributor;\r\n\r\n    uint256 public _buyLPDividendFee = 300;\r\n    uint256 public _sellLPFee = 300;\r\n    uint256 public _lpFee = 300;\r\n\r\n    uint256 public startTradeBlock;\r\n    address public immutable _mainPair;\r\n    uint256 public _killRobotBlockNum = 3;\r\n    uint256 public immutable _remainAmount;\r\n\r\n    bool private inSwap;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address FundAddress, address ReceiveAddress\r\n    ){\r\n        _swapRouter = ISwapRouter(RouterAddress);\r\n        _usdt = USDTAddress;\r\n\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        _allowances[address(this)][address(_swapRouter)] = MAX;\r\n        IERC20(_usdt).approve(address(_swapRouter), MAX);\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(_swapRouter.factory());\r\n        _mainPair = swapFactory.createPair(address(this), _usdt);\r\n        _swapPairList[_mainPair] = true;\r\n\r\n        uint256 tokenUnit = 10 ** Decimals;\r\n        uint256 total = Supply * tokenUnit;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        fundAddress = FundAddress;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(_swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(_usdt);\r\n\r\n        uint256 usdtUnit = 10 ** IERC20(_usdt).decimals();\r\n\r\n        excludeLpProvider[address(0)] = true;\r\n        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        lpRewardCondition = 100 * usdtUnit;\r\n\r\n        _excludeRebase[FundAddress] = true;\r\n        _excludeRebase[ReceiveAddress] = true;\r\n        _excludeRebase[address(this)] = true;\r\n        _excludeRebase[address(_swapRouter)] = true;\r\n        _excludeRebase[msg.sender] = true;\r\n        _excludeRebase[address(0)] = true;\r\n        _excludeRebase[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        _excludeRebase[_mainPair] = true;\r\n        _excludeRebase[address(_tokenDistributor)] = true;\r\n\r\n        _remainAmount = tokenUnit / 10000;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balanceOf(account);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    address private _lastMaybeAddLPAddress;\r\n    bool public _swapLPFee = false;\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        rebase(from);\r\n        rebase(to);\r\n\r\n        uint256 balance = _balances[from];\r\n        require(balance >= amount, \"BNE\");\r\n\r\n        if (startTradeBlock == 0 && from == _mainPair && _feeWhiteList[to] && to == tx.origin) {\r\n            startTradeBlock = block.number;\r\n            _startRebaseTime = block.timestamp;\r\n        }\r\n\r\n        address lastMaybeAddLPAddress = _lastMaybeAddLPAddress;\r\n        if (lastMaybeAddLPAddress != address(0)) {\r\n            _lastMaybeAddLPAddress = address(0);\r\n            uint256 lpBalance = IERC20(_mainPair).balanceOf(lastMaybeAddLPAddress);\r\n            if (lpBalance > 0) {\r\n                _addLpProvider(lastMaybeAddLPAddress);\r\n            }\r\n        }\r\n\r\n        bool takeFee;\r\n        bool isRemoveLP;\r\n        bool isAddLP;\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount;\r\n            uint256 remainAmount = _remainAmount;\r\n            if (balance > remainAmount) {\r\n                maxSellAmount = balance - remainAmount;\r\n            }\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n\r\n            if (_swapPairList[from] || _swapPairList[to]) {\r\n                takeFee = true;\r\n                require(0 < startTradeBlock);\r\n                if (from == _mainPair) {\r\n                    isRemoveLP = _isRemoveLiquidity();\r\n                } else if (to == _mainPair) {\r\n                    isAddLP = _isAddLiquidity(amount);\r\n                }\r\n\r\n                if (block.number < startTradeBlock + _killRobotBlockNum) {\r\n                    _funTransfer(from, to, amount, 99);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isAddLP, isRemoveLP);\r\n\r\n        if (from != address(this)) {\r\n            if (to == _mainPair) {\r\n                _lastMaybeAddLPAddress = from;\r\n            }\r\n            if (!_feeWhiteList[to]) {\r\n                processLPReward(_rewardGas);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (bool isAdd){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        uint256 rToken;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n            rToken = r1;\r\n        } else {\r\n            r = r1;\r\n            rToken = r0;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        if (rToken == 0) {\r\n            isAdd = bal > r;\r\n        } else {\r\n            isAdd = bal >= r + r * amount / rToken;\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 fee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * fee / 100;\r\n        if (feeAmount > 0) {\r\n            _takeTransfer(sender, fundAddress, feeAmount);\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isAddLP,\r\n        bool isRemoveLP\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n\r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n            uint256 swapFeeAmount;\r\n            uint256 lpFeeAmount;\r\n            uint256 lpDividendFeeAmount;\r\n            bool isSell;\r\n            if (isAddLP || isRemoveLP) {\r\n                lpDividendFeeAmount = tAmount * _lpFee / 10000;\r\n            } else if (_swapPairList[sender]) {//Buy\r\n                lpDividendFeeAmount = tAmount * _buyLPDividendFee / 10000;\r\n            } else if (_swapPairList[recipient]) {//Sell\r\n                isSell = true;\r\n                lpFeeAmount = tAmount * _sellLPFee / 10000;\r\n            }\r\n            swapFeeAmount = lpDividendFeeAmount + lpFeeAmount;\r\n\r\n            if (lpFeeAmount > 0) {\r\n                feeAmount += lpFeeAmount;\r\n                _takeTransfer(sender, address(this), lpFeeAmount);\r\n            }\r\n\r\n            if (lpDividendFeeAmount > 0) {\r\n                feeAmount += lpDividendFeeAmount;\r\n                _takeTransfer(sender, address(_tokenDistributor), lpDividendFeeAmount);\r\n            }\r\n\r\n            if (isSell && !inSwap) {\r\n                uint256 numToSell = swapFeeAmount * 230 / 100;\r\n                bool swapLPFee = _swapLPFee;\r\n                _swapLPFee = !swapLPFee;\r\n                uint256 contractTokenBalance;\r\n                if (swapLPFee) {\r\n                    contractTokenBalance = _balances[address(this)];\r\n                } else {\r\n                    contractTokenBalance = _balances[address(_tokenDistributor)];\r\n                }\r\n                if (numToSell > contractTokenBalance) {\r\n                    numToSell = contractTokenBalance;\r\n                }\r\n                if (!swapLPFee) {\r\n                    _funTransfer(address(_tokenDistributor), address(this), numToSell, 0);\r\n                }\r\n                swapTokenForFund(numToSell, swapLPFee);\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount, bool swapLPFee) private lockTheSwap {\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n        uint256 lpAmount = swapLPFee ? tokenAmount / 2 : 0;\r\n\r\n        address usdt = _usdt;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        address tokenDistributor = address(_tokenDistributor);\r\n\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            tokenDistributor,\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(tokenDistributor);\r\n        USDT.transferFrom(tokenDistributor, address(this), usdtBalance);\r\n\r\n        if (swapLPFee) {\r\n            _swapRouter.addLiquidity(\r\n                address(this), usdt, lpAmount, usdtBalance, 0, 0, fundAddress, block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n        _setExcludeRebase(addr, true);\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n        _setExcludeRebase(addr, enable);\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n            _setExcludeRebase(addr[i], enable);\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n        _setExcludeRebase(addr, enable);\r\n    }\r\n\r\n    function claimBalance() external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            payable(fundAddress).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function claimContractToken(address contractAddress, address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            TokenDistributor(contractAddress).claimToken(token, fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    uint256 public _rewardGas = 500000;\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyOwner {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"20-200w\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    address[] public lpProviders;\r\n    mapping(address => uint256) public lpProviderIndex;\r\n    mapping(address => bool) public excludeLpProvider;\r\n\r\n    function getLPProviderLength() public view returns (uint256){\r\n        return lpProviders.length;\r\n    }\r\n\r\n    function _addLpProvider(address adr) private {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentLPIndex;\r\n    uint256 public lpRewardCondition;\r\n    uint256 public progressLPBlock;\r\n    uint256 public progressLPBlockDebt = 1;\r\n    uint256 public lpHoldCondition = 1000000;\r\n\r\n    function processLPReward(uint256 gas) private {\r\n        if (progressLPBlock + progressLPBlockDebt > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 mainpair = IERC20(_mainPair);\r\n        uint totalPair = mainpair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n\r\n        uint256 rewardCondition = lpRewardCondition;\r\n        if (USDT.balanceOf(address(this)) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 lpAmount;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = lpHoldCondition;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentLPIndex >= shareholderCount) {\r\n                currentLPIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentLPIndex];\r\n            if (!excludeLpProvider[shareHolder]) {\r\n                lpAmount = mainpair.balanceOf(shareHolder);\r\n                if (lpAmount >= holdCondition) {\r\n                    amount = rewardCondition * lpAmount / totalPair;\r\n                    if (amount > 0) {\r\n                        USDT.transfer(shareHolder, amount);\r\n                    }\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentLPIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressLPBlock = block.number;\r\n    }\r\n\r\n    function setLPHoldCondition(uint256 amount) external onlyOwner {\r\n        lpHoldCondition = amount;\r\n    }\r\n\r\n    function setLPRewardCondition(uint256 amount) external onlyOwner {\r\n        lpRewardCondition = amount;\r\n    }\r\n\r\n    function setLPBlockDebt(uint256 debt) external onlyOwner {\r\n        progressLPBlockDebt = debt;\r\n    }\r\n\r\n    function setExcludeLPProvider(address addr, bool enable) external onlyOwner {\r\n        excludeLpProvider[addr] = enable;\r\n    }\r\n\r\n    function setBuyFee(\r\n        uint256 lpDividendFee\r\n    ) external onlyOwner {\r\n        _buyLPDividendFee = lpDividendFee;\r\n    }\r\n\r\n    function setSellFee(\r\n        uint256 lpFee\r\n    ) external onlyOwner {\r\n        _sellLPFee = lpFee;\r\n    }\r\n\r\n    function setLPFee(\r\n        uint256 lpFee\r\n    ) external onlyOwner {\r\n        _lpFee = lpFee;\r\n    }\r\n\r\n    function setKillRobotBlockNum(uint256 blockNum) external onlyOwner {\r\n        if (startTradeBlock > 0) {\r\n            require(blockNum < _killRobotBlockNum, \"lt\");\r\n        }\r\n        _killRobotBlockNum = blockNum;\r\n    }\r\n\r\n    uint256 public _rebaseDuration = 2 hours;\r\n    uint256 public _rebaseRate = 41;\r\n    mapping(address => uint256) private _lastRebaseTime;\r\n    mapping(address => bool) private _excludeRebase;\r\n    uint256 public _startRebaseTime;\r\n    uint256 public _rebaseFundRate = 6000;\r\n\r\n    function setExcludeRebase(address a, bool e) external onlyOwner {\r\n        _setExcludeRebase(a, e);\r\n    }\r\n\r\n    function _setExcludeRebase(address a, bool e) private {\r\n        rebase(a);\r\n        _excludeRebase[a] = e;\r\n        if (0 != _startRebaseTime) {\r\n            _lastRebaseTime[a] = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function setRebaseRate(uint256 r) external onlyOwner {\r\n        _rebaseRate = r;\r\n    }\r\n\r\n    function setRebaseDuration(uint256 d) external onlyOwner {\r\n        _rebaseDuration = d;\r\n        require(d > 0, \"d0\");\r\n    }\r\n\r\n    function setRebaseFundRate(uint256 r) external onlyOwner {\r\n        _rebaseFundRate = r;\r\n        require(r <= 10000, \"mw\");\r\n    }\r\n\r\n    function rebase(address account) public {\r\n        if (_excludeRebase[account]) {\r\n            return;\r\n        }\r\n        uint256 startRebaseTime = _startRebaseTime;\r\n        if (0 == startRebaseTime) {\r\n            return;\r\n        }\r\n        uint256 remainAmount = _remainAmount;\r\n        uint256 balance = _balances[account];\r\n        uint256 nowTime = block.timestamp;\r\n        if (balance <= remainAmount) {\r\n            _lastRebaseTime[account] = nowTime;\r\n            return;\r\n        }\r\n        uint256 lastRebaseTime = _lastRebaseTime[account];\r\n        if (0 == lastRebaseTime) {\r\n            lastRebaseTime = startRebaseTime;\r\n        }\r\n        uint256 rebaseDuration = _rebaseDuration;\r\n        if (nowTime < lastRebaseTime + rebaseDuration) {\r\n            return;\r\n        }\r\n        uint256 times = (nowTime - lastRebaseTime) / rebaseDuration;\r\n        _lastRebaseTime[account] = lastRebaseTime + times * rebaseDuration;\r\n\r\n        uint256 rebaseAmount = balance * _rebaseRate * times / 10000;\r\n        uint256 maxRebaseAmount = balance - remainAmount;\r\n        if (rebaseAmount > maxRebaseAmount) {\r\n            rebaseAmount = maxRebaseAmount;\r\n        }\r\n        if (rebaseAmount > 0) {\r\n            _balances[account] = balance - rebaseAmount;\r\n            uint256 rebaseFundAmount = rebaseAmount * _rebaseFundRate / 10000;\r\n            _takeTransfer(account, fundAddress, rebaseFundAmount);\r\n            _takeTransfer(account, address(0x000000000000000000000000000000000000dEaD), rebaseAmount - rebaseFundAmount);\r\n        }\r\n    }\r\n\r\n    function _balanceOf(address account) private view returns (uint256){\r\n        uint256 balance = _balances[account];\r\n        if (_excludeRebase[account]) {\r\n            return balance;\r\n        }\r\n        uint256 startRebaseTime = _startRebaseTime;\r\n        if (0 == startRebaseTime) {\r\n            return balance;\r\n        }\r\n        uint256 remainAmount = _remainAmount;\r\n        if (balance <= remainAmount) {\r\n            return balance;\r\n        }\r\n        uint256 lastRebaseTime = _lastRebaseTime[account];\r\n        if (0 == lastRebaseTime) {\r\n            lastRebaseTime = startRebaseTime;\r\n        }\r\n        uint256 rebaseDuration = _rebaseDuration;\r\n        uint256 nowTime = block.timestamp;\r\n        if (nowTime < lastRebaseTime + rebaseDuration) {\r\n            return balance;\r\n        }\r\n        uint256 times = (nowTime - lastRebaseTime) / rebaseDuration;\r\n        uint256 rebaseAmount = balance * _rebaseRate * times / 10000;\r\n        uint256 maxRebaseAmount = balance - remainAmount;\r\n        if (rebaseAmount > maxRebaseAmount) {\r\n            rebaseAmount = maxRebaseAmount;\r\n        }\r\n        return balance - rebaseAmount;\r\n    }\r\n\r\n    function getUserInfo(address account) public view returns (\r\n        uint256 _balance, uint256 balance, bool excludeRebase,\r\n        uint256 lastRebaseTime, uint256 nowTime\r\n    ){\r\n        _balance = _balances[account];\r\n        balance = balanceOf(account);\r\n        lastRebaseTime = _lastRebaseTime[account];\r\n        excludeRebase = _excludeRebase[account];\r\n        nowTime = block.timestamp;\r\n    }\r\n}\r\n\r\ncontract GLT is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //USDT\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n        \"GLT\",\r\n        \"GLT\",\r\n        18,\r\n        10000,\r\n    //Fund\r\n        address(0x8696f4be64a399009fB98F81A40a0a02099b771F),\r\n        address(0x8696f4be64a399009fB98F81A40a0a02099b771F)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_killRobotBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseFundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_remainAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startRebaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapLPFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLPIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeLpProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPProviderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"excludeRebase\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastRebaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nowTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpHoldCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpProviderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"e\",\"type\":\"bool\"}],\"name\":\"setExcludeRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"setKillRobotBlockNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"setLPBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPHoldCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setRebaseDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setRebaseFundRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setRebaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GLT", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4687a80bf1a7c0171f7857eeaa0085b7c8225798e5d7af681e3d744f161226ef"}