{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/CGUStackingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./access/Ownable.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./utils/token/SafeERC20.sol\\\";\\nimport \\\"./StakingLocks.sol\\\";\\n\\ncontract CGUStackingPool is Ownable, StakingLocks {\\n    event Deposit(LockType _lockType, uint256 _amount, uint256 _amountStacked);\\n    event Withdraw(uint256 _amount, uint256 _amountWithdraw);\\n    event Harvest(LockType _lockType, uint256 _amount, uint32 _lastRewardIndex);\\n    event Compound(LockType _lockType, uint256 _amount, uint32 _lastRewardIndex);\\n    event RewardPay(uint256 _amount, uint256 _accumulatedFee);\\n\\n    using SafeERC20 for IERC20;\\n    IERC20 public erc20Deposit;\\n    IERC20 public erc20Reward;\\n    bool private initialized;\\n    bool private unlockAll;\\n    uint256 public accumulatedFee;\\n    uint256 public depositFeePercent = 0;\\n    uint256 public depositFeePrecision = 1000;\\n    uint256 public withdrawFeePercent = 0;\\n    uint256 public withdrawFeePrecision = 1000;\\n    uint8 public constant MAX_LOOPS = 100;\\n    uint256 public precision = 10000000000;\\n    uint32 public lastReward;\\n\\n    struct Reward {\\n        uint256 amount;\\n        uint256 totalStacked;\\n    }\\n\\n    // -------------- New --------------\\n    mapping(address => LockType) public userLock;\\n    mapping(address => uint256) public userStacked;\\n    mapping(address => uint256) public expirationDeposit;\\n    mapping(address => uint32) public userLastReward;\\n    mapping(LockType => uint256) public totalStacked;\\n    mapping(LockType => mapping(uint32 => Reward)) public rewards;\\n\\n    function init(address _erc20Deposit, address _erc20Reward) external onlyOwner {\\n        require(!initialized, \\\"Initialized\\\");\\n        erc20Deposit = IERC20(_erc20Deposit);\\n        erc20Reward = IERC20(_erc20Reward);\\n        _initLocks();\\n        initialized = true;\\n    }\\n\\n    function setUnlockAll(bool _flag) external onlyOwner {\\n        unlockAll = _flag;\\n    }\\n\\n    function setPrecision(uint256 _precision) external onlyOwner {\\n        precision = _precision;\\n    }\\n\\n    function setDepositFee(uint256 _feePercent, uint256 _feePrecision) external onlyOwner {\\n        depositFeePercent = _feePercent;\\n        depositFeePrecision = _feePrecision;\\n    }\\n\\n    function setWithdrawFee(uint256 _feePercent, uint256 _feePrecision) external onlyOwner {\\n        withdrawFeePercent = _feePercent;\\n        withdrawFeePrecision = _feePrecision;\\n    }\\n\\n    function deposit(LockType _lockType, uint256 _amount, bool _comp) external {\\n        require(_amount > 0, \\\"The amount of the deposit must not be zero\\\");\\n        require(erc20Deposit.allowance(_msgSender(), address(this)) >= _amount, \\\"Not enough allowance\\\");\\n        LockType lastLock = userLock[_msgSender()];\\n        require(lastLock == LockType.NULL || _lockType >= lastLock, \\\"You cannot decrease the time of locking\\\");\\n        uint256 amountStacked;\\n        if (address(erc20Deposit) == address(erc20Reward)) {\\n            uint256 part = depositFeePercent * _amount / depositFeePrecision;\\n            amountStacked = _amount - part;\\n            accumulatedFee = accumulatedFee + part;\\n        } else {\\n            amountStacked = _amount;\\n        }\\n\\n        erc20Deposit.safeTransferFrom(_msgSender(), address(this), _amount);\\n        if (_lockType >= lastLock) {\\n            (uint256 amountReward, uint32 lastRewardIndex) = getReward(_msgSender(), 0);\\n            require(lastRewardIndex == lastReward, \\\"We cannot get reward in one transaction\\\");\\n            if (amountReward > 0) {\\n                if (_comp && address(erc20Deposit) == address(erc20Reward)) {\\n                    _compound(lastLock, amountReward, lastRewardIndex);\\n                } else {\\n                    _harvest(lastLock, amountReward, lastRewardIndex);\\n                }\\n            }\\n        }\\n        userLock[_msgSender()] = _lockType;\\n        if (lastLock == LockType.NULL || _lockType == lastLock) {\\n            // If we deposit to current stacking period, or make first deposit\\n            userStacked[_msgSender()] = userStacked[_msgSender()] + amountStacked;\\n            totalStacked[_lockType] = totalStacked[_lockType] + amountStacked;\\n        } else if (_lockType > lastLock) {\\n            // If we increase stacking period\\n            totalStacked[lastLock] = totalStacked[lastLock] - userStacked[_msgSender()];\\n            userStacked[_msgSender()] = userStacked[_msgSender()] + amountStacked;\\n            totalStacked[_lockType] = totalStacked[_lockType] + userStacked[_msgSender()];\\n        }\\n        userLastReward[_msgSender()] = lastReward;\\n        if (lastLock == LockType.NULL || _lockType > lastLock) {\\n            // If we have first deposit, or increase lock time\\n            expirationDeposit[_msgSender()] = block.timestamp + locks[_lockType].period;\\n        }\\n        emit Deposit(_lockType, _amount, amountStacked);\\n    }\\n\\n    function withdraw(uint256 amount) external {\\n        require(userStacked[_msgSender()] >= amount, \\\"Withdrawal amount is more than balance\\\");\\n        require(userLock[_msgSender()] != LockType.NULL, \\\"You do not have locked tokens\\\");\\n        require(\\n            block.timestamp > expirationDeposit[_msgSender()] || unlockAll,\\n            \\\"Expiration time of the deposit is not over\\\"\\n        );\\n        (uint256 amountReward, uint32 lastRewardIndex) = getReward(_msgSender(), 0);\\n        require(lastRewardIndex == lastReward, \\\"We cannot get reward in one transaction\\\");\\n        if (amountReward > 0) {\\n            _harvest(userLock[_msgSender()], amountReward, lastRewardIndex);\\n        }\\n        uint256 amountWithdraw;\\n        if (address(erc20Deposit) == address(erc20Reward)) {\\n            uint256 part = withdrawFeePercent * amount / withdrawFeePrecision;\\n            amountWithdraw = amount - part;\\n            accumulatedFee = accumulatedFee + part;\\n        } else {\\n            amountWithdraw = amount;\\n        }\\n        totalStacked[userLock[_msgSender()]] = totalStacked[userLock[_msgSender()]] - amount;\\n        userStacked[_msgSender()] = userStacked[_msgSender()] - amount;\\n        if (userStacked[_msgSender()] == 0) {\\n            userLock[_msgSender()] = LockType.NULL;\\n        }\\n        erc20Deposit.safeTransfer(_msgSender(), amountWithdraw);\\n        emit Withdraw(amount, amountWithdraw);\\n    }\\n\\n    function reward(uint256 amount) external onlyOwner {\\n        require(amount > 0, \\\"The amount of the reward must not be zero\\\");\\n        require(erc20Reward.allowance(_msgSender(), address(this)) >= amount, \\\"Not enough allowance\\\");\\n        erc20Reward.safeTransferFrom(_msgSender(), address(this), amount);\\n        uint256 _stakedWithMultipliers = stakedWithMultipliers();\\n        uint256 amountWithAccumFee = address(erc20Deposit) == address(erc20Reward) ? amount + accumulatedFee : amount;\\n        uint256 distributed;\\n        uint32 _lastReward = lastReward + 1;\\n        for (uint8 i = 0; i < lockTypes.length; i++) {\\n            if (i == lockTypes.length - 1) {\\n                uint256 remainder = amountWithAccumFee - distributed;\\n                rewards[lockTypes[i]][_lastReward] = Reward(\\n                    remainder,\\n                    totalStacked[lockTypes[i]]\\n                );\\n                break;\\n            }\\n            uint256 staked = stakedWithMultiplier(lockTypes[i]);\\n            uint256 amountPart = staked * precision * amountWithAccumFee / _stakedWithMultipliers / precision;\\n            rewards[lockTypes[i]][_lastReward] = Reward(\\n                amountPart,\\n                totalStacked[lockTypes[i]]\\n            );\\n            distributed += amountPart;\\n        }\\n        lastReward = _lastReward;\\n        emit RewardPay(amount, accumulatedFee);\\n        accumulatedFee = 0;\\n    }\\n\\n    function compound() public {\\n        require(userLock[_msgSender()] != LockType.NULL, \\\"You do not have locked tokens\\\");\\n        require(address(erc20Deposit) == address(erc20Reward), \\\"Method not available\\\");\\n        require(userLastReward[_msgSender()] != lastReward, \\\"You have no accumulated reward\\\");\\n        (uint256 amountReward, uint32 lastRewardIndex) = getReward(_msgSender(), 0);\\n        _compound(userLock[_msgSender()], amountReward, lastRewardIndex);\\n    }\\n\\n    function harvest() public {\\n        require(userLock[_msgSender()] != LockType.NULL, \\\"You do not have locked tokens\\\");\\n        require(userLastReward[_msgSender()] != lastReward, \\\"You have no accumulated reward\\\");\\n        (uint256 amountReward, uint32 lastRewardIndex) = getReward(_msgSender(), 0);\\n        _harvest(userLock[_msgSender()], amountReward, lastRewardIndex);\\n    }\\n\\n    function _compound(LockType _userLock, uint256 _amountReward, uint32 lastRewardIndex) internal {\\n        userStacked[_msgSender()] = userStacked[_msgSender()] + _amountReward;\\n        totalStacked[_userLock] = totalStacked[_userLock] + _amountReward;\\n        userLastReward[_msgSender()] = lastRewardIndex;\\n        emit Compound(_userLock, _amountReward, lastRewardIndex);\\n    }\\n\\n    function _harvest(LockType _userLock, uint256 _amountReward, uint32 lastRewardIndex) internal {\\n        userLastReward[_msgSender()] = lastRewardIndex;\\n        erc20Reward.safeTransfer(_msgSender(), _amountReward);\\n        emit Harvest(_userLock, _amountReward, lastRewardIndex);\\n    }\\n\\n    function stakedWithMultipliers() public view returns (uint256) {\\n        uint256 reserves;\\n        for (uint8 i = 0; i < lockTypes.length; i++) {\\n            reserves = reserves + stakedWithMultiplier(lockTypes[i]);\\n        }\\n        return reserves;\\n    }\\n\\n    function totalStakedInPools() public view returns (uint256) {\\n        uint256 reserves;\\n        for (uint8 i = 0; i < lockTypes.length; i++) {\\n            reserves = reserves + totalStacked[lockTypes[i]];\\n        }\\n        return reserves;\\n    }\\n\\n    function stakedWithMultiplier(LockType _lockType) public view returns (uint256) {\\n        return totalStacked[_lockType] * locks[_lockType].multiplicator / 10;\\n    }\\n\\n    function getReward(address _user, uint32 _lastRewardIndex) public view returns (uint256 amount, uint32 lastRewardIndex) {\\n        uint256 _amount;\\n        if (userLock[_user] == LockType.NULL) {\\n            return (0, lastReward);\\n        }\\n        uint32 rewardIterator = _lastRewardIndex != 0 ? _lastRewardIndex : userLastReward[_user];\\n        uint32 maxRewardIterator = lastReward - rewardIterator > MAX_LOOPS\\n        ? rewardIterator + MAX_LOOPS\\n        : lastReward;\\n        while (rewardIterator < maxRewardIterator) {\\n            rewardIterator++;\\n            Reward memory reward = rewards[userLock[_user]][rewardIterator];\\n            _amount = _amount + (userStacked[_user] * precision * reward.amount / reward.totalStacked  / precision);\\n        }\\n        lastRewardIndex = rewardIterator;\\n        amount = _amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StakingLocks.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ncontract StakingLocks {\\n    enum LockType { NULL, HOURS1, DAYS30, DAYS180, DAYS365, DAYS730}\\n\\n    LockType[5] lockTypes = [LockType.HOURS1, LockType.DAYS30, LockType.DAYS180, LockType.DAYS365, LockType.DAYS730];\\n\\n    struct LockData {\\n        uint32 period;\\n        uint8 multiplicator; // 11 factor is equal 1.1\\n    }\\n\\n    mapping(LockType => LockData) public locks; // All our locks\\n\\n    function _initLocks() internal {\\n        locks[LockType.HOURS1] = LockData(1 hours, 10);\\n        locks[LockType.DAYS30] = LockData(30 days, 12);\\n        locks[LockType.DAYS180] = LockData(180 days, 13);\\n        locks[LockType.DAYS365] = LockData(365 days, 15);\\n        locks[LockType.DAYS730] = LockData(730 days, 20);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n    * @dev Returns the address of the pending owner.\\n    */\\n    function pendingOwner() public view returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Throws if called by any account other than the pending owner.\\n    */\\n    modifier onlyPendingOwner() {\\n        require(pendingOwner() == _msgSender(), \\\"Ownable: caller is not the pending owner\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        _pendingOwner = newOwner;\\n    }\\n\\n    function claimOwnership() external onlyPendingOwner {\\n        _owner = _pendingOwner;\\n        _pendingOwner = address(0);\\n        emit OwnershipTransferred(_owner, _pendingOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/token/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        uint256 newAllowance = oldAllowance - value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n}\\n\\n/**\\n * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n * on the return value: the return value is optional (but if data is returned, it must not be false).\\n * @param token The token targeted by the call.\\n * @param data The call data (encoded using abi.encode or one of its variants).\\n */\\nfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\\n// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n// we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n// the target address contains contract code and also asserts for success in the low-level call.\\n\\nbytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\nif (returndata.length > 0) {// Return data is optional\\n// solhint-disable-next-line max-line-length\\nrequire(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n}\\n}\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum StakingLocks.LockType\",\"name\":\"_lockType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_lastRewardIndex\",\"type\":\"uint32\"}],\"name\":\"Compound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum StakingLocks.LockType\",\"name\":\"_lockType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountStacked\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum StakingLocks.LockType\",\"name\":\"_lockType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_lastRewardIndex\",\"type\":\"uint32\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_accumulatedFee\",\"type\":\"uint256\"}],\"name\":\"RewardPay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountWithdraw\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LOOPS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingLocks.LockType\",\"name\":\"_lockType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_comp\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeePrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Deposit\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Reward\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"expirationDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_lastRewardIndex\",\"type\":\"uint32\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lastRewardIndex\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Deposit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20Reward\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReward\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingLocks.LockType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"locks\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"multiplicator\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingLocks.LockType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStacked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feePrecision\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_precision\",\"type\":\"uint256\"}],\"name\":\"setPrecision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setUnlockAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feePrecision\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingLocks.LockType\",\"name\":\"_lockType\",\"type\":\"uint8\"}],\"name\":\"stakedWithMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedWithMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingLocks.LockType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"totalStacked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedInPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastReward\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLock\",\"outputs\":[{\"internalType\":\"enum StakingLocks.LockType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStacked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeePrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CGUStackingPool", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}