{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n *   8888888 .d88888b.  888    d8P   .d8888b. Y88b   d88P \r\n *     888  d88P\" \"Y88b 888   d8P   d88P  Y88b Y88b d88P  \r\n *     888  888     888 888  d8P         .d88P  Y88o88P   \r\n *     888  888     888 888d88K         8888\"    Y888P    \r\n *     888  888     888 8888888b         \"Y8b.    888     \r\n *     888  888     888 888  Y88b   888    888    888     \r\n *     888  Y88b. .d88P 888   Y88b  Y88b  d88P    888     \r\n *   8888888 \"Y88888P\"  888    Y88b  \"Y8888P\"     888     \r\n*/\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(\r\n                oldAllowance >= value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    newAllowance\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n/*==============================\r\n        IOK3Y CONTRACT\r\n================================*/\r\n\r\ncontract IOK3Y is Context, Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address constant feeWallet = 0x24f405B5B640f22136C39cfe4f37D30c5b4F7558;\r\n    IERC20 public BUSD;\r\n    bool bStart;\r\n\r\n    struct User {\r\n        uint256 totalDeposits;\r\n        uint256 totalWithdrawn;\r\n        uint256 totalWithdrawable;\r\n        uint256 lastClaim;\r\n        uint256 maxPayout;\r\n        uint256 claimCount;\r\n        uint256 refBonus;\r\n        uint256 totalRefBonus;\r\n    }\r\n\r\n    mapping(address => User) public Users;\r\n\r\n    event Deposit(address indexed addr, uint256 value);\r\n    event Compound(address indexed addr, uint256 value);\r\n    event Claim(address indexed addr, uint256 value);\r\n    event Withdraw(address indexed addr, uint256 value);\r\n    event Referred(address indexed user, address referral, uint256 value);\r\n\r\n    constructor() {\r\n        BUSD = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n    }\r\n\r\n    function deposit(uint256 amtx, address referrer) public noReentrant {\r\n        require(bStart, \"Not started yet.\");\r\n\r\n        uint256 userDeposit = (amtx * 90) / 100;\r\n        uint256 fee = (amtx * 10) / 100;\r\n\r\n        BUSD.safeTransferFrom(msg.sender, address(this), amtx);\r\n        BUSD.safeTransfer(feeWallet, fee);\r\n        \r\n        User storage user = Users[msg.sender];\r\n        User storage refUser = Users[referrer];\r\n\r\n        user.totalDeposits += userDeposit;\r\n        user.maxPayout += userDeposit * 4;\r\n\r\n        user.lastClaim = block.timestamp;\r\n\r\n        emit Deposit(msg.sender, amtx);\r\n\r\n        uint256 refAmtx = amtx * 10 / 100;\r\n\r\n        if (referrer == msg.sender) {\r\n            referrer = address(0);\r\n        }\r\n\r\n        refUser.refBonus += refAmtx;\r\n        refUser.totalRefBonus += refAmtx;\r\n\r\n        emit Referred(msg.sender, referrer, amtx);\r\n    }\r\n\r\n    function compound() public noReentrant {\r\n        User storage user = Users[msg.sender];\r\n        uint256 compoundAmt = user.totalWithdrawable;\r\n\r\n        user.totalDeposits += compoundAmt;\r\n        user.totalWithdrawable = 0;\r\n\r\n        emit Compound(msg.sender, compoundAmt);\r\n    }\r\n\r\n    function claim() public noReentrant {\r\n        User storage user = Users[msg.sender];\r\n        uint256 rn = block.timestamp;\r\n        uint256 rewards = user.totalDeposits * 25 / 1000;\r\n\r\n        require(\r\n            user.maxPayout - user.totalWithdrawn > 0,\r\n            \"You cannot claim anymore if your max payout has been reached.\"\r\n        );\r\n\r\n        require(rn - user.lastClaim >= 86400, \"You can only claim once per day.\"); \r\n\r\n        user.totalWithdrawable += rewards;\r\n\r\n        user.claimCount += 1;\r\n\r\n        user.lastClaim = rn;\r\n\r\n        emit Claim(msg.sender, rewards);\r\n    }\r\n\r\n    function withdraw() public noReentrant {\r\n        User storage user = Users[msg.sender];\r\n\r\n        uint256 transferAmt = user.totalWithdrawable;\r\n\r\n        uint256 feePercent = 30;\r\n\r\n        if (user.claimCount >= 30) {\r\n            feePercent = 0;\r\n        } else if (user.claimCount >= 25) {\r\n            feePercent = 5;\r\n        } else if (user.claimCount >= 20) {\r\n            feePercent = 10;\r\n        } else if (user.claimCount >= 15) {\r\n            feePercent = 15;\r\n        } else if (user.claimCount >= 10) {\r\n            feePercent = 20;\r\n        } else if (user.claimCount >= 5) {\r\n            feePercent = 25;\r\n        }\r\n        if (transferAmt + user.totalWithdrawn > user.maxPayout) {\r\n            uint256 rawPay = user.maxPayout - user.totalWithdrawn;\r\n            uint256 rWithdrawable = (rawPay * feePercent) / 100;\r\n            user.totalWithdrawable = 0;\r\n            user.totalDeposits = 0;\r\n            user.totalWithdrawn = user.maxPayout;\r\n            user.claimCount = 0;\r\n            BUSD.safeTransfer(msg.sender, rWithdrawable);\r\n\r\n            emit Withdraw(msg.sender, rWithdrawable);\r\n        } else {\r\n            uint256 rWithdrawable = (transferAmt * feePercent) / 100; // 10% is left in contract, that's withdraw fee for tvl\r\n            user.totalWithdrawable = 0;\r\n            user.totalWithdrawn += transferAmt;\r\n            user.claimCount = 0;\r\n\r\n            BUSD.safeTransfer(msg.sender, rWithdrawable);\r\n\r\n            emit Withdraw(msg.sender, transferAmt);\r\n        }\r\n    }\r\n\r\n    function withdrawRef() public noReentrant {\r\n        User storage user = Users[msg.sender];\r\n\r\n        require(\r\n            user.refBonus > 0,\r\n            \"You don't have any referrals to claim!\"\r\n        );\r\n\r\n        uint256 transferAmt = user.refBonus;\r\n        user.refBonus = 0;\r\n\r\n        BUSD.safeTransfer(msg.sender, transferAmt);\r\n    }\r\n\r\n    function start() public onlyOwner {\r\n        require(bStart == false, \"Started already\");\r\n        bStart = true;\r\n    }\r\n\r\n    function getDepositAmount(address addr)\r\n        public\r\n        view\r\n        returns (uint256 totDeps)\r\n    {\r\n        User storage user = Users[addr];\r\n        return user.totalDeposits;\r\n    }\r\n\r\n    function getClaimedTime(address addr)\r\n        public\r\n        view\r\n        returns (uint256 lasCla)\r\n    {\r\n        User storage user = Users[addr];\r\n        return user.lastClaim;\r\n    }\r\n\r\n    function getClaimedAmount(address addr)\r\n        public\r\n        view\r\n        returns (uint256 totClaims)\r\n    {\r\n        User storage user = Users[addr];\r\n        return user.totalWithdrawable;\r\n    }\r\n\r\n    function getWithdrawInfo(address addr)\r\n        public\r\n        view\r\n        returns (uint256 totwd)\r\n    {\r\n        User storage user = Users[addr];\r\n        return user.totalWithdrawn;\r\n    }\r\n\r\n    function getMaxInfo(address addr)\r\n        public\r\n        view\r\n        returns (uint256 totmax)\r\n    {\r\n        User storage user = Users[addr];\r\n        return user.maxPayout;\r\n    }\r\n\r\n    function getTotalRefBonus(address addr)\r\n        public\r\n        view\r\n        returns (uint256 totref)\r\n    {\r\n        User storage user = Users[addr];\r\n        return user.refBonus;\r\n    }\r\n\r\n    function getRefWithdrawn(address addr)\r\n        public\r\n        view\r\n        returns (uint256 totref)\r\n    {\r\n        User storage user = Users[addr];\r\n        return user.totalRefBonus - user.refBonus;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Compound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Referred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amtx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getClaimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totClaims\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lasCla\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totDeps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMaxInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totmax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRefWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totref\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTotalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totref\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getWithdrawInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totwd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IOK3Y", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ad8d0f86e45b791a1692f005981d7c06c4ee361d556db538908269664d58baa4"}