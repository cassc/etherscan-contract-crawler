{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract CooperativeContract {\r\n    struct WithdrawalProposal {\r\n        address requester;\r\n        address token; // Token address for ERC-20 withdrawals\r\n        uint amount;\r\n        uint approvals;\r\n        mapping(address => bool) voters;\r\n        bool executed;\r\n    }\r\n\r\n    mapping(address => bool) public voters;\r\n    WithdrawalProposal[] public withdrawalProposals;\r\n\r\n    event Deposit(address indexed depositor, uint amount);\r\n    event WithdrawalProposalCreated(\r\n        uint proposalId,\r\n        address indexed requester,\r\n        address indexed token,\r\n        uint amount\r\n    );\r\n    event WithdrawalProposalApproved(\r\n        uint proposalId,\r\n        address indexed approver,\r\n        bool approved\r\n    );\r\n    event WithdrawalExecuted(uint proposalId, address indexed executor);\r\n\r\n    modifier onlyVoter() {\r\n        require(\r\n            voters[msg.sender],\r\n            \"Only registered voters can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        voters[0xC7DA297e3CAF56CDbd8B9a8Dc54dB3905a0f3351] = true;\r\n        voters[0x87638706a3a2E1ccc94df7aF9756071B483aa65f] = true;\r\n        voters[0x76017FF8BBfA77eD3D485d4Ee350eEc34D845df2] = true;\r\n        voters[0xd2C0335c59C787913EA863067bfA6B0a2eC2e2EF] = true;\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.value > 0, \"Received zero Ether\");\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(address token, uint amount) external onlyVoter {\r\n        uint proposalId = withdrawalProposals.length;\r\n        WithdrawalProposal storage newProposal = withdrawalProposals.push();\r\n        newProposal.requester = msg.sender;\r\n        newProposal.token = token;\r\n        newProposal.amount = amount;\r\n        newProposal.approvals = 1;\r\n        newProposal.executed = false;\r\n\r\n        newProposal.voters[msg.sender] = true;\r\n\r\n        emit WithdrawalProposalCreated(proposalId, msg.sender, token, amount);\r\n    }\r\n\r\n    function approveWithdrawal(uint proposalId) external onlyVoter {\r\n        WithdrawalProposal storage proposal = withdrawalProposals[proposalId];\r\n\r\n        require(!proposal.executed, \"Proposal has already been executed\");\r\n        require(!proposal.voters[msg.sender], \"Already voted\");\r\n\r\n        proposal.approvals++;\r\n        proposal.voters[msg.sender] = true;\r\n\r\n        emit WithdrawalProposalApproved(proposalId, msg.sender, true);\r\n\r\n        if (proposal.approvals >= 3) {\r\n            _executeWithdrawal(proposalId);\r\n        }\r\n    }\r\n\r\n    function _executeWithdrawal(uint proposalId) internal {\r\n        WithdrawalProposal storage proposal = withdrawalProposals[proposalId];\r\n        require(!proposal.executed, \"Proposal has already been executed\");\r\n\r\n        if (proposal.token == address(0)) {\r\n            // Withdrawal for ETH\r\n            payable(proposal.requester).transfer(proposal.amount);\r\n        } else {\r\n            // Withdrawal for ERC-20 token\r\n            IERC20 tokenContract = IERC20(proposal.token);\r\n            require(\r\n                tokenContract.transfer(proposal.requester, proposal.amount),\r\n                \"Token transfer failed\"\r\n            );\r\n        }\r\n\r\n        proposal.executed = true;\r\n        emit WithdrawalExecuted(proposalId, msg.sender);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"WithdrawalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"WithdrawalProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalProposalCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"approveWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalProposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CooperativeContract", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c1a7e10890cb770d721de79aaebfb00dc61f0edab9646ded4993268919235e7c"}