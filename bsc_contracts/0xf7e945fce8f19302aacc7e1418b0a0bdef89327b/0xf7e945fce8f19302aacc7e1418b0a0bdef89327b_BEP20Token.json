{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.8.17;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPeggedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedToken {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/BEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nimport \\\"../interfaces/IBEP20.sol\\\";\\nimport \\\"../interfaces/IPeggedToken.sol\\\";\\n\\n/**\\n *  Token\\n *\\n * BEP-20 implementation, with mint & burn\\n */\\ncontract BEP20Token is IBEP20, IPeggedToken {\\n    address internal owner;\\n    address internal pendingOwner;\\n    address internal issuer;\\n\\n    uint8 public decimals;\\n    uint256 public totalSupply;\\n    uint256 internal maxSupply;\\n\\n    mapping (address => uint256) public override balanceOf;\\n    mapping (address => mapping (address => uint256)) public override allowance;\\n\\n    string public name;\\n    string public symbol;\\n\\n    event NewIssuer(address indexed issuer);\\n    event TransferOwnership(address indexed owner, bool indexed confirmed);\\n\\n    modifier only(address role) {\\n        require(msg.sender == role); // dev: missing role\\n        _;\\n    }\\n\\n    /**\\n     * Sets the token fields: name, symbol and decimals\\n     *\\n     * @param tokenName Name of the token\\n     * @param tokenSymbol Token Symbol\\n     * @param tokenDecimals Decimal places\\n     * @param tokenOwner Token Owner\\n     * @param tokenIssuer Token Issuer\\n     * @param tokenMaxSupply Max total supply\\n     */\\n    constructor(string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals, address tokenOwner, address tokenIssuer, uint256 tokenMaxSupply) {\\n        require(tokenOwner != address(0)); // dev: invalid owner\\n        require(tokenIssuer != address(0)); // dev: invalid issuer\\n        require(tokenMaxSupply > 0); // dev: invalid max supply\\n\\n        name = tokenName;\\n        symbol = tokenSymbol;\\n        decimals = tokenDecimals;\\n        owner = tokenOwner;\\n        issuer = tokenIssuer;\\n        maxSupply = tokenMaxSupply;\\n    }\\n\\n    /**\\n     * Gets the owner\\n     * Implements the BEP-20 {IBEP20-getOwner} interface\\n     */\\n    function getOwner()\\n    external view\\n    returns(address) {\\n        return owner;\\n    }\\n\\n    /**\\n     * Sets the owner\\n     *\\n     * @param newOwner Address of the new owner (must be confirmed by the new owner)\\n     */\\n    function transferOwnership(address newOwner)\\n    external\\n    only(owner) {\\n        pendingOwner = newOwner;\\n\\n        emit TransferOwnership(pendingOwner, false);\\n    }\\n\\n    /**\\n     * Confirms the new owner\\n     */\\n    function confirmOwnership()\\n    external\\n    only(pendingOwner) {\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n\\n        emit TransferOwnership(owner, true);\\n    }\\n\\n    /**\\n     * Sets the issuer\\n     *\\n     * @param newIssuer Address of the issuer\\n     */\\n    function setIssuer(address newIssuer)\\n    external\\n    only(owner) {\\n        issuer = newIssuer;\\n\\n        emit NewIssuer(issuer);\\n    }\\n\\n    /**\\n     * Mints {value} tokens to the {to} wallet.\\n     *\\n     * @param to The address receiving the newly minted tokens\\n     * @param value The number of tokens to mint\\n     */\\n    function mint(address to, uint256 value)\\n    external\\n    only(issuer) {\\n        require(to != address(0)); // dev: requires non-zero address\\n        require(totalSupply + value <= maxSupply); // dev: exceeds max supply\\n\\n        unchecked {\\n            totalSupply += value;\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `from`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens.\\n     */\\n    function burn(address from, uint256 value) \\n    external \\n    only(issuer) {\\n        require(from != address(0), \\\"BEP20: burn from the zero address\\\");\\n        require(allowance[from][msg.sender] >= value); // dev: exceeds allowance\\n\\n        unchecked {\\n            totalSupply -= value;\\n            balanceOf[from] -= value;\\n        }\\n\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * Approves the {spender} to transfer {value} tokens of the caller.\\n     *\\n     * @param spender The address which will spend the funds\\n     * @param value The value approved to be spent by the spender\\n     * @return A boolean that indicates if the operation was successful\\n     */\\n    function approve(address spender, uint256 value)\\n    external\\n    override\\n    returns(bool) {\\n        allowance[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * Transfers {value} tokens from the caller, to {to}\\n     *\\n     * @param to The address to transfer tokens to\\n     * @param value The number of tokens to be transferred\\n     * @return A boolean that indicates if the operation was successful\\n     */\\n    function transfer(address to, uint256 value)\\n    external\\n    override\\n    returns (bool) {\\n        updateBalance(msg.sender, to, value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * Transfers {value} tokens of {from} to {to}, on behalf of the caller.\\n     *\\n     * @param from The address to transfer tokens from\\n     * @param to The address to transfer tokens to\\n     * @param value The number of tokens to be transferred\\n     * @return A boolean that indicates if the operation was successful\\n     */\\n    function transferFrom(address from, address to, uint256 value)\\n    external\\n    override\\n    returns (bool) {\\n        require(allowance[from][msg.sender] >= value); // dev: exceeds allowance\\n        updateBalance(from, to, value);\\n        unchecked {\\n            allowance[from][msg.sender] -= value;\\n        }\\n\\n        return true;\\n    }\\n\\n    function updateBalance(address from, address to, uint256 value)\\n    internal {\\n        require(to != address(0)); // dev: requires non-zero address\\n        require(balanceOf[from] >= value); // dev: exceeds balance\\n        unchecked {\\n            balanceOf[from] -= value;\\n            balanceOf[to] += value;\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMaxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"NewIssuer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"confirmed\",\"type\":\"bool\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newIssuer\",\"type\":\"address\"}],\"name\":\"setIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BEP20Token", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000ec5160d79ecc1df6976615fbaa09f4a95f1d1e34000000000000000000000000afb9dcb1b18d34489e8d729311338f9e984c90d00000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000000000000000000006535749544348000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065357495443480000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}