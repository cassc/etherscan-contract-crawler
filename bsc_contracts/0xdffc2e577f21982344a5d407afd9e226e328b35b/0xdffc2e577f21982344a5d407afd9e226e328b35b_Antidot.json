{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Antidot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Antidot is Ownable {\\n    // TYPES //\\n    struct Stake {\\n        uint256 stake;\\n        uint256 notWithdrawn;\\n        uint256 timestamp;\\n        address partner;\\n        uint256 percentage;\\n        bool    deposited;\\n    }\\n\\n    struct ReferralReward {\\n        uint256 currentAvailableAmount;\\n        uint256 profit;\\n        uint256 volume;\\n        uint256 claimDate;\\n        bool    claimed;\\n    }\\n\\n    struct ReferralUsers {\\n        address user;\\n        uint256 lvl;\\n    }\\n    // TYPES //\\n\\n    // STORAGE //\\n    uint256 constant public hundredPercent = 10 ** 27;\\n    uint256 constant public referralLvls = 10;\\n    address constant public zeroAddress = 0x0000000000000000000000000000000000000000;\\n\\n    uint256 public depositLvls;\\n    uint256 public minDepositValue;\\n    uint256 public withdrawFee;\\n    uint256 public minWithdrawValue;\\n    uint256 public referralClaimDate;\\n\\n    bool public depositPause;\\n    bool public reinvestDepositedPause;\\n    bool public reinvestReferralPause;\\n    bool public withdrawDepositedPause;\\n    bool public withdrawReferralPause;\\n\\n    uint256[] public depositPercentages;\\n    uint256[] public depositAmount;\\n    uint256[referralLvls] public referralPercentages;\\n\\n    mapping(address => bool) public left;\\n    mapping(address => Stake) public stake;\\n    mapping(address => mapping(address => ReferralReward)) public referralReward; // user => invited => referral reward info\\n    mapping(address => mapping(uint256 => uint256)) public referralLvlRewards; // user => ref lvl => amount\\n    mapping(address => mapping(address => uint256)) public referralUserRewards; // user => invited up to 'referralLvls' => amount\\n    mapping(address => ReferralUsers[]) public referralUsers; // user => invited up to 'referralLvls'\\n    // STORAGE //\\n\\n    constructor(address _initialPartner) {\\n        stake[_initialPartner].deposited = true;\\n    }\\n\\n    // MODIFIERS //\\n    modifier depositNotPaused() {\\n        require(!depositPause, \\\"paused\\\");\\n        _;\\n    }\\n\\n    modifier reinvestDepositedNotPaused() {\\n        require(!reinvestDepositedPause, \\\"paused\\\");\\n        _;\\n    }\\n\\n    modifier reinvestReferralNotPaused() {\\n        require(!reinvestReferralPause, \\\"paused\\\");\\n        _;\\n    }\\n\\n    modifier withdrawDepositedNotPaused() {\\n        require(!withdrawDepositedPause, \\\"paused\\\");\\n        _;\\n    }\\n\\n    modifier withdrawReferralNotPaused() {\\n        require(!withdrawReferralPause, \\\"paused\\\");\\n        _;\\n    }\\n    // MODIFIERS //\\n\\n    // MAIN //\\n    function deposit(address _partner) external payable depositNotPaused {\\n        require(msg.value >= minDepositValue, \\\"invalidAmount\\\");\\n\\n        _updateNotWithdrawn();\\n\\n        Stake memory _senderStake = stake[msg.sender];\\n        if(!_senderStake.deposited) {\\n            require(stake[_partner].deposited, \\\"invalidPartner\\\");\\n            require(_partner != msg.sender, \\\"invalidPartner\\\");\\n\\n            _senderStake.deposited = true;\\n            _senderStake.partner = _partner;\\n            _senderStake.stake += msg.value;\\n            stake[msg.sender] = _senderStake;\\n            _traverseTree(msg.sender, _partner, msg.value);\\n        } else {\\n            _senderStake.stake += msg.value;\\n            stake[msg.sender] = _senderStake;\\n        }\\n        \\n        _updatePercentage();\\n    }\\n\\n    function reinvestDeposited(uint256 _amount) external reinvestDepositedNotPaused {\\n        require(_amount > 0, \\\"invalidAmount\\\");\\n\\n        _updateNotWithdrawn();\\n\\n        stake[msg.sender].notWithdrawn -= _amount;\\n        stake[msg.sender].stake += _amount;\\n\\n        _updatePercentage();\\n    }\\n\\n    function reinvestReferral(address[] memory _invited, uint256[] memory amount) external reinvestReferralNotPaused {\\n        uint256 _invitedLength = _invited.length;\\n         require(_invitedLength == amount.length, \\\"notEqual\\\");\\n        uint256 _toReinvest;\\n        for(uint256 i; i < _invitedLength; i++) {\\n            ReferralReward memory reward = referralReward[msg.sender][_invited[i]];\\n\\n            require(!reward.claimed, \\\"alreadyClaimed\\\");\\n            require(block.timestamp >= reward.claimDate, \\\"notAvailable\\\");\\n            require(reward.claimDate != 0, \\\"invalidReferral\\\");\\n\\n            reward.currentAvailableAmount -= amount[i];\\n            if (reward.currentAvailableAmount == 0) {\\n                reward.claimed = true;\\n            }\\n            _toReinvest += amount[i];\\n            referralReward[msg.sender][_invited[i]] = reward;\\n        }\\n\\n        stake[msg.sender].stake += _toReinvest;\\n        _updatePercentage();\\n    }\\n\\n    function withdrawDeposited(uint256 _amount) external withdrawDepositedNotPaused {\\n        require(_amount > 0, \\\"zeroAmount\\\");\\n        require(_amount >= minWithdrawValue, \\\"invalidAmount\\\");\\n        require(!left[msg.sender], \\\"left\\\");\\n\\n        _updateNotWithdrawn();\\n\\n        uint256 _fee = _amount * withdrawFee / hundredPercent;\\n        stake[msg.sender].notWithdrawn -= _amount;\\n\\n        payable(owner()).transfer(_fee);\\n        payable(msg.sender).transfer(_amount - _fee);\\n    }\\n\\n    function withdrawReferral(address[] memory _invited, uint256[] memory amount) external withdrawReferralNotPaused {\\n        require(!left[msg.sender], \\\"left\\\");\\n        uint256 _invitedLength = _invited.length;\\n        require(_invitedLength == amount.length, \\\"notEqual\\\");\\n        uint256 _toWithdraw;\\n        for(uint256 i; i < _invitedLength; i++) {\\n            ReferralReward memory reward = referralReward[msg.sender][_invited[i]];\\n\\n            require(!reward.claimed, \\\"alreadyClaimed\\\");\\n            require(block.timestamp >= reward.claimDate, \\\"notAvailable\\\");\\n            require(reward.claimDate != 0, \\\"invalidReferral\\\");\\n\\n            reward.currentAvailableAmount -= amount[i];\\n            if (reward.currentAvailableAmount == 0) {\\n                reward.claimed = true;\\n            }\\n            _toWithdraw += amount[i];\\n            referralReward[msg.sender][_invited[i]] = reward;\\n        }\\n        require(_toWithdraw >= minWithdrawValue, \\\"invalidAmount\\\");\\n\\n        uint256 _fee = _toWithdraw * withdrawFee / hundredPercent;\\n\\n        payable(owner()).transfer(_fee);\\n        payable(msg.sender).transfer(_toWithdraw - _fee);\\n    }\\n\\n    function _updateNotWithdrawn() private {\\n        uint256 _pending = getPendingReward(msg.sender);\\n        stake[msg.sender].timestamp = block.timestamp;\\n        stake[msg.sender].notWithdrawn += _pending;\\n    }\\n\\n    function _traverseTree(address _user, address _partner, uint256 _value) private {\\n        uint256 _referralClaimDate = referralClaimDate; \\n        for (uint256 i; i < referralLvls; i++) {\\n            if (_partner == zeroAddress) {\\n                break;\\n            }\\n            uint256 _reward = _value * referralPercentages[i] / hundredPercent;\\n\\n            referralReward[_partner][_user] = ReferralReward(_reward, _reward, _value, block.timestamp + _referralClaimDate, false);\\n            referralLvlRewards[_partner][i] += _reward;\\n\\n            if (referralUserRewards[_partner][_user] == 0) {\\n                referralUsers[_partner].push(ReferralUsers(_user, i));\\n            }\\n            referralUserRewards[_partner][_user] += _reward;\\n\\n            _partner = stake[_partner].partner;\\n        }\\n    }\\n\\n    function _updatePercentage() private {\\n        uint256 _depositLvls = depositLvls;\\n        uint256 _stake = stake[msg.sender].stake;\\n        uint256[] memory _depositAmount = depositAmount;\\n\\n        for (uint256 i; i < _depositLvls; i++) {\\n            if (_stake >= _depositAmount[i]) {\\n                stake[msg.sender].percentage = depositPercentages[i];\\n                break;\\n            }\\n        }\\n    }\\n    // MAIN //\\n\\n    // SETTERS //\\n    function setDepositLvls(uint256 _newLvls, uint256[] calldata _newAmount, uint256[] calldata _newPercentages) external onlyOwner {\\n        depositLvls = _newLvls;\\n\\n        uint256 _currentLength = depositAmount.length;\\n\\n        if (_currentLength > _newLvls) {\\n            uint256 _toDelete = _currentLength - _newLvls;\\n            for (uint256 i; i < _toDelete; i++) {\\n                depositAmount.pop();\\n                depositPercentages.pop();\\n            }\\n        }\\n\\n        if (_currentLength < _newLvls) {\\n            uint256 _toAdd = _newLvls - _currentLength;\\n            for (uint256 i; i < _toAdd; i++) {\\n                depositAmount.push(0);\\n                depositPercentages.push(0);\\n            }\\n        }\\n\\n        setDepositAmount(_newAmount);\\n        setDepositPercentages(_newPercentages);\\n    }\\n\\n    function setMinDepositValue(uint256 _value) external onlyOwner {\\n        minDepositValue = _value;\\n    }\\n\\n    function setWithdrawFee(uint256 _value) external onlyOwner {\\n        withdrawFee = _value;\\n    }\\n\\n    function setMinWithdrawValue(uint256 _value) external onlyOwner {\\n        minWithdrawValue = _value;\\n    }\\n\\n    function setReferralClaimDate(uint256 _value) external onlyOwner {\\n        referralClaimDate = _value;\\n    }\\n\\n    function setDepositPause(bool _value) external onlyOwner {\\n        depositPause = _value;\\n    }\\n\\n    function setReinvestDepositedPause(bool _value) external onlyOwner {\\n        reinvestDepositedPause = _value;\\n    }\\n\\n    function setReinvestReferralPause(bool _value) external onlyOwner {\\n        reinvestReferralPause = _value;\\n    }\\n\\n    function setWithdrawDepositedPause(bool _value) external onlyOwner {\\n        withdrawDepositedPause = _value;\\n    }\\n\\n    function setWithdrawReferralPause(bool _value) external onlyOwner {\\n        withdrawReferralPause = _value;\\n    }\\n\\n    function setDepositPercentages(uint256[] calldata _newPercentages) public onlyOwner {\\n        uint256 _depositLvls = depositLvls;\\n        require(_newPercentages.length == _depositLvls, \\\"invalidLength\\\");\\n\\n        uint256 _limit = _depositLvls - 1;\\n        for (uint256 i; i < _limit; i++) {\\n            require(_newPercentages[i] > _newPercentages[i + 1], \\\"invalidPercentages\\\");\\n            depositPercentages[i] = _newPercentages[i];\\n        }\\n        depositPercentages[_limit] = _newPercentages[_limit];\\n\\n        require(_newPercentages[_limit] != 0, \\\"invalidPercentage\\\");\\n    }\\n\\n    function setDepositAmount(uint256[] calldata _newAmoun) public onlyOwner {\\n        uint256 _depositLvls = depositLvls;\\n        require(_newAmoun.length == _depositLvls, \\\"invalidLength\\\");\\n\\n        uint256 _limit = _depositLvls - 1;\\n        for (uint256 i; i < _limit; i++) {\\n            require(_newAmoun[i] > _newAmoun[i + 1], \\\"invalidAmount\\\");\\n            depositAmount[i] = _newAmoun[i];\\n        }\\n        depositAmount[_limit] = _newAmoun[_limit];\\n\\n        require(_newAmoun[_limit] != 0, \\\"invalidAmount\\\");\\n    }\\n\\n    function setReferralPercentages(uint256[] calldata _newPercentages) external onlyOwner {\\n        require(_newPercentages.length == referralLvls, \\\"invalidLength\\\");\\n\\n        uint256 _limit = referralLvls - 1;\\n        for (uint256 i; i < _limit; i++) {\\n            require(_newPercentages[i] > _newPercentages[i + 1], \\\"invalidPercentages\\\");\\n            referralPercentages[i] = _newPercentages[i];\\n        }\\n        referralPercentages[_limit] = _newPercentages[_limit];\\n\\n        require(_newPercentages[_limit] != 0, \\\"invalidPercentage\\\");\\n    }\\n\\n    function setNewPartner(address _user, address _newPartner) external onlyOwner {\\n        require(_user != zeroAddress, \\\"invalidUser\\\");\\n        require(_newPartner != zeroAddress, \\\"invalidPartner\\\");\\n        require(_user != _newPartner, \\\"userIsPartner\\\");\\n        require(stake[_user].deposited, \\\"userNotDeposited\\\");\\n        require(stake[_newPartner].deposited, \\\"partnerNotDeposited\\\");\\n\\n        stake[_user].partner = _newPartner;\\n    }\\n\\n    function leave(address[] calldata account, bool[] calldata _left) external onlyOwner {\\n        require(account.length == _left.length, \\\"invalidLength\\\");\\n        for (uint256 i; i < account.length; i++) {\\n            left[account[i]] = _left[i];\\n        }\\n    }\\n\\n    function arbitrageTransfer(uint256 amount) external onlyOwner {\\n        payable(msg.sender).transfer(amount);\\n    }\\n    // SETTERS //\\n\\n    // GETTERS //\\n    function getPendingReward(address _account) public view returns(uint256) {\\n        Stake memory _stake = stake[_account];\\n        return ((_stake.stake * ((block.timestamp - _stake.timestamp) / 24 hours) * _stake.percentage) / hundredPercent);\\n    }\\n\\n    function getReferralUsers(address _account) public view returns(ReferralUsers[] memory) {\\n        return referralUsers[_account];\\n    }\\n\\n    function getReferralUsersLength(address _account) public view returns(uint256) {\\n        return referralUsers[_account].length;\\n    }\\n\\n    function getReferralUsersIndexed(address _account, uint256 _from, uint256 _to) public view returns(ReferralUsers[] memory) {\\n        ReferralUsers[] memory _info = new ReferralUsers[](_to - _from);\\n\\n        for(uint256 _index = 0; _from < _to; ++_index) {\\n            _info[_index] = referralUsers[_account][_from];\\n            _from++;\\n        }\\n\\n        return _info;\\n    }\\n\\n    function getDepositPercentages() public view returns(uint256[] memory) {\\n        return depositPercentages;\\n    }\\n\\n    function getDepositPercentagesLength() public view returns(uint256) {\\n        return depositPercentages.length;\\n    }\\n\\n    function getDepositPercentagesIndexed(uint256 _from, uint256 _to) public view returns(uint256[] memory) {\\n        uint256[] memory _info = new uint256[](_to - _from);\\n\\n        for(uint256 _index = 0; _from < _to; ++_index) {\\n            _info[_index] = depositPercentages[_from];\\n            _from++;\\n        }\\n\\n        return _info;\\n    }\\n\\n    function getDepositAmount() public view returns(uint256[] memory) {\\n        return depositAmount;\\n    }\\n\\n    function getDepositAmountLength() public view returns(uint256) {\\n        return depositAmount.length;\\n    }\\n\\n    function getDepositAmountIndexed(uint256 _from, uint256 _to) public view returns(uint256[] memory) {\\n        uint256[] memory _info = new uint256[](_to - _from);\\n\\n        for(uint256 _index = 0; _from < _to; ++_index) {\\n            _info[_index] = depositAmount[_from];\\n            _from++;\\n        }\\n\\n        return _info;\\n    }\\n\\n    function getReferralPercentages() public view returns(uint256[referralLvls] memory) {\\n        return referralPercentages;\\n    }\\n    // GETTERS //\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialPartner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"arbitrageTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLvls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getDepositAmountIndexed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositAmountLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositPercentages\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getDepositPercentagesIndexed\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositPercentagesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralPercentages\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReferralUsers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lvl\",\"type\":\"uint256\"}],\"internalType\":\"struct Antidot.ReferralUsers[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getReferralUsersIndexed\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lvl\",\"type\":\"uint256\"}],\"internalType\":\"struct Antidot.ReferralUsers[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReferralUsersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hundredPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_left\",\"type\":\"bool[]\"}],\"name\":\"leave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"left\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWithdrawValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralClaimDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralLvlRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralLvls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentAvailableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralUserRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lvl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reinvestDeposited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestDepositedPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_invited\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"reinvestReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestReferralPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newAmoun\",\"type\":\"uint256[]\"}],\"name\":\"setDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLvls\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_newAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newPercentages\",\"type\":\"uint256[]\"}],\"name\":\"setDepositLvls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setDepositPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newPercentages\",\"type\":\"uint256[]\"}],\"name\":\"setDepositPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinDepositValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinWithdrawValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newPartner\",\"type\":\"address\"}],\"name\":\"setNewPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setReferralClaimDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_newPercentages\",\"type\":\"uint256[]\"}],\"name\":\"setReferralPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setReinvestDepositedPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setReinvestReferralPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setWithdrawDepositedPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setWithdrawReferralPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deposited\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDeposited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDepositedPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_invited\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"withdrawReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReferralPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Antidot", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000dead", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}