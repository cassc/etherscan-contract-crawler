{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFundV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITwapOracleV2.sol\\\";\\n\\ninterface IFundV3 {\\n    /// @notice A linear transformation matrix that represents a rebalance.\\n    ///\\n    ///         ```\\n    ///             [        1        0        0 ]\\n    ///         R = [ ratioB2Q  ratioBR        0 ]\\n    ///             [ ratioR2Q        0  ratioBR ]\\n    ///         ```\\n    ///\\n    ///         Amounts of the three tranches `q`, `b` and `r` can be rebalanced by multiplying the matrix:\\n    ///\\n    ///         ```\\n    ///         [ q', b', r' ] = [ q, b, r ] * R\\n    ///         ```\\n    struct Rebalance {\\n        uint256 ratioB2Q;\\n        uint256 ratioR2Q;\\n        uint256 ratioBR;\\n        uint256 timestamp;\\n    }\\n\\n    function tokenUnderlying() external view returns (address);\\n\\n    function tokenQ() external view returns (address);\\n\\n    function tokenB() external view returns (address);\\n\\n    function tokenR() external view returns (address);\\n\\n    function tokenShare(uint256 tranche) external view returns (address);\\n\\n    function primaryMarket() external view returns (address);\\n\\n    function primaryMarketUpdateProposal() external view returns (address, uint256);\\n\\n    function strategy() external view returns (address);\\n\\n    function strategyUpdateProposal() external view returns (address, uint256);\\n\\n    function underlyingDecimalMultiplier() external view returns (uint256);\\n\\n    function twapOracle() external view returns (ITwapOracleV2);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function endOfDay(uint256 timestamp) external pure returns (uint256);\\n\\n    function trancheTotalSupply(uint256 tranche) external view returns (uint256);\\n\\n    function trancheBalanceOf(uint256 tranche, address account) external view returns (uint256);\\n\\n    function trancheAllBalanceOf(address account) external view returns (uint256, uint256, uint256);\\n\\n    function trancheBalanceVersion(address account) external view returns (uint256);\\n\\n    function trancheAllowance(\\n        uint256 tranche,\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function trancheAllowanceVersion(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function trancheTransfer(\\n        uint256 tranche,\\n        address recipient,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function trancheTransferFrom(\\n        uint256 tranche,\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function trancheApprove(\\n        uint256 tranche,\\n        address spender,\\n        uint256 amount,\\n        uint256 version\\n    ) external;\\n\\n    function getRebalanceSize() external view returns (uint256);\\n\\n    function getRebalance(uint256 index) external view returns (Rebalance memory);\\n\\n    function getRebalanceTimestamp(uint256 index) external view returns (uint256);\\n\\n    function currentDay() external view returns (uint256);\\n\\n    function splitRatio() external view returns (uint256);\\n\\n    function historicalSplitRatio(uint256 version) external view returns (uint256);\\n\\n    function fundActivityStartTime() external view returns (uint256);\\n\\n    function isFundActive(uint256 timestamp) external view returns (bool);\\n\\n    function getEquivalentTotalB() external view returns (uint256);\\n\\n    function getEquivalentTotalQ() external view returns (uint256);\\n\\n    function historicalEquivalentTotalB(uint256 timestamp) external view returns (uint256);\\n\\n    function historicalNavs(uint256 timestamp) external view returns (uint256 navB, uint256 navR);\\n\\n    function extrapolateNav(uint256 price) external view returns (uint256, uint256, uint256);\\n\\n    function doRebalance(\\n        uint256 amountQ,\\n        uint256 amountB,\\n        uint256 amountR,\\n        uint256 index\\n    ) external view returns (uint256 newAmountQ, uint256 newAmountB, uint256 newAmountR);\\n\\n    function batchRebalance(\\n        uint256 amountQ,\\n        uint256 amountB,\\n        uint256 amountR,\\n        uint256 fromIndex,\\n        uint256 toIndex\\n    ) external view returns (uint256 newAmountQ, uint256 newAmountB, uint256 newAmountR);\\n\\n    function refreshBalance(address account, uint256 targetVersion) external;\\n\\n    function refreshAllowance(address owner, address spender, uint256 targetVersion) external;\\n\\n    function shareTransfer(address sender, address recipient, uint256 amount) external;\\n\\n    function shareTransferFrom(\\n        address spender,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (uint256 newAllowance);\\n\\n    function shareIncreaseAllowance(\\n        address sender,\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (uint256 newAllowance);\\n\\n    function shareDecreaseAllowance(\\n        address sender,\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (uint256 newAllowance);\\n\\n    function shareApprove(address owner, address spender, uint256 amount) external;\\n\\n    function historicalUnderlying(uint256 timestamp) external view returns (uint256);\\n\\n    function getTotalUnderlying() external view returns (uint256);\\n\\n    function getStrategyUnderlying() external view returns (uint256);\\n\\n    function getTotalDebt() external view returns (uint256);\\n\\n    event RebalanceTriggered(\\n        uint256 indexed index,\\n        uint256 indexed day,\\n        uint256 navSum,\\n        uint256 navB,\\n        uint256 navROrZero,\\n        uint256 ratioB2Q,\\n        uint256 ratioR2Q,\\n        uint256 ratioBR\\n    );\\n    event Settled(uint256 indexed day, uint256 navB, uint256 navR, uint256 interestRate);\\n    event InterestRateUpdated(uint256 baseInterestRate, uint256 floatingInterestRate);\\n    event BalancesRebalanced(\\n        address indexed account,\\n        uint256 version,\\n        uint256 balanceQ,\\n        uint256 balanceB,\\n        uint256 balanceR\\n    );\\n    event AllowancesRebalanced(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 version,\\n        uint256 allowanceQ,\\n        uint256 allowanceB,\\n        uint256 allowanceR\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidityGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface ILiquidityGauge is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function workingSupply() external view returns (uint256);\\n\\n    function workingBalanceOf(address account) external view returns (uint256);\\n\\n    function claimableRewards(\\n        address account\\n    )\\n        external\\n        returns (\\n            uint256 chessAmount,\\n            uint256 bonusAmount,\\n            uint256 amountQ,\\n            uint256 amountB,\\n            uint256 amountR,\\n            uint256 quoteAmount\\n        );\\n\\n    function claimRewards(address account) external;\\n\\n    function distribute(\\n        uint256 amountQ,\\n        uint256 amountB,\\n        uint256 amountR,\\n        uint256 quoteAmount,\\n        uint256 version\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPrimaryMarketV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\ninterface IPrimaryMarketV3 {\\n    function fund() external view returns (address);\\n\\n    function getCreation(uint256 underlying) external view returns (uint256 outQ);\\n\\n    function getCreationForQ(uint256 minOutQ) external view returns (uint256 underlying);\\n\\n    function getRedemption(uint256 inQ) external view returns (uint256 underlying, uint256 fee);\\n\\n    function getRedemptionForUnderlying(uint256 minUnderlying) external view returns (uint256 inQ);\\n\\n    function getSplit(uint256 inQ) external view returns (uint256 outB);\\n\\n    function getSplitForB(uint256 minOutB) external view returns (uint256 inQ);\\n\\n    function getMerge(uint256 inB) external view returns (uint256 outQ, uint256 feeQ);\\n\\n    function getMergeForQ(uint256 minOutQ) external view returns (uint256 inB);\\n\\n    function canBeRemovedFromFund() external view returns (bool);\\n\\n    function create(\\n        address recipient,\\n        uint256 minOutQ,\\n        uint256 version\\n    ) external returns (uint256 outQ);\\n\\n    function redeem(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 minUnderlying,\\n        uint256 version\\n    ) external returns (uint256 underlying);\\n\\n    function redeemAndUnwrap(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 minUnderlying,\\n        uint256 version\\n    ) external returns (uint256 underlying);\\n\\n    function queueRedemption(\\n        address recipient,\\n        uint256 inQ,\\n        uint256 minUnderlying,\\n        uint256 version\\n    ) external returns (uint256 underlying, uint256 index);\\n\\n    function claimRedemptions(\\n        address account,\\n        uint256[] calldata indices\\n    ) external returns (uint256 underlying);\\n\\n    function claimRedemptionsAndUnwrap(\\n        address account,\\n        uint256[] calldata indices\\n    ) external returns (uint256 underlying);\\n\\n    function split(address recipient, uint256 inQ, uint256 version) external returns (uint256 outB);\\n\\n    function merge(address recipient, uint256 inB, uint256 version) external returns (uint256 outQ);\\n\\n    function settle(uint256 day) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStableSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"../interfaces/IFundV3.sol\\\";\\n\\ninterface IStableSwapCore {\\n    function getQuoteOut(uint256 baseIn) external view returns (uint256 quoteOut);\\n\\n    function getQuoteIn(uint256 baseOut) external view returns (uint256 quoteIn);\\n\\n    function getBaseOut(uint256 quoteIn) external view returns (uint256 baseOut);\\n\\n    function getBaseIn(uint256 quoteOut) external view returns (uint256 baseIn);\\n\\n    function buy(\\n        uint256 version,\\n        uint256 baseOut,\\n        address recipient,\\n        bytes calldata data\\n    ) external returns (uint256 realBaseOut);\\n\\n    function sell(\\n        uint256 version,\\n        uint256 quoteOut,\\n        address recipient,\\n        bytes calldata data\\n    ) external returns (uint256 realQuoteOut);\\n}\\n\\ninterface IStableSwap is IStableSwapCore {\\n    function fund() external view returns (IFundV3);\\n\\n    function baseTranche() external view returns (uint256);\\n\\n    function baseAddress() external view returns (address);\\n\\n    function quoteAddress() external view returns (address);\\n\\n    function allBalances() external view returns (uint256, uint256);\\n\\n    function getOraclePrice() external view returns (uint256);\\n\\n    function getCurrentD() external view returns (uint256);\\n\\n    function getCurrentPriceOverOracle() external view returns (uint256);\\n\\n    function getCurrentPrice() external view returns (uint256);\\n\\n    function getPriceOverOracleIntegral() external view returns (uint256);\\n\\n    function addLiquidity(uint256 version, address recipient) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minBaseOut,\\n        uint256 minQuoteOut\\n    ) external returns (uint256 baseOut, uint256 quoteOut);\\n\\n    function removeLiquidityUnwrap(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minBaseOut,\\n        uint256 minQuoteOut\\n    ) external returns (uint256 baseOut, uint256 quoteOut);\\n\\n    function removeBaseLiquidity(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minBaseOut\\n    ) external returns (uint256 baseOut);\\n\\n    function removeQuoteLiquidity(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minQuoteOut\\n    ) external returns (uint256 quoteOut);\\n\\n    function removeQuoteLiquidityUnwrap(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minQuoteOut\\n    ) external returns (uint256 quoteOut);\\n}\\n\\n/// @dev The interface shares the same function names as in `IStableSwapCore`;\\n///      all getters are defined as non-view functions in order to parse and\\n///      return the internal revert messages\\ninterface IStableSwapCoreInternalRevertExpected {\\n    function getQuoteOut(uint256 baseIn) external returns (uint256 quoteOut);\\n\\n    function getQuoteIn(uint256 baseOut) external returns (uint256 quoteIn);\\n\\n    function getBaseOut(uint256 quoteIn) external returns (uint256 baseOut);\\n\\n    function getBaseIn(uint256 quoteOut) external returns (uint256 baseIn);\\n\\n    function buy(\\n        uint256 version,\\n        uint256 baseOut,\\n        address recipient,\\n        bytes calldata data\\n    ) external returns (uint256 realBaseOut);\\n\\n    function sell(\\n        uint256 version,\\n        uint256 quoteOut,\\n        address recipient,\\n        bytes calldata data\\n    ) external returns (uint256 realQuoteOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITrancheIndexV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\n/// @notice Amounts of QUEEN, BISHOP and ROOK are sometimes stored in a `uint256[3]` array.\\n///         This contract defines index of each tranche in this array.\\n///\\n///         Solidity does not allow constants to be defined in interfaces. So this contract follows\\n///         the naming convention of interfaces but is implemented as an `abstract contract`.\\nabstract contract ITrancheIndexV2 {\\n    uint256 internal constant TRANCHE_Q = 0;\\n    uint256 internal constant TRANCHE_B = 1;\\n    uint256 internal constant TRANCHE_R = 2;\\n\\n    uint256 internal constant TRANCHE_COUNT = 3;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITranchessSwapCallee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\ninterface ITranchessSwapCallee {\\n    function tranchessSwapCallback(\\n        uint256 baseDeltaOut,\\n        uint256 quoteDeltaOut,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITwapOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\ninterface ITwapOracle {\\n    enum UpdateType {\\n        PRIMARY,\\n        SECONDARY,\\n        OWNER,\\n        CHAINLINK,\\n        UNISWAP_V2\\n    }\\n\\n    function getTwap(uint256 timestamp) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITwapOracleV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"./ITwapOracle.sol\\\";\\n\\ninterface ITwapOracleV2 is ITwapOracle {\\n    function getLatest() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWrappedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWrappedERC20 is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/swap/BishopStableSwapV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"../interfaces/IPrimaryMarketV3.sol\\\";\\nimport \\\"../interfaces/ITrancheIndexV2.sol\\\";\\nimport \\\"./StableSwapV2.sol\\\";\\n\\ncontract BishopStableSwapV2 is StableSwapV2, ITrancheIndexV2 {\\n    event Rebalanced(uint256 base, uint256 quote, uint256 version);\\n\\n    uint256 public immutable tradingCurbThreshold;\\n\\n    uint256 public currentVersion;\\n\\n    constructor(\\n        address lpToken_,\\n        address fund_,\\n        address quoteAddress_,\\n        uint256 quoteDecimals_,\\n        uint256 ampl_,\\n        address feeCollector_,\\n        uint256 feeRate_,\\n        uint256 adminFeeRate_,\\n        uint256 tradingCurbThreshold_\\n    )\\n        public\\n        StableSwapV2(\\n            lpToken_,\\n            fund_,\\n            TRANCHE_B,\\n            quoteAddress_,\\n            quoteDecimals_,\\n            ampl_,\\n            feeCollector_,\\n            feeRate_,\\n            adminFeeRate_\\n        )\\n    {\\n        tradingCurbThreshold = tradingCurbThreshold_;\\n        currentVersion = IFundV3(fund_).getRebalanceSize();\\n    }\\n\\n    /// @dev Make sure the user-specified version is the latest rebalance version.\\n    function _checkVersion(uint256 version) internal view override {\\n        require(version == fund.getRebalanceSize(), \\\"Obsolete rebalance version\\\");\\n    }\\n\\n    function _getRebalanceResult(\\n        uint256 latestVersion\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            uint256 newBase,\\n            uint256 newQuote,\\n            uint256 excessiveQ,\\n            uint256 excessiveB,\\n            uint256 excessiveR,\\n            uint256 excessiveQuote,\\n            bool isRebalanced\\n        )\\n    {\\n        if (latestVersion == currentVersion) {\\n            return (baseBalance, quoteBalance, 0, 0, 0, 0, false);\\n        }\\n        isRebalanced = true;\\n\\n        uint256 oldBaseBalance = baseBalance;\\n        uint256 oldQuoteBalance = quoteBalance;\\n        (excessiveQ, newBase, ) = fund.batchRebalance(\\n            0,\\n            oldBaseBalance,\\n            0,\\n            currentVersion,\\n            latestVersion\\n        );\\n        if (newBase < oldBaseBalance) {\\n            // We split all QUEEN from rebalance if the amount of BISHOP is smaller than before.\\n            // In almost all cases, the total amount of BISHOP after the split is still smaller\\n            // than before.\\n            excessiveR = IPrimaryMarketV3(fund.primaryMarket()).getSplit(excessiveQ);\\n            newBase = newBase.add(excessiveR);\\n        }\\n        if (newBase < oldBaseBalance) {\\n            // If BISHOP amount is still smaller than before, we remove quote tokens proportionally.\\n            newQuote = oldQuoteBalance.mul(newBase).div(oldBaseBalance);\\n            excessiveQuote = oldQuoteBalance - newQuote;\\n        } else {\\n            // In most cases when we reach here, the BISHOP amount remains the same (ratioBR = 1).\\n            newQuote = oldQuoteBalance;\\n            excessiveB = newBase - oldBaseBalance;\\n            newBase = oldBaseBalance;\\n        }\\n    }\\n\\n    function _handleRebalance(\\n        uint256 latestVersion\\n    ) internal override returns (uint256 newBase, uint256 newQuote) {\\n        uint256 excessiveQ;\\n        uint256 excessiveB;\\n        uint256 excessiveR;\\n        uint256 excessiveQuote;\\n        bool isRebalanced;\\n        (\\n            newBase,\\n            newQuote,\\n            excessiveQ,\\n            excessiveB,\\n            excessiveR,\\n            excessiveQuote,\\n            isRebalanced\\n        ) = _getRebalanceResult(latestVersion);\\n        if (isRebalanced) {\\n            baseBalance = newBase;\\n            quoteBalance = newQuote;\\n            currentVersion = latestVersion;\\n            emit Rebalanced(newBase, newQuote, latestVersion);\\n            if (excessiveQ > 0) {\\n                if (excessiveR > 0) {\\n                    IPrimaryMarketV3(fund.primaryMarket()).split(\\n                        address(this),\\n                        excessiveQ,\\n                        latestVersion\\n                    );\\n                    excessiveQ = 0;\\n                } else {\\n                    fund.trancheTransfer(TRANCHE_Q, lpToken, excessiveQ, latestVersion);\\n                }\\n            }\\n            if (excessiveB > 0) {\\n                fund.trancheTransfer(TRANCHE_B, lpToken, excessiveB, latestVersion);\\n            }\\n            if (excessiveR > 0) {\\n                fund.trancheTransfer(TRANCHE_R, lpToken, excessiveR, latestVersion);\\n            }\\n            if (excessiveQuote > 0) {\\n                IERC20(quoteAddress).safeTransfer(lpToken, excessiveQuote);\\n            }\\n            ILiquidityGauge(lpToken).distribute(\\n                excessiveQ,\\n                excessiveB,\\n                excessiveR,\\n                excessiveQuote,\\n                latestVersion\\n            );\\n        }\\n    }\\n\\n    function getOraclePrice() public view override returns (uint256) {\\n        uint256 price = fund.twapOracle().getLatest();\\n        (, uint256 navB, uint256 navR) = fund.extrapolateNav(price);\\n        require(navR >= navB.multiplyDecimal(tradingCurbThreshold), \\\"Trading curb\\\");\\n        return navB;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/swap/StableSwapV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../interfaces/IStableSwap.sol\\\";\\nimport \\\"../interfaces/ILiquidityGauge.sol\\\";\\nimport \\\"../interfaces/ITranchessSwapCallee.sol\\\";\\nimport \\\"../interfaces/IWrappedERC20.sol\\\";\\n\\nimport \\\"../utils/SafeDecimalMath.sol\\\";\\nimport \\\"../utils/AdvancedMath.sol\\\";\\nimport \\\"../utils/ManagedPausable.sol\\\";\\n\\nabstract contract StableSwapV2 is IStableSwap, Ownable, ReentrancyGuard, ManagedPausable {\\n    using SafeMath for uint256;\\n    using SafeDecimalMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event LiquidityAdded(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 baseIn,\\n        uint256 quoteIn,\\n        uint256 lpOut,\\n        uint256 fee,\\n        uint256 adminFee,\\n        uint256 oraclePrice\\n    );\\n    event LiquidityRemoved(\\n        address indexed account,\\n        uint256 lpIn,\\n        uint256 baseOut,\\n        uint256 quotOut,\\n        uint256 fee,\\n        uint256 adminFee,\\n        uint256 oraclePrice\\n    );\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 baseIn,\\n        uint256 quoteIn,\\n        uint256 baseOut,\\n        uint256 quoteOut,\\n        uint256 fee,\\n        uint256 adminFee,\\n        uint256 oraclePrice\\n    );\\n    event Sync(uint256 base, uint256 quote, uint256 oraclePrice);\\n    event AmplRampUpdated(uint256 start, uint256 end, uint256 startTimestamp, uint256 endTimestamp);\\n    event FeeCollectorUpdated(address newFeeCollector);\\n    event FeeRateUpdated(uint256 newFeeRate);\\n    event AdminFeeRateUpdated(uint256 newAdminFeeRate);\\n\\n    uint256 private constant AMPL_MAX_VALUE = 1e6;\\n    uint256 private constant AMPL_RAMP_MIN_TIME = 86400;\\n    uint256 private constant AMPL_RAMP_MAX_CHANGE = 10;\\n    uint256 private constant MAX_FEE_RATE = 0.5e18;\\n    uint256 private constant MAX_ADMIN_FEE_RATE = 1e18;\\n    uint256 private constant MAX_ITERATION = 255;\\n    uint256 private constant MINIMUM_LIQUIDITY = 1e3;\\n\\n    address public immutable lpToken;\\n    IFundV3 public immutable override fund;\\n    uint256 public immutable override baseTranche;\\n    address public immutable override quoteAddress;\\n\\n    /// @dev A multipler that normalizes a quote asset balance to 18 decimal places.\\n    uint256 internal immutable _quoteDecimalMultiplier;\\n\\n    uint256 public baseBalance;\\n    uint256 public quoteBalance;\\n\\n    uint256 private _priceOverOracleIntegral;\\n    uint256 private _priceOverOracleTimestamp;\\n\\n    uint256 public amplRampStart;\\n    uint256 public amplRampEnd;\\n    uint256 public amplRampStartTimestamp;\\n    uint256 public amplRampEndTimestamp;\\n\\n    address public feeCollector;\\n    uint256 public feeRate;\\n    uint256 public adminFeeRate;\\n    uint256 public totalAdminFee;\\n\\n    constructor(\\n        address lpToken_,\\n        address fund_,\\n        uint256 baseTranche_,\\n        address quoteAddress_,\\n        uint256 quoteDecimals_,\\n        uint256 ampl_,\\n        address feeCollector_,\\n        uint256 feeRate_,\\n        uint256 adminFeeRate_\\n    ) public {\\n        lpToken = lpToken_;\\n        fund = IFundV3(fund_);\\n        baseTranche = baseTranche_;\\n        quoteAddress = quoteAddress_;\\n        require(quoteDecimals_ <= 18, \\\"Quote asset decimals larger than 18\\\");\\n        _quoteDecimalMultiplier = 10 ** (18 - quoteDecimals_);\\n\\n        require(ampl_ > 0 && ampl_ < AMPL_MAX_VALUE, \\\"Invalid A\\\");\\n        amplRampEnd = ampl_;\\n        emit AmplRampUpdated(ampl_, ampl_, 0, 0);\\n\\n        _updateFeeCollector(feeCollector_);\\n        _updateFeeRate(feeRate_);\\n        _updateAdminFeeRate(adminFeeRate_);\\n\\n        _initializeManagedPausable(msg.sender);\\n    }\\n\\n    receive() external payable {}\\n\\n    function baseAddress() external view override returns (address) {\\n        return fund.tokenShare(baseTranche);\\n    }\\n\\n    function allBalances() external view override returns (uint256, uint256) {\\n        (uint256 base, uint256 quote, , , , , ) = _getRebalanceResult(fund.getRebalanceSize());\\n        return (base, quote);\\n    }\\n\\n    function getAmpl() public view returns (uint256) {\\n        uint256 endTimestamp = amplRampEndTimestamp;\\n        if (block.timestamp < endTimestamp) {\\n            uint256 startTimestamp = amplRampStartTimestamp;\\n            uint256 start = amplRampStart;\\n            uint256 end = amplRampEnd;\\n            if (end > start) {\\n                return\\n                    start +\\n                    ((end - start) * (block.timestamp - startTimestamp)) /\\n                    (endTimestamp - startTimestamp);\\n            } else {\\n                return\\n                    start -\\n                    ((start - end) * (block.timestamp - startTimestamp)) /\\n                    (endTimestamp - startTimestamp);\\n            }\\n        } else {\\n            return amplRampEnd;\\n        }\\n    }\\n\\n    function getCurrentD() external view override returns (uint256) {\\n        (uint256 base, uint256 quote, , , , , ) = _getRebalanceResult(fund.getRebalanceSize());\\n        return _getD(base, quote, getAmpl(), getOraclePrice());\\n    }\\n\\n    function getCurrentPriceOverOracle() public view override returns (uint256) {\\n        (uint256 base, uint256 quote, , , , , ) = _getRebalanceResult(fund.getRebalanceSize());\\n        if (base == 0 || quote == 0) {\\n            return 1e18;\\n        }\\n        uint256 ampl = getAmpl();\\n        uint256 oraclePrice = getOraclePrice();\\n        uint256 d = _getD(base, quote, ampl, oraclePrice);\\n        return _getPriceOverOracle(base, quote, ampl, oraclePrice, d);\\n    }\\n\\n    /// @notice Get the current swap price, i.e. negative slope at the current point on the curve.\\n    ///         The returned value is computed after both base and quote balances are normalized to\\n    ///         18 decimal places. If the quote token does not have 18 decimal places, the returned\\n    ///         value has a different order of magnitude than the ratio of quote amount to base\\n    ///         amount in a swap.\\n    function getCurrentPrice() external view override returns (uint256) {\\n        (uint256 base, uint256 quote, , , , , ) = _getRebalanceResult(fund.getRebalanceSize());\\n        uint256 oraclePrice = getOraclePrice();\\n        if (base == 0 || quote == 0) {\\n            return oraclePrice;\\n        }\\n        uint256 ampl = getAmpl();\\n        uint256 d = _getD(base, quote, ampl, oraclePrice);\\n        return _getPriceOverOracle(base, quote, ampl, oraclePrice, d).multiplyDecimal(oraclePrice);\\n    }\\n\\n    function getPriceOverOracleIntegral() external view override returns (uint256) {\\n        return\\n            _priceOverOracleIntegral +\\n            getCurrentPriceOverOracle() *\\n            (block.timestamp - _priceOverOracleTimestamp);\\n    }\\n\\n    function getQuoteOut(uint256 baseIn) external view override returns (uint256 quoteOut) {\\n        (uint256 oldBase, uint256 oldQuote, , , , , ) = _getRebalanceResult(\\n            fund.getRebalanceSize()\\n        );\\n        uint256 newBase = oldBase.add(baseIn);\\n        uint256 ampl = getAmpl();\\n        uint256 oraclePrice = getOraclePrice();\\n        // Add 1 in case of rounding errors\\n        uint256 d = _getD(oldBase, oldQuote, ampl, oraclePrice) + 1;\\n        uint256 newQuote = _getQuote(ampl, newBase, oraclePrice, d) + 1;\\n        quoteOut = oldQuote.sub(newQuote);\\n        // Round down output after fee\\n        quoteOut = quoteOut.multiplyDecimal(1e18 - feeRate);\\n    }\\n\\n    function getQuoteIn(uint256 baseOut) external view override returns (uint256 quoteIn) {\\n        (uint256 oldBase, uint256 oldQuote, , , , , ) = _getRebalanceResult(\\n            fund.getRebalanceSize()\\n        );\\n        uint256 newBase = oldBase.sub(baseOut);\\n        uint256 ampl = getAmpl();\\n        uint256 oraclePrice = getOraclePrice();\\n        // Add 1 in case of rounding errors\\n        uint256 d = _getD(oldBase, oldQuote, ampl, oraclePrice) + 1;\\n        uint256 newQuote = _getQuote(ampl, newBase, oraclePrice, d) + 1;\\n        quoteIn = newQuote.sub(oldQuote);\\n        uint256 feeRate_ = feeRate;\\n        // Round up input before fee\\n        quoteIn = quoteIn.mul(1e18).add(1e18 - feeRate_ - 1) / (1e18 - feeRate_);\\n    }\\n\\n    function getBaseOut(uint256 quoteIn) external view override returns (uint256 baseOut) {\\n        (uint256 oldBase, uint256 oldQuote, , , , , ) = _getRebalanceResult(\\n            fund.getRebalanceSize()\\n        );\\n        // Round down input after fee\\n        uint256 quoteInAfterFee = quoteIn.multiplyDecimal(1e18 - feeRate);\\n        uint256 newQuote = oldQuote.add(quoteInAfterFee);\\n        uint256 ampl = getAmpl();\\n        uint256 oraclePrice = getOraclePrice();\\n        // Add 1 in case of rounding errors\\n        uint256 d = _getD(oldBase, oldQuote, ampl, oraclePrice) + 1;\\n        uint256 newBase = _getBase(ampl, newQuote, oraclePrice, d) + 1;\\n        baseOut = oldBase.sub(newBase);\\n    }\\n\\n    function getBaseIn(uint256 quoteOut) external view override returns (uint256 baseIn) {\\n        (uint256 oldBase, uint256 oldQuote, , , , , ) = _getRebalanceResult(\\n            fund.getRebalanceSize()\\n        );\\n        uint256 feeRate_ = feeRate;\\n        // Round up output before fee\\n        uint256 quoteOutBeforeFee = quoteOut.mul(1e18).add(1e18 - feeRate_ - 1) / (1e18 - feeRate_);\\n        uint256 newQuote = oldQuote.sub(quoteOutBeforeFee);\\n        uint256 ampl = getAmpl();\\n        uint256 oraclePrice = getOraclePrice();\\n        // Add 1 in case of rounding errors\\n        uint256 d = _getD(oldBase, oldQuote, ampl, oraclePrice) + 1;\\n        uint256 newBase = _getBase(ampl, newQuote, oraclePrice, d) + 1;\\n        baseIn = newBase.sub(oldBase);\\n    }\\n\\n    function buy(\\n        uint256 version,\\n        uint256 baseOut,\\n        address recipient,\\n        bytes calldata data\\n    )\\n        external\\n        override\\n        nonReentrant\\n        checkVersion(version)\\n        whenNotPaused\\n        returns (uint256 realBaseOut)\\n    {\\n        require(baseOut > 0, \\\"Zero output\\\");\\n        realBaseOut = baseOut;\\n        (uint256 oldBase, uint256 oldQuote) = _handleRebalance(version);\\n        require(baseOut < oldBase, \\\"Insufficient liquidity\\\");\\n        // Optimistically transfer tokens.\\n        fund.trancheTransfer(baseTranche, recipient, baseOut, version);\\n        if (data.length > 0) {\\n            ITranchessSwapCallee(msg.sender).tranchessSwapCallback(baseOut, 0, data);\\n            _checkVersion(version); // Make sure no rebalance is triggered in the callback\\n        }\\n        uint256 newQuote = _getNewQuoteBalance();\\n        uint256 quoteIn = newQuote.sub(oldQuote);\\n        uint256 fee = quoteIn.multiplyDecimal(feeRate);\\n        uint256 oraclePrice = getOraclePrice();\\n        {\\n            uint256 ampl = getAmpl();\\n            uint256 oldD = _getD(oldBase, oldQuote, ampl, oraclePrice);\\n            _updatePriceOverOracleIntegral(oldBase, oldQuote, ampl, oraclePrice, oldD);\\n            uint256 newD = _getD(oldBase - baseOut, newQuote.sub(fee), ampl, oraclePrice);\\n            require(newD >= oldD, \\\"Invariant mismatch\\\");\\n        }\\n        uint256 adminFee = fee.multiplyDecimal(adminFeeRate);\\n        baseBalance = oldBase - baseOut;\\n        quoteBalance = newQuote.sub(adminFee);\\n        totalAdminFee = totalAdminFee.add(adminFee);\\n        uint256 baseOut_ = baseOut;\\n        emit Swap(msg.sender, recipient, 0, quoteIn, baseOut_, 0, fee, adminFee, oraclePrice);\\n    }\\n\\n    function sell(\\n        uint256 version,\\n        uint256 quoteOut,\\n        address recipient,\\n        bytes calldata data\\n    )\\n        external\\n        override\\n        nonReentrant\\n        checkVersion(version)\\n        whenNotPaused\\n        returns (uint256 realQuoteOut)\\n    {\\n        require(quoteOut > 0, \\\"Zero output\\\");\\n        realQuoteOut = quoteOut;\\n        (uint256 oldBase, uint256 oldQuote) = _handleRebalance(version);\\n        // Optimistically transfer tokens.\\n        IERC20(quoteAddress).safeTransfer(recipient, quoteOut);\\n        if (data.length > 0) {\\n            ITranchessSwapCallee(msg.sender).tranchessSwapCallback(0, quoteOut, data);\\n            _checkVersion(version); // Make sure no rebalance is triggered in the callback\\n        }\\n        uint256 newBase = fund.trancheBalanceOf(baseTranche, address(this));\\n        uint256 baseIn = newBase.sub(oldBase);\\n        uint256 fee;\\n        {\\n            uint256 feeRate_ = feeRate;\\n            fee = quoteOut.mul(feeRate_).div(1e18 - feeRate_);\\n        }\\n        require(quoteOut.add(fee) < oldQuote, \\\"Insufficient liquidity\\\");\\n        uint256 oraclePrice = getOraclePrice();\\n        {\\n            uint256 newQuote = oldQuote - quoteOut;\\n            uint256 ampl = getAmpl();\\n            uint256 oldD = _getD(oldBase, oldQuote, ampl, oraclePrice);\\n            _updatePriceOverOracleIntegral(oldBase, oldQuote, ampl, oraclePrice, oldD);\\n            uint256 newD = _getD(newBase, newQuote - fee, ampl, oraclePrice);\\n            require(newD >= oldD, \\\"Invariant mismatch\\\");\\n        }\\n        uint256 adminFee = fee.multiplyDecimal(adminFeeRate);\\n        baseBalance = newBase;\\n        quoteBalance = oldQuote - quoteOut - adminFee;\\n        totalAdminFee = totalAdminFee.add(adminFee);\\n        uint256 quoteOut_ = quoteOut;\\n        emit Swap(msg.sender, recipient, baseIn, 0, 0, quoteOut_, fee, adminFee, oraclePrice);\\n    }\\n\\n    /// @notice Add liquidity. This function should be called by a smart contract, which transfers\\n    ///         base and quote tokens to this contract in the same transaction.\\n    /// @param version The latest rebalance version\\n    /// @param recipient Recipient of minted LP tokens\\n    /// @param lpOut Amount of minted LP tokens\\n    function addLiquidity(\\n        uint256 version,\\n        address recipient\\n    ) external override nonReentrant checkVersion(version) whenNotPaused returns (uint256 lpOut) {\\n        (uint256 oldBase, uint256 oldQuote) = _handleRebalance(version);\\n        uint256 newBase = fund.trancheBalanceOf(baseTranche, address(this));\\n        uint256 newQuote = _getNewQuoteBalance();\\n        uint256 ampl = getAmpl();\\n        uint256 oraclePrice = getOraclePrice();\\n        uint256 lpSupply = IERC20(lpToken).totalSupply();\\n        if (lpSupply == 0) {\\n            require(newBase > 0 && newQuote > 0, \\\"Zero initial balance\\\");\\n            baseBalance = newBase;\\n            quoteBalance = newQuote;\\n            // Overflow is desired\\n            _priceOverOracleIntegral += 1e18 * (block.timestamp - _priceOverOracleTimestamp);\\n            _priceOverOracleTimestamp = block.timestamp;\\n            uint256 d1 = _getD(newBase, newQuote, ampl, oraclePrice);\\n            ILiquidityGauge(lpToken).mint(address(this), MINIMUM_LIQUIDITY);\\n            ILiquidityGauge(lpToken).mint(recipient, d1.sub(MINIMUM_LIQUIDITY));\\n            emit LiquidityAdded(msg.sender, recipient, newBase, newQuote, d1, 0, 0, oraclePrice);\\n            return d1;\\n        }\\n        uint256 fee;\\n        uint256 adminFee;\\n        {\\n            // Initial invariant\\n            uint256 d0 = _getD(oldBase, oldQuote, ampl, oraclePrice);\\n            _updatePriceOverOracleIntegral(oldBase, oldQuote, ampl, oraclePrice, d0);\\n            {\\n                // New invariant before charging fee\\n                uint256 d1 = _getD(newBase, newQuote, ampl, oraclePrice);\\n                uint256 idealQuote = d1.mul(oldQuote) / d0;\\n                uint256 difference = idealQuote > newQuote\\n                    ? idealQuote - newQuote\\n                    : newQuote - idealQuote;\\n                fee = difference.multiplyDecimal(feeRate);\\n            }\\n            adminFee = fee.multiplyDecimal(adminFeeRate);\\n            totalAdminFee = totalAdminFee.add(adminFee);\\n            baseBalance = newBase;\\n            quoteBalance = newQuote.sub(adminFee);\\n            // New invariant after charging fee\\n            uint256 d2 = _getD(newBase, newQuote.sub(fee), ampl, oraclePrice);\\n            require(d2 > d0, \\\"No liquidity is added\\\");\\n            lpOut = lpSupply.mul(d2.sub(d0)).div(d0);\\n        }\\n        ILiquidityGauge(lpToken).mint(recipient, lpOut);\\n        emit LiquidityAdded(\\n            msg.sender,\\n            recipient,\\n            newBase - oldBase,\\n            newQuote - oldQuote,\\n            lpOut,\\n            fee,\\n            adminFee,\\n            oraclePrice\\n        );\\n    }\\n\\n    /// @dev Remove liquidity proportionally.\\n    /// @param lpIn Exact amount of LP token to burn\\n    /// @param minBaseOut Least amount of base asset to withdraw\\n    /// @param minQuoteOut Least amount of quote asset to withdraw\\n    function removeLiquidity(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minBaseOut,\\n        uint256 minQuoteOut\\n    )\\n        external\\n        override\\n        nonReentrant\\n        checkVersion(version)\\n        returns (uint256 baseOut, uint256 quoteOut)\\n    {\\n        (baseOut, quoteOut) = _removeLiquidity(version, lpIn, minBaseOut, minQuoteOut);\\n        IERC20(quoteAddress).safeTransfer(msg.sender, quoteOut);\\n    }\\n\\n    /// @dev Remove liquidity proportionally and unwrap for native token.\\n    /// @param lpIn Exact amount of LP token to burn\\n    /// @param minBaseOut Least amount of base asset to withdraw\\n    /// @param minQuoteOut Least amount of quote asset to withdraw\\n    function removeLiquidityUnwrap(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minBaseOut,\\n        uint256 minQuoteOut\\n    )\\n        external\\n        override\\n        nonReentrant\\n        checkVersion(version)\\n        returns (uint256 baseOut, uint256 quoteOut)\\n    {\\n        (baseOut, quoteOut) = _removeLiquidity(version, lpIn, minBaseOut, minQuoteOut);\\n        IWrappedERC20(quoteAddress).withdraw(quoteOut);\\n        (bool success, ) = msg.sender.call{value: quoteOut}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    function _removeLiquidity(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minBaseOut,\\n        uint256 minQuoteOut\\n    ) private returns (uint256 baseOut, uint256 quoteOut) {\\n        uint256 lpSupply = IERC20(lpToken).totalSupply();\\n        (uint256 oldBase, uint256 oldQuote) = _handleRebalance(version);\\n        baseOut = oldBase.mul(lpIn).div(lpSupply);\\n        quoteOut = oldQuote.mul(lpIn).div(lpSupply);\\n        require(baseOut >= minBaseOut, \\\"Insufficient output\\\");\\n        require(quoteOut >= minQuoteOut, \\\"Insufficient output\\\");\\n        baseBalance = oldBase.sub(baseOut);\\n        quoteBalance = oldQuote.sub(quoteOut);\\n        ILiquidityGauge(lpToken).burnFrom(msg.sender, lpIn);\\n        fund.trancheTransfer(baseTranche, msg.sender, baseOut, version);\\n        emit LiquidityRemoved(msg.sender, lpIn, baseOut, quoteOut, 0, 0, 0);\\n    }\\n\\n    /// @dev Remove base liquidity only.\\n    /// @param lpIn Exact amount of LP token to burn\\n    /// @param minBaseOut Least amount of base asset to withdraw\\n    function removeBaseLiquidity(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minBaseOut\\n    ) external override nonReentrant checkVersion(version) whenNotPaused returns (uint256 baseOut) {\\n        (uint256 oldBase, uint256 oldQuote) = _handleRebalance(version);\\n        uint256 lpSupply = IERC20(lpToken).totalSupply();\\n        uint256 ampl = getAmpl();\\n        uint256 oraclePrice = getOraclePrice();\\n        uint256 d1;\\n        {\\n            uint256 d0 = _getD(oldBase, oldQuote, ampl, oraclePrice);\\n            _updatePriceOverOracleIntegral(oldBase, oldQuote, ampl, oraclePrice, d0);\\n            d1 = d0.sub(d0.mul(lpIn).div(lpSupply));\\n        }\\n        {\\n            uint256 fee = oldQuote.mul(lpIn).div(lpSupply).multiplyDecimal(feeRate);\\n            // Add 1 in case of rounding errors\\n            uint256 newBase = _getBase(ampl, oldQuote.sub(fee), oraclePrice, d1) + 1;\\n            baseOut = oldBase.sub(newBase);\\n            require(baseOut >= minBaseOut, \\\"Insufficient output\\\");\\n            ILiquidityGauge(lpToken).burnFrom(msg.sender, lpIn);\\n            baseBalance = newBase;\\n            uint256 adminFee = fee.multiplyDecimal(adminFeeRate);\\n            totalAdminFee = totalAdminFee.add(adminFee);\\n            quoteBalance = oldQuote.sub(adminFee);\\n            emit LiquidityRemoved(msg.sender, lpIn, baseOut, 0, fee, adminFee, oraclePrice);\\n        }\\n        fund.trancheTransfer(baseTranche, msg.sender, baseOut, version);\\n    }\\n\\n    /// @dev Remove quote liquidity only.\\n    /// @param lpIn Exact amount of LP token to burn\\n    /// @param minQuoteOut Least amount of quote asset to withdraw\\n    function removeQuoteLiquidity(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minQuoteOut\\n    )\\n        external\\n        override\\n        nonReentrant\\n        checkVersion(version)\\n        whenNotPaused\\n        returns (uint256 quoteOut)\\n    {\\n        quoteOut = _removeQuoteLiquidity(version, lpIn, minQuoteOut);\\n        IERC20(quoteAddress).safeTransfer(msg.sender, quoteOut);\\n    }\\n\\n    /// @dev Remove quote liquidity only and unwrap for native token.\\n    /// @param lpIn Exact amount of LP token to burn\\n    /// @param minQuoteOut Least amount of quote asset to withdraw\\n    function removeQuoteLiquidityUnwrap(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minQuoteOut\\n    )\\n        external\\n        override\\n        nonReentrant\\n        checkVersion(version)\\n        whenNotPaused\\n        returns (uint256 quoteOut)\\n    {\\n        quoteOut = _removeQuoteLiquidity(version, lpIn, minQuoteOut);\\n        IWrappedERC20(quoteAddress).withdraw(quoteOut);\\n        (bool success, ) = msg.sender.call{value: quoteOut}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    function _removeQuoteLiquidity(\\n        uint256 version,\\n        uint256 lpIn,\\n        uint256 minQuoteOut\\n    ) private returns (uint256 quoteOut) {\\n        (uint256 oldBase, uint256 oldQuote) = _handleRebalance(version);\\n        uint256 lpSupply = IERC20(lpToken).totalSupply();\\n        uint256 ampl = getAmpl();\\n        uint256 oraclePrice = getOraclePrice();\\n        uint256 d1;\\n        {\\n            uint256 d0 = _getD(oldBase, oldQuote, ampl, oraclePrice);\\n            _updatePriceOverOracleIntegral(oldBase, oldQuote, ampl, oraclePrice, d0);\\n            d1 = d0.sub(d0.mul(lpIn).div(lpSupply));\\n        }\\n        uint256 idealQuote = oldQuote.mul(lpSupply.sub(lpIn)).div(lpSupply);\\n        // Add 1 in case of rounding errors\\n        uint256 newQuote = _getQuote(ampl, oldBase, oraclePrice, d1) + 1;\\n        uint256 fee = idealQuote.sub(newQuote).multiplyDecimal(feeRate);\\n        quoteOut = oldQuote.sub(newQuote).sub(fee);\\n        require(quoteOut >= minQuoteOut, \\\"Insufficient output\\\");\\n        ILiquidityGauge(lpToken).burnFrom(msg.sender, lpIn);\\n        uint256 adminFee = fee.multiplyDecimal(adminFeeRate);\\n        totalAdminFee = totalAdminFee.add(adminFee);\\n        quoteBalance = newQuote.add(fee).sub(adminFee);\\n        emit LiquidityRemoved(msg.sender, lpIn, 0, quoteOut, fee, adminFee, oraclePrice);\\n    }\\n\\n    /// @notice Force stored values to match balances.\\n    function sync() external nonReentrant {\\n        (uint256 oldBase, uint256 oldQuote) = _handleRebalance(fund.getRebalanceSize());\\n        uint256 ampl = getAmpl();\\n        uint256 oraclePrice = getOraclePrice();\\n        uint256 d = _getD(oldBase, oldQuote, ampl, oraclePrice);\\n        _updatePriceOverOracleIntegral(oldBase, oldQuote, ampl, oraclePrice, d);\\n        uint256 newBase = fund.trancheBalanceOf(baseTranche, address(this));\\n        uint256 newQuote = _getNewQuoteBalance();\\n        baseBalance = newBase;\\n        quoteBalance = newQuote;\\n        emit Sync(newBase, newQuote, oraclePrice);\\n    }\\n\\n    function collectFee() external {\\n        uint256 totalAdminFee_ = totalAdminFee;\\n        delete totalAdminFee;\\n        IERC20(quoteAddress).safeTransfer(feeCollector, totalAdminFee_);\\n    }\\n\\n    function _getNewQuoteBalance() private view returns (uint256) {\\n        return IERC20(quoteAddress).balanceOf(address(this)).sub(totalAdminFee);\\n    }\\n\\n    function _updatePriceOverOracleIntegral(\\n        uint256 base,\\n        uint256 quote,\\n        uint256 ampl,\\n        uint256 oraclePrice,\\n        uint256 d\\n    ) private {\\n        // Overflow is desired\\n        _priceOverOracleIntegral +=\\n            _getPriceOverOracle(base, quote, ampl, oraclePrice, d) *\\n            (block.timestamp - _priceOverOracleTimestamp);\\n        _priceOverOracleTimestamp = block.timestamp;\\n    }\\n\\n    function _getD(\\n        uint256 base,\\n        uint256 quote,\\n        uint256 ampl,\\n        uint256 oraclePrice\\n    ) private view returns (uint256) {\\n        // Newtonian: D' = (4A(kx + y) + D^3 / 2kxy)D / ((4A - 1)D + 3D^3 / 4kxy)\\n        uint256 normalizedQuote = quote.mul(_quoteDecimalMultiplier);\\n        uint256 baseValue = base.multiplyDecimal(oraclePrice);\\n        uint256 sum = baseValue.add(normalizedQuote);\\n        if (sum == 0) return 0;\\n\\n        uint256 prev = 0;\\n        uint256 d = sum;\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            prev = d;\\n            uint256 d3 = d.mul(d).div(baseValue).mul(d) / normalizedQuote / 4;\\n            d = (sum.mul(4 * ampl) + 2 * d3).mul(d) / d.mul(4 * ampl - 1).add(3 * d3);\\n            if (d <= prev + 1 && prev <= d + 1) {\\n                break;\\n            }\\n        }\\n        return d;\\n    }\\n\\n    function _getPriceOverOracle(\\n        uint256 base,\\n        uint256 quote,\\n        uint256 ampl,\\n        uint256 oraclePrice,\\n        uint256 d\\n    ) private view returns (uint256) {\\n        uint256 commonExp = d.multiplyDecimal(4e18 - 1e18 / ampl);\\n        uint256 baseValue = base.multiplyDecimal(oraclePrice);\\n        uint256 normalizedQuote = quote.mul(_quoteDecimalMultiplier);\\n        return\\n            (baseValue.mul(8).add(normalizedQuote.mul(4)).sub(commonExp))\\n                .multiplyDecimal(normalizedQuote)\\n                .divideDecimal(normalizedQuote.mul(8).add(baseValue.mul(4)).sub(commonExp))\\n                .divideDecimal(baseValue);\\n    }\\n\\n    function _getBase(\\n        uint256 ampl,\\n        uint256 quote,\\n        uint256 oraclePrice,\\n        uint256 d\\n    ) private view returns (uint256 base) {\\n        // Solve 16Ayk^2\u00b7x^2 + 4ky(4Ay - 4AD + D)\u00b7x - D^3 = 0\\n        // Newtonian: kx' = ((kx)^2 + D^3 / 16Ay) / (2kx + y - D + D/4A)\\n        uint256 normalizedQuote = quote.mul(_quoteDecimalMultiplier);\\n        uint256 d3 = d.mul(d).div(normalizedQuote).mul(d) / (16 * ampl);\\n        uint256 prev = 0;\\n        uint256 baseValue = d;\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            prev = baseValue;\\n            baseValue =\\n                baseValue.mul(baseValue).add(d3) /\\n                (2 * baseValue).add(normalizedQuote).add(d / (4 * ampl)).sub(d);\\n            if (baseValue <= prev + 1 && prev <= baseValue + 1) {\\n                break;\\n            }\\n        }\\n        base = baseValue.divideDecimal(oraclePrice);\\n    }\\n\\n    function _getQuote(\\n        uint256 ampl,\\n        uint256 base,\\n        uint256 oraclePrice,\\n        uint256 d\\n    ) private view returns (uint256 quote) {\\n        // Solve 16Axk\u00b7y^2 + 4kx(4Akx - 4AD + D)\u00b7y - D^3 = 0\\n        // Newtonian: y' = (y^2 + D^3 / 16Akx) / (2y + kx - D + D/4A)\\n        uint256 baseValue = base.multiplyDecimal(oraclePrice);\\n        uint256 d3 = d.mul(d).div(baseValue).mul(d) / (16 * ampl);\\n        uint256 prev = 0;\\n        uint256 normalizedQuote = d;\\n        for (uint256 i = 0; i < MAX_ITERATION; i++) {\\n            prev = normalizedQuote;\\n            normalizedQuote =\\n                normalizedQuote.mul(normalizedQuote).add(d3) /\\n                (2 * normalizedQuote).add(baseValue).add(d / (4 * ampl)).sub(d);\\n            if (normalizedQuote <= prev + 1 && prev <= normalizedQuote + 1) {\\n                break;\\n            }\\n        }\\n        quote = normalizedQuote / _quoteDecimalMultiplier;\\n    }\\n\\n    function updateAmplRamp(uint256 endAmpl, uint256 endTimestamp) external onlyOwner {\\n        require(endAmpl > 0 && endAmpl < AMPL_MAX_VALUE, \\\"Invalid A\\\");\\n        require(endTimestamp >= block.timestamp + AMPL_RAMP_MIN_TIME, \\\"A ramp time too short\\\");\\n        uint256 ampl = getAmpl();\\n        require(\\n            (endAmpl >= ampl && endAmpl <= ampl * AMPL_RAMP_MAX_CHANGE) ||\\n                (endAmpl < ampl && endAmpl * AMPL_RAMP_MAX_CHANGE >= ampl),\\n            \\\"A ramp change too large\\\"\\n        );\\n        amplRampStart = ampl;\\n        amplRampEnd = endAmpl;\\n        amplRampStartTimestamp = block.timestamp;\\n        amplRampEndTimestamp = endTimestamp;\\n        emit AmplRampUpdated(ampl, endAmpl, block.timestamp, endTimestamp);\\n    }\\n\\n    function _updateFeeCollector(address newFeeCollector) private {\\n        feeCollector = newFeeCollector;\\n        emit FeeCollectorUpdated(newFeeCollector);\\n    }\\n\\n    function updateFeeCollector(address newFeeCollector) external onlyOwner {\\n        _updateFeeCollector(newFeeCollector);\\n    }\\n\\n    function _updateFeeRate(uint256 newFeeRate) private {\\n        require(newFeeRate <= MAX_FEE_RATE, \\\"Exceed max fee rate\\\");\\n        feeRate = newFeeRate;\\n        emit FeeRateUpdated(newFeeRate);\\n    }\\n\\n    function updateFeeRate(uint256 newFeeRate) external onlyOwner {\\n        _updateFeeRate(newFeeRate);\\n    }\\n\\n    function _updateAdminFeeRate(uint256 newAdminFeeRate) private {\\n        require(newAdminFeeRate <= MAX_ADMIN_FEE_RATE, \\\"Exceed max admin fee rate\\\");\\n        adminFeeRate = newAdminFeeRate;\\n        emit AdminFeeRateUpdated(newAdminFeeRate);\\n    }\\n\\n    function updateAdminFeeRate(uint256 newAdminFeeRate) external onlyOwner {\\n        _updateAdminFeeRate(newAdminFeeRate);\\n    }\\n\\n    /// @dev Check if the user-specified version is correct.\\n    modifier checkVersion(uint256 version) {\\n        _checkVersion(version);\\n        _;\\n    }\\n\\n    /// @dev Revert if the user-specified version is not correct.\\n    function _checkVersion(uint256 version) internal view virtual {}\\n\\n    /// @dev Compute the new base and quote amount after rebalanced to the latest version.\\n    ///      If any tokens should be distributed to LP holders, their amounts are also returned.\\n    ///\\n    ///      The latest rebalance version is passed in a parameter and it is caller's responsibility\\n    ///      to pass the correct version.\\n    /// @param latestVersion The latest rebalance version\\n    /// @return newBase Amount of base tokens after rebalance\\n    /// @return newQuote Amount of quote tokens after rebalance\\n    /// @return excessiveQ Amount of QUEEN that should be distributed to LP holders due to rebalance\\n    /// @return excessiveB Amount of BISHOP that should be distributed to LP holders due to rebalance\\n    /// @return excessiveR Amount of ROOK that should be distributed to LP holders due to rebalance\\n    /// @return excessiveQuote Amount of quote tokens that should be distributed to LP holders due to rebalance\\n    /// @return isRebalanced Whether the stored base and quote amount are rebalanced\\n    function _getRebalanceResult(\\n        uint256 latestVersion\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            uint256 newBase,\\n            uint256 newQuote,\\n            uint256 excessiveQ,\\n            uint256 excessiveB,\\n            uint256 excessiveR,\\n            uint256 excessiveQuote,\\n            bool isRebalanced\\n        );\\n\\n    /// @dev Update the stored base and quote balance to the latest rebalance version and distribute\\n    ///      any excessive tokens to LP holders.\\n    ///\\n    ///      The latest rebalance version is passed in a parameter and it is caller's responsibility\\n    ///      to pass the correct version.\\n    /// @param latestVersion The latest rebalance version\\n    /// @return newBase Amount of stored base tokens after rebalance\\n    /// @return newQuote Amount of stored quote tokens after rebalance\\n    function _handleRebalance(\\n        uint256 latestVersion\\n    ) internal virtual returns (uint256 newBase, uint256 newQuote);\\n\\n    /// @notice Get the base token price from the price oracle. The returned price is normalized\\n    ///         to 18 decimal places.\\n    function getOraclePrice() public view virtual override returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/AdvancedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.10 <0.8.0;\\n\\nlibrary AdvancedMath {\\n    /// @dev Calculate square root.\\n    ///\\n    ///      Reference: https://en.wikipedia.org/wiki/Integer_square_root#Algorithm_using_Newton's_method\\n    function sqrt(uint256 s) internal pure returns (uint256) {\\n        if (s == 0) return 0;\\n        uint256 t = s;\\n        uint256 x0 = 2;\\n        if (t >= 1 << 128) {\\n            t >>= 128;\\n            x0 <<= 64;\\n        }\\n        if (t >= 1 << 64) {\\n            t >>= 64;\\n            x0 <<= 32;\\n        }\\n        if (t >= 1 << 32) {\\n            t >>= 32;\\n            x0 <<= 16;\\n        }\\n        if (t >= 1 << 16) {\\n            t >>= 16;\\n            x0 <<= 8;\\n        }\\n        if (t >= 1 << 8) {\\n            t >>= 8;\\n            x0 <<= 4;\\n        }\\n        if (t >= 1 << 4) {\\n            t >>= 4;\\n            x0 <<= 2;\\n        }\\n        if (t >= 1 << 2) {\\n            x0 <<= 1;\\n        }\\n        uint256 x1 = (x0 + s / x0) >> 1;\\n        while (x1 < x0) {\\n            x0 = x1;\\n            x1 = (x0 + s / x0) >> 1;\\n        }\\n        return x0;\\n    }\\n\\n    /// @notice Calculate cubic root.\\n    function cbrt(uint256 s) internal pure returns (uint256) {\\n        if (s == 0) return 0;\\n        uint256 t = s;\\n        uint256 x0 = 2;\\n        if (t >= 1 << 192) {\\n            t >>= 192;\\n            x0 <<= 64;\\n        }\\n        if (t >= 1 << 96) {\\n            t >>= 96;\\n            x0 <<= 32;\\n        }\\n        if (t >= 1 << 48) {\\n            t >>= 48;\\n            x0 <<= 16;\\n        }\\n        if (t >= 1 << 24) {\\n            t >>= 24;\\n            x0 <<= 8;\\n        }\\n        if (t >= 1 << 12) {\\n            t >>= 12;\\n            x0 <<= 4;\\n        }\\n        if (t >= 1 << 6) {\\n            t >>= 6;\\n            x0 <<= 2;\\n        }\\n        if (t >= 1 << 3) {\\n            x0 <<= 1;\\n        }\\n        uint256 x1 = (2 * x0 + s / x0 / x0) / 3;\\n        while (x1 < x0) {\\n            x0 = x1;\\n            x1 = (2 * x0 + s / x0 / x0) / 3;\\n        }\\n        return x0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ManagedPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract of an emergency stop mechanism that can be triggered by an authorized account.\\n *\\n * This module is modified based on Pausable in OpenZeppelin v3.3.0, adding public functions to\\n * pause, unpause and manage the pauser role. It is also designed to be used by upgradable\\n * contracts, like PausableUpgradable but with compact storage slots and no dependencies.\\n */\\nabstract contract ManagedPausable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    event PauserRoleTransferred(address indexed previousPauser, address indexed newPauser);\\n\\n    uint256 private constant FALSE = 0;\\n    uint256 private constant TRUE = 1;\\n\\n    uint256 private _initialized;\\n\\n    uint256 private _paused;\\n\\n    address private _pauser;\\n\\n    function _initializeManagedPausable(address pauser_) internal {\\n        require(_initialized == FALSE);\\n        _initialized = TRUE;\\n        _paused = FALSE;\\n        _pauser = pauser_;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused != FALSE;\\n    }\\n\\n    function pauser() public view returns (address) {\\n        return _pauser;\\n    }\\n\\n    function renouncePauserRole() external onlyPauser {\\n        emit PauserRoleTransferred(_pauser, address(0));\\n        _pauser = address(0);\\n    }\\n\\n    function transferPauserRole(address newPauser) external onlyPauser {\\n        require(newPauser != address(0));\\n        emit PauserRoleTransferred(_pauser, newPauser);\\n        _pauser = newPauser;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(_pauser == msg.sender, \\\"Pausable: only pauser\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(_paused == FALSE, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused != FALSE, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external onlyPauser whenNotPaused {\\n        _paused = TRUE;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external onlyPauser whenPaused {\\n        _paused = FALSE;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeDecimalMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n//\\n// Copyright (c) 2019 Synthetix\\n//\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to deal\\n// in the Software without restriction, including without limitation the rights\\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n// copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n//\\n// The above copyright notice and this permission notice shall be included in all\\n// copies or substantial portions of the Software.\\n//\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n// SOFTWARE.\\npragma solidity >=0.6.10 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint256;\\n\\n    /* Number of decimal places in the representations. */\\n    uint256 private constant decimals = 18;\\n    uint256 private constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint256 private constant UNIT = 10 ** uint256(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint256 private constant PRECISE_UNIT = 10 ** uint256(highPrecisionDecimals);\\n    uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR =\\n        10 ** uint256(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y).div(UNIT);\\n    }\\n\\n    function multiplyDecimalPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    function divideDecimalPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(PRECISE_UNIT).div(y);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint256 i) internal pure returns (uint256) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint256 i) internal pure returns (uint256) {\\n        uint256 quotientTimesTen = i.mul(10).div(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen = quotientTimesTen.add(10);\\n        }\\n\\n        return quotientTimesTen.div(10);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, and the max value of\\n     * uint256 on overflow.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        return c / a != b ? type(uint256).max : c;\\n    }\\n\\n    function saturatingMultiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return saturatingMul(x, y).div(UNIT);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fund_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quoteDecimals_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ampl_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFeeRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradingCurbThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAdminFeeRate\",\"type\":\"uint256\"}],\"name\":\"AdminFeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"AmplRampUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"FeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quotOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"PauserRoleTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"Rebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oraclePrice\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amplRampEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amplRampEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amplRampStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amplRampStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTranche\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"realBaseOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"contract IFundV3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmpl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"}],\"name\":\"getBaseIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteIn\",\"type\":\"uint256\"}],\"name\":\"getBaseOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPriceOverOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOraclePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOverOracleIntegral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseOut\",\"type\":\"uint256\"}],\"name\":\"getQuoteIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseIn\",\"type\":\"uint256\"}],\"name\":\"getQuoteOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseOut\",\"type\":\"uint256\"}],\"name\":\"removeBaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteOut\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteOut\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityUnwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteOut\",\"type\":\"uint256\"}],\"name\":\"removeQuoteLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteOut\",\"type\":\"uint256\"}],\"name\":\"removeQuoteLiquidityUnwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauserRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"realQuoteOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAdminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingCurbThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"transferPauserRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAdminFeeRate\",\"type\":\"uint256\"}],\"name\":\"updateAdminFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endAmpl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateAmplRamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"updateFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BishopStableSwapV2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f2a64f6fbd72a51ec1963593ff78b742b35d0a380000000000000000000000002f40c245c66c5219e0615571a526c93883b456bb0000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000050000000000000000000000000a80287d7183e23d460ac01f05c1b7f3d0fb76ea200000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000000000000000000000000000004db732547630000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}