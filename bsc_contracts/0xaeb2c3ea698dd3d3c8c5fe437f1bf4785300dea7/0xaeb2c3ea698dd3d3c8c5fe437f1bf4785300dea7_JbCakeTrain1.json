{"SourceCode": "pragma solidity 0.8.18;\r\n\r\n/*\r\n SPDX-License-Identifier: MIT\r\n------------------------------------\r\n Jonny Blockchain (R) JbCakeTrain smart contract v. 1\r\n Website :  https://jonnyblockchain.com\r\n------------------------------------\r\n*/\r\ncontract JbCakeTrain1 {\r\n    using SafeBEP20 for IBEP20;\r\n    address payable owner;\r\n\r\n    /**\r\n     * owner only access\r\n     */\r\n    modifier onlyOwner() {\r\n        if (msg.sender == owner) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        owner = payable(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * train call\r\n     */\r\n    function train(uint amountIn, uint amountOutMin, address[] calldata path, address recipient, uint deadline) external onlyOwner {\r\n        require(amountIn > 0, \"Zero amount in\");\r\n\r\n        IBEP20 token = IBEP20(path[0]);\r\n        token.safeTransferFrom(recipient, address(this), amountIn);\r\n        require(token.balanceOf(address(this)) >= amountIn, \"Not enough funds\");\r\n\r\n        uint[] memory result = IPancakeRouter01(0x10ED43C718714eb63d5aA57B78B54704E256024E)\r\n        .swapExactTokensForTokens(amountIn, amountOutMin, path, recipient, deadline);\r\n\r\n        require(result[0] > 0 && result[1] > 0, \"Exchange finished with a zero result\");\r\n    }\r\n\r\n    /**\r\n     * approves the token spending cap\r\n     */\r\n    function approve(address spender, address tokenAddress, uint256 amount) external onlyOwner {\r\n        IBEP20 token = IBEP20(tokenAddress);\r\n        token.approve(spender, amount);\r\n    }\r\n\r\n    /**\r\n     * this prevents the contract from freezing\r\n     */\r\n    function retrieveToken(address tokenAddress) external onlyOwner {\r\n        IBEP20 token = IBEP20(tokenAddress);\r\n        uint frozen = token.balanceOf(address(this));\r\n        token.safeTransfer(owner, frozen);\r\n    }\r\n\r\n    /**\r\n     * this prevents the contract from freezing\r\n     */\r\n    function retrieveBnb() external onlyOwner {\r\n        uint frozen = address(this).balance;\r\n        owner.transfer(frozen);\r\n    }\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeBEP20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeBEP20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"retrieveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"train\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JbCakeTrain1", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d3dbef682ffe701b6d10b927132d483b5a4bc655e23256d92492efbf7be86356"}