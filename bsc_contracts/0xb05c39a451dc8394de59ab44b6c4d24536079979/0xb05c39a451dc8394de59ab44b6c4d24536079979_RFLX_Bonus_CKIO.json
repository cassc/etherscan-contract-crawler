{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\n/**Notre contrat de participation communautaire 3.0 \r\nhttps://chokinfo.com \r\nCdlt.\r\nVos APIs**/\r\n\r\n/**Note \u00e0 l'animateur : \r\nActivation_Bonus : valeur \"true\" ou \"false\"\r\nValue : valeur entre 0 et 1000 (10 = 1% et 1000 = 100%)\r\nCHANGE_OWNERSHIP : une adresse de la BSC a mettre ici\r\nRFLX : valeur a mettre en wei\r\nSET_LOTTERY_PERCENT :  valeur entre 0 et 1000 (10 = 1% et 1000 = 100%)\r\nSET_LOTTERY_TICKET_PRICE : valeur a mettre en gwei\r\nSET_MAX_BUY : valeur a mettre en gwei\r\nSET_MIN_BUY : valeur a mettre en wei\r\nSET_MAX_LOTTERY_PATICIPANTS : valeur a mettre en ether (valeur entre 1 et 10 000)\r\nSET_MAX_LOTTERY_TICKET : valeur a mettre en ether (valeur entre 1 et 10 000)**/\r\n\r\n\r\n\r\ncontract RFLX_Bonus_CKIO {\r\n    using SafeMath for uint256;\r\n    IERC20 public token_CKIO;\r\n    address erctoken = 0x36d1eBFd2f37CF03b7DE8074436bfdCCE9E43203; /** 9 decimal main token address **/\r\n    uint256 public PERCENTS_DIVIDER = 1000;\r\n    /* Les diff\u00e9rentes adresses */\r\n    uint256 public OWNER                                           = 0;    /** 0%  **/\r\n    uint256 public LE_CONTRAT_DE_MARKETHIQUE_ET_INCINERATEUR       = 100;  /** 10% **/\r\n    uint256 public STACKOIN_ET_LIQUIDITE                           = 230;  /** 23% **/\r\n    uint256 public CAGNOTTE                                        = 50;   /** 5%  **/\r\n    uint256 public PROJET_EN_COURS                                 = 60;   /** 6%  **/\r\n    uint256 public LISTING                                         = 50;   /** 5%  **/\r\n    uint256 public ANIMATEUR_ET_BENEVOLES                          = 150;  /** 15% **/\r\n    uint256 public COMMUNAUTE_ET_DEFAVORISES                       = 100;  /** 10% **/\r\n    uint256 public DISCORD_ET_GAMERS                               = 60;   /** 6%  **/\r\n    uint256 public ENTREPRISE_ET_FONDATEUR                         = 50;   /** 5%  **/\r\n\r\n    uint256 public MIN_BUY = 10 ether; /** 10 CKIO **/\r\n    uint256 public MAX_BUY = 1000000 ether; /** 1 000 000 CKIO **/\r\n\r\n    /* lottery */\r\n\tbool public ACTIVATION_BONUS; /** Ecrire true / false pour activer ou d\u00e9sactiver les dons **/\r\n    uint256 public LOTTERY_START_TIME;\r\n    uint256 public LOTTERY_PERCENT = 150; /** 15% du CKIO sera envoy\u00e9 au gagnant **/\r\n    uint256 public LOTTERY_STEP = 30 * 24 * 60 * 60; /** Loterie se lance tous les 30jours  **/\r\n    uint256 public LOTTERY_TICKET_PRICE = 10 ether; /** Prix d'un ticket = 10 CKIO **/\r\n    uint256 public MAX_LOTTERY_TICKET = 100000; /** 100000 ticket max = 1 000 000 CKIO **/\r\n\t/** Si 100000 alors il faut multiplier par le prix de Tickets et penser \u00e0 modifier le MAX_BUY ci dessus**/\r\n    uint256 public MAX_LOTTERY_PARTICIPANTS = 1000; \r\n    /** Soit 1000 participants maximum**/\r\n    uint256 public lotteryRound = 0;\r\n    uint256 public currentPot = 0;\r\n    uint256 public participants = 0;\r\n    uint256 public totalTickets = 0;\r\n\r\n\r\n    /* statistics */\r\n    uint256 public totalLotteryBonus;\r\n    uint256 public totalEntries;\r\n\r\n    /* addresses */\r\n    address payable public Owner;\r\n    address payable public Le_contrat_de_markethique_et_Incinerateur;\r\n    address payable public StacKoin_et_la_liquidite;\r\n    address payable public Cagnotte;\r\n    address payable public Projet_en_cours;\r\n    address payable public Listing;\r\n    address payable public Animateur_et_Benevoles;\r\n    address payable public Communaute_et_Defavorises;\r\n    address payable public Discord_et_Gamers;\r\n    address payable public Entreprise_et_Fondateur;\r\n\r\n    struct User {\r\n        uint256 userTotalEntries;\r\n        uint256 totalLotteryBonus;\r\n    }\r\n\r\n    struct LotteryHistory {\r\n        uint256 round;\r\n        address winnerAddress;\r\n        uint256 pot;\r\n        uint256 totalLotteryParticipants;\r\n        uint256 totalLotteryTickets;\r\n    }\r\n\r\n    LotteryHistory[] internal lotteryHistory;\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => mapping(address => uint256)) public ticketOwners; /** round => address => amount of owned points **/\r\n    mapping(uint256 => mapping(uint256 => address)) public participantAdresses; /** round => id => address **/\r\n    event LotteryWinner(address indexed investor, uint256 pot, uint256 indexed round);\r\n\r\n    constructor (\r\n    address payable _Owner,\r\n    address payable _Le_contrat_de_markethique_et_Incinerateur,\r\n    address payable _StacKoin_et_la_liquidite,\r\n    address payable _Cagnotte,\r\n    address payable _Projet_en_cours,\r\n    address payable _Listing,\r\n    address payable _Animateur_et_Benevoles,\r\n    address payable _Communaute_et_Defavorises,\r\n    address payable _Discord_et_Gamers,\r\n    address payable _Entreprise_et_Fondateur\r\n\r\n    ) { \r\n        Owner = _Owner;\r\n        Le_contrat_de_markethique_et_Incinerateur = _Le_contrat_de_markethique_et_Incinerateur;\r\n        StacKoin_et_la_liquidite = _StacKoin_et_la_liquidite;\r\n        Cagnotte = _Cagnotte;\r\n        Projet_en_cours = _Projet_en_cours;\r\n        Listing = _Listing;\r\n        Animateur_et_Benevoles = _Animateur_et_Benevoles;\r\n        Communaute_et_Defavorises = _Communaute_et_Defavorises;\r\n        Discord_et_Gamers = _Discord_et_Gamers;\r\n        Entreprise_et_Fondateur = _Entreprise_et_Fondateur;\r\n        token_CKIO = IERC20(erctoken);\r\n    }\r\n\r\n    /** lottery **/\r\n    function Activation_Bonus(bool value) public {\r\n        require(msg.sender == Owner, \"Admin use only.\");\r\n        ACTIVATION_BONUS = value;\r\n        LOTTERY_START_TIME = block.timestamp;\r\n    }\r\n\r\n    /** transfer amount of CKIO **/\r\n    function RFLX(uint256 amount) public payable{\r\n        require(ACTIVATION_BONUS);\r\n        require(amount >= MIN_BUY && amount <= MAX_BUY, \"MIN/MAX requirement not satisfied.\");\r\n        User storage user = users[msg.sender];\r\n        token_CKIO.transferFrom(address(msg.sender), address(this), amount);\r\n        user.userTotalEntries = user.userTotalEntries.add(amount);\r\n        totalEntries = totalEntries.add(amount);\r\n\t\t_buyTickets(msg.sender, amount);\r\n    }\r\n\r\n    /** lottery section! **/\r\n    function _buyTickets(address userAddress, uint256 amount) private {\r\n        require(amount != 0, \"zero purchase amount\");\r\n        uint256 userTickets = ticketOwners[lotteryRound][userAddress];\r\n        uint256 numTickets = amount.div(LOTTERY_TICKET_PRICE); // 50% of deposit\r\n\r\n        /** if the user has no tickets before this point, but they just purchased a ticket **/\r\n        if(userTickets == 0) {\r\n            participantAdresses[lotteryRound][participants] = userAddress;\r\n\r\n            if(numTickets > 0){\r\n              participants = participants.add(1);\r\n            }\r\n        }\r\n\r\n        if (userTickets.add(numTickets) > MAX_LOTTERY_TICKET) {\r\n            numTickets = MAX_LOTTERY_TICKET.sub(userTickets);\r\n        }\r\n\r\n        ticketOwners[lotteryRound][userAddress] = userTickets.add(numTickets);\r\n        /** 15% of deposit will be put into the pot **/\r\n        currentPot = currentPot.add(amount.mul(LOTTERY_PERCENT).div(PERCENTS_DIVIDER));\r\n        /** 85% of deposit will be for tax **/\r\n\r\n        uint256 _Le_contrat_de_markethique_et_Incinerateur = amount.mul(LE_CONTRAT_DE_MARKETHIQUE_ET_INCINERATEUR).div(PERCENTS_DIVIDER); \r\n        uint256 _StacKoin_et_la_liquidite = amount.mul(STACKOIN_ET_LIQUIDITE).div(PERCENTS_DIVIDER); \r\n        uint256 _Cagnotte = amount.mul(CAGNOTTE).div(PERCENTS_DIVIDER); \r\n        uint256 _Projet_en_cours = amount.mul(PROJET_EN_COURS).div(PERCENTS_DIVIDER); \r\n        uint256 _Listing = amount.mul(LISTING).div(PERCENTS_DIVIDER); \r\n        uint256 _Animateur_et_Benevoles = amount.mul(ANIMATEUR_ET_BENEVOLES).div(PERCENTS_DIVIDER);\r\n        uint256 _Communaute_et_Defavorises = amount.mul(COMMUNAUTE_ET_DEFAVORISES).div(PERCENTS_DIVIDER);\r\n        uint256 _Discord_et_Gamers = amount.mul(DISCORD_ET_GAMERS).div(PERCENTS_DIVIDER);\r\n        uint256 _Entreprise_et_Fondateur = amount.mul(ENTREPRISE_ET_FONDATEUR).div(PERCENTS_DIVIDER);\r\n\r\n        token_CKIO.transfer(Le_contrat_de_markethique_et_Incinerateur,  _Le_contrat_de_markethique_et_Incinerateur);\r\n        token_CKIO.transfer(StacKoin_et_la_liquidite,  _StacKoin_et_la_liquidite); \r\n        token_CKIO.transfer(Cagnotte,  _Cagnotte); \r\n        token_CKIO.transfer(Projet_en_cours,  _Projet_en_cours); \r\n        token_CKIO.transfer(Listing, _Listing);\r\n        token_CKIO.transfer(Animateur_et_Benevoles,  _Animateur_et_Benevoles);\r\n        token_CKIO.transfer(Communaute_et_Defavorises,  _Communaute_et_Defavorises);\r\n        token_CKIO.transfer(Discord_et_Gamers,  _Discord_et_Gamers);\r\n        token_CKIO.transfer(Entreprise_et_Fondateur,  _Entreprise_et_Fondateur);\r\n        totalTickets = totalTickets.add(numTickets);\r\n\r\n        if(block.timestamp.sub(LOTTERY_START_TIME) >= LOTTERY_STEP || participants >= MAX_LOTTERY_PARTICIPANTS){\r\n            Le_Veinard();\r\n        }\r\n    }\r\n\r\n   /** will auto execute, when condition is met. buy, hatch and sell, can be triggered manually by admin if theres no user action. **/\r\n    function Le_Veinard() public {\r\n       require(((block.timestamp.sub(LOTTERY_START_TIME) >= LOTTERY_STEP) || participants >= MAX_LOTTERY_PARTICIPANTS),\r\n        \"Lottery must run for LOTTERY_STEP or there must be MAX_LOTTERY_PARTICIPANTS particpants\");\r\n        /** only draw winner if participant > 0. **/\r\n        if(participants != 0){\r\n            uint256[] memory init_range = new uint256[](participants);\r\n            uint256[] memory end_range = new uint256[](participants);\r\n\r\n            uint256 last_range = 0;\r\n\r\n            for(uint256 i = 0; i < participants; i++){\r\n                uint256 range0 = last_range.add(1);\r\n                uint256 range1 = range0.add(ticketOwners[lotteryRound][participantAdresses[lotteryRound][i]].div(1e9));\r\n\r\n                init_range[i] = range0;\r\n                end_range[i] = range1;\r\n                last_range = range1;\r\n            }\r\n\r\n            uint256 random = _getRandom().mod(last_range).add(1);\r\n\r\n            for(uint256 i = 0; i < participants; i++){\r\n                if((random >= init_range[i]) && (random <= end_range[i])){\r\n\r\n                    /** winner found **/\r\n                    address winnerAddress = participantAdresses[lotteryRound][i];\r\n                    User storage user = users[winnerAddress];\r\n\r\n                    /** winner will have the prize in their claimable rewards. **/\r\n                    uint256 reward = currentPot.mul(100).div(100);\r\n                    token_CKIO.transfer(winnerAddress, reward);\r\n\r\n                    /** record users total lottery rewards **/\r\n                    user.totalLotteryBonus = user.totalLotteryBonus.add(reward);\r\n                    totalLotteryBonus = totalLotteryBonus.add(reward);\r\n\r\n                    /** record round **/\r\n                    lotteryHistory.push(LotteryHistory(lotteryRound, winnerAddress, reward, participants, totalTickets));\r\n                    emit LotteryWinner(winnerAddress, reward, lotteryRound);\r\n\r\n                    /** reset lotteryRound **/\r\n                    currentPot = 0;\r\n                    participants = 0;\r\n                    totalTickets = 0;\r\n                    LOTTERY_START_TIME = block.timestamp;\r\n                    lotteryRound = lotteryRound.add(1);\r\n                    break;\r\n                }\r\n            }\r\n        }else{\r\n            /** if lottery step is done but no participant, reset lottery start time. **/\r\n            LOTTERY_START_TIME = block.timestamp;\r\n        }\r\n       \r\n    }\r\n\r\n    /**  select lottery winner **/\r\n    function _getRandom() private view returns(uint256){\r\n        bytes32 _blockhash = blockhash(block.number-1);\r\n        return uint256(keccak256(abi.encode(_blockhash,block.timestamp,currentPot, block.difficulty, getBalance())));\r\n    }\r\n\r\n    function getLotteryHistory(uint256 index) public view returns(uint256 round, address winnerAddress, uint256 pot,\r\n\t  uint256 totalLotteryParticipants, uint256 totalLotteryTickets) {\r\n\t\tround = lotteryHistory[index].round;\r\n\t\twinnerAddress = lotteryHistory[index].winnerAddress;\r\n\t\tpot = lotteryHistory[index].pot;\r\n\t\ttotalLotteryParticipants = lotteryHistory[index].totalLotteryParticipants;\r\n\t\ttotalLotteryTickets = lotteryHistory[index].totalLotteryTickets;\r\n\t}\r\n\r\n    function getLotteryInfo() public view returns (uint256 lotteryStartTime,  uint256 lotteryStep, uint256 lotteryCurrentPot,\r\n\t  uint256 lotteryParticipants, uint256 maxLotteryParticipants, uint256 totalLotteryTickets, uint256 lotteryTicketPrice, \r\n      uint256 maxLotteryTicket, uint256 lotteryPercent, uint256 round){\r\n\t\tlotteryStartTime = LOTTERY_START_TIME;\r\n\t\tlotteryStep = LOTTERY_STEP;\r\n\t\tlotteryTicketPrice = LOTTERY_TICKET_PRICE;\r\n\t\tmaxLotteryParticipants = MAX_LOTTERY_PARTICIPANTS;\r\n\t\tround = lotteryRound;\r\n\t\tlotteryCurrentPot = currentPot;\r\n\t\tlotteryParticipants = participants;\r\n\t    totalLotteryTickets = totalTickets;\r\n        maxLotteryTicket = MAX_LOTTERY_TICKET;\r\n        lotteryPercent = LOTTERY_PERCENT;\r\n\t}\r\n\r\n    function getUserInfo(address _adr) public view returns(uint256 _userTotalEntries, uint256 _totalLotteryBonus) {\r\n         User storage user = users[_adr];\r\n         _userTotalEntries = user.userTotalEntries;\r\n         _totalLotteryBonus = user.totalLotteryBonus;\r\n\t}\r\n\r\n    function getTimeStamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getUserTickets(address _userAddress) public view returns(uint256) {\r\n         return ticketOwners[lotteryRound][_userAddress];\r\n    }\r\n\r\n    function getLotteryTimer() public view returns(uint256) {\r\n        return LOTTERY_START_TIME.add(LOTTERY_STEP);\r\n    }\r\n\r\n    function getBalance() public view returns(uint256){\r\n        return token_CKIO.balanceOf(address(this));\r\n    }\r\n\r\n    function getSiteInfo() public view returns (uint256 _totalEntries, uint256 _totalLotteryBonus) {\r\n        return (totalEntries, totalLotteryBonus);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /** wallet addresses **/\r\n    function CHANGE_OWNERSHIP(address value) external {\r\n        require(msg.sender == Owner, \"Admin use only.\");\r\n        Owner = payable(value);\r\n    }\r\n\r\n    function Le_contrat_de_markethique_et_incenerateur_value (uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only.\");\r\n        require(value >= 0 && value <= 1000); /** 100% max **/\r\n        LE_CONTRAT_DE_MARKETHIQUE_ET_INCINERATEUR = value;\r\n    }\r\n\r\n    function StacKoin_et_la_liquidite_value(uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only.\");\r\n        require(value >= 0 && value <= 1000); /** 100% max **/\r\n        STACKOIN_ET_LIQUIDITE = value;\r\n    }\r\n\r\n    function Cagnotte_value(uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only.\");\r\n        require(value >= 0 && value <= 1000); /** 100% max **/\r\n        CAGNOTTE = value;\r\n    }\r\n\r\n    function Projet_en_cours_value (uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only.\");\r\n        require(value >= 0 && value <= 1000); /** 100% max **/\r\n        PROJET_EN_COURS = value;\r\n    }\r\n\r\n    function Listing_value(uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only.\");\r\n        require(value >= 0 && value <= 1000); /** 100% max **/\r\n        LISTING = value;\r\n    }\r\n\r\n    function Animateur_et_Benevoles_value(uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only.\");\r\n        require(value >= 0 && value <= 1000); /** 100% max **/\r\n        ANIMATEUR_ET_BENEVOLES = value;\r\n    }\r\n\r\n    function Communaute_et_Defavorises_value(uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only.\");\r\n        require(value >= 0 && value <= 1000); /** 100% max **/\r\n        COMMUNAUTE_ET_DEFAVORISES = value;\r\n    }\r\n\r\n    function Discord_et_Gamers_value(uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only.\");\r\n        require(value >= 0 && value <= 1000); /** 100% max **/\r\n        DISCORD_ET_GAMERS = value;\r\n    }\r\n\r\n    function Entreprise_et_Fondateur_value(uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only.\");\r\n        require(value >= 0 && value <= 1000); /** 100% max **/\r\n        ENTREPRISE_ET_FONDATEUR = value;\r\n    }\r\n\r\n    /* lottery setters */\r\n    function SET_LOTTERY_STEP(uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only.\");\r\n        LOTTERY_STEP = value; /** en secondes **/\r\n    }\r\n\r\n    function SET_LOTTERY_PERCENT(uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only\");\r\n        require(value >= 0 && value <= 1000); /** 100% max **/\r\n        LOTTERY_PERCENT = value;\r\n    }\r\n\r\n    function SET_LOTTERY_TICKET_PRICE(uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only.\");\r\n        LOTTERY_TICKET_PRICE = value * 1e9;\r\n    }\r\n\r\n    function SET_MAX_LOTTERY_TICKET(uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only\");\r\n        MAX_LOTTERY_TICKET = value;\r\n    }\r\n\r\n    function SET_MAX_LOTTERY_PARTICIPANTS(uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only.\");\r\n        MAX_LOTTERY_PARTICIPANTS = value;\r\n    }\r\n\r\n    function SET_MIN_BUY(uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only\");\r\n        MIN_BUY = value * 1e9;\r\n    }\r\n\r\n    function SET_MAX_BUY(uint256 value) external {\r\n        require(msg.sender == Owner, \"Admin use only\");\r\n        MAX_BUY = value * 1e9;\r\n    }  \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_Owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_Le_contrat_de_markethique_et_Incinerateur\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_StacKoin_et_la_liquidite\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_Cagnotte\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_Projet_en_cours\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_Listing\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_Animateur_et_Benevoles\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_Communaute_et_Defavorises\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_Discord_et_Gamers\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_Entreprise_et_Fondateur\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"LotteryWinner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACTIVATION_BONUS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ANIMATEUR_ET_BENEVOLES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"Activation_Bonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Animateur_et_Benevoles\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Animateur_et_Benevoles_value\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAGNOTTE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_OWNERSHIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNAUTE_ET_DEFAVORISES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Cagnotte\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Cagnotte_value\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Communaute_et_Defavorises\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Communaute_et_Defavorises_value\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISCORD_ET_GAMERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Discord_et_Gamers\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Discord_et_Gamers_value\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENTREPRISE_ET_FONDATEUR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Entreprise_et_Fondateur\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Entreprise_et_Fondateur_value\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LE_CONTRAT_DE_MARKETHIQUE_ET_INCINERATEUR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LISTING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_TICKET_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Le_Veinard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Le_contrat_de_markethique_et_Incinerateur\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Le_contrat_de_markethique_et_incenerateur_value\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Listing\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Listing_value\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BUY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOTTERY_PARTICIPANTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOTTERY_TICKET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BUY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJET_EN_COURS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Projet_en_cours\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Projet_en_cours_value\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RFLX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_LOTTERY_PERCENT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_LOTTERY_STEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_LOTTERY_TICKET_PRICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_MAX_BUY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_MAX_LOTTERY_PARTICIPANTS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_MAX_LOTTERY_TICKET\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_MIN_BUY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STACKOIN_ET_LIQUIDITE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StacKoin_et_la_liquidite\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"StacKoin_et_la_liquidite_value\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLotteryHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLotteryParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLotteryTickets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryCurrentPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLotteryParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLotteryTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLotteryTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalEntries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLotteryBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_userTotalEntries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLotteryBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participantAdresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_CKIO\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLotteryBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userTotalEntries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLotteryBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RFLX_Bonus_CKIO", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002eff533324733cbe4b9ef5a64524abde98bba366000000000000000000000000bc8c56f74c501df4534ca0041cd5fd51a0cdf4b50000000000000000000000009d2b8cda90748cc65585f9e49bef63c6d480bc68000000000000000000000000f105aa5438c9e28ea3d333be7ad4f58dde834c160000000000000000000000006b843f7664cf997bdbbf0113c08dc316b3ffa93b00000000000000000000000084ec47f768ed72c08a5d90fec7c713994eb9fef2000000000000000000000000800f955f289aaf42dfa746dae2caff00002f111c0000000000000000000000004966469a0dc2e65fda917e80c08fc1ebe515548c00000000000000000000000050eb628a104b9991aef06f0ce16cbd9caddc216a0000000000000000000000000af1315786de2b0ac98c7ecc4c603d41b7af9d7b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://47795eb85ca8e3f10698890561c3f14c4c06d8d0b727e6d3f8e8ca1b2e5dc8f7"}