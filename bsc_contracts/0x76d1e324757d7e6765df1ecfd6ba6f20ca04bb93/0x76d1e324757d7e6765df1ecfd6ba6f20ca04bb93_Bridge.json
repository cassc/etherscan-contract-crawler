{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/neo/code/bridge/bridge-contract/contracts/Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./BridgeAdmin.sol\\\";\\nimport \\\"./BridgeLogic.sol\\\";\\n\\ncontract Bridge is BridgeAdmin, Pausable {\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"Bridge\\\";\\n\\n    BridgeLogic private logic;\\n    uint256 public swapFee;\\n    address public feeTo;\\n\\n    struct assetSelector {\\n        string selector;\\n        bool isValueFirst;\\n    }\\n\\n    mapping(address => assetSelector)  public depositSelector;\\n    mapping(address => assetSelector) public withdrawSelector;\\n    mapping(bytes32 => bool) public filledTx;\\n\\n    event FeeToTransferred(address indexed previousFeeTo, address indexed newFeeTo);\\n    event SwapFeeChanged(uint256 indexed previousSwapFee, uint256 indexed newSwapFee);\\n    event DepositNative(address indexed from, uint256 value, string targetAddress, string chain, uint256 feeValue);\\n    event DepositToken(address indexed from, uint256 value, address indexed token, string targetAddress, string chain, uint256 feeValue);\\n    event WithdrawingNative(address indexed to, uint256 value, string proof);\\n    event WithdrawingToken(address indexed to, address indexed token, uint256 value, string proof);\\n    event WithdrawDoneNative(address indexed to, uint256 value, string proof);\\n    event WithdrawDoneToken(address indexed to, address indexed token, uint256 value, string proof);\\n\\n    modifier onlyOperator() {\\n        require(itemAddressExists(OPERATORHASH, msg.sender), \\\"Bridge:wrong operator\\\");\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(itemAddressExists(PAUSERHASH, msg.sender), \\\"Bridge:wrong pauser\\\");\\n        _;\\n    }\\n\\n    modifier positiveValue(uint _value) {\\n        require(_value > 0, \\\"Bridge:value need > 0\\\");\\n        _;\\n    }\\n\\n    constructor(address[] memory _owners, uint _ownerRequired) {\\n        initAdmin(_owners, _ownerRequired);\\n    }\\n\\n    function depositNative(string memory _targetAddress, string memory chain) public payable {\\n        require(msg.value >= swapFee, \\\"Bridge:insufficient swap fee\\\");\\n        if (swapFee != 0) {\\n            payable(feeTo).transfer(swapFee);\\n        }\\n        emit DepositNative(msg.sender, msg.value - swapFee, _targetAddress, chain, swapFee);\\n    }\\n\\n    function depositToken(address _token, uint value, string memory _targetAddress, string memory chain) public payable returns (bool) {\\n        require(msg.value == swapFee, \\\"Bridge:swap fee not equal\\\");\\n        if (swapFee != 0) {\\n            payable(feeTo).transfer(swapFee);\\n        }\\n\\n        bool res = depositTokenLogic(_token, msg.sender, value);\\n        emit DepositToken(msg.sender, value, _token, _targetAddress, chain, swapFee);\\n        return res;\\n    }\\n\\n    function withdrawNative(address payable to, uint value, string memory proof, bytes32 taskHash) public\\n    onlyOperator\\n    whenNotPaused\\n    positiveValue(value)\\n    returns (bool)\\n    {\\n        require(address(this).balance >= value, \\\"Bridge:not enough native token\\\");\\n        require(taskHash == keccak256((abi.encodePacked(to, value, proof))), \\\"Bridge:taskHash is wrong\\\");\\n        require(!filledTx[taskHash], \\\"Bridge:tx filled already\\\");\\n        uint256 status = logic.supportTask(logic.WITHDRAWTASK(), taskHash, msg.sender, operatorRequireNum);\\n\\n        if (status == logic.TASKPROCESSING()) {\\n            emit WithdrawingNative(to, value, proof);\\n        } else if (status == logic.TASKDONE()) {\\n            emit WithdrawingNative(to, value, proof);\\n            emit WithdrawDoneNative(to, value, proof);\\n            to.transfer(value);\\n            filledTx[taskHash] = true;\\n            logic.removeTask(taskHash);\\n        }\\n        return true;\\n    }\\n\\n    function withdrawToken(address _token, address to, uint value, string memory proof, bytes32 taskHash) public\\n    onlyOperator\\n    whenNotPaused\\n    positiveValue(value)\\n    returns (bool)\\n    {\\n        require(taskHash == keccak256((abi.encodePacked(to, value, proof))), \\\"Bridge:taskHash is wrong\\\");\\n        require(!filledTx[taskHash], \\\"Bridge:tx filled already\\\");\\n        uint256 status = logic.supportTask(logic.WITHDRAWTASK(), taskHash, msg.sender, operatorRequireNum);\\n\\n        if (status == logic.TASKPROCESSING()) {\\n            emit WithdrawingToken(to, _token, value, proof);\\n        } else if (status == logic.TASKDONE()) {\\n            bool res = withdrawTokenLogic(_token, to, value);\\n\\n            emit WithdrawingToken(to, _token, value, proof);\\n            emit WithdrawDoneToken(to, _token, value, proof);\\n            filledTx[taskHash] = true;\\n            logic.removeTask(taskHash);\\n            return res;\\n        }\\n        return true;\\n    }\\n\\n    function modifyAdminAddress(string memory class, address oldAddress, address newAddress) public whenPaused {\\n        require(newAddress != address(0x0), \\\"Bridge:wrong address\\\");\\n        bool flag = modifyAddress(class, oldAddress, newAddress);\\n        if (flag) {\\n            bytes32 classHash = keccak256(abi.encodePacked(class));\\n            if (classHash == LOGICHASH) {\\n                logic = BridgeLogic(newAddress);\\n            } else if (classHash == STOREHASH) {\\n                logic.resetStoreLogic(newAddress);\\n            }\\n        }\\n    }\\n\\n    function getLogicAddress() public view returns (address) {\\n        return address(logic);\\n    }\\n\\n    function getStoreAddress() public view returns (address) {\\n        return logic.getStoreAddress();\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n    function setDepositSelector(address token, string memory method, bool _isValueFirst) onlyOperator external {\\n        depositSelector[token] = assetSelector(method, _isValueFirst);\\n    }\\n\\n    function setWithdrawSelector(address token, string memory method, bool _isValueFirst) onlyOperator external {\\n        withdrawSelector[token] = assetSelector(method, _isValueFirst);\\n    }\\n\\n    function setSwapFee(uint256 _swapFee) onlyOwner external {\\n        emit SwapFeeChanged(swapFee, _swapFee);\\n        swapFee = _swapFee;\\n    }\\n\\n    function setFeeTo(address _feeTo) onlyOwner external {\\n        emit FeeToTransferred(feeTo, _feeTo);\\n        feeTo = _feeTo;\\n    }\\n\\n    function depositTokenLogic(address token, address _from, uint256 _value) internal returns (bool) {\\n        bool status = false;\\n        bytes memory returnedData;\\n        if (bytes(depositSelector[token].selector).length == 0) {\\n            (status, returnedData) = token.call(abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", _from, this, _value));\\n        }\\n        else {\\n            assetSelector memory aselector = depositSelector[token];\\n            if (aselector.isValueFirst) {\\n                (status, returnedData) = token.call(abi.encodeWithSignature(aselector.selector, _value, _from));\\n            }\\n            else {\\n                (status, returnedData) = token.call(abi.encodeWithSignature(aselector.selector, _from, _value));\\n            }\\n        }\\n        require(status && (returnedData.length == 0 || abi.decode(returnedData, (bool))), 'Bridge:deposit failed');\\n        return true;\\n    }\\n\\n    function withdrawTokenLogic(address token, address _to, uint256 _value) internal returns (bool) {\\n        bool status = false;\\n        bytes memory returnedData;\\n        if (bytes(withdrawSelector[token].selector).length == 0) {\\n            (status, returnedData) = token.call(abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _to, _value));\\n        }\\n        else {\\n            assetSelector memory aselector = withdrawSelector[token];\\n            if (aselector.isValueFirst) {\\n                (status, returnedData) = token.call(abi.encodeWithSignature(aselector.selector, _value, _to));\\n            }\\n            else {\\n                (status, returnedData) = token.call(abi.encodeWithSignature(aselector.selector, _to, _value));\\n            }\\n        }\\n\\n        require(status && (returnedData.length == 0 || abi.decode(returnedData, (bool))), 'Bridge:withdraw failed');\\n        return true;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/neo/code/bridge/bridge-contract/contracts/Container.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ncontract Container {\\n    struct Item {\\n        uint256 itemType;\\n        uint256 status;\\n        address[] addresses;\\n    }\\n\\n    uint256 MaxItemAddressNum = 255;\\n    mapping(bytes32 => Item) private container;\\n\\n    function itemAddressExists(bytes32 _id, address _oneAddress) internal view returns (bool) {\\n        for (uint256 i = 0; i < container[_id].addresses.length; i++) {\\n            if (container[_id].addresses[i] == _oneAddress)\\n                return true;\\n        }\\n        return false;\\n    }\\n\\n    function getItemAddresses(bytes32 _id) internal view returns (address[] memory) {\\n        return container[_id].addresses;\\n    }\\n\\n    function getItemInfo(bytes32 _id) internal view returns (uint256, uint256, uint256) {\\n        return (container[_id].itemType, container[_id].status, container[_id].addresses.length);\\n    }\\n\\n    function getItemAddressCount(bytes32 _id) internal view returns (uint256) {\\n        return container[_id].addresses.length;\\n    }\\n\\n    function setItemInfo(bytes32 _id, uint256 _itemType, uint256 _status) internal {\\n        container[_id].itemType = _itemType;\\n        container[_id].status = _status;\\n    }\\n\\n    function addItemAddress(bytes32 _id, address _oneAddress) internal {\\n        require(!itemAddressExists(_id, _oneAddress), \\\"Container:dup address added\\\");\\n        require(container[_id].addresses.length < MaxItemAddressNum, \\\"Container:too many addresses\\\");\\n        container[_id].addresses.push(_oneAddress);\\n    }\\n\\n    function removeItemAddresses(bytes32 _id) internal {\\n        delete container[_id].addresses;\\n    }\\n\\n    function removeOneItemAddress(bytes32 _id, address _oneAddress) internal {\\n        for (uint256 i = 0; i < container[_id].addresses.length; i++) {\\n            if (container[_id].addresses[i] == _oneAddress) {\\n                container[_id].addresses[i] = container[_id].addresses[container[_id].addresses.length - 1];\\n                container[_id].addresses.pop();\\n                return;\\n            }\\n        }\\n    }\\n\\n    function removeItem(bytes32 _id) internal {\\n        delete container[_id];\\n    }\\n\\n    function replaceItemAddress(bytes32 _id, address _oneAddress, address _anotherAddress) internal {\\n        for (uint256 i = 0; i < container[_id].addresses.length; i++) {\\n            if (container[_id].addresses[i] == _oneAddress) {\\n                container[_id].addresses[i] = _anotherAddress;\\n                return;\\n            }\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/Users/neo/code/bridge/bridge-contract/contracts/BridgeStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Container.sol\\\";\\n\\ncontract BridgeStorage is Container {\\n    string public constant name = \\\"BridgeStorage\\\";\\n\\n    address private caller;\\n\\n    constructor(address aCaller) {\\n        caller = aCaller;\\n    }\\n\\n    modifier onlyCaller() {\\n        require(msg.sender == caller, \\\"BridgeStorage:only use main contract to call\\\");\\n        _;\\n    }\\n\\n    function supporterExists(bytes32 taskHash, address user) public view returns (bool) {\\n        return itemAddressExists(taskHash, user);\\n    }\\n\\n    function setTaskInfo(bytes32 taskHash, uint256 taskType, uint256 status) external onlyCaller {\\n        setItemInfo(taskHash, taskType, status);\\n    }\\n\\n    function getTaskInfo(bytes32 taskHash) public view returns (uint256, uint256, uint256) {\\n        return getItemInfo(taskHash);\\n    }\\n\\n    function addSupporter(bytes32 taskHash, address oneAddress) external onlyCaller {\\n        addItemAddress(taskHash, oneAddress);\\n    }\\n\\n    function removeAllSupporter(bytes32 taskHash) external onlyCaller {\\n        removeItemAddresses(taskHash);\\n    }\\n\\n    function removeTask(bytes32 taskHash) external onlyCaller {\\n        removeItem(taskHash);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/Users/neo/code/bridge/bridge-contract/contracts/BridgeLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./BridgeStorage.sol\\\";\\n\\ncontract BridgeLogic {\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"BridgeLogic\\\";\\n\\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\\n    uint256 public constant TASKINIT = 0;\\n    uint256 public constant TASKPROCESSING = 1;\\n    uint256 public constant TASKCANCELLED = 2;\\n    uint256 public constant TASKDONE = 3;\\n    uint256 public constant WITHDRAWTASK = 1;\\n\\n    address private caller;\\n    BridgeStorage private store;\\n\\n    constructor(address aCaller) {\\n        caller = aCaller;\\n    }\\n\\n    modifier onlyCaller() {\\n        require(msg.sender == caller, \\\"BridgeLogic:only use main contract to call\\\");\\n        _;\\n    }\\n\\n    modifier operatorExists(address operator) {\\n        require(store.supporterExists(OPERATORHASH, operator), \\\"BridgeLogic:wrong operator\\\");\\n        _;\\n    }\\n\\n    function resetStoreLogic(address storeAddress) external onlyCaller {\\n        store = BridgeStorage(storeAddress);\\n    }\\n\\n    function getStoreAddress() public view returns (address) {\\n        return address(store);\\n    }\\n\\n    function supportTask(uint256 taskType, bytes32 taskHash, address oneAddress, uint256 requireNum) external onlyCaller returns (uint256) {\\n        require(!store.supporterExists(taskHash, oneAddress), \\\"BridgeLogic:supporter already exists\\\");\\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\\n        require(theTaskStatus < TASKDONE, \\\"BridgeLogic:wrong status\\\");\\n\\n        if (theTaskStatus != TASKINIT)\\n            require(theTaskType == taskType, \\\"BridgeLogic:task type not match\\\");\\n        store.addSupporter(taskHash, oneAddress);\\n        theSupporterNum++;\\n        if (theSupporterNum >= requireNum)\\n            theTaskStatus = TASKDONE;\\n        else\\n            theTaskStatus = TASKPROCESSING;\\n        store.setTaskInfo(taskHash, taskType, theTaskStatus);\\n        return theTaskStatus;\\n    }\\n\\n    function cancelTask(bytes32 taskHash) external onlyCaller returns (uint256) {\\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\\n        require(theTaskStatus == TASKPROCESSING, \\\"BridgeLogic:wrong status\\\");\\n        if (theSupporterNum > 0) store.removeAllSupporter(taskHash);\\n        theTaskStatus = TASKCANCELLED;\\n        store.setTaskInfo(taskHash, theTaskType, theTaskStatus);\\n        return theTaskStatus;\\n    }\\n\\n    function removeTask(bytes32 taskHash) external onlyCaller {\\n        store.removeTask(taskHash);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/Users/neo/code/bridge/bridge-contract/contracts/BridgeAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Container.sol\\\";\\n\\ncontract BridgeAdmin is Container {\\n    bytes32 internal constant OWNERHASH = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0;\\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\\n    bytes32 internal constant PAUSERHASH = 0x0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f;\\n    bytes32 internal constant STOREHASH = 0xe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd1680;\\n    bytes32 internal constant LOGICHASH = 0x397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f182;\\n    uint256 internal constant MAXUSERNUM = 255;\\n    bytes32[] private classHashArray;\\n\\n    uint256 internal ownerRequireNum;\\n    uint256 internal operatorRequireNum;\\n\\n    event AdminChanged(string TaskType, string class, address oldAddress, address newAddress);\\n    event AdminRequiredNumChanged(string TaskType, string class, uint256 previousNum, uint256 requiredNum);\\n    event AdminTaskDropped(bytes32 taskHash);\\n\\n    modifier validRequirement(uint ownerCount, uint _required) {\\n        require(ownerCount <= MaxItemAddressNum && _required <= ownerCount && _required > 0 && ownerCount > 0);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(itemAddressExists(OWNERHASH, msg.sender), \\\"BridgeAdmin:only use owner to call\\\");\\n        _;\\n    }\\n\\n    function initAdmin(address[] memory _owners, uint _ownerRequired) internal validRequirement(_owners.length, _ownerRequired) {\\n        for (uint i = 0; i < _owners.length; i++) {\\n            addItemAddress(OWNERHASH, _owners[i]);\\n        }\\n        addItemAddress(PAUSERHASH, _owners[0]);\\n        // we need an init pauser\\n        addItemAddress(LOGICHASH, address(0x0));\\n        addItemAddress(STOREHASH, address(0x1));\\n\\n        classHashArray.push(OWNERHASH);\\n        classHashArray.push(OPERATORHASH);\\n        classHashArray.push(PAUSERHASH);\\n        classHashArray.push(STOREHASH);\\n        classHashArray.push(LOGICHASH);\\n        ownerRequireNum = _ownerRequired;\\n        operatorRequireNum = 2;\\n    }\\n\\n    function classHashExist(bytes32 aHash) private view returns (bool) {\\n        for (uint256 i = 0; i < classHashArray.length; i++)\\n            if (classHashArray[i] == aHash) return true;\\n        return false;\\n    }\\n\\n    function getAdminAddresses(string memory class) public view returns (address[] memory) {\\n        bytes32 classHash = getClassHash(class);\\n        return getItemAddresses(classHash);\\n    }\\n\\n    function getOwnerRequireNum() public view returns (uint256) {\\n        return ownerRequireNum;\\n    }\\n\\n    function getOperatorRequireNum() public view returns (uint256) {\\n        return operatorRequireNum;\\n    }\\n\\n    function resetRequiredNum(string memory class, uint256 requiredNum) public onlyOwner returns (bool) {\\n        bytes32 classHash = getClassHash(class);\\n        require((classHash == OPERATORHASH) || (classHash == OWNERHASH), \\\"BridgeAdmin:wrong class\\\");\\n\\n        bytes32 taskHash = keccak256(abi.encodePacked(\\\"resetRequiredNum\\\", class, requiredNum));\\n        addItemAddress(taskHash, msg.sender);\\n\\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\\n            removeItem(taskHash);\\n            uint256 previousNum = 0;\\n            if (classHash == OWNERHASH) {\\n                require(getItemAddressCount(classHash) >= requiredNum, \\\"BridgeAdmin:insufficiency addresses\\\");\\n                previousNum = ownerRequireNum;\\n                ownerRequireNum = requiredNum;\\n            }\\n            else if (classHash == OPERATORHASH) {\\n                previousNum = operatorRequireNum;\\n                operatorRequireNum = requiredNum;\\n            } else {\\n                revert(\\\"BridgeAdmin:wrong class\\\");\\n            }\\n            emit AdminRequiredNumChanged(\\\"resetRequiredNum\\\", class, previousNum, requiredNum);\\n        }\\n        return true;\\n    }\\n\\n    function modifyAddress(string memory class, address oldAddress, address newAddress) internal onlyOwner returns (bool) {\\n        bytes32 classHash = getClassHash(class);\\n        bytes32 taskHash = keccak256(abi.encodePacked(\\\"modifyAddress\\\", class, oldAddress, newAddress));\\n        addItemAddress(taskHash, msg.sender);\\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\\n            replaceItemAddress(classHash, oldAddress, newAddress);\\n            emit AdminChanged(\\\"modifyAddress\\\", class, oldAddress, newAddress);\\n            removeItem(taskHash);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getClassHash(string memory class) private view returns (bytes32) {\\n        bytes32 classHash = keccak256(abi.encodePacked(class));\\n        require(classHashExist(classHash), \\\"BridgeAdmin:invalid class\\\");\\n        return classHash;\\n    }\\n\\n    function dropAddress(string memory class, address oneAddress) public onlyOwner returns (bool) {\\n        bytes32 classHash = getClassHash(class);\\n        require(classHash != STOREHASH && classHash != LOGICHASH, \\\"BridgeAdmin:wrong class\\\");\\n        require(itemAddressExists(classHash, oneAddress), \\\"BridgeAdmin:no such address exists\\\");\\n\\n        if (classHash == OWNERHASH)\\n            require(getItemAddressCount(classHash) > ownerRequireNum, \\\"BridgeAdmin:insufficiency addresses\\\");\\n\\n        bytes32 taskHash = keccak256(abi.encodePacked(\\\"dropAddress\\\", class, oneAddress));\\n        addItemAddress(taskHash, msg.sender);\\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\\n            removeOneItemAddress(classHash, oneAddress);\\n            emit AdminChanged(\\\"dropAddress\\\", class, oneAddress, oneAddress);\\n            removeItem(taskHash);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function addAddress(string memory class, address oneAddress) public onlyOwner returns (bool) {\\n        bytes32 classHash = getClassHash(class);\\n        require(classHash != STOREHASH && classHash != LOGICHASH, \\\"BridgeAdmin:wrong class\\\");\\n\\n        bytes32 taskHash = keccak256(abi.encodePacked(\\\"addAddress\\\", class, oneAddress));\\n        addItemAddress(taskHash, msg.sender);\\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\\n            addItemAddress(classHash, oneAddress);\\n            emit AdminChanged(\\\"addAddress\\\", class, oneAddress, oneAddress);\\n            removeItem(taskHash);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function dropTask(bytes32 taskHash) public onlyOwner returns (bool) {\\n        removeItem(taskHash);\\n        emit AdminTaskDropped(taskHash);\\n        return true;\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_ownerRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"TaskType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"TaskType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredNum\",\"type\":\"uint256\"}],\"name\":\"AdminRequiredNumChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"AdminTaskDropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeValue\",\"type\":\"uint256\"}],\"name\":\"DepositNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeValue\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeTo\",\"type\":\"address\"}],\"name\":\"FeeToTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"previousSwapFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"SwapFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawDoneNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawDoneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawingNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawingToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oneAddress\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_targetAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositSelector\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"selector\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isValueFirst\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_targetAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oneAddress\",\"type\":\"address\"}],\"name\":\"dropAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"dropTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filledTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"}],\"name\":\"getAdminAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLogicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorRequireNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerRequireNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStoreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"modifyAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"requiredNum\",\"type\":\"uint256\"}],\"name\":\"resetRequiredNum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isValueFirst\",\"type\":\"bool\"}],\"name\":\"setDepositSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isValueFirst\",\"type\":\"bool\"}],\"name\":\"setWithdrawSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"withdrawNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawSelector\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"selector\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isValueFirst\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bridge", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000002326e4155712b2d6bdfcd705e755518ed7f0e0760000000000000000000000009970cf961d21f255789da5f696708ec15bb1aedd", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}