{"SourceCode": "// File: contracts/Partnership/Partner.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\nabstract contract Partner  {\r\n   function getPartnerAddress () external virtual returns(address);\r\n   function setPartnerAddress (address _addr) public virtual returns(bool);\r\n   function getRatio (uint8 _type) external virtual returns(uint);\r\n   function setRatio (uint8 _type, uint _ratio) external virtual returns(bool);\r\n   function getDetails() external virtual view returns(string calldata _code, string calldata _name, address _addr, string calldata _content, uint _price, uint _return, uint r0, uint r1, uint r2, uint r3, uint r4);\r\n   function setName (string calldata _str) external virtual returns(bool);\r\n   function getName () public virtual view returns(string memory);\r\n   function setCode (string calldata _str) external virtual returns(bool);\r\n   function getCode () public virtual view returns(string memory);\r\n   function setContent (string calldata _str) external virtual returns(bool);\r\n   function getContent () public virtual view returns(string memory);\r\n   function setActionPrice (uint _value) external virtual returns(bool);\r\n   function getActionPrice () external virtual returns(uint);\r\n   function setActionReturn (uint _value) external virtual returns(bool);\r\n   function getActionReturn () external virtual returns(uint);\r\n   function setLimitAction (uint _value) external virtual returns(bool);\r\n   function getLimitAction () external virtual returns(uint);\r\n   function action (address user, address internal_w) external virtual returns(bool);\r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev ERC721 token with storage based token URI management.\r\n */\r\nabstract contract ERC721URIStorage is ERC721 {\r\n    using Strings for uint256;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n        string memory base = _baseURI();\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(base).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(base, _tokenURI));\r\n        }\r\n\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual override {\r\n        super._burn(tokenId);\r\n\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/MiningV4/ActivitiesV3.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n/// @custom:security-contact contact@getfitmining.com\r\ncontract ACTIVITIES is Ownable {\r\n\r\n\r\n    \r\n    //#####VARS-START###################\r\n    mapping ( uint8 => uint16 ) public  mining_levels_bonus;\r\n    uint segments = 20;\r\n    uint8 generic_elem_bonus = 10;\r\n    uint8 specific_elem_bonus = 30;\r\n\r\n    uint32 limit_steps = 20000;\r\n    uint32 limit_calories = 4000;\r\n    uint32 limit_distance = 16100;\r\n    uint32 limit_workouts = 120;\r\n    uint32 limit_sleep = 480;\r\n\r\n    uint32 max_shares_steps = 30000;\r\n    uint32 max_shares_calories = 5000;\r\n    uint32 max_shares_distance = 30000;\r\n    uint32 max_shares_workouts = 30000;\r\n    uint32 max_shares_sleep = 5000;\r\n\r\n    //STEPS\r\n    uint32 public daily_steps_ratio;\r\n    uint32 public intensity_steps_ratio;\r\n    mapping ( uint8 => uint16 ) public  steps_tiers_bonus;\r\n    //CALORIES\r\n    //DISTANCE\r\n    //WORKOUTS\r\n    //SLEEP\r\n    //#####VARS-END###################\r\n\r\n    constructor() Ownable() {\r\n        mining_levels_bonus[1] = 100;\r\n        mining_levels_bonus[2] = 125;\r\n        mining_levels_bonus[3] = 110;\r\n        mining_levels_bonus[4] = 125;\r\n        mining_levels_bonus[5] = 200;\r\n        //STEPS\r\n        daily_steps_ratio = 30;\r\n        intensity_steps_ratio = 100;\r\n\r\n        steps_tiers_bonus[1] = 0;\r\n        steps_tiers_bonus[2] = 10;\r\n        steps_tiers_bonus[3] = 20;\r\n        steps_tiers_bonus[4] = 30;\r\n        //CALORIES\r\n        //DISTANCE\r\n        //WORKOUTS\r\n        //SLEEP\r\n\r\n    }\r\n    //#####UTILS-START###################\r\n    function parseAttributes (uint tokenId) public pure returns (\r\n        uint _type,\r\n        uint _elem,\r\n        uint _steps,\r\n        uint _distance,\r\n        uint _calories,\r\n        uint _workouts,\r\n        uint _sleep,\r\n        uint _prim,\r\n        uint _sec\r\n    ) {\r\n        _type = tokenId % 1000000000 / 100000000;\r\n        _elem = tokenId % 100000000 / 10000000;\r\n        _steps = tokenId % 10000000 / 1000000;\r\n        _distance = tokenId % 1000000 / 100000;\r\n        _calories = tokenId % 100000 / 10000;\r\n        _workouts = tokenId % 10000 / 1000;\r\n        _sleep = tokenId % 1000 / 100;\r\n        _prim = tokenId % 100 / 10;\r\n        _sec = tokenId % 10;\r\n    }\r\n    function nftType (uint tokenId) public pure returns(uint){\r\n        (uint _type,,,,,,,,) = parseAttributes(tokenId);\r\n        return _type;\r\n    }\r\n    function getMiningLevelBonus (uint tokenId) public view returns(uint){\r\n        return mining_levels_bonus[uint8(nftType(tokenId))];\r\n    }\r\n    function setMinerLevel (uint8 _lvl, uint16 _percent ) public onlyOwner returns ( uint8 lvl, uint16 percent ) {\r\n        mining_levels_bonus[_lvl] = _percent;\r\n        lvl = _lvl; \r\n        percent = _percent;\r\n    }\r\n    function getMinerLevel (uint8 _lvl) public view returns ( uint16 ) {\r\n        return mining_levels_bonus[_lvl];\r\n    }\r\n    function setElementBonusPercent (uint8 _gen, uint8 _spec ) public onlyOwner returns ( bool ) {\r\n        generic_elem_bonus = _gen;\r\n        specific_elem_bonus = _spec;\r\n        return true;\r\n    }\r\n    function getElementBonusPercent () public view returns ( uint8 _gen, uint _spec ) {\r\n        _gen = generic_elem_bonus;\r\n        _spec = specific_elem_bonus;\r\n    }\r\n\r\n\r\n    function setSegments (uint32 _value) public onlyOwner returns ( bool ) {\r\n        segments = _value;\r\n        return true;\r\n    }\r\n    function getSegments () public onlyOwner view returns ( uint ) {\r\n        return segments;\r\n    }\r\n    function setLimitSteps (uint32 _value) public onlyOwner returns ( bool ) {\r\n        limit_steps = _value;\r\n        return true;\r\n    }\r\n    function setMaxSharesSteps (uint32 _value) public onlyOwner returns ( bool ) {\r\n        max_shares_steps = _value;\r\n        return true;\r\n    }\r\n    function setLimitCalories (uint32 _value) public onlyOwner returns ( bool ) {\r\n        limit_calories = _value;\r\n        return true;\r\n    }\r\n    function setMaxSharesCalories (uint32 _value) public onlyOwner returns ( bool ) {\r\n        max_shares_calories = _value;\r\n        return true;\r\n    }\r\n    function setLimitDistance (uint32 _value_meters) public onlyOwner returns ( bool ) {\r\n        limit_distance = _value_meters;\r\n        return true;\r\n    }\r\n    function setMaxSharesDistance (uint32 _value_meters) public onlyOwner returns ( bool ) {\r\n        max_shares_distance = _value_meters;\r\n        return true;\r\n    }\r\n    function setLimitWorkouts (uint32 _value_minutes) public onlyOwner returns ( bool ) {\r\n        limit_workouts = _value_minutes;\r\n        return true;\r\n    }\r\n    function setMaxSharesWorkouts (uint32 _value_minutes) public onlyOwner returns ( bool ) {\r\n        max_shares_workouts = _value_minutes;\r\n        return true;\r\n    }\r\n    function setLimitSleep (uint32 _value_minutes) public onlyOwner returns ( bool ) {\r\n        limit_sleep = _value_minutes;\r\n        return true;\r\n    }\r\n    function setMaxSharesSleep (uint32 _value) public onlyOwner returns ( bool ) {\r\n        max_shares_sleep = _value;\r\n        return true;\r\n    }\r\n    function getLimits () public view returns (\r\n        uint32 _steps,\r\n        uint32 _calories,\r\n        uint32 _distance,\r\n        uint32 _workouts,\r\n        uint32 _sleep\r\n    ) {\r\n        _steps = limit_steps;\r\n        _calories = limit_calories;\r\n        _distance = limit_distance;\r\n        _workouts = limit_workouts;\r\n        _sleep = limit_sleep;\r\n    }\r\n    function getMaxShares () public view returns (\r\n        uint32 _steps,\r\n        uint32 _calories,\r\n        uint32 _distance,\r\n        uint32 _workouts,\r\n        uint32 _sleep\r\n    ) {\r\n        _steps = max_shares_steps;\r\n        _calories = max_shares_calories;\r\n        _distance = max_shares_distance;\r\n        _workouts = max_shares_workouts;\r\n        _sleep = max_shares_sleep;\r\n    }\r\n\r\n    //#####UTILS-END###################\r\n\r\n\r\n    //#####BONUS-START###################\r\n    function nftStepsBonus (uint tokenId) public view returns(uint){\r\n        (, uint _elem, uint _activity,,,,,,) = parseAttributes(tokenId);\r\n        uint elem_bonus = 0;\r\n        uint activity_bonus = 0;\r\n        if(_activity == 0){\r\n            activity_bonus = 10;\r\n        }else{\r\n            activity_bonus = _activity;\r\n        }\r\n        if(_elem == 0){\r\n            elem_bonus = generic_elem_bonus;\r\n        }\r\n        if(_elem == 4){\r\n            elem_bonus = specific_elem_bonus;\r\n        }\r\n        return elem_bonus+activity_bonus;\r\n    }\r\n    function nftDistanceBonus (uint tokenId) public view returns(uint){\r\n        (, uint _elem,, uint _activity,,,,,) = parseAttributes(tokenId);\r\n        uint elem_bonus = 0;\r\n        uint activity_bonus = 0;\r\n        if(_activity == 0){\r\n            activity_bonus = 10;\r\n        }else{\r\n            activity_bonus = _activity;\r\n        }\r\n        if(_elem == 0){\r\n            elem_bonus = generic_elem_bonus;\r\n        }\r\n        if(_elem == 6){\r\n            elem_bonus = specific_elem_bonus;\r\n        }\r\n        return elem_bonus+activity_bonus;\r\n    }\r\n    function nftCaloriesBonus (uint tokenId) public view returns(uint){\r\n        (, uint _elem,,, uint _activity,,,,) = parseAttributes(tokenId);\r\n        uint elem_bonus = 0;\r\n        uint activity_bonus = 0;\r\n        if(_activity == 0){\r\n            activity_bonus = 10;\r\n        }else{\r\n            activity_bonus = _activity;\r\n        }\r\n        if(_elem == 0){\r\n            elem_bonus = generic_elem_bonus;\r\n        }\r\n        if(_elem == 7){\r\n            elem_bonus = specific_elem_bonus;\r\n        }\r\n        return elem_bonus+activity_bonus;\r\n    }\r\n    function nftWorkoutsBonus (uint tokenId) public view returns(uint){\r\n        (, uint _elem,,,, uint _activity,,,) = parseAttributes(tokenId);\r\n        uint elem_bonus = 0;\r\n        uint activity_bonus = 0;\r\n        if(_activity == 0){\r\n            activity_bonus = 10;\r\n        }else{\r\n            activity_bonus = _activity;\r\n        }\r\n        if(_elem == 0){\r\n            elem_bonus = generic_elem_bonus;\r\n        }\r\n        if(_elem == 3){\r\n            elem_bonus = specific_elem_bonus;\r\n        }\r\n        return elem_bonus+activity_bonus;\r\n    }\r\n    function nftSleepBonus (uint tokenId) public view returns(uint){\r\n        (, uint _elem,,,,, uint _activity,,) = parseAttributes(tokenId);\r\n        uint elem_bonus = 0;\r\n        uint activity_bonus = 0;\r\n        if(_activity == 0){\r\n            activity_bonus = 10;\r\n        }else{\r\n            activity_bonus = _activity;\r\n        }\r\n        if(_elem == 0){\r\n            elem_bonus = generic_elem_bonus;\r\n        }\r\n        if(_elem == 2){\r\n            elem_bonus = specific_elem_bonus;\r\n        }\r\n        return elem_bonus+activity_bonus;\r\n    }\r\n    //#####BONUS-END###################\r\n\r\n\r\n\r\n    //#####STEPS-START###################\r\n    function getLimitedSteps(uint _count) internal view returns(uint){\r\n        if(_count > limit_steps) return limit_steps;\r\n        return _count;\r\n    }\r\n    function computeIntensityStepsShares (uint tokenId, uint t1, uint t2, uint t3, uint t4 ) public view returns ( uint256 ) {\r\n        uint total_steps = ((t1*(100+steps_tiers_bonus[1])) + (t2*(100+steps_tiers_bonus[2])) + (t3*(100+steps_tiers_bonus[3])) + (t4*(100+steps_tiers_bonus[4])))/100;\r\n        return stepsComputeShares(tokenId, getLimitedSteps(total_steps), intensity_steps_ratio);\r\n    }\r\n    function computeDailyStepsShares (uint tokenId, uint dailySteps ) public view returns ( uint256 ) {        \r\n        return stepsComputeShares(tokenId, getLimitedSteps(dailySteps), daily_steps_ratio);\r\n    }\r\n    function stepsComputeShares (uint tokenId, uint steps, uint stepsRatio) public view returns ( uint256 ) {\r\n        uint incr = limit_steps/20;\r\n        uint miningLvl = (steps/incr);\r\n        uint nft_bonus = 100 + nftStepsBonus(tokenId);\r\n        uint raw_shares = (miningLvl*(max_shares_steps/segments)*stepsRatio)/100;\r\n        uint bonus_shares = (raw_shares*nft_bonus)/100;\r\n        uint final_shares = bonus_shares*getMiningLevelBonus(tokenId);\r\n        return final_shares/100;\r\n    }\r\n    \r\n    function getStepsTierLevel (uint8 _tier) public view returns ( uint16 ) {\r\n        return steps_tiers_bonus[_tier];\r\n    }\r\n    function setStepsTierLevel (uint8 _tier, uint16 _percent ) public onlyOwner returns ( uint8 tier, uint16 percent ) {\r\n        steps_tiers_bonus[_tier] = _percent;\r\n        tier = _tier; \r\n        percent = _percent;\r\n    }\r\n    function setDailyStepsRatio (uint16 _percent) public onlyOwner returns ( bool ) {\r\n        daily_steps_ratio = _percent;\r\n        return true;\r\n    }\r\n    function setIntensityStepsRatio (uint16 _percent) public onlyOwner returns ( bool ) {\r\n        intensity_steps_ratio = _percent;\r\n        return true;\r\n    }\r\n    //#####STEPS-END###################\r\n\r\n    //#####CALORIES-START###################\r\n    function getLimitedCalories(uint _count) internal view returns(uint){\r\n        if(_count > limit_calories) return limit_calories;\r\n        return _count;\r\n    }\r\n    function caloriesComputeShares (uint tokenId, uint _calories) public view returns ( uint256 ) {\r\n        uint incr = limit_calories/20;\r\n        uint miningLvl = (getLimitedCalories(_calories)/incr);\r\n        uint nft_bonus = 100 + nftCaloriesBonus(tokenId);\r\n        uint raw_shares = miningLvl*(max_shares_calories/segments);\r\n        uint bonus_shares = (raw_shares*nft_bonus)/100;\r\n        uint final_shares = bonus_shares*getMiningLevelBonus(tokenId);\r\n        return final_shares/100;\r\n    }\r\n    //#####CALORIES-END###################\r\n\r\n    //#####DISTANCE-START###################\r\n    function getLimitedDistance(uint _count) internal view returns(uint){\r\n        if(_count > limit_distance) return limit_distance;\r\n        return _count;\r\n    }\r\n    function distanceComputeShares (uint tokenId, uint _distance_meters) public view returns ( uint256 ) {\r\n        uint incr = limit_distance/20;\r\n        uint miningLvl = (getLimitedDistance(_distance_meters)/incr);\r\n        uint nft_bonus = 100 + nftDistanceBonus(tokenId);\r\n        uint raw_shares = miningLvl*(max_shares_distance/segments);\r\n        uint bonus_shares = (raw_shares*nft_bonus)/100;\r\n        uint final_shares = bonus_shares*getMiningLevelBonus(tokenId);\r\n        return final_shares/100;\r\n    }\r\n    //#####DISTANCE-END###################\r\n\r\n    //#####WORKOUTS-START###################\r\n    function getLimitedWorkouts(uint _count) internal view returns(uint){\r\n        if(_count > limit_workouts) return limit_workouts;\r\n        return _count;\r\n    }\r\n    function workoutsComputeShares (uint tokenId, uint _time_minutes) public view returns ( uint256 ) {\r\n        uint incr = limit_workouts/20;\r\n        uint miningLvl = (getLimitedWorkouts(_time_minutes)/incr);\r\n        uint nft_bonus = 100 + nftWorkoutsBonus(tokenId);\r\n        uint raw_shares = miningLvl*(max_shares_workouts/segments);\r\n        uint bonus_shares = (raw_shares*nft_bonus)/100;\r\n        uint final_shares = bonus_shares*getMiningLevelBonus(tokenId);\r\n        return final_shares/100;\r\n    }\r\n    //#####WORKOUTS-END###################\r\n\r\n    //#####SLEEP-START###################\r\n    function getLimitedSleep(uint _count) internal view returns(uint){\r\n        if(_count > limit_sleep) return limit_sleep;\r\n        return _count;\r\n    }\r\n    function sleepComputeShares (uint tokenId, uint _time_minutes) public view returns ( uint256 ) {\r\n        uint incr = limit_sleep/20;\r\n        uint miningLvl = (getLimitedSleep(_time_minutes)/incr);\r\n        uint nft_bonus = 100 + nftSleepBonus(tokenId);\r\n        uint raw_shares = miningLvl*(max_shares_sleep/segments);\r\n        uint bonus_shares = (raw_shares*nft_bonus)/100;\r\n        uint final_shares = bonus_shares*getMiningLevelBonus(tokenId);\r\n        return final_shares/100;\r\n    }\r\n    //#####SLEEP-END###################\r\n    function computeAllShares (\r\n        uint tokenId,\r\n        uint[] calldata data,\r\n        uint[] calldata workouts_list\r\n    ) public view returns ( uint ) {\r\n        workouts_list;\r\n        uint total = 0;\r\n        {\r\n            total = computeIntensityStepsShares(tokenId, data[1], data[2], data[3], data[4]) + computeDailyStepsShares(tokenId, data[0]);\r\n        }\r\n        {\r\n            total = total + distanceComputeShares(tokenId, data[5]) + caloriesComputeShares(tokenId, data[6]) + workoutsComputeShares(tokenId, data[7]) + sleepComputeShares(tokenId, data[8]);\r\n        }\r\n        {\r\n            total = (total * getMiningLevelBonus(tokenId)) / 100;\r\n        }\r\n        \r\n        return total;\r\n    }\r\n    function multiComputeAllShares(\r\n        uint[] calldata tokensId,\r\n        uint[] calldata data,\r\n        uint[] calldata workouts_list\r\n    ) public view returns ( uint ) {\r\n        uint total = 0;\r\n        for (uint256 index = 0; index < tokensId.length; index++) {\r\n            total += computeAllShares(tokensId[index], data, workouts_list);\r\n        }\r\n        return total;\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/MiningV6/AirdropsV6.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n/// @custom:security-contact contact@getfitmining.com\r\n\r\ncontract AIRDROPS is Pausable, Ownable {\r\n    mapping ( address => bool ) public  allowedContracts;\r\n    mapping(address => tokenData) public listedTokens;\r\n    address[] public allTokens;\r\n    uint public airdropedCoin;\r\n    uint public airdropedCoinPerDay;\r\n\r\n    constructor() Ownable()  {\r\n        airdropedCoinPerDay = 0;\r\n    }\r\n\r\n    struct tokenData {\r\n        address addr;\r\n        string name;\r\n        string symbol;\r\n        uint256 supply;\r\n        uint256 perDay;\r\n        uint256 claimed;\r\n        bool active;\r\n    }\r\n    struct tokenBalanceData {\r\n        address addr;\r\n        uint256 balance;\r\n    }\r\n    event tokenTransferError (address _token);\r\n    struct dailyDistribution {address _addr; string _name;uint _perDay;}\r\n    \r\n    //ALLOW\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n    modifier onlyAllowedContract (){\r\n        require(allowedContracts[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function allowContract ( address _addr ) onlyOwner public returns ( bool ) {\r\n        allowedContracts[_addr ] = true;\r\n        return true;\r\n    }\r\n    \r\n    function disallowContract ( address _addr ) onlyOwner public returns ( bool ) {\r\n        allowedContracts[_addr ] = false;\r\n        return true;\r\n    }\r\n    //ALLOW\r\n\r\n    function setAirdropedCoin(uint _amount, uint _perDay) public onlyOwner{\r\n        require(_amount <= getCoinBalance(), \"err : Amount > Balance\");\r\n        airdropedCoin = _amount;\r\n        airdropedCoinPerDay = _perDay;\r\n    }\r\n    function getAirdropedCoin() public view returns (uint _amount, uint _perDay){\r\n        _amount = airdropedCoin;\r\n        _perDay = airdropedCoinPerDay;\r\n    }\r\n    function getAirdropsPerDay() public view returns (dailyDistribution[] memory){\r\n        dailyDistribution[] memory array = new dailyDistribution[](allTokens.length);\r\n        for (uint i = 0; i < allTokens.length; i++) {\r\n            array[i] = dailyDistribution(allTokens[i],listedTokens[allTokens[i]].name, listedTokens[allTokens[i]].perDay);\r\n        }\r\n        return array;\r\n    }\r\n\r\n    function addNewTokenToList(address tkn) private{\r\n        uint arrayLength = allTokens.length;\r\n        bool found=false;\r\n        for (uint i=0; i<arrayLength; i++) {\r\n            if(allTokens[i]==tkn){\r\n                found=true;\r\n                break;\r\n            }\r\n        }\r\n        if(!found){\r\n            allTokens.push(tkn);\r\n        }\r\n    }\r\n    function addAirdrop(address _addr,uint _perDay,bool _active)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        ERC20 token = ERC20(_addr);\r\n        string memory name = token.name();\r\n        string memory symbol = token.symbol();\r\n        uint256 balance = token.balanceOf(address(this));\r\n        listedTokens[_addr] = tokenData(_addr, name, symbol, balance , _perDay, 0, _active);\r\n        addNewTokenToList(_addr);\r\n        return true;\r\n    }\r\n    function setAirdropPerDay(address _addr,uint _perDay) public onlyOwner {\r\n        require(listedTokens[_addr].addr != address(0), \"No airdrop found with this token\");\r\n        tokenData storage _airdrop = listedTokens[_addr];\r\n        _airdrop.perDay = _perDay;\r\n    }\r\n    function deactivateAirdrop(address _addr) public onlyOwner whenNotPaused returns (bool) {\r\n        listedTokens[_addr].active = false;\r\n        return true;\r\n    }\r\n    function activateAirdrop(address _addr) public onlyOwner whenNotPaused returns (bool) {\r\n        listedTokens[_addr].active = true;\r\n        return true;\r\n    }\r\n    function removeAirdrop(address _addr) public onlyOwner whenNotPaused returns (bool) {\r\n        delete listedTokens[_addr];\r\n        return true;\r\n    }\r\n\r\n    function getTokenData(address addr)\r\n        public\r\n        view\r\n        returns (\r\n            address _addr,\r\n            string  memory _name,\r\n            string memory _symbol,\r\n            uint256 _supply,\r\n            uint256 _perDay,\r\n            uint256 _claimed,\r\n            bool _active\r\n        )\r\n    {\r\n        _addr = listedTokens[addr].addr;\r\n        _name = listedTokens[addr].name;\r\n        _symbol = listedTokens[addr].symbol;\r\n        _supply = listedTokens[addr].supply;\r\n        _perDay = listedTokens[addr].perDay;\r\n        _claimed = listedTokens[addr].claimed;\r\n        _active = listedTokens[addr].active;\r\n    }    \r\n    function getBalances () public view returns (tokenBalanceData[] memory) {\r\n        uint tokensNbr = allTokens.length;\r\n        tokenBalanceData[] memory balances = new tokenBalanceData[](tokensNbr);\r\n        for (uint256 index = 0; index < tokensNbr; index++) {\r\n            balances[index] = tokenBalanceData(allTokens[index], tokenBalance(allTokens[index]));\r\n        }\r\n        return balances;\r\n    }\r\n    function getAllTokens() public view returns (address[] memory) {\r\n        return allTokens;\r\n    }\r\n    function claimTokens (address addr, uint32 ratio) public payable whenNotPaused onlyAllowedContract returns (bool) {\r\n        require(ratio > 0, \"zero shares error\");\r\n        uint32 ratio_multiplier = 1000000;\r\n        for (uint256 index = 0; index < allTokens.length; index++) {\r\n            tokenData storage tkn = listedTokens[allTokens[index]];\r\n            if(tkn.active == true){\r\n                uint256 amount = ((tkn.perDay * ratio * (10**18))/ratio_multiplier)/10**18;\r\n                if(amount>0){\r\n                    try ERC20(tkn.addr).transfer(addr, amount){\r\n                        tkn.claimed += amount;\r\n                    }catch{\r\n                        emit tokenTransferError(tkn.addr);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(airdropedCoinPerDay>0 && airdropedCoin> 0){\r\n            uint256 coinAmount = (airdropedCoinPerDay * ratio)/ratio_multiplier;\r\n            address payable to = payable(addr);\r\n            (bool success, ) = to.call{value: coinAmount}(\"\");\r\n            if (!success) {\r\n            }            \r\n        }\r\n        return true;\r\n    }\r\n    function claimTokens (address addr, uint32 ratio, address[] calldata _tkns) public payable whenNotPaused onlyAllowedContract returns (bool) {\r\n        require(ratio > 0, \"zero shares error\");\r\n        uint32 ratio_multiplier = 1000000;\r\n        for (uint256 index = 0; index < allTokens.length; index++) {\r\n            tokenData storage tkn = listedTokens[allTokens[index]];\r\n            bool isIncluded = false;\r\n            if(_tkns.length == 0){isIncluded == true;}else{\r\n                for (uint256 i = 0; i < _tkns.length; i++) {\r\n                    if (_tkns[i] == tkn.addr) {\r\n                        isIncluded = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if(tkn.active == true && isIncluded){\r\n                uint256 amount = ((tkn.perDay * ratio * (10**18))/ratio_multiplier)/10**18;\r\n                if(amount>0){\r\n                    try ERC20(tkn.addr).transfer(addr, amount){\r\n                        tkn.claimed += amount;\r\n                    }catch{\r\n                        emit tokenTransferError(tkn.addr);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(airdropedCoinPerDay>0 && airdropedCoin> 0){\r\n            uint256 coinAmount = (airdropedCoinPerDay * ratio)/ratio_multiplier;\r\n            address payable to = payable(addr);\r\n            (bool success, ) = to.call{value: coinAmount}(\"\");\r\n            if (!success) {\r\n            }            \r\n        }\r\n        return true;\r\n    }\r\n\r\n    function removeAirdropFromList(address _tkn) public {\r\n        address[] storage array = allTokens;\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if (array[i] == _tkn) {\r\n                if (i != array.length - 1) {\r\n                    array[i] = array[array.length - 1];\r\n                }\r\n                array.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Coin\r\n    function depositCoin() public payable returns(uint){\r\n        return msg.value;\r\n    }\r\n    function getCoinBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n    function withdrawCoin() public payable onlyOwner {\r\n        address payable to = payable(msg.sender);\r\n        to.transfer(getCoinBalance());\r\n    }\r\n    function withdrawCoinAmount(uint _amount) public payable onlyOwner {\r\n        require(_amount <= getCoinBalance(), \"err : Amount > Balance\");\r\n        address payable to = payable(msg.sender);\r\n        to.transfer(getCoinBalance());\r\n    }\r\n    function tokenBalance (address addr) public view returns (uint256) {\r\n        return ERC20(addr).balanceOf(address(this));\r\n    }\r\n    function transferToken (address _tokenAddress, address addr, uint amount) public onlyOwner {\r\n        ERC20(_tokenAddress).transfer(addr, amount);\r\n    }\r\n    function withdrawToken (address _tokenAddress) public onlyOwner {\r\n        ERC20(_tokenAddress).transfer(msg.sender, ERC20(_tokenAddress).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n// File: contracts/Partnership/PartnershipMasterV2.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @custom:security-contact contact@getfitmining.com\r\ncontract PARTNERSHIP_MASTER is Pausable, Ownable {\r\n\r\n    mapping ( address => bool ) private  allowedContracts;\r\n\r\n    mapping ( address => bool ) public  partners;\r\n    mapping ( string => address ) public  partnersCodes;\r\n    mapping ( address => address ) public  affiliations;\r\n    mapping ( address => uint ) public  partnersCount;\r\n    mapping ( address => uint ) public  claims;\r\n    address[] public allPartners;\r\n    uint public remainingClaims;\r\n\r\n    bytes32 private tknHash;\r\n    bool private active;\r\n\r\n\r\n    constructor() Ownable() {\r\n        active = true;\r\n    }\r\n\r\n    \r\n    function setPartnerCode (address partnerContract, string calldata _code) public onlyOwner returns (bool){\r\n        partnersCodes[_code] = partnerContract;\r\n        return true;\r\n    }\r\n        \r\n    function activatePartner (address partnerContract) public onlyOwner returns (bool){\r\n        partners[partnerContract] = true;\r\n        addNewPartnerToList(partnerContract);\r\n        return true;\r\n    }\r\n    function deactivatePartner (address partnerContract) public onlyOwner returns (bool){\r\n        partners[partnerContract] = false;\r\n        return false;\r\n    }\r\n\r\n    function getAffiliation (address user) public view returns (address){\r\n        return affiliations[user];\r\n    }\r\n    function setAffiliation (address user, address partner) public onlyOwner returns (bool){\r\n        affiliations[user] = partner;\r\n        partnersCount[partner] = partnersCount[partner] + 1;\r\n        return true;\r\n    }\r\n    function setAffiliationInternal (address user, address partner) internal returns (bool){\r\n        affiliations[user] = partner;\r\n        partnersCount[partner] = partnersCount[partner] + 1;\r\n        return true;\r\n    }\r\n    function removeAffiliation (address user) public onlyOwner returns (bool){\r\n        partnersCount[affiliations[user]] = partnersCount[affiliations[user]] - 1;\r\n        delete affiliations[user];\r\n        return true;\r\n    }\r\n    function getUnitClaim (address _partnerAddress) public view returns (uint){        \r\n        return claims[_partnerAddress];\r\n    }\r\n    function setUnitClaim (address _partnerAddress, uint _value) public onlyOwner returns (bool){        \r\n        claims[_partnerAddress] = _value;\r\n        return true;\r\n    }\r\n    //PARTNER///\r\n\r\n    function getPartnerAddressByCode (string calldata code) public view returns (address) {\r\n        return partnersCodes[code];\r\n    }\r\n    function startPartnerAction (string calldata _tkn, address user, string calldata _code) public payable whenNotPaused returns (bool) {\r\n        require(partners[partnersCodes[_code]] == true, \"Code not found\");\r\n        require(affiliations[user] == address(0), \"Promo code already activated\");\r\n        require(msg.value >= Partner(partnersCodes[_code]).getActionPrice(), \"Not enough BNB sent; check fees!\");\r\n        require(keccak256(abi.encodePacked(_tkn)) == tknHash, \"Application not allowed\");\r\n        Partner(partnersCodes[_code]).action(user, msg.sender);\r\n        setAffiliationInternal(user, partnersCodes[_code]);\r\n        uint _com = Partner(partnersCodes[_code]).getActionReturn();\r\n        claims[partnersCodes[_code]] = claims[partnersCodes[_code]] + _com;\r\n        remainingClaims = remainingClaims + _com;\r\n        return true;\r\n    }\r\n\r\n    function getPartnerRatioByUser (uint8 _type, address userAddress) public returns(uint){    \r\n        return Partner(affiliations[userAddress]).getRatio(_type);\r\n    }\r\n    function getPartnerRatioByPartnerContract (uint8 _type, address partnerAddress) public returns(uint){    \r\n        return Partner(partnerAddress).getRatio(_type);\r\n    }\r\n    //PARTNER///\r\n\r\n    function logPartnerRoyalties (address _partner) public payable onlyAllowedContract{\r\n        claims[_partner] = claims[_partner] + msg.value;\r\n        remainingClaims = remainingClaims + msg.value;\r\n    }\r\n\r\n\r\n    //ALLOW\r\n    function setTknHash (string memory _str) public onlyOwner returns (bool){\r\n        tknHash = keccak256(abi.encodePacked(_str));\r\n        return true;\r\n    }\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n    modifier onlyAllowedContract (){\r\n        require(allowedContracts[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function allowContract ( address _addr ) onlyOwner public returns ( bool ) {\r\n        allowedContracts[_addr ] = true;\r\n        return true;\r\n    }\r\n    \r\n    function disallowContract ( address _addr ) onlyOwner public returns ( bool ) {\r\n        allowedContracts[_addr ] = false;\r\n        return true;\r\n    }\r\n    \r\n    //ALLOW\r\n    \r\n\r\n\r\n\r\n    // ##################################\"\r\n    // receive() external payable{}\r\n    //ERC20\r\n    function tokenBalance (address addr) public view returns (uint256) {\r\n        return ERC20(addr).balanceOf(address(this));\r\n    }\r\n    \r\n    function transferToken (address tokenAddress, address addr, uint amount) public onlyOwner returns (uint256) {\r\n        ERC20(tokenAddress).transfer(addr, amount);\r\n        return ERC20(tokenAddress).balanceOf(address(this));\r\n    }\r\n    //ERC20\r\n    // ##################################\"\r\n    function getBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n    function getNetBalance() public view returns(uint) {\r\n        return address(this).balance - remainingClaims;\r\n    }\r\n    function withdraw() public payable onlyOwner {\r\n        address payable to = payable(msg.sender);\r\n        to.transfer(getBalance());\r\n    }\r\n    function withdrawNet() public payable onlyOwner {\r\n        address payable to = payable(msg.sender);\r\n        to.transfer(getNetBalance());\r\n    }\r\n    function withdrawAmount(uint _amount) public payable onlyOwner {\r\n        require(_amount <= getBalance(), \"err : Amount > Balance\");\r\n        address payable to = payable(msg.sender);\r\n        to.transfer(getBalance());\r\n    }\r\n    // ##################################\"\r\n    function payout(address tokenAddress) public onlyOwner returns (bool) {\r\n        uint net = ERC20(tokenAddress).balanceOf(address(this));\r\n        ERC20(tokenAddress).transfer(owner(), net);\r\n        return true;\r\n    }\r\n\r\n    function payoutValue(address tokenAddress, uint256 value) public onlyOwner returns (bool) {\r\n        ERC20(tokenAddress).transfer(owner(), value);\r\n        return true;\r\n    }\r\n\r\n    function claim(address partnerContract) public payable {\r\n        require(claims[partnerContract] > 0, \"Nothing to claim\");\r\n        address payable to = payable(Partner(partnerContract).getPartnerAddress());\r\n        to.transfer(claims[partnerContract]);\r\n        claims[partnerContract] = 0;\r\n        remainingClaims = remainingClaims - claims[partnerContract];\r\n    }\r\n\r\n\r\n    function addNewPartnerToList(address _partnerAddress) private{\r\n        uint arrayLength = allPartners.length;\r\n        bool found=false;\r\n        for (uint i=0; i<arrayLength; i++) {\r\n            if(allPartners[i]==_partnerAddress){\r\n                found=true;\r\n                break;\r\n            }\r\n        }\r\n        if(!found){\r\n            allPartners.push(_partnerAddress);\r\n        }\r\n    }\r\n    function addPartnerList(address _partnerAddress) onlyOwner public returns(bool){\r\n        allPartners.push(_partnerAddress);\r\n        return true;\r\n    }\r\n    function clearPartnerList() onlyOwner public returns(bool){\r\n        delete allPartners;\r\n        return true;\r\n    }\r\n\r\n    function claimAllPArtners () public onlyOwner payable returns (bool) {\r\n        for (uint256 index = 0; index < allPartners.length; index++) {\r\n            claim(allPartners[index]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/token/VAB.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @custom:security-contact contact@getfitmining.com\r\ncontract VAB is ERC721, ERC721Enumerable, ERC721URIStorage, Pausable, Ownable {\r\n\r\n    mapping ( address => bool ) private  allowedContracts;\r\n    mapping ( uint256 => address ) public  rents;\r\n\r\n    constructor() ERC721(\"Virtual Activity Device\", \"VAB\") {}\r\n\r\n    event Minted( address indexed _address , uint256 tokenId );\r\n\r\n    function _baseURI() internal pure override returns (string memory) {\r\n        return \"https://getfitmining.com/nft/\";\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function safeMint(address to, uint8 _type)\r\n        public\r\n        onlyAllowedContract\r\n        returns (uint256)\r\n    {\r\n        uint256 tokenId =  genTid(_type);\r\n        _safeMint(to, tokenId);\r\n        _setTokenURI(tokenId, uint2str(tokenId));\r\n        emit Minted(to, tokenId);\r\n        return tokenId;\r\n    }\r\n\r\n    // function specialMint(address to, uint256 tokenId)\r\n    //     public\r\n    //     onlyOwner\r\n    //     returns (uint256)\r\n    // {\r\n    //     require(tokenId >= 100000000 && tokenId <= 999999999, \"error\");\r\n    //     _safeMint(to, tokenId);\r\n    //     _setTokenURI(tokenId, uint2str(tokenId));\r\n    //     emit Minted(to, tokenId);\r\n    //     return tokenId;\r\n    // }\r\n\r\n\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\r\n        internal\r\n        whenNotPaused\r\n        override(ERC721, ERC721Enumerable)\r\n    {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n\r\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n    //**** */\r\n    modifier onlyAllowedContract (){\r\n        require(allowedContracts[msg.sender] == true);\r\n        _;\r\n    }\r\n    function allowContract ( address _addr ) onlyOwner public returns ( bool ) {\r\n        allowedContracts[_addr ] = true;\r\n        return true;\r\n    }\r\n    \r\n    function disallowContract ( address _addr ) onlyOwner public returns ( bool ) {\r\n        allowedContracts[_addr ] = false;\r\n        return true;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721Enumerable)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    //******* */\r\n    //**** */    \r\n    \r\n    function rent ( uint256 tokenId, address _addr ) public returns ( bool ) {\r\n        require(ownerOf(tokenId) == msg.sender);\r\n        rents[tokenId ] = _addr;\r\n        return true;\r\n    }\r\n\r\n    function unrent ( uint256 tokenId) public returns ( bool ) {\r\n        delete rents[tokenId ];\r\n        return true;\r\n    }\r\n    \r\n\r\n    function genTid(uint8 _type) private view returns (uint) {\r\n        require((_type > 0 && _type <= 9), \"error: type out of range\");\r\n        uint nbr = 99999999;\r\n        uint _rd = uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, nbr)));\r\n        return (_type*100000000) + _rd%100000000;\r\n    }\r\n\r\n    function uint2str(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n// File: contracts/MiningV4/MiningDock.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @custom:security-contact contact@getfitmining.com\r\ncontract DOCK is Pausable, Ownable, IERC721Receiver {\r\n\r\n    mapping ( address => bool ) private  allowedContracts;\r\n    bool private active;\r\n\r\n    uint stakeFees;\r\n    uint seed = 0;\r\n    mapping (uint => tokenData) public Tokens;\r\n    mapping(address => uint[]) public userDocks;\r\n    mapping(address => uint) public userSlots;\r\n    uint public docksNumber;\r\n    uint public maxSlots;\r\n    mapping (uint => uint) public prices;\r\n    mapping (uint => uint) public pricesToken;\r\n    mapping (uint => uint) public slotCurrency;\r\n\r\n    bytes32 private tknHash;\r\n    uint256 public total;\r\n    bool public partCom;\r\n\r\n\r\n    VAB public nftCon;\r\n    PARTNERSHIP_MASTER public partnershipCon;\r\n    ERC20 public token20;\r\n\r\n    constructor() Ownable() {\r\n        active = true;\r\n        total = 0;\r\n        maxSlots = 4;\r\n        nftCon = VAB(0x95C1B791d5C76ef25eE87815B8FaC68182eD3880);\r\n        token20 = ERC20(0xDD2D2521d939c63360d19A6397ccD542759B2740);\r\n        partnershipCon = PARTNERSHIP_MASTER(0x516b4d8286b90B34591E0B9b7CB9204f6ef3E9F1);\r\n        stakeFees = 3000000000000000;\r\n    }\r\n\r\n    struct tokenData {address owner;address int_wallet; uint32 _days;}\r\n    struct intWalletData {uint256 tokenId;address owner;uint32 _days;}\r\n    struct userDock {uint _userSlots;uint[] _userDock;}\r\n    struct configData {uint _maxSlots;uint _stakeFees; uint[] _currencies; uint[] prices; uint[] pricesToken;}\r\n\r\n    event stake(uint tokenId,address owner,uint32 date);\r\n    event unstake(uint tokenId,address owner);\r\n\r\n    //Prices Fees Config    \r\n    function setSlotCurrency(uint _slotNumber, uint _currency) public onlyOwner {\r\n        require(_currency<3, \"Invalid currency\");\r\n        slotCurrency[_slotNumber] = _currency;\r\n    }\r\n    function setPrice(uint _slotNumber, uint _price) public onlyOwner {\r\n        prices[_slotNumber] = _price;\r\n    }\r\n    function setPriceToken(uint _slotNumber, uint _price) public onlyOwner {\r\n        pricesToken[_slotNumber] = _price;\r\n    }\r\n    function setFees (uint _amount) public onlyOwner returns (bool) {\r\n        stakeFees = _amount;\r\n        return true;\r\n    }\r\n    function getFees () public view returns (uint) {\r\n        return stakeFees;\r\n    }\r\n    function setMaxSlots (uint _nbr) public onlyOwner {\r\n        maxSlots = _nbr;\r\n    }\r\n\r\n    function getConfig() public view returns (configData memory) {\r\n        uint[] memory _currencies = new uint[](maxSlots-1);\r\n        uint[] memory _prices = new uint[](maxSlots-1);\r\n        uint[] memory _pricesToken = new uint[](maxSlots-1);\r\n        for (uint256 i = 2; i <= maxSlots; i++) {\r\n            _currencies[i-2] = slotCurrency[i];\r\n            _prices[i-2] = prices[i];\r\n            _pricesToken[i-2] = pricesToken[i];\r\n        }\r\n        configData memory data = configData(\r\n            maxSlots,\r\n            stakeFees,\r\n            _currencies,\r\n            _prices,\r\n            _pricesToken\r\n        );\r\n        return data;\r\n    }\r\n    function getUserDock(address user) public view returns (userDock memory) {\r\n        return userDock(\r\n            userSlots[user],\r\n            userDocks[user]\r\n        );\r\n    }\r\n    //Prices Fees Config//\r\n\r\n    function appStakeNft(string memory _tkn, uint256 tokenId, address owner, uint32 _days) public payable returns (bool) {\r\n        require(keccak256(abi.encodePacked(_tkn)) == tknHash, \"App not allowed\");\r\n        if(userSlots[owner] == 0) userSlots[owner] = 1;\r\n        require(msg.value >= stakeFees, \"Not enough BNB, check fees!\");\r\n        require(userDocks[owner].length < userSlots[owner], \"Out of slots\");\r\n        address _owner = nftCon.ownerOf(tokenId);\r\n        require(owner == _owner, \"Owner not found\");\r\n        require(_owner != address(this), \"Dock full\");\r\n        if(partCom){\r\n            partnersCom(0, stakeFees, owner);\r\n        }\r\n        return _holdItem(owner, msg.sender, tokenId, _days);\r\n    }\r\n    function appUnstakeNft (string memory _tkn, uint tknId) public whenNotPaused returns (bool) {\r\n        require(keccak256(abi.encodePacked(_tkn)) == tknHash, \"App not allowed\");\r\n        return _releaseItemOwner(tknId);\r\n    }\r\n\r\n    function _holdItem (address from, address intWallet, uint256 tokenId, uint32 _days) private returns (bool){\r\n        ERC721(nftCon).safeTransferFrom(from, address(this), tokenId);\r\n        Tokens[tokenId] = tokenData(from, intWallet,_days);\r\n        userDocks[from].push(tokenId);\r\n        emit stake(\r\n            tokenId,\r\n            from,\r\n            _days\r\n        );\r\n        return true;\r\n    }\r\n    function _releaseItemOwner (uint tokenId) private returns (bool){\r\n        address owner = Tokens[tokenId].owner;\r\n        if(tokenId > 0){\r\n            ERC721(nftCon).safeTransferFrom(address(this), owner, tokenId);\r\n            removeItemFromDock(owner, tokenId);            \r\n            emit unstake(\r\n                tokenId,\r\n                owner\r\n            );\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addSlotToDock(string memory _tkn, address owner, uint32 _currency) public payable {\r\n        // currency [0, 1, 2]  -  Coin, Token, both\r\n        if(userSlots[owner] == 0){\r\n            userSlots[owner] = 1;\r\n            docksNumber += 1;\r\n        }\r\n        require(keccak256(abi.encodePacked(_tkn)) == tknHash, \"App not allowed\");\r\n        require(userSlots[owner] <= maxSlots, \"Max slots reached\");\r\n        require(_currency == 0 || _currency == 1, \"Invalid currency\");\r\n        slotCreationFees(msg.value, owner, _currency);\r\n        userSlots[owner] += 1;\r\n\r\n    }\r\n    function slotCreationFees(uint amount, address owner, uint32 _currency) private returns (bool) {\r\n        require(slotCurrency[userSlots[owner]+1] == 2 || slotCurrency[userSlots[owner]+1] == _currency, \"Currency not available for this slot\");\r\n        if(_currency == 1){\r\n            require(pricesToken[userSlots[owner]+1]>0, \"Price not set yet\");\r\n            require(token20.balanceOf(msg.sender) >= pricesToken[userSlots[owner]+1], \"Not enough funds\");\r\n            token20.transferFrom(msg.sender, address(this), pricesToken[userSlots[owner]+1]);\r\n            return true;\r\n        } else if(_currency == 0){\r\n\r\n            require(prices[userSlots[owner]+1]>0, \"Price not set yet\");\r\n            require(amount >= prices[userSlots[owner]+1], \"Not enough funds\");\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n    function isOwnerOfAll(address _owner, uint[] calldata _nfts) public view returns (bool) {\r\n        uint owned = 0;\r\n        for (uint256 i = 0; i < _nfts.length; i++) {\r\n            if(Tokens[_nfts[i]].owner == _owner){\r\n                owned += 1;\r\n            }\r\n        }\r\n        return _nfts.length == owned;\r\n    }\r\n    function ownerOf (uint256 tokenId) public view returns (address _owner, address _int_wallet ,uint32 _day, uint32 _month, uint32 _year, uint32 _days){\r\n        _owner =  nftCon.ownerOf(tokenId);\r\n        _int_wallet =  address(this);\r\n        _day = 0;\r\n        _month = 0;\r\n        _year = 0;\r\n        _days = 0;\r\n    }\r\n    function contains (uint[] storage list, uint element) internal view returns (bool) {\r\n        bool exists = false;    \r\n        for (uint i=0; i < list.length; i++) {\r\n            if (element == list[i]) {\r\n                exists = true;\r\n                break;\r\n            }\r\n        }\r\n        return exists;\r\n    }\r\n\r\n    //ADMIN\r\n\r\n    function adminUnstake (uint tokenId) public onlyOwner {\r\n        _releaseItemOwner(tokenId);\r\n    }\r\n    function adminUnstakeAll () public onlyOwner {\r\n        uint nbr = ERC721(nftCon).balanceOf(address(this));\r\n        for (uint256 index = 0; index < nbr; index++) {\r\n            uint id = nftCon.tokenOfOwnerByIndex(address(this), index);\r\n            _releaseItemOwner(id);\r\n        }\r\n    }\r\n    function adminUnstakeNbr (uint nbr) public onlyOwner {\r\n        for (uint256 index = 0; index < nbr; index++) {\r\n            uint id = nftCon.tokenOfOwnerByIndex(address(this), index);\r\n            _releaseItemOwner(id);\r\n        }\r\n    }\r\n    function adminTransferNft (address wallet, uint tokenId) public onlyOwner {\r\n        address owner = Tokens[tokenId].owner; \r\n        ERC721(nftCon).safeTransferFrom(address(this), wallet, tokenId);        \r\n        removeItemFromDock(owner, tokenId);\r\n    }\r\n    \r\n    //ADMIN\r\n    function removeItemFromDock(address owner, uint item) internal returns (bool) {\r\n        uint l = userDocks[owner].length;\r\n        if(l == 1){\r\n            userDocks[owner].pop();\r\n            return true;\r\n        }\r\n        for (uint i = 0; i < l; i++) {\r\n            if (userDocks[owner][i] == item) {\r\n                userDocks[owner][i] = userDocks[owner][l-1];\r\n                userDocks[owner].pop();\r\n                delete Tokens[item];\r\n                total = total - 1;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function setPartCom(bool _value) public onlyOwner {\r\n        partCom = _value;\r\n    }\r\n    function partnersCom (uint8 _type, uint _rawFee, address _owner) private  {\r\n        address affil = partnershipCon.getAffiliation(_owner);\r\n        if(affil != address(0)){\r\n            uint _ratio = Partner(affil).getRatio(_type);\r\n            uint rlty = (_rawFee * _ratio)/100;\r\n            partnershipCon.logPartnerRoyalties{value: rlty}(affil);\r\n        }\r\n    }\r\n    //ALLOW\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n    modifier onlyAllowedContract (){\r\n        require(allowedContracts[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function allowContract ( address _addr ) onlyOwner public returns ( bool ) {\r\n        allowedContracts[_addr ] = true;\r\n        return true;\r\n    }\r\n    \r\n    function disallowContract ( address _addr ) onlyOwner public returns ( bool ) {\r\n        allowedContracts[_addr ] = false;\r\n        return true;\r\n    }\r\n    //ALLOW\r\n    function setNftContract (address _addr) public onlyOwner returns (bool) {\r\n        nftCon = VAB(_addr);\r\n        return true;\r\n    }\r\n    \r\n    function adminTransfer(uint256 tokenId, address new_owner) public onlyOwner returns(bool) {\r\n        ERC721(nftCon).safeTransferFrom(address(this), new_owner, tokenId);\r\n        return true;\r\n    }\r\n    //ERC20\r\n    function setTokenAddress(address _addr) public onlyOwner returns (bool) {\r\n        token20 = ERC20(_addr);\r\n        return true;\r\n    }\r\n    function thisTokenBalance () public view returns (uint256) {\r\n        return token20.balanceOf(address(this));\r\n    }\r\n    \r\n    function tokenBalance (address addr) public view returns (uint256) {\r\n        return ERC20(addr).balanceOf(address(this));\r\n    }\r\n    \r\n    function transferToken (address _tokenAddress, address addr, uint amount) public onlyOwner returns (uint256) {\r\n        ERC20(_tokenAddress).transfer(addr, amount);\r\n        return ERC20(_tokenAddress).balanceOf(address(this));\r\n    }\r\n    //ERC20   \r\n\r\n    //BNB   \r\n    function getBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n    function withdraw() public payable onlyOwner {\r\n        address payable to = payable(msg.sender);\r\n        to.transfer(getBalance());\r\n    }\r\n    function withdrawAmount(uint _amount) public payable onlyOwner {\r\n        require(_amount <= getBalance(), \"err : Amount > Balance\");\r\n        address payable to = payable(msg.sender);\r\n        to.transfer(getBalance());\r\n    }    \r\n\r\n    function setTknHash (string memory _str) public onlyOwner returns (bool){\r\n        tknHash = keccak256(abi.encodePacked(_str));\r\n        return true;\r\n    }\r\n    // ##################################\"\r\n    // receive() external payable{}\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: contracts/MiningV6/MiningV5.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @custom:security-contact contact@getfitmining.com\r\ncontract MINING is Pausable, Ownable {\r\n    mapping ( address => bool ) public  allowedContracts;\r\n    mapping ( uint256 => uint256 ) public  totalDailyShares;\r\n    mapping ( bytes => shareData ) public  submitted;\r\n    mapping ( bytes => shareData ) public  claimed;\r\n    mapping ( address => submittedData[] ) public  submitterByDock;\r\n    mapping ( address => mapping(uint => bool) ) public  submittedByOwner;\r\n    mapping (bytes => bool) public usedData;\r\n    mapping (uint => uint) public dailySubmissions;\r\n\r\n    uint private startingDate;\r\n    uint private daysBuffer;\r\n\r\n    uint public maxClaimDays;\r\n    bool public checkUnique;\r\n\r\n    uint miningFees = 530000000000000;\r\n    uint submissionFees = 530000000000000;\r\n    bool public royActive;\r\n\r\n    bytes32 private tknHash;\r\n\r\n    DOCK public dockCon;\r\n    AIRDROPS public airdropsCon;\r\n    ACTIVITIES public activitiesCon;\r\n    IRoyalties public royaltiesCon;\r\n    \r\n\r\n    constructor(address _dock, address _airdrops, address _activities) Ownable() {\r\n        dockCon = DOCK(_dock);\r\n        airdropsCon = AIRDROPS(_airdrops);\r\n        activitiesCon = ACTIVITIES(_activities);\r\n        daysBuffer = 3;\r\n        royActive = false;\r\n        maxClaimDays = 10;\r\n    }\r\n    \r\n    struct shareData{address _owner;uint shares;uint day;}\r\n\r\n    struct submittedData{uint shares;uint _day;}\r\n    struct submittedPerDay{uint _day;uint _nbr;uint _shares;}\r\n    struct removeSubmitData{uint tokenId;uint index;}\r\n    \r\n    event submitEvent(uint _shares,address _owner,uint _round);\r\n    event claimEvent(address _owner,uint _day,uint _totalShares,uint _totalDays);\r\n\r\n\r\n    //ALLOW--PAUSE--START\r\n    function pause() public onlyOwner {_pause();}\r\n\r\n    function unpause() public onlyOwner {_unpause();}\r\n    function setRoyActive(bool _value) public onlyOwner {royActive = _value;}\r\n    modifier onlyAllowedContract (){\r\n        require(allowedContracts[msg.sender] == true);\r\n        _;\r\n    }\r\n    function allowContract ( address _addr ) onlyOwner public {allowedContracts[_addr ] = true;}\r\n    function disallowContract ( address _addr ) onlyOwner public  {allowedContracts[_addr ] = false;}\r\n    //ALLOW--PAUSE--END\r\n    \r\n    function submit (string memory _tkn,address owner,uint[] calldata tokensId,uint256[] calldata data,uint[] calldata workouts,uint _day) public payable whenNotPaused returns ( bool ) {\r\n        // DATA [ daily_steps, steps_t1, steps_t2, steps_t3, steps_t4, distance, calories,  workouts, sleep]\r\n        require( isValidDateToSubmit(_day), \"Submission outdated\");\r\n        require(msg.value >= (submissionFees*tokensId.length), \"Not enough BNB sent; check fees!\");\r\n        require(keccak256(abi.encodePacked(_tkn)) == tknHash, \"App not allowed\");\r\n        require(dockCon.isOwnerOfAll(owner, tokensId), \"Invalid submitter\");\r\n        bytes memory track = trackId(owner, _day);\r\n        require(!isAlreadySubmitted(owner, _day), \"Already submitted\");\r\n        bytes memory fPrint = dataFprint(_day,data,workouts);\r\n        require(checkUnique == false || usedData[fPrint] == false, \"Data already submitted\");\r\n        shareData memory fin_data = shareData(owner, activitiesCon.multiComputeAllShares(tokensId, data, workouts), _day);\r\n        totalDailyShares[_day] = totalDailyShares[_day] + fin_data.shares;\r\n        submitted[track] = fin_data;\r\n        submitterByDock[owner].push(submittedData(fin_data.shares, _day));\r\n        submittedByOwner[owner][_day] = true;\r\n        usedData[fPrint] = true;\r\n        dailySubmissions[_day] += 1;\r\n        if(royActive){\r\n            registerRoyaltyCom(1, submissionFees, owner);\r\n        }\r\n        emit submitEvent(fin_data.shares,owner,_day);\r\n        return true;\r\n    }\r\n\r\n    function _claim (address _owner) private returns ( uint32 ) {\r\n        uint32 ratio_multiplier = 1000000;\r\n        uint n = submitterByDock[_owner].length;\r\n        if(n > maxClaimDays ) n = maxClaimDays;\r\n        uint totalShares = 0;\r\n        uint32 totalRatio = 0;\r\n        uint totalDays = 0;\r\n        for (uint256 i = n; i > 0; i--) {\r\n            uint index = i -1;\r\n            submittedData storage _sbn = submitterByDock[_owner][index];\r\n            if(isValidDateToMine(_sbn._day)){\r\n                totalShares += submitterByDock[_owner][index].shares;\r\n                uint32 ratio = uint32((submitterByDock[_owner][index].shares*ratio_multiplier)/totalDailyShares[_sbn._day]);\r\n                totalRatio = totalRatio + ratio;\r\n                totalDays += 1;\r\n                bytes memory track = trackId(_owner, _sbn._day);\r\n                claimed[track] = submitted[track];\r\n                delete submitted[track]; \r\n                removeFromSubmitterByNft(_owner, index);\r\n            }\r\n        }\r\n        if(royActive){\r\n            registerRoyaltyCom(2, miningFees, _owner);\r\n        }\r\n        emit claimEvent(_owner,totalDays,totalShares,totalDays);\r\n        return totalRatio;\r\n    }\r\n    function claim (string memory _tkn, address _owner) payable whenNotPaused public returns ( bool ) {\r\n        require(keccak256(abi.encodePacked(_tkn)) == tknHash, \"App not allowed\");\r\n        require(msg.value >= miningFees, \"Not enough BNB sent; check fees!\");\r\n        uint32 totalRatio = _claim(_owner);\r\n        airdropsCon.claimTokens(_owner, totalRatio);\r\n        return true;\r\n    }\r\n    function claim (string memory _tkn, address _owner, address[]calldata tokens) payable whenNotPaused public returns ( bool ) {\r\n        require(keccak256(abi.encodePacked(_tkn)) == tknHash, \"App not allowed\");\r\n        require(msg.value >= miningFees, \"Not enough BNB sent; check fees!\");\r\n        uint32 totalRatio = _claim(_owner);\r\n        airdropsCon.claimTokens(_owner, totalRatio, tokens);\r\n        return true;\r\n    }\r\n\r\n    function addDailyShares (uint32 _day, uint _shares) public onlyAllowedContract  {totalDailyShares[_day] = totalDailyShares[_day] + _shares;}\r\n    function removeFromSubmitterByNft(address _owner, uint index) private {\r\n        for(uint i = index; i < submitterByDock[_owner].length-1; i++){\r\n        submitterByDock[_owner][i] = submitterByDock[_owner][i+1];\r\n        }\r\n        submitterByDock[_owner].pop();\r\n    }\r\n    function isAlreadySubmitted (address _owner, uint _days) public view returns (bool) {return submittedByOwner[_owner][_days];}\r\n    function getPendingClaimsNbr (address _owner) public view returns (uint) {return submitterByDock[_owner].length;}\r\n    function getPendingClaims (address _owner) public view returns (submittedData[] memory _array) {return submitterByDock[_owner];}\r\n    function getSubmissionsPerDay(uint _day, uint _length) public view returns (submittedPerDay[] memory) {\r\n        submittedPerDay[] memory array = new submittedPerDay[](_length);\r\n        for (uint i = 0; i < _length; i++) {\r\n            array[i] = submittedPerDay(_day - i, dailySubmissions[_day - i], totalDailyShares[_day - i]);\r\n        }\r\n        return array;\r\n    }\r\n    function getSubPerDay (address _owner, uint32 _days) public view returns (shareData memory) {\r\n        bytes memory ref = trackId(_owner, _days);\r\n        return submitted[ref];\r\n    }\r\n    function getClaimPerDay (address _owner, uint32 _days) public view returns (shareData memory) {\r\n        bytes memory ref = trackId(_owner, _days);\r\n        return claimed[ref];\r\n    }\r\n    function getDayShares (uint _day) public view returns (uint) {return totalDailyShares[_day];}\r\n    function getDate() public view returns(uint){return block.timestamp / 1 days;}\r\n    function getTime() public view returns(uint){return block.timestamp;}\r\n    function simulateShares(uint[] calldata tokensId,uint256[] calldata data,uint[] calldata workouts) public view returns(uint){\r\n        return activitiesCon.multiComputeAllShares(tokensId, data, workouts);\r\n    }\r\n    function isValidDateToSubmit (uint _days) public view returns (bool) {\r\n        return (getDate() - _days) < daysBuffer;\r\n    }\r\n    function isValidDateToMine (uint _days) public view returns (bool) {\r\n        if(_days > getDate()) return false;\r\n        if(_days < startingDate) return false;\r\n        return (getDate() - _days) > (daysBuffer - 1);\r\n    }\r\n    function getFees () public view returns (uint subFees, uint minFees) {\r\n        subFees = submissionFees;\r\n        minFees = miningFees;\r\n    }\r\n    function setFees (uint sub, uint min) public onlyOwner returns (bool) {\r\n        submissionFees = sub;\r\n        miningFees = min;\r\n        return true;\r\n    }\r\n    function getAirdropsPerDay() public view returns (AIRDROPS.dailyDistribution[] memory){\r\n        return airdropsCon.getAirdropsPerDay();\r\n    }\r\n    function getAirdropsActive() public view returns (address[] memory) {\r\n        address[] memory array;\r\n        AIRDROPS.dailyDistribution[] memory list = airdropsCon.getAirdropsPerDay();\r\n        for (uint i = 0; i < list.length; i++) {\r\n            bool active;\r\n            (,,,,,,active) = airdropsCon.getTokenData(list[i]._addr);\r\n            if (active) {\r\n                if (array.length == 0) {\r\n                    array = new address[](1);\r\n                } else {\r\n                    address[] memory newArray = new address[](array.length + 1);\r\n                    for (uint j = 0; j < array.length; j++) {\r\n                        newArray[j] = array[j];\r\n                    }\r\n                    array = newArray;\r\n                }\r\n                array[array.length - 1] = list[i]._addr;\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n    function registerRoyaltyCom (uint8 _type, uint _rawFee, address _owner) private  {\r\n        address affil = royaltiesCon.getAffiliation(_owner);\r\n        if(affil != address(0)){\r\n            uint _ratio = royaltiesCon.getUserRatio(affil,_type);\r\n            uint rlty = (_rawFee * _ratio)/100;\r\n            royaltiesCon.logPartnerRoyalties{value: rlty}(affil);\r\n        }\r\n    }\r\n    function trackId (address _owner, uint _days) public pure returns (bytes memory) {\r\n        return abi.encodePacked(_owner, _days);\r\n    }\r\n    function dataFprint(uint _days, uint256[] calldata data, uint[] calldata workouts) public pure returns (bytes memory) {\r\n        return abi.encodePacked(_days, data, workouts);\r\n    }\r\n\r\n    function setTknHash (string memory _str) public onlyOwner {tknHash = keccak256(abi.encodePacked(_str));}\r\n    function setMaxClaimDays (uint _value) public onlyOwner{maxClaimDays = _value;}\r\n    function setStartingDate () public onlyOwner view returns (uint) {return startingDate;}\r\n    function setStartingDate (uint _days) public onlyOwner {startingDate = _days;}\r\n    function setUniqueCheck (bool _v) public onlyOwner {checkUnique = _v;}\r\n    \r\n    function setActivitiesContract (address _addr) public onlyOwner {activitiesCon = ACTIVITIES(_addr);}\r\n    function setdockContract (address _addr) public onlyOwner {dockCon = DOCK(_addr);}\r\n    function setAirdropsContract (address _addr) public onlyOwner {airdropsCon = AIRDROPS(_addr);}\r\n    function setRoyaltiesContract (address _addr) public onlyOwner  {royaltiesCon = IRoyalties(_addr);}\r\n    function setDaysBuffer (uint _days) public onlyOwner {daysBuffer = _days;}\r\n    function getDaysBuffer () public view returns (uint) {return daysBuffer;}\r\n\r\n    function getBalance() public view returns(uint) {return address(this).balance;}    \r\n    function withdraw() public payable onlyOwner {\r\n        address payable to = payable(msg.sender);\r\n        to.transfer(getBalance());\r\n    }\r\n    function withdrawAmount(uint _amount) public payable onlyOwner {\r\n        require(_amount <= getBalance(), \"err : Amount > Balance\");\r\n        address payable to = payable(msg.sender);\r\n        to.transfer(getBalance());\r\n    }\r\n}\r\n\r\ninterface IRoyalties {\r\n    function getAffiliation(address _user) external view returns (address _parent);\r\n    function logPartnerRoyalties(address _parent) external payable;\r\n    function getUserRatio(address _parent, uint _type) external returns (uint _percent);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_airdrops\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activities\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalDays\",\"type\":\"uint256\"}],\"name\":\"claimEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"submitEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activitiesCon\",\"outputs\":[{\"internalType\":\"contract ACTIVITIES\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_day\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"addDailyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropsCon\",\"outputs\":[{\"internalType\":\"contract AIRDROPS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"allowContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkUnique\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tkn\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tkn\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailySubmissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"workouts\",\"type\":\"uint256[]\"}],\"name\":\"dataFprint\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"disallowContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dockCon\",\"outputs\":[{\"internalType\":\"contract DOCK\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAirdropsActive\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAirdropsPerDay\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_perDay\",\"type\":\"uint256\"}],\"internalType\":\"struct AIRDROPS.dailyDistribution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_days\",\"type\":\"uint32\"}],\"name\":\"getClaimPerDay\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"internalType\":\"struct MINING.shareData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"getDayShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaysBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"subFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getPendingClaims\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"internalType\":\"struct MINING.submittedData[]\",\"name\":\"_array\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getPendingClaimsNbr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_days\",\"type\":\"uint32\"}],\"name\":\"getSubPerDay\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"internalType\":\"struct MINING.shareData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"getSubmissionsPerDay\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nbr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"internalType\":\"struct MINING.submittedPerDay[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"isAlreadySubmitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"isValidDateToMine\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"isValidDateToSubmit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxClaimDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesCon\",\"outputs\":[{\"internalType\":\"contract IRoyalties\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setActivitiesContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAirdropsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setDaysBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxClaimDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setRoyActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRoyaltiesContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setStartingDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setStartingDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_str\",\"type\":\"string\"}],\"name\":\"setTknHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_v\",\"type\":\"bool\"}],\"name\":\"setUniqueCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setdockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokensId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"workouts\",\"type\":\"uint256[]\"}],\"name\":\"simulateShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tkn\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokensId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"workouts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"submit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"submitted\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"submittedByOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"submitterByDock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_day\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalDailyShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"trackId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"usedData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "MINING", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010f3e647340726cd63c4791bc794c790f1cb56950000000000000000000000000463ae91155a6dc9140d3a63d9d18a998542d0fa000000000000000000000000975edcfa07beb2f1d0a5da1df014d8f7851186e1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0aaa56bb03fc987b6bb4a6f5d34a9b0cbad786eccc3f730c0d4a0904e4cad2aa"}