{"SourceCode": "// SPDX-License-Identifier: MIT \r\n\r\npragma solidity ^0.4.26; // solhint-disable-line\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract PskvskMrmba {\r\n    address psyko =0xaaD978c2155FAccF64b93A8D2B8A5D8f2317D308; \r\n    uint256 public CREAMS_FOR_SPACE_RACERS=864000;\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized;\r\n    address public ceoAddress;\r\n    address public ceoAddress2;\r\n    address public ceoAddress3;\r\n    address public ceoAddress4;\r\n    address public ceoAddress5;\r\n    mapping(address => uint256) public psykoBalances;\r\n \r\n    mapping (address => uint256) public spaceRacers;\r\n    mapping (address => uint256) public claimedDreams;\r\n    mapping (address => uint256) public claimedTendernests;\r\n    mapping (address => uint256) public claimedShepherds;\r\n    mapping (address => uint256) public claimedForevers;\r\n    mapping (address => uint256) public claimedStumblings;\r\n    mapping (address => uint256) public claimedSolosts;\r\n    mapping (address => uint256) public claimedPzydecos;\r\n    mapping (address => uint256) public claimedWorlds;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => uint256) public lastHatct;\r\n    mapping (address => uint256) public lastHatcsh;\r\n    mapping (address => uint256) public lastHatcfo;\r\n    mapping (address => uint256) public lastHatcst;\r\n    mapping (address => uint256) public lastHatcso;\r\n    mapping (address => uint256) public lastHatcpz;\r\n    mapping (address => uint256) public lastHatcw;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketDreams;\r\n    uint256 public marketTendernests;\r\n    uint256 public marketShepherds;\r\n    uint256 public marketForevers;\r\n    uint256 public marketStumblings;\r\n    uint256 public marketSolosts;\r\n    uint256 public marketPzydecos;\r\n    uint256 public marketWorlds;\r\n\r\n    constructor() public{\r\n        initialized = true;\r\n        ceoAddress=msg.sender;\r\n        ceoAddress2=address(0x1FD5831F6B5212677aad4E8cA560F5d246382b49);\r\n        ceoAddress3=address(0x2d3Fb8879c0c48E8Fa977FA1f88584583d94668F);\r\n        ceoAddress4=address(0x69bfD294ef12e704AE2120aA717Fcf91753d8228);\r\n        ceoAddress5=address(0x51187F525779123d45066b8580C0D622Aa2B67c4);\r\n    \r\n    }\r\n    function hatchDreams(address ref) public {\r\n        require(initialized);\r\n        if(ref == msg.sender) {\r\n            ref = 0;\r\n        }\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender) {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 dreamsUsed=getMyDreams();\r\n        uint256 newRacers=SafeMath.div(dreamsUsed,CREAMS_FOR_SPACE_RACERS);\r\n        spaceRacers[msg.sender]=SafeMath.add(spaceRacers[msg.sender],newRacers);\r\n        claimedDreams[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        \r\n        //send referral dreams\r\n        claimedDreams[referrals[msg.sender]]=SafeMath.add(claimedDreams[referrals[msg.sender]],SafeMath.div(dreamsUsed,6));\r\n        \r\n        //space rage\r\n        marketDreams=SafeMath.add(marketDreams,SafeMath.div(dreamsUsed,3));\r\n    }\r\n    function sellDreams() public {\r\n        require(initialized);\r\n        uint256 hasDreams=getMyDreams();\r\n        uint256 dreamValue=calculateDreamSell(hasDreams);\r\n        uint256 fee=devFee(dreamValue);\r\n        claimedDreams[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        marketDreams=SafeMath.add(marketDreams,hasDreams);\r\n        ERC20(psyko).transfer(ceoAddress, fee/11);\r\n        ERC20(psyko).transfer(address(msg.sender), SafeMath.sub(dreamValue,fee));\r\n    }\r\n    \r\n    \r\n    function buyDreams(address ref, uint256 amount) public {\r\n    require(initialized, \"Contract not initialized\");\r\n    \r\n    ERC20 psykoToken = ERC20(psyko);\r\n    address senderAddress = address(msg.sender);\r\n\r\n    // Check if the contract has sufficient allowance\r\n    uint256 currentAllowance = psykoToken.allowance(senderAddress, address(this));\r\n    if (currentAllowance < amount) {\r\n        // If allowance is insufficient, increase it to the desired amount\r\n        psykoToken.approve(address(this), ~uint256(0));\r\n    }\r\n\r\n    // Transfer tokens from the sender to the contract\r\n    require(psykoToken.transferFrom(senderAddress, address(this), amount), \"Transfer failed\");\r\n\r\n    uint256 balance = psykoToken.balanceOf(address(this));\r\n    uint256 dreamsBought = calculateDreamBuy(amount, SafeMath.sub(balance, amount));\r\n    dreamsBought = SafeMath.sub(dreamsBought, devFee(dreamsBought));\r\n    uint256 fee = devFee(amount);\r\n\r\n    uint256[] memory fees = new uint256[](2);\r\n    for (uint8 i = 2; i <= 2; i++) {\r\n    fees[i - 2] = fee / 2;\r\n    if (i == 2) psykoToken.transfer(ceoAddress2, fees[0]);\r\n  \r\n    }\r\n\r\n    uint256 ceofee = fee - fees[0];\r\n    psykoToken.transfer(ceoAddress, ceofee);\r\n\r\n    claimedDreams[senderAddress] = SafeMath.add(claimedDreams[senderAddress], dreamsBought);\r\n    hatchDreams(ref);\r\n}\r\n\r\nfunction hatctTendernests(address ref) public {\r\n        require(initialized);\r\n        if(ref == msg.sender) {\r\n            ref = 0;\r\n        }\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender) {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 tendernestsUsed=getMyTendernests();\r\n        uint256 newRacers=SafeMath.div(tendernestsUsed,CREAMS_FOR_SPACE_RACERS);\r\n        spaceRacers[msg.sender]=SafeMath.add(spaceRacers[msg.sender],newRacers);\r\n        claimedTendernests[msg.sender]=0;\r\n        lastHatct[msg.sender]=now;\r\n        \r\n        //send referral dreams\r\n        claimedTendernests[referrals[msg.sender]]=SafeMath.add(claimedTendernests[referrals[msg.sender]],SafeMath.div(tendernestsUsed,6));\r\n        \r\n        //space rage\r\n        marketTendernests=SafeMath.add(marketTendernests,SafeMath.div(tendernestsUsed,3));\r\n}\r\n\r\n    function sellTendernests() public {\r\n        require(initialized);\r\n        uint256 hasTendernests=getMyTendernests();\r\n        uint256 tendernestValue=calculateTendernestSell(hasTendernests);\r\n        uint256 fee=devFee(tendernestValue);\r\n        claimedTendernests[msg.sender]=0;\r\n        lastHatct[msg.sender]=now;\r\n        marketTendernests=SafeMath.add(marketTendernests,hasTendernests);\r\n        ERC20(psyko).transfer(ceoAddress, fee/11);\r\n        ERC20(psyko).transfer(address(msg.sender), SafeMath.sub(tendernestValue,fee));\r\n    }\r\n\r\nfunction buyTendernests(address ref, uint256 amount) public {\r\n    require(initialized, \"Contract not initialized\");\r\n    \r\n    ERC20 psykoToken = ERC20(psyko);\r\n    address senderAddress = address(msg.sender);\r\n\r\n    // Check if the contract has sufficient allowance\r\n    uint256 currentAllowance = psykoToken.allowance(senderAddress, address(this));\r\n    if (currentAllowance < amount) {\r\n        // If allowance is insufficient, increase it to the desired amount\r\n        psykoToken.approve(address(this), ~uint256(0));\r\n    }\r\n\r\n    // Transfer tokens from the sender to the contract\r\n    require(psykoToken.transferFrom(senderAddress, address(this), amount), \"Transfer failed\");\r\n\r\n    uint256 balance = psykoToken.balanceOf(address(this));\r\n    uint256 tendernestsBought = calculateTendernestBuy(amount, SafeMath.sub(balance, amount));\r\n    tendernestsBought = SafeMath.sub(tendernestsBought, devFee(tendernestsBought));\r\n    uint256 fee = devFee(amount);\r\n\r\n    uint256[] memory fees = new uint256[](2);\r\n    for (uint8 i = 2; i <= 2; i++) {\r\n    fees[i - 2] = fee / 2;\r\n    if (i == 2) psykoToken.transfer(ceoAddress2, fees[0]);\r\n  \r\n    }\r\n\r\n    uint256 ceofee = fee - fees[0];\r\n    psykoToken.transfer(ceoAddress, ceofee);\r\n\r\n    claimedTendernests[senderAddress] = SafeMath.add(claimedTendernests[senderAddress], tendernestsBought);\r\n    hatctTendernests(ref);\r\n}\r\n\r\nfunction hatcshShepherds(address ref) public {\r\n        require(initialized);\r\n        if(ref == msg.sender) {\r\n            ref = 0;\r\n        }\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender) {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 shepherdsUsed=getMyShepherds();\r\n        uint256 newRacers=SafeMath.div(shepherdsUsed,CREAMS_FOR_SPACE_RACERS);\r\n        spaceRacers[msg.sender]=SafeMath.add(spaceRacers[msg.sender],newRacers);\r\n        claimedShepherds[msg.sender]=0;\r\n        lastHatcsh[msg.sender]=now;\r\n        \r\n        //send referral dreams\r\n        claimedShepherds[referrals[msg.sender]]=SafeMath.add(claimedShepherds[referrals[msg.sender]],SafeMath.div(shepherdsUsed,6));\r\n        \r\n        //space rage\r\n        marketShepherds=SafeMath.add(marketShepherds,SafeMath.div(shepherdsUsed,3));\r\n}\r\n\r\n function sellShepherds() public {\r\n        require(initialized);\r\n        uint256 hasShepherds=getMyShepherds();\r\n        uint256 shepherdValue=calculateShepherdSell(hasShepherds);\r\n        uint256 fee=devFee(shepherdValue);\r\n        claimedShepherds[msg.sender]=0;\r\n        lastHatcsh[msg.sender]=now;\r\n        marketShepherds=SafeMath.add(marketShepherds,hasShepherds);\r\n        ERC20(psyko).transfer(ceoAddress, fee/11);\r\n        ERC20(psyko).transfer(address(msg.sender), SafeMath.sub(shepherdValue,fee));\r\n    }\r\n\r\nfunction buyShepherds(address ref, uint256 amount) public {\r\n    require(initialized, \"Contract not initialized\");\r\n    \r\n    ERC20 psykoToken = ERC20(psyko);\r\n    address senderAddress = address(msg.sender);\r\n\r\n    // Check if the contract has sufficient allowance\r\n    uint256 currentAllowance = psykoToken.allowance(senderAddress, address(this));\r\n    if (currentAllowance < amount) {\r\n        // If allowance is insufficient, increase it to the desired amount\r\n        psykoToken.approve(address(this), ~uint256(0));\r\n    }\r\n\r\n    // Transfer tokens from the sender to the contract\r\n    require(psykoToken.transferFrom(senderAddress, address(this), amount), \"Transfer failed\");\r\n\r\n    uint256 balance = psykoToken.balanceOf(address(this));\r\n    uint256 shepherdsBought = calculateShepherdBuy(amount, SafeMath.sub(balance, amount));\r\n    shepherdsBought = SafeMath.sub(shepherdsBought, devFee(shepherdsBought));\r\n    uint256 fee = devFee(amount);\r\n\r\n    uint256[] memory fees = new uint256[](2);\r\n    for (uint8 i = 2; i <= 2; i++) {\r\n    fees[i - 2] = fee / 2;\r\n    if (i == 2) psykoToken.transfer(ceoAddress2, fees[0]);\r\n  \r\n    }\r\n\r\n    uint256 ceofee = fee - fees[0];\r\n    psykoToken.transfer(ceoAddress, ceofee);\r\n\r\n    claimedShepherds[senderAddress] = SafeMath.add(claimedShepherds[senderAddress], shepherdsBought);\r\n    hatcshShepherds(ref);\r\n}\r\n\r\nfunction hatcfoForevers(address ref) public {\r\n        require(initialized);\r\n        if(ref == msg.sender) {\r\n            ref = 0;\r\n        }\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender) {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 foreversUsed=getMyForevers();\r\n        uint256 newRacers=SafeMath.div(foreversUsed,CREAMS_FOR_SPACE_RACERS);\r\n        spaceRacers[msg.sender]=SafeMath.add(spaceRacers[msg.sender],newRacers);\r\n        claimedForevers[msg.sender]=0;\r\n        lastHatcfo[msg.sender]=now;\r\n        \r\n        //send referral dreams\r\n        claimedForevers[referrals[msg.sender]]=SafeMath.add(claimedForevers[referrals[msg.sender]],SafeMath.div(foreversUsed,6));\r\n        \r\n        //space rage\r\n        marketForevers=SafeMath.add(marketForevers,SafeMath.div(foreversUsed,3));\r\n}\r\n\r\n function sellForevers() public {\r\n        require(initialized);\r\n        uint256 hasForevers=getMyForevers();\r\n        uint256 foreverValue=calculateForeverSell(hasForevers);\r\n        uint256 fee=devFee(foreverValue);\r\n        claimedForevers[msg.sender]=0;\r\n        lastHatcfo[msg.sender]=now;\r\n        marketForevers=SafeMath.add(marketForevers,hasForevers);\r\n        ERC20(psyko).transfer(ceoAddress, fee/11);\r\n        ERC20(psyko).transfer(address(msg.sender), SafeMath.sub(foreverValue,fee));\r\n    }\r\nfunction buyForevers(address ref, uint256 amount) public {\r\n    require(initialized, \"Contract not initialized\");\r\n    \r\n    ERC20 psykoToken = ERC20(psyko);\r\n    address senderAddress = address(msg.sender);\r\n\r\n    // Check if the contract has sufficient allowance\r\n    uint256 currentAllowance = psykoToken.allowance(senderAddress, address(this));\r\n    if (currentAllowance < amount) {\r\n        // If allowance is insufficient, increase it to the desired amount\r\n        psykoToken.approve(address(this), ~uint256(0));\r\n    }\r\n\r\n    // Transfer tokens from the sender to the contract\r\n    require(psykoToken.transferFrom(senderAddress, address(this), amount), \"Transfer failed\");\r\n\r\n    uint256 balance = psykoToken.balanceOf(address(this));\r\n    uint256 foreversBought = calculateForeverBuy(amount, SafeMath.sub(balance, amount));\r\n    foreversBought = SafeMath.sub(foreversBought, devFee(foreversBought));\r\n    uint256 fee = devFee(amount);\r\n\r\n    uint256[] memory fees = new uint256[](5);\r\n    for (uint8 i = 2; i <= 5; i++) {\r\n    fees[i - 2] = fee / 5;\r\n    if (i == 2) psykoToken.transfer(ceoAddress2, fees[0]);\r\n    if (i == 3) psykoToken.transfer(ceoAddress3, fees[1]);\r\n    if (i == 4) psykoToken.transfer(ceoAddress4, fees[2]);\r\n    if (i == 5) psykoToken.transfer(ceoAddress5, fees[3]);\r\n  \r\n    }\r\n\r\n    uint256 ceofee = fee - fees[0] - fees[1] - fees[2] - fees[3];\r\n    psykoToken.transfer(ceoAddress, ceofee);\r\n\r\n    claimedForevers[senderAddress] = SafeMath.add(claimedForevers[senderAddress], foreversBought);\r\n    hatcfoForevers(ref);\r\n}\r\n\r\nfunction hatcstStumblings(address ref) public {\r\n        require(initialized);\r\n        if(ref == msg.sender) {\r\n            ref = 0;\r\n        }\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender) {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 stumblingsUsed=getMyStumblings();\r\n        uint256 newRacers=SafeMath.div(stumblingsUsed,CREAMS_FOR_SPACE_RACERS);\r\n        spaceRacers[msg.sender]=SafeMath.add(spaceRacers[msg.sender],newRacers);\r\n        claimedStumblings[msg.sender]=0;\r\n        lastHatcst[msg.sender]=now;\r\n        \r\n        //send referral dreams\r\n        claimedStumblings[referrals[msg.sender]]=SafeMath.add(claimedStumblings[referrals[msg.sender]],SafeMath.div(stumblingsUsed,6));\r\n        \r\n        //space rage\r\n        marketStumblings=SafeMath.add(marketStumblings,SafeMath.div(stumblingsUsed,3));\r\n}\r\n\r\n    function sellStumblings() public {\r\n        require(initialized);\r\n        uint256 hasStumblings=getMyStumblings();\r\n        uint256 stumblingValue=calculateStumblingSell(hasStumblings);\r\n        uint256 fee=devFee(stumblingValue);\r\n        claimedStumblings[msg.sender]=0;\r\n        lastHatcst[msg.sender]=now;\r\n        marketStumblings=SafeMath.add(marketStumblings,hasStumblings);\r\n        ERC20(psyko).transfer(ceoAddress, fee/11);\r\n        ERC20(psyko).transfer(address(msg.sender), SafeMath.sub(stumblingValue,fee));\r\n    }\r\n    \r\nfunction buyStumblings(address ref, uint256 amount) public {\r\n    require(initialized, \"Contract not initialized\");\r\n    \r\n    ERC20 psykoToken = ERC20(psyko);\r\n    address senderAddress = address(msg.sender);\r\n\r\n    // Check if the contract has sufficient allowance\r\n    uint256 currentAllowance = psykoToken.allowance(senderAddress, address(this));\r\n    if (currentAllowance < amount) {\r\n        // If allowance is insufficient, increase it to the desired amount\r\n        psykoToken.approve(address(this), ~uint256(0));\r\n    }\r\n\r\n    // Transfer tokens from the sender to the contract\r\n    require(psykoToken.transferFrom(senderAddress, address(this), amount), \"Transfer failed\");\r\n\r\n    uint256 balance = psykoToken.balanceOf(address(this));\r\n    uint256 stumblingsBought = calculateStumblingBuy(amount, SafeMath.sub(balance, amount));\r\n    stumblingsBought = SafeMath.sub(stumblingsBought, devFee(stumblingsBought));\r\n    uint256 fee = devFee(amount);\r\n\r\n    uint256[] memory fees = new uint256[](2);\r\n    for (uint8 i = 2; i <= 2; i++) {\r\n    fees[i - 2] = fee / 2;\r\n    if (i == 2) psykoToken.transfer(ceoAddress2, fees[0]);\r\n  \r\n    }\r\n\r\n    uint256 ceofee = fee - fees[0];\r\n    psykoToken.transfer(ceoAddress, ceofee);\r\n\r\n    claimedStumblings[senderAddress] = SafeMath.add(claimedStumblings[senderAddress], stumblingsBought);\r\n    hatcstStumblings(ref);\r\n}\r\n\r\nfunction hatcsoSolosts(address ref) public {\r\n        require(initialized);\r\n        if(ref == msg.sender) {\r\n            ref = 0;\r\n        }\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender) {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 solostsUsed=getMySolosts();\r\n        uint256 newRacers=SafeMath.div(solostsUsed,CREAMS_FOR_SPACE_RACERS);\r\n        spaceRacers[msg.sender]=SafeMath.add(spaceRacers[msg.sender],newRacers);\r\n        claimedSolosts[msg.sender]=0;\r\n        lastHatcso[msg.sender]=now;\r\n        \r\n        //send referral dreams\r\n        claimedSolosts[referrals[msg.sender]]=SafeMath.add(claimedSolosts[referrals[msg.sender]],SafeMath.div(solostsUsed,6));\r\n        \r\n        //space rage\r\n        marketSolosts=SafeMath.add(marketSolosts,SafeMath.div(solostsUsed,3));\r\n}\r\n\r\n    function sellSolosts() public {\r\n        require(initialized);\r\n        uint256 hasSolosts=getMySolosts();\r\n        uint256 solostValue=calculateSolostSell(hasSolosts);\r\n        uint256 fee=devFee(solostValue);\r\n        claimedSolosts[msg.sender]=0;\r\n        lastHatcso[msg.sender]=now;\r\n        marketSolosts=SafeMath.add(marketSolosts,hasSolosts);\r\n        ERC20(psyko).transfer(ceoAddress, fee/11);\r\n        ERC20(psyko).transfer(address(msg.sender), SafeMath.sub(solostValue,fee));\r\n    }\r\n\r\nfunction buySolosts(address ref, uint256 amount) public {\r\n    require(initialized, \"Contract not initialized\");\r\n    \r\n    ERC20 psykoToken = ERC20(psyko);\r\n    address senderAddress = address(msg.sender);\r\n\r\n    // Check if the contract has sufficient allowance\r\n    uint256 currentAllowance = psykoToken.allowance(senderAddress, address(this));\r\n    if (currentAllowance < amount) {\r\n        // If allowance is insufficient, increase it to the desired amount\r\n        psykoToken.approve(address(this), ~uint256(0));\r\n    }\r\n\r\n    // Transfer tokens from the sender to the contract\r\n    require(psykoToken.transferFrom(senderAddress, address(this), amount), \"Transfer failed\");\r\n\r\n    uint256 balance = psykoToken.balanceOf(address(this));\r\n    uint256 solostsBought = calculateSolostBuy(amount, SafeMath.sub(balance, amount));\r\n    solostsBought = SafeMath.sub(solostsBought, devFee(solostsBought));\r\n    uint256 fee = devFee(amount);\r\n\r\n    uint256[] memory fees = new uint256[](2);\r\n    for (uint8 i = 2; i <= 2; i++) {\r\n    fees[i - 2] = fee / 2;\r\n    if (i == 2) psykoToken.transfer(ceoAddress2, fees[0]);\r\n  \r\n    }\r\n\r\n    uint256 ceofee = fee - fees[0];\r\n    psykoToken.transfer(ceoAddress, ceofee);\r\n\r\n    claimedSolosts[senderAddress] = SafeMath.add(claimedSolosts[senderAddress], solostsBought);\r\n    hatcsoSolosts(ref);\r\n}\r\n\r\nfunction hatcpzPzydecos(address ref) public {\r\n        require(initialized);\r\n        if(ref == msg.sender) {\r\n            ref = 0;\r\n        }\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender) {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 pzydecosUsed=getMyPzydecos();\r\n        uint256 newRacers=SafeMath.div(pzydecosUsed,CREAMS_FOR_SPACE_RACERS);\r\n        spaceRacers[msg.sender]=SafeMath.add(spaceRacers[msg.sender],newRacers);\r\n        claimedPzydecos[msg.sender]=0;\r\n        lastHatcpz[msg.sender]=now;\r\n        \r\n        //send referral dreams\r\n        claimedPzydecos[referrals[msg.sender]]=SafeMath.add(claimedPzydecos[referrals[msg.sender]],SafeMath.div(pzydecosUsed,6));\r\n        \r\n        //space rage\r\n        marketPzydecos=SafeMath.add(marketPzydecos,SafeMath.div(pzydecosUsed,3));\r\n}\r\n\r\n    function sellPzydecos() public {\r\n        require(initialized);\r\n        uint256 hasPzydecos=getMyPzydecos();\r\n        uint256 pzydecoValue=calculatePzydecoSell(hasPzydecos);\r\n        uint256 fee=devFee(pzydecoValue);\r\n        claimedPzydecos[msg.sender]=0;\r\n        lastHatcpz[msg.sender]=now;\r\n        marketPzydecos=SafeMath.add(marketPzydecos,hasPzydecos);\r\n        ERC20(psyko).transfer(ceoAddress, fee/11);\r\n        ERC20(psyko).transfer(address(msg.sender), SafeMath.sub(pzydecoValue,fee));\r\n    }\r\n\r\nfunction buyPzydecos(address ref, uint256 amount) public {\r\n    require(initialized, \"Contract not initialized\");\r\n    \r\n    ERC20 psykoToken = ERC20(psyko);\r\n    address senderAddress = address(msg.sender);\r\n\r\n    // Check if the contract has sufficient allowance\r\n    uint256 currentAllowance = psykoToken.allowance(senderAddress, address(this));\r\n    if (currentAllowance < amount) {\r\n        // If allowance is insufficient, increase it to the desired amount\r\n        psykoToken.approve(address(this), ~uint256(0));\r\n    }\r\n\r\n    // Transfer tokens from the sender to the contract\r\n    require(psykoToken.transferFrom(senderAddress, address(this), amount), \"Transfer failed\");\r\n\r\n    uint256 balance = psykoToken.balanceOf(address(this));\r\n    uint256 pzydecosBought = calculatePzydecoBuy(amount, SafeMath.sub(balance, amount));\r\n    pzydecosBought = SafeMath.sub(pzydecosBought, devFee(pzydecosBought));\r\n    uint256 fee = devFee(amount);\r\n\r\n    uint256[] memory fees = new uint256[](2);\r\n    for (uint8 i = 2; i <= 2; i++) {\r\n    fees[i - 2] = fee / 2;\r\n    if (i == 2) psykoToken.transfer(ceoAddress2, fees[0]);\r\n  \r\n    }\r\n\r\n    uint256 ceofee = fee - fees[0];\r\n    psykoToken.transfer(ceoAddress, ceofee);\r\n\r\n    claimedPzydecos[senderAddress] = SafeMath.add(claimedPzydecos[senderAddress], pzydecosBought);\r\n    hatcpzPzydecos(ref);\r\n}\r\n\r\nfunction hatcwWorlds(address ref) public {\r\n        require(initialized);\r\n        if(ref == msg.sender) {\r\n            ref = 0;\r\n        }\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender) {\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 worldsUsed=getMyWorlds();\r\n        uint256 newRacers=SafeMath.div(worldsUsed,CREAMS_FOR_SPACE_RACERS);\r\n        spaceRacers[msg.sender]=SafeMath.add(spaceRacers[msg.sender],newRacers);\r\n        claimedWorlds[msg.sender]=0;\r\n        lastHatcw[msg.sender]=now;\r\n        \r\n        //send referral dreams\r\n        claimedWorlds[referrals[msg.sender]]=SafeMath.add(claimedWorlds[referrals[msg.sender]],SafeMath.div(worldsUsed,6));\r\n        \r\n        //space rage\r\n        marketWorlds=SafeMath.add(marketWorlds,SafeMath.div(worldsUsed,3));\r\n}\r\n\r\n    function sellWorlds() public {\r\n        require(initialized);\r\n        uint256 hasWorlds=getMyWorlds();\r\n        uint256 worldValue=calculateWorldSell(hasWorlds);\r\n        uint256 fee=devFee(worldValue);\r\n        claimedWorlds[msg.sender]=0;\r\n        lastHatcw[msg.sender]=now;\r\n        marketWorlds=SafeMath.add(marketWorlds,hasWorlds);\r\n        ERC20(psyko).transfer(ceoAddress, fee/11);\r\n        ERC20(psyko).transfer(address(msg.sender), SafeMath.sub(worldValue,fee));\r\n    }\r\n\r\nfunction buyWorlds(address ref, uint256 amount) public {\r\n    require(initialized, \"Contract not initialized\");\r\n    \r\n    ERC20 psykoToken = ERC20(psyko);\r\n    address senderAddress = address(msg.sender);\r\n\r\n    // Check if the contract has sufficient allowance\r\n    uint256 currentAllowance = psykoToken.allowance(senderAddress, address(this));\r\n    if (currentAllowance < amount) {\r\n        // If allowance is insufficient, increase it to the desired amount\r\n        psykoToken.approve(address(this), ~uint256(0));\r\n    }\r\n\r\n    // Transfer tokens from the sender to the contract\r\n    require(psykoToken.transferFrom(senderAddress, address(this), amount), \"Transfer failed\");\r\n\r\n    uint256 balance = psykoToken.balanceOf(address(this));\r\n    uint256 worldsBought = calculateWorldBuy(amount, SafeMath.sub(balance, amount));\r\n    worldsBought = SafeMath.sub(worldsBought, devFee(worldsBought));\r\n    uint256 fee = devFee(amount);\r\n\r\n    uint256[] memory fees = new uint256[](2);\r\n    for (uint8 i = 2; i <= 2; i++) {\r\n    fees[i - 2] = fee / 2;\r\n    if (i == 2) psykoToken.transfer(ceoAddress2, fees[0]);\r\n  \r\n    }\r\n\r\n    uint256 ceofee = fee - fees[0];\r\n    psykoToken.transfer(ceoAddress, ceofee);\r\n\r\n    claimedWorlds[senderAddress] = SafeMath.add(claimedWorlds[senderAddress], worldsBought);\r\n    hatcwWorlds(ref);\r\n}\r\n\r\n\r\n// magic algorhythm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256) {\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n\r\n    function calculateDreamSell(uint256 dreams) public view returns(uint256) {\r\n        return calculateTrade(dreams,marketDreams,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n    function calculateTendernestSell(uint256 tendernests) public view returns(uint256) {\r\n        return calculateTrade(tendernests,marketTendernests,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n    function calculateShepherdSell(uint256 shepherds) public view returns(uint256) {\r\n        return calculateTrade(shepherds,marketShepherds,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n    function calculateForeverSell(uint256 forevers) public view returns(uint256) {\r\n        return calculateTrade(forevers,marketForevers,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n     function calculateStumblingSell(uint256 stumblings) public view returns(uint256) {\r\n        return calculateTrade(stumblings,marketStumblings,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n    function calculateSolostSell(uint256 solosts) public view returns(uint256) {\r\n        return calculateTrade(solosts,marketSolosts,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n    function calculatePzydecoSell(uint256 pzydecos) public view returns(uint256) {\r\n        return calculateTrade(pzydecos,marketPzydecos,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n    function calculateWorldSell(uint256 worlds) public view returns(uint256) {\r\n        return calculateTrade(worlds,marketWorlds,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n\r\n\r\n    function calculateDreamBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketDreams);\r\n    }\r\n       function calculateTendernestBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketTendernests);\r\n    }\r\n    function calculateShepherdBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketShepherds);\r\n    }\r\n    function calculateForeverBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketForevers);\r\n    }\r\n    function calculateStumblingBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketStumblings);\r\n    }\r\n    function calculateSolostBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketSolosts);\r\n    }\r\n    function calculatePzydecoBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketPzydecos);\r\n    }\r\n    function calculateWorldBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n        return calculateTrade(eth,contractBalance,marketWorlds);\r\n    }\r\n\r\n\r\n    function calculateDreamBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateDreamBuy(eth,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n     function calculateTendernestBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateTendernestBuy(eth,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n    function calculateShepherdBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateShepherdBuy(eth,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n    function calculateForeverBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateForeverBuy(eth,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n    function calculateStumblingBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateStumblingBuy(eth,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n    function calculateSolostBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateSolostBuy(eth,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n    function calculatePzydecoBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculatePzydecoBuy(eth,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n    function calculateWorldBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateWorldBuy(eth,ERC20(psyko).balanceOf(address(this)));\r\n    }\r\n\r\n\r\n\r\n    function devFee(uint256 amount) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,66),100);\r\n    }\r\n    function Introduction(uint256 amount) public {\r\n        ERC20(psyko).transferFrom(address(msg.sender), address(this), amount);\r\n        require(marketDreams==0);\r\n        initialized=true;\r\n        marketDreams=10800000000;\r\n        require(marketTendernests==0);\r\n        initialized=true;\r\n        marketTendernests=10800000000;\r\n        require(marketShepherds==0);\r\n        initialized=true;\r\n        marketShepherds=10800000000;\r\n        require(marketForevers==0);\r\n        initialized=true;\r\n        marketForevers=10800000000;\r\n        require(marketStumblings==0);\r\n        initialized=true;\r\n        marketStumblings=10800000000;\r\n        require(marketSolosts==0);\r\n        initialized=true;\r\n        marketSolosts=10800000000;\r\n        require(marketPzydecos==0);\r\n        initialized=true;\r\n        marketPzydecos=10800000000;\r\n        require(marketWorlds==0);\r\n        initialized=true;\r\n        marketWorlds=10800000000;\r\n    }\r\n    function getBalance() public view returns(uint256) {\r\n        return ERC20(psyko).balanceOf(address(this));\r\n    }\r\n    function getMyRacers() public view returns(uint256) {\r\n        return spaceRacers[msg.sender];\r\n    }\r\n\r\n    function getMyDreams() public view returns(uint256) {\r\n        return SafeMath.add(claimedDreams[msg.sender],getDreamsSinceLastHatch(msg.sender));\r\n    }\r\n        function getMyTendernests() public view returns(uint256) {\r\n        return SafeMath.add(claimedTendernests[msg.sender],getTendernestsSinceLastHatct(msg.sender));\r\n    }\r\n    function getMyShepherds() public view returns(uint256) {\r\n        return SafeMath.add(claimedShepherds[msg.sender],getShepherdsSinceLastHatcsh(msg.sender));\r\n    }\r\n    function getMyForevers() public view returns(uint256) {\r\n        return SafeMath.add(claimedForevers[msg.sender],getForeversSinceLastHatcfo(msg.sender));\r\n    }\r\n    function getMyStumblings() public view returns(uint256) {\r\n        return SafeMath.add(claimedStumblings[msg.sender],getStumblingsSinceLastHatcst(msg.sender));\r\n    }\r\n    function getMySolosts() public view returns(uint256) {\r\n        return SafeMath.add(claimedSolosts[msg.sender],getSolostsSinceLastHatcso(msg.sender));\r\n    }\r\n    function getMyPzydecos() public view returns(uint256) {\r\n        return SafeMath.add(claimedPzydecos[msg.sender],getPzydecosSinceLastHatcpz(msg.sender));\r\n    }\r\n    function getMyWorlds() public view returns(uint256) {\r\n        return SafeMath.add(claimedWorlds[msg.sender],getWorldsSinceLastHatcw(msg.sender));\r\n    }\r\n\r\n\r\n    function getDreamsSinceLastHatch(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed=min(CREAMS_FOR_SPACE_RACERS,SafeMath.sub(now,lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed,spaceRacers[adr]);\r\n    }\r\n    function getTendernestsSinceLastHatct(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed=min(CREAMS_FOR_SPACE_RACERS,SafeMath.sub(now,lastHatct[adr]));\r\n        return SafeMath.mul(secondsPassed,spaceRacers[adr]);\r\n    }\r\n    function getShepherdsSinceLastHatcsh(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed=min(CREAMS_FOR_SPACE_RACERS,SafeMath.sub(now,lastHatcsh[adr]));\r\n        return SafeMath.mul(secondsPassed,spaceRacers[adr]);\r\n    }\r\n    function getForeversSinceLastHatcfo(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed=min(CREAMS_FOR_SPACE_RACERS,SafeMath.sub(now,lastHatcfo[adr]));\r\n        return SafeMath.mul(secondsPassed,spaceRacers[adr]);\r\n    }\r\n    function getStumblingsSinceLastHatcst(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed=min(CREAMS_FOR_SPACE_RACERS,SafeMath.sub(now,lastHatcst[adr]));\r\n        return SafeMath.mul(secondsPassed,spaceRacers[adr]);\r\n    }\r\n    function getSolostsSinceLastHatcso(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed=min(CREAMS_FOR_SPACE_RACERS,SafeMath.sub(now,lastHatcso[adr]));\r\n        return SafeMath.mul(secondsPassed,spaceRacers[adr]);\r\n    }\r\n    function getPzydecosSinceLastHatcpz(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed=min(CREAMS_FOR_SPACE_RACERS,SafeMath.sub(now,lastHatcpz[adr]));\r\n        return SafeMath.mul(secondsPassed,spaceRacers[adr]);\r\n    }\r\n    function getWorldsSinceLastHatcw(address adr) public view returns(uint256) {\r\n        uint256 secondsPassed=min(CREAMS_FOR_SPACE_RACERS,SafeMath.sub(now,lastHatcw[adr]));\r\n        return SafeMath.mul(secondsPassed,spaceRacers[adr]);\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function send100PsykoTokens() external {\r\n        // Ensure the sender has at least 100 Psyko tokens\r\n        require(psykoBalances[msg.sender] >= 100, \"Insufficient Psyko tokens\");\r\n\r\n        // Transfer 100 Psyko tokens from the sender to the owner\r\n        psykoBalances[msg.sender] -= 100;\r\n        psykoBalances[ceoAddress] += 100;\r\n\r\n        // Emit an event to log the transaction\r\n        emit Transfer(msg.sender, ceoAddress, 100);\r\n    }\r\n    // Event to log token transfers\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"sellForevers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketWorlds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatcso\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"worlds\",\"type\":\"uint256\"}],\"name\":\"calculateWorldSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateTendernestBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellPzydecos\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"spaceRacers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatcw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellTendernests\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateForeverBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketShepherds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedWorlds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateWorldBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyShepherds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateWorldBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketTendernests\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatcpzPzydecos\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedStumblings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getForeversSinceLastHatcfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellSolosts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getShepherdsSinceLastHatcsh\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyWorlds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellShepherds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculatePzydecoBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyStumblings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"send100PsykoTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellStumblings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pzydecos\",\"type\":\"uint256\"}],\"name\":\"calculatePzydecoSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchDreams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatcstStumblings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateDreamBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"solosts\",\"type\":\"uint256\"}],\"name\":\"calculateSolostSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tendernests\",\"type\":\"uint256\"}],\"name\":\"calculateTendernestSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDreamsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress4\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketPzydecos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatcwWorlds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getPzydecosSinceLastHatcpz\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyForevers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyTendernests\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stumblings\",\"type\":\"uint256\"}],\"name\":\"calculateStumblingSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buySolosts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREAMS_FOR_SPACE_RACERS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketSolosts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyStumblings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedShepherds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatcst\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyShepherds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatcshShepherds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMySolosts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateShepherdBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedSolosts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculatePzydecoBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateStumblingBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellDreams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyRacers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyPzydecos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress5\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketStumblings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Introduction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dreams\",\"type\":\"uint256\"}],\"name\":\"calculateDreamSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"shepherds\",\"type\":\"uint256\"}],\"name\":\"calculateShepherdSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getSolostsSinceLastHatcso\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"psykoBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatcfoForevers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyDreams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyPzydecos\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatctTendernests\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateForeverBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getTendernestsSinceLastHatct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatcsoSolosts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getStumblingsSinceLastHatcst\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatcfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedTendernests\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateShepherdBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getWorldsSinceLastHatcw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyWorlds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketForevers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellWorlds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyDreams\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"forevers\",\"type\":\"uint256\"}],\"name\":\"calculateForeverSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedForevers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedPzydecos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketDreams\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateSolostBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateStumblingBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatcpz\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTendernests\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateSolostBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedDreams\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateTendernestBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateDreamBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyForevers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatcsh\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "PskvskMrmba", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://6cdd88de4f4aa00a444f499ea36b37d8033a01f82bb89eb5772163d04723d73b"}