{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-04-27\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Address {\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\ncontract SkyBiz is Context, Ownable, IERC20 {\r\n    using Address for address;\r\n    using Address for address payable;\r\n    \r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    mapping(address => uint256) private _firstSell;\r\n    mapping(address => uint256) private _totSells;\r\n\t\r\n\tmapping(address => uint256) private _firstTransfer;\r\n    mapping(address => uint256) private _totTransfers;\r\n    \r\n    mapping(address => bool) private _isBadActor;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcludedFromPass;\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n   \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 100000000 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"Skybyz Coin\";\r\n    string private _symbol = \"SGD\";\r\n    uint8 private _decimals = 9;\r\n\r\n    struct feeRatesStruct {\r\n      uint256 taxFee;\r\n\t  uint256 burnFee;\r\n\t  uint256 airdropFee;\r\n      uint256 marketingFee;      \r\n      uint256 liquidityFee;\r\n      uint256 swapFee;\r\n      uint256 totFees;\r\n    }\r\n    \r\n    feeRatesStruct public buyFees = feeRatesStruct(\r\n     {taxFee: 0,\r\n\t  burnFee: 5000,\r\n      airdropFee: 2000,\r\n\t  liquidityFee: 2000,\r\n      marketingFee: 1000, \r\n      swapFee: 10000, // burnFee+airdropFee+liquidityFee+marketingFee\r\n      totFees: 2\r\n    });\r\n\r\n    feeRatesStruct public sellFees = feeRatesStruct(\r\n     {taxFee: 0,\r\n\t  burnFee: 5000,\r\n      airdropFee: 2000,\r\n\t  liquidityFee: 2000,\r\n      marketingFee: 1000, \r\n      swapFee: 10000, // burnFee+airdropFee+liquidityFee+marketingFee\r\n      totFees: 2\r\n    });\r\n\r\n    feeRatesStruct private appliedFees = buyFees; //default value\r\n    feeRatesStruct private previousFees;\r\n\r\n    struct antiwhale {\r\n      uint256 selling_threshold;//this is value/1000 %\r\n      uint256 extra_tax; //this is value %\r\n    }\r\n\r\n    antiwhale[3] public antiwhale_measures;\r\n\r\n    struct valuesFromGetValues{\r\n      uint256 rAmount;\r\n      uint256 rTransferAmount;\r\n      uint256 rFee;\r\n      uint256 rSwap;\r\n      uint256 tTransferAmount;\r\n      uint256 tFee;\r\n      uint256 tSwap;\r\n    }\r\n    \r\n    uint256 public maxSellPerDay = _tTotal/1000;\r\n    uint256 public maxTrPerDay = _tTotal/1000;\r\n    \r\n    address payable public burnWallet = payable(0xf6C3B688Fef47d9dBA2E0428e80053f8558173D2);\r\n    address payable public marketingWallet = payable(0xE077D1aDDE6ebC7c809F54633EEDBe5ED52f9247);\r\n    address payable public liquidityWallet = payable(0xE077D1aDDE6ebC7c809F54633EEDBe5ED52f9247);\r\n    address payable public airdropWallet = payable(0xa1fB54523C537BbaFF9f82C9afF6C55dD27FE0fd);    \r\n\r\n    IRouter public pancakeRouter;\r\n    address public pancakePair;\r\n    IERC20 public ERC20Token;\r\n    \r\n    bool inSwap;\r\n    bool public swapEnabled = true;\r\n    uint256 private minTokensToSwap = 50000 * 10**9;\r\n    uint256 public maxTxAmount = _tTotal/100;\r\n\r\n    event swapEnabledUpdated(bool enabled);\r\n    \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    \r\n    constructor () {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _tOwned[_msgSender()] = _tTotal;        \r\n\r\n        IRouter _pancakeRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n         // Create a uniswap pair for this new token\r\n        pancakePair = IFactory(_pancakeRouter.factory())\r\n            .createPair(address(this), _pancakeRouter.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        pancakeRouter = _pancakeRouter;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[burnWallet] = true;\r\n        _isExcludedFromFee[marketingWallet] = true;\r\n        _isExcludedFromFee[liquidityWallet] = true;\r\n        _isExcludedFromFee[airdropWallet] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        \r\n        antiwhale_measures[0] = antiwhale({selling_threshold: _tTotal*25/100000, extra_tax: 1});//0.025% of initial supply\r\n        antiwhale_measures[1] = antiwhale({selling_threshold: _tTotal*50/100000, extra_tax: 2});//0.05% of initial supply\r\n        antiwhale_measures[2] = antiwhale({selling_threshold: _tTotal*75/100000, extra_tax: 3});//0.075% of initial supply\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender]+addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFeesCharged() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        valuesFromGetValues memory s = _getValues(tAmount, false);\r\n        _rOwned[sender] -= s.rAmount;\r\n        _rTotal -= s.rAmount;\r\n        _tFeeTotal += tAmount;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            valuesFromGetValues memory s = _getValues(tAmount, false);\r\n            return s.rAmount;\r\n        } else {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true);\r\n            return s.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount/currentRate;\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function excludeFromReward(address[] memory accounts) public onlyOwner() {\r\n        uint256 length = accounts.length;\r\n        for(uint256 i=0;i<length;i++)\r\n        {\r\n        require(!_isExcluded[accounts[i]], \"Account is already excluded\");\r\n        if(_rOwned[accounts[i]] > 0) {\r\n            _tOwned[accounts[i]] = tokenFromReflection(_rOwned[accounts[i]]);\r\n        }\r\n        _isExcluded[accounts[i]] = true;\r\n        _excluded.push(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    function excludeFromPass(address account) public onlyOwner {\r\n        _isExcludedFromPass[account] = true;\r\n    }\r\n    \r\n    function includeInPass(address account) public onlyOwner {\r\n        _isExcludedFromPass[account] = false;\r\n    }\r\n    \r\n     //to recieve ETH from pancakeRouter when swaping\r\n    receive() external payable {}\r\n\r\n\r\n     function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal     = _rTotal-rFee;\r\n        _tFeeTotal  = _tFeeTotal+tFee;\r\n    }\r\n\r\n\r\n    function _getValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory to_return) {\r\n        to_return = _getTValues(tAmount, takeFee);\r\n        (to_return.rAmount, to_return.rTransferAmount, to_return.rFee, to_return.rSwap) = _getRValues(to_return,tAmount, takeFee, _getRate());\r\n        return to_return;\r\n    }\r\n\r\n\r\n    function _getTValues(uint256 tAmount, bool takeFee) private view returns (valuesFromGetValues memory s) {\r\n        if(!takeFee) {\r\n          s.tTransferAmount = tAmount;\r\n          return s;\r\n        }\r\n        s.tFee = tAmount*appliedFees.totFees*appliedFees.taxFee/1000000;\r\n        s.tSwap = tAmount*appliedFees.totFees*appliedFees.swapFee/1000000;\r\n        s.tTransferAmount = tAmount-s.tFee-s.tSwap;\r\n        return s;\r\n    }\r\n\r\n\r\n    function _getRValues(valuesFromGetValues memory s, uint256 tAmount, bool takeFee, uint256 currentRate) private pure returns (uint256, uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount*currentRate;\r\n        if(!takeFee)\r\n        {\r\n            return (rAmount,rAmount,0,0);\r\n        }\r\n        uint256 rFee = s.tFee*currentRate;\r\n        uint256 rSwap = s.tSwap*currentRate;\r\n        uint256 rTransferAmount = rAmount-rFee-rSwap;\r\n        return (rAmount, rTransferAmount, rFee, rSwap);\r\n    }\r\n\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply/tSupply;\r\n    }\r\n\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        uint256 length = _excluded.length;    \r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply -=_rOwned[_excluded[i]];\r\n            tSupply -=_tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal/_tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeSwapFees(uint256 rSwap, uint256 tSwap) private {\r\n\r\n        _rOwned[address(this)] +=rSwap;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] +=tSwap;\r\n    }\r\n    function setBurnWallet(address payable _address) external onlyOwner returns (bool){\r\n        burnWallet = _address;\r\n        _isExcludedFromFee[burnWallet] = true;\r\n        return true;\r\n    }    \r\n   function setMarketingWallet(address payable _address) external onlyOwner returns (bool){\r\n        marketingWallet = _address;\r\n        _isExcludedFromFee[marketingWallet] = true;\r\n        return true;\r\n    }\r\n    function setLiquidityWallet(address payable _address) external onlyOwner returns (bool){\r\n        liquidityWallet = _address;\r\n        _isExcludedFromFee[liquidityWallet] = true;\r\n        return true;\r\n    }\r\n    function setAirdropWallet(address payable _address) external onlyOwner returns (bool){\r\n        airdropWallet = _address;\r\n        _isExcludedFromFee[airdropWallet] = true;\r\n        return true;\r\n    }\r\n       \r\n    function setBuyFees(uint256 taxFee, uint256 burnFee, uint256 airdropFee, uint256 marketingFee, uint256 liquidityFee) external onlyOwner{\r\n        buyFees.taxFee = taxFee;\r\n\t\tbuyFees.burnFee = burnFee;\r\n\t\tbuyFees.airdropFee = airdropFee;\r\n        buyFees.marketingFee = marketingFee;      \r\n        buyFees.liquidityFee= liquidityFee;\r\n        buyFees.swapFee = marketingFee+airdropFee+burnFee+liquidityFee;\r\n        require(buyFees.swapFee+buyFees.taxFee == 10000, \"sum of all percentages should be 10000\");\r\n    }\r\n    \r\n    function setSellFees(uint256 sellTaxFee, uint256 sellBurnFee, uint256 sellAirdropFee, uint256 sellMarketingFee, uint256 sellLiquidityFee) external onlyOwner{\r\n        sellFees.taxFee = sellTaxFee;\r\n\t\tsellFees.burnFee = sellBurnFee;\r\n\t\tsellFees.airdropFee = sellAirdropFee; \r\n        sellFees.marketingFee = sellMarketingFee;               \r\n        sellFees.liquidityFee = sellLiquidityFee;        \r\n        sellFees.swapFee = sellMarketingFee+sellAirdropFee+sellBurnFee+sellLiquidityFee;\r\n        require(sellFees.swapFee+sellFees.taxFee == 10000, \"sum of all percentages should be 10000\");\r\n    }\r\n    \r\n    function setTotalBuyFees(uint256 _totFees) external onlyOwner{\r\n        buyFees.totFees = _totFees;\r\n    }\r\n    \r\n    function setTotalSellFees(uint256 _totSellFees) external onlyOwner{\r\n        sellFees.totFees = _totSellFees;\r\n    }\r\n    \r\n    function setMaxSellAmountPerDay(uint256 amount) external onlyOwner{\r\n        maxSellPerDay = amount * 10**9;\r\n    }\t\r\n\t \r\n    function setMaxTrAmountPerDay(uint256 amount) external onlyOwner{\r\n        maxTrPerDay = amount * 10**9;\r\n    }\r\n    \r\n    function setAntiwhaleMeasure(uint256[3] memory selling_thresholds, uint256[3] memory extra_taxes ) external onlyOwner{\r\n        //values of selling_threshold (are values in input)/1000 % of total supply , extra taxes are expressed in %\r\n        antiwhale_measures[0] = antiwhale({selling_threshold: _tTotal*selling_thresholds[0]/100000 , extra_tax: extra_taxes[0]});\r\n        antiwhale_measures[1] = antiwhale({selling_threshold: _tTotal*selling_thresholds[1]/100000 , extra_tax: extra_taxes[1]});\r\n        antiwhale_measures[2] = antiwhale({selling_threshold: _tTotal*selling_thresholds[2]/100000 , extra_tax: extra_taxes[2]});\r\n    }\r\n\r\n    function setSwapEnabled(bool _enabled) public onlyOwner {\r\n        swapEnabled = _enabled;\r\n        emit swapEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function setNumTokensTosSwap(uint256 amount) external onlyOwner{\r\n        minTokensToSwap = amount * 10**9;\r\n    }\r\n    \r\n    function setMaxTxAmount(uint256 amount) external onlyOwner{\r\n        maxTxAmount = amount * 10**9;\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\tfunction isExcludedFromPass(address account) public view returns(bool) {\r\n        return _isExcludedFromPass[account];\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n        function getAntiwhaleFee(uint256 amount) internal view returns(uint256 sell_tax) {\r\n    \r\n        if(amount < antiwhale_measures[0].selling_threshold) {\r\n          sell_tax=0;\r\n        }\r\n        else if(amount < antiwhale_measures[1].selling_threshold) {\r\n          sell_tax = antiwhale_measures[0].extra_tax;\r\n        }\r\n        else if(amount < antiwhale_measures[2].selling_threshold) {\r\n          sell_tax = antiwhale_measures[1].extra_tax;\r\n        }\r\n        else { sell_tax = antiwhale_measures[2].extra_tax; }\r\n\r\n      return sell_tax;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!_isBadActor[from] && !_isBadActor[to], \"Bots are not allowed\");\r\n        \r\n        if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\r\n            require(amount <= maxTxAmount, 'you are exceeding maxTxAmount');\r\n        }\r\n\t\t//eth bsc\r\n\t\tif(!_isExcludedFromFee[from] && !_isExcludedFromFee[to] && !_isExcludedFromPass[from]){\t\t\t \r\n\t\t\tif(block.timestamp < _firstTransfer[from]+24 * 1 hours){\r\n\t\t\t\trequire(_totTransfers[from]+amount <= maxTrPerDay, \"You can't transfer more than maxTrPerDay\");\r\n\t\t\t\t_totTransfers[from] += amount;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\trequire(amount <= maxTrPerDay, \"You can't sell more than maxTrPerDay\");\r\n\t\t\t\t_firstTransfer[from] = block.timestamp;\r\n\t\t\t\t_totTransfers[from] = amount;\r\n\t\t\t}\t\t\t\t\t\r\n\t\t}\r\n\t\t\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        bool overMinTokenBalance = contractTokenBalance >= minTokensToSwap;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwap &&\r\n            from != pancakePair &&\r\n            swapEnabled\r\n        ) {\r\n            contractTokenBalance = minTokensToSwap;\r\n            swapAndSendToFees(contractTokenBalance);\r\n        }\r\n        \r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n        bool isSale = false;\r\n        \r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        } else\r\n        {\r\n            if(to == pancakePair){\r\n            isSale = true;\r\n            }\r\n        }\r\n             \r\n        // transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from,to,amount,takeFee, isSale);\r\n    }\r\n    \r\n    function swapAndSendToFees(uint256 tokens) private {\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForBNB(tokens);\r\n        uint256 transferBalance = address(this).balance-initialBalance;\r\n        liquidityWallet.sendValue(transferBalance*appliedFees.liquidityFee/appliedFees.swapFee);\r\n        airdropWallet.sendValue(transferBalance*appliedFees.airdropFee/appliedFees.swapFee);\r\n        burnWallet.sendValue(transferBalance*appliedFees.burnFee/appliedFees.swapFee);\r\n        marketingWallet.sendValue(address(this).balance);\r\n\r\n    }\r\n\t\r\n\tfunction airdrop( address[] calldata _contributors, uint256[] calldata _balances) external   {\r\n\t\tuint8 i = 0;\r\n\t\tfor (i; i < _contributors.length; i++) {\r\n\t\t_transfer(msg.sender,_contributors[i], _balances[i]);\r\n\t\t}\r\n\t}\r\n\tfunction multisend( address[] calldata _contributors, uint256[] calldata _balances) external   {\r\n\t\tuint8 i = 0;\r\n\t\tfor (i; i < _contributors.length; i++) {\r\n\t\t_transfer(msg.sender,_contributors[i], _balances[i]);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction preSale( address[] calldata _contributors, uint256[] calldata _balances) external   {\r\n\t\tuint8 i = 0;\r\n\t\tfor (i; i < _contributors.length; i++) {\r\n\t\t_transfer(msg.sender,_contributors[i], _balances[i]);\r\n\t\t}\r\n\t}\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private lockTheSwap {\r\n\r\n        // generate the pancakeswap pair path of token -> wbnb\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeRouter.WETH();\r\n\r\n        if(allowance(address(this), address(pancakeRouter)) < tokenAmount) {\r\n          _approve(address(this), address(pancakeRouter), ~uint256(0));\r\n        }\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee, bool isSale) private {\r\n        if(takeFee){\r\n            if(isSale)\r\n            {\r\n            appliedFees = sellFees;\r\n            appliedFees.totFees += getAntiwhaleFee(_totSells[sender]);\r\n            }\r\n            else\r\n            {\r\n            appliedFees = buyFees;\r\n            }\r\n        }\r\n        \r\n        valuesFromGetValues memory s = _getValues(amount, takeFee);\r\n\r\n        if (_isExcluded[sender]) {\r\n            _tOwned[sender] -=amount;\r\n        } \r\n        if (_isExcluded[recipient]) {\r\n            _tOwned[recipient] += s.tTransferAmount;\r\n        }\r\n        _rOwned[sender] -= s.rAmount;\r\n        _rOwned[recipient] +=s.rTransferAmount;\r\n        \r\n        if(takeFee)\r\n            {\r\n             _takeSwapFees(s.rSwap,s.tSwap);\r\n             _reflectFee(s.rFee, s.tFee);\r\n             emit Transfer(sender, address(this), s.tSwap);\r\n            }\r\n        emit Transfer(sender, recipient, s.tTransferAmount);\r\n    }\r\n    \r\n    function txBNB() external onlyOwner {\r\n        address payable _owner = payable(msg.sender);\r\n        _owner.transfer(address(this).balance);\r\n    }\r\n\tfunction txBEP20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\r\n        address payable _owner = payable(msg.sender);\r\n\t\tIBEP20(tokenAddress).transfer(_owner, tokenAmount);\r\n    }\t\r\n    \r\n    function manualSwap() external onlyOwner{\r\n        uint256 tokensToSwap = balanceOf(address(this));\r\n        swapTokensForBNB(tokensToSwap);\r\n    }\r\n    \r\n    function manualSend() external onlyOwner{\r\n        swapAndSendToFees(balanceOf(address(this)));\r\n    }\r\n\r\n    // To be used for snipe-bots and bad actors communicated on with the community.\r\n    function badActorDefenseMechanism(address account, bool isBadActor) external onlyOwner{\r\n        _isBadActor[account] = isBadActor;\r\n    }\r\n    \r\n    function checkBadActor(address account) public view returns(bool){\r\n        return _isBadActor[account];\r\n    }\r\n    \r\n    function setRouterAddress(address newRouter) external onlyOwner {\r\n        require(address(pancakeRouter) != newRouter, 'Router already set');\r\n        //give the option to change the router down the line \r\n        IRouter _newRouter = IRouter(newRouter);\r\n        address get_pair = IFactory(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\r\n        //checks if pair already exists\r\n        if (get_pair == address(0)) {\r\n            pancakePair = IFactory(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        }\r\n        else {\r\n            pancakePair = get_pair;\r\n        }\r\n        pancakeRouter = _newRouter;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"swapEnabledUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC20Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"antiwhale_measures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"selling_threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extra_tax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBadActor\",\"type\":\"bool\"}],\"name\":\"badActorDefenseMechanism\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdropFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkBadActor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromPass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInPass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromPass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTrPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"preSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdropFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAirdropWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"selling_thresholds\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"extra_taxes\",\"type\":\"uint256[3]\"}],\"name\":\"setAntiwhaleMeasure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBurnWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdropFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxSellAmountPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTrAmountPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNumTokensTosSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellAirdropFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totFees\",\"type\":\"uint256\"}],\"name\":\"setTotalBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totSellFees\",\"type\":\"uint256\"}],\"name\":\"setTotalSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeesCharged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"txBEP20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SkyBiz", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b2986dcbf005c2a373e6040330d3669f0d38659c4795475bdfe89306898f11f"}