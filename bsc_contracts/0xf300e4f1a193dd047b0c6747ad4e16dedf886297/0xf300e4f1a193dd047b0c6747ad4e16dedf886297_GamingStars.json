{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GamingStars.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.5.16;\\n\\nimport './BEP20Token.sol';\\n\\n//                                                     `',''..``.',,~~;!;;;,,'`\\n//                                              `~;;;~;^*T}S6R&Q@@@@@@@@@@@@@@@@@@QQDwJ=~`\\n//                                          ~r^^^<T}EDBQQQQQQQWD6w5YJTTL*=?|?i7sywqgQ@@@@@@Qqt;`\\n//                                     .=***?JyURW#&BgqS}T<!;;;;;~~~__,,,'''..```      `';LyDQQQQWo=.\\n//                                  ~L|?iJykbDR%qm}\\\\=^r+r^^^!!~==,;},.=j5Y~    ;<!             ~?SW8WR5^`\\n//                               ;TT\\\\7}SUqqqXyz?=<<<<=^!!5X;wb~6Q6=QLiQ~*yo`  ,QTi; ;UK*`  `        ~tbDbUi'\\n//                            ~777JfSEXUwyJi?**??\\\\==JQR\\\\=QQYLQLYQ=qQm;bw}Ry.` ;J*Q<  W=  ,b%S  ,,       ~7wayL.\\n//                          LJJt}ySwESf7i????|??gQRJ=bBbRB}B=XY=5!~*^,,~;,...`.;*!  ~U  }&oES ;Q;}a        `*s7\\\\;\\n//                       .zttY}yoaajt7???iybbX7|DRbQ6Yg7ts;;_,,,,,,,,,,,,,''''.....````.,  ?y`&yQJ, bta~      .+|*r`\\n//                     .ttts}jyyy}ti*?T77fQoyKQoXQYiz^~~~~~!^^!!!;;;;;~~~,,,''..```     ``````` X``!;m,          ,^!;`\\n//                   .7tttY}fj}s7**\\\\tJz77zK#KRRJ?;~~;=?**<==+r^^!!!;;;;;~~~,,,''..```         ```  <iy'             ~~~.\\n//                  7JJJts}}}s7=*zttttJJz777s=~;;?iiL????***==+r^^!!!;;;;~~~~_,,''..```           ```                 ,,'`\\n//                +JJJzJtYYt7=*tttttttSXJJ*;;rT77T\\\\\\\\iiL?|??***==+r^^!^^r^^!!;~~,,,''..```            ```  .i            ..`\\n//               77777zJtt7^=JX%Ettttt}z;;=zz777777T\\\\\\\\iiL|?LzfSkkXXXXXkwwEEkXUXkways|!,.````             ``       ~!.     ``\\n//             !777777JJz+^7JmQbDgg}ti~;7ttJJJz77777TT\\\\ta66qEys7TTTTT77777777777777YyEqEj|~```             ``   ~%_.?b\\n//            |77T\\\\7777i;?jRSs5wbRgi_;JtttttttJJz777yqb65J7777777777777zzzzzzzJJJJJJJJJJsoq6}!``             .` ~b;Di!\\n//           \\\\TT\\\\iT777+;7tRBbg}Eyz~;7ttttttttttJJ}UDX}zzzJJJJJJJJJJJttttttttttttttttttttttttfU6i.`             `` ~!~';\\\\a,\\n//         .ii\\\\iiiT7\\\\;+7ggky6#8a;~7JtttttttttttyDDyJttttttzi?<=^^=*iztttttttttttttttJtttttttttJoDz.`             ` '=X75m\\n//        .LLiLLi\\\\T|,?77yB&ggfi,?JJJJttttttttYbgytttttL^~'```````````',~;;!!!!;;~,'...',;^|777777mb;``             `  Q= `?S\\n//        ??|?|ii\\\\*,|5&WbDQbt!,7zJJtJJJttttt}WXtttJ7;.`````````````````````````````````````.~<77TTtR|```            `  7awW~       `\\n//       **???Lii=,L\\\\TtEg%o7,!7777zJJJJJJJtf#y777i~                                 ``````````'riii\\\\D?````              +Qziyw,    ```\\n//      =<**?|L?*'|X8RDDKw7'=7777777zJJJJJtWE777*`                                              ~???LWr..```             ,jS*`      ..`\\n//     ;+=<??|?*'<|Jb8KgY\\\\'*7777777777zJJJkg\\\\i\\\\?`                                                ;===7W,...```            _r}R}U.   `',\\n//     ^^+*??**,;i5s}fKDi'=\\\\TT7777777777zzW5||?'                                                 .r^^^Us''..````          'g`<' '    ',~\\n//    !!!=??*=~'LQmSW&S|,^ii\\\\\\\\TT777777777sQ\\\\**r                                                   ;!;;TR,,,'...```         `., S5=    _~,\\n//   ';;^*??r^`^*&6Sw&y!~|Liii\\\\\\\\TT7777777}Q*++,                                                   ,;;~^Q!_,,'''..```        iU;g B    ,;^\\n//   ~;;=*?=!',r+*t5y\\\\*.???|iiii\\\\\\\\TT77777}Q+!!`                                                   `,,,~Q^~~~,,'''..```       *t;       ;r;\\n//   ~~;*??!; !^^r+==<_;*????|Liii\\\\\\\\TT777tQr;;             `~,,..` `          ```..,,~.            ```,Q!;;~~_,,,''..```               ;=?\\n//  ,_~^*?+;'.!!!^^r+r'=***????|Liii\\\\\\\\TT77B?~~   ,;;;~;;~;;~!=Li7J^,'',~~~~,,,~?J7i|+!~;~~;;;;;;,     ;g;;;;~~~~,,,''..```             '<|;\\n//  ,,~=*?!~ ~;;!!^X7~,==<***????|Liii\\\\\\\\\\\\7R7''~|=,````````````````;|=        ??~````````````````_*?,  ?D7*;;;;~~~~,,'''..```  ,\\\\        *ii\\n//  ,,~*??~~ ~;;;;!!!';r+==<**?????|LiTXm7ma`yi;;;;;;;;;;;;;;;;;;;;;+S~~,,~~X!;;;;;;;;;;;;;;;;;;;;;s= mr`r6<;;;;~~~~,,'''..`  `'      ` ?Tt\\n//  '';*??,' ~~~;;;;!'!^^r+==<**?????|q7  'WwmiiiiiiiiiiiiiiiiiiiiiiiK     .6iiiiiiiiiiiiiiiiiiiiiiiq7W   ~q!!;;;;;~~~,,,''.` ``      . ?7},\\n// `'';??<,. _Tt^wm*;'!!!^^r+==<**????g;   bW5JJJJJJJJJJJJJJJJJJJJJJYy      KtJJJJJJJJJJJJJJJJJJJJJJ6qb   `g!!!!;;;;~~~~,,,'. .`._,`  . <Jf;\\n// ...!??=,``~QjbJqX~';;!!!^^r+==<***?D^   }gk7777777777777777777777q`      ;X7777777777777777777777KK|   _Kr^^!!!;;;;;~~~,,, '?D}Yb? . +sy<\\n// `..;?|='` ,!7?;7!~,;;;;!!!^^r+==<**mj   *8o=!!!!!!!!!!!!!!!!!!!rkL        |S!!!!!!!!!!!!!!!!!!!!\\\\zg    }y=+r^^!!!;;;;;~~~, ,Xkqryb`'`<}a?\\n//  ``;?L*'` 'YKbjqf~,~~;;;;!!!^^r+==<i#.  !W.Y'                 ,i;`         fz'                 ~T_L    W|<==+r^^!!!;;;;;~~ ,=zy;7,`'`iyw=\\n//  ``~?L|.` 'baXQX},,~~~~;;;;!!!^^r++=5k  ,m! !~               !, !          `';;               ;~ Y'   KY?**<==+r^^!!!;;;;~ ~5QXt^,.,`J5k^\\n//   `'|ii'. .;+!^TS~,,_~~~~;;;;!!!^^r+=D*``_6   _,          ',`  ;            `  ',.         `,,   W   =q|??***<==+r^^!!!;;' !}QS&Q7','fSU~\\n//    `*ii_` `,TEURy,,_,,_~~~~;;;;!!!^^r7W.`.D`     `,,~;~,'     '              ``    ',~;~,,`     ~j   8ti|?????**==+r^^!!! ,7oT^;~,,,;yEX'``\\n//     !i\\\\!`  'aXmbRt'~,,,,_~~~~;;;;;!!^^D*`.77                 ;                ;                 j~  !D\\\\\\\\ii|???***<==+r^^! !sqW#Dj~_,?oXY..`\\n//     'i\\\\i`` `.,..','_,,,,,,_~~~~;;;;;!!iD<~!#                 ; `|t^      =<`  ;                 Q!~ibtTT\\\\\\\\ii|???***<==+r''LWQwJ\\\\+~,;Ym6<''\\n//      =T7;   ,g}wEkL';'',,,,,_~~~~;;;;;!^T}jq|                      `   `~'`                    ;Rf}z77777T\\\\\\\\iiL????**<=^`rXKRQD7;~~*ykw~,,\\n//      ,77\\\\`  `7s.`'~',~''',,,,,_~~~~;;;;;!!^<W                                                  UmJJJz77777TT\\\\\\\\ii|????**';ySfstfT;,!soUi~~`\\n//       =7J!   `,\\\\,Bob;;,'''',,,,,_~~~~;;;;!!!}j                                                 QYtttJJz77777TT\\\\iii|???!~75f5Uby^,;ijmo;;~\\n//       `7JJ'   !WiQ,k!.;'.'''',,,,,_~~~~;;;;!!b,                               ````            |KttttttJJz777777T\\\\iiiL=_?JEDgqf+;,<Y5k*;;\\n//        ;ts7`   '!,````.;'..'''',,,,,_~~~~;;;;+b              ``` ``````  `~!!!!;,'`           XfttttttttJJz777777T\\\\i*~LRBBbmy7!,<7fSY!!~\\n//         =Y}i      `,Js=';'...'''',,,,,_~~~~;;;?f           `   `'~;;!^r*f=!,'.'';!'          ;bYfs}sttttttJJz77777T?;iYaEkDRt<'=\\\\syy=^!\\n//          i}f?     X<m\\\\Sw`;,`...'''',,,,,_~~~~;;|}                   ````_+;~'`            `.,bJzY?stttttttttJJz777*^t8bUD#z|*'=L7}j*=r\\n//           ijyL    LK|7DL.,_~``....''',,,,,_~~~~;<y'`                     _;;~.          ,~~=K5^t<!ttttttttttttJJ7=*7jQWXyQj*'+?\\\\JY|*<\\n//            iy5?    `~;=oQb`';.`....'''',,,,,__~~~=E=__'`                  =;;~.       ,|*?yK}};J=;Jtttttttttttt7=7z77}yE6}=.<*L7JL?*.\\n//             ?oa7`    a7=g!?f.;_```....''',,,,,_~~~;ja?<*+;,.``````````    '=;~~,        zbwzzt~t+!JJtttttttttJ??SRbYt7777;'?=*i7i|?`\\n//              ^amy'     bBX*;}^';,``.....'''',,,,_~~~=mwz777T*^;~__,,,,,,,,';=;~~~        \\\\777<|i=tJJJttttttti*7tQ%DRBqzT,~?^=?\\\\\\\\ii\\n//               ,okk?    ,.^Uw~+S''~,``.....'''',,,,__~~r5UjtttttJ7i|*<===<?|\\\\Y=;~;~`       7Y7tzzzJJJJJJJJJ|*7UU}}5yRRo=.*^;^*i7T?\\n//                 zXX5,    ^';D85aX`'~,```....'''',,,,_~~~!YEk}77777TTTTT\\\\\\\\\\\\\\\\\\\\\\\\tr;~~;'   `Lf5Y777777zJJJJz??zXYfKQUwUt7,~*~;!=\\\\77;\\n//                  ;E6q?     t7!,DfE}~,,,.``....''',,,,,,~~~~^z5mosi???******<|tkr;~;;;<'    .z7777777z\\\\**tYqQDttaQKY~'*;,~;?zz7\\n//                    *6Kq*      5QS,'Qa'',,,.`....'''',,,,,_~~~~;!?Jfjjyyyyyyoyz|7=T^,        y77777|==LEXq&QKQ6J}t~'=;'',^7tJ=\\n//                     `fDRb*    `'  wSyQm^_~,'''....'''',,,,,_~~~;;;;;!!!^^+===<**}?        .TTTT<r+?tKbDQDsjXRX7~,r;..'~itt7\\n//                       ,mgWRi     `mmr`'R%tD?`.'''...'''',,,,,_~~~;;;;;!!!^r++==<*iL~,.~^i7Lr!!^?wbDf7UQwWWsz?_,r~```,<JtJ.\\n//                         ,o8&8s,  `    o7!~Ew ````......'',,,,,__~~~;;;;;!!!^r+===<***r;~;;;=i\\\\\\\\JQ%KR6}KbX7;,~^,  `'rztt,\\n//                            L8QQ%i. ````*}f*`   ``?L`...`````````.'',,_~~~~~,,''',,,,~;=??Xy|Liii\\\\jDRK7i;~;^_    _?JJ7.\\n//                              !6QQQb*` ```        `````.,kym\\\\'?L+,',``````,''~|^LwUX}=<***????|Liiiz*;;;^;.   `~LzzL\\n//                                `|DQQQD7_ `...      ````'amY+'=|Q\\\\iQ*#RJQ=gRoRb*QRa\\\\B}==<**????|*!;;!^;'`  `,=777~\\n//                                    *UQ@@Qb7;``.'''`  ``*q5#!,LyQ;zQW=yQB~!WXQL;YqyEWir+====^!!!!r!_'.``.~*T77!\\n//                                       ;sg@@@@WaL;..'',,,,,.`;iz7'?U*,,Uk,_^Eo~;;=i?^!!!!!!^++!;~,,''~!*\\\\\\\\\\\\~\\n//                                           !}D@@@@@Qby\\\\^~,,,,_~~~~~;;~;;;;;;;;;;;!!!^+=***<+!;;~~;!=?|L*'\\n//                                               '+YbQ@@@@@@QBDXaft7i?|?**?||i\\\\7JY}jjjjY7TL*=r^^^=<**r.\\n//                                                     .;<7o6%BQ@@QQQQQQQB&8WgRRDKXo}7i*+^!!!!^^;`\\n//                                                              `',~;!!+==+^!!;;~~,,_~~~~~'\\n//                                                                    ```...```\\n//                              ________               .__                   _________ __\\n//                              /  _____/_____    _____ |__| ____    ____    /   _____//  |______ _______  ______\\n//                              /   \\\\  ___\\\\__  \\\\  /     \\\\|  |/    \\\\  / ___\\\\   \\\\_____  \\\\\\\\   __\\\\__  \\\\\\\\_  __ \\\\/  ___/\\n//                              \\\\    \\\\_\\\\  \\\\/ __ \\\\|  Y Y  \\\\  |   |  \\\\/ /_/  >  /        \\\\|  |  / __ \\\\|  | \\\\/\\\\___ \\\\\\n//                              \\\\______  (____  /__|_|  /__|___|  /\\\\___  /  /_______  /|__| (____  /__|  /____  >\\n//                                      \\\\/     \\\\/      \\\\/        \\\\//_____/           \\\\/           \\\\/           \\\\/\\n\\ncontract GamingStars is BEP20Token('Gaming Stars', 'GAMES', 102_000_000 * 1e18) {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/BEP20Token.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.5.16;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\ncontract BEP20Token is Context, IBEP20, Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n    string private _symbol;\\n    string private _name;\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 totalSupply_\\n    ) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _totalSupply = totalSupply_;\\n        _balances[msg.sender] = totalSupply_;\\n\\n        emit Transfer(address(0), msg.sender, totalSupply_);\\n    }\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address) {\\n        return owner();\\n    }\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-totalSupply}.\\n     */\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-balanceOf}.\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {BEP20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-allowance}.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {BEP20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {BEP20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance')\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {BEP20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {BEP20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero')\\n        );\\n        return true;\\n    }\\n\\n    // /**\\n    //  * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\n    //  * the total supply.\\n    //  *\\n    //  * Requirements\\n    //  *\\n    //  * - `msg.sender` must be the token owner\\n    //  */\\n    // function mint(uint256 amount) public onlyOwner returns (bool) {\\n    //     _mint(_msgSender(), amount);\\n    //     return true;\\n    // }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), 'BEP20: transfer from the zero address');\\n        require(recipient != address(0), 'BEP20: transfer to the zero address');\\n\\n        _balances[sender] = _balances[sender].sub(amount, 'BEP20: transfer amount exceeds balance');\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), 'BEP20: mint to the zero address');\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), 'BEP20: burn from the zero address');\\n\\n        _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), 'BEP20: approve from the zero address');\\n        require(spender != address(0), 'BEP20: approve to the zero address');\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(\\n            account,\\n            _msgSender(),\\n            _allowances[account][_msgSender()].sub(amount, 'BEP20: burn amount exceeds allowance')\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GamingStars", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}