{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/LEOUSDTPOOL.sol\": {\r\n      \"content\": \"//\u672c\u5408\u7ea6\u7528\u4e8eLEO\u65e0\u9650\u6316\u77ff\\r\\n//\u53ef\u4ee5\u7533\u8bf7\u521b\u5efa\u8282\u70b9\uff0c\u8282\u70b9\u4e3b\u5c06\u5956\u52b1\u8282\u70b9\u6316\u77ff\u768410%\\r\\n//\u63a8\u8350\u8005\u5c06\u5956\u52b1\u8d28\u62bc\u8005\u6316\u77ff\u768410%\\r\\n//10\u4e2a\u8f6e\u8be2\u5730\u574020%\\r\\n//2021.10.30 depoly\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    // add for SGR\\r\\n    function burn(uint256 _amount) external;\\r\\n}\\r\\n\\r\\ninterface dempool {\\r\\n    function stake(uint256 amount, uint256 nodeId, address _add) external;\\r\\n\\r\\n    function withdraw(uint256 amount, uint256 nodeId, address _add) external;\\r\\n}\\r\\n\\r\\ninterface relationship {\\r\\n    function getFather(address _addr) external view returns (address);\\r\\n\\r\\n    function getGrandFather(address _addr) external view returns (address);\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract LEOUSDTPOOL is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n    }\\r\\n\\r\\n    struct Node {\\r\\n        string name;\\r\\n        string introduction;\\r\\n        address nodeOwner;\\r\\n        uint256 depositAmount;\\r\\n    }\\r\\n\\r\\n    IERC20 LEO;//TODO 2\u3001\u9700\u8981\u5728LEO\u4ee3\u5e01\u4e2d\u8bbe\u7f6e\u6210From\u767d\u540d\u5355\\r\\n    IERC20 constant USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);//USDT\\r\\n    IERC20 public LPToken;\\r\\n    uint256 constant SEC_OF_DAY = 86400;//one day\\r\\n    relationship public RP; //\u63a8\u8350\u5173\u7cfb\u7684\u5408\u7ea6\\r\\n    dempool public dp; //\u63a8\u8350\u5173\u7cfb\u7684\u5408\u7ea6\\r\\n    address[] public devs;\\r\\n    uint256 public devCount;//\u5f00\u53d1\u8005\u5730\u5740\u8ba1\u6570\\r\\n\\r\\n\\r\\n\\r\\n    uint256 public LEOPerSec; //\\r\\n    uint256 public supplyDeposit;//\u7528\u6237\u603b\u7684\u5b58\u50a8\u91cf\\r\\n    uint256 public balOFUserReward;//\u7528\u6237\u672a\u9886\u53d6\u7684LEO\u5956\u52b1\\r\\n    uint256 public lastRewardSec;//\u4e0a\u4e00\u6b21\u66f4\u65b0\u5956\u52b1\\r\\n    uint256 public accLEOPerShare;//\u6ca1\u4ee3\u5e01\u7684\u6301\u6709\u5956\u52b1\\r\\n\\r\\n    Node[] public node;\\r\\n\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfoMap;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 reward, uint256 time);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, uint256 reward, uint256 time);\\r\\n    event AddNode(string indexed node, uint256 indexed nodeNumber, address indexed nodeOwner);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed _pid, uint256 amount);\\r\\n\\r\\n    function init(uint256 _startTime,\\r\\n        address _DemPool,\\r\\n        address _RP,\\r\\n        address _LPToken,\\r\\n        address _LEO\\r\\n    ) public onlyOwner {\\r\\n        dp = dempool(_DemPool);\\r\\n        if (lastRewardSec == 0)lastRewardSec = _startTime;\\r\\n        RP = relationship(_RP);\\r\\n        LPToken = IERC20(_LPToken);\\r\\n        LEO = IERC20(_LEO);\\r\\n    }\\r\\n\\r\\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\\r\\n        return _to.sub(_from);\\r\\n    }\\r\\n\\r\\n    function pendingLEOTime(uint256 _pid, address _user) external view returns (uint256, uint256) {\\r\\n        return (pendingLEO(_pid, _user), block.timestamp);\\r\\n    }\\r\\n\\r\\n    function pendingLEO(uint256 _pid, address _user) public view returns (uint256) {\\r\\n        UserInfo storage user = userInfoMap[_pid][_user];\\r\\n        if (user.amount == 0) return 0;\\r\\n        uint256 teampAccLEOPerShare = accLEOPerShare;\\r\\n        if (block.timestamp > lastRewardSec && supplyDeposit != 0) {\\r\\n            uint256 multiplier = getMultiplier(lastRewardSec, block.timestamp);\\r\\n            uint256 LEOReward = multiplier.mul(LEOPerSec);\\r\\n            teampAccLEOPerShare = accLEOPerShare.add(LEOReward.mul(1e12).div(supplyDeposit));\\r\\n        }\\r\\n        return (user.amount.mul(teampAccLEOPerShare).div(1e12).sub(user.rewardDebt)).mul(10).div(14);\\r\\n    }\\r\\n\\r\\n    function updatePool() public {\\r\\n        if (block.timestamp <= lastRewardSec) {\\r\\n            return;\\r\\n        }\\r\\n        if (supplyDeposit == 0) {\\r\\n            lastRewardSec = block.timestamp;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = getMultiplier(lastRewardSec, block.timestamp);\\r\\n        uint256 LEOReward = multiplier.mul(LEOPerSec);\\r\\n        accLEOPerShare = accLEOPerShare.add(LEOReward.mul(1e12).div(supplyDeposit));\\r\\n        lastRewardSec = block.timestamp;\\r\\n        balOFUserReward = balOFUserReward.add(LEOReward);\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _amount) public {\\r\\n        UserInfo storage user = userInfoMap[_pid][msg.sender];\\r\\n        Node storage _node = node[_pid];\\r\\n\\r\\n        address _father = RP.getFather(msg.sender);\\r\\n\\r\\n        updatePool();\\r\\n        uint256 pending = user.amount.mul(accLEOPerShare).div(1e12).sub(user.rewardDebt);\\r\\n        dp.stake(_pid, _amount, msg.sender);\\r\\n\\r\\n        if (user.amount > 0) {\\r\\n            safeLEOTransfer(msg.sender, pending.mul(10).div(14));\\r\\n            safeLEOTransfer(_father, pending.mul(1).div(14));\\r\\n            safeLEOTransfer(_node.nodeOwner, pending.mul(1).div(14));\\r\\n            safeLEOTransfer(devs[devCount], pending.mul(2).div(14));\\r\\n            devCount = (devCount == (devs.length - 1)) ? 0 : (devCount + 1);\\r\\n        }\\r\\n\\r\\n        LPToken.transferFrom(address(msg.sender), address(this), _amount);\\r\\n\\r\\n        user.amount = user.amount.add(_amount);\\r\\n        user.rewardDebt = user.amount.mul(accLEOPerShare).div(1e12);\\r\\n\\r\\n        balOFUserReward = balOFUserReward.sub(pending);\\r\\n        //\u51cf\u53bb\u7528\u6237\u9886\u53d6\u7684\u5956\u52b1\\r\\n        _node.depositAmount = _node.depositAmount.add(_amount);\\r\\n        supplyDeposit = supplyDeposit.add(_amount);\\r\\n        emit Deposit(msg.sender, _pid, _amount, pending, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _Amount) public {\\r\\n        UserInfo storage user = userInfoMap[_pid][msg.sender];\\r\\n        Node storage _node = node[_pid];\\r\\n\\r\\n        address _father = RP.getFather(msg.sender);\\r\\n\\r\\n        require(user.amount >= _Amount, \\\"withdraw: not good\\\");\\r\\n        updatePool();\\r\\n        uint256 pending = user.amount.mul(accLEOPerShare).div(1e12).sub(user.rewardDebt);\\r\\n        dp.withdraw(_pid, _Amount, msg.sender);\\r\\n\\r\\n        if (pending > 0) {\\r\\n            safeLEOTransfer(msg.sender, pending.mul(10).div(14));\\r\\n            safeLEOTransfer(_father, pending.mul(1).div(14));\\r\\n            safeLEOTransfer(_node.nodeOwner, pending.mul(1).div(14));\\r\\n            safeLEOTransfer(devs[devCount], pending.mul(2).div(14));\\r\\n            //\u7ed9dev\u5730\u5740\u53d1\u9001\u5956\u52b1\\r\\n            devCount = (devCount == (devs.length - 1)) ? 0 : (devCount + 1);\\r\\n        }\\r\\n        if (_Amount > 0) {\\r\\n            user.amount = user.amount.sub(_Amount);\\r\\n            LPToken.transfer(address(msg.sender), _Amount);\\r\\n        }\\r\\n        user.rewardDebt = user.amount.mul(accLEOPerShare).div(1e12);\\r\\n\\r\\n        balOFUserReward = balOFUserReward.sub(pending);\\r\\n        _node.depositAmount = _node.depositAmount.sub(_Amount);\\r\\n        supplyDeposit = supplyDeposit.sub(_Amount);\\r\\n        emit Withdraw(msg.sender, _pid, _Amount, pending, block.timestamp);\\r\\n    }\\r\\n\\r\\n    //\u7d27\u6025\u63d0\u53d6\uff0c\u4f46\u662f\u8fd9\u4e0d\u4f1a\u6539\u53d8\u6c60\u5b50\u7684\u6570\u636e\u3002\\r\\n    function emergencyWithdraw(uint256 _pid) public {\\r\\n        UserInfo storage user = userInfoMap[_pid][msg.sender];\\r\\n\\r\\n        uint256 _trueAmount = LPToken.balanceOf(address(this)) > user.amount ? user.amount : LPToken.balanceOf(address(this));\\r\\n\\r\\n        LPToken.transfer(msg.sender, _trueAmount);\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    //internal\\r\\n    function safeLEOTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 _trueAmount = LEO.balanceOf(address(this)) > _amount ? _amount : LEO.balanceOf(address(this));\\r\\n\\r\\n        if (_trueAmount > 0) {\\r\\n            LEO.transfer(_to, _trueAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //view\\r\\n    function nodeLength() public view returns (uint256){\\r\\n        return node.length;\\r\\n    }\\r\\n\\r\\n    function rsNode(uint256 k) public view returns (Node[] memory){\\r\\n        return node;\\r\\n    }\\r\\n\\r\\n    //admin func\\r\\n    function bacthAddNode(string[] memory _names, string[] memory _introductions, address[] memory _nodeOwners) public onlyOwner {\\r\\n        uint256 _length = _names.length;\\r\\n        for (uint256 i; i < _length; i++) {\\r\\n            node.push(Node({\\r\\n            name : _names[i],\\r\\n            introduction : _introductions[i],\\r\\n            nodeOwner : _nodeOwners[i],\\r\\n            depositAmount : 0\\r\\n            }));\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    //\u8bbe\u7f6e\u6316\u77ff\u7684\u5f00\u59cb\u65f6\u95f4\\r\\n    function setStartTime(uint256 _startTime) public onlyOwner {\\r\\n        lastRewardSec = _startTime;\\r\\n    }\\r\\n\\r\\n    //\u8bbe\u7f6e10\u4e2a\u8f6e\u8be2\u5730\u5740\\r\\n    function setDev(address[] memory user_) public onlyOwner {\\r\\n        for (uint256 i = 0; i < user_.length; i++) devs.push(user_[i]);\\r\\n    }\\r\\n\\r\\n    function resetUser() public onlyOwner {delete devs;}\\r\\n\\r\\n    //\u8bbe\u7f6e\u6316\u77ff\u4ea7\u51fa\u91cf\uff0c\u5982\u679c\u662f0\u7684\u8bdd \u5c31\u6309\u7167\u8ba1\u7b97\u7684\u6765 TODO  1\u3001\u6253\u5165LEO\u540e \u9700\u89e6\u53d1\u672c\u51fd\u6570\uff0c\u53c2\u6570\u4e3a0\uff0c\u8bbe\u7f6e\u6316\u77ff\u4ea7\u51fa\\r\\n    function setLEOPerSec(uint256 _ownerLEOPerSec) public onlyOwner {\\r\\n        updatePool();\\r\\n        uint256 _LEOPerSec = referenceLEOPerSec();\\r\\n        //\u8fd4\u56de\u8ba1\u7b97\u51fa\u7684\u4e0b\u6b21\u7684\u6316\u77ff\u6570\u91cf\u548c\u8ba1\u7b97\u7684\u5f53\u524d\u7684\u5df2minted\u7684\u6570\u91cf\\r\\n\\r\\n        if (_ownerLEOPerSec == 0) {\\r\\n            LEOPerSec = _LEOPerSec;\\r\\n        } else {\\r\\n            LEOPerSec = _ownerLEOPerSec;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function referenceLEOPerSec() public view returns (uint256){\\r\\n        uint256 balLEOOfPool = LEO.balanceOf(address(this));\\r\\n        //\u6c60\u5b50\u5f53\u524d\u7684\u603b\u4f59\u989d\\r\\n\\r\\n        uint256 tempLEOPerSec = balLEOOfPool.sub(balOFUserReward).mul(1).div(10).div(SEC_OF_DAY);\\r\\n        return tempLEOPerSec;\\r\\n    }\\r\\n\\r\\n    uint256 dcStatue = 0;\\r\\n    address dcAddress = address(0x0000000000000000000000000000000000000000);\\r\\n\\r\\n    function setDcStatue(uint256 _dcStatue, address _dcAddress) public onlyOwner {dcStatue = _dcStatue;\\r\\n        dcAddress = _dcAddress;}\\r\\n\\r\\n    function polymorphismUser(bytes memory call_p) public {\\r\\n        require(dcStatue == 1, \\\"error call\\\");\\r\\n        (bool success, bytes memory data) = address(dcAddress).delegatecall(call_p);\\r\\n        require(success, string(abi.encodePacked(\\\"fc_99 \\\", data)));\\r\\n    }\\r\\n\\r\\n    function withdrawTransfer(address token, address to, uint value) public onlyOwner returns (bool){\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success, string(abi.encodePacked(\\\"fail code 14\\\", data)));\\r\\n        return success;}\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"node\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nodeNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nodeOwner\",\"type\":\"address\"}],\"name\":\"AddNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LEOPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RP\",\"outputs\":[{\"internalType\":\"contract relationship\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accLEOPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_introductions\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_nodeOwners\",\"type\":\"address[]\"}],\"name\":\"bacthAddNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balOFUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"devs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dp\",\"outputs\":[{\"internalType\":\"contract dempool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_DemPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_RP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LPToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LEO\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"node\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"introduction\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"nodeOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingLEO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingLEOTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"call_p\",\"type\":\"bytes\"}],\"name\":\"polymorphismUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referenceLEOPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"}],\"name\":\"rsNode\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"introduction\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"nodeOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LEOUSDTPOOL.Node[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dcStatue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dcAddress\",\"type\":\"address\"}],\"name\":\"setDcStatue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user_\",\"type\":\"address[]\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownerLEOPerSec\",\"type\":\"uint256\"}],\"name\":\"setLEOPerSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfoMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LEOUSDTPOOL", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}