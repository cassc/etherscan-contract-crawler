{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-03-20\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    struct UserInfo {\r\n        uint256 lpAmount;\r\n        bool preLP;\r\n    }\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address private fundAddress;\r\n    address private fundAddress2;\r\n    address private fundAddress3;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) private _feeWhiteList;\r\n    mapping(address => bool) public _blackList;\r\n    mapping(address => bool) public _bWList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter private immutable _swapRouter;\r\n    address private immutable _usdt;\r\n    TokenDistributor private immutable _tokenDistributor;\r\n    address public immutable _mainPair;\r\n\r\n    mapping(address => bool) private _swapPairList;\r\n    mapping(address => address) public upper;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 public _buyDestroyFee = 200; //\u9500\u6bc1\r\n    uint256 public _buyFundFee = 150; //BOT\r\n    uint256 public _buyFundFee2 = 100; //\u62a4\u76d8\r\n    uint256 public _buyFundFee3 = 0;\r\n    uint256 public _buyLPDividendFee = 150;\r\n    uint256 public _buyLPFee = 0;\r\n    uint256 public _buyBuybackFee = 0;\r\n    uint256 public _buyTeamFee = 400;\r\n\r\n    uint256 public _sellDestroyFee = 200; //\u9500\u6bc1\r\n    uint256 public _sellFundFee = 150; //BOT\r\n    uint256 public _sellFundFee2 = 100; //\u62a4\u76d8\r\n    uint256 public _sellFundFee3 = 0;\r\n    uint256 public _sellLPDividendFee = 150;\r\n    uint256 public _sellLPFee = 0;\r\n    uint256 public _sellBuybackFee = 0;\r\n    uint256 public _sellTeamFee = 400;\r\n\r\n    uint256 public _transferFee = 0;\r\n    uint256[] public teamRate = [500, 125, 125, 125, 125];\r\n    uint256 public bindAmount = 1 * 1e18;\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 public startTradeTime;\r\n    uint256 public startAddLPBlock;\r\n    uint256 public startBWBlock;\r\n\r\n    uint256 public _limitAmount;\r\n    uint256 public _txLimitAmount;\r\n    uint256 public _minTotal;\r\n\r\n    address public _receiveAddress;\r\n\r\n    uint256 public _airdropLen = 0;\r\n    uint256 public _airdropAmount = 0;\r\n\r\n    uint256 public _removeLPFee = 0;\r\n    uint256 public _addLPFee = 0;\r\n    address public _lpFeeReceiver;\r\n\r\n    uint256 private constant _killBlock = 3;\r\n\r\n    address public _buybackToken;\r\n    mapping(address => UserInfo) private _userInfo;\r\n\r\n    uint256 public _lpFeePerTime = 500;\r\n    uint256 public _lpFeeTimeDuration = 24 hours;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(\r\n        address RouterAddress,\r\n        address USDTAddress,\r\n        address BuybackToken,\r\n        string memory Name,\r\n        string memory Symbol,\r\n        uint8 Decimals,\r\n        uint256 Supply,\r\n        address FundAddress,\r\n        address FundAddress2,\r\n        address FundAddress3,\r\n        address ReceiveAddress,\r\n        uint256 LimitAmount,\r\n        uint256 MinTotal,\r\n        uint256 TxLimitAmount\r\n    ) {\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        address usdt = USDTAddress;\r\n        IERC20(usdt).approve(address(swapRouter), MAX);\r\n\r\n        _usdt = usdt;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address usdtPair = swapFactory.createPair(address(this), usdt);\r\n        _swapPairList[usdtPair] = true;\r\n        _mainPair = usdtPair;\r\n        _buybackToken = BuybackToken;\r\n\r\n        uint256 total = Supply * 10 ** Decimals;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        _receiveAddress = ReceiveAddress;\r\n        _lpFeeReceiver = ReceiveAddress;\r\n        fundAddress = FundAddress;\r\n        fundAddress2 = FundAddress2;\r\n        fundAddress3 = FundAddress3;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[FundAddress2] = true;\r\n        _feeWhiteList[FundAddress3] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[\r\n            address(0x000000000000000000000000000000000000dEaD)\r\n        ] = true;\r\n\r\n        _limitAmount = LimitAmount * 10 ** Decimals;\r\n        _txLimitAmount = TxLimitAmount * 10 ** Decimals;\r\n\r\n        _tokenDistributor = new TokenDistributor(usdt);\r\n\r\n        _minTotal = MinTotal * 10 ** Decimals;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[\r\n            address(0x000000000000000000000000000000000000dEaD)\r\n        ] = true;\r\n        uint256 usdtUnit = 10 ** IERC20(usdt).decimals();\r\n        holderRewardCondition = 10 * usdtUnit;\r\n\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return\r\n            _tTotal -\r\n            _balances[address(0)] -\r\n            _balances[address(0x000000000000000000000000000000000000dEaD)];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 balance = _balances[account];\r\n        return balance;\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        if (upper[to] == address(0) && amount >= bindAmount) {\r\n            if (\r\n                _swapPairList[to] == false &&\r\n                _swapPairList[from] == false &&\r\n                to != address(0)\r\n            ) {\r\n                upper[to] = from;\r\n            }\r\n        }\r\n        require(!_blackList[from] || _feeWhiteList[from], \"blackList\");\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n        bool takeFee;\r\n        bool isAddLP;\r\n        bool isRemoveLP;\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            takeFee = true;\r\n        }\r\n\r\n        uint256 addLPLiquidity;\r\n        if (to == _mainPair) {\r\n            uint256 addLPAmount = amount;\r\n            if (!_feeWhiteList[from]) {\r\n                addLPAmount -= (amount * _addLPFee) / 10000;\r\n            }\r\n            addLPLiquidity = _isAddLiquidity(addLPAmount);\r\n            if (addLPLiquidity > 0) {\r\n                UserInfo storage userInfo = _userInfo[from];\r\n                userInfo.lpAmount += addLPLiquidity;\r\n                isAddLP = true;\r\n            }\r\n        }\r\n\r\n        uint256 removeLPLiquidity;\r\n        if (from == _mainPair) {\r\n            removeLPLiquidity = _isRemoveLiquidity(amount);\r\n            if (removeLPLiquidity > 0) {\r\n                require(_userInfo[to].lpAmount >= removeLPLiquidity, \">userLP\");\r\n                _userInfo[to].lpAmount -= removeLPLiquidity;\r\n                isRemoveLP = true;\r\n            }\r\n        }\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (0 == startAddLPBlock) {\r\n                if (_feeWhiteList[from] && to == _mainPair) {\r\n                    startAddLPBlock = block.number;\r\n                }\r\n            }\r\n\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                if (0 == startTradeBlock) {\r\n                    if (startBWBlock > 0 && (_bWList[to])) {} else {\r\n                        require(0 < startAddLPBlock && isAddLP, \"!Trade\");\r\n                    }\r\n                } else {\r\n                    if (\r\n                        !isAddLP &&\r\n                        !isRemoveLP &&\r\n                        block.number < startTradeBlock + _killBlock\r\n                    ) {\r\n                        _funTransfer(from, to, amount, 99);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isAddLP, isRemoveLP);\r\n\r\n        if (from != address(this)) {\r\n            if (isAddLP) {\r\n                addHolder(from);\r\n            } else if (!_feeWhiteList[from]) {\r\n                processReward(500000);\r\n            }\r\n        }\r\n    }\r\n\r\n    address private lastAirdropAddress;\r\n\r\n    function _airdrop(address from, address to, uint256 tAmount) private {\r\n        uint256 seed = (uint160(lastAirdropAddress) | block.number) ^\r\n            (uint160(from) ^ uint160(to));\r\n        address airdropAddress;\r\n        uint256 num = _airdropLen;\r\n        uint256 airdropAmount = _airdropAmount;\r\n        for (uint256 i; i < num; ) {\r\n            airdropAddress = address(uint160(seed | tAmount));\r\n            _balances[airdropAddress] += airdropAmount;\r\n            emit Transfer(airdropAddress, airdropAddress, airdropAmount);\r\n            unchecked {\r\n                ++i;\r\n                seed = seed >> 1;\r\n            }\r\n        }\r\n        lastAirdropAddress = airdropAddress;\r\n    }\r\n\r\n    function _isAddLiquidity(\r\n        uint256 amount\r\n    ) internal view returns (uint256 liquidity) {\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = (amount * rOther) / rThis;\r\n        }\r\n        //isAddLP\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity, ) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n    function calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint256 r0,\r\n        uint256 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();\r\n        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = ISwapPair(_mainPair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(r0 * r1);\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = pairTotalSupply *\r\n                        (rootK - rootKLast) *\r\n                        8;\r\n                    uint256 denominator = rootK * 17 + (rootKLast * 8);\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n    function _getReserves()\r\n        public\r\n        view\r\n        returns (uint256 rOther, uint256 rThis, uint256 balanceOther)\r\n    {\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1, ) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n\r\n        balanceOther = IERC20(tokenOther).balanceOf(_mainPair);\r\n    }\r\n\r\n    function _isRemoveLiquidity(\r\n        uint256 amount\r\n    ) internal view returns (uint256 liquidity) {\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther <= rOther) {\r\n            liquidity =\r\n                (amount * ISwapPair(_mainPair).totalSupply() + 1) /\r\n                (balanceOf(_mainPair) - amount - 1);\r\n        }\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 fee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = (tAmount * fee) / 100;\r\n        if (feeAmount > 0) {\r\n            _takeTransfer(sender, fundAddress, feeAmount);\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isAddLP,\r\n        bool isRemoveLP\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            if (isAddLP) {\r\n                feeAmount = (tAmount * _addLPFee) / 10000;\r\n                _takeTransfer(sender, _lpFeeReceiver, feeAmount);\r\n            } else if (isRemoveLP) {\r\n                feeAmount = (tAmount * getRemoveLPFee(recipient)) / 10000;\r\n                _takeTransfer(sender, _lpFeeReceiver, feeAmount);\r\n            } else if (_swapPairList[sender]) {\r\n                //Buy\r\n                uint256 destroyFeeAmount = (tAmount * _buyDestroyFee) / 10000;\r\n                if (destroyFeeAmount > 0) {\r\n                    uint256 destroyAmount = destroyFeeAmount;\r\n                    uint256 currentTotal = totalSupply();\r\n                    uint256 maxDestroyAmount;\r\n                    if (currentTotal > _minTotal) {\r\n                        maxDestroyAmount = currentTotal - _minTotal;\r\n                    }\r\n                    if (destroyAmount > maxDestroyAmount) {\r\n                        destroyAmount = maxDestroyAmount;\r\n                    }\r\n                    if (destroyAmount > 0) {\r\n                        feeAmount += destroyAmount;\r\n                        _takeTransfer(\r\n                            sender,\r\n                            address(0x000000000000000000000000000000000000dEaD),\r\n                            destroyAmount\r\n                        );\r\n                    }\r\n                }\r\n                uint256 teamFeeAmount = (tAmount * _buyTeamFee) / 10000;\r\n                teamFee(sender, recipient, teamFeeAmount);\r\n                feeAmount += teamFeeAmount;\r\n                uint256 fundAmount = (tAmount *\r\n                    (_buyFundFee +\r\n                        _buyFundFee2 +\r\n                        _buyFundFee3 +\r\n                        _buyLPDividendFee +\r\n                        _buyLPFee +\r\n                        _buyBuybackFee)) / 10000;\r\n                if (fundAmount > 0) {\r\n                    feeAmount += fundAmount;\r\n                    _takeTransfer(sender, address(this), fundAmount);\r\n                }\r\n            } else if (_swapPairList[recipient]) {\r\n                //Sell\r\n                uint256 destroyFeeAmount = (tAmount * _sellDestroyFee) / 10000;\r\n                if (destroyFeeAmount > 0) {\r\n                    uint256 destroyAmount = destroyFeeAmount;\r\n                    uint256 currentTotal = totalSupply();\r\n                    uint256 maxDestroyAmount;\r\n                    if (currentTotal > _minTotal) {\r\n                        maxDestroyAmount = currentTotal - _minTotal;\r\n                    }\r\n                    if (destroyAmount > maxDestroyAmount) {\r\n                        destroyAmount = maxDestroyAmount;\r\n                    }\r\n                    if (destroyAmount > 0) {\r\n                        feeAmount += destroyAmount;\r\n                        _takeTransfer(\r\n                            sender,\r\n                            address(0x000000000000000000000000000000000000dEaD),\r\n                            destroyAmount\r\n                        );\r\n                    }\r\n                }\r\n                uint256 teamFeeAmount = (tAmount * _sellTeamFee) / 10000;\r\n                teamFee(sender, sender, teamFeeAmount);\r\n                feeAmount += teamFeeAmount;\r\n                uint256 fundAmount = (tAmount *\r\n                    (_sellFundFee +\r\n                        _sellFundFee2 +\r\n                        _sellFundFee3 +\r\n                        _sellLPDividendFee +\r\n                        _sellLPFee +\r\n                        _sellBuybackFee)) / 10000;\r\n                if (fundAmount > 0) {\r\n                    feeAmount += fundAmount;\r\n                    _takeTransfer(sender, address(this), fundAmount);\r\n                }\r\n                if (!inSwap) {\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if (contractTokenBalance > 0) {\r\n                        uint256 numTokensSellToFund = (fundAmount * 230) / 100;\r\n                        if (numTokensSellToFund > contractTokenBalance) {\r\n                            numTokensSellToFund = contractTokenBalance;\r\n                        }\r\n                        swapTokenForFund(numTokensSellToFund);\r\n                    }\r\n                }\r\n            } else {\r\n                //Transfer\r\n                address tokenDistributor = address(_tokenDistributor);\r\n                feeAmount = (tAmount * _transferFee) / 10000;\r\n                if (feeAmount > 0) {\r\n                    _takeTransfer(sender, tokenDistributor, feeAmount);\r\n                    if (startTradeBlock > 0 && !inSwap) {\r\n                        uint256 swapAmount = 2 * feeAmount;\r\n                        uint256 contractTokenBalance = balanceOf(\r\n                            tokenDistributor\r\n                        );\r\n                        if (swapAmount > contractTokenBalance) {\r\n                            swapAmount = contractTokenBalance;\r\n                        }\r\n                        _tokenTransfer(\r\n                            tokenDistributor,\r\n                            address(this),\r\n                            swapAmount,\r\n                            false,\r\n                            false,\r\n                            false\r\n                        );\r\n                        swapTokenForFund2(swapAmount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function teamFee(address from, address account, uint teamAmount) internal  {\r\n        address _upper = upper[account];\r\n        for (uint i = 0; i < 5; i++) {\r\n            if (_upper == address(0)) {\r\n                _takeTransfer(\r\n                    from,\r\n                    fundAddress3,\r\n                    (teamAmount * teamRate[i]) / 1000\r\n                );\r\n            } else {\r\n                _takeTransfer(from, _upper, (teamAmount * teamRate[i]) / 1000);\r\n            }\r\n            _upper = upper[_upper];\r\n        }\r\n    }\r\n\r\n    function getRemoveLPFee(address account) public view returns (uint256 fee) {\r\n        uint256 removeLPFee = _removeLPFee;\r\n        fee = removeLPFee;\r\n        if (_userInfo[account].preLP) {\r\n            fee = 10000;\r\n            uint256 blockTime = block.timestamp;\r\n            uint256 times = (blockTime - startTradeTime) / _lpFeeTimeDuration;\r\n            uint256 releaseFee = _lpFeePerTime * times;\r\n            if (fee > releaseFee) {\r\n                fee -= releaseFee;\r\n            } else {\r\n                fee = 0;\r\n            }\r\n            if (fee < removeLPFee) {\r\n                fee = removeLPFee;\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n        uint256 fundFee = _buyFundFee + _sellFundFee;\r\n        uint256 fundFee2 = _buyFundFee2 + _sellFundFee2;\r\n        uint256 fundFee3 = _buyFundFee3 + _sellFundFee3;\r\n        uint256 lpDividendFee = _buyLPDividendFee + _sellLPDividendFee;\r\n        uint256 lpFee = _buyLPFee + _sellLPFee;\r\n        uint256 buybackFee = _buyBuybackFee + _sellBuybackFee;\r\n        uint256 totalFee = fundFee +\r\n            fundFee2 +\r\n            fundFee3 +\r\n            lpDividendFee +\r\n            lpFee +\r\n            buybackFee;\r\n        totalFee += totalFee;\r\n\r\n        uint256 lpAmount = (tokenAmount * lpFee) / totalFee;\r\n        totalFee -= lpFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        address usdt = _usdt;\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        address tokenDistributor = address(_tokenDistributor);\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            tokenDistributor,\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(tokenDistributor);\r\n        USDT.transferFrom(tokenDistributor, address(this), usdtBalance);\r\n\r\n        uint256 fundUsdt = (usdtBalance * fundFee * 2) / totalFee;\r\n        if (fundUsdt > 0) {\r\n            USDT.transfer(fundAddress, fundUsdt);\r\n        }\r\n\r\n        uint256 fundUsdt2 = (usdtBalance * fundFee2 * 2) / totalFee;\r\n        if (fundUsdt2 > 0) {\r\n            USDT.transfer(fundAddress2, fundUsdt2);\r\n        }\r\n\r\n        uint256 lpUsdt = (usdtBalance * lpFee) / totalFee;\r\n        if (lpUsdt > 0) {\r\n            _swapRouter.addLiquidity(\r\n                address(this),\r\n                usdt,\r\n                lpAmount,\r\n                lpUsdt,\r\n                0,\r\n                0,\r\n                _receiveAddress,\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        uint256 buybackUsdt = (usdtBalance * buybackFee * 2) / totalFee;\r\n        if (buybackUsdt > 0) {\r\n            path[0] = _usdt;\r\n            path[1] = _buybackToken;\r\n            _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                buybackUsdt,\r\n                0,\r\n                path,\r\n                address(0x000000000000000000000000000000000000dEaD),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function swapTokenForFund2(uint256 tokenAmount) private lockTheSwap {\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        address usdt = _usdt;\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            fundAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFundAddress2(address addr) external onlyOwner {\r\n        fundAddress2 = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFundAddress3(address addr) external onlyOwner {\r\n        fundAddress3 = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setReceiveAddress(address addr) external onlyOwner {\r\n        _receiveAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setBuybackToken(address addr) external onlyOwner {\r\n        _buybackToken = addr;\r\n    }\r\n\r\n    function setBuyFee(\r\n        uint256 buyDestroyFee,\r\n        uint256 buyFundFee,\r\n        uint256 buyFundFee2,\r\n        uint256 buyFundFee3,\r\n        uint256 lpDividendFee,\r\n        uint256 lpFee,\r\n        uint256 buybackFee\r\n    ) external onlyOwner {\r\n        _buyDestroyFee = buyDestroyFee;\r\n        _buyFundFee = buyFundFee;\r\n        _buyFundFee2 = buyFundFee2;\r\n        _buyFundFee3 = buyFundFee3;\r\n        _buyLPDividendFee = lpDividendFee;\r\n        _buyLPFee = lpFee;\r\n        _buyBuybackFee = buybackFee;\r\n    }\r\n\r\n    function setSellFee(\r\n        uint256 sellDestroyFee,\r\n        uint256 sellFundFee,\r\n        uint256 sellFundFee2,\r\n        uint256 sellFundFee3,\r\n        uint256 lpDividendFee,\r\n        uint256 lpFee,\r\n        uint256 buybackFee\r\n    ) external onlyOwner {\r\n        _sellDestroyFee = sellDestroyFee;\r\n        _sellFundFee = sellFundFee;\r\n        _sellFundFee2 = sellFundFee2;\r\n        _sellFundFee3 = sellFundFee3;\r\n        _sellLPDividendFee = lpDividendFee;\r\n        _sellLPFee = lpFee;\r\n        _sellBuybackFee = buybackFee;\r\n    }\r\n\r\n    function setTransferFee(uint256 fee) external onlyOwner {\r\n        _transferFee = fee;\r\n    }\r\n\r\n    function startBW() external onlyOwner {\r\n        require(0 == startBWBlock, \"startBW\");\r\n        startBWBlock = block.number;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n        startTradeTime = block.timestamp;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(\r\n        address[] memory addr,\r\n        bool enable\r\n    ) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n    function batchSetBlackList(\r\n        address[] memory addr,\r\n        bool enable\r\n    ) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _blackList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setBWList(address addr, bool enable) external onlyOwner {\r\n        _bWList[addr] = enable;\r\n    }\r\n\r\n    function setTeamRate(uint256[] memory _teamRate) external onlyOwner {\r\n        teamRate = _teamRate;\r\n    }\r\n\r\n    function setbindAmount(uint256 _bindAmount) external onlyOwner {\r\n        bindAmount = _bindAmount;\r\n    }\r\n\r\n    function batchSetBWList(\r\n        address[] memory addr,\r\n        bool enable\r\n    ) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _bWList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            payable(fundAddress).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function setLimitAmount(uint256 amount) external onlyOwner {\r\n        _limitAmount = amount * 10 ** _decimals;\r\n    }\r\n\r\n    function setTxLimitAmount(uint256 amount) external onlyOwner {\r\n        _txLimitAmount = amount * 10 ** _decimals;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setMinTotal(uint256 total) external onlyOwner {\r\n        _minTotal = total * 10 ** _decimals;\r\n    }\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n    mapping(address => bool) public excludeHolder;\r\n\r\n    function getHolderLength() public view returns (uint256) {\r\n        return holders.length;\r\n    }\r\n\r\n    function addHolder(address adr) private {\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                uint256 size;\r\n                assembly {\r\n                    size := extcodesize(adr)\r\n                }\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public holderRewardCondition;\r\n    uint256 public holderCondition = 1;\r\n    uint256 public progressRewardBlock;\r\n    uint256 public progressRewardBlockDebt = 1;\r\n\r\n    function processReward(uint256 gas) private {\r\n        uint256 blockNum = block.number;\r\n        if (progressRewardBlock + progressRewardBlockDebt > blockNum) {\r\n            return;\r\n        }\r\n\r\n        IERC20 usdt = IERC20(_usdt);\r\n\r\n        uint256 rewardCondition = holderRewardCondition;\r\n        if (usdt.balanceOf(address(this)) < holderRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n        if (holdTokenTotal == 0) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 lpBalance;\r\n        uint256 lpAmount;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = holderCondition;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            if (!excludeHolder[shareHolder]) {\r\n                lpBalance = holdToken.balanceOf(shareHolder);\r\n                lpAmount = _userInfo[shareHolder].lpAmount;\r\n                if (lpAmount < lpBalance) {\r\n                    lpBalance = lpAmount;\r\n                }\r\n                if (lpBalance >= holdCondition && !excludeHolder[shareHolder]) {\r\n                    amount = (rewardCondition * lpBalance) / holdTokenTotal;\r\n                    if (amount > 0) {\r\n                        usdt.transfer(shareHolder, amount);\r\n                    }\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = blockNum;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setHolderCondition(uint256 amount) external onlyOwner {\r\n        holderCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setProgressRewardBlockDebt(uint256 blockDebt) external onlyOwner {\r\n        progressRewardBlockDebt = blockDebt;\r\n    }\r\n\r\n    function setAirdropLen(uint256 len) external onlyOwner {\r\n        _airdropLen = len;\r\n    }\r\n\r\n    function setAirdropAmount(uint256 amount) external onlyOwner {\r\n        _airdropAmount = amount;\r\n    }\r\n\r\n    function setLPFeeReceiver(address adr) external onlyOwner {\r\n        _lpFeeReceiver = adr;\r\n        _feeWhiteList[adr] = true;\r\n    }\r\n\r\n    function setAddLPFee(uint256 fee) external onlyOwner {\r\n        _addLPFee = fee;\r\n    }\r\n\r\n    function setRemoveLPFee(uint256 fee) external onlyOwner {\r\n        _removeLPFee = fee;\r\n    }\r\n\r\n    function updateLPAmount(address account, uint256 lpAmount) public {\r\n        if (\r\n            _feeWhiteList[msg.sender] &&\r\n            (fundAddress == msg.sender || _owner == msg.sender)\r\n        ) {\r\n            _userInfo[account].lpAmount = lpAmount;\r\n        }\r\n    }\r\n\r\n    function initLPAmounts(address[] memory accounts, uint256 lpAmount) public {\r\n        if (\r\n            _feeWhiteList[msg.sender] &&\r\n            (fundAddress == msg.sender || _owner == msg.sender)\r\n        ) {\r\n            uint256 len = accounts.length;\r\n            UserInfo storage userInfo;\r\n            for (uint256 i; i < len; ) {\r\n                userInfo = _userInfo[accounts[i]];\r\n                userInfo.lpAmount = lpAmount;\r\n                userInfo.preLP = true;\r\n                addHolder(accounts[i]);\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getUserInfo(\r\n        address account\r\n    )\r\n        public\r\n        view\r\n        returns (uint256 lpAmount, uint256 lpBalance, uint256 removeLPFee)\r\n    {\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        lpAmount = userInfo.lpAmount;\r\n        lpBalance = IERC20(_mainPair).balanceOf(account);\r\n        removeLPFee = getRemoveLPFee(account);\r\n    }\r\n\r\n    function setLPFeeTimeDuration(uint256 d) external onlyOwner {\r\n        _lpFeeTimeDuration = d;\r\n    }\r\n\r\n    function setLPFeePerTime(uint256 r) external onlyOwner {\r\n        _lpFeePerTime = r;\r\n    }\r\n}\r\n\r\ncontract ABT is AbsToken {\r\n    constructor()\r\n        AbsToken(\r\n            //SwapRouter\r\n            address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n            //USDT\r\n            address(0x55d398326f99059fF775485246999027B3197955),\r\n            address(0x55d398326f99059fF775485246999027B3197955),\r\n            \"AGI BOT\",\r\n            \"AGI BOT\",\r\n            18,\r\n            150000000,\r\n            address(0x95040628A65c5d546C3Bd9B52De64eBAB570d06B),\r\n            address(0x22870fE2dD56E99E12484C92Bb9e0151b585EbBd),\r\n            address(0x22867A3713a559f2fca75c98857d3e11573d8D1A),\r\n            address(0x95040628A65c5d546C3Bd9B52De64eBAB570d06B),\r\n            0,\r\n            15000000,\r\n            0\r\n        )\r\n    {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_addLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_airdropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_airdropLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_bWList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buybackToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpFeePerTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpFeeTimeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_receiveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_txLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBWList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bindAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRemoveLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removeLPFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"initLPAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setAddLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAirdropAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"setAirdropLen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBWList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyDestroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFundFee2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyFundFee3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpDividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBuybackToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setLPFeePerTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setLPFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setLPFeeTimeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"setMinTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProgressRewardBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReceiveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setRemoveLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellDestroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFundFee2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFundFee3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpDividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_teamRate\",\"type\":\"uint256[]\"}],\"name\":\"setTeamRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bindAmount\",\"type\":\"uint256\"}],\"name\":\"setbindAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBWBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ABT", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c026bc6e5d40bc2433cf451dab9147e3aa05f8c124bdd67a203471765a619f0a"}