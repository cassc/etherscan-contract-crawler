{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\"},\"IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\"},\"IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\"},\"IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.6.2;\\r\\n\\r\\nimport \\u0027./IUniswapV2Router01.sol\\u0027;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\"},\"LiquidityAcquisition.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\n\\r\\ncontract InternalToken {\\r\\n    // This is always expected to be\\r\\n    // overwritten by a parent contract\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\ncontract LiquidityAcquisition is InternalToken {\\r\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n    IUniswapV2Pair public immutable uniswapV2Pair;\\r\\n\\r\\n    constructor() {\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n        );\\r\\n        IUniswapV2Pair _uniswapV2Pair = IUniswapV2Pair(\\r\\n            IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\\r\\n                address(this),\\r\\n                _uniswapV2Router.WETH()\\r\\n            )\\r\\n        );\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        uniswapV2Pair = _uniswapV2Pair;\\r\\n    }\\r\\n\\r\\n    event SwapFailure(string reason);\\r\\n\\r\\n    // Always expected to be overwritten by parent contract\\r\\n    // since its\\u0027 implementation is contract-specific\\r\\n    function _checkSwapViability(address sender) internal virtual {}\\r\\n\\r\\n    function _isSell(address sender, address recipient) internal view returns (bool) {\\r\\n        // Transfer to pair from non-router address is a sell swap\\r\\n        return sender != address(uniswapV2Router) \\u0026\\u0026 recipient == address(uniswapV2Pair);\\r\\n    }\\r\\n\\r\\n    function _isBuy(address sender) internal view returns (bool) {\\r\\n        // Transfer from pair is a buy swap\\r\\n        return sender == address(uniswapV2Pair);\\r\\n    }\\r\\n\\r\\n    function swapTokensForBnb(uint256 tokenAmount) internal {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        try\\r\\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                tokenAmount,\\r\\n                0,\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            )\\r\\n        {} catch Error(string memory reason) {\\r\\n            emit SwapFailure(reason);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) internal {\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        try\\r\\n            uniswapV2Router.addLiquidityETH{value: bnbAmount}(\\r\\n                address(this),\\r\\n                tokenAmount,\\r\\n                0,\\r\\n                0,\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            )\\r\\n        {} catch Error(string memory reason) {\\r\\n            emit SwapFailure(reason);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Lunar.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./EnumerableSet.sol\\\";\\r\\n\\r\\nimport \\\"./ReflectiveToken.sol\\\";\\r\\n\\r\\ncontract Lunar is ReflectiveToken {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    mapping(address =\\u003e uint256) public stakeValue;\\r\\n    mapping(address =\\u003e uint256) public stakerPayouts;\\r\\n    mapping(address =\\u003e uint256) public bnbWithdrawn;\\r\\n\\r\\n    uint256 public profitPerShare;\\r\\n    uint256 public pendingShares;\\r\\n\\r\\n    uint256 public totalDistributions;\\r\\n    uint256 public totalReflected;\\r\\n    uint256 public totalWithdrawn;\\r\\n    uint256 public totalStaked;\\r\\n\\r\\n    uint256 public buyLimit;\\r\\n    uint256 public sellLimit;\\r\\n\\r\\n    uint256 private immutable numTokensSellToAddToLiquidity;\\r\\n    uint256 private constant DISTRIBUTION_MULTIPLIER = 2**64;\\r\\n\\r\\n    EnumerableSet.AddressSet private _stakingExcluded;\\r\\n    mapping(address =\\u003e bool) private _isBlacklisted;\\r\\n\\r\\n    event OnWithdraw(address sender, uint256 amount);\\r\\n    event OnDistribute(uint256 tokenAmount, uint256 bnbReceived);\\r\\n    event OnStakingInclude(address account);\\r\\n    event OnStakingExclude(address account);\\r\\n    event OnWithdrawIsolatedBNB(uint256 amount);\\r\\n    event OnBlacklist(address account);\\r\\n\\r\\n    constructor() ReflectiveToken(\\\"Lunar\\\", \\\"LUNAR\\\", 10**10, 9, 2, 8) {\\r\\n        _tOwned[_msgSender()] = _tTotal;\\r\\n\\r\\n        // 0.03% of total supply\\r\\n        numTokensSellToAddToLiquidity = (30000 * _tTotal) / 10**8;\\r\\n\\r\\n        // 0.1% of total supply on both buy/sell initially\\r\\n        buyLimit = (1000 * _tTotal) / 10**6;\\r\\n        sellLimit = (1000 * _tTotal) / 10**6;\\r\\n\\r\\n        _stakingExcluded.add(address(this));\\r\\n        _stakingExcluded.add(_msgSender());\\r\\n\\r\\n        emit OnStakingExclude(address(this));\\r\\n        emit OnStakingExclude(_msgSender());\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        if (_stakingExcluded.contains(account)) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function _takeSwapFee(uint256 tSwapFee) internal override {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rSwapFee = tSwapFee * currentRate;\\r\\n\\r\\n        if (_stakingExcluded.contains(address(this))) _tOwned[address(this)] += tSwapFee;\\r\\n        else _rOwned[address(this)] += rSwapFee;\\r\\n    }\\r\\n\\r\\n    function _getRate() internal view override returns (uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;\\r\\n\\r\\n        // Increases gas cost noticeably but will never be problematic:\\r\\n        // `_stakingExcluded` is controlled and always small (\\u003c10 in practice)\\r\\n        for (uint256 i = 0; i \\u003c _stakingExcluded.length(); i++) {\\r\\n            address account = _stakingExcluded.at(i);\\r\\n            if (_rOwned[account] \\u003e rSupply || _tOwned[account] \\u003e tSupply)\\r\\n                return _rTotal / _tTotal;\\r\\n            rSupply -= _rOwned[account];\\r\\n            tSupply -= _tOwned[account];\\r\\n        }\\r\\n\\r\\n        if (rSupply \\u003c (_rTotal / _tTotal)) return _rTotal / _tTotal;\\r\\n        return rSupply / tSupply;\\r\\n    }\\r\\n\\r\\n    function _validateTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bool takeFee\\r\\n    ) private view {\\r\\n        // Excluded addresses don\\u0027t have limits\\r\\n        if (takeFee) {\\r\\n            if (_isBuy(sender) \\u0026\\u0026 buyLimit != 0) {\\r\\n                require(amount \\u003c= buyLimit, \\\"Buy amount exceeds limit\\\");\\r\\n            } else if (_isSell(sender, recipient) \\u0026\\u0026 sellLimit != 0) {\\r\\n                require(amount \\u003c= sellLimit, \\\"Sell amount exceeds limit\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bool takeFee\\r\\n    ) internal virtual override returns (uint256) {\\r\\n        require(sender != recipient, \\\"Sending to yourself is disallowed\\\");\\r\\n        require(\\r\\n            !_isBlacklisted[sender] \\u0026\\u0026 !_isBlacklisted[recipient],\\r\\n            \\\"Blacklisted account\\\"\\r\\n        );\\r\\n        _validateTransfer(sender, recipient, amount, takeFee);\\r\\n\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tSwapFee\\r\\n        ) = _getValues(amount, takeFee);\\r\\n\\r\\n        uint256 senderDividends;\\r\\n\\r\\n        if (_stakingExcluded.contains(sender)) _tOwned[sender] -= amount;\\r\\n        else {\\r\\n            senderDividends = dividendsOf(sender);\\r\\n            totalStaked -= stakeValue[sender];\\r\\n            _rOwned[sender] -= rAmount;\\r\\n        }\\r\\n\\r\\n        if (_stakingExcluded.contains(recipient)) _tOwned[recipient] += tTransferAmount;\\r\\n        else _rOwned[recipient] += rTransferAmount;\\r\\n\\r\\n        _takeSwapFee(tSwapFee);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        _restake(sender, recipient, tTransferAmount, senderDividends);\\r\\n        totalReflected += tFee;\\r\\n\\r\\n        return tTransferAmount;\\r\\n    }\\r\\n\\r\\n    function _restake(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 transferAmount,\\r\\n        uint256 senderDividends\\r\\n    ) private {\\r\\n        bool senderExcluded = _stakingExcluded.contains(sender);\\r\\n        bool recipientExcluded = _stakingExcluded.contains(recipient);\\r\\n\\r\\n        if (!recipientExcluded) {\\r\\n            uint256 payout = transferAmount * profitPerShare;\\r\\n            stakerPayouts[recipient] += payout;\\r\\n            stakeValue[recipient] += transferAmount;\\r\\n            totalStaked += transferAmount;\\r\\n        }\\r\\n\\r\\n        // Before the initial distribution, `profitPerShare` will be stuck at 0\\r\\n        // this line only protects against reverts from users\\r\\n        // whom hold a balance before the initial distribution.\\r\\n        if (!senderExcluded) {\\r\\n            // Direct lookup over `balanceOf` to save on gas cost\\r\\n            uint256 senderBalance = tokenFromReflection(_rOwned[sender]);\\r\\n            stakerPayouts[sender] = senderBalance * profitPerShare;\\r\\n            stakeValue[sender] = senderBalance;\\r\\n\\r\\n            totalStaked += senderBalance;\\r\\n\\r\\n            if (senderDividends \\u003e 0) {\\r\\n                _withdraw(sender, senderDividends);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _withdraw(address account, uint256 amount) private {\\r\\n        payable(account).transfer(amount);\\r\\n        bnbWithdrawn[account] += amount;\\r\\n        totalWithdrawn += amount;\\r\\n\\r\\n        emit OnWithdraw(account, amount);\\r\\n    }\\r\\n\\r\\n    function _checkSwapViability(address sender) internal virtual override {\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        bool overMinTokenBalance = contractTokenBalance \\u003e= numTokensSellToAddToLiquidity;\\r\\n\\r\\n        if (overMinTokenBalance \\u0026\\u0026 sender != address(uniswapV2Pair)) {\\r\\n            swapAndDistribute(contractTokenBalance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapAndDistribute(uint256 contractTokenBalance) private {\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n        swapTokensForBnb(contractTokenBalance);\\r\\n        uint256 swappedAmount = address(this).balance - initialBalance;\\r\\n\\r\\n        // Forward 20% to dev wallet\\r\\n        uint256 devSplit = (swappedAmount * 20) / 100;\\r\\n        uint256 amount = swappedAmount - devSplit;\\r\\n\\r\\n        payable(owner()).transfer(devSplit);\\r\\n\\r\\n        totalDistributions += amount;\\r\\n\\r\\n        if (totalStaked \\u003e 0) {\\r\\n            if (pendingShares \\u003e 0) {\\r\\n                amount += pendingShares;\\r\\n                pendingShares = 0;\\r\\n            }\\r\\n            profitPerShare += ((amount * DISTRIBUTION_MULTIPLIER) / totalStaked);\\r\\n        } else {\\r\\n            pendingShares += amount;\\r\\n        }\\r\\n\\r\\n        emit OnDistribute(contractTokenBalance, amount);\\r\\n    }\\r\\n\\r\\n    function dividendsOf(address staker) public view returns (uint256) {\\r\\n        // Using `stakeValue` over actual balance because reflection shares cannot be calculated\\r\\n        uint256 divPayout = stakeValue[staker] * profitPerShare;\\r\\n        if (divPayout \\u003c stakerPayouts[staker]) return 0;\\r\\n\\r\\n        return (divPayout - stakerPayouts[staker]) / DISTRIBUTION_MULTIPLIER;\\r\\n    }\\r\\n\\r\\n    // reflective earnings since last collection or transfer\\r\\n    function reflectionEarnings() external view returns (uint256) {\\r\\n        uint256 staked = stakeValue[_msgSender()];\\r\\n        uint256 balance = balanceOf(_msgSender());\\r\\n\\r\\n        return balance - staked;\\r\\n    }\\r\\n\\r\\n    function restake() external {\\r\\n        uint256 staked = stakeValue[_msgSender()];\\r\\n        uint256 balance = balanceOf(_msgSender());\\r\\n        uint256 earnings = balance - staked;\\r\\n\\r\\n        stakeValue[_msgSender()] += earnings;\\r\\n        stakerPayouts[_msgSender()] += earnings * profitPerShare;\\r\\n        totalStaked += earnings;\\r\\n    }\\r\\n\\r\\n    function withdraw() external payable {\\r\\n        uint256 share = dividendsOf(_msgSender());\\r\\n\\r\\n        // Resetting dividends back to 0\\r\\n        stakerPayouts[_msgSender()] = stakeValue[_msgSender()] * profitPerShare;\\r\\n\\r\\n        _withdraw(_msgSender(), share);\\r\\n    }\\r\\n\\r\\n    function includeInStaking(address account) external onlyOwner {\\r\\n        require(_stakingExcluded.contains(account), \\\"Account already included\\\");\\r\\n        uint256 balance = _tOwned[account];\\r\\n\\r\\n        _tOwned[account] = 0;\\r\\n        _rOwned[account] = reflectionFromToken(balance);\\r\\n        totalStaked += balance;\\r\\n        stakeValue[account] = balance;\\r\\n        stakerPayouts[account] = balance * profitPerShare;\\r\\n\\r\\n        _stakingExcluded.remove(account);\\r\\n\\r\\n        emit OnStakingInclude(account);\\r\\n    }\\r\\n\\r\\n    function excludeFromStaking(address account) external onlyOwner {\\r\\n        require(!_stakingExcluded.contains(account), \\\"Account already excluded\\\");\\r\\n        uint256 balance = tokenFromReflection(_rOwned[account]);\\r\\n\\r\\n        uint256 dividends = dividendsOf(account);\\r\\n        if (dividends \\u003e 0) _withdraw(account, dividends);\\r\\n\\r\\n        _tOwned[account] = balance;\\r\\n        totalStaked -= stakeValue[account];\\r\\n        stakeValue[account] = 0;\\r\\n        stakerPayouts[account] = 0;\\r\\n\\r\\n        _stakingExcluded.add(account);\\r\\n\\r\\n        emit OnStakingExclude(account);\\r\\n    }\\r\\n\\r\\n    function withdrawIsolatedBnb() external onlyOwner {\\r\\n        uint256 pendingBnb = totalDistributions - totalWithdrawn;\\r\\n        uint256 isolatedBnb = address(this).balance - pendingBnb;\\r\\n\\r\\n        if (isolatedBnb \\u003e 0) {\\r\\n            payable(_msgSender()).transfer(isolatedBnb);\\r\\n\\r\\n            emit OnWithdrawIsolatedBNB(isolatedBnb);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateBuyLimit(uint256 limit) external onlyOwner {\\r\\n        // Buy limit can only be 0.1% or disabled, set to 0 to disable\\r\\n        uint256 maxLimit = (1000 * _tTotal) / 10**6;\\r\\n        require(limit == maxLimit || limit == 0, \\\"Buy limit out of bounds\\\");\\r\\n\\r\\n        buyLimit = limit;\\r\\n    }\\r\\n\\r\\n    function updateSellLimit(uint256 limit) external onlyOwner {\\r\\n        // Min sell limit is 0.1%, max is 0.5%. Set to 0 to disable\\r\\n        uint256 minLimit = (1000 * _tTotal) / 10**6;\\r\\n        uint256 maxLimit = (5000 * _tTotal) / 10**6;\\r\\n\\r\\n        require(\\r\\n            (limit \\u003c= maxLimit \\u0026\\u0026 limit \\u003e= minLimit) || limit == 0,\\r\\n            \\\"Sell limit out of bounds\\\"\\r\\n        );\\r\\n\\r\\n        sellLimit = limit;\\r\\n    }\\r\\n\\r\\n    function addToBlacklist(address account) external onlyOwner {\\r\\n        _isBlacklisted[account] = true;\\r\\n\\r\\n        emit OnBlacklist(account);\\r\\n    }\\r\\n\\r\\n    function removeFromBlacklist(address account) external onlyOwner {\\r\\n        _isBlacklisted[account] = false;\\r\\n    }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"ReflectiveERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\nimport \\\"./LiquidityAcquisition.sol\\\";\\r\\n\\r\\ncontract ReflectiveERC20 is IERC20, Context, Ownable, LiquidityAcquisition {\\r\\n    mapping(address =\\u003e uint256) internal _rOwned;\\r\\n    mapping(address =\\u003e uint256) internal _tOwned;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) internal _allowances;\\r\\n\\r\\n    mapping(address =\\u003e bool) internal _isExcludedFromFee;\\r\\n\\r\\n    string internal _name;\\r\\n    string internal _symbol;\\r\\n    uint8 internal _decimals;\\r\\n\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 internal _tTotal;\\r\\n    uint256 internal _rTotal;\\r\\n    uint256 internal _tFeeTotal;\\r\\n\\r\\n    uint8 public reflectionFee;\\r\\n    uint8 public swapFee;\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint256 totalSupply_,\\r\\n        uint8 decimals_,\\r\\n        uint8 reflectionFee_,\\r\\n        uint8 swapFee_\\r\\n    ) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimals_;\\r\\n        _tTotal = totalSupply_ * 10**_decimals;\\r\\n        _rTotal = (MAX - (MAX % _tTotal));\\r\\n\\r\\n        // Reflective fee defaults\\r\\n        _isExcludedFromFee[_msgSender()] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n        reflectionFee = reflectionFee_;\\r\\n        swapFee = swapFee_;\\r\\n\\r\\n        _rOwned[_msgSender()] = _rTotal;\\r\\n\\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Base ERC20 Functions\\r\\n     */\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * ERC20 Helpers\\r\\n     */\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual override {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    // Always expected to be overwritten by parent contract\\r\\n    // since its\\u0027 implementation is contract-specific\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * Base Reflection Functions\\r\\n     */\\r\\n\\r\\n    function isExcludedFromFee(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFee[account];\\r\\n    }\\r\\n\\r\\n    function totalFees() public view returns (uint256) {\\r\\n        return _tFeeTotal;\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\\r\\n        require(rAmount \\u003c= _rTotal, \\\"Amount must be less than total reflections\\\");\\r\\n        return rAmount / _getRate();\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(uint256 tAmount) public view returns (uint256) {\\r\\n        require(tAmount \\u003c= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        return tAmount * _getRate();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Reflection Helpers\\r\\n     */\\r\\n\\r\\n    function _getValues(uint256 tAmount, bool takeFee)\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 tFee = 0;\\r\\n        uint256 tSwap = 0;\\r\\n\\r\\n        if (takeFee) {\\r\\n            tFee = (tAmount * reflectionFee) / 100;\\r\\n            tSwap = (tAmount * swapFee) / 100;\\r\\n        }\\r\\n\\r\\n        uint256 tTransferAmount = tAmount - tFee - tSwap;\\r\\n\\r\\n        uint256 rAmount = tAmount * currentRate;\\r\\n        uint256 rFee = tFee * currentRate;\\r\\n        uint256 rSwap = tSwap * currentRate;\\r\\n        uint256 rTransferAmount = rAmount - rFee - rSwap;\\r\\n\\r\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tSwap);\\r\\n    }\\r\\n\\r\\n    function _getRate() internal view virtual returns (uint256) {\\r\\n        return _rTotal / _tTotal;\\r\\n    }\\r\\n\\r\\n    function excludeFromFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = true;\\r\\n    }\\r\\n\\r\\n    function includeInFee(address account) public onlyOwner {\\r\\n        require(account != address(this), \\\"Contract can\\u0027t be included\\\");\\r\\n        _isExcludedFromFee[account] = false;\\r\\n    }\\r\\n\\r\\n    function _reflectFee(uint256 rFee, uint256 tFee) internal {\\r\\n        _rTotal -= rFee;\\r\\n        _tFeeTotal += tFee;\\r\\n    }\\r\\n\\r\\n    function _takeSwapFee(uint256 tSwapFee) internal virtual {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rSwapFee = tSwapFee * currentRate;\\r\\n        _rOwned[address(this)] += rSwapFee;\\r\\n    }\\r\\n}\\r\\n\"},\"ReflectiveToken.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./ReflectiveERC20.sol\\\";\\r\\nimport \\\"./LiquidityAcquisition.sol\\\";\\r\\n\\r\\ncontract ReflectiveToken is ReflectiveERC20 {\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint256 totalSupply_,\\r\\n        uint8 decimals_,\\r\\n        uint8 reflectionFee_,\\r\\n        uint8 swapFee_\\r\\n    )\\r\\n        ReflectiveERC20(name_, symbol_, totalSupply_, decimals_, reflectionFee_, swapFee_)\\r\\n    {}\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual override {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\r\\n        bool takeFee = true;\\r\\n\\r\\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\\r\\n            takeFee = false;\\r\\n        } else {\\r\\n            _checkSwapViability(sender);\\r\\n        }\\r\\n\\r\\n        uint256 transferAmount = _tokenTransfer(sender, recipient, amount, takeFee);\\r\\n\\r\\n        emit Transfer(sender, recipient, transferAmount);\\r\\n    }\\r\\n\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bool takeFee\\r\\n    ) internal virtual returns (uint256) {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tSwapFee\\r\\n        ) = _getValues(amount, takeFee);\\r\\n\\r\\n        _rOwned[sender] -= rAmount;\\r\\n        _rOwned[recipient] += rTransferAmount;\\r\\n\\r\\n        _takeSwapFee(tSwapFee);\\r\\n        _reflectFee(rFee, tFee);\\r\\n\\r\\n        return tTransferAmount;\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OnBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"}],\"name\":\"OnDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OnStakingExclude\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OnStakingInclude\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnWithdrawIsolatedBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"SwapFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bnbWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"updateBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"updateSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawIsolatedBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Lunar", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d3a75f923f5ef3b8a7472e873d6592f03113ace26a310b479a0ac23d15574db6"}