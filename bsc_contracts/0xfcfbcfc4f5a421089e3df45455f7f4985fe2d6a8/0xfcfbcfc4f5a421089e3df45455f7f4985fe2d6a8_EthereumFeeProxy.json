{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/EthereumFeeProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\n/**\\n * @title EthereumFeeProxy\\n * @notice This contract performs an Ethereum transfer with a Fee sent to a third address and stores a reference\\n */\\ncontract EthereumFeeProxy is ReentrancyGuard {\\n    // Event to declare a transfer with a reference\\n    event TransferWithReferenceAndFee(\\n        address to,\\n        uint256 amount,\\n        bytes indexed paymentReference,\\n        uint256 feeAmount,\\n        address feeAddress\\n    );\\n\\n    // Fallback function returns funds to the sender\\n    receive() external payable {\\n        revert('not payable receive');\\n    }\\n\\n    /**\\n     * @notice Performs an Ethereum transfer with a reference\\n     * @param _to Transfer recipient\\n     * @param _paymentReference Reference of the payment related\\n     * @param _feeAmount The amount of the payment fee (part of the msg.value)\\n     * @param _feeAddress The fee recipient\\n     */\\n    function transferWithReferenceAndFee(\\n        address payable _to,\\n        bytes calldata _paymentReference,\\n        uint256 _feeAmount,\\n        address payable _feeAddress\\n    ) external payable {\\n        transferExactEthWithReferenceAndFee(\\n            _to,\\n            msg.value - _feeAmount,\\n            _paymentReference,\\n            _feeAmount,\\n            _feeAddress\\n        );\\n    }\\n\\n    /**\\n     * @notice Performs an Ethereum transfer with a reference with an exact amount of eth\\n     * @param _to Transfer recipient\\n     * @param _amount Amount to transfer\\n     * @param _paymentReference Reference of the payment related\\n     * @param _feeAmount The amount of the payment fee (part of the msg.value)\\n     * @param _feeAddress The fee recipient\\n     */\\n    function transferExactEthWithReferenceAndFee(\\n        address payable _to,\\n        uint256 _amount,\\n        bytes calldata _paymentReference,\\n        uint256 _feeAmount,\\n        address payable _feeAddress\\n    ) public payable nonReentrant {\\n        (bool sendSuccess, ) = _to.call{value: _amount}('');\\n        require(sendSuccess, 'Could not pay the recipient');\\n\\n        _feeAddress.transfer(_feeAmount);\\n\\n        // transfer the remaining ethers to the sender\\n        (bool sendBackSuccess, ) = payable(msg.sender).call{\\n            value: msg.value - _amount - _feeAmount\\n        }('');\\n        require(sendBackSuccess, 'Could not send remaining funds to the payer');\\n\\n        emit TransferWithReferenceAndFee(_to, _amount, _paymentReference, _feeAmount, _feeAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"TransferWithReferenceAndFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_paymentReference\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"transferExactEthWithReferenceAndFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_paymentReference\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"transferWithReferenceAndFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EthereumFeeProxy", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}