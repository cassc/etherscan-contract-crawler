{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract BNBC_Contract {\r\n    // Structure representing a UTXO (Unspent Transaction Output)\r\n    struct UTXO {\r\n        uint256 id;     // Unique identifier for the UTXO\r\n        address owner;  // Address of the owner of this UTXO\r\n        uint256 amount; // Amount of asset held in this UTXO\r\n        string data;    // Additional data or message that can be inscribed in the UTXO\r\n    }\r\n\r\n    // Structure to represent data for creating output UTXOs during a transaction\r\n    struct OutputUTXOData {\r\n        address owner;  // Address of the owner for the output UTXO\r\n        uint256 amount; // Asset amount for the output UTXO\r\n        string data;    // Additional data for the output UTXO\r\n    }\r\n\r\n    struct LockScript {\r\n        uint256 _ether;\r\n        uint256 locktime;\r\n    }\r\n\r\n    // Mapping of UTXO ID to its corresponding UTXO structure\r\n    mapping(uint256 => UTXO) public utxos;\r\n\r\n    // Mapping of an address to its total asset balance across all UTXOs\r\n    mapping(address => uint256) private _balance;\r\n\r\n    mapping(uint256 => LockScript) public LockedUTXO;\r\n\r\n    // Maximum number of UTXOs that can be created\r\n    uint256 private constant MAX_UTXO_COUNT = 21_000_000;\r\n    // Fixed amount of asset assigned to each UTXO\r\n    uint256 private constant UTXO_AMOUNT = 1000;\r\n\r\n    // Counter to generate unique UTXO IDs\r\n    uint256 public utxoCounter = 0;\r\n\r\n    // Total asset supply in the contract\r\n    uint256 private _totalSupply = 0;\r\n\r\n    // State variable to track reentrancy\r\n    bool private _locked;\r\n\r\n    // Modifier to prevent reentrancy\r\n    modifier noReentrant() {\r\n        require(!_locked, \"No reentrancy allowed!\");\r\n        _locked = true;\r\n        _;\r\n        _locked = false;\r\n    }\r\n\r\n    // Modifier to ensure that the function is called by an externally owned account (EOA) only\r\n    modifier onlyTxOrigin() {\r\n        require(msg.sender == tx.origin, \"Only EOA!\");\r\n        _;\r\n    }\r\n\r\n    // Function to generate a new unique ID for a UTXO\r\n    function generateUtxoId() private returns (uint256) {\r\n        return utxoCounter++;\r\n    }\r\n\r\n    // Function to create a new UTXO. Can only be called by an EOA.\r\n    function CreateUTXO() private onlyTxOrigin {\r\n        require(utxoCounter < MAX_UTXO_COUNT, \"Max UTXO limit reached\");\r\n\r\n        uint256 newUtxoId = generateUtxoId();\r\n        UTXO memory newUtxo = UTXO(newUtxoId, msg.sender, UTXO_AMOUNT, \"\");\r\n        utxos[newUtxoId] = newUtxo;\r\n        _balance[msg.sender] += UTXO_AMOUNT;\r\n        _totalSupply += UTXO_AMOUNT;\r\n\r\n        emit UtxoCreated(newUtxoId, msg.sender, UTXO_AMOUNT, \"\");\r\n    }\r\n\r\n    // Structure for representing a transaction in the UTXO model\r\n    struct Transaction {\r\n        uint256[] inputs;  // Array of input UTXO IDs\r\n        OutputUTXOData[] outputs; // Array of output UTXO data\r\n    }\r\n\r\n    // Function to get the balance of an address\r\n    function balanceOf(address _addr) public view returns(uint256) {\r\n        return _balance[_addr];\r\n    }\r\n\r\n    // Function to get the total supply of assets in the contract\r\n    function totalSupply() public view returns(uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function getLockStates(uint256 _id) public view returns(bool){\r\n        return LockedUTXO[_id].locktime > block.timestamp;\r\n    }\r\n\r\n    // Function to process a transaction, validating the input UTXOs and creating the output UTXOs\r\n    function processTransaction(Transaction memory _tx) public noReentrant{\r\n        require(_tx.inputs.length <= 24 && _tx.outputs.length <= 24, \"Too long inputs/outputs length!\");\r\n        uint256 totalInputAmount = 0;\r\n        uint256 totalOutputAmount = 0;\r\n\r\n        // Validate each input UTXO and compute the total input amount\r\n        for (uint256 i = 0; i < _tx.inputs.length; i++) {\r\n            UTXO storage inputUtxo = utxos[_tx.inputs[i]];\r\n            require(getLockStates(inputUtxo.id) == false, \"Already locked\");\r\n            require(inputUtxo.owner == msg.sender, \"UTXO not owned by sender\");\r\n            totalInputAmount += inputUtxo.amount;\r\n\r\n            // Deletes the input UTXO and emits the UtxoDeleted event\r\n            delete utxos[_tx.inputs[i]];\r\n            emit UtxoDeleted(_tx.inputs[i]);\r\n        }\r\n\r\n        _balance[msg.sender] -= totalInputAmount;\r\n\r\n        // Compute total output amount and create new UTXOs\r\n        for (uint256 i = 0; i < _tx.outputs.length; i++) {\r\n            totalOutputAmount += _tx.outputs[i].amount;\r\n            uint256 newUtxoId = generateUtxoId();\r\n            utxos[newUtxoId] = UTXO(newUtxoId, _tx.outputs[i].owner, _tx.outputs[i].amount, _tx.outputs[i].data);\r\n            _balance[_tx.outputs[i].owner] += _tx.outputs[i].amount;\r\n            emit UtxoEvent(newUtxoId, _tx.outputs[i].owner, _tx.outputs[i].amount, _tx.outputs[i].data);\r\n        }\r\n\r\n        // Ensure the total input and output amounts are equal\r\n        require(totalInputAmount == totalOutputAmount, \"Input and output amounts do not match\");\r\n    }\r\n\r\n    // Locks a UTXO by setting a locktime and the amount of ether associated with it\r\n    function LockingScript(uint256 UTXOId, uint256 _ether, uint256 locktime) public noReentrant{\r\n        // Ensure that the UTXO is owned by the sender and is not already locked\r\n        require(utxos[UTXOId].owner == msg.sender, \"UTXO not owned by sender\");\r\n        require(getLockStates(UTXOId) == false, \"Already locked\");\r\n        \r\n        // Set the amount and locktime for the UTXO\r\n        LockedUTXO[UTXOId]._ether = _ether;\r\n        LockedUTXO[UTXOId].locktime = block.timestamp + locktime * 1 hours;\r\n\r\n        emit UtxoLocked(UTXOId, _ether, locktime);\r\n    }\r\n\r\n    // Unlocks a UTXO, allowing it to be transferred, and sends the ether back to the original owner\r\n    function UnlockingScript(uint256 UTXOId) public payable noReentrant{\r\n        // Check that the UTXO is locked and the correct amount of ether is provided to unlock it\r\n        require(getLockStates(UTXOId), \"Not locked\");\r\n        require(msg.value == LockedUTXO[UTXOId]._ether, \"Not enough ether\");\r\n\r\n        // Store the original owner and ether amount for later use\r\n        address owner = utxos[UTXOId].owner;\r\n        uint256 etherAmount = LockedUTXO[UTXOId]._ether;\r\n\r\n        // Update the UTXO's owner to the sender before transferring ether to prevent reentrancy attacks\r\n        utxos[UTXOId].owner = msg.sender;\r\n\r\n        // Remove the UTXO from the locked state\r\n        delete LockedUTXO[UTXOId];\r\n\r\n        // Safely transfer ether to the original owner using .call to handle potential exceptions\r\n        (bool success, ) = payable(owner).call{value: etherAmount}(\"\");\r\n        require(success, \"Ether transfer failed\");\r\n\r\n        emit UtxoUnlocked(UTXOId);\r\n    }\r\n\r\n    // Function to transfer a UTXO or a portion of it to another address\r\n    function DangerTransfer(uint256 UtxoId, address _to, uint256 _amount) public noReentrant{\r\n        UTXO storage utxo = utxos[UtxoId];\r\n        require(utxo.owner == msg.sender, \"UTXO not owned by sender\");\r\n        require(getLockStates(utxo.id) == false, \"Already locked\");\r\n        require(_amount > 0 && _amount <= utxo.amount, \"Invalid transfer amount\");\r\n\r\n        if (utxo.amount == _amount) {\r\n            // Transfer the entire UTXO to a new owner\r\n            utxo.owner = _to;\r\n        } else {\r\n            // Split the UTXO into two: one for the transferred amount and one for the remainder\r\n            uint256 remainingAmount = utxo.amount - _amount;\r\n\r\n            // Create a new UTXO for the remaining amount with the original owner\r\n            uint256 newUtxoIdRemain = generateUtxoId();\r\n            UTXO memory newUtxoRemain = UTXO(newUtxoIdRemain, msg.sender, remainingAmount, \"\");\r\n            utxos[newUtxoIdRemain] = newUtxoRemain;\r\n            emit UtxoEvent(newUtxoIdRemain, msg.sender, remainingAmount, \"\");\r\n\r\n            // Create a new UTXO for the transferred amount with the new owner\r\n            uint256 newUtxoIdTo = generateUtxoId();\r\n            UTXO memory newUtxoTo = UTXO(newUtxoIdTo, _to, _amount, \"\");\r\n            utxos[newUtxoIdTo] = newUtxoTo;\r\n            emit UtxoEvent(newUtxoIdTo, _to, _amount, \"\");\r\n\r\n            // Delete the original UTXO\r\n            delete utxos[UtxoId];\r\n            emit UtxoDeleted(UtxoId);\r\n        }\r\n\r\n        // Update balances of sender and receiver\r\n        _balance[msg.sender] -= _amount;\r\n        _balance[_to] += _amount;\r\n    }\r\n\r\n    // Function to inscribe or modify data in a UTXO\r\n    function inscribe(uint256 UtxoId, string memory _data) public noReentrant{\r\n        UTXO storage utxo = utxos[UtxoId];\r\n        require(utxo.owner == msg.sender, \"UTXO not owned by sender\");\r\n        require(getLockStates(utxo.id) == false, \"Already locked\");\r\n        utxo.data = _data;\r\n        emit UtxoEvent(UtxoId, utxo.owner, utxo.amount, _data);\r\n    }\r\n\r\n\r\n    // Function to allow the owner of a UTXO to unlock it at any time\r\n    function OwnerUnlockingScript(uint256 UTXOId) public noReentrant {\r\n        // Checks that the caller is the owner of the UTXO\r\n        require(utxos[UTXOId].owner == msg.sender, \"UTXO not owned by sender\");\r\n\r\n        // Deletes the lock script, effectively unlocking the UTXO\r\n        delete LockedUTXO[UTXOId];\r\n\r\n        // Emits an event indicating the UTXO has been unlocked\r\n        emit UtxoUnlocked(UTXOId);\r\n    }\r\n\r\n    address payable to = payable(msg.sender);\r\n    uint256 public antiBOTFee = 0.0001 ether;\r\n    // Fallback function to receive Ether and automatically create a UTXO\r\n    receive() external payable {\r\n        // Creates a new UTXO with the received Ether amount\r\n        require(msg.value >= antiBOTFee, \"No value\");\r\n        CreateUTXO();\r\n        to.transfer(address(this).balance);\r\n    }\r\n\r\n\r\n    // Events to emit on UTXO creation, update, and deletion\r\n    event UtxoEvent(uint256 id, address to, uint256 amount, string data);\r\n    event UtxoCreated(uint256 id, address to, uint256 amount, string data);\r\n    event UtxoDeleted(uint256 id);\r\n    event UtxoLocked(uint256 indexed UTXOId, uint256 etherAmount, uint256 locktime);\r\n    event UtxoUnlocked(uint256 indexed UTXOId);\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"UtxoCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UtxoDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"UtxoEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"UTXOId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"}],\"name\":\"UtxoLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"UTXOId\",\"type\":\"uint256\"}],\"name\":\"UtxoUnlocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"UtxoId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DangerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LockedUTXO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ether\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"UTXOId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ether\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"}],\"name\":\"LockingScript\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"UTXOId\",\"type\":\"uint256\"}],\"name\":\"OwnerUnlockingScript\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"UTXOId\",\"type\":\"uint256\"}],\"name\":\"UnlockingScript\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBOTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getLockStates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"UtxoId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"inscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"internalType\":\"struct BNBC_Contract.OutputUTXOData[]\",\"name\":\"outputs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BNBC_Contract.Transaction\",\"name\":\"_tx\",\"type\":\"tuple\"}],\"name\":\"processTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utxoCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"utxos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BNBC_Contract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bb369e2b9d9ade118792324199eae562964ef9b67ba9fe5dcc8c1f2713396f49"}