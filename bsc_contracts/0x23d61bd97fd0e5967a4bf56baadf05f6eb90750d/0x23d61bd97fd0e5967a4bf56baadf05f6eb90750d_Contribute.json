{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n   \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakePair{\r\n    function token0() external view returns (address);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function sync() external;\r\n}\r\n\r\ninterface IWinner{\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function withdrawToken(IERC20 __token, uint256 amount) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\ncontract Contribute is \r\n    IERC20\r\n{\r\n    address public __owner;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    address public pair;\r\n    uint256 public numTokensSell;\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address public marketAddress = 0xDE6DE3ca2868a9927bcc03a7677fAc95e4ecB331;\r\n    address public PancakeFactoryAddress;\r\n    IPancakeRouter02 internal uniswapV2Router;\r\n    IERC20 private c_usdt;\r\n    mapping (address => bool) public isBlacklist;\r\n    mapping (address => bool) public isExcludedFromFees;\r\n    uint256 public tradingEnabledTimestamp;\r\n    uint256 public blockNumTime = uint256(6);\r\n    uint256 public totalRatio = uint256(10000);\r\n    uint256 public fundRatio;\r\n    uint256 public awardRatio;\r\n    uint256 public winnerRatio;\r\n    uint256 public winnerURatio;\r\n    bool public openStatus = true;\r\n    address private creator;\r\n    string private tokenName;\r\n    string private tokenSymbol;\r\n    uint8 private tokenDecimal;\r\n    IWinner public winnerContrace = IWinner(0x0CDD9E00A62580345546fa434A250212836f1F9E);\r\n    \r\n    constructor(\r\n    )\r\n        payable\r\n    {\r\n        __owner = msg.sender;\r\n        tokenDecimal = 18;\r\n        numTokensSell = 10 ** tokenDecimal;\r\n        isExcludedFromFees[msg.sender] = true;\r\n        isExcludedFromFees[address(winnerContrace)] = true;\r\n        tradingEnabledTimestamp = block.timestamp;\r\n        uniswapV2Router = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        c_usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n        uint256 total = uint256(10000)*10**tokenDecimal;\r\n        tokenName = \"Contribute\";\r\n        tokenSymbol = \"Contribute\";\r\n        _balances[msg.sender] = total ;\r\n        _totalSupply = total;\r\n        emit Transfer(address(0), msg.sender, total);\r\n        PancakeFactoryAddress = uniswapV2Router.factory();\r\n        address _pair = pairFor(PancakeFactoryAddress, address(this), address(c_usdt));\r\n        pair = _pair;\r\n        isExcludedFromFees[address(this)] = true;\r\n        fundRatio = uint256(100);\r\n        awardRatio = uint256(300);\r\n        winnerRatio = uint256(3);\r\n        winnerURatio = uint256(10000);\r\n        creator = msg.sender;\r\n    }\r\n\r\n    event isWinnerEvent(address _winner,uint256 _timestemp,uint256 _amount,uint256 _randomKey,uint256 _result,uint256 _maxNumber,uint256 _winnerAmount);\r\n\r\n    modifier onlyOwner() {\r\n        require(__owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCreator(){\r\n        require( creator == msg.sender, \"Ownable: caller is not the creator\");\r\n        _;\r\n    }\r\n\r\n    modifier valOutLimitOne(uint256 _val){\r\n        require( _val <= uint256(10000), \"Value out of limit\");\r\n        _;\r\n    }\r\n\r\n    modifier valOutLimitTwo( uint256 _val ){\r\n        require( _val <= uint256(1000), \"Value out of limit\");\r\n        _;\r\n    }\r\n\r\n    modifier valOutLimitThree( uint256 _val ){\r\n        require( _val <= uint256(4), \"Value out of limit\");\r\n        _;\r\n    }\r\n\r\n    function symbol() \r\n        external \r\n        view \r\n        returns (string memory)\r\n    {\r\n        return tokenSymbol;\r\n    }\r\n\r\n    function name() \r\n        external \r\n        view \r\n        returns (string memory)\r\n    {\r\n        return tokenName;\r\n    }\r\n\r\n    function decimals() \r\n        external \r\n        view \r\n        returns (uint8) \r\n    {\r\n        return tokenDecimal;\r\n    }\r\n\r\n    function totalSupply() \r\n        public \r\n        view \r\n        override \r\n        returns (uint256) \r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) \r\n        external \r\n        view \r\n        override \r\n        returns (uint256) \r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) \r\n        external \r\n        view \r\n        override \r\n        returns (uint256) \r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) \r\n        external \r\n        override \r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) \r\n        internal \r\n    {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n\r\n    function transfer(address recipient, uint256 amount) \r\n        external \r\n        override \r\n        returns (bool) \r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n       \r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) \r\n        external \r\n        override \r\n        returns (bool) \r\n    {\r\n        _transfer(sender, recipient, amount);\r\n       \r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transferNormal(address sender, address recipient, uint256 amount) \r\n        private \r\n    {\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferNoswap()\r\n        private \r\n    {\r\n        uint256 contractTokenBalance = _balances[address(this)];\r\n        uint256 fundAmount = contractTokenBalance * fundRatio / (awardRatio + fundRatio);\r\n        uint256 awardAmount = contractTokenBalance - fundAmount;\r\n        if (contractTokenBalance >= numTokensSell) {\r\n            swapTokensForUSDT(fundAmount);\r\n            swapTokensForUSDTC(awardAmount);\r\n        }\r\n    }\r\n    \r\n\r\n    function swapTokensForUSDT(uint256 tokenAmount) \r\n        private \r\n    {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(c_usdt);\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(marketAddress),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForUSDTC(uint256 tokenAmount) \r\n        private \r\n    {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(c_usdt);\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(winnerContrace),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function isWinner(address sender, address recipient, uint256 amount)\r\n        internal\r\n    {\r\n        if( amount < uint256(1*10**tokenDecimal) ){\r\n            return ;\r\n        }\r\n        if( sender == address(0) || sender == pair ){\r\n            return ;\r\n        }\r\n        if( recipient !=  deadAddress){\r\n            return ;\r\n        }\r\n        bytes memory info = abi.encodePacked( block.difficulty, block.timestamp,amount );\r\n        bytes32 hash = keccak256(info);\r\n        uint256 randomVal = uint( hash ) % uint256( winnerRatio );\r\n        if( randomVal == uint256(0) ){\r\n            return ;\r\n        }\r\n        uint256 currentAmount = IERC20(c_usdt).balanceOf( address(winnerContrace) ) * winnerURatio * randomVal / (totalRatio * uint256(100) );\r\n        winnerContrace.withdrawToken(c_usdt, currentAmount);\r\n        IERC20(c_usdt).transfer(sender, currentAmount);\r\n        emit isWinnerEvent(sender, block.timestamp, amount, block.difficulty, randomVal, winnerRatio - 1, currentAmount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) \r\n        internal \r\n    {\r\n        require(!isBlacklist[sender] && !isBlacklist[recipient], \"in blacklist\");\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        if(isExcludedFromFees[sender] || isExcludedFromFees[recipient]) {\r\n            _transferNormal(sender, recipient, amount);\r\n            return;\r\n        }\r\n        address _pair = pair;\r\n        require(block.timestamp >= tradingEnabledTimestamp, \"trade not open\");\r\n        if(block.timestamp <= tradingEnabledTimestamp + blockNumTime) {\r\n            if(sender != _pair && sender != address(uniswapV2Router)) {\r\n                isBlacklist[sender] = true;\r\n            }\r\n            if(recipient != _pair && recipient != address(uniswapV2Router)) {\r\n                isBlacklist[recipient] = true;\r\n            }\r\n        }\r\n        if( sender != _pair && recipient != _pair ){\r\n            _transferNormal(sender, recipient, amount);\r\n            _transferNoswap();\r\n            isWinner(sender, recipient, amount);\r\n            return;\r\n        }\r\n        uint256 fundAmount = amount * (awardRatio + fundRatio) / totalRatio;\r\n        _balances[address(this)] += fundAmount;\r\n        emit Transfer(sender, address(this), fundAmount);\r\n        uint256 receiveAmount = amount - fundAmount;\r\n        _balances[recipient] += receiveAmount;\r\n        emit Transfer(sender, recipient, receiveAmount);\r\n    }\r\n\r\n    function pairFor(address factory, address tokenA, address tokenB) \r\n        internal \r\n        pure \r\n        returns (address pair_) \r\n    {\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        pair_ = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\r\n        )))));\r\n    }\r\n\r\n    function setN(uint256 n) \r\n        external \r\n        onlyOwner \r\n    {\r\n        numTokensSell = n;\r\n    }\r\n\r\n    function setTrade(uint256 t) \r\n        external \r\n        onlyOwner \r\n    {\r\n        tradingEnabledTimestamp = t;\r\n    }\r\n\r\n    function setBlockNumTime(uint256 b)\r\n        external \r\n        onlyOwner \r\n    {\r\n        blockNumTime = b;\r\n    }\r\n\r\n    function setExcludeFee(address a, bool b) \r\n        external \r\n        onlyOwner \r\n    {\r\n        isExcludedFromFees[a] = b;\r\n    }\r\n\r\n    function setBlacklist(address a, bool b)\r\n        external \r\n        onlyOwner \r\n    {\r\n        isBlacklist[a] = b;\r\n    }\r\n\r\n    function setAwardRatio(uint256 _awardRatio)\r\n        external\r\n        onlyOwner\r\n        valOutLimitTwo(_awardRatio)\r\n    {\r\n        awardRatio = _awardRatio;\r\n    }\r\n\r\n    function setFundRatio( uint256 _fundRatio )\r\n        external\r\n        onlyOwner\r\n        valOutLimitTwo(_fundRatio)\r\n    {\r\n        awardRatio = _fundRatio;\r\n    }\r\n\r\n    function withdraw(uint256 amount) \r\n        external\r\n        onlyCreator\r\n    {\r\n        winnerContrace.withdraw(amount);\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    function withdrawToken(IERC20 __token, uint256 amount) \r\n        external \r\n        onlyCreator\r\n    {\r\n        winnerContrace.withdrawToken(__token, amount);\r\n        IERC20(__token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawCurrent(uint256 amount) \r\n        external\r\n        onlyCreator\r\n    {\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    function withdrawCurrentToken(IERC20 __token, uint256 amount) \r\n        external\r\n        onlyCreator\r\n    {\r\n        IERC20(__token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function getRatio()\r\n        external\r\n        view\r\n        returns(uint256 _ratio )\r\n    {\r\n        _ratio = awardRatio + fundRatio;\r\n    }\r\n\r\n    function getWinnerNum()\r\n        external\r\n        view\r\n        returns( uint256 _winnerNum )\r\n    {\r\n        _winnerNum = IERC20(c_usdt).balanceOf( address(winnerContrace) );\r\n    }\r\n\r\n    function setWinnerRatio( uint256  _winnerRatio)\r\n        external\r\n        onlyOwner\r\n        valOutLimitThree(_winnerRatio)\r\n    {\r\n        winnerRatio = _winnerRatio;\r\n    }\r\n\r\n    function setWinnerURatio( uint256  _winnerURatio )\r\n        external\r\n        onlyOwner\r\n        valOutLimitOne(_winnerURatio)\r\n    {\r\n        winnerURatio = _winnerURatio;\r\n    }\r\n\r\n    function setNumTokensSell( uint256 _numTokensSell )\r\n        external\r\n        onlyOwner\r\n    {\r\n        numTokensSell = _numTokensSell * 10 ** tokenDecimal;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) \r\n        external\r\n        onlyOwner \r\n    {\r\n        __owner = newOwner;\r\n    }\r\n\r\n    function transferOwnershipWinner( address newOwner )\r\n        external\r\n        onlyOwner\r\n    {\r\n        IWinner(winnerContrace).transferOwnership(newOwner);\r\n    }\r\n\r\n    function setWinnerContrace(IWinner newWinnerContrace)\r\n        external\r\n        onlyOwner\r\n    {\r\n        winnerContrace = IWinner(newWinnerContrace);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestemp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_randomKey\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_result\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_winnerAmount\",\"type\":\"uint256\"}],\"name\":\"isWinnerEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PancakeFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"awardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_winnerNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_awardRatio\",\"type\":\"uint256\"}],\"name\":\"setAwardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"setBlockNumTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setExcludeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundRatio\",\"type\":\"uint256\"}],\"name\":\"setFundRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"setN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokensSell\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWinner\",\"name\":\"newWinnerContrace\",\"type\":\"address\"}],\"name\":\"setWinnerContrace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winnerRatio\",\"type\":\"uint256\"}],\"name\":\"setWinnerRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winnerURatio\",\"type\":\"uint256\"}],\"name\":\"setWinnerURatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabledTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerContrace\",\"outputs\":[{\"internalType\":\"contract IWinner\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerURatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCurrent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"__token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCurrentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"__token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Contribute", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cd4841e79bb9de5ed97f10c3a458afc86faee5e796c76b8e23e9b605cdd99a1d"}