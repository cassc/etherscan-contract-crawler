{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Contract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.9;\\n\\ncontract Flipper {\\n    event PaymentMade(address winner, address loser, uint256 amount);\\n    event ContractChanged();\\n    address payable private owner = payable(0xE35Cc30779b15b6DA63d7C3B7e0ed793390A5592);\\n    address payable public player1;\\n    address payable public player2;\\n    uint256 public betAmount = 0;\\n    uint256 private lastBlock;\\n\\n    function joinGame1() public payable {\\n        require(msg.value > 0, \\\"You must bet some amount.\\\");\\n        require(player1 == address(0), \\\"Seat 1 is already occupied.\\\");\\n        require(payable(msg.sender) != player2, \\\"You cannot sit on both sides of the table.\\\");\\n        if (player2 != address(0)) {\\n            require(msg.value == betAmount, \\\"You must match the first player's bet.\\\");\\n            player1 = payable(msg.sender);\\n            lastBlock = block.number;\\n        } else {\\n            betAmount = msg.value;\\n            player1 = payable(msg.sender);\\n        }\\n        emit ContractChanged();\\n    }\\n\\n    function joinGame2() public payable {\\n        require(msg.value > 0, \\\"You must bet some amount.\\\");\\n        require(player2 == address(0), \\\"Seat 2 is already occupied.\\\");\\n        require(payable(msg.sender) != player1, \\\"You cannot sit on both sides of the table.\\\");\\n        if (player1 != address(0)) {\\n            require(msg.value == betAmount, \\\"You must match the first player's bet.\\\");\\n            player2 = payable(msg.sender);\\n            lastBlock = block.number;\\n        } else {\\n            betAmount= msg.value;\\n            player2 = payable(msg.sender);\\n        }\\n        emit ContractChanged();\\n    }\\n\\n    function getWinner() public {\\n        require(player1 != address(0) && player2 != address(0), \\\"Need 2 players before getting a winner.\\\");\\n        require(block.number > lastBlock + 1, \\\"Must wait for block delay before getting a winner\\\");\\n        if (block.number <= lastBlock + 255) {\\n            owner.transfer(address(this).balance / 133);  // Send fee to owner\\n            if (uint256(blockhash(lastBlock)) % 2 == 0) {\\n                emit PaymentMade(player1, player2, address(this).balance);\\n                player1.transfer(address(this).balance);\\n            } else {\\n                emit PaymentMade(player2, player1, address(this).balance);\\n                player2.transfer(address(this).balance);\\n            }\\n        } else {\\n            invalidateGame();\\n            emit ContractChanged();\\n        }\\n        resetGame();\\n    }\\n\\n    function terminateGame() public {\\n        require((msg.sender == player1 && player2 == address(0)) ||\\n        (msg.sender == player2 && player1 == address(0)) ||\\n        (msg.sender == owner && block.number > lastBlock + 50),\\n            \\\"Only player 1, player 2 or the owner can terminate the game.\\\");\\n        if (msg.sender == owner) {\\n            invalidateGame();\\n        } else {\\n            if (player1 != payable(address(0))) {\\n                player1.transfer(address(this).balance);\\n            }\\n            if (player2 != payable(address(0))) {\\n                player2.transfer(address(this).balance);\\n            }\\n        }\\n        resetGame();\\n        emit ContractChanged();\\n    }\\n\\n    function invalidateGame() private {\\n        owner.transfer(address(this).balance / 20);\\n        if (player1 != payable(address(0)) && player2 != payable(address(0))) {\\n            player1.transfer(address(this).balance / 2);\\n            player2.transfer(address(this).balance);\\n        } else if (player1 != payable(address(0))) {\\n            player1.transfer(address(this).balance);\\n        } else if (player2 != payable(address(0))) {\\n            player2.transfer(address(this).balance);\\n        }\\n    }\\n\\n    function resetGame() private {\\n        player1 = payable(address(0));\\n        player2 = payable(address(0));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"betAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinGame1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinGame2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"player1\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"player2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminateGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Flipper", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}