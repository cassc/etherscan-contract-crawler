{"SourceCode": "/**\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%*+%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#+=*%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@%##**#+=*#*##%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@%**#%%%%%**#%%%%##*#%@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@%**%%@@@@%*%%%%##@@@@@%#*%@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%\r\n        %%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@%#*%%@@@@%#%#%@@%%#%*@@@@@%#*%@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%\r\n        %%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@#*%%%#+*%@%%%%#####%%%@@%+*%%%#*%@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%\r\n        %%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@%##%%#+#%%*=+**#*###***+=+#%%*+%%%*%@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%\r\n        %%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@#*%%+*%@*#@@%#%#+%%#+%@#@@%*#@%=#%%+%@@%@@@@@@@@@@@@@@@@@@@%%%%%%%%%\r\n        %%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@%*%@%%@@@@@@%#*@%+%@#*%@+#%@%@@@@%%@%*@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%\r\n        %%%%%%%%%@@@@@@@@@@@@@@@@@@@#++++*%@%++%%%@@%#%##%%##%@#@@@%%#++@@%+++++%@@@@@@@@@@@@@@@@@@@%%%%%%%%\r\n        %%%%%%%%%@@@@@@@@@@@@@@@@@@@%%%@%%@@@@@@@%*==+*#*###***+=+#@@@@@@@@%@%%%@@@@@@@@@@@@@@@@@@@@@%%%%%%%\r\n        %%%%%%%%%@@@@@@@@@@@@@@@@@@@#***+*@@%++@*#@@%#%**%%%*#@*@@%*##++@@%*****%@@@@@@@@@@@@@@@@@@@@%%%%%%%\r\n        %%%%%%%%@@@@@@@@@@@@@@@@@@@@@%%%%%@@@%%@@@#**+++=++==++**#%@@@%%@@@%%%%%@@@@@@@@@@@@@@@@@@@@@%%%%%%%\r\n        %%%%%%%%@@@@@@@@@@@@@@@@@@@@#**###@@%**@#*%@%#%**%@%*#@*@%#*%%**@@%*%#**%@@@@@@@@@@@@@@@@@@@@%%%%%%%\r\n        %%%%%%%%@@@@@@@@@@@@@@@@@@@@%%%%%%%%@@@@@@%@@%%%%%%%%%%%%@@@%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@%%%%%%%\r\n        %%%%%%%%@@@@@@@@@@@@@@@@@@@%.......:=#%%#-.#%+...........-#%-...........-%@@@@@@@@@@@@@@@@@@@%%%%%%%\r\n        %%%%%%%%%@@@@@@@@@@@@@@@@@@%.:+****+..+%#:.#%#****:.=****#%%#*******+-.:*%@@@@@@@@@@@@@@@@@@@%%%%%%%\r\n        %%%%%%%%%@@@@@@@@@@@@@@@@@%%.:*%%%%%=.=%#:.#%%#%@%-.+%@@%#%@@#+**+#*..+%@@@@@@@@@@@@@@@@@@@@@%%%%%%%\r\n        %%%%%%%%%@@@@@@@@@@@@@@@@@%%..-====:.:*%#:.#%%%@@%-.+%@@##@@*#@@%+:.:#%@%%@@@@@@@@@@@@@@@@@@%%%%%%%%\r\n        %%%%%%%%%@@@@@@@@@@@@@@@@@%%..:--:..+%%@%--+***#%%-.+%#*#%**%@%%+.:*%@%#%@@@@@@@@@@@@@@@@@@@%%%%%%%%\r\n        %%%%%%%%%%@@@@@@@@@@@@@@@@%%.:*%%%+.:*%@%%%@@@@@#*-:+*%@@%@@%%+:.=#%%%#%@@@@@@@@@@@@@@@@@@@%%%%%%%%%\r\n        %%%%%%%%%%@@@@@@@@@@@@@@@@%%::=++*##:.+%@@@@@@@@@%-.+%@@@@@#*-..++**++**#@@@@@@@@@@@@@@@@@@%%%%%%%%%\r\n        %%%%%%%%%%%@@@@@@@@@@@@@@@@%::#%@@@%#=.=%@#%@@@@@%=:*%#####+:...........-%@@@@@@@@@@@@@@@@%%%%%%%%%%\r\n        %%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%@@@@@@@@@@@@@@@@@%%%%%%%%%%%\r\n        %%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@%@%@%%@%%%%%@@%%%%%%%%%@@@%%@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@###%%###@#@%%#%##@#@%@#%#%%%@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n     */\r\n\r\n// SPDX-License-Identifier: GPL-2.0-or-later\r\n\r\npragma solidity >=0.4.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\ncontract GameFeed is Ownable {\r\n\r\n        struct Game {\r\n            string name; // Match Name (e.g Major Katowice, Final, Fnatic vs LDLC\r\n            string t1; // Who is Team 1\r\n            string t2; // Who is Team 2\r\n            uint256 thetime; // starting time\r\n            uint256 result;   // 1 team1wins, 2 team2wins, 3draw, 4 something went wrong ,0 even did not occur\r\n        }\r\n\r\n        mapping(uint256 => Game) public games; // 1 team1wins, 2 team2wins, 3draw, 0 even did not occur\r\n        mapping(address => bool) public operator;\r\n\r\n\r\n        modifier onlyOperator() {\r\n        require(operator[msg.sender] == true, 'Operator: caller is not the operator');\r\n        _;\r\n        }  \r\n\r\n        constructor() {\r\n            operator[0x274CA02eC2a99Dc90c21236972c0C3Bb286c5B01] = true;\r\n        }\r\n\r\n        event CreateGame(uint256 indexed time, uint256 indexed id, string name, string t1, string t2);\r\n        event AddResult(uint256 indexed id, uint256 result);\r\n        event ChangeTime(uint256 indexed id, uint256 time);\r\n\r\n\r\n        uint256 public id = 0;\r\n\r\n        function addGameToList(string memory name, uint256 time, string memory t1, string memory t2) public onlyOperator {\r\n            require(games[id].thetime == 0, 'game already added');\r\n            games[id].thetime =  time;\r\n            games[id].name = name;\r\n            games[id].t1 = t1; \r\n            games[id].t2 = t2;\r\n            emit CreateGame(time, id, name, t1,t2);\r\n            id += 1;\r\n        }\r\n\r\n        function addResult(uint256 _id, uint256 result) public onlyOperator {\r\n            require(games[_id].result == 0, 'result already added');\r\n            require(_id < id, 'bad id result');\r\n            games[_id].result = result; \r\n            emit AddResult(_id, result);\r\n        }\r\n\r\n        function modifyTime(uint256 _id, uint256 _time) public onlyOperator {\r\n            require(games[_id].result == 0, 'result already added');\r\n            require(games[_id].thetime > block.timestamp, 'cannot modify other games');\r\n            require(_time > games[_id].thetime, 'time does not require updated');\r\n            games[_id].thetime = _time;\r\n            emit ChangeTime(_id, _time);\r\n        }\r\n\r\n        function modifyName(uint256 _id, string memory name) public onlyOperator {\r\n            games[_id].name = name;\r\n        }\r\n\r\n        function addOperator(address _operator, bool _status) public onlyOperator {\r\n            operator[_operator] = _status;\r\n        }\r\n\r\n}\r\n\r\n\r\ncontract RITZ is Ownable, ReentrancyGuard {\r\n\r\n    \r\n\r\n    mapping(uint256 => uint256) public t1raise;  // raise by game round\r\n    mapping(uint256 => uint256) public t2raise;  // raise by game round\r\n\r\n    mapping(address => mapping(uint256 => uint256)) public contributionsT1; // tracks personal contributions in USDT\r\n    mapping(address => mapping(uint256 => uint256)) public contributionsT2; // tracks personal contributions in USDT\r\n    mapping(address => mapping(uint256 => bool)) public withdrewFunds; \r\n    mapping(address => bool) public supportedTokens;\r\n\r\n    uint256 public constant MULTIPLIER = 10e18;\r\n    bool public takeFees = false;\r\n    uint256 public fee = 500; // 5%\r\n\r\n    IBEP20 public USDT;\r\n    GameFeed public gameOracle;\r\n    IRouter02 public router =  IRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    \r\n\r\n\r\n    constructor(IBEP20 _USDT, GameFeed _oracle) {\r\n        USDT = _USDT;\r\n        gameOracle = _oracle;\r\n    }\r\n\r\n    event Bet(address user, uint256 amount, uint256 id);\r\n    event ChangeFee(uint256 fee);\r\n\r\n    function changeFee(uint256 _fee) public onlyOwner {\r\n        require(_fee < 1000, 'fee larger than 10%');\r\n        fee = _fee; \r\n        emit ChangeFee(_fee);\r\n    }\r\n\r\n    function enableFee() public onlyOwner {\r\n        takeFees = !takeFees;\r\n    }\r\n\r\n\r\n    function calculateFee(uint256 _amount) public view returns(uint256) {\r\n        uint256 _fee = _amount * fee / 10000;\r\n        return _fee;\r\n    }\r\n    \r\n\r\n    function getOracleData(uint256 id) public view returns(string memory, uint256 ,uint256, uint256){\r\n\r\n        (string memory name, ,, uint256 thetime, uint256 result) = gameOracle.games(id);\r\n        uint256 currentId = gameOracle.id();\r\n        return(name, thetime, result, currentId);\r\n    }\r\n\r\n\r\n    // bet t1 via bnb\r\n    function betT1(uint256 id, uint256 _amountMin) public payable {\r\n        \r\n        (,uint256 thetime, uint256 result, uint256 currentId) = getOracleData(id);\r\n\r\n        require(result == 0 && id <= currentId, 'has already played or is inexistent');\r\n        require(block.timestamp <= thetime, 'match already live');\r\n\r\n        require(msg.value > 0, 'incorrect message value');\r\n        require(_amountMin > 0, 'incorrect amount');\r\n\r\n        // swap ETH to USDT\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(USDT);\r\n        uint balanceBefore = USDT.balanceOf(address(this));\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value:msg.value}(_amountMin,path, address(this), block.timestamp);\r\n        uint balanceAfter = USDT.balanceOf(address(this));\r\n        uint256 difference = balanceAfter - balanceBefore;\r\n        require(difference > 0, 'bad swap, try higher amounts');\r\n\r\n        // store bet amounts inside smart contract\r\n        t1raise[id] = t1raise[id]+difference;\r\n        contributionsT1[msg.sender][id] += difference;\r\n        emit Bet(msg.sender, difference, id);\r\n    }\r\n\r\n\r\n    // bet t2 via bnb\r\n    function betT2(uint256 id, uint256 _amountMin) public payable {\r\n        (,uint256 thetime, uint256 result, uint256 currentId) = getOracleData(id);\r\n\r\n        require(result == 0 && id <= currentId, 'has already played or is inexistent');\r\n        require(block.timestamp <= thetime, 'match already live');\r\n\r\n        require(msg.value > 0, 'incorrect message value');\r\n\r\n        // swap ETH to USDT\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(USDT);\r\n        uint balanceBefore = USDT.balanceOf(address(this));\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value:msg.value}(_amountMin,path, address(this), block.timestamp);\r\n        uint balanceAfter = USDT.balanceOf(address(this));\r\n        uint256 difference = balanceAfter - balanceBefore;\r\n        require(difference > 0, 'bad swap, try higher amounts');\r\n        \r\n        // store bet amounts inside smart contract\r\n        t2raise[id] = t2raise[id]+difference;\r\n        contributionsT2[msg.sender][id] += difference;\r\n        emit Bet(msg.sender, difference, id);\r\n    }\r\n\r\n\r\n    function betT1Token(uint256 id, uint256 amount) public {\r\n        (,uint256 thetime, uint256 result, uint256 currentId) = getOracleData(id);\r\n\r\n        require(result == 0 && id <= currentId, 'has already played or is inexistent');\r\n        require(block.timestamp <= thetime, 'match already live');\r\n        require(amount > 0, 'bad amount');\r\n        TransferHelper.safeTransferFrom(address(USDT), msg.sender, address(this), amount);\r\n\r\n        // store bet amounts inside smart contract\r\n        t1raise[id] = t1raise[id]+amount;\r\n        contributionsT1[msg.sender][id] += amount;\r\n        emit Bet(msg.sender, amount, id);\r\n    }\r\n\r\n\r\n    function betT2Token(uint256 id, uint256 amount) public {\r\n        (,uint256 thetime, uint256 result, uint256 currentId) = getOracleData(id);\r\n\r\n        require(result == 0 && id <= currentId, 'has already played or is inexistent');\r\n        require(block.timestamp <= thetime, 'match already live');\r\n        require(amount > 0, 'bad amount');\r\n        TransferHelper.safeTransferFrom(address(USDT), msg.sender, address(this), amount);\r\n\r\n\r\n        // store bet amounts inside smart contract\r\n        t2raise[id] = t2raise[id]+amount;\r\n        contributionsT2[msg.sender][id] += amount;\r\n        emit Bet(msg.sender, amount, id);\r\n    }\r\n\r\n    function betCustom(IBEP20 _token, uint256 id, uint256 amount) public {\r\n        require(supportedTokens[address(_token)] == true, 'no token support');\r\n        (,uint256 thetime, uint256 result, uint256 currentId) = getOracleData(id);\r\n        require(result == 0 && id <= currentId, 'has already played or is inexistent');\r\n        require(block.timestamp <= thetime, 'match already live');\r\n        require(amount > 0, 'bad amount');\r\n\r\n        // swap TOKEN to USDT\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(_token);\r\n        path[1] = router.WETH();\r\n        path[2] = address(USDT);\r\n        uint balanceBefore = USDT.balanceOf(address(this));\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(amount, 0, path, address(this), block.timestamp);\r\n        uint balanceAfter = USDT.balanceOf(address(this));\r\n        uint256 difference = balanceAfter - balanceBefore;\r\n        require(difference > 0, 'bad swap, try higher amounts');\r\n        \r\n        // store bet amounts inside smart contract\r\n        t2raise[id] = t2raise[id]+difference;\r\n        contributionsT2[msg.sender][id] += difference;\r\n        emit Bet(msg.sender, difference, id);\r\n    }\r\n\r\n\r\n    function withdrawFunds(uint256 _id) public nonReentrant {\r\n        require(withdrewFunds[msg.sender][_id] == false, 'already withdrew earnings');\r\n        (,,uint256 result,) = getOracleData(_id);\r\n        require(result != 0, 'has not been chosen');\r\n        //  1 team1wins, 2 team2wins, 3draw, 4 something went wrong ,0 even did not occur\r\n        if(result == 1){\r\n            // team 1 wins\r\n            require(contributionsT1[msg.sender][_id] > 0, 'no contributions in this round');\r\n            uint256 payoutAmount = fetchPayouts(_id);\r\n            if(takeFees == true){\r\n              uint256 earned =  (contributionsT1[msg.sender][_id] * payoutAmount / MULTIPLIER);\r\n              uint256 theFee = calculateFee(earned);\r\n              uint256 toPay =  contributionsT1[msg.sender][_id]+ (contributionsT1[msg.sender][_id] * payoutAmount / MULTIPLIER) - theFee;\r\n              TransferHelper.safeTransfer(address(USDT), owner(), theFee);\r\n              TransferHelper.safeTransfer(address(USDT), msg.sender, toPay);\r\n              withdrewFunds[msg.sender][_id] = true;\r\n            } else {\r\n                uint256 toPay =  contributionsT1[msg.sender][_id]+ (contributionsT1[msg.sender][_id] * payoutAmount / MULTIPLIER);\r\n                TransferHelper.safeTransfer(address(USDT), msg.sender, toPay);\r\n                withdrewFunds[msg.sender][_id] = true;\r\n            }\r\n\r\n        } else {\r\n            if(result == 2){\r\n                // team 2 wins \r\n                require(contributionsT2[msg.sender][_id] > 0, 'no contributions in this round');\r\n                uint256 payoutAmount = fetchPayouts(_id);\r\n                if(takeFees == true){\r\n                    uint256 earned =  (contributionsT2[msg.sender][_id] * payoutAmount / MULTIPLIER);\r\n                    uint256 theFee = calculateFee(earned);\r\n                    uint256 toPay =  contributionsT2[msg.sender][_id]+ (contributionsT2[msg.sender][_id] * payoutAmount / MULTIPLIER) - theFee;\r\n                    TransferHelper.safeTransfer(address(USDT), owner(), theFee);\r\n                    TransferHelper.safeTransfer(address(USDT), msg.sender, toPay);\r\n                    withdrewFunds[msg.sender][_id] = true;\r\n                }else {\r\n                    uint256 toPay =  contributionsT2[msg.sender][_id]+ (contributionsT2[msg.sender][_id] * payoutAmount / MULTIPLIER);\r\n                    TransferHelper.safeTransfer(address(USDT), msg.sender, toPay);\r\n                    withdrewFunds[msg.sender][_id] = true;\r\n                }\r\n\r\n            } else {\r\n                // result is 3 or 4, there is refund\r\n                TransferHelper.safeTransfer(address(USDT), msg.sender, contributionsT1[msg.sender][_id]);\r\n                TransferHelper.safeTransfer(address(USDT), msg.sender, contributionsT2[msg.sender][_id]);\r\n                withdrewFunds[msg.sender][_id] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function fetchPayouts(uint256 _id) public view returns(uint256){\r\n        (,,uint256 result,) = getOracleData(_id);\r\n\r\n        require(result > 0, 'no payout');\r\n        uint256 t1contr = t1raise[_id];\r\n        uint256 t2contr = t2raise[_id];\r\n\r\n        // divide loser by winner\r\n\r\n        if(result == 1){\r\n            uint256 payout = (t2contr*MULTIPLIER) / t1contr; // (100*a)/b\r\n            return payout;\r\n        }else {\r\n            if(result == 2){\r\n                uint256 payout =  (t1contr* MULTIPLIER) / t2contr ;\r\n                return payout;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addToken(address _token, bool _status) public onlyOwner {\r\n        supportedTokens[_token] = _status;\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"AddResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ChangeTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"t1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"t2\",\"type\":\"string\"}],\"name\":\"CreateGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"t1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"t2\",\"type\":\"string\"}],\"name\":\"addGameToList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"addResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"t1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"t2\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"thetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"modifyName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"modifyTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GameFeed", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://962671f52951868baf72ac6afdc7c11d2156fe23cdf21708b0311226dd7a893b"}