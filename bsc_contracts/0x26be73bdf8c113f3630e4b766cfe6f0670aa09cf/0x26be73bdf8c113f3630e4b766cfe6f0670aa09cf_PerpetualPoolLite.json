{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/pool/PerpetualPoolLite.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport '../interface/IPerpetualPoolLiteOld.sol';\\r\\nimport '../interface/IPerpetualPoolLite.sol';\\r\\nimport '../interface/ILTokenLite.sol';\\r\\nimport '../interface/IPTokenLite.sol';\\r\\nimport '../interface/IERC20.sol';\\r\\nimport '../interface/IOracleViewer.sol';\\r\\nimport '../interface/IOracleWithUpdate.sol';\\r\\nimport '../interface/ILiquidatorQualifier.sol';\\r\\nimport '../library/SafeMath.sol';\\r\\nimport '../library/SafeERC20.sol';\\r\\nimport '../library/DpmmPricerFutures.sol';\\r\\nimport '../utils/Migratable.sol';\\r\\n\\r\\ncontract PerpetualPoolLite is IPerpetualPoolLite, Migratable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMath for int256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    int256  constant ONE = 10**18;\\r\\n\\r\\n    uint256 immutable _decimals;\\r\\n    int256  immutable _poolMarginRatio;\\r\\n    int256  immutable _initialMarginRatio;\\r\\n    int256  immutable _maintenanceMarginRatio;\\r\\n    int256  immutable _minLiquidationReward;\\r\\n    int256  immutable _maxLiquidationReward;\\r\\n    int256  immutable _liquidationCutRatio;\\r\\n    int256  immutable _protocolFeeCollectRatio;\\r\\n\\r\\n    address immutable _bTokenAddress;\\r\\n    address immutable _lTokenAddress;\\r\\n    address immutable _pTokenAddress;\\r\\n    address immutable _liquidatorQualifierAddress;\\r\\n    address immutable _protocolFeeCollector;\\r\\n\\r\\n    // funding period in seconds, funding collected for each volume during this period will be (dpmmPrice - indexPrice)\\r\\n    int256  _fundingPeriod = 3 * 24 * 3600 * ONE;\\r\\n\\r\\n    int256  _liquidity;\\r\\n    uint256 _lastTimestamp;\\r\\n    int256  _protocolFeeAccrued;\\r\\n\\r\\n    // symbolId => SymbolInfo\\r\\n    mapping (uint256 => SymbolInfo) _symbols;\\r\\n\\r\\n    bool private _mutex;\\r\\n    modifier _lock_() {\\r\\n        require(!_mutex, 'reentry');\\r\\n        _mutex = true;\\r\\n        _;\\r\\n        _mutex = false;\\r\\n    }\\r\\n\\r\\n    constructor (uint256[7] memory parameters, address[5] memory addresses) {\\r\\n        _poolMarginRatio = int256(parameters[0]);\\r\\n        _initialMarginRatio = int256(parameters[1]);\\r\\n        _maintenanceMarginRatio = int256(parameters[2]);\\r\\n        _minLiquidationReward = int256(parameters[3]);\\r\\n        _maxLiquidationReward = int256(parameters[4]);\\r\\n        _liquidationCutRatio = int256(parameters[5]);\\r\\n        _protocolFeeCollectRatio = int256(parameters[6]);\\r\\n\\r\\n        _bTokenAddress = addresses[0];\\r\\n        _lTokenAddress = addresses[1];\\r\\n        _pTokenAddress = addresses[2];\\r\\n        _liquidatorQualifierAddress = addresses[3];\\r\\n        _protocolFeeCollector = addresses[4];\\r\\n\\r\\n        _decimals = IERC20(addresses[0]).decimals();\\r\\n\\r\\n        _controller = msg.sender;\\r\\n    }\\r\\n\\r\\n    // during a migration, this function is intended to be called in the source pool\\r\\n    function approveMigration() external override _controller_ {\\r\\n        require(_migrationTimestamp != 0 && block.timestamp >= _migrationTimestamp, 'PerpetualPool: migrationTimestamp not met yet');\\r\\n        // approve new pool to pull all base tokens from this pool\\r\\n        IERC20(_bTokenAddress).safeApprove(_migrationDestination, type(uint256).max);\\r\\n        // set lToken/pToken to new pool, after redirecting pToken/lToken to new pool, this pool will stop functioning\\r\\n        ILTokenLite(_lTokenAddress).setPool(_migrationDestination);\\r\\n        IPTokenLite(_pTokenAddress).setPool(_migrationDestination);\\r\\n    }\\r\\n\\r\\n    // during a migration, this function is intended to be called in the target pool\\r\\n    // the original `executeMigration` is just a place holder, instead `executeMigrationWithTimestamp` will be executed during migration\\r\\n    // in order to change the funding calculation from blocks to timestamp\\r\\n    function executeMigration(address source) external override _controller_ {\\r\\n        uint256 migrationTimestamp_ = IPerpetualPoolLite(source).migrationTimestamp();\\r\\n        address migrationDestination_ = IPerpetualPoolLite(source).migrationDestination();\\r\\n\\r\\n        // transfer bToken to this address\\r\\n        IERC20(_bTokenAddress).safeTransferFrom(source, address(this), IERC20(_bTokenAddress).balanceOf(source));\\r\\n\\r\\n        // transfer symbol infos\\r\\n        uint256[] memory symbolIds = IPTokenLite(_pTokenAddress).getActiveSymbolIds();\\r\\n        for (uint256 i = 0; i < symbolIds.length; i++) {\\r\\n            uint256 symbolId = symbolIds[i];\\r\\n            _symbols[symbolId] = IPerpetualPoolLite(source).getSymbol(symbolId);\\r\\n        }\\r\\n\\r\\n        // transfer state values\\r\\n        (_liquidity, _lastTimestamp, _protocolFeeAccrued) = IPerpetualPoolLite(source).getPoolStateValues();\\r\\n\\r\\n        emit ExecuteMigration(migrationTimestamp_, source, migrationDestination_);\\r\\n    }\\r\\n\\r\\n    function getParameters() external override view returns (\\r\\n        int256 poolMarginRatio,\\r\\n        int256 initialMarginRatio,\\r\\n        int256 maintenanceMarginRatio,\\r\\n        int256 minLiquidationReward,\\r\\n        int256 maxLiquidationReward,\\r\\n        int256 liquidationCutRatio,\\r\\n        int256 protocolFeeCollectRatio\\r\\n    ) {\\r\\n        return (\\r\\n            _poolMarginRatio,\\r\\n            _initialMarginRatio,\\r\\n            _maintenanceMarginRatio,\\r\\n            _minLiquidationReward,\\r\\n            _maxLiquidationReward,\\r\\n            _liquidationCutRatio,\\r\\n            _protocolFeeCollectRatio\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getAddresses() external override view returns (\\r\\n        address bTokenAddress,\\r\\n        address lTokenAddress,\\r\\n        address pTokenAddress,\\r\\n        address liquidatorQualifierAddress,\\r\\n        address protocolFeeCollector\\r\\n    ) {\\r\\n        return (\\r\\n            _bTokenAddress,\\r\\n            _lTokenAddress,\\r\\n            _pTokenAddress,\\r\\n            _liquidatorQualifierAddress,\\r\\n            _protocolFeeCollector\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getSymbol(uint256 symbolId) external override view returns (SymbolInfo memory) {\\r\\n        return _symbols[symbolId];\\r\\n    }\\r\\n\\r\\n    function getPoolStateValues() external view override returns (int256 liquidity, uint256 lastTimestamp, int256 protocolFeeAccrued) {\\r\\n        return (_liquidity, _lastTimestamp, _protocolFeeAccrued);\\r\\n    }\\r\\n\\r\\n    function collectProtocolFee() external override {\\r\\n        uint256 balance = IERC20(_bTokenAddress).balanceOf(address(this)).rescale(_decimals, 18);\\r\\n        uint256 amount = _protocolFeeAccrued.itou();\\r\\n        if (amount > balance) amount = balance;\\r\\n        _protocolFeeAccrued -= amount.utoi();\\r\\n        _transferOut(_protocolFeeCollector, amount);\\r\\n        emit ProtocolFeeCollection(_protocolFeeCollector, amount);\\r\\n    }\\r\\n\\r\\n    function getFundingPeriod() external view override returns (int256) {\\r\\n        return _fundingPeriod;\\r\\n    }\\r\\n\\r\\n    function setFundingPeriod(uint256 period) external override _controller_ {\\r\\n        _fundingPeriod = int256(period);\\r\\n    }\\r\\n\\r\\n    function addSymbol(\\r\\n        uint256 symbolId,\\r\\n        string  memory symbol,\\r\\n        address oracleAddress,\\r\\n        uint256 multiplier,\\r\\n        uint256 feeRatio,\\r\\n        uint256 alpha\\r\\n    ) external override _controller_ {\\r\\n        SymbolInfo storage s = _symbols[symbolId];\\r\\n        s.symbolId = symbolId;\\r\\n        s.symbol = symbol;\\r\\n        s.oracleAddress = oracleAddress;\\r\\n        s.multiplier = int256(multiplier);\\r\\n        s.feeRatio = int256(feeRatio);\\r\\n        s.alpha = int256(alpha);\\r\\n        IPTokenLite(_pTokenAddress).addSymbolId(symbolId);\\r\\n    }\\r\\n\\r\\n    function removeSymbol(uint256 symbolId) external override _controller_ {\\r\\n        delete _symbols[symbolId];\\r\\n        IPTokenLite(_pTokenAddress).removeSymbolId(symbolId);\\r\\n    }\\r\\n\\r\\n    function toggleCloseOnly(uint256 symbolId) external override _controller_ {\\r\\n        IPTokenLite(_pTokenAddress).toggleCloseOnly(symbolId);\\r\\n    }\\r\\n\\r\\n    function setSymbolParameters(\\r\\n        uint256 symbolId,\\r\\n        address oracleAddress,\\r\\n        uint256 feeRatio,\\r\\n        uint256 alpha\\r\\n    ) external override _controller_ {\\r\\n        SymbolInfo storage s = _symbols[symbolId];\\r\\n        s.oracleAddress = oracleAddress;\\r\\n        s.feeRatio = int256(feeRatio);\\r\\n        s.alpha = int256(alpha);\\r\\n    }\\r\\n\\r\\n    //================================================================================\\r\\n    // Interactions\\r\\n    //================================================================================\\r\\n\\r\\n    function addLiquidity(uint256 bAmount, SignedPrice[] memory prices) external override {\\r\\n        _updateSymbolPrices(prices);\\r\\n        _addLiquidity(msg.sender, bAmount);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(uint256 lShares, SignedPrice[] memory prices) external override {\\r\\n        require(lShares > 0, '0 lShares');\\r\\n        _updateSymbolPrices(prices);\\r\\n        _removeLiquidity(msg.sender, lShares);\\r\\n    }\\r\\n\\r\\n    function addMargin(uint256 bAmount) external override {\\r\\n        _addMargin(msg.sender, bAmount);\\r\\n    }\\r\\n\\r\\n    function removeMargin(uint256 bAmount, SignedPrice[] memory prices) external override {\\r\\n        address account = msg.sender;\\r\\n        require(bAmount > 0, '0 bAmount');\\r\\n        require(IPTokenLite(_pTokenAddress).exists(account), 'no pToken');\\r\\n        _updateSymbolPrices(prices);\\r\\n        _removeMargin(account, bAmount);\\r\\n    }\\r\\n\\r\\n    function trade(uint256 symbolId, int256 tradeVolume, SignedPrice[] memory prices) external override {\\r\\n        address account = msg.sender;\\r\\n        require(IPTokenLite(_pTokenAddress).isActiveSymbolId(symbolId), 'inv symbolId');\\r\\n        require(IPTokenLite(_pTokenAddress).exists(account), 'no pToken');\\r\\n        require(tradeVolume != 0 && tradeVolume / ONE * ONE == tradeVolume, 'inv volume');\\r\\n        _updateSymbolPrices(prices);\\r\\n        _trade(account, symbolId, tradeVolume);\\r\\n    }\\r\\n\\r\\n    function liquidate(address account, SignedPrice[] memory prices) public override {\\r\\n        address liquidator = msg.sender;\\r\\n        require(\\r\\n            _liquidatorQualifierAddress == address(0) || ILiquidatorQualifier(_liquidatorQualifierAddress).isQualifiedLiquidator(liquidator),\\r\\n            'unqualified'\\r\\n        );\\r\\n        require(IPTokenLite(_pTokenAddress).exists(account), 'no pToken');\\r\\n        _updateSymbolPrices(prices);\\r\\n        _liquidate(liquidator, account);\\r\\n    }\\r\\n\\r\\n    function liquidate(uint256 pTokenId, SignedPrice[] memory prices) external override {\\r\\n        liquidate(IPTokenLite(_pTokenAddress).ownerOf(pTokenId), prices);\\r\\n    }\\r\\n\\r\\n\\r\\n    //================================================================================\\r\\n    // Core logics\\r\\n    //================================================================================\\r\\n\\r\\n    function _addLiquidity(address account, uint256 bAmount) internal _lock_ {\\r\\n        bAmount = _transferIn(account, bAmount);\\r\\n        ILTokenLite lToken = ILTokenLite(_lTokenAddress);\\r\\n        DataSymbol[] memory symbols = _updateFundingRates(type(uint256).max);\\r\\n\\r\\n        int256 poolDynamicEquity = _getPoolPnl(symbols) + _liquidity;\\r\\n        uint256 totalSupply = lToken.totalSupply();\\r\\n        uint256 lShares;\\r\\n        if (totalSupply == 0) {\\r\\n            lShares = bAmount;\\r\\n        } else {\\r\\n            lShares = bAmount * totalSupply / poolDynamicEquity.itou();\\r\\n        }\\r\\n\\r\\n        lToken.mint(account, lShares);\\r\\n        _liquidity += bAmount.utoi();\\r\\n\\r\\n        emit AddLiquidity(account, lShares, bAmount);\\r\\n    }\\r\\n\\r\\n    function _removeLiquidity(address account, uint256 lShares) internal _lock_ {\\r\\n        ILTokenLite lToken = ILTokenLite(_lTokenAddress);\\r\\n        DataSymbol[] memory symbols = _updateFundingRates(type(uint256).max);\\r\\n\\r\\n        int256 liquidity = _liquidity;\\r\\n        int256 poolPnlBefore = _getPoolPnl(symbols);\\r\\n        uint256 totalSupply = lToken.totalSupply();\\r\\n        uint256 bAmount = lShares * (liquidity + poolPnlBefore).itou() / totalSupply;\\r\\n\\r\\n        liquidity -= bAmount.utoi();\\r\\n        for (uint256 i = 0; i < symbols.length; i++) {\\r\\n            DataSymbol memory s = symbols[i];\\r\\n            s.K = DpmmPricerFutures._calculateK(s.indexPrice, liquidity, s.alpha);\\r\\n            s.dpmmPrice = DpmmPricerFutures._calculateDpmmPrice(s.indexPrice, s.K, s.tradersNetPosition);\\r\\n        }\\r\\n        int256 poolPnlAfter = _getPoolPnl(symbols);\\r\\n\\r\\n        uint256 compensation = (poolPnlBefore - poolPnlAfter).itou();\\r\\n        bAmount -= compensation;\\r\\n\\r\\n        int256 poolRequiredMargin = _getPoolRequiredMargin(symbols);\\r\\n        require(liquidity + poolPnlAfter >= poolRequiredMargin, 'pool insuf liq');\\r\\n\\r\\n        _liquidity -= bAmount.utoi();\\r\\n        lToken.burn(account, lShares);\\r\\n        _transferOut(account, bAmount);\\r\\n\\r\\n        emit RemoveLiquidity(account, lShares, bAmount);\\r\\n    }\\r\\n\\r\\n    function _addMargin(address account, uint256 bAmount) internal _lock_ {\\r\\n        bAmount = _transferIn(account, bAmount);\\r\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\r\\n        if (!pToken.exists(account)) pToken.mint(account);\\r\\n\\r\\n        pToken.addMargin(account, bAmount.utoi());\\r\\n        emit AddMargin(account, bAmount);\\r\\n    }\\r\\n\\r\\n    function _removeMargin(address account, uint256 bAmount) internal _lock_ {\\r\\n        DataSymbol[] memory symbols = _updateFundingRates(type(uint256).max);\\r\\n        (IPTokenLite.Position[] memory positions, int256 margin) = _settleTraderFundingFee(account, symbols);\\r\\n\\r\\n        // remove all available margin when bAmount >= margin\\r\\n        int256 amount = bAmount.utoi();\\r\\n        if (amount > margin) {\\r\\n            amount = margin;\\r\\n            bAmount = amount.itou();\\r\\n        }\\r\\n        margin -= amount;\\r\\n\\r\\n        (bool initialMarginSafe, ) = _getTraderMarginStatus(symbols, positions, margin);\\r\\n        require(initialMarginSafe, 'insuf margin');\\r\\n\\r\\n        _updateTraderPortfolio(account, symbols, positions, margin);\\r\\n        _transferOut(account, bAmount);\\r\\n\\r\\n        emit RemoveMargin(account, bAmount);\\r\\n    }\\r\\n\\r\\n    function _trade(address account, uint256 symbolId, int256 tradeVolume) internal _lock_ {\\r\\n        DataSymbol[] memory symbols = _updateFundingRates(symbolId);\\r\\n        (IPTokenLite.Position[] memory positions, int256 margin) = _settleTraderFundingFee(account, symbols);\\r\\n\\r\\n        // get pool pnl before trading\\r\\n        int256 poolPnl = _getPoolPnl(symbols);\\r\\n\\r\\n        DataSymbol memory s = symbols[0];\\r\\n        IPTokenLite.Position memory p = positions[0];\\r\\n\\r\\n        int256 curCost = DpmmPricerFutures._calculateDpmmCost(\\r\\n            s.indexPrice,\\r\\n            s.K,\\r\\n            s.tradersNetPosition,\\r\\n            tradeVolume * s.multiplier / ONE\\r\\n        );\\r\\n\\r\\n        int256 fee = curCost.abs() * s.feeRatio / ONE;\\r\\n\\r\\n        emit Trade(account, symbolId, s.indexPrice, tradeVolume, curCost, fee);\\r\\n\\r\\n        int256 realizedCost;\\r\\n        if (!(p.volume >= 0 && tradeVolume >= 0) && !(p.volume <= 0 && tradeVolume <= 0)) {\\r\\n            int256 absVolume = p.volume.abs();\\r\\n            int256 absTradeVolume = tradeVolume.abs();\\r\\n            if (absVolume <= absTradeVolume) {\\r\\n                // previous position is totally closed\\r\\n                realizedCost = curCost * absVolume / absTradeVolume + p.cost;\\r\\n            } else {\\r\\n                // previous position is partially closed\\r\\n                realizedCost = p.cost * absTradeVolume / absVolume + curCost;\\r\\n            }\\r\\n        }\\r\\n        int256 toAddCost = curCost - realizedCost;\\r\\n\\r\\n        p.volume += tradeVolume;\\r\\n        p.cost += toAddCost;\\r\\n        p.lastCumulativeFundingRate = s.cumulativeFundingRate;\\r\\n\\r\\n        margin -= fee + realizedCost;\\r\\n\\r\\n        s.positionUpdated = true;\\r\\n        s.tradersNetVolume += tradeVolume;\\r\\n        s.tradersNetCost += toAddCost;\\r\\n        s.tradersNetPosition = s.tradersNetVolume * s.multiplier / ONE;\\r\\n\\r\\n        _symbols[symbolId].tradersNetVolume += tradeVolume;\\r\\n        _symbols[symbolId].tradersNetCost += toAddCost;\\r\\n\\r\\n        int256 protocolFee = fee * _protocolFeeCollectRatio / ONE;\\r\\n        _protocolFeeAccrued += protocolFee;\\r\\n        _liquidity += fee - protocolFee + realizedCost;\\r\\n\\r\\n        require(_liquidity + poolPnl >= _getPoolRequiredMargin(symbols), 'insuf liquidity');\\r\\n        (bool initialMarginSafe, ) = _getTraderMarginStatus(symbols, positions, margin);\\r\\n        require(initialMarginSafe, 'insuf margin');\\r\\n\\r\\n        _updateTraderPortfolio(account, symbols, positions, margin);\\r\\n    }\\r\\n\\r\\n    function _liquidate(address liquidator, address account) internal _lock_ {\\r\\n        DataSymbol[] memory symbols = _updateFundingRates(type(uint256).max);\\r\\n        (IPTokenLite.Position[] memory positions, int256 margin) = _settleTraderFundingFee(account, symbols);\\r\\n\\r\\n        (, bool maintenanceMarginSafe) = _getTraderMarginStatus(symbols, positions, margin);\\r\\n        require(!maintenanceMarginSafe, 'cant liq');\\r\\n\\r\\n        int256 netEquity = margin;\\r\\n        for (uint256 i = 0; i < symbols.length; i++) {\\r\\n            DataSymbol memory s = symbols[i];\\r\\n            IPTokenLite.Position memory p = positions[i];\\r\\n            if (p.volume != 0) {\\r\\n                int256 curCost = DpmmPricerFutures._calculateDpmmCost(\\r\\n                    s.indexPrice,\\r\\n                    s.K,\\r\\n                    s.tradersNetPosition,\\r\\n                    -p.volume * s.multiplier / ONE\\r\\n                );\\r\\n                netEquity -= curCost + p.cost;\\r\\n                _symbols[s.symbolId].tradersNetVolume -= p.volume;\\r\\n                _symbols[s.symbolId].tradersNetCost -= p.cost;\\r\\n                emit Trade(account, s.symbolId, s.indexPrice, -p.volume, curCost, -1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        int256 reward;\\r\\n        if (netEquity <= _minLiquidationReward) {\\r\\n            reward = _minLiquidationReward;\\r\\n        } else if (netEquity >= _maxLiquidationReward) {\\r\\n            reward = _maxLiquidationReward;\\r\\n        } else {\\r\\n            reward = (netEquity - _minLiquidationReward) * _liquidationCutRatio / ONE + _minLiquidationReward;\\r\\n        }\\r\\n\\r\\n        _liquidity += margin - reward;\\r\\n        IPTokenLite(_pTokenAddress).burn(account);\\r\\n        _transferOut(liquidator, reward.itou());\\r\\n\\r\\n        emit Liquidate(account, liquidator, reward.itou());\\r\\n    }\\r\\n\\r\\n\\r\\n    //================================================================================\\r\\n    // Helpers\\r\\n    //================================================================================\\r\\n\\r\\n    function _updateSymbolPrices(SignedPrice[] memory prices) internal {\\r\\n        for (uint256 i = 0; i < prices.length; i++) {\\r\\n            uint256 symbolId = prices[i].symbolId;\\r\\n            IOracleWithUpdate(_symbols[symbolId].oracleAddress).updatePrice(\\r\\n                prices[i].timestamp,\\r\\n                prices[i].price,\\r\\n                prices[i].v,\\r\\n                prices[i].r,\\r\\n                prices[i].s\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    struct DataSymbol {\\r\\n        uint256 symbolId;\\r\\n        int256  multiplier;\\r\\n        int256  feeRatio;\\r\\n        int256  alpha;\\r\\n        int256  indexPrice;\\r\\n        int256  dpmmPrice;\\r\\n        int256  K;\\r\\n        int256  tradersNetVolume;\\r\\n        int256  tradersNetCost;\\r\\n        int256  cumulativeFundingRate;\\r\\n        int256  tradersNetPosition; // volume * multiplier\\r\\n        bool    positionUpdated;\\r\\n    }\\r\\n\\r\\n    // Gether data for valid symbols for later use\\r\\n    // Calculate those symbol parameters that will not change during this transaction\\r\\n    // Symbols with no position holders are excluded\\r\\n    function _getSymbols(uint256 tradeSymbolId) internal view returns (DataSymbol[] memory symbols) {\\r\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\r\\n        uint256[] memory activeSymbolIds = pToken.getActiveSymbolIds();\\r\\n        uint256[] memory symbolIds = new uint256[](activeSymbolIds.length);\\r\\n        uint256 count;\\r\\n        if (tradeSymbolId != type(uint256).max) {\\r\\n            symbolIds[0] = tradeSymbolId;\\r\\n            count = 1;\\r\\n        }\\r\\n        for (uint256 i = 0; i < activeSymbolIds.length; i++) {\\r\\n            if (activeSymbolIds[i] != tradeSymbolId && pToken.getNumPositionHolders(activeSymbolIds[i]) != 0) {\\r\\n                symbolIds[count++] = activeSymbolIds[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        symbols = new DataSymbol[](count);\\r\\n        int256 liquidity = _liquidity;\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            SymbolInfo storage ss = _symbols[symbolIds[i]];\\r\\n            DataSymbol memory s = symbols[i];\\r\\n            s.symbolId = symbolIds[i];\\r\\n            s.multiplier = ss.multiplier;\\r\\n            s.feeRatio = ss.feeRatio;\\r\\n            s.alpha = ss.alpha;\\r\\n            s.indexPrice = IOracleViewer(ss.oracleAddress).getPrice().utoi();\\r\\n            s.tradersNetVolume = ss.tradersNetVolume;\\r\\n            s.tradersNetCost = ss.tradersNetCost;\\r\\n            s.cumulativeFundingRate = ss.cumulativeFundingRate;\\r\\n            s.tradersNetPosition = s.tradersNetVolume * s.multiplier / ONE;\\r\\n            s.K = DpmmPricerFutures._calculateK(s.indexPrice, liquidity, s.alpha);\\r\\n            s.dpmmPrice = DpmmPricerFutures._calculateDpmmPrice(s.indexPrice, s.K, s.tradersNetPosition);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateFundingRates(uint256 tradeSymbolId) internal returns (DataSymbol[] memory symbols) {\\r\\n        uint256 preTimestamp = _lastTimestamp;\\r\\n        uint256 curTimestamp = block.timestamp;\\r\\n        symbols = _getSymbols(tradeSymbolId);\\r\\n        if (curTimestamp > preTimestamp) {\\r\\n            int256 fundingPeriod = _fundingPeriod;\\r\\n            for (uint256 i = 0; i < symbols.length; i++) {\\r\\n                DataSymbol memory s = symbols[i];\\r\\n                int256 ratePerSecond = (s.dpmmPrice - s.indexPrice) * s.multiplier / fundingPeriod;\\r\\n                int256 diff = ratePerSecond * int256(curTimestamp - preTimestamp);\\r\\n                unchecked { s.cumulativeFundingRate += diff; }\\r\\n                _symbols[s.symbolId].cumulativeFundingRate = s.cumulativeFundingRate;\\r\\n            }\\r\\n        }\\r\\n        _lastTimestamp = curTimestamp;\\r\\n    }\\r\\n\\r\\n    function _getPoolPnl(DataSymbol[] memory symbols) internal pure returns (int256 poolPnl) {\\r\\n        for (uint256 i = 0; i < symbols.length; i++) {\\r\\n            DataSymbol memory s = symbols[i];\\r\\n            poolPnl += DpmmPricerFutures._calculateDpmmCost(s.indexPrice, s.K, s.tradersNetPosition, -s.tradersNetPosition) + s.tradersNetCost;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getPoolRequiredMargin(DataSymbol[] memory symbols) internal view returns (int256 poolRequiredMargin) {\\r\\n        for (uint256 i = 0; i < symbols.length; i++) {\\r\\n            DataSymbol memory s = symbols[i];\\r\\n            int256 notional = (s.tradersNetPosition * s.indexPrice / ONE).abs();\\r\\n            poolRequiredMargin += notional * _poolMarginRatio / ONE;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _settleTraderFundingFee(address account, DataSymbol[] memory symbols)\\r\\n    internal returns (IPTokenLite.Position[] memory positions, int256 margin)\\r\\n    {\\r\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\r\\n        positions = new IPTokenLite.Position[](symbols.length);\\r\\n        margin = pToken.getMargin(account);\\r\\n\\r\\n        int256 funding;\\r\\n        for (uint256 i = 0; i < symbols.length; i++) {\\r\\n            IPTokenLite.Position memory p = pToken.getPosition(account, symbols[i].symbolId);\\r\\n            if (p.volume != 0) {\\r\\n                int256 diff;\\r\\n                unchecked { diff = symbols[i].cumulativeFundingRate - p.lastCumulativeFundingRate; }\\r\\n                funding += p.volume * diff / ONE;\\r\\n                p.lastCumulativeFundingRate = symbols[i].cumulativeFundingRate;\\r\\n                symbols[i].positionUpdated = true;\\r\\n                positions[i] = p;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        margin -= funding;\\r\\n        _liquidity += funding;\\r\\n    }\\r\\n\\r\\n    function _getTraderMarginStatus(\\r\\n        DataSymbol[] memory symbols,\\r\\n        IPTokenLite.Position[] memory positions,\\r\\n        int256 margin\\r\\n    ) internal view returns (bool initialMarginSafe, bool maintenanceMarginSafe)\\r\\n    {\\r\\n        int256 dynamicMargin = margin;\\r\\n        int256 requiredInitialMargin;\\r\\n        for (uint256 i = 0; i < symbols.length; i++) {\\r\\n            DataSymbol memory s = symbols[i];\\r\\n            IPTokenLite.Position memory p = positions[i];\\r\\n            if (p.volume != 0) {\\r\\n                dynamicMargin -= s.indexPrice * (-p.volume) * s.multiplier / ONE / ONE + p.cost;\\r\\n                int256 notional = (p.volume * s.indexPrice / ONE * s.multiplier / ONE).abs();\\r\\n                requiredInitialMargin += notional * _initialMarginRatio / ONE;\\r\\n            }\\r\\n        }\\r\\n        int256 requiredMaintenanceMargin = requiredInitialMargin * _maintenanceMarginRatio / _initialMarginRatio;\\r\\n        return (\\r\\n            dynamicMargin >= requiredInitialMargin,\\r\\n            dynamicMargin >= requiredMaintenanceMargin\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _updateTraderPortfolio(\\r\\n        address account,\\r\\n        DataSymbol[] memory symbols,\\r\\n        IPTokenLite.Position[] memory positions,\\r\\n        int256 margin\\r\\n    ) internal {\\r\\n        IPTokenLite pToken = IPTokenLite(_pTokenAddress);\\r\\n        for (uint256 i = 0; i < symbols.length; i++) {\\r\\n            if (symbols[i].positionUpdated) {\\r\\n                pToken.updatePosition(account, symbols[i].symbolId, positions[i]);\\r\\n            }\\r\\n        }\\r\\n        pToken.updateMargin(account, margin);\\r\\n    }\\r\\n\\r\\n    function _transferIn(address from, uint256 bAmount) internal returns (uint256) {\\r\\n        uint256 amount = bAmount.rescale(18, _decimals);\\r\\n        require(amount > 0, '0 bAmount');\\r\\n        IERC20 bToken = IERC20(_bTokenAddress);\\r\\n        uint256 balance1 = bToken.balanceOf(address(this));\\r\\n        bToken.safeTransferFrom(from, address(this), amount);\\r\\n        uint256 balance2 = bToken.balanceOf(address(this));\\r\\n        return (balance2 - balance1).rescale(_decimals, 18);\\r\\n    }\\r\\n\\r\\n    function _transferOut(address to, uint256 bAmount) internal {\\r\\n        uint256 amount = bAmount.rescale(18, _decimals);\\r\\n        uint256 leftover = bAmount - amount.rescale(_decimals, 18);\\r\\n        // leftover due to decimal precision is accrued to _protocolFeeAccrued\\r\\n        _protocolFeeAccrued += leftover.utoi();\\r\\n        IERC20(_bTokenAddress).safeTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IPerpetualPoolLiteOld.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport '../interface/IMigratable.sol';\\r\\n\\r\\ninterface IPerpetualPoolLiteOld is IMigratable {\\r\\n\\r\\n    struct SymbolInfo {\\r\\n        uint256 symbolId;\\r\\n        string  symbol;\\r\\n        address oracleAddress;\\r\\n        int256  multiplier;\\r\\n        int256  feeRatio;\\r\\n        int256  fundingRateCoefficient;\\r\\n        int256  price;\\r\\n        int256  cumulativeFundingRate;\\r\\n        int256  tradersNetVolume;\\r\\n        int256  tradersNetCost;\\r\\n    }\\r\\n\\r\\n    struct SignedPrice {\\r\\n        uint256 symbolId;\\r\\n        uint256 timestamp;\\r\\n        uint256 price;\\r\\n        uint8   v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n    }\\r\\n\\r\\n    event AddLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    event RemoveLiquidity(address indexed account, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    event AddMargin(address indexed account, uint256 bAmount);\\r\\n\\r\\n    event RemoveMargin(address indexed account, uint256 bAmount);\\r\\n\\r\\n    event Trade(address indexed account, uint256 indexed symbolId, int256 tradeVolume, uint256 price);\\r\\n\\r\\n    event Liquidate(address indexed account, address indexed liquidator, uint256 reward);\\r\\n\\r\\n    event ProtocolFeeCollection(address indexed collector, uint256 amount);\\r\\n\\r\\n    function getParameters() external view returns (\\r\\n        int256 minPoolMarginRatio,\\r\\n        int256 minInitialMarginRatio,\\r\\n        int256 minMaintenanceMarginRatio,\\r\\n        int256 minLiquidationReward,\\r\\n        int256 maxLiquidationReward,\\r\\n        int256 liquidationCutRatio,\\r\\n        int256 protocolFeeCollectRatio\\r\\n    );\\r\\n\\r\\n    function getAddresses() external view returns (\\r\\n        address bTokenAddress,\\r\\n        address lTokenAddress,\\r\\n        address pTokenAddress,\\r\\n        address liquidatorQualifierAddress,\\r\\n        address protocolFeeCollector\\r\\n    );\\r\\n\\r\\n    function getSymbol(uint256 symbolId) external view returns (SymbolInfo memory);\\r\\n\\r\\n    function getLiquidity() external view returns (int256);\\r\\n\\r\\n    function getLastUpdateBlock() external view returns (uint256);\\r\\n\\r\\n    function getProtocolFeeAccrued() external view returns (int256);\\r\\n\\r\\n    function collectProtocolFee() external;\\r\\n\\r\\n    function addSymbol(\\r\\n        uint256 symbolId,\\r\\n        string  memory symbol,\\r\\n        address oracleAddress,\\r\\n        uint256 multiplier,\\r\\n        uint256 feeRatio,\\r\\n        uint256 fundingRateCoefficient\\r\\n    ) external;\\r\\n\\r\\n    function removeSymbol(uint256 symbolId) external;\\r\\n\\r\\n    function toggleCloseOnly(uint256 symbolId) external;\\r\\n\\r\\n    function setSymbolParameters(uint256 symbolId, address oracleAddress, uint256 feeRatio, uint256 fundingRateCoefficient) external;\\r\\n\\r\\n    function addLiquidity(uint256 bAmount) external;\\r\\n\\r\\n    function removeLiquidity(uint256 lShares) external;\\r\\n\\r\\n    function addMargin(uint256 bAmount) external;\\r\\n\\r\\n    function removeMargin(uint256 bAmount) external;\\r\\n\\r\\n    function trade(uint256 symbolId, int256 tradeVolume) external;\\r\\n\\r\\n    function liquidate(address account) external;\\r\\n\\r\\n    function addLiquidity(uint256 bAmount, SignedPrice[] memory prices) external;\\r\\n\\r\\n    function removeLiquidity(uint256 lShares, SignedPrice[] memory prices) external;\\r\\n\\r\\n    function addMargin(uint256 bAmount, SignedPrice[] memory prices) external;\\r\\n\\r\\n    function removeMargin(uint256 bAmount, SignedPrice[] memory prices) external;\\r\\n\\r\\n    function trade(uint256 symbolId, int256 tradeVolume, SignedPrice[] memory prices) external;\\r\\n\\r\\n    function liquidate(address account, SignedPrice[] memory prices) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IPerpetualPoolLite.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport '../interface/IMigratable.sol';\\r\\n\\r\\ninterface IPerpetualPoolLite is IMigratable {\\r\\n\\r\\n    struct SymbolInfo {\\r\\n        uint256 symbolId;\\r\\n        string  symbol;\\r\\n        address oracleAddress;\\r\\n        int256  multiplier;\\r\\n        int256  feeRatio;\\r\\n        int256  alpha;\\r\\n        int256  tradersNetVolume;\\r\\n        int256  tradersNetCost;\\r\\n        int256  cumulativeFundingRate;\\r\\n    }\\r\\n\\r\\n    struct SignedPrice {\\r\\n        uint256 symbolId;\\r\\n        uint256 timestamp;\\r\\n        uint256 price;\\r\\n        uint8   v;\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n    }\\r\\n\\r\\n    event AddLiquidity(address indexed lp, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    event RemoveLiquidity(address indexed lp, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    event AddMargin(address indexed trader, uint256 bAmount);\\r\\n\\r\\n    event RemoveMargin(address indexed trader, uint256 bAmount);\\r\\n\\r\\n    event Trade(\\r\\n        address indexed trader,\\r\\n        uint256 indexed symbolId,\\r\\n        int256 indexPrice,\\r\\n        int256 tradeVolume,\\r\\n        int256 tradeCost,\\r\\n        int256 tradeFee // a -1 tradeFee corresponds to a liquidation trade\\r\\n    );\\r\\n\\r\\n    event Liquidate(address indexed trader, address indexed liquidator, uint256 reward);\\r\\n\\r\\n    event ProtocolFeeCollection(address indexed collector, uint256 amount);\\r\\n\\r\\n    function getParameters() external view returns (\\r\\n        int256 poolMarginRatio,\\r\\n        int256 initialMarginRatio,\\r\\n        int256 maintenanceMarginRatio,\\r\\n        int256 minLiquidationReward,\\r\\n        int256 maxLiquidationReward,\\r\\n        int256 liquidationCutRatio,\\r\\n        int256 protocolFeeCollectRatio\\r\\n    );\\r\\n\\r\\n    function getAddresses() external view returns (\\r\\n        address bTokenAddress,\\r\\n        address lTokenAddress,\\r\\n        address pTokenAddress,\\r\\n        address liquidatorQualifierAddress,\\r\\n        address protocolFeeCollector\\r\\n    );\\r\\n\\r\\n    function getSymbol(uint256 symbolId) external view returns (SymbolInfo memory);\\r\\n\\r\\n    function getPoolStateValues() external view returns (int256 liquidity, uint256 lastTimestamp, int256 protocolFeeAccrued);\\r\\n\\r\\n    function collectProtocolFee() external;\\r\\n\\r\\n    function getFundingPeriod() external view returns (int256);\\r\\n\\r\\n    function setFundingPeriod(uint256 period) external;\\r\\n\\r\\n    function addSymbol(\\r\\n        uint256 symbolId,\\r\\n        string  memory symbol,\\r\\n        address oracleAddress,\\r\\n        uint256 multiplier,\\r\\n        uint256 feeRatio,\\r\\n        uint256 alpha\\r\\n    ) external;\\r\\n\\r\\n    function removeSymbol(uint256 symbolId) external;\\r\\n\\r\\n    function toggleCloseOnly(uint256 symbolId) external;\\r\\n\\r\\n    function setSymbolParameters(\\r\\n        uint256 symbolId,\\r\\n        address oracleAddress,\\r\\n        uint256 feeRatio,\\r\\n        uint256 alpha\\r\\n    ) external;\\r\\n\\r\\n    function addLiquidity(uint256 bAmount, SignedPrice[] memory prices) external;\\r\\n\\r\\n    function removeLiquidity(uint256 lShares, SignedPrice[] memory prices) external;\\r\\n\\r\\n    function addMargin(uint256 bAmount) external;\\r\\n\\r\\n    function removeMargin(uint256 bAmount, SignedPrice[] memory prices) external;\\r\\n\\r\\n    function trade(uint256 symbolId, int256 tradeVolume, SignedPrice[] memory prices) external;\\r\\n\\r\\n    function liquidate(address account, SignedPrice[] memory prices) external;\\r\\n\\r\\n    function liquidate(uint256 pTokenId, SignedPrice[] memory prices) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/ILTokenLite.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport './IERC20.sol';\\r\\n\\r\\ninterface ILTokenLite is IERC20 {\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function setPool(address newPool) external;\\r\\n\\r\\n    function mint(address account, uint256 amount) external;\\r\\n\\r\\n    function burn(address account, uint256 amount) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IPTokenLite.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport './IERC721.sol';\\r\\n\\r\\ninterface IPTokenLite is IERC721 {\\r\\n\\r\\n    struct Position {\\r\\n        // position volume, long is positive and short is negative\\r\\n        int256 volume;\\r\\n        // the cost the establish this position\\r\\n        int256 cost;\\r\\n        // the last cumulativeFundingRate since last funding settlement for this position\\r\\n        // the overflow for this value in intended\\r\\n        int256 lastCumulativeFundingRate;\\r\\n    }\\r\\n\\r\\n    event UpdateMargin(address indexed owner, int256 amount);\\r\\n\\r\\n    event UpdatePosition(address indexed owner, uint256 indexed symbolId, int256 volume, int256 cost, int256 lastCumulativeFundingRate);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    function totalMinted() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function setPool(address newPool) external;\\r\\n\\r\\n    function getActiveSymbolIds() external view returns (uint256[] memory);\\r\\n\\r\\n    function isActiveSymbolId(uint256 symbolId) external view returns (bool);\\r\\n\\r\\n    function getNumPositionHolders(uint256 symbolId) external view returns (uint256);\\r\\n\\r\\n    function addSymbolId(uint256 symbolId) external;\\r\\n\\r\\n    function removeSymbolId(uint256 symbolId) external;\\r\\n\\r\\n    function toggleCloseOnly(uint256 symbolId) external;\\r\\n\\r\\n    function exists(address owner) external view returns (bool);\\r\\n\\r\\n    function getMargin(address owner) external view returns (int256);\\r\\n\\r\\n    function updateMargin(address owner, int256 margin) external;\\r\\n\\r\\n    function addMargin(address owner, int256 delta) external;\\r\\n\\r\\n    function getPosition(address owner, uint256 symbolId) external view returns (Position memory);\\r\\n\\r\\n    function updatePosition(address owner, uint256 symbolId, Position memory position) external;\\r\\n\\r\\n    function mint(address owner) external;\\r\\n\\r\\n    function burn(address owner) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IOracleViewer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IOracleViewer {\\r\\n\\r\\n    function getPrice() external view returns (uint256);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IOracleWithUpdate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IOracleWithUpdate {\\r\\n\\r\\n    function getPrice() external returns (uint256);\\r\\n\\r\\n    function updatePrice(uint256 timestamp, uint256 price, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/ILiquidatorQualifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface ILiquidatorQualifier {\\r\\n\\r\\n    function isQualifiedLiquidator(address liquidator) external view returns (bool);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/library/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    uint256 constant UMAX = 2**255 - 1;\\r\\n    int256  constant IMIN = -2**255;\\r\\n\\r\\n    /// convert uint256 to int256\\r\\n    function utoi(uint256 a) internal pure returns (int256) {\\r\\n        require(a <= UMAX, 'UIO');\\r\\n        return int256(a);\\r\\n    }\\r\\n\\r\\n    /// convert int256 to uint256\\r\\n    function itou(int256 a) internal pure returns (uint256) {\\r\\n        require(a >= 0, 'IUO');\\r\\n        return uint256(a);\\r\\n    }\\r\\n\\r\\n    /// take abs of int256\\r\\n    function abs(int256 a) internal pure returns (int256) {\\r\\n        require(a != IMIN, 'AO');\\r\\n        return a >= 0 ? a : -a;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// rescale a uint256 from base 10**decimals1 to 10**decimals2\\r\\n    function rescale(uint256 a, uint256 decimals1, uint256 decimals2) internal pure returns (uint256) {\\r\\n        return decimals1 == decimals2 ? a : a * (10 ** decimals2) / (10 ** decimals1);\\r\\n    }\\r\\n\\r\\n    /// rescale a int256 from base 10**decimals1 to 10**decimals2\\r\\n    function rescale(int256 a, uint256 decimals1, uint256 decimals2) internal pure returns (int256) {\\r\\n        return decimals1 == decimals2 ? a : a * utoi(10 ** decimals2) / utoi(10 ** decimals1);\\r\\n    }\\r\\n\\r\\n    /// reformat a uint256 to be a valid 10**decimals base value\\r\\n    /// the reformatted value is still in 10**18 base\\r\\n    function reformat(uint256 a, uint256 decimals) internal pure returns (uint256) {\\r\\n        return decimals == 18 ? a : rescale(rescale(a, 18, decimals), decimals, 18);\\r\\n    }\\r\\n\\r\\n    /// reformat a int256 to be a valid 10**decimals base value\\r\\n    /// the reformatted value is still in 10**18 base\\r\\n    function reformat(int256 a, uint256 decimals) internal pure returns (int256) {\\r\\n        return decimals == 18 ? a : rescale(rescale(a, 18, decimals), decimals, 18);\\r\\n    }\\r\\n\\r\\n    /// ceiling value away from zero, return a valid 10**decimals base value, but still in 10**18 based\\r\\n    function ceil(int256 a, uint256 decimals) internal pure returns (int256) {\\r\\n        if (reformat(a, decimals) == a) {\\r\\n            return a;\\r\\n        } else {\\r\\n            int256 b = rescale(a, 18, decimals);\\r\\n            b += a > 0 ? int256(1) : int256(-1);\\r\\n            return rescale(b, decimals, 18);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 quotient = a / b;\\r\\n        uint256 remainder = a - quotient * b;\\r\\n        if (remainder > 0) {\\r\\n            return quotient + 1;\\r\\n        } else {\\r\\n            return quotient;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\r\\n        uint256 z = x / 2 + 1;\\r\\n        y = x;\\r\\n        while (z < y) {\\r\\n            y = z;\\r\\n            z = (x / z + z) / 2;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return a <= b ? a : b;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/library/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) - value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/library/DpmmPricerFutures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nlibrary DpmmPricerFutures {\\r\\n\\r\\n    int256 constant ONE = 1e18;\\r\\n\\r\\n    function _calculateK(int256 indexPrice, int256 liquidity, int256 alpha) internal pure returns (int256) {\\r\\n        return indexPrice * alpha / liquidity;\\r\\n    }\\r\\n\\r\\n    function _calculateDpmmPrice(int256 indexPrice, int256 K, int256 tradersNetPosition) internal pure returns (int256) {\\r\\n        return indexPrice * (ONE + K * tradersNetPosition / ONE) / ONE;\\r\\n    }\\r\\n\\r\\n    function _calculateDpmmCost(int256 indexPrice, int256 K, int256 tradersNetPosition, int256 tradePosition) internal pure returns (int256) {\\r\\n        int256 r = ((tradersNetPosition + tradePosition) ** 2 - tradersNetPosition ** 2) / ONE * K / ONE / 2 + tradePosition;\\r\\n        return indexPrice * r / ONE;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Migratable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport '../interface/IMigratable.sol';\\r\\nimport './Ownable.sol';\\r\\n\\r\\nabstract contract Migratable is IMigratable, Ownable {\\r\\n\\r\\n    // migration timestamp, zero means not set\\r\\n    // migration timestamp can only be set with a grace period, e.x. 3-365 days, and the\\r\\n    // migration destination must also be set when setting migration timestamp\\r\\n    // users can use this grace period to verify the desination contract code\\r\\n    uint256 _migrationTimestamp;\\r\\n\\r\\n    // the destination address the source contract will migrate to, after the grace period\\r\\n    address _migrationDestination;\\r\\n\\r\\n    function migrationTimestamp() public override view returns (uint256) {\\r\\n        return _migrationTimestamp;\\r\\n    }\\r\\n\\r\\n    function migrationDestination() public override view returns (address) {\\r\\n        return _migrationDestination;\\r\\n    }\\r\\n\\r\\n    // prepare a migration process, the timestamp and desination will be set at this stage\\r\\n    // and the migration grace period starts\\r\\n    function prepareMigration(address target, uint256 graceDays) public override _controller_ {\\r\\n        require(target != address(0), 'Migratable: target 0');\\r\\n        require(graceDays >= 3 && graceDays <= 365, 'Migratable: graceDays must be 3-365');\\r\\n\\r\\n        _migrationTimestamp = block.timestamp + graceDays * 1 days;\\r\\n        _migrationDestination = target;\\r\\n\\r\\n        emit PrepareMigration(_migrationTimestamp, address(this), _migrationDestination);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IMigratable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport './IOwnable.sol';\\r\\n\\r\\ninterface IMigratable is IOwnable {\\r\\n\\r\\n    event PrepareMigration(uint256 migrationTimestamp, address source, address target);\\r\\n\\r\\n    event ExecuteMigration(uint256 migrationTimestamp, address source, address target);\\r\\n\\r\\n    function migrationTimestamp() external view returns (uint256);\\r\\n\\r\\n    function migrationDestination() external view returns (address);\\r\\n\\r\\n    function prepareMigration(address target, uint256 graceDays) external;\\r\\n\\r\\n    function approveMigration() external;\\r\\n\\r\\n    function executeMigration(address source) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IOwnable {\\r\\n\\r\\n    event ChangeController(address oldController, address newController);\\r\\n\\r\\n    function controller() external view returns (address);\\r\\n\\r\\n    function setNewController(address newController) external;\\r\\n\\r\\n    function claimNewController() external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `operator` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed operator, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in `owner`'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the 'tokenId' owned by 'owner'\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     *  - `owner` must exist\\r\\n     */\\r\\n    function getTokenId(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `operator` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address\\r\\n     * clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address operator, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     *   by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first\\r\\n     * that contract recipients are aware of the ERC721 protocol to prevent\\r\\n     * tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token\\r\\n     *   by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     *   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     *   by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     *   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/library/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport '../interface/IOwnable.sol';\\r\\n\\r\\nabstract contract Ownable is IOwnable {\\r\\n\\r\\n    address _controller;\\r\\n\\r\\n    address _newController;\\r\\n\\r\\n    modifier _controller_() {\\r\\n        require(msg.sender == _controller, 'Ownable: only controller');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function controller() public override view returns (address) {\\r\\n        return _controller;\\r\\n    }\\r\\n\\r\\n    function setNewController(address newController) public override _controller_ {\\r\\n        _newController = newController;\\r\\n    }\\r\\n\\r\\n    // a claim step is needed to prevent set controller to a wrong address and forever lost control\\r\\n    function claimNewController() public override {\\r\\n        require(msg.sender == _newController, 'Ownable: not allowed');\\r\\n        emit ChangeController(_controller, _newController);\\r\\n        _controller = _newController;\\r\\n        delete _newController;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[7]\",\"name\":\"parameters\",\"type\":\"uint256[7]\"},{\"internalType\":\"address[5]\",\"name\":\"addresses\",\"type\":\"address[5]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"indexPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeCost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeFee\",\"type\":\"int256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alpha\",\"type\":\"uint256\"}],\"name\":\"addSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidatorQualifierAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolFeeCollector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundingPeriod\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"poolMarginRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"initialMarginRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"maintenanceMarginRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"minLiquidationReward\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"maxLiquidationReward\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"liquidationCutRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"protocolFeeCollectRatio\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolStateValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"liquidity\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"protocolFeeAccrued\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"}],\"name\":\"getSymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"multiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"alpha\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cumulativeFundingRate\",\"type\":\"int256\"}],\"internalType\":\"struct IPerpetualPoolLite.SymbolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pTokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"name\":\"removeMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"}],\"name\":\"removeSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setFundingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alpha\",\"type\":\"uint256\"}],\"name\":\"setSymbolParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"}],\"name\":\"toggleCloseOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"symbolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPerpetualPoolLite.SignedPrice[]\",\"name\":\"prices\",\"type\":\"tuple[]\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PerpetualPoolLite", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003635c9adc5dea0000000000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000b1a2bc2ec500000000000000000000000000000e60eaf5a997dfae83739e035b005a33afdcc6df5000000000000000000000000c246d0ad04a9029a82862be2fbd16ab1445b1602000000000000000000000000ef4c81c76ed66d9b02e0d5de2ed352f840eb497c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000006c8d3f31b2ad1ae997afa20ead88cb67e93c6e17", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}