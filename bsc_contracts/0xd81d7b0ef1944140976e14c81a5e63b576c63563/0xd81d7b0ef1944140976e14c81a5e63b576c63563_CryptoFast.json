{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/EIP712Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract EIP712Base {\\r\\n    struct EIP712Domain {\\r\\n        string name;\\r\\n        string version;\\r\\n        address verifyingContract;\\r\\n        bytes32 salt;\\r\\n    }\\r\\n\\r\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\r\\n        keccak256(\\r\\n            bytes(\\r\\n                \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\r\\n            )\\r\\n        );\\r\\n    bytes32 internal domainSeperator;\\r\\n\\r\\n    // supposed to be called once while initializing.\\r\\n    // one of the contractsa that inherits this contract follows proxy pattern\\r\\n    // so it is not possible to do this in a constructor\\r\\n    function _initializeEIP712(\\r\\n        string memory name,\\r\\n        string memory version\\r\\n    ) internal {\\r\\n        _setDomainSeperator(name, version);\\r\\n    }\\r\\n\\r\\n    function _setDomainSeperator(\\r\\n        string memory name,\\r\\n        string memory version\\r\\n    ) internal {\\r\\n        domainSeperator = keccak256(\\r\\n            abi.encode(\\r\\n                EIP712_DOMAIN_TYPEHASH,\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes(version)),\\r\\n                address(this),\\r\\n                bytes32(getChainId())\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getDomainSeperator() public view returns (bytes32) {\\r\\n        return domainSeperator;\\r\\n    }\\r\\n\\r\\n    function getChainId() public view returns (uint256) {\\r\\n        uint256 id;\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Accept message hash and returns hash message in EIP712 compatible form\\r\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\r\\n     * https://eips.ethereum.org/EIPS/eip-712\\r\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\r\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\r\\n     */\\r\\n    function toTypedMessageHash(\\r\\n        bytes32 messageHash\\r\\n    ) internal view returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract Initializable {\\r\\n    bool inited = false;\\r\\n\\r\\n    modifier initializer() {\\r\\n        require(!inited, \\\"already initialized\\\");\\r\\n        _;\\r\\n        inited = true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/MainContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./MultiSignContract.sol\\\";\\n\\ncontract CryptoFast is ReentrancyGuard, MultiSigner {\\n    uint256 private taxFee = 1;\\n\\n    struct paymentInfo {\\n        string paymentId;\\n        address token;\\n        address from;\\n        address to;\\n        uint256 amount;\\n    }\\n\\n    mapping(string => paymentInfo) public _payment;\\n    mapping(address => string[]) private _userPaymentsReceived;\\n    mapping(address => string[]) private _userPaymentsSent;\\n    string[] public payments;\\n\\n    event logNativePayment(address indexed _to, uint256 _tokenAmount);\\n    event logTokenPayment(\\n        address indexed _token,\\n        address indexed _to,\\n        uint256 _tokenAmount\\n    );\\n\\n    constructor(address[] memory initialSigners) payable {\\n        _initializeSigners(initialSigners);\\n    }\\n\\n    function addPayment(\\n        string memory paymentId,\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private returns (paymentInfo memory) {\\n        _payment[paymentId] = paymentInfo(paymentId, token, from, to, amount);\\n\\n        _userPaymentsSent[from].push(paymentId);\\n        _userPaymentsReceived[to].push(paymentId);\\n        payments.push(paymentId);\\n\\n        return _payment[paymentId];\\n    }\\n\\n    function getPaymentsReceived(\\n        address user\\n    ) public view returns (paymentInfo[] memory) {\\n        paymentInfo[] memory ret = new paymentInfo[](\\n            _userPaymentsReceived[user].length\\n        );\\n\\n        for (uint256 i = 0; i < _userPaymentsReceived[user].length; i++) {\\n            ret[i] = _payment[_userPaymentsReceived[user][i]];\\n        }\\n\\n        return ret;\\n    }\\n\\n    function getPaymentsSent(\\n        address user\\n    ) public view returns (paymentInfo[] memory) {\\n        paymentInfo[] memory ret = new paymentInfo[](\\n            _userPaymentsSent[user].length\\n        );\\n\\n        for (uint256 i = 0; i < _userPaymentsSent[user].length; i++) {\\n            ret[i] = _payment[_userPaymentsSent[user][i]];\\n        }\\n\\n        return ret;\\n    }\\n\\n    function calculateAmountWithFee(\\n        uint256 _amount\\n    ) internal view returns (uint256) {\\n        if (whitelist[msg.sender]) return _amount;\\n\\n        uint256 amountFee = (_amount * taxFee) / 100;\\n        return _amount - amountFee;\\n    }\\n\\n    function _nativePayment(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        string memory paymentId\\n    ) internal returns (paymentInfo memory) {\\n        uint256 amountToSend = calculateAmountWithFee(amount);\\n        payable(to).transfer(amountToSend);\\n\\n        emit logNativePayment(to, amount);\\n        return addPayment(paymentId, address(0), from, to, amount);\\n    }\\n\\n    function _tokenPayment(\\n        address from,\\n        address tokenAddress,\\n        address to,\\n        uint256 amount,\\n        string memory paymentId\\n    ) internal returns (paymentInfo memory) {\\n        IERC20 iToken = IERC20(tokenAddress);\\n        require(\\n            iToken.allowance(msg.sender, address(this)) >= amount,\\n            \\\"Insufficient allowance\\\"\\n        );\\n        require(iToken.transferFrom(msg.sender, address(this), amount));\\n\\n        uint256 amountToSend = calculateAmountWithFee(amount);\\n        require(iToken.transfer(to, amountToSend));\\n\\n        emit logTokenPayment(tokenAddress, to, amount);\\n        return addPayment(paymentId, tokenAddress, from, to, amount);\\n    }\\n\\n    function generateNativePayment(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        string memory paymentId\\n    ) public payable nonReentrant returns (paymentInfo memory) {\\n        require(from != address(0), \\\"Invalid from address\\\");\\n        require(to != address(0), \\\"Invalid recipient address\\\");\\n        require(amount > 0, \\\"Invalid payment amount\\\");\\n        require(\\n            msg.value == amount,\\n            \\\"No valid ETH amount sent with the transaction\\\"\\n        );\\n\\n        paymentInfo memory paymentData = _nativePayment(\\n            from,\\n            to,\\n            amount,\\n            paymentId\\n        );\\n        return paymentData;\\n    }\\n\\n    function generateTokenPayment(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        address tokenAddress,\\n        string memory paymentId\\n    ) public nonReentrant returns (paymentInfo memory) {\\n        require(from != address(0), \\\"Invalid from address\\\");\\n        require(to != address(0), \\\"Invalid recipient address\\\");\\n        require(amount > 0, \\\"Invalid payment amount\\\");\\n\\n        paymentInfo memory paymentData = _tokenPayment(\\n            from,\\n            tokenAddress,\\n            to,\\n            amount,\\n            paymentId\\n        );\\n        return paymentData;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MultiSignContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./Initializable.sol\\\";\\r\\nimport \\\"./EIP712Base.sol\\\";\\r\\n\\r\\ncontract MultiSigner is EIP712Base, Initializable {\\r\\n    bytes32 private constant META_TRANSACTION_TYPEHASH =\\r\\n        keccak256(\\r\\n            bytes(\\r\\n                \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\r\\n            )\\r\\n        );\\r\\n\\r\\n    address[] public signers;\\r\\n    mapping(address => bool) public whitelist;\\r\\n    uint256 private _txNonce = 0;\\r\\n\\r\\n    struct MetaTransaction {\\r\\n        uint256 nonce;\\r\\n        address from;\\r\\n        bytes functionSignature;\\r\\n    }\\r\\n\\r\\n    event MetaTransactionExecuted(\\r\\n        address[] signers,\\r\\n        address owner,\\r\\n        bytes functionSignature\\r\\n    );\\r\\n\\r\\n    function _initializeSigners(\\r\\n        address[] memory _signers\\r\\n    ) internal initializer {\\r\\n        require(\\r\\n            _signers.length > 0,\\r\\n            \\\"You need at least one address to specify the creation of the multisignature contract\\\"\\r\\n        );\\r\\n\\r\\n        signers = _signers;\\r\\n        _initializeEIP712(\\\"CF\\\", \\\"1\\\");\\r\\n    }\\r\\n\\r\\n    modifier onlySigner() {\\r\\n        require(\\r\\n            isSigner(msg.sender),\\r\\n            \\\"Only contract owners can call this function.\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMultiSign() {\\r\\n        require(msg.sender == address(this), \\\"You can't run this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addToWhitelist(address _address) public onlySigner {\\r\\n        require(\\r\\n            !whitelist[_address],\\r\\n            \\\"The address is already in the whitelist\\\"\\r\\n        );\\r\\n        whitelist[_address] = true;\\r\\n    }\\r\\n\\r\\n    function removeFromWhitelist(address _address) public onlySigner {\\r\\n        require(whitelist[_address], \\\"The address is not in the whitelist\\\");\\r\\n        whitelist[_address] = false;\\r\\n    }\\r\\n\\r\\n    function isSigner(address signerAddress) public view returns (bool) {\\r\\n        for (uint256 i = 0; i < signers.length; i++) {\\r\\n            if (signers[i] == signerAddress) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function hashMetaTransaction(\\r\\n        MetaTransaction memory multiSigTx\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    META_TRANSACTION_TYPEHASH,\\r\\n                    multiSigTx.nonce,\\r\\n                    multiSigTx.from,\\r\\n                    keccak256(multiSigTx.functionSignature)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function multiSigFunction(\\r\\n        bytes32[] memory sigR,\\r\\n        bytes32[] memory sigS,\\r\\n        uint8[] memory sigV,\\r\\n        bytes memory functionSignature\\r\\n    ) public payable onlySigner returns (bytes memory) {\\r\\n        require(\\r\\n            sigR.length == signers.length &&\\r\\n                sigS.length == signers.length &&\\r\\n                sigV.length == signers.length,\\r\\n            \\\"Not all signatures\\\"\\r\\n        );\\r\\n\\r\\n        for (uint i = 0; i < signers.length; i++) {\\r\\n            MetaTransaction memory multiSigTx = MetaTransaction({\\r\\n                nonce: _txNonce,\\r\\n                from: signers[i],\\r\\n                functionSignature: functionSignature\\r\\n            });\\r\\n\\r\\n            require(\\r\\n                verify(signers[i], multiSigTx, sigR[i], sigS[i], sigV[i]),\\r\\n                \\\"Signer and signature do not match\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // increase nonce for user (to avoid re-use)\\r\\n        _txNonce++;\\r\\n\\r\\n        emit MetaTransactionExecuted(signers, msg.sender, functionSignature);\\r\\n\\r\\n        // Append userAddress and relayer address at the end to extract it from calling context\\r\\n        (bool success, bytes memory returnData) = address(this).call(\\r\\n            abi.encodePacked(functionSignature, address(this))\\r\\n        );\\r\\n        require(success, \\\"Function call not successful\\\");\\r\\n\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    function rescueERC20(\\r\\n        address tokenAddress,\\r\\n        address recipient\\r\\n    ) external onlyMultiSign {\\r\\n        IERC20 token = IERC20(tokenAddress);\\r\\n        uint256 balance = token.balanceOf(address(this));\\r\\n        require(balance > 0, \\\"Contract has no tokens of this type\\\");\\r\\n\\r\\n        token.transfer(recipient, balance);\\r\\n    }\\r\\n\\r\\n    function withdraw(address recipient) external onlyMultiSign {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0, \\\"Contract has no ETH balance\\\");\\r\\n\\r\\n        payable(recipient).transfer(balance);\\r\\n    }\\r\\n\\r\\n    function addSigner(address newSigner) external onlyMultiSign {\\r\\n        signers.push(newSigner);\\r\\n    }\\r\\n\\r\\n    function removeSigner(address signerToRemove) external onlyMultiSign {\\r\\n        require(isSigner(signerToRemove), \\\"Address is not signer\\\");\\r\\n\\r\\n        for (uint i = 0; i < signers.length; i++) {\\r\\n            if (signers[i] == signerToRemove) {\\r\\n                for (uint j = i; j < signers.length - 1; j++) {\\r\\n                    signers[j] = signers[j + 1];\\r\\n                }\\r\\n\\r\\n                signers.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        address signer,\\r\\n        MetaTransaction memory metaTx,\\r\\n        bytes32 sigR,\\r\\n        bytes32 sigS,\\r\\n        uint8 sigV\\r\\n    ) internal view returns (bool) {\\r\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\r\\n\\r\\n        return\\r\\n            signer ==\\r\\n            ecrecover(\\r\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\r\\n                sigV,\\r\\n                sigR,\\r\\n                sigS\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialSigners\",\"type\":\"address[]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"logNativePayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"logTokenPayment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"_payment\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"paymentId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"paymentId\",\"type\":\"string\"}],\"name\":\"generateNativePayment\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"paymentId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoFast.paymentInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"paymentId\",\"type\":\"string\"}],\"name\":\"generateTokenPayment\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"paymentId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoFast.paymentInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPaymentsReceived\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"paymentId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoFast.paymentInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPaymentsSent\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"paymentId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoFast.paymentInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"sigR\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"sigS\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"sigV\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"multiSigFunction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerToRemove\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CryptoFast", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bed0dcb666687854186038f23bfead4b45651c94000000000000000000000000225f17f7e6d90bcea29c2767079c392a43e22bb0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}