{"SourceCode": "// Sources flattened with hardhat v2.18.3 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File contracts/interfaces/IMhdaoNft.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IMhdaoNft {\r\n  struct NftCharacter {\r\n    uint256 id; // the NFT ID\r\n    string name; // is an empty string up until the owner sets it\r\n    string imageUrl; // is an empty string up until the owner sets it\r\n    address owner; // the current owner\r\n    uint256 type_; // 0 for none, 1 for mouse, 2 for ghost, 3+ for exotic\r\n    uint256 rarity; // 0 for none, 1 for common, 2 for rare, 3 for epic, 4 for legendary, 5 for mythic, 6 for supreme\r\n    uint256[] traits; // from 0 to 2 traits, that are numbers from 1 to 50 (initially)\r\n    uint256[] skills; // multipliers for the farming of [sc/hc, ec/cc, nuts, crafting, advanced crafting] (all have to be acquired, all go up to 3)\r\n    uint256 baseFarm; // how many Weis of BCT this NFT will generate per cycle\r\n    uint256 agility; // improves Ranks\r\n    uint256 rank; // multiplies the base farm by rank/10\r\n    uint256 farmPerBlock; // the final farm per block\r\n    uint256 squadId; // the squad ID this NFT is in\r\n    uint256 collection; // the collection this NFT belongs to\r\n  }\r\n\r\n  struct Booster {\r\n    address address_; // the address of the booster\r\n    address boosterData; // the address of the booster data contract (has names, traits, and imageURLs); if 0x0, use the default values\r\n    string name; // the name of the booster\r\n    string tokensDefaultUri; // the base URI for the tokens that can be unboxed\r\n    uint256 type_; // 1 for mouse, 2 for ghost, 3+ for exotic\r\n    uint256 rarity; // each booster has a defined NFT rarity: it will always mint NFTs of that rarity\r\n    uint256 baseFarmBoost; // how many Weis of BONUS BCT this NFT will generate per cycle\r\n    bool accepted; // whether this booster is accepted by the contract\r\n  }\r\n\r\n  function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n  function tokenIdTracker() external view returns (uint256);\r\n\r\n  function getNft(uint256 tokenId) external view returns (NftCharacter memory);\r\n\r\n  function nftsOfOwner(address _owner) external view returns (NftCharacter[] memory);\r\n\r\n  function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n  function paginatedNftsOfOwner(address _owner, uint256 page, uint256 pageSize) external view;\r\n\r\n  function getBooster(address boosterAddress) external view returns (Booster memory);\r\n\r\n  function tokensOfOwner(address _owner) external view returns (uint256[] memory);\r\n\r\n  function squadOf(uint256 tokenId) external view returns (uint256);\r\n\r\n  function isOnQuest(uint256 tokenId) external view returns (bool);\r\n\r\n  function farmPerBlockOf(uint256 tokenId) external view returns (uint256);\r\n\r\n  function rarityOf(uint256 tokenId) external view returns (uint256);\r\n\r\n  function typeOf(uint256 tokenId) external view returns (uint256);\r\n\r\n  function rarityTypeAndSkillsOf(uint256 tokenId) external view returns (uint256, uint256, uint256[] memory);\r\n\r\n  function rarityTypeRankAndSkillsOf(\r\n    uint256 tokenId\r\n  ) external view returns (uint256, uint256, uint256, uint256[] memory);\r\n\r\n  function traitsOf(uint256 tokenId) external view returns (uint256[] memory);\r\n\r\n  function collectionOf(uint256 tokenId) external view returns (uint256);\r\n\r\n  function burnFrom(address account, uint256 tokenId) external;\r\n\r\n  function setSquad(uint256 tokenId, uint256 squadId) external;\r\n\r\n  function unboxBooster(address boosterAddress) external;\r\n\r\n  function rankUp(uint256 tokenId) external;\r\n\r\n  function setBaseFarm(uint256 tokenId, uint256 newBaseFarm) external;\r\n\r\n  function setRank(uint256 tokenId, uint256 newRank) external;\r\n\r\n  function setRarityAndType(uint256 tokenId, uint256 newRarity, uint256 newType_, uint256 newBaseFarm) external;\r\n\r\n  function setTraits(uint256 tokenId, uint256[] memory traits) external;\r\n\r\n  function setSkills(uint256 tokenId, uint256[] memory _skills) external;\r\n\r\n  function setRankAgilityAndSkills(uint256 tokenId, uint256 _rank, uint256 _agility, uint256[] memory skills) external;\r\n\r\n  function setNameAndImage(uint256 tokenId, string memory newName, string memory newImageUrl) external;\r\n\r\n  function rerollTraits(uint256 tokenId) external;\r\n\r\n  function legendaryRerollTraits(uint256 tokenId, uint256 chosenTrait) external;\r\n\r\n  function setAgility(uint256 tokenId, uint256 _agility) external;\r\n\r\n  function changeName(uint256 tokenId, string memory newName) external;\r\n\r\n  function changeImageUrl(uint256 tokenId, string memory newImageUrl) external;\r\n\r\n  function setCollection(uint256 tokenId, uint256 newCollection) external;\r\n\r\n  function mint(\r\n    string memory _name,\r\n    string memory _imageUrl,\r\n    address _owner,\r\n    uint256 type_,\r\n    uint256 _rarity,\r\n    uint256 _rank,\r\n    uint256[] memory _traits,\r\n    uint256 _collection\r\n  ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IMhdaoPlayer.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IMhdaoPlayer {\r\n  struct Player {\r\n    uint256 bctToClaim; // available to claim\r\n    uint256 etherealBct; // cannot be withdrawn\r\n    uint256 lastWithdrawalBlock; // last withdraw block\r\n    uint256 registeredAt; // when the player registered (block number)\r\n    address mentor; // the player's mentor gets 0.5% of the player's farmed BCT (extra, not taking from the player)\r\n    uint256 mentorLevel; // multiplies the mentor's reward by mentorLevel, starts at 1 and goes up to 10\r\n    uint256 merchantLevel; // identifies merchants, the higher, the more fees they collect\r\n    uint256[] squads; // a dynamic list of Squad Ids\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IMhdaoQuest.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IMhdaoQuest {\r\n  struct Quest {\r\n    uint256 id; // the quest id\r\n    uint256 minSynergyMultiplier; // the minimum synergy multiplier needed to complete the quest\r\n    uint256 bctPercentage; // how much of the BCT farmed is actually collected\r\n    uint256 etherealPercentage; // how much of the BCT farmed is converted to Ethereal and then collected\r\n    uint256[] resourceMultipliers; // [0 - sc/hc, 1 - ec/cc, 2 - nuts, 3 - crafting, 4 - advanced crafting]\r\n    uint256[] traits; // traits that must be present in the squad\r\n    uint256[] collections; // which collections must be present in the squad\r\n    bool anyCollection; // if true, any collection grants access\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IMhdaoSquad.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IMhdaoSquad {\r\n  struct Squad {\r\n    address owner; // squad owner\r\n    uint256 type_; // squad type: 1 for mouse, 2 for ghost, 3 for mixed\r\n    uint256 size; // how many NFTs can be in the squad\r\n    uint256 baseFarmPerBlock; // farm per block without synergy bonus\r\n    uint256 synergyBonus; // synergy bonus\r\n    uint256 squadBonus; // squad bonus\r\n    uint256 squadTrait; // a trait that the squad has and can synergize with all NFTs there\r\n    uint256 farmPerBlock; // farm per block with synergy bonus\r\n    uint256 currentQuest; // current quest this squad is engaged in\r\n    uint256 questStartedAt; // when the squad started farming this quest\r\n    uint256 questEndsAt; // when the squad should finish this quest\r\n    uint256[] nftIds; // a dynamic list of NFT ids in the squad\r\n    uint256[] traits; // a dynamic list of possibly sinergetic traits in the squad\r\n    uint256[] collections; // a dynamic list of possibly sinergetic collections in the squad\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IPlayerBonus.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IPlayerBonus {\r\n  function bonusOf(address _playerAddress) external view returns (uint256);\r\n\r\n  function detailedBonusOf(address _playerAddress) external view returns (uint256);\r\n\r\n  function bonusWithFortuneOf(address account) external view returns (uint256, uint256);\r\n\r\n  function resetBonusOf(address _playerAddress) external;\r\n\r\n  function setStashOf(address _playerAddress, uint256 _stash) external;\r\n\r\n  function setMythicMintsOf(address _playerAddress, uint256 _mythicMints) external;\r\n\r\n  function incrementMythicsOf(address _playerAddress) external;\r\n\r\n  function setSpecialOf(address _playerAddress, uint256 _special) external;\r\n\r\n  function setAllOf(address _playerAddress, uint256 _stash, uint256 _mythicMints, uint256 _special) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IQuestRewardCalculator.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IQuestRewardCalculator {\r\n  struct MultiplierRequest {\r\n    uint256 squadType;\r\n    uint256 numberOfNtfs;\r\n    uint256 raritySum;\r\n    uint256 synergyBonus;\r\n    uint256 traits;\r\n    uint256 collections;\r\n    uint256 durationInBlocks;\r\n    address account;\r\n  }\r\n\r\n  function getBaseMultipliers(MultiplierRequest memory req) external pure returns (uint256[] memory);\r\n}\r\n\r\n\r\n// File contracts/interfaces/MHIERC20.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface MHIERC20 {\r\n  function approve(address to, uint256 tokenId) external;\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external;\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function burn(uint256 amount) external;\r\n\r\n  function burn(address from, uint256 amount) external;\r\n\r\n  function burnFrom(address account, uint256 amount) external;\r\n\r\n  function decimals() external view returns (uint8);\r\n\r\n  function mint(address to, uint256 amount) external;\r\n\r\n  function totalSupply() external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/MHIERC721.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface MHIERC721 {\r\n  function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n  function burn(uint256 tokenId) external;\r\n\r\n  function burnFrom(address account, uint256 tokenId) external;\r\n\r\n  function mintNftByRarity(address to, address rarity) external;\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n  function getApproved(uint256 tokenId) external view returns (address);\r\n\r\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/access/IAccessControlUpgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlUpgradeable {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/utils/AddressUpgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n   *\r\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n   * constructor.\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies on extcodesize/address.code.length, which returns 0\r\n    // for contracts in construction, since the code is only stored at the end\r\n    // of the constructor execution.\r\n\r\n    return account.code.length > 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount);\r\n\r\n    (bool success, ) = recipient.call{value: amount}(\"\");\r\n    require(success);\r\n  }\r\n\r\n  /**\r\n   * @dev Performs a Solidity function call using a low level `call`. A\r\n   * plain `call` is an unsafe replacement for a function call: use this\r\n   * function instead.\r\n   *\r\n   * If `target` reverts with a revert reason, it is bubbled up by this\r\n   * function (like regular Solidity function calls).\r\n   *\r\n   * Returns the raw returned data. To convert to the expected return value,\r\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `target` must be a contract.\r\n   * - calling `target` with `data` must not revert.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n   * `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but also transferring `value` wei to `target`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the calling contract must have an ETH balance of at least `value`.\r\n   * - the called Solidity function must be `payable`.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(address(this).balance >= value);\r\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n    return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n   *\r\n   * _Available since v4.8._\r\n   */\r\n  function verifyCallResultFromTarget(\r\n    address target,\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    if (success) {\r\n      if (returndata.length == 0) {\r\n        // only check isContract if the call was successful and the return data is empty\r\n        // otherwise we already know that it was a contract\r\n        require(isContract(target));\r\n      }\r\n      return returndata;\r\n    } else {\r\n      _revert(returndata, errorMessage);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n   * revert reason or using the provided one.\r\n   *\r\n   * _Available since v4.3._\r\n   */\r\n  function verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) internal pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      _revert(returndata, errorMessage);\r\n    }\r\n  }\r\n\r\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n    // Look for revert reason and bubble it up if present\r\n    if (returndata.length > 0) {\r\n      // The easiest way to bubble the revert reason is using memory via assembly\r\n      /// @solidity memory-safe-assembly\r\n      assembly {\r\n        let returndata_size := mload(returndata)\r\n        revert(add(32, returndata), returndata_size)\r\n      }\r\n    } else {\r\n      revert(errorMessage);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/proxy/utils/Initializable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   * @custom:oz-retyped-from bool\r\n   */\r\n  uint8 private _initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private _initializing;\r\n\r\n  /**\r\n   * @dev Triggered when the contract has been initialized or reinitialized.\r\n   */\r\n  event Initialized(uint8 version);\r\n\r\n  /**\r\n   * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n   * `onlyInitializing` functions can be used to initialize parent contracts.\r\n   *\r\n   * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n   * constructor.\r\n   *\r\n   * Emits an {Initialized} event.\r\n   */\r\n  modifier initializer() {\r\n    bool isTopLevelCall = !_initializing;\r\n    require(\r\n      (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1)\r\n    );\r\n    _initialized = 1;\r\n    if (isTopLevelCall) {\r\n      _initializing = true;\r\n    }\r\n    _;\r\n    if (isTopLevelCall) {\r\n      _initializing = false;\r\n      emit Initialized(1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n   * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n   * used to initialize parent contracts.\r\n   *\r\n   * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n   * are added through upgrades and that require initialization.\r\n   *\r\n   * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n   * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n   *\r\n   * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n   * a contract, executing them in the right order is up to the developer or operator.\r\n   *\r\n   * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n   *\r\n   * Emits an {Initialized} event.\r\n   */\r\n  modifier reinitializer(uint8 version) {\r\n    require(!_initializing && _initialized < version);\r\n    _initialized = version;\r\n    _initializing = true;\r\n    _;\r\n    _initializing = false;\r\n    emit Initialized(version);\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n   * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n   */\r\n  modifier onlyInitializing() {\r\n    require(_initializing);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n   * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n   * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n   * through proxies.\r\n   *\r\n   * Emits an {Initialized} event the first time it is successfully executed.\r\n   */\r\n  function _disableInitializers() internal virtual {\r\n    require(!_initializing);\r\n    if (_initialized < type(uint8).max) {\r\n      _initialized = type(uint8).max;\r\n      emit Initialized(type(uint8).max);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that returns the initialized version. Returns `_initialized`\r\n   */\r\n  function _getInitializedVersion() internal view returns (uint8) {\r\n    return _initialized;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that returns the initialized version. Returns `_initializing`\r\n   */\r\n  function _isInitializing() internal view returns (bool) {\r\n    return _initializing;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165Upgradeable {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\r\n    function __ERC165_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal onlyInitializing {\r\n    }\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/utils/math/MathUpgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary MathUpgradeable {\r\n  enum Rounding {\r\n    Down, // Toward negative infinity\r\n    Up, // Toward infinity\r\n    Zero // Toward zero\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the largest of two numbers.\r\n   */\r\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a > b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the smallest of two numbers.\r\n   */\r\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the average of two numbers. The result is rounded towards\r\n   * zero.\r\n   */\r\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b) / 2 can overflow.\r\n    return (a & b) + (a ^ b) / 2;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the ceiling of the division of two numbers.\r\n   *\r\n   * This differs from standard division with `/` in that it rounds up instead\r\n   * of rounding down.\r\n   */\r\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // (a + b - 1) / b can overflow on addition, so we distribute.\r\n    return a == 0 ? 0 : (a - 1) / b + 1;\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n   * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n   * with further edits by Uniswap Labs also under MIT license.\r\n   */\r\n  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n    unchecked {\r\n      // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n      // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n      // variables such that product = prod1 * 2^256 + prod0.\r\n      uint256 prod0; // Least significant 256 bits of the product\r\n      uint256 prod1; // Most significant 256 bits of the product\r\n      assembly {\r\n        let mm := mulmod(x, y, not(0))\r\n        prod0 := mul(x, y)\r\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n      }\r\n\r\n      // Handle non-overflow cases, 256 by 256 division.\r\n      if (prod1 == 0) {\r\n        return prod0 / denominator;\r\n      }\r\n\r\n      // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n      require(denominator > prod1);\r\n\r\n      ///////////////////////////////////////////////\r\n      // 512 by 256 division.\r\n      ///////////////////////////////////////////////\r\n\r\n      // Make division exact by subtracting the remainder from [prod1 prod0].\r\n      uint256 remainder;\r\n      assembly {\r\n        // Compute remainder using mulmod.\r\n        remainder := mulmod(x, y, denominator)\r\n\r\n        // Subtract 256 bit number from 512 bit number.\r\n        prod1 := sub(prod1, gt(remainder, prod0))\r\n        prod0 := sub(prod0, remainder)\r\n      }\r\n\r\n      // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n      // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n      // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n      uint256 twos = denominator & (~denominator + 1);\r\n      assembly {\r\n        // Divide denominator by twos.\r\n        denominator := div(denominator, twos)\r\n\r\n        // Divide [prod1 prod0] by twos.\r\n        prod0 := div(prod0, twos)\r\n\r\n        // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n        twos := add(div(sub(0, twos), twos), 1)\r\n      }\r\n\r\n      // Shift in bits from prod1 into prod0.\r\n      prod0 |= prod1 * twos;\r\n\r\n      // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n      // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n      // four bits. That is, denominator * inv = 1 mod 2^4.\r\n      uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n      // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n      // in modular arithmetic, doubling the correct bits in each step.\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n      inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n      // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n      // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n      // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n      // is no longer required.\r\n      result = prod0 * inverse;\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n   */\r\n  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n    uint256 result = mulDiv(x, y, denominator);\r\n    if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n      result += 1;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n   *\r\n   * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n   */\r\n  function sqrt(uint256 a) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n    //\r\n    // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n    //\r\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n    // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n    // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n    //\r\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n    uint256 result = 1 << (log2(a) >> 1);\r\n\r\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n    // into the expected uint128 result.\r\n    unchecked {\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      result = (result + a / result) >> 1;\r\n      return min(result, a / result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Calculates sqrt(a), following the selected rounding direction.\r\n   */\r\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 result = sqrt(a);\r\n      return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 2, rounded down, of a positive value.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log2(uint256 value) internal pure returns (uint256) {\r\n    uint256 result = 0;\r\n    unchecked {\r\n      if (value >> 128 > 0) {\r\n        value >>= 128;\r\n        result += 128;\r\n      }\r\n      if (value >> 64 > 0) {\r\n        value >>= 64;\r\n        result += 64;\r\n      }\r\n      if (value >> 32 > 0) {\r\n        value >>= 32;\r\n        result += 32;\r\n      }\r\n      if (value >> 16 > 0) {\r\n        value >>= 16;\r\n        result += 16;\r\n      }\r\n      if (value >> 8 > 0) {\r\n        value >>= 8;\r\n        result += 8;\r\n      }\r\n      if (value >> 4 > 0) {\r\n        value >>= 4;\r\n        result += 4;\r\n      }\r\n      if (value >> 2 > 0) {\r\n        value >>= 2;\r\n        result += 2;\r\n      }\r\n      if (value >> 1 > 0) {\r\n        result += 1;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 result = log2(value);\r\n      return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 10, rounded down, of a positive value.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log10(uint256 value) internal pure returns (uint256) {\r\n    uint256 result = 0;\r\n    unchecked {\r\n      if (value >= 10 ** 64) {\r\n        value /= 10 ** 64;\r\n        result += 64;\r\n      }\r\n      if (value >= 10 ** 32) {\r\n        value /= 10 ** 32;\r\n        result += 32;\r\n      }\r\n      if (value >= 10 ** 16) {\r\n        value /= 10 ** 16;\r\n        result += 16;\r\n      }\r\n      if (value >= 10 ** 8) {\r\n        value /= 10 ** 8;\r\n        result += 8;\r\n      }\r\n      if (value >= 10 ** 4) {\r\n        value /= 10 ** 4;\r\n        result += 4;\r\n      }\r\n      if (value >= 10 ** 2) {\r\n        value /= 10 ** 2;\r\n        result += 2;\r\n      }\r\n      if (value >= 10 ** 1) {\r\n        result += 1;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 result = log10(value);\r\n      return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 256, rounded down, of a positive value.\r\n   * Returns 0 if given 0.\r\n   *\r\n   * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n   */\r\n  function log256(uint256 value) internal pure returns (uint256) {\r\n    uint256 result = 0;\r\n    unchecked {\r\n      if (value >> 128 > 0) {\r\n        value >>= 128;\r\n        result += 16;\r\n      }\r\n      if (value >> 64 > 0) {\r\n        value >>= 64;\r\n        result += 8;\r\n      }\r\n      if (value >> 32 > 0) {\r\n        value >>= 32;\r\n        result += 4;\r\n      }\r\n      if (value >> 16 > 0) {\r\n        value >>= 16;\r\n        result += 2;\r\n      }\r\n      if (value >> 8 > 0) {\r\n        result += 1;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n   * Returns 0 if given 0.\r\n   */\r\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 result = log256(value);\r\n      return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/utils/StringsUpgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary StringsUpgradeable {\r\n  bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n  uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n   */\r\n  function toString(uint256 value) internal pure returns (string memory) {\r\n    unchecked {\r\n      uint256 length = MathUpgradeable.log10(value) + 1;\r\n      string memory buffer = new string(length);\r\n      uint256 ptr;\r\n      /// @solidity memory-safe-assembly\r\n      assembly {\r\n        ptr := add(buffer, add(32, length))\r\n      }\r\n      while (true) {\r\n        ptr--;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n          mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n        }\r\n        value /= 10;\r\n        if (value == 0) break;\r\n      }\r\n      return buffer;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n   */\r\n  function toHexString(uint256 value) internal pure returns (string memory) {\r\n    unchecked {\r\n      return toHexString(value, MathUpgradeable.log256(value) + 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n   */\r\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n    bytes memory buffer = new bytes(2 * length + 2);\r\n    buffer[0] = \"0\";\r\n    buffer[1] = \"x\";\r\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n      buffer[i] = _SYMBOLS[value & 0xf];\r\n      value >>= 4;\r\n    }\r\n    require(value == 0);\r\n    return string(buffer);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n   */\r\n  function toHexString(address addr) internal pure returns (string memory) {\r\n    return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/access/AccessControlUpgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControlUpgradeable is\r\n  Initializable,\r\n  ContextUpgradeable,\r\n  IAccessControlUpgradeable,\r\n  ERC165Upgradeable\r\n{\r\n  function __AccessControl_init() internal onlyInitializing {}\r\n\r\n  function __AccessControl_init_unchained() internal onlyInitializing {}\r\n\r\n  struct RoleData {\r\n    mapping(address => bool) members;\r\n    bytes32 adminRole;\r\n  }\r\n\r\n  mapping(bytes32 => RoleData) private _roles;\r\n\r\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n  /**\r\n   * @dev Modifier that checks that an account has a specific role. Reverts\r\n   * with a standardized message including the required role.\r\n   *\r\n   * The format of the revert reason is given by the following regular expression:\r\n   *\r\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n   *\r\n   * _Available since v4.1._\r\n   */\r\n  modifier onlyRole(bytes32 role) {\r\n    _checkRole(role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n    return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns `true` if `account` has been granted `role`.\r\n   */\r\n  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n    return _roles[role].members[account];\r\n  }\r\n\r\n  /**\r\n   * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n   * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n   *\r\n   * Format of the revert message is described in {_checkRole}.\r\n   *\r\n   * _Available since v4.6._\r\n   */\r\n  function _checkRole(bytes32 role) internal view virtual {\r\n    _checkRole(role, _msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Revert with a standard message if `account` is missing `role`.\r\n   *\r\n   * The format of the revert reason is given by the following regular expression:\r\n   *\r\n   *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n   */\r\n  function _checkRole(bytes32 role, address account) internal view virtual {\r\n    if (!hasRole(role, account)) {\r\n      revert(\r\n        string(\r\n          abi.encodePacked(\r\n            \"AccessControl: account \",\r\n            StringsUpgradeable.toHexString(account),\r\n            \" is missing role \",\r\n            StringsUpgradeable.toHexString(uint256(role), 32)\r\n          )\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n   * {revokeRole}.\r\n   *\r\n   * To change a role's admin, use {_setRoleAdmin}.\r\n   */\r\n  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n    return _roles[role].adminRole;\r\n  }\r\n\r\n  /**\r\n   * @dev Grants `role` to `account`.\r\n   *\r\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n   * event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must have ``role``'s admin role.\r\n   *\r\n   * May emit a {RoleGranted} event.\r\n   */\r\n  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n    _grantRole(role, account);\r\n  }\r\n\r\n  /**\r\n   * @dev Revokes `role` from `account`.\r\n   *\r\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must have ``role``'s admin role.\r\n   *\r\n   * May emit a {RoleRevoked} event.\r\n   */\r\n  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n    _revokeRole(role, account);\r\n  }\r\n\r\n  /**\r\n   * @dev Revokes `role` from the calling account.\r\n   *\r\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n   * purpose is to provide a mechanism for accounts to lose their privileges\r\n   * if they are compromised (such as when a trusted device is misplaced).\r\n   *\r\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n   * event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must be `account`.\r\n   *\r\n   * May emit a {RoleRevoked} event.\r\n   */\r\n  function renounceRole(bytes32 role, address account) public virtual override {\r\n    require(account == _msgSender());\r\n\r\n    _revokeRole(role, account);\r\n  }\r\n\r\n  /**\r\n   * @dev Grants `role` to `account`.\r\n   *\r\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n   * event. Note that unlike {grantRole}, this function doesn't perform any\r\n   * checks on the calling account.\r\n   *\r\n   * May emit a {RoleGranted} event.\r\n   *\r\n   * [WARNING]\r\n   * ====\r\n   * This function should only be called from the constructor when setting\r\n   * up the initial roles for the system.\r\n   *\r\n   * Using this function in any other way is effectively circumventing the admin\r\n   * system imposed by {AccessControl}.\r\n   * ====\r\n   *\r\n   * NOTE: This function is deprecated in favor of {_grantRole}.\r\n   */\r\n  function _setupRole(bytes32 role, address account) internal virtual {\r\n    _grantRole(role, account);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `adminRole` as ``role``'s admin role.\r\n   *\r\n   * Emits a {RoleAdminChanged} event.\r\n   */\r\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n    bytes32 previousAdminRole = getRoleAdmin(role);\r\n    _roles[role].adminRole = adminRole;\r\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n  }\r\n\r\n  /**\r\n   * @dev Grants `role` to `account`.\r\n   *\r\n   * Internal function without access restriction.\r\n   *\r\n   * May emit a {RoleGranted} event.\r\n   */\r\n  function _grantRole(bytes32 role, address account) internal virtual {\r\n    if (!hasRole(role, account)) {\r\n      _roles[role].members[account] = true;\r\n      emit RoleGranted(role, account, _msgSender());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Revokes `role` from `account`.\r\n   *\r\n   * Internal function without access restriction.\r\n   *\r\n   * May emit a {RoleRevoked} event.\r\n   */\r\n  function _revokeRole(bytes32 role, address account) internal virtual {\r\n    if (hasRole(role, account)) {\r\n      _roles[role].members[account] = false;\r\n      emit RoleRevoked(role, account, _msgSender());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev This empty reserved space is put in place to allow future versions to add new\r\n   * variables without shifting down storage in the inheritance chain.\r\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n   */\r\n  uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/utils/openZeppelinModified/contracts-upgradeable/security/PausableUpgradeable.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal onlyInitializing {\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal onlyInitializing {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/features/BkFarmV18.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\n// @dev: remove require messages from the 3 following contracts to save on bytecode (you must)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BkFarmV18 is Initializable, AccessControlUpgradeable, PausableUpgradeable {\r\n  bytes32 internal constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\r\n  bytes32 internal constant UPDATER_ROLE = keccak256(\"UPDATER_ROLE\");\r\n\r\n  // Interfaces\r\n  struct Contracts {\r\n    MHIERC20 bct;\r\n    IMhdaoNft mhdaoNFT;\r\n    IPlayerBonus playerBonus;\r\n    IQuestRewardCalculator questRewardCalculator;\r\n  }\r\n  Contracts public contracts;\r\n\r\n  mapping(address => IMhdaoPlayer.Player) public players;\r\n  mapping(uint256 => IMhdaoSquad.Squad) public squads;\r\n  mapping(uint256 => IMhdaoQuest.Quest) public quests;\r\n  uint256 public totalSquads; // total squads ever, counting all players\r\n  mapping(uint256 => uint256) public raritySumOfSquad; // sum of all NFTs rarities in a squad\r\n  mapping(uint256 => address) public resources; // list of resources by resource index\r\n  uint256 totalResourcesRegistered; // total resources registered\r\n  mapping(address => mapping(uint256 => uint256)) public resourceBalances; // player => resource => amount\r\n  mapping(address => uint256) public changeMentorBlock; // player => block number\r\n\r\n  Config public config;\r\n\r\n  struct Config {\r\n    uint256 burnFeePct; // We'll burn this much % in every withdraw\r\n    uint256 scale; // 100 is 1.00, multiplies the farm per block\r\n    uint256 withdrawalInterval; // minimum number of blocks between withdraws\r\n    uint256 maxSquads; // max squads per player\r\n    uint256 mentorDivider; // (1/mentorDivider)*mentorLevel percent of the total farm goes to the mentor\r\n    bool burnInGameBctBalance; // if true, the in-game BCT balance will be burned from the farm when the player paysWithBalance\r\n    bool burnInGameEbctBalance; // if true, the in-game eMM balance will be burned from the farm when the player paysWithBalance\r\n  }\r\n\r\n  event PlayerRegistered(address player);\r\n  event QuestStarted(address player, uint256 squadId, uint256 questId, uint256 farmPerBlock);\r\n  event QuestEnded(address player, uint256 squadId, uint256 questId, uint256 duration);\r\n  event Withdraw(address player, uint256 amount, uint256 burnAmount);\r\n  event InGameResourceTransfer(address from, address to, uint256 amount);\r\n\r\n  // UPDATE V10 variables\r\n  uint256 public nextHalvingThreshold;\r\n\r\n  // UPDATE V18 variables\r\n  event BurnBct(uint256 amount);\r\n\r\n  function initialize(\r\n    address _operator,\r\n    address _bct,\r\n    address _mhdaoNFT,\r\n    address _playerBonus,\r\n    address _questRewardCalculator\r\n  ) public initializer {\r\n    __AccessControl_init();\r\n    __Pausable_init();\r\n\r\n    _setupRole(DEFAULT_ADMIN_ROLE, _operator);\r\n    _setupRole(OPERATOR_ROLE, _operator);\r\n    _setupRole(UPDATER_ROLE, _operator);\r\n\r\n    contracts = Contracts({\r\n      bct: MHIERC20(_bct),\r\n      mhdaoNFT: IMhdaoNft(_mhdaoNFT),\r\n      playerBonus: IPlayerBonus(_playerBonus),\r\n      questRewardCalculator: IQuestRewardCalculator(_questRewardCalculator)\r\n    });\r\n\r\n    config = Config({\r\n      burnFeePct: 20,\r\n      scale: 800,\r\n      withdrawalInterval: 28800 * 15, // 15 days\r\n      maxSquads: 20,\r\n      mentorDivider: 200,\r\n      burnInGameBctBalance: true,\r\n      burnInGameEbctBalance: true\r\n    });\r\n  }\r\n\r\n  //################\r\n  // User functions\r\n  function _onlyOwnerNotPausedOrUpdater(address account) internal view {\r\n    require((account == msg.sender && !paused()) || hasRole(UPDATER_ROLE, msg.sender));\r\n  }\r\n\r\n  function registerPlayer(address mentor) external whenNotPaused {\r\n    require(players[msg.sender].squads.length == 0);\r\n    require(msg.sender != mentor);\r\n\r\n    players[msg.sender] = IMhdaoPlayer.Player({\r\n      bctToClaim: 0,\r\n      etherealBct: players[msg.sender].etherealBct,\r\n      lastWithdrawalBlock: block.number,\r\n      registeredAt: block.number,\r\n      mentor: mentor,\r\n      mentorLevel: 1,\r\n      merchantLevel: 0,\r\n      squads: new uint256[](0) // a dynamic list of squad ids\r\n    });\r\n\r\n    _createNewSquad(msg.sender, 6);\r\n    _createNewSquad(msg.sender, 6);\r\n    _createNewSquad(msg.sender, 6);\r\n    _createNewSquad(msg.sender, 6);\r\n\r\n    contracts.playerBonus.resetBonusOf(msg.sender);\r\n\r\n    emit PlayerRegistered(msg.sender);\r\n  }\r\n\r\n  function addToSquad(uint256[] memory nftIds, uint256 squadId) external {\r\n    IMhdaoSquad.Squad storage squad = squads[squadId];\r\n    _onlyOwnerNotPausedOrUpdater(squad.owner);\r\n\r\n    require(squad.currentQuest == 0);\r\n    require(squad.nftIds.length + nftIds.length <= squad.size);\r\n\r\n    uint256 raritySum;\r\n    for (uint256 i = 0; i < nftIds.length; i++) {\r\n      uint256 nftId = nftIds[i];\r\n      require(contracts.mhdaoNFT.ownerOf(nftId) == squad.owner);\r\n      require(contracts.mhdaoNFT.squadOf(nftId) == 0);\r\n\r\n      // get the NFT's metadata to check whether this is a mouse, cat, or another beast\r\n      IMhdaoNft.NftCharacter memory nft = contracts.mhdaoNFT.getNft(nftId);\r\n      require(_isAllowedToEnter(nft.type_, squadId));\r\n\r\n      // add the NFT id to the squad\r\n      squad.nftIds.push(nftId);\r\n\r\n      // add the NFT's traits to the squad\r\n      for (uint256 j = 0; j < nft.traits.length; j++) {\r\n        if (nft.traits[j] > 0) {\r\n          squad.traits.push(nft.traits[j]);\r\n        }\r\n      }\r\n\r\n      if (nft.collection > 0) {\r\n        squad.collections.push(nft.collection);\r\n      }\r\n\r\n      // update the squad's raritySum\r\n      raritySum += nft.rarity;\r\n\r\n      // update the NFT's squad\r\n      contracts.mhdaoNFT.setSquad(nftId, squadId);\r\n    }\r\n\r\n    raritySumOfSquad[squadId] += raritySum;\r\n\r\n    // update the squad's farming\r\n    _updateSquadFarming(squadId);\r\n  }\r\n\r\n  function removeFromSquad(uint256[] memory nftIds, uint256 squadId) external {\r\n    IMhdaoSquad.Squad storage squad = squads[squadId];\r\n    _onlyOwnerNotPausedOrUpdater(squad.owner);\r\n\r\n    require(squad.currentQuest == 0);\r\n    require(squad.nftIds.length > 0);\r\n\r\n    uint256 raritySum;\r\n    for (uint256 i = 0; i < nftIds.length; i++) {\r\n      uint256 nftId = nftIds[i];\r\n      require(contracts.mhdaoNFT.ownerOf(nftId) == squad.owner);\r\n      require(contracts.mhdaoNFT.squadOf(nftId) == squadId);\r\n\r\n      // remove the NFT from the squad\r\n      bool removed;\r\n      for (uint256 j = 0; j < squad.nftIds.length; j++) {\r\n        if (squad.nftIds[j] == nftId) {\r\n          squad.nftIds[j] = squad.nftIds[squad.nftIds.length - 1];\r\n          squad.nftIds.pop();\r\n          removed = true;\r\n          break;\r\n        }\r\n      }\r\n      require(removed);\r\n\r\n      uint256 nftCollection = contracts.mhdaoNFT.collectionOf(nftId);\r\n      if (nftCollection > 0) {\r\n        for (uint256 j = 0; j < squad.collections.length; j++) {\r\n          if (squad.collections[j] == nftCollection) {\r\n            squad.collections[j] = squad.collections[squad.collections.length - 1];\r\n            squad.collections.pop();\r\n            removed = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        require(removed);\r\n      }\r\n\r\n      // update the NFT's squad\r\n      contracts.mhdaoNFT.setSquad(nftId, 0);\r\n\r\n      raritySum += contracts.mhdaoNFT.rarityOf(nftId);\r\n    }\r\n\r\n    // update the squad's raritySum\r\n    raritySumOfSquad[squadId] -= raritySum;\r\n\r\n    // remove the NFT's traits from the squad and update the squad's synergy bonus\r\n    _recalculateSquadTraits(squadId);\r\n    _updateSquadFarming(squadId);\r\n  }\r\n\r\n  function clearSquad(uint256 squadId) external {\r\n    IMhdaoSquad.Squad storage squad = squads[squadId];\r\n    _onlyOwnerNotPausedOrUpdater(squad.owner);\r\n\r\n    require(squad.currentQuest == 0);\r\n    require(squad.nftIds.length > 0);\r\n\r\n    for (uint i = 0; i < squad.nftIds.length; i++) {\r\n      contracts.mhdaoNFT.setSquad(squad.nftIds[i], 0);\r\n    }\r\n\r\n    squad.nftIds = new uint256[](0);\r\n    squad.collections = new uint256[](0);\r\n    squad.traits = new uint256[](0);\r\n    raritySumOfSquad[squadId] = 0;\r\n\r\n    squad.baseFarmPerBlock = 0;\r\n    squad.synergyBonus = 0;\r\n    squad.farmPerBlock = 0;\r\n  }\r\n\r\n  function withdraw(uint256 amount) public whenNotPaused {\r\n    IMhdaoPlayer.Player storage player = players[msg.sender];\r\n    require(player.bctToClaim >= amount);\r\n    require(player.lastWithdrawalBlock + config.withdrawalInterval <= block.number);\r\n\r\n    uint256 burnAmount = ((amount * 15) / 100);\r\n    uint256 remainingAmount = amount - burnAmount;\r\n\r\n    player.bctToClaim -= amount;\r\n    player.lastWithdrawalBlock = block.number;\r\n\r\n    _burnBct(burnAmount);\r\n    contracts.bct.transfer(msg.sender, remainingAmount);\r\n\r\n    emit Withdraw(msg.sender, amount, burnAmount);\r\n  }\r\n\r\n  function transfer(address to, uint256 bct, uint256 eBct, uint256[] memory _resources) public whenNotPaused {\r\n    _transferInGameBctAndLoot(msg.sender, to, bct, _resources);\r\n\r\n    if (eBct > 0) {\r\n      transferEbct(msg.sender, to, eBct);\r\n    }\r\n  }\r\n\r\n  function transferEbct(address from, address to, uint256 amount) public {\r\n    require((from == msg.sender && !paused()) || hasRole(UPDATER_ROLE, msg.sender));\r\n\r\n    players[from].etherealBct -= amount; //reverts on underflow\r\n    players[to].etherealBct += amount;\r\n  }\r\n\r\n  //################\r\n  // UPDATER functions\r\n  function startQuestFor(uint256 squadId, uint256 questId) external onlyRole(UPDATER_ROLE) {\r\n    IMhdaoSquad.Squad storage squad = squads[squadId];\r\n    require(squad.currentQuest == 0);\r\n\r\n    // get the quest's metadata\r\n    IMhdaoQuest.Quest memory quest = quests[questId];\r\n    require(quest.id > 0);\r\n\r\n    // check if the squad has the required amount of NFTs\r\n    require(squad.nftIds.length > 0);\r\n\r\n    if (quest.minSynergyMultiplier > 0) {\r\n      require(squad.synergyBonus >= quest.minSynergyMultiplier);\r\n    }\r\n\r\n    // check if the squad has at least one of each of the required traits\r\n    if (quest.traits.length > 0) {\r\n      for (uint256 i = 0; i < quest.traits.length; i++) {\r\n        bool hasTrait;\r\n        for (uint256 j = 0; j < squad.traits.length; j++) {\r\n          if (squad.traits[j] == quest.traits[i]) {\r\n            hasTrait = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (squad.squadTrait != 0) {\r\n          if (squad.squadTrait == quest.traits[i]) {\r\n            hasTrait = true;\r\n          }\r\n        }\r\n\r\n        require(hasTrait);\r\n      }\r\n    }\r\n\r\n    // check if the squad has at least one of each of the required collections\r\n    if (quest.collections.length > 0 || quest.anyCollection) {\r\n      for (uint256 i = 0; i < quest.collections.length; i++) {\r\n        bool hasCollection;\r\n        for (uint256 j = 0; j < squad.collections.length; j++) {\r\n          if (squad.collections[j] == quest.collections[i] || quest.anyCollection) {\r\n            hasCollection = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        require(hasCollection);\r\n      }\r\n    }\r\n\r\n    // update the squad's current quest\r\n    squad.currentQuest = questId;\r\n    squad.questStartedAt = block.number;\r\n\r\n    // emit event\r\n    emit QuestStarted(squad.owner, squadId, questId, squad.farmPerBlock);\r\n  }\r\n\r\n  function finishQuestFor(uint256 squadId) external onlyRole(UPDATER_ROLE) {\r\n    IMhdaoSquad.Squad storage squad = squads[squadId];\r\n    uint256 currentQuestId = squad.currentQuest;\r\n    require(currentQuestId > 0);\r\n\r\n    // get the quest's metadata\r\n    IMhdaoQuest.Quest memory quest = quests[currentQuestId];\r\n\r\n    uint256 durationInBlocks = block.number - squad.questStartedAt;\r\n    require(durationInBlocks >= 28800); // minimum is 1 day\r\n\r\n    // update the squad's current quest\r\n    squad.currentQuest = 0;\r\n    squad.questStartedAt = 0;\r\n\r\n    IMhdaoPlayer.Player storage player = players[squad.owner];\r\n\r\n    // Fetch all multipliers:\r\n    uint256[] memory multipliers = contracts.questRewardCalculator.getBaseMultipliers(\r\n      IQuestRewardCalculator.MultiplierRequest({\r\n        squadType: squad.type_,\r\n        numberOfNtfs: squad.nftIds.length,\r\n        raritySum: raritySumOfSquad[squadId],\r\n        synergyBonus: squad.synergyBonus,\r\n        traits: squad.traits.length,\r\n        collections: squad.collections.length,\r\n        durationInBlocks: durationInBlocks,\r\n        account: squad.owner\r\n      })\r\n    );\r\n\r\n    if (quest.bctPercentage > 0) {\r\n      uint256 totalBctFarmed = (squad.farmPerBlock * quest.bctPercentage * config.scale) / 10000;\r\n      totalBctFarmed = (totalBctFarmed * multipliers[0]) / 100;\r\n\r\n      player.bctToClaim += totalBctFarmed;\r\n      _burnBct(totalBctFarmed / 4);\r\n    }\r\n\r\n    if (quest.etherealPercentage > 0) {\r\n      uint256 totalEtherealFarmed = (squad.farmPerBlock * quest.etherealPercentage * config.scale) / 10000;\r\n      totalEtherealFarmed = (totalEtherealFarmed * multipliers[1]) / 100;\r\n\r\n      player.etherealBct += totalEtherealFarmed;\r\n      _burnBct(totalEtherealFarmed / 4);\r\n    }\r\n\r\n    uint256[] memory resourceCentsFarmed = new uint256[](21);\r\n    for (uint256 i = 0; i < squad.nftIds.length; i++) {\r\n      // get the NFT's rarity and multiply it\r\n      (uint256 rarity, uint256 type_, uint256[] memory skills) = contracts.mhdaoNFT.rarityTypeAndSkillsOf(\r\n        squad.nftIds[i]\r\n      );\r\n\r\n      if (skills.length < 5) {\r\n        // create a new array with 6 elements\r\n        uint256[] memory newSkills = new uint256[](6);\r\n        for (uint256 j = 0; j < skills.length; j++) {\r\n          newSkills[j] = skills[j];\r\n        }\r\n\r\n        // set the new skills in the current flow\r\n        skills = newSkills;\r\n\r\n        // now set it in the actual NFT contract\r\n        contracts.mhdaoNFT.setSkills(squad.nftIds[i], skills);\r\n      }\r\n\r\n      // Skills: 'Loot' 1 and 2\r\n      resourceCentsFarmed[type_ - 1] += (quest.resourceMultipliers[0] * rarity * skills[0] * multipliers[2]);\r\n      resourceCentsFarmed[type_ + 4] += (quest.resourceMultipliers[1] * rarity * skills[1] * multipliers[3]);\r\n\r\n      // if type >= 6, it's a special NFT that has a second Basic Loot Skill:\r\n      if (type_ >= 6) {\r\n        resourceCentsFarmed[type_] += (quest.resourceMultipliers[0] * rarity * skills[4] * multipliers[2]);\r\n      }\r\n\r\n      // if type >= 11, it's a special NFT that has a second Advanced Loot Skill:\r\n      if (type_ >= 11) {\r\n        resourceCentsFarmed[type_ + 5] += (quest.resourceMultipliers[1] * rarity * skills[5] * multipliers[3]);\r\n      }\r\n\r\n      // Skill: 'Nuts'\r\n      resourceCentsFarmed[10] += (quest.resourceMultipliers[2] * rarity * skills[2] * multipliers[4]);\r\n\r\n      // Skill: Crafting\r\n      for (uint256 j = 3; j < 11; j++) {\r\n        resourceCentsFarmed[j + 8] += (quest.resourceMultipliers[j] * rarity * skills[3] * multipliers[5]);\r\n      }\r\n\r\n      // Skill: Crafting Cow and Elephant Boxes\r\n      if (quest.resourceMultipliers.length >= 12) {\r\n        resourceCentsFarmed[19] += (quest.resourceMultipliers[11] * rarity * skills[3] * multipliers[5]);\r\n      }\r\n      if (quest.resourceMultipliers.length >= 13) {\r\n        resourceCentsFarmed[20] += (quest.resourceMultipliers[12] * rarity * skills[3] * multipliers[5]);\r\n      }\r\n    }\r\n\r\n    for (uint i = 0; i < resourceCentsFarmed.length; i++) {\r\n      // we divide by day (/28800) and by percentage (/100) only at the end to avoid rounding errors\r\n      resourceBalances[squad.owner][i] += i < 19\r\n        ? resourceCentsFarmed[i] / 2880000\r\n        : (resourceCentsFarmed[i] / 2880000) / 50; // Cow Box and Elephant box have their farm divided by 50 (so 1 becomes 0.02)\r\n    }\r\n\r\n    // emit event\r\n    emit QuestEnded(squad.owner, squadId, currentQuestId, durationInBlocks);\r\n  }\r\n\r\n  function cancelQuestFor(uint256 squadId) external onlyRole(UPDATER_ROLE) {\r\n    IMhdaoSquad.Squad storage squad = squads[squadId];\r\n\r\n    // update the squad's current quest\r\n    squad.currentQuest = 0;\r\n    squad.questStartedAt = 0;\r\n  }\r\n\r\n  function addSquadToPlayer(address playerAddress, uint256 type_) public onlyRole(UPDATER_ROLE) returns (uint256) {\r\n    uint256 squadId = _createNewSquad(playerAddress, type_);\r\n    return squadId;\r\n  }\r\n\r\n  function increaseSquadSize(uint256 squadId) public onlyRole(UPDATER_ROLE) {\r\n    squads[squadId].size++;\r\n  }\r\n\r\n  function payWithBalance(\r\n    address account,\r\n    uint256 bctAmount,\r\n    uint256[] memory _resources\r\n  ) public onlyRole(UPDATER_ROLE) returns (uint256[] memory) {\r\n    IMhdaoPlayer.Player storage player = players[account];\r\n    uint256 totalBctBalance = player.etherealBct + player.bctToClaim;\r\n\r\n    // Pay BCT\r\n    uint256[] memory remaining = new uint256[](_resources.length + 1);\r\n    if (bctAmount <= player.etherealBct) {\r\n      _spendBct(account, bctAmount, true);\r\n      remaining[0] = 0;\r\n    } else if (bctAmount <= totalBctBalance) {\r\n      _spendBct(account, bctAmount - player.etherealBct, false);\r\n      _spendBct(account, player.etherealBct, true);\r\n      remaining[0] = 0;\r\n    } else {\r\n      _spendBct(account, player.etherealBct, true);\r\n      _spendBct(account, player.bctToClaim, false);\r\n      remaining[0] = bctAmount - totalBctBalance;\r\n    }\r\n\r\n    // Pay other _Resources\r\n    for (uint i = 0; i < _resources.length; i++) {\r\n      if (_resources[i] <= resourceBalances[account][i]) {\r\n        resourceBalances[account][i] -= _resources[i];\r\n        remaining[i + 1] = 0;\r\n      } else {\r\n        remaining[i + 1] = _resources[i] - resourceBalances[account][i];\r\n        resourceBalances[account][i] = 0;\r\n      }\r\n    }\r\n\r\n    return remaining;\r\n  }\r\n\r\n  function spendBctFrom(address account, uint256 amount, bool ethereal) public onlyRole(UPDATER_ROLE) {\r\n    _spendBct(account, amount, ethereal);\r\n  }\r\n\r\n  function transferInGameBctAndLootFrom(\r\n    address from,\r\n    address to,\r\n    uint256 bctAmount,\r\n    uint256[] memory _resources\r\n  ) public onlyRole(UPDATER_ROLE) {\r\n    _transferInGameBctAndLoot(from, to, bctAmount, _resources);\r\n  }\r\n\r\n  function recalculateSquadFarming(uint256 squadId) public onlyRole(UPDATER_ROLE) {\r\n    _recalculateSquadTraits(squadId);\r\n    _updateSquadFarming(squadId);\r\n  }\r\n\r\n  function addTo(address playerAddress, uint256 amount, uint256[] memory _resources) external onlyRole(UPDATER_ROLE) {\r\n    players[playerAddress].etherealBct += amount;\r\n    for (uint i = 0; i < _resources.length; i++) {\r\n      resourceBalances[playerAddress][i] += _resources[i];\r\n    }\r\n  }\r\n\r\n  function setSquadType(uint256 squadId, uint256 type_) external onlyRole(UPDATER_ROLE) {\r\n    squads[squadId].type_ = type_;\r\n  }\r\n\r\n  function setSquadTrait(uint256 squadId, uint256 squadTrait) external onlyRole(UPDATER_ROLE) {\r\n    squads[squadId].squadTrait = squadTrait;\r\n  }\r\n\r\n  function burnBct(uint256 amount) external onlyRole(UPDATER_ROLE) {\r\n    _burnBct(amount);\r\n  }\r\n\r\n  function _burnBct(uint256 amount) internal {\r\n    uint256 totalBalance = contracts.bct.balanceOf(address(this));\r\n\r\n    if (totalBalance > amount) {\r\n      contracts.bct.burn(amount);\r\n\r\n      emit BurnBct(amount);\r\n    }\r\n  }\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 bct,\r\n    uint256 eBct,\r\n    uint256[] memory _resources\r\n  ) public whenNotPaused onlyRole(UPDATER_ROLE) {\r\n    _transferInGameBctAndLoot(from, to, bct, _resources);\r\n\r\n    if (eBct > 0) {\r\n      transferEbct(from, to, eBct);\r\n    }\r\n  }\r\n\r\n  //################\r\n  // Internal/private functions\r\n  function _createNewSquad(address playerAddress, uint256 type_) internal returns (uint256) {\r\n    uint256[] storage playerSquads = players[playerAddress].squads;\r\n    require(playerSquads.length < config.maxSquads);\r\n\r\n    uint256 squadId = totalSquads + 1;\r\n    playerSquads.push(squadId);\r\n\r\n    uint256 squadBonus = playerSquads.length < 4 ? 0 : (playerSquads.length - 4) * 5;\r\n\r\n    squads[squadId] = IMhdaoSquad.Squad({\r\n      owner: playerAddress,\r\n      type_: type_,\r\n      size: 3,\r\n      baseFarmPerBlock: 0,\r\n      synergyBonus: 0,\r\n      squadBonus: squadBonus,\r\n      squadTrait: 0,\r\n      farmPerBlock: 0,\r\n      currentQuest: 0,\r\n      questStartedAt: 0,\r\n      questEndsAt: 0,\r\n      nftIds: new uint256[](0),\r\n      traits: new uint256[](0),\r\n      collections: new uint256[](0)\r\n    });\r\n\r\n    totalSquads++;\r\n\r\n    return squadId;\r\n  }\r\n\r\n  function _updateSquadFarming(uint256 squadId) internal whenNotPaused {\r\n    IMhdaoSquad.Squad storage squad = squads[squadId];\r\n    require(squad.currentQuest == 0, \"onQ\");\r\n\r\n    // update the squad's synergy bonus and farm per block\r\n    squad.baseFarmPerBlock = calculateSquadBaseFarmPerBlock(squadId);\r\n    squad.synergyBonus = calculateTraitSynergy(squad.traits, squad.squadTrait);\r\n    squad.synergyBonus += calculateTraitSynergy(squad.collections, 0);\r\n    squad.farmPerBlock = calculateSquadFarmPerBlock(squadId);\r\n  }\r\n\r\n  function _recalculateSquadTraits(uint256 squadId) internal whenNotPaused {\r\n    IMhdaoSquad.Squad storage squad = squads[squadId];\r\n\r\n    squad.traits = new uint256[](0);\r\n    for (uint256 i = 0; i < squad.nftIds.length; i++) {\r\n      uint256[] memory traits = contracts.mhdaoNFT.traitsOf(squad.nftIds[i]);\r\n      for (uint256 j = 0; j < traits.length; j++) {\r\n        squad.traits.push(traits[j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _isAllowedToEnter(uint256 type_, uint256 squadId) internal view returns (bool) {\r\n    uint256 squadType = squads[squadId].type_;\r\n    return (type_ == squadType || squadType == 6 || type_ >= 6);\r\n  }\r\n\r\n  function _transferInGameBctAndLoot(address from, address to, uint256 amount, uint256[] memory _resources) private {\r\n    players[from].bctToClaim -= amount; // will revert if negative\r\n    players[to].bctToClaim += amount;\r\n\r\n    for (uint i = 0; i < _resources.length; i++) {\r\n      if (_resources[i] > 0) {\r\n        resourceBalances[from][i] -= _resources[i];\r\n        resourceBalances[to][i] += _resources[i];\r\n      }\r\n    }\r\n\r\n    emit InGameResourceTransfer(from, to, amount);\r\n  }\r\n\r\n  function _spendBct(address account, uint256 amount, bool ethereal) private {\r\n    if (ethereal) {\r\n      players[account].etherealBct -= amount;\r\n      if (config.burnInGameEbctBalance) {\r\n        _burnBct(amount / 4);\r\n      }\r\n    } else {\r\n      players[account].bctToClaim -= amount;\r\n      if (config.burnInGameBctBalance) {\r\n        _burnBct(amount / 4);\r\n      }\r\n    }\r\n  }\r\n\r\n  //################\r\n  // OPERATOR functions\r\n  function pause() external onlyRole(OPERATOR_ROLE) {\r\n    _pause();\r\n  }\r\n\r\n  function unpause() external onlyRole(OPERATOR_ROLE) {\r\n    _unpause();\r\n  }\r\n\r\n  function setQuests(uint256[] memory questIds, IMhdaoQuest.Quest[] memory quests_) public onlyRole(OPERATOR_ROLE) {\r\n    for (uint256 i = 0; i < quests_.length; i++) {\r\n      quests[questIds[i]] = quests_[i];\r\n    }\r\n  }\r\n\r\n  function setScale(uint256 _scale) external onlyRole(OPERATOR_ROLE) {\r\n    config.scale = _scale;\r\n  }\r\n\r\n  function setResources(address[] calldata resourcesAddresses) public onlyRole(OPERATOR_ROLE) {\r\n    for (uint256 i = 0; i < resourcesAddresses.length; i++) {\r\n      resources[i] = resourcesAddresses[i];\r\n    }\r\n\r\n    totalResourcesRegistered = resourcesAddresses.length;\r\n  }\r\n\r\n  function approveBctSpending(address to, uint256 amount) external onlyRole(OPERATOR_ROLE) {\r\n    contracts.bct.approve(to, amount);\r\n  }\r\n\r\n  function setQuestRewardsCalculator(address questRewardsCalculator_) external onlyRole(OPERATOR_ROLE) {\r\n    contracts.questRewardCalculator = IQuestRewardCalculator(questRewardsCalculator_);\r\n  }\r\n\r\n  function addBctToClaim(address playerAddress, uint256 amount) external onlyRole(OPERATOR_ROLE) {\r\n    players[playerAddress].bctToClaim += amount;\r\n  }\r\n\r\n  //################\r\n  // Public view/pure functions\r\n  function calculateSquadBaseFarmPerBlock(uint256 squadId) public view returns (uint256) {\r\n    IMhdaoSquad.Squad memory squad = squads[squadId];\r\n    uint256 baseFarmPerBlock = 0;\r\n\r\n    // sum the base farm of each NFT that is in this squad\r\n    for (uint256 i = 0; i < squad.nftIds.length; i++) {\r\n      baseFarmPerBlock += contracts.mhdaoNFT.farmPerBlockOf(squad.nftIds[i]);\r\n    }\r\n\r\n    return baseFarmPerBlock;\r\n  }\r\n\r\n  function calculateTraitSynergy(uint256[] memory traits, uint256 extraTrait) public pure returns (uint256) {\r\n    uint256 highestTrait = 0;\r\n    for (uint256 i = 0; i < traits.length; i++) {\r\n      if (traits[i] > highestTrait) {\r\n        highestTrait = traits[i];\r\n      }\r\n    }\r\n\r\n    if (extraTrait > highestTrait) {\r\n      highestTrait = extraTrait;\r\n    }\r\n\r\n    uint256[] memory _tempTraits = new uint256[](highestTrait + 1);\r\n\r\n    for (uint256 i = 0; i < traits.length; i++) {\r\n      _tempTraits[traits[i]]++;\r\n    }\r\n\r\n    if (extraTrait != 0) {\r\n      _tempTraits[extraTrait]++;\r\n    }\r\n\r\n    uint256 synergy = 0;\r\n    for (uint256 i = 0; i <= highestTrait; i++) {\r\n      if (_tempTraits[i] > 1) {\r\n        if (_tempTraits[i] > 6) {\r\n          _tempTraits[i] = 6;\r\n        }\r\n        synergy += _tempTraits[i] ** 2;\r\n      }\r\n    }\r\n    return synergy * 10;\r\n  }\r\n\r\n  function calculateSquadFarmPerBlock(uint256 squadId) public view returns (uint256) {\r\n    IMhdaoSquad.Squad storage squad = squads[squadId];\r\n\r\n    // Multiply the base farm by the synergy bonus and add that to the base farm\r\n    uint256 farming = squad.baseFarmPerBlock + (squad.baseFarmPerBlock * squad.synergyBonus) / 100;\r\n\r\n    // Apply the squad bonus\r\n    farming = farming + (farming * squad.squadBonus) / 100;\r\n\r\n    return farming;\r\n  }\r\n\r\n  function getSquad(uint256 squadId) public view returns (IMhdaoSquad.Squad memory) {\r\n    IMhdaoSquad.Squad memory squad = squads[squadId];\r\n\r\n    return squad;\r\n  }\r\n\r\n  function squadsOf(address playerAddress) public view returns (IMhdaoSquad.Squad[] memory) {\r\n    uint totalPlayerSquads = players[playerAddress].squads.length;\r\n    IMhdaoSquad.Squad[] memory playerSquads = new IMhdaoSquad.Squad[](totalPlayerSquads);\r\n    for (uint i = 0; i < totalPlayerSquads; i++) {\r\n      playerSquads[i] = getSquad(players[playerAddress].squads[i]);\r\n    }\r\n\r\n    return playerSquads;\r\n  }\r\n\r\n  function isSquadOnQuest(uint256 squadId) public view returns (bool) {\r\n    return squads[squadId].currentQuest > 0;\r\n  }\r\n\r\n  function getPlayer(address playerAddress) public view returns (IMhdaoPlayer.Player memory) {\r\n    IMhdaoPlayer.Player memory player = players[playerAddress];\r\n\r\n    return player;\r\n  }\r\n\r\n  function getQuest(uint256 questId) public view returns (IMhdaoQuest.Quest memory) {\r\n    IMhdaoQuest.Quest memory quest = quests[questId];\r\n\r\n    return quest;\r\n  }\r\n\r\n  function mentorOf(address playerAddress) public view returns (address mentor, uint256 mentorLevel) {\r\n    mentor = players[playerAddress].mentor;\r\n    return (mentor, players[mentor].mentorLevel);\r\n  }\r\n\r\n  function balancesOf(address playerAddress) public view returns (uint256[] memory) {\r\n    IMhdaoPlayer.Player memory player = players[playerAddress];\r\n    uint256[] memory balances = new uint256[](totalResourcesRegistered + 1);\r\n\r\n    balances[0] = player.bctToClaim + player.etherealBct;\r\n\r\n    for (uint256 i = 0; i < totalResourcesRegistered; i++) {\r\n      balances[i + 1] = resourceBalances[playerAddress][i];\r\n    }\r\n\r\n    return balances;\r\n  }\r\n\r\n  function singleBalanceOf(address playerAddress, uint256 resourceId) public view returns (uint256) {\r\n    return resourceBalances[playerAddress][resourceId];\r\n  }\r\n\r\n  function bctBalanceOf(address playerAddress) public view returns (uint256) {\r\n    return players[playerAddress].bctToClaim;\r\n  }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnBct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InGameResourceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PlayerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"QuestEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"farmPerBlock\",\"type\":\"uint256\"}],\"name\":\"QuestStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBctToClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"}],\"name\":\"addSquadToPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_resources\",\"type\":\"uint256[]\"}],\"name\":\"addTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"}],\"name\":\"addToSquad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveBctSpending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"balancesOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"bctBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnBct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"}],\"name\":\"calculateSquadBaseFarmPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"}],\"name\":\"calculateSquadFarmPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"traits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"extraTrait\",\"type\":\"uint256\"}],\"name\":\"calculateTraitSynergy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"}],\"name\":\"cancelQuestFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"changeMentorBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"}],\"name\":\"clearSquad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFeePct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSquads\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mentorDivider\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burnInGameBctBalance\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"burnInGameEbctBalance\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"contract MHIERC20\",\"name\":\"bct\",\"type\":\"address\"},{\"internalType\":\"contract IMhdaoNft\",\"name\":\"mhdaoNFT\",\"type\":\"address\"},{\"internalType\":\"contract IPlayerBonus\",\"name\":\"playerBonus\",\"type\":\"address\"},{\"internalType\":\"contract IQuestRewardCalculator\",\"name\":\"questRewardCalculator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"}],\"name\":\"finishQuestFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bctToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"etherealBct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawalBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mentor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mentorLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"merchantLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"squads\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IMhdaoPlayer.Player\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"}],\"name\":\"getQuest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSynergyMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bctPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"etherealPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceMultipliers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"traits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collections\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"anyCollection\",\"type\":\"bool\"}],\"internalType\":\"struct IMhdaoQuest.Quest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"}],\"name\":\"getSquad\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseFarmPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"synergyBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadTrait\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"farmPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentQuest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"questStartedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"questEndsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"traits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collections\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IMhdaoSquad.Squad\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"}],\"name\":\"increaseSquadSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bct\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mhdaoNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_playerBonus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_questRewardCalculator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"}],\"name\":\"isSquadOnQuest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"mentorOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mentor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mentorLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextHalvingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bctAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_resources\",\"type\":\"uint256[]\"}],\"name\":\"payWithBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bctToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"etherealBct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawalBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mentor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mentorLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"merchantLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSynergyMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bctPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"etherealPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"anyCollection\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raritySumOfSquad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"}],\"name\":\"recalculateSquadFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mentor\",\"type\":\"address\"}],\"name\":\"registerPlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"}],\"name\":\"removeFromSquad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resourceBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"questRewardsCalculator_\",\"type\":\"address\"}],\"name\":\"setQuestRewardsCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"questIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSynergyMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bctPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"etherealPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"resourceMultipliers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"traits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collections\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"anyCollection\",\"type\":\"bool\"}],\"internalType\":\"struct IMhdaoQuest.Quest[]\",\"name\":\"quests_\",\"type\":\"tuple[]\"}],\"name\":\"setQuests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"resourcesAddresses\",\"type\":\"address[]\"}],\"name\":\"setResources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scale\",\"type\":\"uint256\"}],\"name\":\"setScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadTrait\",\"type\":\"uint256\"}],\"name\":\"setSquadTrait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"}],\"name\":\"setSquadType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resourceId\",\"type\":\"uint256\"}],\"name\":\"singleBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ethereal\",\"type\":\"bool\"}],\"name\":\"spendBctFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"squads\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseFarmPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"synergyBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadTrait\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"farmPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentQuest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"questStartedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"questEndsAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"squadsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseFarmPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"synergyBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"squadTrait\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"farmPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentQuest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"questStartedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"questEndsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"traits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"collections\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IMhdaoSquad.Squad[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"squadId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"questId\",\"type\":\"uint256\"}],\"name\":\"startQuestFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSquads\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eBct\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_resources\",\"type\":\"uint256[]\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferEbct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eBct\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_resources\",\"type\":\"uint256[]\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bctAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_resources\",\"type\":\"uint256[]\"}],\"name\":\"transferInGameBctAndLootFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BkFarmV18", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4ebf7c8a169ebc70d3bcff456dcaa0b6a98b83a5372e43de03024cba3b6b45a5"}