{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Points.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Points is Ownable {\\n    uint256 public MAX_TOTAL_ITEM_POINT = 5000;\\n    uint256 public MAX_TOTAL_CHARACTER_POINT = 1000;\\n    uint256 public MAX_TOTAL_LAND_POINT = 100;\\n\\n    uint256 public totalItemPoints = 0;\\n    uint256 public totalCharacterPoints = 0;\\n    uint256 public totalLandPoints = 0;\\n    mapping(address => uint256) public itemPoints;\\n    mapping(address => uint256) public characterPoints;\\n    mapping(address => uint256) public landPoints;\\n    mapping(address => mapping(address => uint256)) public itemAllowances;\\n    mapping(address => mapping(address => uint256)) public characterAllowances;\\n    mapping(address => mapping(address => uint256)) public landAllowances;\\n\\n    /**\\n     * @dev Emitted when item points of `_itemPoints`, character points of\\n     * `_characterPoints` and land points of `_landPoints` are moved from\\n     * one account (`from`) to another (`to`).\\n     */\\n    event TransferPoints(\\n        address indexed from,\\n        address indexed to,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    );\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set\\n     * by a call to {approvePoints}. The item points of `_itemPoints`, character\\n     * points of `_characterPoints` and land points of `_landPoints` are the\\n     * new allowance.\\n     */\\n    event ApprovalPoints(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    );\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev Return total points.\\n     */\\n    function totalPoints() public view returns (uint256[3] memory) {\\n        uint256[3] memory _totalPoints;\\n        _totalPoints = [totalItemPoints, totalCharacterPoints, totalLandPoints];\\n        return _totalPoints;\\n    }\\n\\n    /**\\n     * @dev Return total points of account.\\n     */\\n    function pointsOf(address account) public view returns (uint256[3] memory) {\\n        uint256[3] memory _totalPointsOfAccount;\\n        _totalPointsOfAccount = [\\n            itemPoints[account],\\n            characterPoints[account],\\n            landPoints[account]\\n        ];\\n        return _totalPointsOfAccount;\\n    }\\n\\n    /**\\n     * @dev Transfer item points of `_itemPoints`, character points of `_characterPoints`\\n     * and land points of `_landPoints` from one account (`owner`) to another account (`to`).\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have at least item points of `_itemPoints`, character points of\\n     *  `_characterPoints` and land points of `_landPoints`.\\n     */\\n    function transferPoints(\\n        address to,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    ) public returns (bool) {\\n        address owner = _msgSender();\\n        _transferPoints(owner, to, _itemPoints, _characterPoints, _landPoints);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the remaining number of item points, character points and land\\n     * points that `spender` will be allowed to spend on behalf of `owner` through\\n     * {transferFrom}. This is zero by default.\\n     *\\n     * This value changes when {approvePoints} or {transferFrom} are called.\\n     */\\n    function allowancePoints(address owner, address spender)\\n        public\\n        view\\n        returns (uint256[3] memory)\\n    {\\n        uint256[3] memory allowances;\\n        allowances = [\\n            itemAllowances[owner][spender],\\n            characterAllowances[owner][spender],\\n            landAllowances[owner][spender]\\n        ];\\n        return allowances;\\n    }\\n\\n    /**\\n     * @dev Sets item points of `_itemPoints`, character points of `_characterPoints`\\n     * and land points of `_landPoints` as the allowance of `spender` over the caller's points.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits an {ApprovalPoints} event.\\n     */\\n    function approvePoints(\\n        address spender,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    ) public returns (bool) {\\n        address owner = _msgSender();\\n        _approvePoints(owner, spender, _itemPoints, _characterPoints, _landPoints);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `_itemPoints`, `_characterPoints` and `_landPoints` from `from` to `to`\\n     * using the allowance mechanism. `_itemPoints`, `_characterPoints` and `_landPoints`\\n     * is then deducted from the caller's allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {TransferPoints} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    ) public returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowancePoints(from, spender, _itemPoints, _characterPoints, _landPoints);\\n        _transferPoints(from, to, _itemPoints, _characterPoints, _landPoints);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `_itemPoints`, `_characterPoints` and `_landPoints` from `from` to `to`.\\n     *\\n     * Emits a {TransferPoints} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have item points of `_itemPoints`, character points of `_characterPoints`\\n     * and land points of `_landPoints` at least.\\n     */\\n    function _transferPoints(\\n        address from,\\n        address to,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    ) internal {\\n        require(from != address(0), \\\"transfer from the zero address\\\");\\n        require(to != address(0), \\\"transfer to the zero address\\\");\\n\\n        uint256 fromItemPoints = itemPoints[from];\\n        uint256 fromCharacterPoints = characterPoints[from];\\n        uint256 fromLandPoints = landPoints[from];\\n        require(\\n            fromItemPoints >= _itemPoints,\\n            \\\"transfer item points exceeds item points of account\\\"\\n        );\\n        require(\\n            fromCharacterPoints >= _characterPoints,\\n            \\\"transfer character points exceeds character points of account\\\"\\n        );\\n        require(\\n            fromLandPoints >= _landPoints,\\n            \\\"transfer land points exceeds land points of account\\\"\\n        );\\n\\n        itemPoints[from] = fromItemPoints - _itemPoints;\\n        itemPoints[to] += _itemPoints;\\n        characterPoints[from] = fromCharacterPoints - _characterPoints;\\n        characterPoints[to] += _characterPoints;\\n        landPoints[from] = fromLandPoints - _landPoints;\\n        landPoints[to] += _landPoints;\\n\\n        emit TransferPoints(from, to, _itemPoints, _characterPoints, _landPoints);\\n    }\\n\\n    /** @dev Creates `_itemPoints`, `_characterPoints` and `_landPoints`, and assigns\\n     * them to `account`, increasing the total points.\\n     *\\n     * Emits a {TransferPoints} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function mintPoints(\\n        address account,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    ) external onlyOwner {\\n        require(account != address(0), \\\"mint to the zero address\\\");\\n\\n        require(totalItemPoints + _itemPoints <= MAX_TOTAL_ITEM_POINT, \\\"Max item supply overflow\\\");\\n        require(\\n            totalCharacterPoints + _characterPoints <= MAX_TOTAL_CHARACTER_POINT,\\n            \\\"Max character supply overflow\\\"\\n        );\\n        require(totalLandPoints + _landPoints <= MAX_TOTAL_LAND_POINT, \\\"Max land supply overflow\\\");\\n\\n        totalItemPoints += _itemPoints;\\n        totalCharacterPoints += _characterPoints;\\n        totalLandPoints += _landPoints;\\n        itemPoints[account] += _itemPoints;\\n        characterPoints[account] += _characterPoints;\\n        landPoints[account] += _landPoints;\\n\\n        emit TransferPoints(address(0), account, _itemPoints, _characterPoints, _landPoints);\\n    }\\n\\n    /**\\n     * @dev Destroys `_itemPoints`, `_characterPoints` and `_landPoints` from `account`,\\n     * reducing the total points.\\n     *\\n     * Emits a {TransferPoints} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least item points of `_itemPoints`, character points\\n     * of `_characterPoints` and land points of `_landPoints`.\\n     */\\n    function burnPoints(\\n        address account,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    ) external onlyOwner {\\n        require(account != address(0), \\\"burn from the zero address\\\");\\n\\n        uint256 itemPointsOfAccount = itemPoints[account];\\n        uint256 characterPointsOfAccount = characterPoints[account];\\n        uint256 landPointsOfAccount = landPoints[account];\\n        require(\\n            itemPointsOfAccount >= _itemPoints,\\n            \\\"burn item points exceeds item points of account\\\"\\n        );\\n        require(\\n            characterPointsOfAccount >= _characterPoints,\\n            \\\"burn character points exceeds character points of account\\\"\\n        );\\n        require(\\n            landPointsOfAccount >= _landPoints,\\n            \\\"burn land points exceeds land points of account\\\"\\n        );\\n\\n        itemPoints[account] = itemPointsOfAccount - _itemPoints;\\n        characterPoints[account] = characterPointsOfAccount - _characterPoints;\\n        landPoints[account] = landPointsOfAccount - _landPoints;\\n        totalItemPoints -= _itemPoints;\\n        totalCharacterPoints -= _characterPoints;\\n        totalLandPoints -= _landPoints;\\n\\n        emit TransferPoints(account, address(0), _itemPoints, _characterPoints, _landPoints);\\n    }\\n\\n    /**\\n     * @dev Sets  `_itemPoints`, `_characterPoints` and `_landPoints` as the allowance\\n     * of `spender` over the `owner` s points.\\n     *\\n     * Emits an {ApprovalPoints} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approvePoints(\\n        address owner,\\n        address spender,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    ) internal {\\n        require(owner != address(0), \\\"approve from the zero address\\\");\\n        require(spender != address(0), \\\"approve to the zero address\\\");\\n\\n        itemAllowances[owner][spender] = _itemPoints;\\n        characterAllowances[owner][spender] = _characterPoints;\\n        landAllowances[owner][spender] = _landPoints;\\n\\n        emit ApprovalPoints(owner, spender, _itemPoints, _characterPoints, _landPoints);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `_itemPoints`,\\n     * `_characterPoints` and `_landPoints`.\\n     *\\n     * Might emit an {ApprovalPoints} event.\\n     */\\n    function _spendAllowancePoints(\\n        address owner,\\n        address spender,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    ) internal {\\n        _approvePoints(owner, spender, _itemPoints, _characterPoints, _landPoints);\\n        uint256[3] memory currentAllowance = allowancePoints(owner, spender);\\n        require(currentAllowance[0] >= _itemPoints, \\\"insufficient item points allowance\\\");\\n        require(currentAllowance[1] >= _characterPoints, \\\"insufficient character points allowance\\\");\\n        require(currentAllowance[2] >= _landPoints, \\\"insufficient land points allowance\\\");\\n\\n        uint256 allowanceItemPoints = currentAllowance[0] - _itemPoints;\\n        uint256 allowanceCharacterPoints = currentAllowance[1] - _characterPoints;\\n        uint256 allowanceLandPoints = currentAllowance[2] - _landPoints;\\n        _approvePoints(\\n            owner,\\n            spender,\\n            allowanceItemPoints,\\n            allowanceCharacterPoints,\\n            allowanceLandPoints\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_itemPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_characterPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_landPoints\",\"type\":\"uint256\"}],\"name\":\"ApprovalPoints\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_itemPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_characterPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_landPoints\",\"type\":\"uint256\"}],\"name\":\"TransferPoints\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_CHARACTER_POINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_ITEM_POINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_LAND_POINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowancePoints\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_characterPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_landPoints\",\"type\":\"uint256\"}],\"name\":\"approvePoints\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_characterPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_landPoints\",\"type\":\"uint256\"}],\"name\":\"burnPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"characterAllowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"characterPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"itemAllowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"itemPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"landAllowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"landPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_characterPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_landPoints\",\"type\":\"uint256\"}],\"name\":\"mintPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pointsOf\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCharacterPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalItemPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLandPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPoints\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_characterPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_landPoints\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_characterPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_landPoints\",\"type\":\"uint256\"}],\"name\":\"transferPoints\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Points", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}