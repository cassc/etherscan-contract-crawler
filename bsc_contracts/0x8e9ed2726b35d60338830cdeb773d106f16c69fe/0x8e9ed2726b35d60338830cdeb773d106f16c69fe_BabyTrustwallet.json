{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^\r\n0.7\r\n.4\r\n;\r\nlibrary SafeMath {\r\n    \r\nfunction\r\n \r\nadd\r\n(\r\nuint256 a, uint256 b\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        uint256 c = a + b;\r\n        \r\nrequire\r\n(c >= a, \r\n\"SafeMath: addition overflow\"\r\n);\r\n        \r\nreturn\r\n c;\r\n    }\r\n    \r\nfunction\r\n \r\nsub\r\n(\r\nuint256 a, uint256 b\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nreturn\r\n sub(a, b, \r\n\"SafeMath: subtraction overflow\"\r\n);\r\n    }\r\n    \r\nfunction\r\n \r\nsub\r\n(\r\nuint256 a, uint256 b, string memory errorMessage\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nrequire\r\n(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        \r\nreturn\r\n c;\r\n    }\r\n    \r\nfunction\r\n \r\nmul\r\n(\r\nuint256 a, uint256 b\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nif\r\n (a == \r\n0\r\n) {\r\n            \r\nreturn\r\n \r\n0\r\n;\r\n        }\r\n        uint256 c = a * b;\r\n        \r\nrequire\r\n(c / a == b, \r\n\"SafeMath: multiplication overflow\"\r\n);\r\n        \r\nreturn\r\n c;\r\n    }\r\n    \r\nfunction\r\n \r\ndiv\r\n(\r\nuint256 a, uint256 b\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nreturn\r\n div(a, b, \r\n\"SafeMath: division by zero\"\r\n);\r\n    }\r\n    \r\nfunction\r\n \r\ndiv\r\n(\r\nuint256 a, uint256 b, string memory errorMessage\r\n) \r\ninternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\n// Solidity only automatically asserts when dividing by 0\r\n\r\n        \r\nrequire\r\n(b > \r\n0\r\n, errorMessage);\r\n        uint256 c = a / b;\r\n        \r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        \r\nreturn\r\n c;\r\n    }\r\n}\r\n/**\r\n * BEP20 standard interface.\r\n */\r\n\r\ninterface IBEP20 {\r\n    \r\nfunction\r\n \r\ntotalSupply\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ndecimals\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint8\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nsymbol\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nstring memory\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nname\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nstring memory\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ngetOwner\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\naddress\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nbalanceOf\r\n(\r\naddress account\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ntransfer\r\n(\r\naddress recipient, uint256 amount\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nallowance\r\n(\r\naddress _owner, address spender\r\n) \r\nexternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n)\r\n;\r\n    \r\nfunction\r\n \r\napprove\r\n(\r\naddress spender, uint256 amount\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n)\r\n;\r\n    \r\nfunction\r\n \r\ntransferFrom\r\n(\r\naddress sender, address recipient, uint256 amount\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n)\r\n;\r\n    event Transfer(address indexed \r\nfrom\r\n, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * Allows for contract ownership along with multi-address authorization\r\n */\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (\r\naddress\r\n =>\r\n bool) internal authorizations;\r\n    \r\nconstructor\r\n(\r\naddress _owner\r\n)\r\n {\r\n        owner = _owner;\r\n        authorizations[_owner] = \r\ntrue\r\n;\r\n    }\r\n    \r\n/**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n\r\n    modifier \r\nonlyOwner\r\n(\r\n)\r\n {\r\n        \r\nrequire\r\n(isOwner(msg.sender), \r\n\"!OWNER\"\r\n); _;\r\n    }\r\n    \r\n/**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n\r\n    modifier \r\nauthorized\r\n(\r\n)\r\n {\r\n        \r\nrequire\r\n(isAuthorized(msg.sender), \r\n\"!AUTHORIZED\"\r\n); _;\r\n    }\r\n    \r\n/**\r\n     * Authorize address. Owner only\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nauthorize\r\n(\r\naddress adr\r\n) \r\npublic\r\n \r\nonlyOwner\r\n \r\n{\r\n        authorizations[adr] = \r\ntrue\r\n;\r\n    }\r\n    \r\n/**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nunauthorize\r\n(\r\naddress adr\r\n) \r\npublic\r\n \r\nonlyOwner\r\n \r\n{\r\n        authorizations[adr] = \r\nfalse\r\n;\r\n    }\r\n    \r\n/**\r\n     * Check if address is owner\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nisOwner\r\n(\r\naddress account\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        \r\nreturn\r\n account == owner;\r\n    }\r\n    \r\n/**\r\n     * Return address' authorization status\r\n     */\r\n\r\n    \r\nfunction\r\n \r\nisAuthorized\r\n(\r\naddress adr\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        \r\nreturn\r\n authorizations[adr];\r\n    }\r\n    \r\n/**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n\r\n    \r\nfunction\r\n \r\ntransferOwnership\r\n(\r\naddress payable adr\r\n) \r\npublic\r\n \r\nonlyOwner\r\n \r\n{\r\n        owner = adr;\r\n        authorizations[adr] = \r\ntrue\r\n;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n    event OwnershipTransferred(address owner);\r\n}\r\ninterface IDEXFactory {\r\n    \r\nfunction\r\n \r\ncreatePair\r\n(\r\naddress tokenA, address tokenB\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\naddress pair\r\n)\r\n;\r\n}\r\ninterface IDEXRouter {\r\n    \r\nfunction\r\n \r\nfactory\r\n(\r\n) \r\nexternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\naddress\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nWETH\r\n(\r\n) \r\nexternal\r\n \r\npure\r\n \r\nreturns\r\n (\r\naddress\r\n)\r\n;\r\n    \r\nfunction\r\n \r\naddLiquidity\r\n(\r\n\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nuint amountA, uint amountB, uint liquidity\r\n)\r\n;\r\n    \r\nfunction\r\n \r\naddLiquidityETH\r\n(\r\n\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n \r\npayable\r\n \r\nreturns\r\n (\r\nuint amountToken, uint amountETH, uint liquidity\r\n)\r\n;\r\n    \r\nfunction\r\n \r\nswapExactTokensForTokensSupportingFeeOnTransferTokens\r\n(\r\n\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n;\r\n    \r\nfunction\r\n \r\nswapExactETHForTokensSupportingFeeOnTransferTokens\r\n(\r\n\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n \r\npayable\r\n;\r\n    \r\nfunction\r\n \r\nswapExactTokensForETHSupportingFeeOnTransferTokens\r\n(\r\n\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    \r\n) \r\nexternal\r\n;\r\n}\r\ninterface IDividendDistributor {\r\n    \r\nfunction\r\n \r\nsetDistributionCriteria\r\n(\r\nuint256 _minPeriod, uint256 _minDistribution\r\n) \r\nexternal\r\n;\r\n    \r\nfunction\r\n \r\nsetShare\r\n(\r\naddress shareholder, uint256 amount\r\n) \r\nexternal\r\n;\r\n    \r\nfunction\r\n \r\ndeposit\r\n(\r\n) \r\nexternal\r\n \r\npayable\r\n;\r\n    \r\nfunction\r\n \r\nprocess\r\n(\r\nuint256 gas\r\n) \r\nexternal\r\n;\r\n}\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath \r\nfor\r\n uint256;\r\n    address _token;\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n    IBEP20 TWT = IBEP20(\r\n0x4B0F1812e5Df2A09796481Ff14017e6005508003\r\n);\r\n    address WBNB = \r\n0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\r\n;\r\n    IDEXRouter router;\r\n    address[] shareholders;\r\n    mapping (\r\naddress\r\n =>\r\n uint256) shareholderIndexes;\r\n    mapping (\r\naddress\r\n =>\r\n uint256) shareholderClaims;\r\n    mapping (\r\naddress\r\n =>\r\n Share) public shares;\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = \r\n10\r\n ** \r\n36\r\n;\r\n    \r\n//SETMEUP, change this to 1 hour instead of 10mins\r\n\r\n    uint256 public minPeriod = \r\n45\r\n minutes;\r\n    uint256 public minDistribution = \r\n1\r\n * (\r\n10\r\n ** \r\n18\r\n);\r\n    uint256 currentIndex;\r\n    bool initialized;\r\n    modifier \r\ninitialization\r\n(\r\n)\r\n {\r\n        \r\nrequire\r\n(!initialized);\r\n        _;\r\n        initialized = \r\ntrue\r\n;\r\n    }\r\n    modifier \r\nonlyToken\r\n(\r\n)\r\n {\r\n        \r\nrequire\r\n(msg.sender == _token); _;\r\n    }\r\n    \r\nconstructor\r\n (\r\naddress _router\r\n) {\r\n        router = _router != address(\r\n0\r\n)\r\n            ? IDEXRouter(_router)\r\n            : IDEXRouter(\r\n0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n);\r\n        _token = msg.sender;\r\n    }\r\n    \r\nfunction\r\n \r\nsetDistributionCriteria\r\n(\r\nuint256 _minPeriod, uint256 _minDistribution\r\n) \r\nexternal\r\n \r\noverride\r\n \r\nonlyToken\r\n \r\n{\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n    \r\nfunction\r\n \r\nsetShare\r\n(\r\naddress shareholder, uint256 amount\r\n) \r\nexternal\r\n \r\noverride\r\n \r\nonlyToken\r\n \r\n{\r\n        \r\nif\r\n(shares[shareholder].amount > \r\n0\r\n){\r\n            distributeDividend(shareholder);\r\n        }\r\n        \r\nif\r\n(amount > \r\n0\r\n && shares[shareholder].amount == \r\n0\r\n){\r\n            addShareholder(shareholder);\r\n        }\r\nelse\r\n \r\nif\r\n(amount == \r\n0\r\n && shares[shareholder].amount > \r\n0\r\n){\r\n            removeShareholder(shareholder);\r\n        }\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n    \r\nfunction\r\n \r\ndeposit\r\n(\r\n) \r\nexternal\r\n \r\npayable\r\n \r\noverride\r\n \r\nonlyToken\r\n \r\n{\r\n        uint256 balanceBefore = TWT.balanceOf(address(\r\nthis\r\n));\r\n        address[] memory path = \r\nnew\r\n address[](\r\n2\r\n);\r\n        path[\r\n0\r\n] = WBNB;\r\n        path[\r\n1\r\n] = address(TWT);\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\nvalue\r\n: msg.value}(\r\n            \r\n0\r\n,\r\n            path,\r\n            address(\r\nthis\r\n),\r\n            block.timestamp\r\n        );\r\n        uint256 amount = TWT.balanceOf(address(\r\nthis\r\n)).sub(balanceBefore);\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n    \r\nfunction\r\n \r\nprocess\r\n(\r\nuint256 gas\r\n) \r\nexternal\r\n \r\noverride\r\n \r\nonlyToken\r\n \r\n{\r\n        uint256 shareholderCount = shareholders.length;\r\n        \r\nif\r\n(shareholderCount == \r\n0\r\n) { \r\nreturn\r\n; }\r\n        uint256 gasUsed = \r\n0\r\n;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = \r\n0\r\n;\r\n        \r\nwhile\r\n(gasUsed < gas && iterations < shareholderCount) {\r\n            \r\nif\r\n(currentIndex >= shareholderCount){\r\n                currentIndex = \r\n0\r\n;\r\n            }\r\n            \r\nif\r\n(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    \r\nfunction\r\n \r\nshouldDistribute\r\n(\r\naddress shareholder\r\n) \r\ninternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        \r\nreturn\r\n shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n    \r\nfunction\r\n \r\ndistributeDividend\r\n(\r\naddress shareholder\r\n) \r\ninternal\r\n \r\n{\r\n        \r\nif\r\n(shares[shareholder].amount == \r\n0\r\n){ \r\nreturn\r\n; }\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        \r\nif\r\n(amount > \r\n0\r\n){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            TWT.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n    \r\nfunction\r\n \r\nclaimDividend\r\n(\r\n) \r\nexternal\r\n \r\n{\r\n        distributeDividend(msg.sender);\r\n    }\r\n    \r\nfunction\r\n \r\ngetUnpaidEarnings\r\n(\r\naddress shareholder\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nif\r\n(shares[shareholder].amount == \r\n0\r\n){ \r\nreturn\r\n \r\n0\r\n; }\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n        \r\nif\r\n(shareholderTotalDividends <= shareholderTotalExcluded){ \r\nreturn\r\n \r\n0\r\n; }\r\n        \r\nreturn\r\n shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n    \r\nfunction\r\n \r\ngetCumulativeDividends\r\n(\r\nuint256 share\r\n) \r\ninternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nreturn\r\n share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n    \r\nfunction\r\n \r\naddShareholder\r\n(\r\naddress shareholder\r\n) \r\ninternal\r\n \r\n{\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n    \r\nfunction\r\n \r\nremoveShareholder\r\n(\r\naddress shareholder\r\n) \r\ninternal\r\n \r\n{\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-\r\n1\r\n];\r\n        shareholderIndexes[shareholders[shareholders.length-\r\n1\r\n]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\ncontract BabyTrustwallet is IBEP20, Auth {\r\n    using SafeMath \r\nfor\r\n uint256;\r\n    address TWT = \r\n0x4B0F1812e5Df2A09796481Ff14017e6005508003\r\n;\r\n    address WBNB = \r\n0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\r\n;\r\n    address DEAD = \r\n0x000000000000000000000000000000000000dEaD\r\n;\r\n    address ZERO = \r\n0x0000000000000000000000000000000000000000\r\n;\r\n    string constant _name = \r\n\"BabyTrustwallet\"\r\n;\r\n    string constant _symbol = \r\n\"BTWT\"\r\n;\r\n    uint8 constant _decimals = \r\n4\r\n;\r\n    uint256 _totalSupply = \r\n1\r\n * \r\n10\r\n**\r\n9\r\n * (\r\n10\r\n ** _decimals);\r\n    uint256 public _maxTxAmount = _totalSupply * \r\n1\r\n / \r\n100\r\n;\r\n    \r\n//max wallet holding of 2% \r\n\r\n    uint256 public _maxWalletToken = ( _totalSupply * \r\n2\r\n ) / \r\n100\r\n;\r\n    mapping (\r\naddress\r\n =>\r\n uint256) _balances;\r\n    mapping (\r\naddress\r\n =>\r\n mapping (\r\naddress\r\n =>\r\n uint256)) _allowances;\r\n    mapping (\r\naddress\r\n =>\r\n bool) isFeeExempt;\r\n    mapping (\r\naddress\r\n =>\r\n bool) isTxLimitExempt;\r\n    mapping (\r\naddress\r\n =>\r\n bool) isTimelockExempt;\r\n    mapping (\r\naddress\r\n =>\r\n bool) isDividendExempt;\r\n    uint256 liquidityFee    = \r\n3\r\n;\r\n    uint256 reflectionFee   = \r\n9\r\n;\r\n    uint256 marketingFee    = \r\n6\r\n;\r\n    uint256 public totalFee = \r\n18\r\n;\r\n    uint256 feeDenominator  = \r\n100\r\n;\r\n    address public autoLiquidityReceiver;\r\n    address public marketingFeeReceiver;\r\n    uint256 targetLiquidity = \r\n20\r\n;\r\n    uint256 targetLiquidityDenominator = \r\n100\r\n;\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    uint256 public launchedAt;\r\n    bool public tradingOpen = \r\nfalse\r\n;\r\n    DividendDistributor distributor;\r\n    uint256 distributorGas = \r\n500000\r\n;\r\n    \r\n// Cooldown & timer functionality\r\n\r\n    bool public buyCooldownEnabled = \r\ntrue\r\n;\r\n    uint8 public cooldownTimerInterval = \r\n45\r\n;\r\n    mapping (\r\naddress\r\n =>\r\n uint) private cooldownTimer;\r\n    bool public swapEnabled = \r\ntrue\r\n;\r\n    uint256 public swapThreshold = _totalSupply * \r\n10\r\n / \r\n10000\r\n; \r\n// 0.01% of supply\r\n\r\n    bool inSwap;\r\n    modifier \r\nswapping\r\n(\r\n)\r\n { inSwap = \r\ntrue\r\n; _; inSwap = \r\nfalse\r\n; }\r\n    \r\nconstructor\r\n (\r\n) \r\nAuth\r\n(\r\nmsg.sender\r\n) {\r\n        router = IDEXRouter(\r\n0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n);\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(\r\nthis\r\n));\r\n        _allowances[address(\r\nthis\r\n)][address(router)] = uint256(-\r\n1\r\n);\r\n        distributor = \r\nnew\r\n DividendDistributor(address(router));\r\n        isFeeExempt[msg.sender] = \r\ntrue\r\n;\r\n        isTxLimitExempt[msg.sender] = \r\ntrue\r\n;\r\n        \r\n// No timelock for these people\r\n\r\n        isTimelockExempt[msg.sender] = \r\ntrue\r\n;\r\n        isTimelockExempt[DEAD] = \r\ntrue\r\n;\r\n        isTimelockExempt[address(\r\nthis\r\n)] = \r\ntrue\r\n;\r\n        \r\n// TO DO, manually whitelist this\r\n\r\n        \r\n//isFeeExempt[_presaleContract] = true;\r\n\r\n        \r\n//isTxLimitExempt[_presaleContract] = true;\r\n\r\n        \r\n//isDividendExempt[_presaleContract] = true;\r\n\r\n        isDividendExempt[pair] = \r\ntrue\r\n;\r\n        isDividendExempt[address(\r\nthis\r\n)] = \r\ntrue\r\n;\r\n        isDividendExempt[DEAD] = \r\ntrue\r\n;\r\n        \r\n// NICE!\r\n\r\n        autoLiquidityReceiver = DEAD;\r\n        marketingFeeReceiver = \r\n0x53492e1B0BeAf8C4bD51ffe5873e58Ce2a489fFF\r\n;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(\r\n0\r\n), msg.sender, _totalSupply);\r\n    }\r\n    receive() external payable { }\r\n    \r\nfunction\r\n \r\ntotalSupply\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{ \r\nreturn\r\n _totalSupply; }\r\n    \r\nfunction\r\n \r\ndecimals\r\n(\r\n) \r\nexternal\r\n \r\npure\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nuint8\r\n) \r\n{ \r\nreturn\r\n _decimals; }\r\n    \r\nfunction\r\n \r\nsymbol\r\n(\r\n) \r\nexternal\r\n \r\npure\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nstring memory\r\n) \r\n{ \r\nreturn\r\n _symbol; }\r\n    \r\nfunction\r\n \r\nname\r\n(\r\n) \r\nexternal\r\n \r\npure\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nstring memory\r\n) \r\n{ \r\nreturn\r\n _name; }\r\n    \r\nfunction\r\n \r\ngetOwner\r\n(\r\n) \r\nexternal\r\n \r\nview\r\n \r\noverride\r\n \r\nreturns\r\n (\r\naddress\r\n) \r\n{ \r\nreturn\r\n owner; }\r\n    \r\nfunction\r\n \r\nbalanceOf\r\n(\r\naddress account\r\n) \r\npublic\r\n \r\nview\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{ \r\nreturn\r\n _balances[account]; }\r\n    \r\nfunction\r\n \r\nallowance\r\n(\r\naddress holder, address spender\r\n) \r\nexternal\r\n \r\nview\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{ \r\nreturn\r\n _allowances[holder][spender]; }\r\n    \r\nfunction\r\n \r\napprove\r\n(\r\naddress spender, uint256 amount\r\n) \r\npublic\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        \r\nreturn\r\n \r\ntrue\r\n;\r\n    }\r\n    \r\nfunction\r\n \r\napproveMax\r\n(\r\naddress spender\r\n) \r\nexternal\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        \r\nreturn\r\n approve(spender, uint256(-\r\n1\r\n));\r\n    }\r\n    \r\nfunction\r\n \r\ntransfer\r\n(\r\naddress recipient, uint256 amount\r\n) \r\nexternal\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        \r\nreturn\r\n _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n    \r\nfunction\r\n \r\ntransferFrom\r\n(\r\naddress sender, address recipient, uint256 amount\r\n) \r\nexternal\r\n \r\noverride\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        \r\nif\r\n(_allowances[sender][msg.sender] != uint256(-\r\n1\r\n)){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \r\n\"Insufficient Allowance\"\r\n);\r\n        }\r\n        \r\nreturn\r\n _transferFrom(sender, recipient, amount);\r\n    }\r\n    \r\n//settting the maximum permitted wallet holding (percent of total supply)\r\n\r\n     \r\nfunction\r\n \r\nsetMaxWalletPercent\r\n(\r\nuint256 maxWallPercent\r\n) \r\nexternal\r\n \r\nonlyOwner\r\n(\r\n) \r\n{\r\n        _maxWalletToken = (_totalSupply * maxWallPercent ) / \r\n100\r\n;\r\n    }\r\n    \r\nfunction\r\n \r\n_transferFrom\r\n(\r\naddress sender, address recipient, uint256 amount\r\n) \r\ninternal\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        \r\nif\r\n(inSwap){ \r\nreturn\r\n _basicTransfer(sender, recipient, amount); }\r\n        \r\nif\r\n(!authorizations[sender] && !authorizations[recipient]){\r\n            \r\nrequire\r\n(tradingOpen,\r\n\"Trading not open yet\"\r\n);\r\n        }\r\n        \r\n// max wallet code\r\n\r\n        \r\nif\r\n (!authorizations[sender] && recipient != address(\r\nthis\r\n)  && recipient != address(DEAD) && recipient != pair && recipient != marketingFeeReceiver && recipient != autoLiquidityReceiver){\r\n            uint256 heldTokens = balanceOf(recipient);\r\n            \r\nrequire\r\n((heldTokens + amount) <= _maxWalletToken,\r\n\"Total Holding is currently limited, you can not buy that much.\"\r\n);}\r\n        \r\n// cooldown timer, so a bot doesnt do quick trades! 1min gap between 2 trades.\r\n\r\n        \r\nif\r\n (sender == pair &&\r\n            buyCooldownEnabled &&\r\n            !isTimelockExempt[recipient]) {\r\n            \r\nrequire\r\n(cooldownTimer[recipient] < block.timestamp,\r\n\"Please wait for cooldown between buys\"\r\n);\r\n            cooldownTimer[recipient] = block.timestamp + cooldownTimerInterval;\r\n        }\r\n        \r\n// Checks max transaction limit\r\n\r\n        checkTxLimit(sender, amount);\r\n        \r\n// Liquidity, Maintained at 25%\r\n\r\n        \r\nif\r\n(shouldSwapBack()){ swapBack(); }\r\n        \r\n//Exchange tokens\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \r\n\"Insufficient Balance\"\r\n);\r\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        \r\n// Dividend tracker\r\n\r\n        \r\nif\r\n(!isDividendExempt[sender]) {\r\n            \r\ntry\r\n distributor.setShare(sender, _balances[sender]) {} \r\ncatch\r\n {}\r\n        }\r\n        \r\nif\r\n(!isDividendExempt[recipient]) {\r\n            \r\ntry\r\n distributor.setShare(recipient, _balances[recipient]) {} \r\ncatch\r\n {} \r\n        }\r\n        \r\ntry\r\n distributor.process(distributorGas) {} \r\ncatch\r\n {}\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        \r\nreturn\r\n \r\ntrue\r\n;\r\n    }\r\n    \r\nfunction\r\n \r\n_basicTransfer\r\n(\r\naddress sender, address recipient, uint256 amount\r\n) \r\ninternal\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        _balances[sender] = _balances[sender].sub(amount, \r\n\"Insufficient Balance\"\r\n);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        \r\nreturn\r\n \r\ntrue\r\n;\r\n    }\r\n    \r\nfunction\r\n \r\ncheckTxLimit\r\n(\r\naddress sender, uint256 amount\r\n) \r\ninternal\r\n \r\nview\r\n \r\n{\r\n        \r\nrequire\r\n(amount <= _maxTxAmount || isTxLimitExempt[sender], \r\n\"TX Limit Exceeded\"\r\n);\r\n    }\r\n    \r\nfunction\r\n \r\nshouldTakeFee\r\n(\r\naddress sender\r\n) \r\ninternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        \r\nreturn\r\n !isFeeExempt[sender];\r\n    }\r\n    \r\nfunction\r\n \r\ntakeFee\r\n(\r\naddress sender, uint256 amount\r\n) \r\ninternal\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        uint256 feeAmount = amount.mul(totalFee).div(feeDenominator);\r\n        _balances[address(\r\nthis\r\n)] = _balances[address(\r\nthis\r\n)].add(feeAmount);\r\n        emit Transfer(sender, address(\r\nthis\r\n), feeAmount);\r\n        \r\nreturn\r\n amount.sub(feeAmount);\r\n    }\r\n    \r\nfunction\r\n \r\nshouldSwapBack\r\n(\r\n) \r\ninternal\r\n \r\nview\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        \r\nreturn\r\n msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(\r\nthis\r\n)] >= swapThreshold;\r\n    }\r\n    \r\nfunction\r\n \r\nclearStuckBalance\r\n(\r\nuint256 amountPercentage\r\n) \r\nexternal\r\n \r\nonlyOwner\r\n \r\n{\r\n        uint256 amountBNB = address(\r\nthis\r\n).balance;\r\n        payable(marketingFeeReceiver).transfer(amountBNB * amountPercentage / \r\n100\r\n);\r\n    }\r\n    \r\n// switch Trading\r\n\r\n    \r\nfunction\r\n \r\ntradingStatus\r\n(\r\nbool _status\r\n) \r\npublic\r\n \r\nonlyOwner\r\n \r\n{\r\n        tradingOpen = _status;\r\n    }\r\n    \r\n// enable cooldown between trades\r\n\r\n    \r\nfunction\r\n \r\ncooldownEnabled\r\n(\r\nbool _status, uint8 _interval\r\n) \r\npublic\r\n \r\nonlyOwner\r\n \r\n{\r\n        buyCooldownEnabled = _status;\r\n        cooldownTimerInterval = _interval;\r\n    }\r\n    \r\nfunction\r\n \r\nswapBack\r\n(\r\n) \r\ninternal\r\n \r\nswapping\r\n \r\n{\r\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? \r\n0\r\n : liquidityFee;\r\n        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(\r\n2\r\n);\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n        address[] memory path = \r\nnew\r\n address[](\r\n2\r\n);\r\n        path[\r\n0\r\n] = address(\r\nthis\r\n);\r\n        path[\r\n1\r\n] = WBNB;\r\n        uint256 balanceBefore = address(\r\nthis\r\n).balance;\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            \r\n0\r\n,\r\n            path,\r\n            address(\r\nthis\r\n),\r\n            block.timestamp\r\n        );\r\n        uint256 amountBNB = address(\r\nthis\r\n).balance.sub(balanceBefore);\r\n        uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(\r\n2\r\n));\r\n        uint256 amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(\r\n2\r\n);\r\n        uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(totalBNBFee);\r\n        uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalBNBFee);\r\n        \r\ntry\r\n distributor.deposit{\r\nvalue\r\n: amountBNBReflection}() {} \r\ncatch\r\n {}\r\n        (bool tmpSuccess,) = payable(marketingFeeReceiver).call{\r\nvalue\r\n: amountBNBMarketing, \r\ngas\r\n: \r\n30000\r\n}(\r\n\"\"\r\n);\r\n        \r\n// only to supress warning msg\r\n\r\n        tmpSuccess = \r\nfalse\r\n;\r\n        \r\nif\r\n(amountToLiquify > \r\n0\r\n){\r\n            router.addLiquidityETH{\r\nvalue\r\n: amountBNBLiquidity}(\r\n                address(\r\nthis\r\n),\r\n                amountToLiquify,\r\n                \r\n0\r\n,\r\n                \r\n0\r\n,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n    \r\nfunction\r\n \r\nsetTxLimit\r\n(\r\nuint256 amount\r\n) \r\nexternal\r\n \r\nauthorized\r\n \r\n{\r\n        _maxTxAmount = amount;\r\n    }\r\n    \r\nfunction\r\n \r\nsetIsDividendExempt\r\n(\r\naddress holder, bool exempt\r\n) \r\nexternal\r\n \r\nauthorized\r\n \r\n{\r\n        \r\nrequire\r\n(holder != address(\r\nthis\r\n) && holder != pair);\r\n        isDividendExempt[holder] = exempt;\r\n        \r\nif\r\n(exempt){\r\n            distributor.setShare(holder, \r\n0\r\n);\r\n        }\r\nelse\r\n{\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n    \r\nfunction\r\n \r\nsetIsFeeExempt\r\n(\r\naddress holder, bool exempt\r\n) \r\nexternal\r\n \r\nauthorized\r\n \r\n{\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n    \r\nfunction\r\n \r\nsetIsTxLimitExempt\r\n(\r\naddress holder, bool exempt\r\n) \r\nexternal\r\n \r\nauthorized\r\n \r\n{\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n    \r\nfunction\r\n \r\nsetIsTimelockExempt\r\n(\r\naddress holder, bool exempt\r\n) \r\nexternal\r\n \r\nauthorized\r\n \r\n{\r\n        isTimelockExempt[holder] = exempt;\r\n    }\r\n    \r\nfunction\r\n \r\nsetFees\r\n(\r\nuint256 _liquidityFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _feeDenominator\r\n) \r\nexternal\r\n \r\nauthorized\r\n \r\n{\r\n        liquidityFee = _liquidityFee;\r\n        reflectionFee = _reflectionFee;\r\n        marketingFee = _marketingFee;\r\n        totalFee = _liquidityFee.add(_reflectionFee).add(_marketingFee);\r\n        feeDenominator = _feeDenominator;\r\n        \r\nrequire\r\n(totalFee < feeDenominator/\r\n4\r\n);\r\n    }\r\n    \r\nfunction\r\n \r\nsetFeeReceivers\r\n(\r\naddress _autoLiquidityReceiver, address _marketingFeeReceiver\r\n) \r\nexternal\r\n \r\nauthorized\r\n \r\n{\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n    }\r\n    \r\nfunction\r\n \r\nsetSwapBackSettings\r\n(\r\nbool _enabled, uint256 _amount\r\n) \r\nexternal\r\n \r\nauthorized\r\n \r\n{\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n    \r\nfunction\r\n \r\nsetTargetLiquidity\r\n(\r\nuint256 _target, uint256 _denominator\r\n) \r\nexternal\r\n \r\nauthorized\r\n \r\n{\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;\r\n    }\r\n    \r\nfunction\r\n \r\nsetDistributionCriteria\r\n(\r\nuint256 _minPeriod, uint256 _minDistribution\r\n) \r\nexternal\r\n \r\nauthorized\r\n \r\n{\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n    \r\nfunction\r\n \r\nsetDistributorSettings\r\n(\r\nuint256 gas\r\n) \r\nexternal\r\n \r\nauthorized\r\n \r\n{\r\n        \r\nrequire\r\n(gas < \r\n750000\r\n);\r\n        distributorGas = gas;\r\n    }\r\n    \r\nfunction\r\n \r\ngetCirculatingSupply\r\n(\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nreturn\r\n _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n    \r\nfunction\r\n \r\ngetLiquidityBacking\r\n(\r\nuint256 accuracy\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n (\r\nuint256\r\n) \r\n{\r\n        \r\nreturn\r\n accuracy.mul(balanceOf(pair).mul(\r\n2\r\n)).div(getCirculatingSupply());\r\n    }\r\n    \r\nfunction\r\n \r\nisOverLiquified\r\n(\r\nuint256 target, uint256 accuracy\r\n) \r\npublic\r\n \r\nview\r\n \r\nreturns\r\n (\r\nbool\r\n) \r\n{\r\n        \r\nreturn\r\n getLiquidityBacking(accuracy) > target;\r\n    }\r\n/* Airdrop Begins */\r\n\r\n \r\nfunction\r\n \r\nairdrop\r\n(\r\naddress \r\nfrom\r\n, address[] calldata addresses, uint256[] calldata tokens\r\n) \r\nexternal\r\n \r\nonlyOwner\r\n \r\n{\r\n    uint256 SCCC = \r\n0\r\n;\r\n    \r\nrequire\r\n(addresses.length == tokens.length,\r\n\"Mismatch between Address and token count\"\r\n);\r\n    \r\nfor\r\n(uint i=\r\n0\r\n; i < addresses.length; i++){\r\n        SCCC = SCCC + tokens[i];\r\n    }\r\n    \r\nrequire\r\n(balanceOf(\r\nfrom\r\n) >= SCCC, \r\n\"Not enough tokens to airdrop\"\r\n);\r\n    \r\nfor\r\n(uint i=\r\n0\r\n; i < addresses.length; i++){\r\n        _basicTransfer(\r\nfrom\r\n,addresses[i],tokens[i]);\r\n        \r\nif\r\n(!isDividendExempt[addresses[i]]) {\r\n            \r\ntry\r\n distributor.setShare(addresses[i], _balances[addresses[i]]) {} \r\ncatch\r\n {} \r\n        }\r\n    }\r\n    \r\n// Dividend tracker\r\n\r\n    \r\nif\r\n(!isDividendExempt[\r\nfrom\r\n]) {\r\n        \r\ntry\r\n distributor.setShare(\r\nfrom\r\n, _balances[\r\nfrom\r\n]) {} \r\ncatch\r\n {}\r\n    }\r\n}\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n}\r\n//", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_interval\",\"type\":\"uint8\"}],\"name\":\"cooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownTimerInterval\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTimelockExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"tradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BabyTrustwallet", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ca869b13b48ebd0e5ce21d7287a36aacc9aa2ee5c0dcf9b1b2013579210cef02"}