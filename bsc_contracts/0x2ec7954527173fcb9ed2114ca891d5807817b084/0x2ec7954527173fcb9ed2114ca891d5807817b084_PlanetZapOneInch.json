{"SourceCode": "{\"Dependencies.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\n// SPDX-License-Identifier: MIT\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\\n// \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\\";\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\nlibrary Address {\\n   \\n    function isContract(address account) internal view returns (bool) {\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance \\u003e= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length \\u003e 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\\nlibrary Math {\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a \\u003c b ? a : b;\\n    }\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y \\u003e 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x \\u003c z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) \\u003c= x, \\u0027Math: Sub-underflow\\u0027);\\n    }\\n}\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary SafeERC20 {\\n\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector,spender,newAllowance));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) {\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\u0027TransferHelper: ETH_TRANSFER_FAILED\\u0027);\\n    }\\n}\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IERC20Extended {\\n    function decimals() external view returns (uint256);\\n}\\n\\ninterface IWBNB is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint256 wad) external;\\n}\\n\\ninterface IPlanetRouter {\\n\\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin,\\n        address to,\\n        uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\\n \\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n}\\n\\ninterface IUniswapV2Pair {\\n    // function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    // function totalSupply() external view returns (uint256);\\n    // function kLast() external view returns (uint256);\\n}\\n\\ninterface ISolidlyPair {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function stable() external view returns (bool);\\n    function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\\n}\\n\\ninterface ISolidlyRouter{\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n        function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired\\n    ) external view returns (uint amountA, uint amountB, uint liquidity);\\n}\\n\\ninterface IGammaUniProxy{\\n    function deposit(\\n        uint256 deposit0,\\n        uint256 deposit1,\\n        address to,\\n        address pos,\\n        uint256[4] memory minIn\\n    ) external returns (uint256 shares);\\n\\n    function getDepositAmount(\\n        address pos,\\n        address token,\\n        uint256 _deposit\\n    ) external view returns (uint256 amountStart, uint256 amountEnd);\\n\\n}\\n\\ninterface IHypervisor{\\n    function withdraw(\\n        uint256 shares,\\n        address to,\\n        address from,\\n        uint256[4] memory minAmounts\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function getTotalAmounts() external view returns (uint256 total0, uint256 total1);\\n}\\n\"},\"PlanetZapV2.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./Dependencies.sol\\\";\\n\\n/**\\n@title Planet Zap via OneInch\\n@author Planet\\n@notice Use this to Zap and out of any LP on Planet\\n*/\\n\\ncontract PlanetZapOneInch is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable oneInchRouter; // Router for all the swaps to go through\\n    address public immutable WBNB; // BNB address\\n    uint256 public constant minimumAmount = 1000; // minimum number of tokens for the transaction to go through\\n\\n    enum WantType {\\n        WANT_TYPE_UNISWAP_V2,\\n        WANT_TYPE_SOLIDLY_STABLE,\\n        WANT_TYPE_SOLIDLY_VOLATILE,\\n        WANT_TYPE_GAMMA_HYPERVISOR\\n    }\\n\\n    event TokenReturned(address token, uint256 amount); // emitted when any pending tokens left with the contract after a function call are sent back to the user\\n    event Swap(address tokenIn, uint256 amountIn); // emitted after every swap transaction\\n    event ZapIn(address tokenIn, uint256 amountIn); //  emitted after every ZapIn transaction\\n    event ZapOut(address tokenOut, uint256 amountOut); // emitted after every ZapOut transaction\\n    // should we also include destination tokens?\\n\\n    constructor(address _oneInchRouter, address _WBNB) {\\n        // Safety checks to ensure WBNB token address\\n        IWBNB(_WBNB).deposit{value: 0}();\\n        IWBNB(_WBNB).withdraw(0);\\n        WBNB = _WBNB;\\n\\n        oneInchRouter = _oneInchRouter;\\n    }\\n    // Zap\\u0027s main functions external and public functions\\n\\n    /** \\n    @notice Swaps BNB for any token via One Inch Router\\n    @param _token0 One Inch calldata for swapping BNB to the output token\\n    @param _outputToken Address of output token\\n    */\\n    function swapFromBNB (bytes calldata _token0, address _outputToken) external payable {\\n        require(msg.value \\u003e= minimumAmount, \\u0027Planet: Insignificant input amount\\u0027);\\n\\n        IWBNB(WBNB).deposit{value: msg.value}();\\n        _swap(WBNB, _token0, _outputToken);\\n        emit Swap(WBNB, msg.value);\\n    }\\n    \\n    /** \\n    @notice Swaps any token for another token via One Inch Router\\n    @param _inputToken Address of input token\\n    @param _tokenInAmount Amount of input token to be swapped\\n    @param _token0 One Inch calldata for swapping the input token to the output token\\n    @param _outputToken Address of output token \\n    */ \\n    function swap (address _inputToken, uint256 _tokenInAmount, bytes calldata _token0, address _outputToken) external {\\n        require(_tokenInAmount \\u003e= minimumAmount, \\u0027Planet: Insignificant input amount\\u0027);\\n        IERC20(_inputToken).safeTransferFrom(msg.sender, address(this), _tokenInAmount);\\n        _swap(_inputToken, _token0, _outputToken);\\n        emit Swap(_inputToken, _tokenInAmount);\\n    }\\n\\n    /** \\n    @notice Zaps BNB into any LP Pair (including aggregated pairs) on Planet via One Inch Router\\n    @param _token0 One Inch calldata for swapping BNB to token0 of the LP Pair\\n    @param _token1 One Inch calldata for swapping BNB to token1 of the LP Pair\\n    @param _type LP Pair type, whether uniswapV2, solidly volatile or solidly stable\\n    @param _router Rourter where \\\"Add Liquidity\\\" is to be called, to create LP Pair\\n    @param _pair Address of the output LP Pair token\\n    */ \\n    function zapInBNB (bytes calldata _token0, bytes calldata _token1, WantType _type, address _router, address _pair) external payable {\\n        require(msg.value \\u003e= minimumAmount, \\u0027Planet: Insignificant input amount\\u0027);\\n\\n        IWBNB(WBNB).deposit{value: msg.value}();\\n        _zapIn(WBNB, _token0, _token1, _type, _router, _pair);\\n        emit ZapIn(WBNB, msg.value);\\n    }\\n\\n    /** \\n    @notice Zaps any token into any LP Pair (including aggregated pairs) on Planet via One Inch Router\\n    @param _inputToken Address of input token\\n    @param _tokenInAmount Amount of input token to be zapped\\n    @param _token0 One Inch calldata for swapping the input token to token0 of the LP Pair\\n    @param _token1 One Inch calldata for swapping the input token to token1 of the LP Pair\\n    @param _type LP Pair type, whether uniswapV2, solidly volatile or solidly stable\\n    @param _router Rourter where \\\"Add Liquidity\\\" is to be called, to create LP Pair\\n    @param _pair Address of the output LP Pair token\\n    */\\n    function zapIn (address _inputToken, uint256 _tokenInAmount, bytes calldata _token0, bytes calldata _token1, WantType _type, address _router, address _pair) external {\\n        require(_tokenInAmount \\u003e= minimumAmount, \\u0027Planet: Insignificant input amount\\u0027);\\n\\n        IERC20(_inputToken).safeTransferFrom(msg.sender, address(this), _tokenInAmount);\\n        _zapIn(_inputToken, _token0, _token1, _type, _router, _pair /** , _outputToken */);\\n        emit ZapIn(_inputToken, _tokenInAmount);\\n    }\\n\\n    /**\\n    @notice Zaps out any LP Pair (including aggregated pairs) on Planet to any desired token via One Inch Router\\n    @param _pair Address of the input LP Pair token\\n    @param _withdrawAmount Amount of LP Pair token to zapped out\\n    @param _desiredToken Address of the desired output token\\n    @param _dataToken0 One Inch calldata for swapping token0 of the LP Pair to the desired output token\\n    @param _dataToken1 One Inch calldata for swapping token1 of the LP Pair to the desired output token\\n    @param _type LP Pair type, whether uniswapV2, solidly volatile or solidly stable\\n    */\\n    function zapOut(address _pair, uint256 _withdrawAmount, address _desiredToken, bytes calldata _dataToken0, bytes calldata _dataToken1, WantType _type) external {\\n        require(_withdrawAmount \\u003e= minimumAmount, \\u0027Planet: Insignificant withdraw amount\\u0027);\\n\\n        IERC20(_pair).safeTransferFrom(msg.sender, address(this), _withdrawAmount);\\n        _removeLiquidity(_pair, _withdrawAmount, _type);\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(_pair);\\n        address[] memory path = new address[](3);\\n        path[0] = pair.token0();\\n        path[1] = pair.token1();\\n        path[2] = _desiredToken;\\n\\n        _approveTokenIfNeeded(path[0], address(oneInchRouter));\\n        _approveTokenIfNeeded(path[1], address(oneInchRouter));\\n\\n        if (_desiredToken != path[0]) {\\n            _swapViaOneInch(path[0], _dataToken0);\\n        }\\n\\n        if (_desiredToken != path[1]) {\\n            _swapViaOneInch(path[1], _dataToken1);\\n        }\\n    \\n        _returnAssets(path); // function _returnAssets also takes care of withdrawing WBNB and sending it to the user as BNB\\n        emit ZapOut(address(pair), _withdrawAmount);\\n    }\\n\\n    // View function helpers for the app\\n\\n    /**\\n    @notice Calculates amount of second input token given the amount of first input tokens while depositing into gammaUniProxy\\n    @param _pair Hypervisor Address\\n    @param _token Address of token to deposit\\n    @param _inputTokenDepositAmount Amount of token to deposit\\n    @return _otherTokenAmountMin Minimum amounts of the pair token to deposit\\n    @return _otherTokenAmountMax Maximum amounts of the pair token to deposit \\n    */\\n    function getSecondTokenDepositAmount(\\n        address _pair,\\n        address _token,\\n        uint256 _inputTokenDepositAmount,\\n        address _router\\n        ) public view returns (uint256 _otherTokenAmountMin, uint256 _otherTokenAmountMax){\\n\\n        (_otherTokenAmountMin, _otherTokenAmountMax) =  IGammaUniProxy(_router).getDepositAmount(_pair, _token, _inputTokenDepositAmount);\\n        \\n    }\\n\\n    /**\\n    @notice Calculates minimum number of tokens recieved when removing liquidity from an hypervisor\\n    @param _hypervisor Address of the hypervisor token\\n    @param _tokenA Address of token A of the hypervisor\\n    @param _liquidity Amount of hypervisor Tokens desired to be removed\\n    @return amountA Amount of token A that will be recieved on removing liquidity\\n    @return amountB Amount of token B that will be recieved on removing liquidity\\n    */\\n    function quoteRemoveLiquidityGammaUniproxy(\\n        address _hypervisor,\\n        address _tokenA,\\n        uint _liquidity\\n        ) external view returns (uint amountA, uint amountB){\\n            (uint256 total0, uint256 total1) = IHypervisor(_hypervisor).getTotalAmounts();\\n            uint256 totalSupply = IERC20(_hypervisor).totalSupply();\\n\\n            amountA = (_liquidity * total0)/totalSupply;\\n            amountB = (_liquidity * total1)/totalSupply;\\n\\n            (amountA , amountB) = IUniswapV2Pair(_hypervisor).token0() == _tokenA ? (amountA , amountB) : (amountB , amountA);\\n        }\\n\\n\\n\\n    /** \\n    @notice Calculates ratio of input tokens for creating solidly stable pairs\\n    @dev Since solidly stable pairs can be inbalanced we need the proper ratio for our swap, we need to account both for price of the assets and the ratio of the pair. \\n    @param _pair Address of the solidly stable LP Pair token\\n    @param _router Address of the solidly router associated with the solidly stable LP Pair\\n    @return ratio1to0 Ratio of Token1 to Token0\\n    */\\n    function quoteStableAddLiquidityRatio(ISolidlyPair _pair, address _router) external view returns (uint256 ratio1to0) {\\n            address tokenA = _pair.token0();\\n            address tokenB = _pair.token1();\\n\\n            uint256 investment = IERC20(tokenA).balanceOf(address(_pair)) * 10 / 10000;\\n            uint out = _pair.getAmountOut(investment, tokenA);\\n            (uint amountA, uint amountB,) = ISolidlyRouter(_router).quoteAddLiquidity(tokenA, tokenB, _pair.stable(), investment, out);\\n                \\n            amountA = amountA * 1e18 / 10**IERC20Extended(tokenA).decimals();\\n            amountB = amountB * 1e18 / 10**IERC20Extended(tokenB).decimals();\\n            out = out * 1e18 / 10**IERC20Extended(tokenB).decimals();\\n            investment = investment * 1e18 / 10**IERC20Extended(tokenA).decimals();\\n                \\n            uint ratio = out * 1e18 / investment * amountA / amountB; \\n                \\n            return 1e18 * 1e18 / (ratio + 1e18);\\n    }\\n\\n    /**\\n    @notice Calculates minimum number of LP tokens recieved when creating an LP Pair\\n    @param _pair Address of the LP Pair token\\n    @param _tokenA Address of token A of the LP Pair\\n    @param _tokenB Address of token B of the LP Pair\\n    @param _amountADesired Desired amount of token A to be used to create the LP Pair\\n    @param _amountBDesired Desired amount of token B to be used to create the LP Pair\\n    @return amountA Actual amount of token A that will be used to create the LP Pair\\n    @return amountB Actual amount of token B that will be used to create the LP Pair\\n    @return liquidity Amount of LP Tokens to be recieved when adding liquidity\\n     */\\n    function quoteAddLiquidity(\\n        address _pair,\\n        address _tokenA,\\n        address _tokenB,\\n        uint _amountADesired,\\n        uint _amountBDesired\\n        ) external view returns (uint amountA, uint amountB, uint liquidity) {\\n        \\n        if (_pair == address(0)) {\\n            return (0,0,0);\\n        }\\n\\n        (uint reserveA, uint reserveB) = getReserves(_pair, _tokenA, _tokenB);\\n        uint _totalSupply = IERC20(_pair).totalSupply();\\n        \\n        if (reserveA == 0 \\u0026\\u0026 reserveB == 0) {\\n            (amountA, amountB) = (_amountADesired, _amountBDesired);\\n            liquidity = Math.sqrt(amountA * amountB) - minimumAmount;\\n        } else {\\n\\n            uint amountBOptimal = quoteLiquidity(_amountADesired, reserveA, reserveB);\\n            if (amountBOptimal \\u003c= _amountBDesired) {\\n                (amountA, amountB) = (_amountADesired, amountBOptimal);\\n                liquidity = Math.min(amountA * _totalSupply / reserveA, amountB * _totalSupply / reserveB);\\n            } else {\\n                uint amountAOptimal = quoteLiquidity(_amountBDesired, reserveB, reserveA);\\n                (amountA, amountB) = (amountAOptimal, _amountBDesired);\\n                liquidity = Math.min(amountA * _totalSupply / reserveA, amountB * _totalSupply / reserveB);\\n            }\\n        }\\n    }\\n\\n    /**\\n    @notice Calculates minimum number of tokens recieved when removing liquidity from an LP Pair\\n    @param _pair Address of the LP Pair token\\n    @param _tokenA Address of token A of the LP Pair\\n    @param _tokenB Address of token B of the LP Pair\\n    @param _liquidity Amount of LP Tokens desired to be removed\\n    @return amountA Amount of token A that will be recieved on removing liquidity\\n    @return amountB Amount of token B that will be recieved on removing liquidity\\n\\n    */\\n    function quoteRemoveLiquidity(\\n        address _pair,\\n        address _tokenA,\\n        address _tokenB,\\n        uint _liquidity\\n        ) external view returns (uint amountA, uint amountB) {\\n\\n        if (_pair == address(0)) {\\n            return (0,0);\\n        }\\n\\n        (uint reserveA, uint reserveB) = getReserves(_pair, _tokenA, _tokenB);\\n        uint _totalSupply = IERC20(_pair).totalSupply();\\n\\n        amountA = _liquidity * reserveA / _totalSupply; // using balances ensures pro-rata distribution\\n        amountB = _liquidity * reserveB / _totalSupply; // using balances ensures pro-rata distribution\\n\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address _pair, address _tokenA, address _tokenB) public view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(_tokenA, _tokenB);\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(_pair).getReserves();\\n        (reserveA, reserveB) = _tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // internal functions\\n\\n     // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\u0027PlanetLibrary: IDENTICAL_ADDRESSES\\u0027);\\n        (token0, token1) = tokenA \\u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\u0027PlanetLibrary: ZERO_ADDRESS\\u0027);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quoteLiquidity(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA \\u003e 0, \\u0027PlanetLibrary: INSUFFICIENT_AMOUNT\\u0027);\\n        require(reserveA \\u003e 0 \\u0026\\u0026 reserveB \\u003e 0, \\u0027PlanetLibrary: INSUFFICIENT_LIQUIDITY\\u0027);\\n        amountB = amountA * reserveB / reserveA;\\n    }\\n\\n    // provides allowance for the spender to access the token when allowance is not already given\\n    function _approveTokenIfNeeded(address _token, address _spender) private {\\n        if (IERC20(_token).allowance(address(this), _spender) == 0) {\\n            IERC20(_token).safeApprove(_spender, type(uint).max);\\n        }\\n    }\\n    // swaps tokens via One Inch router\\n    function _swap(address _inputToken, bytes calldata _token0, address _outputToken) private {\\n        address[] memory path;\\n        path = new address[](2);\\n        path[0] = _outputToken;\\n        path[1] = _inputToken;\\n\\n        _swapViaOneInch(_inputToken, _token0);\\n\\n        _returnAssets(path);\\n    }\\n\\n    // Zaps any token into any LP Pair on Planet via One Inch Router\\n    function _zapIn(address _inputToken, bytes calldata _token0, bytes calldata _token1, WantType _type, address _router, address _pair) private {\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(_pair);\\n\\n        address[] memory path;\\n        path = new address[](3);\\n        path[0] = pair.token0();\\n        path[1] = pair.token1();\\n        path[2] = _inputToken;\\n\\n        if (_inputToken != path[0]) {\\n            _swapViaOneInch(_inputToken, _token0);\\n        }\\n\\n        if (_inputToken != path[1]) {\\n            _swapViaOneInch(_inputToken, _token1);\\n        }\\n\\n        address approveToken = _router;\\n        if (_type == WantType.WANT_TYPE_GAMMA_HYPERVISOR){\\n            approveToken = _pair;\\n        }\\n        _approveTokenIfNeeded(path[0], address(approveToken));\\n        _approveTokenIfNeeded(path[1], address(approveToken));\\n        uint256 lp0Amt = IERC20(path[0]).balanceOf(address(this));\\n        uint256 lp1Amt = IERC20(path[1]).balanceOf(address(this));\\n\\n        uint256[4] memory min;\\n\\n        if (_type == WantType.WANT_TYPE_GAMMA_HYPERVISOR){\\n            (uint256 lp1AmtMin, uint256 lp1AmtMax) = getSecondTokenDepositAmount(_pair, path[0], lp0Amt, _router);   \\n            if (lp1Amt \\u003e= lp1AmtMax){\\n                lp1Amt = (lp1AmtMin+lp1AmtMax)/2;\\n            }\\n            else if (lp1Amt \\u003c lp1AmtMin){\\n                (uint256 lp0AmtMin, uint256 lp0AmtMax) = getSecondTokenDepositAmount(_pair, path[1], lp1Amt, _router);\\n                lp0Amt = (lp0AmtMin + lp0AmtMax)/2;\\n            }\\n            \\n            uint256 shares = IGammaUniProxy(_router).deposit(lp0Amt, lp1Amt, address(this), _pair, min);\\n            require(IERC20(_pair).balanceOf(address(this)) \\u003e= shares, \\\"LP tokens not returned from GAMMA Uniproxy\\\");\\n            IERC20(_pair).safeTransfer(msg.sender, shares);\\n\\t}\\n        else if (_type == WantType.WANT_TYPE_UNISWAP_V2) {\\n            IPlanetRouter(_router).addLiquidity(path[0], path[1], lp0Amt, lp1Amt, 1, 1, msg.sender, block.timestamp);\\n        } else {\\n            bool stable = _type == WantType.WANT_TYPE_SOLIDLY_STABLE ? true : false;\\n            ISolidlyRouter(_router).addLiquidity(path[0], path[1], stable,  lp0Amt, lp1Amt, 1, 1, msg.sender, block.timestamp);\\n        }  \\n        _returnAssets(path);   \\n    }\\n\\n    // removes liquidity from the pair by burning LP pair tokens of the input address \\n    function _removeLiquidity(address _pair, uint256 _withdrawAmount, WantType _type) private {\\n        uint256 amount0;\\n        uint256 amount1;\\n\\n        uint256[4] memory min;\\n        if (_type == WantType.WANT_TYPE_GAMMA_HYPERVISOR){\\n            (amount0, amount1) = IHypervisor(_pair).withdraw(_withdrawAmount, address(this), address(this), min);\\n        }\\n        else {\\n            IERC20(_pair).safeTransfer(_pair, IERC20(_pair).balanceOf(address(this)));\\n            (amount0, amount1) = IUniswapV2Pair(_pair).burn(address(this));\\n        }\\n\\n        require(amount0 \\u003e= minimumAmount, \\\"UniswapV2Router: INSUFFICIENT_A_AMOUNT\\\");\\n        require(amount1 \\u003e= minimumAmount, \\\"UniswapV2Router: INSUFFICIENT_B_AMOUNT\\\");\\n    }\\n\\n    // Our main swap function call. We call the aggregator contract with our fed data. If we get an error we revert and return the error result. \\n    function _swapViaOneInch(address _inputToken, bytes memory _callData) private {\\n        \\n        _approveTokenIfNeeded(_inputToken, address(oneInchRouter));\\n\\n        (bool success, bytes memory retData) = oneInchRouter.call(_callData);\\n\\n        propagateError(success, retData, \\\"1inch\\\");\\n\\n        require(success == true, \\\"calling 1inch got an error\\\");\\n    }\\n\\n    // Error reporting from our call to the aggrator contract when we try to swap. \\n    function propagateError(\\n        bool success,\\n        bytes memory data,\\n        string memory errorMessage\\n        ) public pure {\\n        // Forward error message from call/delegatecall\\n        if (!success) {\\n            if (data.length == 0) revert(errorMessage);\\n            assembly {\\n                revert(add(32, data), mload(data))\\n            }\\n        }\\n    }\\n\\n    // Returns any pending assets left with the contract after a swap, zapIn or ZapOut back to the user\\n    function _returnAssets (address[] memory _tokens) private {\\n        uint256 balance;\\n        for (uint256 i; i \\u003c _tokens.length; i++) {\\n            balance = IERC20(_tokens[i]).balanceOf(address(this));\\n            if (balance \\u003e 0) {\\n                if (_tokens[i] == WBNB) {\\n                    IWBNB(WBNB).withdraw(balance);\\n                    (bool success,) = msg.sender.call{value: balance}(new bytes(0));\\n                    require(success, \\u0027Planet: BNB transfer failed\\u0027);\\n                    emit TokenReturned(_tokens[i], balance);\\n                } else {\\n                    IERC20(_tokens[i]).safeTransfer(msg.sender, balance);\\n                    emit TokenReturned(_tokens[i], balance);\\n                }\\n            }\\n        }\\n    }\\n\\n    // enabling the contract to receive BNB\\n    receive() external payable {\\n        assert(msg.sender == WBNB);\\n    }\\n\\n    function inCaseTokensGetStuck(address _token, uint256 _amount) external onlyOwner{\\n        IERC20(_token).safeTransfer(_msgSender(), _amount);\\n    }\\n\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oneInchRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WBNB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"ZapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"ZapOut\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputTokenDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"getSecondTokenDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_otherTokenAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_otherTokenAmountMax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneInchRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"propagateError\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBDesired\",\"type\":\"uint256\"}],\"name\":\"quoteAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"quoteRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hypervisor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"}],\"name\":\"quoteRemoveLiquidityGammaUniproxy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISolidlyPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"quoteStableAddLiquidityRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio1to0\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenInAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_token0\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_token0\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"}],\"name\":\"swapFromBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenInAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_token0\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_token1\",\"type\":\"bytes\"},{\"internalType\":\"enum PlanetZapOneInch.WantType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_token0\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_token1\",\"type\":\"bytes\"},{\"internalType\":\"enum PlanetZapOneInch.WantType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"zapInBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_desiredToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_dataToken0\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_dataToken1\",\"type\":\"bytes\"},{\"internalType\":\"enum PlanetZapOneInch.WantType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PlanetZapOneInch", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "30000", "ConstructorArguments": "0000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0f8437ce4422850337a8d340039548683f032f90f5c0b45dcbec47228cb39c12"}