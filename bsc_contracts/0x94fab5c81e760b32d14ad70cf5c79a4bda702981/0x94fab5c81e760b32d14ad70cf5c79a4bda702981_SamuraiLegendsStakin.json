{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SamuraiLegendsStaking/SamuraiLegendsStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n     .....................................................                      \\r\\n    . ...........................................................               \\r\\n.....................................................................           \\r\\n..................................................,.................... ....    \\r\\n......................................##((#..,,,,,,,,......................     \\r\\n....................................&@@&@%%&&.,,,,,,,.....................      \\r\\n...........................,.,..,%(@@@@&.&&%##/(,,,......................... .  \\r\\n........................,,,,...&@@@@#@ ....@/##%&@..........................    \\r\\n.................,....,,,,,,%*@@@@%..,,,,,,,, &&%#%((...........................\\r\\n................,.,,,,,,,.@@@@@#@ ,,,,,@%@.,,,. @(%%&&&.........................\\r\\n.............,,,,,,,,,,##@&@&%.,,,,,(%@@@@@#(..... %@@@@/#......................\\r\\n..............,,,,,,.&&@&@(@.,,,,,@%@@@@ &@@@&@.,,.. &/&&@@@....................\\r\\n...........,,,,,,,(%&&&@& ,,,,,,@#&&@@,,,, @@@@%&..,... @@&&@((.,,..............\\r\\n...........,,,,.@@@&@#@.,,,,,@&/,,*@&&&%@(@@@&(..*@@.,,,..&(&&@@@...............\\r\\n..........,,,(&@@@@@ ,,,,,/@@@@@&@%%@@(@@&/@%#%@%@@@@&#,,,,. @@@@@#(............\\r\\n...........@@@@@&@.,,,,,@&@@@@&%@@@@*,.*@/.,,@@@@#@@@@@&@.,,,..&(@@@@@..........\\r\\n........%&@@@@&.,,,,,,&@@@%%.,,, @@@@&&,,,@%@@@@.,,,.&*@@@&*,,,.. @@@@@&#.......\\r\\n.......... @@@@@@&,,,,,.@&@@@@%&@@@&*.,,@*,.*@@@@%&@@@@&@ ,,,..&(@@@@@ .........\\r\\n.........,,,.&@@@@@@,,,,,,*@@@@@&@@@@@&@@@&@@@@@%@@@@%%,,,,, @@@@@(@............\\r\\n.........,,,,,, @@@@@@&,,,,, @@*..,@@@@&@%@@@@/,,*@@ ,,,,,&(@@@@@ ..............\\r\\n........,,,,,,,,,.&@@@@@@,,,,,,.&&@@@@ .,. @@@@&@,,,,,,.@@@@@(@.................\\r\\n........,,,,,,,,,,,, @&@@@@&,,,,, @&@@@@.@@@@&@ ,,,,.%(@@@@@ ...................\\r\\n........,,,,,,,,,,,,,,.&@@@@@@,,.,..*&@@@@@&/,,,,,.@@@@@(@......................\\r\\n.........,,,,,,,,,,,,,,,, @&@@@@&.,,.. @%@.,,,,.#%@@@@& ........................\\r\\n..........,,,,,,,,,,,,,,,,,.&&&@@@@...,,,,,,,.@@@@&#&...........................\\r\\n.......,...,,,,,,,,,,,,,,,,,.. &%&&@@&,,,,,%&&&&@% .............................\\r\\n............,,,,,,,,,,,,,,,,.... &@&&@@&.&@&&&%&................................\\r\\n.................,,,,,,,,,,........ &%&&@&&&% ..................................\\r\\n.....................,,,,,.........,,.&&%&@...................................  \\r\\n..................................,,,,.. ....................................   \\r\\n..................................,,.......................................     \\r\\n.........................................................................           \\r\\n*/  \\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Recoverable.sol\\\";\\r\\nimport \\\"./Generatable.sol\\\";\\r\\nimport \\\"./Array.sol\\\";\\r\\n\\r\\n\\r\\nstruct Fee {\\r\\n    uint128 numerator;\\r\\n    uint128 denominator;\\r\\n}\\r\\n\\r\\nstruct PendingPeriod {\\r\\n    uint128 repeat;\\r\\n    uint128 period;\\r\\n}\\r\\n\\r\\nstruct PendingAmount {\\r\\n    uint32 createdAt;\\r\\n    uint112 fullAmount;\\r\\n    uint112 claimedAmount;\\r\\n    PendingPeriod pendingPeriod;\\r\\n}\\r\\n\\r\\n/**\\r\\n@title Contract that adds auto-compounding staking functionalities\\r\\n@author Leo\\r\\n@notice Stake any ERC20 token in a auto-compounding way using this contract\\r\\n*/\\r\\ncontract SamuraiLegendsStaking is Ownable, Pausable, Generatable, Recoverable {\\r\\n    using Array for uint[];\\r\\n\\r\\n    IERC20 private immutable _token;\\r\\n\\r\\n    uint160 public rewardRate;\\r\\n    uint32 public rewardDuration = 12 weeks;\\r\\n    uint32 private _rewardUpdatedAt = uint32(block.timestamp);\\r\\n    uint32 public rewardFinishedAt;\\r\\n\\r\\n    uint private _totalStake;\\r\\n    mapping(address => uint) private _userStake;\\r\\n    \\r\\n    uint128 private _rewardPerToken;\\r\\n    uint128 private _lastRewardPerTokenPaid;\\r\\n    mapping(address => uint) private _userRewardPerTokenPaid;\\r\\n\\r\\n    Fee public fee = Fee(0, 1000);\\r\\n\\r\\n    PendingPeriod public pendingPeriod = PendingPeriod({ repeat: 4, period: 7 days });\\r\\n    mapping(address => uint[]) private _userPendingIds;\\r\\n    mapping(address => mapping(uint => PendingAmount)) private _userPending;\\r\\n\\r\\n    /**\\r\\n    @param token The ERC20 token address to enable staking for\\r\\n    */\\r\\n    constructor(IERC20 token) {\\r\\n        _token = token;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice compute the compounded total stake in real-time\\r\\n    @return totalStake The current compounded total stake\\r\\n    */\\r\\n    function totalStake() public view returns (uint) {\\r\\n        return _totalStake + _earned(_totalStake, _lastRewardPerTokenPaid);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice compute the compounded user stake in real-time\\r\\n    @param account The user address to use\\r\\n    @return userStake The current compounded user stake\\r\\n    */\\r\\n    function userStake(address account) public view returns (uint) {\\r\\n        return _userStake[account] + earned(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice return the user pending amount metadata \\r\\n    @param account The user address to use\\r\\n    @param index The user pending index to use\\r\\n    @return pendingAmount The user pending amount metadata \\r\\n    */\\r\\n    function userPending(address account, uint index) public view returns (PendingAmount memory) {\\r\\n        uint id = _userPendingIds[account][index];\\r\\n        return _userPending[account][id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice compute the user claimable pending percentage\\r\\n    @param account The user address to use\\r\\n    @param index The user pending index to use\\r\\n    @dev 18 decimals were used to not lose information\\r\\n    @return percentage The user claimable pending percentage\\r\\n    */\\r\\n    function userClaimablePendingPercentage(address account, uint index) public view returns (uint) {\\r\\n        PendingAmount memory pendingAmount = userPending(account, index);\\r\\n        uint n = getClaimablePendingPortion(pendingAmount);\\r\\n        return n >= pendingAmount.pendingPeriod.repeat ? 100 * 1e9 : (n * 100 * 1e9) / pendingAmount.pendingPeriod.repeat;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice return the user pending ids\\r\\n    @param account The user address to use\\r\\n    @return ids The user pending ids\\r\\n    */\\r\\n    function userPendingIds(address account) public view returns (uint[] memory) {\\r\\n        return _userPendingIds[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice the last time rewards were updated\\r\\n    @return lastTimeRewardActiveAt A timestamp of the last time the update reward modifier was called\\r\\n    */\\r\\n    function lastTimeRewardActiveAt() public view returns (uint) {\\r\\n        return rewardFinishedAt > block.timestamp ? block.timestamp : rewardFinishedAt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice the current reward per token value\\r\\n    @return rewardPerToken The accumulated reward per token value\\r\\n    */\\r\\n    function rewardPerToken() public view returns (uint) {\\r\\n        if (_totalStake == 0) {\\r\\n            return _rewardPerToken;\\r\\n        }\\r\\n\\r\\n        return _rewardPerToken + ((lastTimeRewardActiveAt() - _rewardUpdatedAt) * rewardRate * 1e9) / _totalStake;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice the total rewards available\\r\\n    @return totalDurationReward The total expected rewards for the current reward duration\\r\\n    */\\r\\n    function totalDurationReward() public view returns (uint) {\\r\\n        return rewardRate * rewardDuration;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice the user earned rewards\\r\\n    @param account The user address to use\\r\\n    @return earned The user earned rewards\\r\\n    */\\r\\n    function earned(address account) private view returns (uint) {\\r\\n        return _earned(_userStake[account], _userRewardPerTokenPaid[account]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice the accumulated rewards for a given staking amount\\r\\n    @param stakeAmount The staked token amount\\r\\n    @param rewardPerTokenPaid The already paid reward per token\\r\\n    @return _earned The earned rewards based on a staking amount and the reward per token paid\\r\\n    */\\r\\n    function _earned(uint stakeAmount, uint rewardPerTokenPaid) internal view returns (uint) {\\r\\n        uint rewardPerTokenDiff = rewardPerToken() - rewardPerTokenPaid;\\r\\n        return (stakeAmount * rewardPerTokenDiff) / 1e9;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice this modifier is used to update the rewards metadata for a specific account\\r\\n    @notice it is called for every user or owner interaction that changes the staking, the reward pool or the reward duration\\r\\n    @notice this is an extended modifier version of the Synthetix contract to support auto-compounding\\r\\n    @notice _rewardPerToken is accumulated every second\\r\\n    @notice _rewardUpdatedAt is updated for every interaction with this modifier\\r\\n    @param account The user address to use\\r\\n    */\\r\\n    modifier updateReward(address account) {\\r\\n        _rewardPerToken = uint128(rewardPerToken());\\r\\n        _rewardUpdatedAt = uint32(lastTimeRewardActiveAt());\\r\\n        \\r\\n        // auto-compounding\\r\\n        if (account != address(0)) {\\r\\n            uint reward = earned(account);\\r\\n\\r\\n            _userRewardPerTokenPaid[account] = _rewardPerToken;\\r\\n            _lastRewardPerTokenPaid = _rewardPerToken;\\r\\n\\r\\n            _userStake[account] += reward;\\r\\n            _totalStake += reward;\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice stake an amount of the ERC20 token\\r\\n    @param amount The amount to stake\\r\\n    */\\r\\n    function stake(uint amount) public whenNotPaused updateReward(msg.sender) {\\r\\n        // checks\\r\\n        require(amount > 0, \\\"Invalid input amount.\\\");\\r\\n\\r\\n        // effects\\r\\n        _totalStake += amount;\\r\\n        _userStake[msg.sender] += amount;\\r\\n\\r\\n        // interactions\\r\\n        require(_token.transferFrom(msg.sender, address(this), amount), \\\"Transfer failed.\\\");\\r\\n\\r\\n        emit Staked(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice create a new pending after withdrawal\\r\\n    @param amount The amount to create pending for\\r\\n    */\\r\\n    function createPending(uint amount) internal {\\r\\n        uint id = unique();\\r\\n        _userPendingIds[msg.sender].push(id);\\r\\n        _userPending[msg.sender][id] = PendingAmount({  \\r\\n            createdAt: uint32(block.timestamp), \\r\\n            fullAmount: uint112(amount), \\r\\n            claimedAmount: 0,\\r\\n            pendingPeriod: pendingPeriod\\r\\n        });\\r\\n\\r\\n        emit PendingCreated(msg.sender, block.timestamp, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice cancel an existing pending\\r\\n    @param index The pending index to cancel\\r\\n    */\\r\\n    function cancelPending(uint index) external whenNotPaused updateReward(msg.sender) {\\r\\n        PendingAmount memory pendingAmount = userPending(msg.sender, index);\\r\\n        uint amount = pendingAmount.fullAmount - pendingAmount.claimedAmount;\\r\\n        deletePending(index);\\r\\n\\r\\n        // effects\\r\\n        _totalStake += amount;\\r\\n        _userStake[msg.sender] += amount;\\r\\n\\r\\n        emit PendingCanceled(msg.sender, pendingAmount.createdAt, pendingAmount.fullAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice delete an existing pending\\r\\n    @param index The pending index to delete\\r\\n    */\\r\\n    function deletePending(uint index) internal {\\r\\n        uint[] storage ids = _userPendingIds[msg.sender];\\r\\n        uint id = ids[index];\\r\\n        ids.remove(index);\\r\\n        delete _userPending[msg.sender][id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice withdraw an amount of the ERC20 token\\r\\n    @notice when you withdraw a pending will be created for that amount\\r\\n    @notice you will be able to claim the pending for after an exact vesting period\\r\\n    @param amount The amount to withdraw\\r\\n    */\\r\\n    function _withdraw(uint amount) internal {\\r\\n        // effects\\r\\n        _totalStake -= amount;\\r\\n        _userStake[msg.sender] -= amount;\\r\\n\\r\\n        createPending(amount);\\r\\n\\r\\n        emit Withdrawn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice withdraw an amount of the ERC20 token\\r\\n    @param amount The amount to withdraw\\r\\n    */\\r\\n    function withdraw(uint amount) external updateReward(msg.sender) {\\r\\n        // checks\\r\\n        require(_userStake[msg.sender] > 0, \\\"User has no active stake.\\\");\\r\\n        require(amount > 0 && _userStake[msg.sender] >= amount, \\\"Invalid input amount.\\\");\\r\\n\\r\\n        // effects\\r\\n        _withdraw(amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice withdraw the full amount of the ERC20 token\\r\\n    */\\r\\n    function withdrawAll() external updateReward(msg.sender) {\\r\\n        // checks\\r\\n        require(_userStake[msg.sender] > 0, \\\"User has no active stake.\\\");\\r\\n\\r\\n        // effects\\r\\n        _withdraw(_userStake[msg.sender]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice get the user claimable pending portion\\r\\n    @param pendingAmount The pending amount metadata to use\\r\\n    */\\r\\n    function getClaimablePendingPortion(PendingAmount memory pendingAmount) private view returns (uint) {\\r\\n        return (block.timestamp - pendingAmount.createdAt) / pendingAmount.pendingPeriod.period; // 0 1 2 3 4\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice update the claiming fee\\r\\n    @param numerator The fee numerator\\r\\n    @param denominator The fee denominator\\r\\n    */\\r\\n    function setFee(uint128 numerator, uint128 denominator) external onlyOwner {\\r\\n        require(denominator != 0, \\\"Denominator must not equal 0.\\\");\\r\\n        fee = Fee(numerator, denominator);\\r\\n        emit FeeUpdated(numerator, denominator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice user can claim a specific pending by index\\r\\n    @param index The pending index to claim\\r\\n    */\\r\\n    function claim(uint index) external {\\r\\n        // checks\\r\\n        uint id = _userPendingIds[msg.sender][index];\\r\\n        PendingAmount storage pendingAmount = _userPending[msg.sender][id];\\r\\n\\r\\n        uint n = getClaimablePendingPortion(pendingAmount);\\r\\n        require(n != 0, \\\"Claim is still pending.\\\");\\r\\n\\r\\n        uint amount;\\r\\n        /**\\r\\n        @notice N is the user claimable pending portion\\r\\n        @notice checking if user N and the user MAX N are greater than or equal\\r\\n        @notice that way we know if want to claim the full amount or just part of it\\r\\n        */\\r\\n        if (n >= pendingAmount.pendingPeriod.repeat) {\\r\\n            amount = pendingAmount.fullAmount - pendingAmount.claimedAmount;\\r\\n        } else {\\r\\n            uint percentage = (n * 1e9) / pendingAmount.pendingPeriod.repeat;\\r\\n            amount = (pendingAmount.fullAmount * percentage) / 1e9 - pendingAmount.claimedAmount;\\r\\n        }\\r\\n        \\r\\n        // effects\\r\\n        /**\\r\\n        @notice pending is completely done\\r\\n        @notice we will remove the pending item\\r\\n        */\\r\\n        if (n >= pendingAmount.pendingPeriod.repeat) {\\r\\n            uint createdAt = pendingAmount.createdAt;\\r\\n            uint fullAmount = pendingAmount.fullAmount;\\r\\n            deletePending(index);\\r\\n            emit PendingFinished(msg.sender, createdAt, fullAmount);\\r\\n        } \\r\\n        /**\\r\\n        @notice pending is partially done\\r\\n        @notice we will update the pending item\\r\\n        */\\r\\n        else {\\r\\n            pendingAmount.claimedAmount += uint112(amount);\\r\\n            emit PendingUpdated(msg.sender, pendingAmount.createdAt, pendingAmount.fullAmount);\\r\\n        }\\r\\n        \\r\\n        // interactions\\r\\n        uint feeAmount = amount * fee.numerator / fee.denominator;\\r\\n        _token.transfer(msg.sender, amount - feeAmount);\\r\\n\\r\\n        emit Claimed(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice owner can add staking rewards\\r\\n    @param _reward The reward amount to add\\r\\n    */\\r\\n    function addReward(uint _reward) external onlyOwner updateReward(address(0)) {\\r\\n        // checks\\r\\n        require(_reward > 0, \\\"Invalid input amount.\\\");\\r\\n\\r\\n        if (block.timestamp > rewardFinishedAt) { // Reward duration finished\\r\\n            rewardRate = uint160(_reward / rewardDuration);\\r\\n        } else {\\r\\n            uint remainingReward = rewardRate * (rewardFinishedAt - block.timestamp);\\r\\n            rewardRate = uint160((remainingReward + _reward) / rewardDuration);\\r\\n        }\\r\\n\\r\\n        // effects\\r\\n        _rewardUpdatedAt = uint32(block.timestamp);\\r\\n        rewardFinishedAt = uint32(block.timestamp + rewardDuration);\\r\\n\\r\\n        // interactions\\r\\n        require(_token.transferFrom(owner(), address(this), _reward), \\\"Transfer failed.\\\");\\r\\n\\r\\n        emit RewardAdded(_reward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice owner can decrease staking rewards only if the duration isn't finished yet\\r\\n    @notice decreasing rewards doesn't alter the reward finish time\\r\\n    @param _reward The reward amount to decrease\\r\\n    */\\r\\n    function decreaseReward(uint _reward) external onlyOwner updateReward(address(0)) {\\r\\n        // checks\\r\\n        require(_reward > 0, \\\"Invalid input amount.\\\");\\r\\n        require(block.timestamp <= rewardFinishedAt, \\\"Reward duration finished.\\\");\\r\\n\\r\\n        uint remainingReward = rewardRate * (rewardFinishedAt - block.timestamp);\\r\\n        require(remainingReward > _reward, \\\"Invalid input amount.\\\");\\r\\n\\r\\n        // effects\\r\\n        rewardRate = uint160((remainingReward - _reward) / (rewardFinishedAt - block.timestamp));\\r\\n        _rewardUpdatedAt = uint32(block.timestamp);\\r\\n\\r\\n        // interactions\\r\\n        _token.transfer(owner(), _reward);\\r\\n\\r\\n        emit RewardDecreased(_reward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice owner can rest all rewards and reward finish time back to 0\\r\\n    */\\r\\n    function resetReward() external onlyOwner updateReward(address(0)) {\\r\\n        if (rewardFinishedAt <= block.timestamp) {\\r\\n            rewardRate = 0;\\r\\n            _rewardUpdatedAt = uint32(block.timestamp);\\r\\n            rewardFinishedAt = uint32(block.timestamp);\\r\\n        } else  {\\r\\n            // checks\\r\\n            uint remainingReward = rewardRate * (rewardFinishedAt - block.timestamp);\\r\\n\\r\\n            // effects\\r\\n            rewardRate = 0;\\r\\n            _rewardUpdatedAt = uint32(block.timestamp);\\r\\n            rewardFinishedAt = uint32(block.timestamp);\\r\\n\\r\\n            // interactions\\r\\n            _token.transfer(owner(), remainingReward);\\r\\n        }\\r\\n\\r\\n        emit RewardReseted();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice owner can update the reward duration\\r\\n    @notice it can only be updated if the old reward duration is already finished\\r\\n    @param _rewardDuration The reward _rewardDuration to use\\r\\n    */\\r\\n    function updateRewardDuration(uint32 _rewardDuration) external onlyOwner {\\r\\n        require(block.timestamp > rewardFinishedAt, \\\"Reward duration must be finalized.\\\");\\r\\n\\r\\n        rewardDuration = _rewardDuration;\\r\\n\\r\\n        emit RewardDurationUpdated(_rewardDuration);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice owner can update the pending period\\r\\n    @notice if we want a vesting period of 28 days 4 times, we can have the repeat as 4 and the period as 7 days\\r\\n    @param repeat The number of times to keep a withdrawal pending \\r\\n    @param period The period between each repeat\\r\\n    */\\r\\n    function updatePendingPeriod(uint128 repeat, uint128 period) external onlyOwner {\\r\\n        pendingPeriod = PendingPeriod(repeat, period);\\r\\n        emit PendingPeriodUpdated(repeat, period);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice owner can pause the staking contract\\r\\n    */\\r\\n    function pause() external whenNotPaused onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @notice owner can resume the staking contract\\r\\n    */\\r\\n    function unpause() external whenPaused onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    event Staked(address indexed account, uint amount);\\r\\n    event PendingCreated(address indexed account, uint createdAt, uint amount);\\r\\n    event PendingUpdated(address indexed account, uint createdAt, uint amount);\\r\\n    event PendingFinished(address indexed account, uint createdAt, uint amount);\\r\\n    event PendingCanceled(address indexed account, uint createdAt, uint amount);\\r\\n    event Withdrawn(address indexed account, uint amount);\\r\\n    event Claimed(address indexed account, uint amount);\\r\\n    event RewardAdded(uint amount);\\r\\n    event RewardDecreased(uint amount);\\r\\n    event RewardReseted();\\r\\n    event RewardDurationUpdated(uint duration);\\r\\n    event PendingPeriodUpdated(uint repeat, uint period);\\r\\n    event FeeUpdated(uint numerator, uint denominator);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SamuraiLegendsStaking/Recoverable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n@title Recoverable\\r\\n@author Leo\\r\\n@notice Recovers stucked BNB or ERC20 tokens\\r\\n@dev You can inhertit from this contract to support recovering stucked tokens or BNB\\r\\n*/\\r\\ncontract Recoverable is Ownable {\\r\\n    /**\\r\\n    @notice Recovers stucked ERC20 token in the contract\\r\\n    @param token An ERC20 token address\\r\\n    */\\r\\n    function recoverERC20(address token, uint amount) external onlyOwner {\\r\\n        IERC20 erc20 = IERC20(token);\\r\\n        require(erc20.balanceOf(address(this)) >= amount, \\\"Invalid input amount.\\\");\\r\\n\\r\\n        erc20.transfer(owner(), amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/SamuraiLegendsStaking/Generatable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n@title Generatable\\r\\n@author Leo\\r\\n@notice Generates a unique id\\r\\n*/\\r\\ncontract Generatable {\\r\\n    uint private id;\\r\\n\\r\\n    /**\\r\\n    @notice Generates a unique id\\r\\n    @return id The newly generated id\\r\\n    */\\r\\n    function unique() internal returns (uint) {\\r\\n        id += 1;\\r\\n        return id;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/SamuraiLegendsStaking/Array.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n@title Array\\r\\n@author Leo\\r\\n@notice Adds utility functions to an array of integers\\r\\n*/\\r\\nlibrary Array {\\r\\n    /**\\r\\n    @notice Removes an array item by index\\r\\n    @dev This is a O(1) time-complexity algorithm without persiting the order\\r\\n    @param array A reference value to the array\\r\\n    @param index An item index to be removed \\r\\n    */\\r\\n    function remove(uint[] storage array, uint index) internal {\\r\\n        require(index < array.length, \\\"Index out of bound.\\\");\\r\\n        array[index] = array[array.length - 1];\\r\\n        array.pop();\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PendingCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PendingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PendingFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repeat\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"PendingPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PendingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RewardReseted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"cancelPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"decreaseReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardActiveAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"repeat\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFinishedAt\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDurationReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"repeat\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"}],\"name\":\"updatePendingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_rewardDuration\",\"type\":\"uint32\"}],\"name\":\"updateRewardDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"userClaimablePendingPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"userPending\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"fullAmount\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"claimedAmount\",\"type\":\"uint112\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"repeat\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"period\",\"type\":\"uint128\"}],\"internalType\":\"struct PendingPeriod\",\"name\":\"pendingPeriod\",\"type\":\"tuple\"}],\"internalType\":\"struct PendingAmount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userPendingIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SamuraiLegendsStaking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003ca994d9f723736381d44388bc8dd1e7ee8c1653", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}