{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Algoblocks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Algoblocks is ERC20 {\\n\\n    enum Role {\\n        NONE,\\n        TEAM,\\n        ADVISORS,\\n        PARTNERSHIPS,\\n        IDO_INVESTORS,\\n        PRIVATE_INVESTORS,\\n        STRATEGIC_INVESTORS,\\n        GRANTS,\\n        MARKETING,\\n        MARKET_MAKERS,\\n        ECOSYSTEM_DEV\\n    }  // Available roles in the contract\\n\\n    struct Holdup {\\n        uint paymentDate;       // When payment has been made\\n        uint256 amount;         // Amount transfered\\n    }\\n\\n    struct VestingPlan {\\n        uint cliff;             // Number of days until linear release of funds\\n        uint vestingMonths;     // Number of months (month = 30.5 days) of vesting release\\n        uint256 dayOneRelease;  // Percentage (in 0.01 units) released on day one - excluded from vesting\\n    }\\n\\n    event TokenGeneration(uint256 amount);\\n    event TransferWithVesting(address to, uint256 amount, uint role);\\n    event ReturnFrom(address account, uint256 amount);\\n\\n    uint private _fullReleaseTimestamp; // Timestamp when all funds are released and no more checks on transfer is needed\\n   \\n    /*\\n    * @dev Total token supply. ALGOBLKs are fixed token supply\\n    */\\n    uint256 public constant TOTAL_SUPPLY = 186_966_000;\\n\\n    /*\\n    * @dev airdrop token supply. Fixed supply to be minted and distributed to owner before the rest at TGE\\n    */\\n    uint256 public constant AIRDROP_SUPPLY = 1_034_000;\\n\\n    /**\\n    * Marks Token generation event\\n    */\\n    bool private _executed = false;\\n\\n    mapping(Role => mapping(address => Holdup)) private _lockedRecipients;\\n    mapping(address => Role) private _lockedMap;\\n    mapping(Role => VestingPlan) private _vestingPlan;\\n\\n    address private _owner;\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"caller is not the owner\\\");\\n        _;\\n    }\\n    modifier executedOnlyOnce(){\\n        require(!_executed, \\\"Tokens have already been generated\\\");\\n        _;\\n    }\\n\\n    constructor(address ownerWallet)\\n    ERC20(\\\"Algoblocks\\\", \\\"ALGOBLK\\\")\\n    {\\n        // Configure Vesting system here\\n        _configurePlan(Role.TEAM, 8 * (30.5 days), 24, 0);\\n        _configurePlan(Role.ADVISORS, 8 * (30.5 days), 24, 0);\\n        _configurePlan(Role.PRIVATE_INVESTORS, (30.5 days), 15, 750);\\n        _configurePlan(Role.STRATEGIC_INVESTORS, 2 * (30.5 days), 18, 250);\\n        _configurePlan(Role.IDO_INVESTORS, 0, 3, 2500);\\n        _configurePlan(Role.MARKETING, (7 days), 12, 0);\\n        _configurePlan(Role.PARTNERSHIPS, (7 days), 24, 0);\\n        _configurePlan(Role.GRANTS, (30.5 days), 12, 0);\\n        _configurePlan(Role.MARKET_MAKERS, (7 days), 12, 0);\\n        _configurePlan(Role.ECOSYSTEM_DEV, (30.5 days), 12, 0);\\n        _owner = ownerWallet;\\n        _mint(_owner, AIRDROP_SUPPLY * (10 ** decimals()));\\n    }\\n\\n    function generateTokens(\\n        address[] memory teamAddresses,\\n        uint256[] memory teamAmounts,\\n        address[] memory advisorsAddresses,\\n        uint256[] memory advisorsAmounts,\\n        address[] memory privateInvestorsAddresses,\\n        uint256[] memory privateInvestorsAmounts,\\n        address[] memory strategicInvestorsAddresses,\\n        uint256[] memory strategicInvestorsAmounts,\\n        address[] memory idoInvestorsAddresses,\\n        uint256[] memory idoInvestorsAmounts\\n    )\\n    external\\n    onlyOwner\\n    executedOnlyOnce \\n    returns (uint256 team, uint256 mintedToOwner) {\\n        _fullReleaseTimestamp = block.timestamp + (30.5 days) * 32;\\n        uint256 supply = TOTAL_SUPPLY * (10 ** decimals());\\n        // Full release after 30 months - team and advisors\\n        uint256 distributedTeamAmount = _distribute(Role.TEAM, teamAddresses, teamAmounts);\\n        supply -= distributedTeamAmount;\\n        supply -= _distribute(Role.ADVISORS, advisorsAddresses, advisorsAmounts);\\n        supply -= _distribute(Role.PRIVATE_INVESTORS, privateInvestorsAddresses, privateInvestorsAmounts);\\n        supply -= _distribute(Role.STRATEGIC_INVESTORS, strategicInvestorsAddresses, strategicInvestorsAmounts);\\n        supply -= _distribute(Role.IDO_INVESTORS, idoInvestorsAddresses, idoInvestorsAmounts);\\n        _mint(_owner, supply);\\n        _executed = true;\\n        emit TokenGeneration(TOTAL_SUPPLY * (10 ** decimals()) - supply);\\n        return (\\n            distributedTeamAmount,\\n            supply\\n        );\\n    }\\n\\n    function burn(uint256 amount) external {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    function transferWithVesting(address to, uint256 amount, uint role) external onlyOwner {\\n        require(_lockedMap[to] == Role.NONE, \\\"Recipient already received vested money\\\");\\n\\n        _transfer(_msgSender(), to, amount);\\n\\n        Role r = _toRole(role);\\n        _lockedMap[to] = r;\\n        _lockedRecipients[r][to].amount = amount;\\n        _lockedRecipients[r][to].paymentDate = block.timestamp;\\n\\n        uint256 finalReleaseDate = _fullReleaseDateForRole(r, to);\\n        if (finalReleaseDate > _fullReleaseTimestamp) {\\n            _fullReleaseTimestamp = finalReleaseDate;\\n        }\\n        emit TransferWithVesting(to, amount, role);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n\\n        // If we haven't reached a global deadline, we need to make additional checks\\n        if (to != _owner && block.timestamp < _fullReleaseTimestamp) {\\n\\n            // First, if sender is in the group of locked recipients\\n            if (_lockedMap[from] != Role.NONE) {\\n\\n                // Now we know how much money owner has available\\n                uint256 availableFunds = balanceOf(from) - _amountLocked(from);\\n\\n                // Time to check if the transfer does not exceed the amount available\\n                require(amount <= availableFunds, \\\"Tokens are locked accordingly to your vesting plan.\\\");\\n            }\\n        }\\n\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    function _toRole(uint roleId) private pure returns (Role) {\\n        require(roleId >= 0, \\\"Role Id too small\\\");\\n        require(roleId <= 10, \\\"Role Id too big\\\");\\n\\n        if (roleId == 1) {\\n            return Role.TEAM;\\n        } else if (roleId == 2) {\\n            return Role.ADVISORS;\\n        } else if (roleId == 3) {\\n            return Role.PARTNERSHIPS;\\n        } else if (roleId == 4) {\\n            return Role.IDO_INVESTORS;\\n        } else if (roleId == 5) {\\n            return Role.PRIVATE_INVESTORS;\\n        } else if (roleId == 6) {\\n            return Role.STRATEGIC_INVESTORS;\\n        } else if (roleId == 7) {\\n            return Role.GRANTS;\\n        } else if (roleId == 8) {\\n            return Role.MARKETING;\\n        } else if (roleId == 9) {\\n            return Role.MARKET_MAKERS;\\n        } else if (roleId == 10) {\\n            return Role.ECOSYSTEM_DEV;\\n        }\\n        return Role.NONE;\\n    }\\n\\n    function _configurePlan(Role role, uint cliff, uint vestingMonths, uint dayOneRelease) private {\\n        _vestingPlan[role].cliff = cliff;\\n        _vestingPlan[role].vestingMonths = vestingMonths;\\n        _vestingPlan[role].dayOneRelease = dayOneRelease;\\n    }\\n\\n    function lockedBalanceOf(address account) external view returns (uint256) {\\n        return _amountLocked(account);\\n    }\\n\\n    function returnFrom(address account) external onlyOwner returns (uint256) {\\n        Role role = _lockedMap[account];\\n\\n        require(role == Role.TEAM, 'account is not a team holder');\\n\\n        uint256 lockedAmount = _amountLocked(account);\\n\\n        if (lockedAmount > 0) {\\n            _transfer(account, _owner, lockedAmount);\\n            _lockedRecipients[role][account].paymentDate = 0;\\n            _lockedRecipients[role][account].amount = 0;\\n            _lockedMap[account] = Role.NONE;\\n        }\\n        emit ReturnFrom(account, lockedAmount);\\n        return lockedAmount;\\n    }\\n\\n    function _amountLocked(address account) private view returns (uint256) {\\n\\n        Role role = _lockedMap[account];\\n\\n        if (role == Role.NONE) {\\n            return 0;\\n        }\\n\\n        // Checking how much was initially transfered and locked\\n        uint256 amountLocked = _lockedRecipients[role][account].amount;\\n\\n        // First, substract tokens released on TGE\\n        amountLocked -= (_vestingPlan[role].dayOneRelease * amountLocked) / 10000;\\n\\n        // Only if cliff timestamp has been reached we can calculate further\\n        uint256 cliff = _lockedRecipients[role][account].paymentDate + _vestingPlan[role].cliff;\\n        if (block.timestamp > cliff) {\\n            // To check how much money one can use we need to divide time passed since the cliff by number of months\\n            \\n            uint256 monthsPassed = (block.timestamp - cliff) / (30.5 days);\\n            if (monthsPassed < _vestingPlan[role].vestingMonths) {\\n                amountLocked -= (amountLocked / _vestingPlan[role].vestingMonths) * monthsPassed;\\n            } else {\\n                amountLocked = 0;\\n            }\\n        }\\n\\n        return amountLocked;\\n    }\\n\\n\\n    function _distribute(Role role,\\n        address[] memory addresses,\\n        uint256[] memory amounts) private returns (uint256) {\\n        require(addresses.length == amounts.length, \\\"Wrong number of members\\\");\\n        uint256 used = 0;\\n        for (uint i = 0; i < addresses.length; i++) {\\n            uint256 amount = amounts[i] * (10 ** decimals());\\n            _mint(addresses[i], amount);\\n            used += amount;\\n            _lockedRecipients[role][addresses[i]].paymentDate = block.timestamp;\\n            _lockedRecipients[role][addresses[i]].amount = amount;\\n            _lockedMap[addresses[i]] = role;\\n        }\\n\\n        return used;\\n    }\\n\\n    function _fullReleaseDateForRole(Role role, address account) private view returns (uint) {\\n        return _lockedRecipients[role][account].paymentDate + _vestingPlan[role].cliff + _vestingPlan[role].vestingMonths * (30.5 days);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReturnFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenGeneration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"TransferWithVesting\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AIRDROP_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"teamAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"teamAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"advisorsAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"advisorsAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"privateInvestorsAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"privateInvestorsAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"strategicInvestorsAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"strategicInvestorsAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"idoInvestorsAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"idoInvestorsAmounts\",\"type\":\"uint256[]\"}],\"name\":\"generateTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedToOwner\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"returnFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"transferWithVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Algoblocks", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003c552711a60db74de4bb8a659b68cd4f833a310f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}