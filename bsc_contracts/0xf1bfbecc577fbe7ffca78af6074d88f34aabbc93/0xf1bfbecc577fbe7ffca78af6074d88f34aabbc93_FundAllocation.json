{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\ncontract FundAllocation {\r\n    address public manager;\r\n    IERC20 public erc20Token; // The ERC-20 token contract\r\n    mapping(address => uint256) public allocations;\r\n    uint256 public totalAllocatedFunds; // New state variable for total allocated funds\r\n\r\n    event AllocationUpdated(address indexed recipient, uint256 amount);\r\n    event FundsWithdrawn(address indexed recipient, uint256 amount);\r\n    event FundsDrained(uint256 amount);\r\n    event AllocationAmountUpdated(address indexed recipient, uint256 newAmount);\r\n    event EmergencyWithdraw(address indexed recipient, uint256 amount);\r\n\r\n    constructor(address _tokenAddress) {\r\n        manager = msg.sender;\r\n        erc20Token = IERC20(_tokenAddress);\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(\r\n            msg.sender == manager,\r\n            \"Only the manager can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    \r\n\r\n    function allocateFunds(\r\n        address[] calldata recipients,\r\n        uint256[] calldata amounts\r\n    ) external onlyManager {\r\n        require(\r\n            recipients.length == amounts.length,\r\n            \"Array lengths do not match\"\r\n        );\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            address recipient = recipients[i];\r\n            uint256 amount = amounts[i];\r\n            require(recipient != address(0), \"Invalid recipient address\");\r\n            require(amount > 0, \"Allocation amount must be greater than zero\");\r\n            allocations[recipient] += amount;\r\n            totalAllocatedFunds += amount; // Update total allocated funds\r\n            emit AllocationUpdated(recipient, allocations[recipient]);\r\n        }\r\n    }\r\n\r\n    function withdrawFunds(uint256 amount_) external {\r\n        require(allocations[msg.sender] >= amount_ && amount_ > 0, \"No funds to withdraw\");\r\n        allocations[msg.sender] -= amount_;\r\n        totalAllocatedFunds -= amount_; // Update total allocated funds\r\n        require(erc20Token.transferFrom(manager,msg.sender, amount_), \"Transfer failed\");\r\n        emit FundsWithdrawn(msg.sender, amount_);\r\n    }\r\n\r\n    function getAllocatedFunds(address recipient)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allocations[recipient];\r\n    }\r\n\r\n    function changeManager(address newManager) external onlyManager {\r\n        require(newManager != address(0), \"Invalid manager address\");\r\n        manager = newManager;\r\n    }\r\n\r\n    function getContractBalance() external view returns (uint256) {\r\n        return erc20Token.balanceOf(address(this));\r\n    }\r\n\r\n    function drainTotalFunds() external onlyManager {\r\n        uint256 totalBalance = erc20Token.balanceOf(address(this));\r\n        require(totalBalance > 0, \"No funds to drain\");\r\n        require(erc20Token.transfer(manager, totalBalance), \"Drain failed\");\r\n        emit FundsDrained(totalBalance);\r\n    }\r\n\r\n    function updateAllocationAmount(address recipient, uint256 newAmount) external onlyManager {\r\n        require(recipient != address(0), \"Invalid recipient address\");\r\n        require(newAmount > 0, \"Allocation amount must be greater than zero\");\r\n        totalAllocatedFunds -= allocations[recipient]; // Update total allocated funds\r\n        totalAllocatedFunds += newAmount;\r\n        allocations[recipient] = newAmount;\r\n        emit AllocationAmountUpdated(recipient, newAmount);\r\n    }\r\n\r\n   function emergencyWithdraw(uint256 amount) external onlyManager {\r\n    require(amount > 0, \"Withdraw amount must be greater than zero\");\r\n    require(amount + totalAllocatedFunds <= erc20Token.balanceOf(address(this)), \"Withdraw amount exceeds total allocated funds\");\r\n    require(erc20Token.transfer(manager, amount), \"Emergency withdraw failed\");\r\n    emit EmergencyWithdraw(manager, amount);\r\n}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"AllocationAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AllocationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsDrained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"allocateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"changeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainTotalFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getAllocatedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocatedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateAllocationAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FundAllocation", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d", "EVMVersion": "london", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3c8a036b9c0b6c9103431d3ed25874a1718d3c5757e91b0db75122066c17de5c"}