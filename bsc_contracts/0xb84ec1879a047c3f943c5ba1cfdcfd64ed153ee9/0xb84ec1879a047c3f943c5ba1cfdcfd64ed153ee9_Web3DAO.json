{"SourceCode": "// SPDX-License-Identifier: Unlicense\r\npragma solidity >=0.8.9;\r\n\r\ncontract Web3DAO {\r\n    function stringCompare(string memory str1, string memory str2) public pure returns (bool) {\r\n        return keccak256(abi.encodePacked(str1)) == keccak256(abi.encodePacked(str2));\r\n    }\r\n\r\n    event SafeTransferEvent(address indexed previousSafe, address indexed newSafe);\r\n    event SetManagerEvent(address indexed previousManager, address indexed newManager);\r\n    event EnrollEvent(address indexed userAddress, address indexed uplineAddress);\r\n    event InvestEvent(address indexed userAddress, uint256 amount, uint256 rate, uint256 convertedAmount);\r\n    event Web3AIEvent(address indexed toAddress, uint256 amount, uint256 percentage);\r\n    event PayoutEvent(address indexed toAddress, uint256 amount, uint status);\r\n    event SafeTransferCoinEvent(address indexed toAddress, uint256 amount, uint status);\r\n    event Web3AIAddrEvent(address indexed fromAddress, address indexed toAddress, uint oldPercent, uint newPercent);\r\n    event ChangePcpPoolDurationEvent(uint oldDuration, uint newDuration);\r\n\r\n    struct User {\r\n        uint id;\r\n        address addr;\r\n        uint uplineID;\r\n    }\r\n\r\n    struct TreeSponsor {\r\n        uint userID;\r\n        uint uplineID;\r\n        uint level;\r\n    }\r\n\r\n    struct UserPortfolio {\r\n        uint id;\r\n        uint userID;\r\n        uint256 amount;\r\n        uint256 rate;\r\n    }\r\n\r\n    address private owner;\r\n    address private manager;\r\n    address private web3AIAddr;\r\n\r\n    mapping (uint => User) private userAry;\r\n    mapping (address => uint) private addressIDAry;\r\n    mapping (uint => TreeSponsor) private treeSponsorAry;\r\n    mapping (uint => UserPortfolio) private portfolioAry;\r\n    mapping (uint => uint[]) private userPortfolioAry;\r\n\r\n    uint private userID;\r\n    uint private portfolioID;\r\n    uint private pcpPoolEndTime;\r\n    uint private pcpPoolDuration;\r\n    uint256 private web3AIPercent;\r\n    uint256 private diffPercent;\r\n    uint256 private maxAmount;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == manager, \"Not manager\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrManager() {\r\n        require((msg.sender == owner) || (msg.sender == manager), \"Only for owner or manager\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = payable(msg.sender);\r\n        manager = payable(msg.sender);\r\n        web3AIAddr = 0x2FB8395f1beFb63F65d8F2932EeB5774009576F7;\r\n        userID = 1000000;\r\n        portfolioID = 1000000;\r\n        pcpPoolDuration = 24 hours;\r\n        web3AIPercent = (0.15 * 1 ether);\r\n        diffPercent = (0.01 * 1 ether);\r\n        maxAmount = (50 * 1 ether);\r\n\r\n        User memory userData = User({\r\n            id: userID,\r\n            addr: owner,\r\n            uplineID: 0\r\n        });\r\n\r\n        userAry[userID] = userData;\r\n        addressIDAry[owner] = userID;\r\n\r\n        TreeSponsor memory treeSponsorData = TreeSponsor({\r\n            userID: userID,\r\n            uplineID: 0,\r\n            level: 0\r\n        });\r\n\r\n        treeSponsorAry[userID] = treeSponsorData;\r\n\r\n        userID++;\r\n    }\r\n\r\n    function safeTransfer(address _safe) public onlyOwner {\r\n        address oldSafe = owner;\r\n        owner = _safe;\r\n        emit SafeTransferEvent(oldSafe, _safe);\r\n    }\r\n\r\n    function setManager(address _manager) public onlyOwnerOrManager {\r\n        address oldManager = manager;\r\n        manager = _manager;\r\n        emit SetManagerEvent(oldManager, _manager);\r\n    }\r\n\r\n    function checkUpline(address uplineAddress) public view returns (bool) {\r\n        uint uplineID = addressIDAry[uplineAddress];\r\n\r\n        if (uplineID == 0) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function enroll(address uplineAddress) public {\r\n        uint uplineID = addressIDAry[uplineAddress];\r\n        uint uplineLevel = treeSponsorAry[uplineID].level;\r\n\r\n        require(addressIDAry[msg.sender] == 0, \"User existed\");\r\n        require(uplineID != 0, \"Upline not exist\");\r\n        require(msg.sender != uplineAddress, \"Upline cannot be self\");\r\n\r\n        User memory userData = User({\r\n            id: userID,\r\n            addr: msg.sender,\r\n            uplineID: uplineID\r\n        });\r\n\r\n        userAry[userID] = userData;\r\n        addressIDAry[msg.sender] = userID;\r\n\r\n        TreeSponsor memory treeSponsorData = TreeSponsor({\r\n            userID: userID,\r\n            uplineID: uplineID,\r\n            level: (uplineLevel + 1)\r\n        });\r\n\r\n        treeSponsorAry[userID] = treeSponsorData;\r\n\r\n        emit EnrollEvent(msg.sender, uplineAddress);\r\n\r\n        userID++;\r\n    }\r\n\r\n    function invest(uint256 amount, uint256 rate) public payable {\r\n        uint _userID = addressIDAry[msg.sender];\r\n        uint256 reentryAmount = msg.value;\r\n\r\n        require(_userID != 0, \"User not exist\");\r\n\r\n        uint256 calAmount = ((reentryAmount * rate) / 1 ether);\r\n        uint256 diffAmount = ((amount * diffPercent) / 1 ether);\r\n        require((calAmount >= (amount - diffAmount) && calAmount <= (amount + diffAmount)), \"The rate is invalid\");\r\n\r\n        UserPortfolio memory userPortfolioData = UserPortfolio({\r\n            id: portfolioID,\r\n            userID: _userID,\r\n            amount: amount,\r\n            rate: rate\r\n        });\r\n\r\n        portfolioAry[portfolioID] = userPortfolioData;\r\n        userPortfolioAry[_userID].push(portfolioID);\r\n\r\n        emit InvestEvent(msg.sender, amount, rate, reentryAmount);\r\n\r\n        uint256 web3AIAmount = (amount * web3AIPercent);\r\n        uint256 web3AIValue = (web3AIAmount / rate);\r\n        payable(web3AIAddr).transfer(web3AIValue);\r\n\r\n        emit Web3AIEvent(web3AIAddr, web3AIValue, web3AIPercent);\r\n\r\n        pcpPoolEndTime = (block.timestamp + pcpPoolDuration);\r\n    }\r\n\r\n    function getPcpPoolEndTime() public view returns (uint) {\r\n        return pcpPoolEndTime;\r\n    }\r\n\r\n    function payout(address[] calldata addressAry, uint256[] calldata amountAry) public onlyManager payable {\r\n        require(addressAry.length < 10, \"Only 10 addresses at once\");\r\n\r\n        uint256 balance = address(this).balance;\r\n\r\n        for (uint i = 0; i < addressAry.length; i++) {\r\n            address userAddress = addressAry[i];\r\n            uint256 amount = amountAry[i];\r\n            uint _userID = addressIDAry[userAddress];\r\n            uint status = 0;\r\n\r\n            if (_userID != 0 && balance > 0) {\r\n                if (amount > maxAmount) {\r\n                    status = 3;\r\n                    emit PayoutEvent(userAddress, amount, status);\r\n                    continue;\r\n\r\n                } else if (balance >= amount) {\r\n                    status = 1;\r\n                    \r\n                } else {\r\n                    amount = balance;\r\n                    status = 2;\r\n                }\r\n\r\n                balance -= amount;\r\n                payable(userAddress).transfer(amount);\r\n            }\r\n            emit PayoutEvent(userAddress, amount, status);\r\n        }\r\n    }\r\n\r\n    function safeTransferCoin(address _address, uint256 _amount) public onlyOwner payable {\r\n        uint256 balance = address(this).balance;\r\n        uint _status = 0;\r\n\r\n        if (balance > 0 && balance >= _amount) {\r\n            _status = 1;\r\n            payable(_address).transfer(_amount);\r\n        }\r\n        emit SafeTransferCoinEvent(_address, _amount, _status);\r\n    }\r\n    \r\n    function getManager() public onlyOwnerOrManager view returns (address) {\r\n        return manager;\r\n    }\r\n\r\n    function getUser(address _address) public view returns (uint, address, uint) {\r\n        uint _userID = addressIDAry[_address];\r\n        return (userAry[_userID].id, userAry[_userID].addr, userAry[_userID].uplineID);\r\n    }\r\n\r\n    function getTreeSponsor(address _address) public view returns (uint, uint, uint) {\r\n        uint _userID = addressIDAry[_address];\r\n        return (treeSponsorAry[_userID].userID, treeSponsorAry[_userID].uplineID, treeSponsorAry[_userID].level);\r\n    }\r\n\r\n    function getAllUserPortfolio(address _address) public view returns (uint[] memory) {\r\n        uint _userID = addressIDAry[_address];\r\n        return userPortfolioAry[_userID];\r\n    }\r\n\r\n    function getUserPortfolio(uint _portfolioID) public view returns (uint, uint, uint256, uint256) {\r\n        return (portfolioAry[_portfolioID].id, portfolioAry[_portfolioID].userID, portfolioAry[_portfolioID].amount, portfolioAry[_portfolioID].rate);\r\n    }\r\n\r\n    function getWeb3AI() public view returns (address, uint256) {\r\n        return (web3AIAddr, web3AIPercent);\r\n    }\r\n\r\n    function changeWeb3AI(address _address, uint256 _percentage) public onlyOwner {\r\n        address oldWeb3AIAddr = web3AIAddr;\r\n        uint256 oldWeb3AIPercent = web3AIPercent;\r\n        web3AIAddr = _address;\r\n        web3AIPercent = _percentage;\r\n        emit Web3AIAddrEvent(oldWeb3AIAddr, _address, oldWeb3AIPercent, _percentage);\r\n    }\r\n\r\n    function getPcpPoolDuration() public view returns (uint) {\r\n        return pcpPoolDuration;\r\n    }\r\n\r\n    function changePcpPoolDuration(uint duration) public onlyManager {\r\n        uint oldDuration = pcpPoolDuration;\r\n        pcpPoolDuration = duration;\r\n        emit ChangePcpPoolDurationEvent(oldDuration, duration);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"ChangePcpPoolDurationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uplineAddress\",\"type\":\"address\"}],\"name\":\"EnrollEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"convertedAmount\",\"type\":\"uint256\"}],\"name\":\"InvestEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"PayoutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"SafeTransferCoinEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSafe\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSafe\",\"type\":\"address\"}],\"name\":\"SafeTransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"SetManagerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"Web3AIAddrEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"Web3AIEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"changePcpPoolDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"changeWeb3AI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uplineAddress\",\"type\":\"address\"}],\"name\":\"checkUpline\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uplineAddress\",\"type\":\"address\"}],\"name\":\"enroll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAllUserPortfolio\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPcpPoolDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPcpPoolEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTreeSponsor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_portfolioID\",\"type\":\"uint256\"}],\"name\":\"getUserPortfolio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeb3AI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressAry\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountAry\",\"type\":\"uint256[]\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safe\",\"type\":\"address\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeTransferCoin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"str2\",\"type\":\"string\"}],\"name\":\"stringCompare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "Web3DAO", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://41742386769da8011aff20f6fcdcd322b1ad6ebb6913b0e7a3d34761d17e73c2"}