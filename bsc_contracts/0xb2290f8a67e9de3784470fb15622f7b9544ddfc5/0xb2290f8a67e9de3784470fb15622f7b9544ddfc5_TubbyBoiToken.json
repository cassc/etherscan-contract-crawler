{"SourceCode": "/**\r\n  TubbyBoi.com  Discord : https://discord.gg/cq6VgSsC7S\r\n\r\n  Powered ChainLink\u2122.\r\n\r\n  ## TubbyBoi features:\r\n  - 10% buy/sell/transfer fee, where:\r\n     5% is added to the Jackpot, to be distributed once a day\r\n     3% is distributed to holders\r\n     2 % go to burn address\r\n\r\n  Total Supply: 1,000,000,000,000,000 (10^15)\r\n  - 57% to liqudity.\r\n  - 30% is burned at the start.\r\n  - 9% is distributed among our team of developers and artists.\r\n  - 4% goes towards airdrops.\r\n  \r\n  - For every time you buy or receive TUBBY you get an entry in the jackpot. Make separate purchases to get more than 1 entry. Minimum quantity per entry: (100,000,000)(10^8)\r\n  - If you sell or transfer your tokens you will never be eligible. If a ineligible address \r\n  - If the winner of a jackpot is someone who previously sold his tokens, the prize will accumulate to next round and his address will be permanently remembered on the immutable blockchain ledger.\r\n  - Transfers to the Charity, Marketing or Burn addresses don't apply to this rule.\r\n  - Transfers to the Charity and Marketing get you 2x the entries if over (100,000,000)\r\n\r\n\r\n  ## HODLING\r\n  If the randomly selected winner has sold any TubbyBoi, the prize pool\r\n  is not distributed. Addresses can donate to burn, marketing, and charity\r\n  addresses ONLY without ruining their chances of winning. Any sell, transfer,\r\n  or send to any other address means your address will one day be on the dapp\r\n  leaderboard with how much you could have won had you HODLed.\r\n\r\n  ## REFLECTION SYSTEM\r\n  You can be added to the reflection system by buying a set number of\r\n  TubbyBoi at a time. Make separate purchases to get more than 1 entry.\r\n  Entries are permanent and can receive distributions any number of times,\r\n  until the address sells or transfers any TubbyBoi to an unspecified address.\r\n  _minimumTokensForReflection can be changed as needed to keep the entry price\r\n  attainable.\r\n\r\n  ## PAYOUTS\r\n  Contract pays currentReflection once a day, until it runs out of LINK.\r\n  Then the currentReflection accrues 5% fees, until someone donates 0.2 LINK\r\n  into this contract to initiate a distribution. This LINK fee goes towards\r\n  paying Chainlink for a verifiable random number, on which we determine\r\n  the recipient.\r\n\r\n  ## RANDOM BURNS\r\n  TubbyBoi deflates itself every time the 0xdead address gets the reflection.\r\n  We grant 1/100 entries to the dead address to ensure we burn at least ~1% of\r\n  prizes. When 0xdead wins, it makes tokens scarcer for all holders. 0xdead starts with 0 entries.\r\n\r\n  It is up to the community to decide the fate of TubbyBoi, from the\r\n  frequency of reflection distributions, to the rate at which it is burned.\r\n*/\r\n\r\n// Sources flattened with hardhat v2.2.1 https://hardhat.org\r\n\r\n// File @chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol@v0.1.7\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathChainlink {\r\n  /**\r\n    * @dev Returns the addition of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `+` operator.\r\n    *\r\n    * Requirements:\r\n    * - Addition cannot overflow.\r\n    */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    * - Subtraction cannot overflow.\r\n    */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `*` operator.\r\n    *\r\n    * Requirements:\r\n    * - Multiplication cannot overflow.\r\n    */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the integer division of two unsigned integers. Reverts on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * Reverts when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    * - The divisor cannot be zero.\r\n    */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"SafeMath: modulo by zero\");\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol@v0.1.7\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface LinkTokenInterface {\r\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n  function approve(address spender, uint256 value) external returns (bool success);\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n  function decimals() external view returns (uint8 decimalPlaces);\r\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\r\n  function increaseApproval(address spender, uint256 subtractedValue) external;\r\n  function name() external view returns (string memory tokenName);\r\n  function symbol() external view returns (string memory tokenSymbol);\r\n  function totalSupply() external view returns (uint256 totalTokensIssued);\r\n  function transfer(address to, uint256 value) external returns (bool success);\r\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.6/VRFRequestIDBase.sol@v0.1.7\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract VRFRequestIDBase {\r\n\r\n  /**\r\n   * @notice returns the seed which is actually input to the VRF coordinator\r\n   *\r\n   * @dev To prevent repetition of VRF output due to repetition of the\r\n   * @dev user-supplied seed, that seed is combined in a hash with the\r\n   * @dev user-specific nonce, and the address of the consuming contract. The\r\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\r\n   * @dev the final seed, but the nonce does protect against repetition in\r\n   * @dev requests which are included in a single block.\r\n   *\r\n   * @param _userSeed VRF seed input provided by user\r\n   * @param _requester Address of the requesting contract\r\n   * @param _nonce User-specific nonce at the time of the request\r\n   */\r\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\r\n    address _requester, uint256 _nonce)\r\n    internal pure returns (uint256)\r\n  {\r\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the id for this request\r\n   * @param _keyHash The serviceAgreement ID to be used for this request\r\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\r\n   * @return The id for this request\r\n   *\r\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\r\n   * @dev contract, but the one generated by makeVRFInputSeed\r\n   */\r\n  function makeRequestId(\r\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n  }\r\n}\r\n\r\n\r\n// File @chainlink/contracts/src/v0.6/VRFConsumerBase.sol@v0.1.7\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\r\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\r\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\r\n * @dev want to generate randomness from.\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomness method.\r\n *\r\n * @dev The randomness argument to fulfillRandomness is the actual random value\r\n * @dev generated from your seed.\r\n *\r\n * @dev The requestId argument is generated from the keyHash and the seed by\r\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\r\n * @dev requests open, you can use the requestId to track which seed is\r\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\r\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.)\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ. (Which is critical to making unpredictable randomness! See the\r\n * @dev next section.)\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\r\n * @dev block in which the request is made, user-provided seeds have no impact\r\n * @dev on its economic security properties. They are only included for API\r\n * @dev compatability with previous versions of this contract.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request.\r\n */\r\nabstract contract VRFConsumerBase is VRFRequestIDBase {\r\n\r\n  using SafeMathChainlink for uint256;\r\n\r\n  /**\r\n   * @notice fulfillRandomness handles the VRF response. Your contract must\r\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n   * @notice principles to keep in mind when implementing your fulfillRandomness\r\n   * @notice method.\r\n   *\r\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\r\n   * @dev signature, and will call it once it has verified the proof\r\n   * @dev associated with the randomness. (It is triggered via a call to\r\n   * @dev rawFulfillRandomness, below.)\r\n   *\r\n   * @param requestId The Id initially returned by requestRandomness\r\n   * @param randomness the VRF output\r\n   */\r\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\r\n    internal virtual;\r\n\r\n  /**\r\n   * @notice requestRandomness initiates a request for VRF output given _seed\r\n   *\r\n   * @dev The fulfillRandomness method receives the output, once it's provided\r\n   * @dev by the Oracle, and verified by the vrfCoordinator.\r\n   *\r\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\r\n   * @dev the _fee must exceed the fee specified during registration of the\r\n   * @dev _keyHash.\r\n   *\r\n   * @dev The _seed parameter is vestigial, and is kept only for API\r\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\r\n   * @dev your own randomness, here, but it's not necessary because the VRF\r\n   * @dev oracle will mix the hash of the block containing your request into the\r\n   * @dev VRF seed it ultimately uses.\r\n   *\r\n   * @param _keyHash ID of public key against which randomness is generated\r\n   * @param _fee The amount of LINK to send with the request\r\n   * @param _seed seed mixed into the input of the VRF.\r\n   *\r\n   * @return requestId unique ID for this request\r\n   *\r\n   * @dev The returned requestId can be used to distinguish responses to\r\n   * @dev concurrent requests. It is passed as the first argument to\r\n   * @dev fulfillRandomness.\r\n   */\r\n  function requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed)\r\n    internal returns (bytes32 requestId)\r\n  {\r\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));\r\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\r\n    // the hash of the block containing this request to obtain the seed/input\r\n    // which is finally passed to the VRF cryptographic machinery.\r\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, _seed, address(this), nonces[_keyHash]);\r\n    // nonces[_keyHash] must stay in sync with\r\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\r\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\r\n    // This provides protection against the user repeating their input seed,\r\n    // which would result in a predictable/duplicate output, if multiple such\r\n    // requests appeared in the same block.\r\n    nonces[_keyHash] = nonces[_keyHash].add(1);\r\n    return makeRequestId(_keyHash, vRFSeed);\r\n  }\r\n\r\n  LinkTokenInterface immutable internal LINK;\r\n  address immutable private vrfCoordinator;\r\n\r\n  // Nonces for each VRF key from which randomness has been requested.\r\n  //\r\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\r\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\r\n\r\n  /**\r\n   * @param _vrfCoordinator address of VRFCoordinator contract\r\n   * @param _link address of LINK token contract\r\n   *\r\n   * @dev https://docs.chain.link/docs/link-token-contracts\r\n   */\r\n  constructor(address _vrfCoordinator, address _link) public {\r\n    vrfCoordinator = _vrfCoordinator;\r\n    LINK = LinkTokenInterface(_link);\r\n  }\r\n\r\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n  // the origin of the call\r\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\r\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n    fulfillRandomness(requestId, randomness);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/tubbyboi.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    // Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    // Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(now > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\ncontract VRFCoordinatorMock {\r\n\r\n    LinkTokenInterface public LINK;\r\n\r\n    event RandomnessRequest(address indexed sender, bytes32 indexed keyHash, uint256 indexed seed);\r\n\r\n    constructor(address linkAddress) public {\r\n        LINK = LinkTokenInterface(linkAddress);\r\n    }\r\n\r\n    function onTokenTransfer(address sender, uint256 fee, bytes memory _data)\r\n        public\r\n        onlyLINK\r\n    {\r\n        (bytes32 keyHash, uint256 seed) = abi.decode(_data, (bytes32, uint256));\r\n        emit RandomnessRequest(sender, keyHash, seed);\r\n    }\r\n\r\n    function callBackWithRandomness(\r\n        bytes32 requestId,\r\n        uint256 randomness,\r\n        address consumerContract\r\n    ) public {\r\n        VRFConsumerBase v;\r\n        bytes memory resp = abi.encodeWithSelector(v.rawFulfillRandomness.selector, requestId, randomness);\r\n        uint256 b = 206000;\r\n        require(gasleft() >= b, \"not enough gas for consumer\");\r\n        (bool success,) = consumerContract.call(resp);\r\n    }\r\n\r\n    modifier onlyLINK() {\r\n        require(msg.sender == address(LINK), \"Must use LINK token\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract VRFCoordinator is VRFCoordinatorMock {\r\n\r\n    bytes32 internal keyHash;\r\n    uint256 internal fee;\r\n    address internal requester;\r\n    uint256 public randomResult;\r\n    uint256 public currentLotteryId;\r\n\r\n    constructor(\r\n        address _linkToken,\r\n        bytes32 _keyHash,\r\n        uint256 _fee\r\n    )\r\n        VRFCoordinatorMock(\r\n            _linkToken\r\n        ) public\r\n    {\r\n        keyHash = _keyHash;\r\n        fee = _fee;\r\n    }\r\n}\r\n\r\ncontract TubbyBoi is Context, IERC20, Ownable, VRFConsumerBase {\r\n    // i really wanted to rename this DangerMath but its inherited from VRFConsumerBase :(\r\n    // using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private _totalReceived;\r\n    mapping (address => uint256) private _totalWon;\r\n    mapping (address => uint256) private _numberOfReflectionEntries;\r\n    address[] private _allReflectionAddresses;\r\n\r\n    uint256 previousJackpot;\r\n    address previousWinner;\r\n\r\n    uint256 lotteryLastRun = now;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    uint256 public _maxTxAmount = 5000000 * 10**6 * 10**9;\r\n    uint256 public _minimumTokensForReflection = 10**8 * 10**9;\r\n    uint256 private _tokenTotal = 1000000000 * 10**6 * 10**9;\r\n\r\n    string private _name = \"TubbyBoi.com\";\r\n    string private _symbol = \"TUBBY\";\r\n    uint8 private _decimals = 9;\r\n\r\n    uint256 private _randNonce = 0;\r\n    uint256 private _totalReflected = 0;\r\n    uint256 private _currentReflection = 0;\r\n    uint256 private _reflectionFee = 5;\r\n\r\n    uint256 private _redistributionPool = 0;\r\n    uint256 private _redistributionFee = 3;\r\n    mapping(address => uint256) private _redistributionPoolAtLastSync;\r\n\r\n    uint256 private _burnFee = 2;\r\n\r\n    address public uniswapV2Pair;\r\n    address public charityAddress;\r\n    address public marketingAddress;\r\n    address public burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    bool _inDistribution;\r\n    bool public lockThePayout = false;\r\n\r\n    bytes32 internal keyHash;\r\n    uint256 internal linkFee;\r\n\r\n    event RequestedRandomness(uint256 time);\r\n    event ReflectionRecipient(uint256 time, address recipient, uint256 currentReflection, bool isWinner);\r\n    event HaveFunStayingPoor(uint256 time, address recipient, uint256 missedWinnings);\r\n    event CurrentReflection(uint256 time, uint256 currentReflection);\r\n    event CurrentRedistribution(uint256 time, uint256 _redistributionPool);\r\n    event TotalReflected(uint256 time, uint256 totalReflected);\r\n    event AddedReflectionEntry(address recipient);\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n\r\n    constructor (\r\n      address _vrfCoordinator,\r\n      address _linkToken,\r\n      bytes32 _keyHash,\r\n      address _charityAddress,\r\n      address _marketingAddress\r\n    ) VRFConsumerBase(_vrfCoordinator, _linkToken) public {\r\n        keyHash = _keyHash;\r\n        linkFee = 0.2 * 10 ** 18;\r\n\r\n        _balances[_msgSender()] = _tokenTotal;\r\n        _totalReceived[_msgSender()] = _tokenTotal;\r\n\r\n        charityAddress = _charityAddress;\r\n        marketingAddress = _marketingAddress;\r\n\r\n        // exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tokenTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tokenTotal;\r\n    }\r\n\r\n    function totalReflectionEntries() public view returns (uint256) {\r\n        return _allReflectionAddresses.length;\r\n    }\r\n\r\n    function totalReflected() public view returns (uint256) {\r\n        return _totalReflected;\r\n    }\r\n\r\n    function currentReflection() public view returns (uint256) {\r\n        return _currentReflection;\r\n    }\r\n\r\n    function numberOfReflectionEntries(address account) public view returns (uint256) {\r\n        if (\r\n          _totalReceived[account] > _balances[account] &&\r\n          account != marketingAddress &&\r\n          account != charityAddress\r\n        ) {\r\n            // ngmi hfsp\r\n            return 0;\r\n        }\r\n        return _numberOfReflectionEntries[account];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account].add(getRedistributionOwed(account));\r\n    }\r\n\r\n    function getRedistributionOwed(address account) public view returns (uint256) {\r\n        return (_redistributionPool.sub(_redistributionPoolAtLastSync[account])).mul(\r\n            (_balances[account].mul(10**6).div(_tokenTotal))).div(10**6);\r\n    }\r\n\r\n    function syncOwedFromRedistributionPool(address account) public returns (uint256) {\r\n        _balances[account] = _balances[account].add(getRedistributionOwed(account));\r\n        _redistributionPoolAtLastSync[account] = _redistributionPool;\r\n    }\r\n\r\n    function linkBalance() public view returns (uint256) {\r\n        return LINK.balanceOf(address(this));\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    // Adding this to prevent overflowing array (sometime before heat death of universe)\r\n    function resetReflectionEntries() public onlyOwner {\r\n        delete _allReflectionAddresses;\r\n    }\r\n\r\n    function getTotalReceived(address account) public view returns (uint256) {\r\n        return _totalReceived[account];\r\n    }\r\n\r\n    function getTotalWon(address account) public view returns (uint256) {\r\n        return _totalWon[account];\r\n    }\r\n\r\n    function getPreviousWinner() public view returns (address) {\r\n        return previousWinner;\r\n    }\r\n\r\n    function getPreviousJackpot() public view returns (uint256) {\r\n        return previousJackpot;\r\n    }\r\n\r\n    // Setter in case the community wants us to crank the reflection up to 11\r\n    function setReflectionFeePercent(uint256 reflectionFee) external onlyOwner() {\r\n        _reflectionFee = reflectionFee;\r\n    }\r\n\r\n    // Setter in case the community wants us to crank the redistribution up to 11\r\n    function setRedistributionFeePercent(uint256 redistributionFee) external onlyOwner() {\r\n        _redistributionFee = redistributionFee;\r\n    }\r\n\r\n        // Setter in case the community wants us to crank the burn up to 11\r\n    function setBurnFeePercent(uint256 burnFee) external onlyOwner() {\r\n        _burnFee = burnFee;\r\n    }\r\n\r\n    // Setter in case the token moons and entries in reflection system become prohibitively expensive\r\n    function setMinimumTokensForReflection(uint256 _minTokensForReflection) external onlyOwner() {\r\n        _minimumTokensForReflection = _minTokensForReflection;\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        _maxTxAmount = _tokenTotal.mul(maxTxPercent).div(10**2);\r\n    }\r\n\r\n    // to receive ETH from uniswapV2Router when swapping\r\n    receive() external payable {}\r\n\r\n    function _getFees(uint256 amount) private view returns (uint256, uint256, uint256, uint256) {\r\n        uint256 reflectionFee = amount.mul(_reflectionFee).div(10**2);\r\n        uint256 redistributionFee = amount.mul(_redistributionFee).div(10**2);\r\n        uint256 burnFee = amount.mul(_burnFee).div(10**2);\r\n        uint256 amountMinusFees = amount.sub(reflectionFee).sub(redistributionFee).sub(burnFee);\r\n        return (amountMinusFees, reflectionFee, redistributionFee, burnFee);\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if(from != owner() && to != owner())\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        if(contractTokenBalance >= _maxTxAmount)\r\n          contractTokenBalance = _maxTxAmount;\r\n        // transfer amount... taking fees & distributing currentReflection as needed\r\n        _tokenTransfer(from, to, amount);\r\n    }\r\n\r\n    // Distribute random reflection from chainlink VRF response\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\r\n        bytes32 requestId2 = requestId;\r\n        uint256 numAddresses = _allReflectionAddresses.length;\r\n        uint256 randomIndex = randomness.mod(numAddresses);\r\n        address randomRecipient = _allReflectionAddresses[randomIndex];\r\n        if (\r\n            _totalReceived[randomRecipient] <= _balances[randomRecipient] ||\r\n            randomRecipient == marketingAddress ||\r\n            randomRecipient == charityAddress\r\n        ) {\r\n            _balances[randomRecipient] = _balances[randomRecipient].add(_currentReflection);\r\n            _totalReceived[randomRecipient] = _totalReceived[randomRecipient].add(_currentReflection);\r\n            _totalWon[randomRecipient] = _totalWon[randomRecipient].add(_currentReflection);\r\n            previousJackpot = _currentReflection;\r\n            previousWinner = randomRecipient;\r\n            _totalReflected = _totalReflected.add(_currentReflection);\r\n            emit TotalReflected(now, _totalReflected);\r\n            // have fun getting rich\r\n            emit ReflectionRecipient(now, randomRecipient, _currentReflection, true);\r\n            _currentReflection = 0;\r\n        } else {\r\n            // For dapp simplicity.\r\n            emit ReflectionRecipient(now, randomRecipient, _currentReflection, false);\r\n            // u sold anon? ngmi\r\n            emit HaveFunStayingPoor(now, randomRecipient, _currentReflection);\r\n        }\r\n        lotteryLastRun = now;\r\n        lockThePayout = true;\r\n        _inDistribution = false;\r\n    }\r\n\r\n    // Requests random number from chainlink whenever contract can afford it\r\n    function _maybeDistributeCurrentReflection() private returns (bytes32 requestId) {\r\n        // only initiate random distribution if we:\r\n        // - haven't locked the payout (to let it accrue for a bigger prize pool)\r\n        // - aren't already in a distribution\r\n        // - have enough LINK in the contract\r\n        if (\r\n            !lockThePayout &&\r\n            !_inDistribution &&\r\n            LINK.balanceOf(address(this)) >= linkFee\r\n        ) {\r\n            _inDistribution = true;\r\n            _randNonce = _randNonce.add(1);\r\n            /**\r\n              NOTE 3rd arg isn't actually used inside chainlink\r\n              (according to their solutions engineer)\r\n              so we just pass in some psuedoRandom value here\r\n            */\r\n            uint256 psuedoRandomSeed = uint(keccak256(abi.encodePacked(now, msg.sender, _randNonce)));\r\n            requestRandomness(keyHash, linkFee, psuedoRandomSeed);\r\n            emit RequestedRandomness(now);\r\n        }\r\n    }\r\n\r\n    function _accrueReflectionFees(uint256 reflectionFee) private {\r\n        _currentReflection = _currentReflection.add(reflectionFee);\r\n        emit CurrentReflection(now, _currentReflection);\r\n    }\r\n\r\n    function _accrueRedistributionFees(uint256 redistributionFee) private {\r\n        _redistributionPool = _redistributionPool.add(redistributionFee);\r\n        emit CurrentRedistribution(now, _redistributionPool);\r\n    }\r\n\r\n    function _accrueBurnFees(uint256 burnFee) private {\r\n        _balances[burnAddress] = _balances[burnAddress].add(burnFee);\r\n        _tokenTotal = _tokenTotal.sub(burnFee);\r\n    }\r\n\r\n    function _grantReflectionEntry(address recipient) private {\r\n        if (\r\n            _numberOfReflectionEntries[recipient] < 100 ||\r\n            recipient == burnAddress ||\r\n            recipient == charityAddress ||\r\n            recipient == marketingAddress\r\n        ) {\r\n            _addReflectionEntry(recipient);\r\n        }\r\n\r\n        // give ~1% win rate to charity and marketing addresses\r\n        if (totalReflectionEntries().mod(98) == 0) {\r\n            _addReflectionEntry(charityAddress);\r\n            _addReflectionEntry(marketingAddress);\r\n        }\r\n\r\n        // give ~0.5% win to burn address\r\n        if (totalReflectionEntries().mod(199) == 0) {\r\n            _addReflectionEntry(burnAddress);\r\n        }\r\n    }\r\n\r\n    function _addReflectionEntry(address account) private {\r\n         _allReflectionAddresses.push(account);\r\n         _numberOfReflectionEntries[account] = _numberOfReflectionEntries[account].add(1);\r\n    }\r\n\r\n    function _getIsPayoutLocked() public view returns (bool) {\r\n        return lockThePayout;\r\n    }\r\n\r\n    function getTimeUntilNextJackpot() public view returns (uint256) {\r\n        return (lotteryLastRun.add(1 days)) - block.timestamp;\r\n    }\r\n\r\n    function getLotteryLastRun() public view returns (uint256) {\r\n        return lotteryLastRun;\r\n    }\r\n\r\n    // this method is responsible for taking all fees & distributing reflections, both as needed\r\n    function _tokenTransfer(address from, address to, uint256 amount) private {\r\n        syncOwedFromRedistributionPool(from);\r\n        syncOwedFromRedistributionPool(to);\r\n\r\n        // Always debit the full amount from sender's account\r\n        _balances[from] = _balances[from].sub(amount);\r\n\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            // no fee for excluded accounts\r\n            _balances[to] = _balances[to].add(amount);\r\n            // sends to excluded accounts do not prevent you from winning\r\n            _totalReceived[to] = _totalReceived[to].add(amount);\r\n            _totalReceived[from] = _totalReceived[from].sub(amount);\r\n            emit Transfer(from, to, amount);\r\n        } else {\r\n            (uint256 amountMinusFees, uint256 reflectionFee, uint256 redistributionFee, uint256 burnFee) = _getFees(amount);\r\n\r\n            bool overMinTokensForReflection = amount >= _minimumTokensForReflection;\r\n\r\n            /**\r\n              Enter recipient into reflection system if needed\r\n              never add uniswapV2Pair to reflection system\r\n            */\r\n            if (to != uniswapV2Pair && overMinTokensForReflection) {\r\n                _grantReflectionEntry(to);\r\n            }\r\n\r\n            // sends to burn/charity/marketing dont prevent you from winning\r\n            if (to == burnAddress || to == charityAddress || to == marketingAddress ) {\r\n                _totalReceived[from] = _totalReceived[from].sub(amount);\r\n            }\r\n\r\n            // Enter sender into reflection system 2x if to == marketing or charity\r\n            if ((to == marketingAddress || to == charityAddress) && overMinTokensForReflection) {\r\n                _grantReflectionEntry(from);\r\n                _grantReflectionEntry(from);\r\n            }\r\n\r\n            // Enter sender into reflection system 1x if to == burn\r\n            if (to == burnAddress && overMinTokensForReflection) {\r\n                _grantReflectionEntry(from);\r\n            }\r\n\r\n            if (block.timestamp >= lotteryLastRun.add(1 days)) {\r\n                lockThePayout = false;\r\n            }\r\n\r\n            _accrueReflectionFees(reflectionFee);\r\n            _accrueRedistributionFees(redistributionFee);\r\n            _accrueBurnFees(burnFee);\r\n            _maybeDistributeCurrentReflection();\r\n            _balances[to] = _balances[to].add(amountMinusFees);\r\n            _totalReceived[to] = _totalReceived[to].add(amountMinusFees);\r\n            emit Transfer(from, to, amountMinusFees);\r\n        }\r\n    }\r\n\r\n    // Setter to prevent uniswapV2Pair to receive entries\r\n    function setUniswapPair(address _uniswapV2PairAddress) external onlyOwner() {\r\n        uniswapV2Pair = _uniswapV2PairAddress;\r\n    }\r\n}\r\n\r\ncontract TubbyBoiToken is TubbyBoi {\r\n\r\n    constructor(\r\n      address _vrfCoordinator,\r\n      address _linkToken,\r\n      bytes32 _keyHash,\r\n      address _charityAddress,\r\n      address _marketingAddress\r\n    ) TubbyBoi(\r\n      _vrfCoordinator,\r\n      _linkToken,\r\n      _keyHash,\r\n      _charityAddress,\r\n      _marketingAddress\r\n    ) public { }\r\n\r\n    function _fulfillRandomness(bytes32 requestId, uint256 randomness) public {\r\n        fulfillRandomness(requestId, randomness);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_charityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"AddedReflectionEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redistributionPool\",\"type\":\"uint256\"}],\"name\":\"CurrentRedistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentReflection\",\"type\":\"uint256\"}],\"name\":\"CurrentReflection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"missedWinnings\",\"type\":\"uint256\"}],\"name\":\"HaveFunStayingPoor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentReflection\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"}],\"name\":\"ReflectionRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"RequestedRandomness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReflected\",\"type\":\"uint256\"}],\"name\":\"TotalReflected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"_fulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getIsPayoutLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minimumTokensForReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryLastRun\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreviousJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreviousWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRedistributionOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeUntilNextJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockThePayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numberOfReflectionEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetReflectionEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokensForReflection\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensForReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redistributionFee\",\"type\":\"uint256\"}],\"name\":\"setRedistributionFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionFee\",\"type\":\"uint256\"}],\"name\":\"setReflectionFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2PairAddress\",\"type\":\"address\"}],\"name\":\"setUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"syncOwedFromRedistributionPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflectionEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TubbyBoiToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000747973a5a2a4ae1d3a8fdf5479f1514f65db9c31000000000000000000000000404460c6a5ede2d891e8297795264fde62adbb75c251acd21ec4fb7f31bb8868288bfdbaeb4fbfec2df3735ddbd4f7dc8d60103c000000000000000000000000e3282245a11e7000096947c0636cee9d3b50e4ad000000000000000000000000c5021b40c8d3b0528af89d993491fefdb3210852", "EVMVersion": "istanbul", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://048d0adf20811d4b1205983dd1f0ef8f4f5bb8217e0e3c2da86e10f13c9cb607"}