{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/8.19/xALPACAv2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * \u2229~~~~\u2229\\n *   \u03be \uff65\u00d7\uff65 \u03be\\n *   \u03be\u3000~\u3000\u03be\\n *   \u03be\u3000\u3000 \u03be\\n *   \u03be\u3000\u3000 \u201c~\uff5e~\uff5e\u3007\\n *   \u03be\u3000\u3000\u3000\u3000\u3000\u3000 \u03be\\n *   \u03be \u03be \u03be~\uff5e~\u03be \u03be \u03be\\n * \u3000 \u03be_\u03be\u03be_\u03be\u3000\u03be_\u03be\u03be_\u03be\\n * Alpaca Fin Corporation\\n *\\n */\\n\\npragma solidity 0.8.19;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport { IBEP20 } from \\\"./interfaces/IBEP20.sol\\\";\\nimport { SafeToken } from \\\"./SafeToken.sol\\\";\\n\\nimport { IxALPACAv2RevenueDistributor } from \\\"./xALPACAv2RevenueDistributor/interfaces/IxALPACAv2RevenueDistributor.sol\\\";\\n\\n/// @title xALPACAv2 - The governance locking contract of Alpaca Finance (v2)\\n// solhint-disable not-rely-on-time\\n// solhint-disable-next-line contract-name-camelcase\\ncontract xALPACAv2 is ReentrancyGuardUpgradeable, OwnableUpgradeable {\\n  using SafeToken for address;\\n\\n  //--------- Errors ------------//\\n  error xALPACAv2_InvalidAmount();\\n  error xALPACAv2_InvalidStatus();\\n  error xALPACAv2_UnlockTimeUnreached();\\n  error xALPACAv2_UnlockTimeReached();\\n  error xALPACAv2_InvalidBreakerValue();\\n  error xALPACAv2_InvalidAddress();\\n  error xALPACAv2_TooMuchDelay();\\n  error xALPACAv2_TooMuchFee();\\n  error xALPACAv2_Unauthorized();\\n  error xALPACAv2_InvalidParams();\\n\\n  //--------- Events ------------//\\n  event LogLock(address indexed _user, uint256 _amount);\\n  event LogUnlock(address indexed _user, uint256 _unlockRequestId);\\n  event LogCancelUnlock(address indexed _user, uint256 _unlockRequestId);\\n  event LogWithdraw(address indexed _user, uint256 _amount, uint256 _feeToTreasury, uint256 _toRedistribute);\\n  event LogTransfer(address indexed _from, address indexed _to, uint256 _amount);\\n  event LogSetBreaker(uint256 _previousBreaker, uint256 _breaker);\\n  event LogSetDelayUnlockTime(uint256 _previousDelay, uint256 _newDelay);\\n  event LogSetFeeTreasury(address _previousFeeTreasury, address _newFeeTreasury);\\n  event LogSetEarlyWithdrawFeeBpsPerDay(uint256 _previousFee, uint256 _newFee);\\n  event LogRedistribute(address indexed _from, address indexed _to, uint256 _amount);\\n  event LogSetWhitelistedRedistributors(address indexed _caller, address indexed _addr, bool _ok);\\n  event LogSetRedistributionBps(address indexed _caller, uint256 _newRedistributionFee);\\n\\n  //--------- Enum --------------//\\n  enum UnlockStatus {\\n    INITIATED,\\n    CLAIMED,\\n    CANCELED\\n  }\\n\\n  //--------- Struct ------------//\\n  struct UnlockRequest {\\n    uint256 amount;\\n    uint64 unlockTimestamp;\\n    UnlockStatus status; // 0 = unclaimed, 1 = claimed, 2 = canceled\\n  }\\n\\n  //--------- States ------------//\\n  // Token to be locked (ALPACA)\\n  address public token;\\n\\n  // Delay period for withdrawal (in seconds)\\n  uint256 public delayUnlockTime;\\n\\n  // Total amount of token locked\\n  uint256 public totalLocked;\\n\\n  // Flag to allow emergency withdraw\\n  uint256 public breaker;\\n\\n  // Protocol Early Withdrawal Fee treasury\\n  address public feeTreasury;\\n\\n  // Revenue Distributor\\n  address public revenueDistributor;\\n\\n  // penalty per day\\n  uint256 public earlyWithdrawFeeBpsPerDay;\\n\\n  // Propotion from earlywithdraw fee that will be redistributed\\n  uint256 public redistributionBps;\\n\\n  // Accumulated token to be redistributed from earlywithdraw\\n  uint256 public accumRedistribute;\\n\\n  // lock amount of each user\\n  mapping(address => uint256) public userLockAmounts;\\n\\n  // unlock request of each user\\n  mapping(address => UnlockRequest[]) public userUnlockRequests;\\n\\n  // whitelisted address for calling redistribute\\n  mapping(address => bool) public whitelistedRedistributors;\\n\\n  modifier onlyRedistributors() {\\n    if (!whitelistedRedistributors[msg.sender]) {\\n      revert xALPACAv2_Unauthorized();\\n    }\\n    _;\\n  }\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(\\n    address _token,\\n    address _revenueDistributor,\\n    uint256 _delayUnlockTime,\\n    address _feeTreasury,\\n    uint256 _earlyWithdrawFeeBpsPerDay,\\n    uint256 _redistributionBps\\n  ) external initializer {\\n    OwnableUpgradeable.__Ownable_init();\\n    ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n\\n    // sanity check\\n    IBEP20(_token).decimals();\\n    IxALPACAv2RevenueDistributor(_revenueDistributor).stakingReserve();\\n\\n    // max lock time = 365 day\\n    if (_delayUnlockTime > 365 days) {\\n      revert xALPACAv2_TooMuchDelay();\\n    }\\n\\n    if (_feeTreasury == address(0) || _feeTreasury == address(this)) {\\n      revert xALPACAv2_InvalidAddress();\\n    }\\n\\n    // fee should not cost more than 100%\\n    if (((_earlyWithdrawFeeBpsPerDay * _delayUnlockTime) / 1 days) > 10000) {\\n      revert xALPACAv2_TooMuchFee();\\n    }\\n\\n    // bps cannot more than 10000\\n    if (_redistributionBps > 10000) {\\n      revert xALPACAv2_InvalidParams();\\n    }\\n\\n    feeTreasury = _feeTreasury;\\n    earlyWithdrawFeeBpsPerDay = _earlyWithdrawFeeBpsPerDay;\\n    delayUnlockTime = _delayUnlockTime;\\n    token = _token;\\n    revenueDistributor = _revenueDistributor;\\n    redistributionBps = _redistributionBps;\\n  }\\n\\n  /// @notice Lock token to receive voting power\\n  /// @param _for The user to create lock\\n  /// @param _amount The amount of token to be locked\\n  function lock(address _for, uint256 _amount) external nonReentrant {\\n    // effect\\n    userLockAmounts[_for] += _amount;\\n    totalLocked += _amount;\\n    // interaction\\n    token.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    token.safeApprove(revenueDistributor, _amount);\\n    IxALPACAv2RevenueDistributor(revenueDistributor).deposit(_for, _amount);\\n\\n    emit LogLock(_for, _amount);\\n  }\\n\\n  /// @notice Initiate withdrawal process via delayed unlocking\\n  /// @param _amount The amount to unlock\\n  function unlock(uint256 _amount) external nonReentrant returns (uint256 _unlockRequestId) {\\n    // check\\n    uint256 _userLockedAmount = userLockAmounts[msg.sender];\\n    if (_userLockedAmount < _amount || _amount == 0) {\\n      revert xALPACAv2_InvalidAmount();\\n    }\\n\\n    // effect\\n    unchecked {\\n      userLockAmounts[msg.sender] -= _amount;\\n      totalLocked -= _amount;\\n    }\\n\\n    UnlockRequest memory _request = UnlockRequest({\\n      amount: _amount,\\n      unlockTimestamp: uint64(block.timestamp + delayUnlockTime),\\n      status: UnlockStatus.INITIATED\\n    });\\n\\n    if (breaker == 0) {\\n      UnlockRequest[] storage _userRequests = userUnlockRequests[msg.sender];\\n\\n      _unlockRequestId = _userRequests.length;\\n\\n      _userRequests.push(_request);\\n      // interaction\\n      IxALPACAv2RevenueDistributor(revenueDistributor).withdraw(msg.sender, _amount);\\n\\n      emit LogUnlock(msg.sender, _unlockRequestId);\\n    } else {\\n      IxALPACAv2RevenueDistributor(revenueDistributor).withdraw(msg.sender, _amount);\\n      token.safeTransfer(msg.sender, _amount);\\n    }\\n  }\\n\\n  /// @notice Claim the unlocked ALPACA\\n  /// @param _unlockRequestId The id of request to withdraw from\\n  function withdraw(uint256 _unlockRequestId) external nonReentrant {\\n    UnlockRequest storage request = userUnlockRequests[msg.sender][_unlockRequestId];\\n\\n    // check\\n    // revert if it's already claimed or canceled\\n    if (request.status != UnlockStatus.INITIATED) {\\n      revert xALPACAv2_InvalidStatus();\\n    }\\n\\n    // revert if it's not unlock time yet\\n    if (request.unlockTimestamp > block.timestamp) {\\n      revert xALPACAv2_UnlockTimeUnreached();\\n    }\\n\\n    // effect\\n    request.status = UnlockStatus.CLAIMED;\\n\\n    // interaction\\n    token.safeTransfer(msg.sender, request.amount);\\n\\n    emit LogWithdraw(msg.sender, request.amount, 0, 0);\\n  }\\n\\n  /// @notice Premature withdrawal before unlock completed\\n  /// @param _unlockRequestId The id of request to withdraw from\\n  function earlyWithdraw(uint256 _unlockRequestId) external nonReentrant {\\n    UnlockRequest storage request = userUnlockRequests[msg.sender][_unlockRequestId];\\n\\n    // check\\n    // revert if it's already claimed or canceled\\n    if (request.status != UnlockStatus.INITIATED) {\\n      revert xALPACAv2_InvalidStatus();\\n    }\\n\\n    if (block.timestamp >= request.unlockTimestamp) {\\n      revert xALPACAv2_UnlockTimeReached();\\n    }\\n    // effect\\n    // fee = (amount * fee per day * second until unlock) / second in day\\n    uint256 _earlyWithdrawalFee = (\\n      (request.amount * earlyWithdrawFeeBpsPerDay * (request.unlockTimestamp - block.timestamp))\\n    ) / (10000 * 1 days);\\n\\n    // if early withdraw fee is greater than amount, should revert here\\n    uint256 _amountToUser = request.amount - _earlyWithdrawalFee;\\n    uint256 _amountToRedistribute = (_earlyWithdrawalFee * redistributionBps) / 10000;\\n    uint256 _amountToTreasury = _earlyWithdrawalFee - _amountToRedistribute;\\n\\n    accumRedistribute += _amountToRedistribute;\\n    request.status = UnlockStatus.CLAIMED;\\n\\n    // interaction\\n    token.safeTransfer(msg.sender, _amountToUser);\\n    token.safeTransfer(feeTreasury, _amountToTreasury);\\n\\n    emit LogWithdraw(msg.sender, _amountToUser, _amountToTreasury, _amountToRedistribute);\\n  }\\n\\n  /// @notice Redistribute accumulated token from earlywithdraw back to revenueDistributor\\n  function redistribute() external onlyRedistributors nonReentrant {\\n    uint256 _amount = accumRedistribute;\\n\\n    accumRedistribute = 0;\\n\\n    token.safeApprove(revenueDistributor, _amount);\\n\\n    // redistribute to revenueDistributor without chaging reward end timestamp\\n    IxALPACAv2RevenueDistributor(revenueDistributor).feed(\\n      _amount,\\n      IxALPACAv2RevenueDistributor(revenueDistributor).rewardEndTimestamp()\\n    );\\n\\n    emit LogRedistribute(msg.sender, revenueDistributor, _amount);\\n  }\\n\\n  /// @notice Reverse the withdrawal unlocking process\\n  /// @param _unlockRequestId The id of request to cancel\\n  function cancelUnlock(uint256 _unlockRequestId) external nonReentrant {\\n    UnlockRequest storage request = userUnlockRequests[msg.sender][_unlockRequestId];\\n\\n    // check\\n    // revert if it's already claimed or canceled\\n    if (request.status != UnlockStatus.INITIATED) {\\n      revert xALPACAv2_InvalidStatus();\\n    }\\n\\n    // effect\\n    totalLocked += request.amount;\\n    userLockAmounts[msg.sender] += request.amount;\\n    request.status = UnlockStatus.CANCELED;\\n\\n    // interaction\\n    token.safeApprove(revenueDistributor, request.amount);\\n    IxALPACAv2RevenueDistributor(revenueDistributor).deposit(msg.sender, request.amount);\\n\\n    emit LogUnlock(msg.sender, _unlockRequestId);\\n  }\\n\\n  /// @notice Transfer xALAPCA to another address\\n  /// @param _destination The destination address\\n  /// @param _amount The amount to transfer\\n  function transfer(address _destination, uint256 _amount) external nonReentrant {\\n    // Check\\n    if (_destination == address(this) || _destination == address(0) || _destination == msg.sender) {\\n      revert xALPACAv2_InvalidAddress();\\n    }\\n\\n    uint256 _userLockedAmount = userLockAmounts[msg.sender];\\n    if (_userLockedAmount < _amount || _amount == 0) {\\n      revert xALPACAv2_InvalidAmount();\\n    }\\n\\n    // Effect\\n    userLockAmounts[msg.sender] -= _amount;\\n    userLockAmounts[_destination] += _amount;\\n\\n    // Interaction\\n    IxALPACAv2RevenueDistributor(revenueDistributor).withdraw(msg.sender, _amount);\\n    token.safeApprove(revenueDistributor, _amount);\\n    IxALPACAv2RevenueDistributor(revenueDistributor).deposit(_destination, _amount);\\n\\n    emit LogTransfer(msg.sender, _destination, _amount);\\n  }\\n\\n  // -------- Privilege Functions -----//\\n\\n  /// @notice Owner set the delayed unlock time\\n  /// @param _newDelayUnlockTime Time delay in seconds needed for withdrawal\\n  function setDelayUnlockTime(uint256 _newDelayUnlockTime) external onlyOwner {\\n    // check\\n    if (_newDelayUnlockTime > 365 days) {\\n      revert xALPACAv2_TooMuchDelay();\\n    }\\n\\n    emit LogSetDelayUnlockTime(delayUnlockTime, _newDelayUnlockTime);\\n\\n    delayUnlockTime = _newDelayUnlockTime;\\n  }\\n\\n  /// @notice Owner set early withdraw fee bps per day\\n  /// @param _newFeePerPerDay The new early withdrawal bps per day\\n  function setEarlyWithdrawFeeBpsPerDay(uint256 _newFeePerPerDay) external onlyOwner {\\n    // check\\n    // fee should not cost more than 100%\\n    if (((_newFeePerPerDay * delayUnlockTime) / 1 days) > 10000) {\\n      revert xALPACAv2_TooMuchFee();\\n    }\\n\\n    emit LogSetEarlyWithdrawFeeBpsPerDay(earlyWithdrawFeeBpsPerDay, _newFeePerPerDay);\\n    earlyWithdrawFeeBpsPerDay = _newFeePerPerDay;\\n  }\\n\\n  /// @notice Owner set redistribution bps\\n  /// @param _newRedistributionBps The new portion from earlywithdraw fee that will be redistributed\\n  function setRedistributionBps(uint256 _newRedistributionBps) external onlyOwner {\\n    if (_newRedistributionBps > 10000) {\\n      revert xALPACAv2_InvalidParams();\\n    }\\n\\n    redistributionBps = _newRedistributionBps;\\n\\n    emit LogSetRedistributionBps(msg.sender, _newRedistributionBps);\\n  }\\n\\n  /// @notice Owner set new treasury address\\n  /// @param _newFeeTreasury The new address that will receive early withdrawal fee\\n  function setFeeTreasury(address _newFeeTreasury) external onlyOwner {\\n    if (_newFeeTreasury == address(0) || _newFeeTreasury == address(this)) {\\n      revert xALPACAv2_InvalidAddress();\\n    }\\n    emit LogSetFeeTreasury(feeTreasury, _newFeeTreasury);\\n    feeTreasury = _newFeeTreasury;\\n  }\\n\\n  /// @dev Owner enable emergency withdraw\\n  /// @param _breaker The new value of breaker 0 if off, 1 if on\\n  function setBreaker(uint256 _breaker) external onlyOwner {\\n    if (_breaker > 1) {\\n      revert xALPACAv2_InvalidBreakerValue();\\n    }\\n    emit LogSetBreaker(breaker, _breaker);\\n    breaker = _breaker;\\n\\n    // waive early withdraw fee\\n    emit LogSetEarlyWithdrawFeeBpsPerDay(earlyWithdrawFeeBpsPerDay, 0);\\n    earlyWithdrawFeeBpsPerDay = 0;\\n  }\\n\\n  function setWhitelistedRedistributors(address[] calldata _callers, bool _ok) external onlyOwner {\\n    uint256 _length = _callers.length;\\n    for (uint256 _idx = 0; _idx < _length; ) {\\n      whitelistedRedistributors[_callers[_idx]] = _ok;\\n      emit LogSetWhitelistedRedistributors(_msgSender(), _callers[_idx], _ok);\\n      unchecked {\\n        _idx++;\\n      }\\n    }\\n  }\\n\\n  // -------- View Functions --------//\\n\\n  function userUnlockRequestsLastId(address _user) external view returns (uint256) {\\n    return userUnlockRequests[_user].length;\\n  }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/8.19/interfaces/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * \u2229~~~~\u2229\\n *   \u03be \uff65\u00d7\uff65 \u03be\\n *   \u03be\u3000~\u3000\u03be\\n *   \u03be\u3000\u3000 \u03be\\n *   \u03be\u3000\u3000 \u201c~\uff5e~\uff5e\u3007\\n *   \u03be\u3000\u3000\u3000\u3000\u3000\u3000 \u03be\\n *   \u03be \u03be \u03be~\uff5e~\u03be \u03be \u03be\\n * \u3000 \u03be_\u03be\u03be_\u03be\u3000\u03be_\u03be\u03be_\u03be\\n * Alpaca Fin Corporation\\n */\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBEP20 is IERC20 {\\n  /// @dev Return token's name\\n  function name() external returns (string memory);\\n\\n  /// @dev Return token's symbol\\n  function symbol() external returns (string memory);\\n\\n  /// @dev Return token's decimals\\n  function decimals() external returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/8.19/SafeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n * \u2229~~~~\u2229\\n *   \u03be \uff65\u00d7\uff65 \u03be\\n *   \u03be\u3000~\u3000\u03be\\n *   \u03be\u3000\u3000 \u03be\\n *   \u03be\u3000\u3000 \u201c~\uff5e~\uff5e\u3007\\n *   \u03be\u3000\u3000\u3000\u3000\u3000\u3000 \u03be\\n *   \u03be \u03be \u03be~\uff5e~\u03be \u03be \u03be\\n * \u3000 \u03be_\u03be\u03be_\u03be\u3000\u03be_\u03be\u03be_\u03be\\n * Alpaca Fin Corporation\\n */\\n\\npragma solidity 0.8.19;\\n\\ninterface ERC20Interface {\\n  function balanceOf(address user) external view returns (uint256);\\n}\\n\\nlibrary SafeToken {\\n  function myBalance(address token) internal view returns (uint256) {\\n    return ERC20Interface(token).balanceOf(address(this));\\n  }\\n\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n    // solhint-disable-next-line avoid-low-level-calls\\n    require(token.code.length > 0, \\\"!contract\\\");\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"!safeTransfer\\\");\\n  }\\n\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n    // solhint-disable-next-line avoid-low-level-calls\\n    require(token.code.length > 0, \\\"!contract\\\");\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"!safeTransferFrom\\\");\\n  }\\n\\n  function safeApprove(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\\n    require(token.code.length > 0, \\\"!contract\\\");\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"!safeApprove\\\");\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    // solhint-disable-next-line no-call-value\\n    (bool success, ) = to.call{ value: value }(new bytes(0));\\n    require(success, \\\"!safeTransferETH\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/8.19/xALPACAv2RevenueDistributor/interfaces/IxALPACAv2RevenueDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IxALPACAv2RevenueDistributor {\\n  error xALPACAv2RevenueDistributor_DuplicatePool();\\n  error xALPACAv2RevenueDistributor_InvalidArguments();\\n  error xALPACAv2RevenueDistributor_BadRewarder();\\n  error xALPACAv2RevenueDistributor_Unauthorized();\\n  error xALPACAv2RevenueDistributor_InsufficientAmount();\\n\\n  function deposit(address _for, uint256 _amountToDeposit) external;\\n\\n  function withdraw(address _from, uint256 _amountToWithdraw) external;\\n\\n  function stakingReserve() external view returns (uint256);\\n\\n  function setWhitelistedCallers(address[] calldata _callers, bool _allow) external;\\n\\n  function feed(uint256 _rewardAmount, uint256 _newRewardEndTimestamp) external;\\n\\n  function harvest() external;\\n\\n  function addRewarders(address _rewarder) external;\\n\\n  function feeders(address _feeder) external view returns (bool _allow);\\n\\n  function rewardEndTimestamp() external view returns (uint256);\\n\\n  function getUserTotalAmountOf(address _user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@xalpacav2/=contracts/8.19/\",\r\n      \"@alpaca-finance/=node_modules/@alpaca-finance/\",\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"hardhat-deploy/=node_modules/hardhat-deploy/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"synthetix/=node_modules/synthetix/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"xALPACAv2_InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"xALPACAv2_InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"xALPACAv2_InvalidBreakerValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"xALPACAv2_InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"xALPACAv2_InvalidStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"xALPACAv2_TooMuchDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"xALPACAv2_TooMuchFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"xALPACAv2_Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"xALPACAv2_UnlockTimeReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"xALPACAv2_UnlockTimeUnreached\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unlockRequestId\",\"type\":\"uint256\"}],\"name\":\"LogCancelUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogRedistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_previousBreaker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_breaker\",\"type\":\"uint256\"}],\"name\":\"LogSetBreaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_previousDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDelay\",\"type\":\"uint256\"}],\"name\":\"LogSetDelayUnlockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_previousFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"LogSetEarlyWithdrawFeeBpsPerDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_previousFeeTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFeeTreasury\",\"type\":\"address\"}],\"name\":\"LogSetFeeTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newRedistributionFee\",\"type\":\"uint256\"}],\"name\":\"LogSetRedistributionBps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_ok\",\"type\":\"bool\"}],\"name\":\"LogSetWhitelistedRedistributors\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unlockRequestId\",\"type\":\"uint256\"}],\"name\":\"LogUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feeToTreasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toRedistribute\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumRedistribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"breaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockRequestId\",\"type\":\"uint256\"}],\"name\":\"cancelUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockRequestId\",\"type\":\"uint256\"}],\"name\":\"earlyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawFeeBpsPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revenueDistributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delayUnlockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeTreasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_earlyWithdrawFeeBpsPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redistributionBps\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redistributionBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_breaker\",\"type\":\"uint256\"}],\"name\":\"setBreaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDelayUnlockTime\",\"type\":\"uint256\"}],\"name\":\"setDelayUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeePerPerDay\",\"type\":\"uint256\"}],\"name\":\"setEarlyWithdrawFeeBpsPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeTreasury\",\"type\":\"address\"}],\"name\":\"setFeeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRedistributionBps\",\"type\":\"uint256\"}],\"name\":\"setRedistributionBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_callers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_ok\",\"type\":\"bool\"}],\"name\":\"setWhitelistedRedistributors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockRequestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLockAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userUnlockRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"unlockTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"enum xALPACAv2.UnlockStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userUnlockRequestsLastId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedRedistributors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockRequestId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "xALPACAv2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}