{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mosAsLp/interfaces/IAsdic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\ninterface IAsdic {\\r\\n    function asyncMosInvite(address account) external returns (bool);\\r\\n\\r\\n    function superior(address account) external returns (address);\\r\\n\\r\\n    function getLowerLevel(\\r\\n        address account\\r\\n    ) external view returns (address[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mosAsLp/interfaces/IFarmerPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\ninterface IFarmerPool {\\r\\n    function asyncHashrate(address user, uint amount, bool flag) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mosAsLp/interfaces/ILock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\ninterface ILock {\\r\\n    function locking(address account, uint256 lock) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mosAsLp/interfaces/IPancakePair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint value,\\r\\n        uint deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint amount0,\\r\\n        uint amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mosAsLp/interfaces/IPancakeRouter01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"\r\n    },\r\n    \"contracts/mosAsLp/interfaces/IPancakeRouter02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\r\\n\\r\\nimport \\\"./IPancakeRouter01.sol\\\";\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/mosAsLp/mosAsPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./interfaces/IPancakeRouter02.sol\\\";\\r\\nimport \\\"./interfaces/ILock.sol\\\";\\r\\nimport \\\"./interfaces/IPancakePair.sol\\\";\\r\\nimport \\\"./interfaces/IAsdic.sol\\\";\\r\\nimport \\\"./interfaces/IFarmerPool.sol\\\";\\r\\n\\r\\ncontract TokenReceiver {\\r\\n    //\u56de\u6d41\\r\\n    constructor(address token) {\\r\\n        IERC20(token).approve(msg.sender, type(uint256).max);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MOSASPOOL {\\r\\n    using SafeMath for uint;\\r\\n    enum opreate {\\r\\n        stake,\\r\\n        upStake,\\r\\n        claim\\r\\n    }\\r\\n    struct StakedInfo {\\r\\n        uint index;\\r\\n        uint stakedAmount;\\r\\n        uint updateTime;\\r\\n        uint available;\\r\\n        uint accruedReward;\\r\\n    }\\r\\n    struct recordInfo {\\r\\n        uint lpAmount;\\r\\n        uint stakeTime;\\r\\n        uint endTime;\\r\\n    }\\r\\n\\r\\n    StakedInfo public globalStakedInfo;\\r\\n    mapping(address => StakedInfo) public userStakedInfos;\\r\\n\\r\\n    mapping(address => recordInfo[]) public record;\\r\\n\\r\\n    uint public startTime;\\r\\n    uint public yearHalfCount;\\r\\n    uint public yearHalfAmount = 25000000e18;\\r\\n    uint public subHalfTime = 365 days;\\r\\n    uint public backFlowAmount;\\r\\n\\r\\n    address public tokenReceiver;\\r\\n\\r\\n    IFarmerPool public IFarmer;\\r\\n    address public owner;\\r\\n    IAsdic public Iasdic;\\r\\n    IERC20 public asdic;\\r\\n    IERC20 public usdt;\\r\\n    IERC20 public mos;\\r\\n    ILock public lock;\\r\\n    IPancakeRouter02 public route;\\r\\n    address public factory;\\r\\n    IPancakePair public asdicPair;\\r\\n\\r\\n    constructor(\\r\\n        address _usdt,\\r\\n        address _mos,\\r\\n        address _route,\\r\\n        address _asPair,\\r\\n        address _asdic,\\r\\n        address _lock\\r\\n    ) {\\r\\n        owner = msg.sender;\\r\\n        usdt = IERC20(_usdt);\\r\\n        route = IPancakeRouter02(_route);\\r\\n        mos = IERC20(_mos);\\r\\n        asdic = IERC20(_asdic);\\r\\n        Iasdic = IAsdic(_asdic);\\r\\n        lock = ILock(_lock);\\r\\n        asdicPair = IPancakePair(_asPair);\\r\\n\\r\\n        IERC20(asdic).approve(address(lock), type(uint).max);\\r\\n        usdt.approve(address(route), type(uint).max);\\r\\n        mos.approve(address(route), type(uint).max);\\r\\n        asdic.approve(address(route), type(uint).max);\\r\\n        tokenReceiver = address(new TokenReceiver(_asdic));\\r\\n    }\\r\\n\\r\\n    function setFarmerPool(address _poolAddress) external {\\r\\n        require(msg.sender == owner, \\\"Can't set the fermer address\\\");\\r\\n        IFarmer = IFarmerPool(_poolAddress);\\r\\n    }\\r\\n\\r\\n    function setYearHalfAmount(uint amount) external {\\r\\n        require(msg.sender == owner, \\\"No owner and set the year half amount\\\");\\r\\n        yearHalfAmount = amount;\\r\\n    }\\r\\n\\r\\n    function setSubHalfTime(uint _time) external {\\r\\n        require(msg.sender == owner, \\\"No owner to set the time\\\");\\r\\n        subHalfTime = _time;\\r\\n    }\\r\\n\\r\\n    function setAddress(address _asdic, address _pair) external {\\r\\n        require(msg.sender == owner);\\r\\n        asdicPair = IPancakePair(_pair);\\r\\n        asdic = IERC20(_asdic);\\r\\n    }\\r\\n\\r\\n    function getRecordInfos(\\r\\n        address account\\r\\n    ) external view returns (recordInfo[] memory) {\\r\\n        return record[account];\\r\\n    }\\r\\n\\r\\n    function asyncCrowdfund(address user, uint _amount) external {\\r\\n        address sender = msg.sender;\\r\\n        _stake(user, _amount, 300 days);\\r\\n        asdicPair.transferFrom(sender, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    function onceDepositAsdic(uint _amount, uint _days) external {\\r\\n        address sender = msg.sender;\\r\\n        require(_amount > 0, \\\"Oncedeposit: The amount is less than zero\\\");\\r\\n        require(\\r\\n            Iasdic.superior(sender) != address(0),\\r\\n            \\\"No superior with can't once deposit the Asdic\\\"\\r\\n        );\\r\\n\\r\\n        asdic.transferFrom(sender, address(this), _amount);\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(asdic);\\r\\n        path[1] = address(mos);\\r\\n\\r\\n        uint temp = _amount.mul(50).div(100);\\r\\n\\r\\n        route.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            temp,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 1000\\r\\n        );\\r\\n\\r\\n        uint value = mos.balanceOf(address(this));\\r\\n        (, , uint liquidity) = route.addLiquidity(\\r\\n            address(mos),\\r\\n            address(asdic),\\r\\n            value,\\r\\n            temp,\\r\\n            1,\\r\\n            1,\\r\\n            address(this),\\r\\n            block.timestamp + 1000\\r\\n        );\\r\\n        _stake(sender, liquidity, _days);\\r\\n    }\\r\\n\\r\\n    function onceDepositMos(uint _amount, uint _days) external {\\r\\n        address sender = msg.sender;\\r\\n        require(_amount > 0, \\\"Oncedeposit: The amount is less than zero\\\");\\r\\n        require(\\r\\n            Iasdic.superior(sender) != address(0),\\r\\n            \\\"No superior with can't once deposit the Mos\\\"\\r\\n        );\\r\\n        mos.transferFrom(sender, address(this), _amount);\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(mos);\\r\\n        path[1] = address(asdic);\\r\\n\\r\\n        uint temp = _amount.mul(50).div(100);\\r\\n\\r\\n        route.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            temp,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 1000\\r\\n        );\\r\\n\\r\\n        (uint a, uint b, ) = asdicPair.getReserves();\\r\\n\\r\\n        uint tempB = route.quote(temp, a, b);\\r\\n        (, , uint liquidity) = route.addLiquidity(\\r\\n            address(mos),\\r\\n            address(asdic),\\r\\n            temp,\\r\\n            tempB,\\r\\n            1,\\r\\n            1,\\r\\n            address(this),\\r\\n            block.timestamp + 1000\\r\\n        );\\r\\n\\r\\n        _stake(sender, liquidity, _days);\\r\\n    }\\r\\n\\r\\n    function onceDeposit(uint _amount, uint _days) external {\\r\\n        address sender = msg.sender;\\r\\n        require(_amount > 0, \\\"Oncedeposit: The amount is less than zero\\\");\\r\\n        require(\\r\\n            Iasdic.superior(sender) != address(0),\\r\\n            \\\"No superior with can't once deposit the usdt\\\"\\r\\n        );\\r\\n\\r\\n        usdt.transferFrom(sender, address(this), _amount);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(usdt);\\r\\n        path[1] = address(mos);\\r\\n        uint[] memory amountArray;\\r\\n        amountArray = route.swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 1000\\r\\n        );\\r\\n\\r\\n        uint temp = amountArray[1].mul(50).div(100);\\r\\n\\r\\n        path[0] = address(mos);\\r\\n        path[1] = address(asdic);\\r\\n\\r\\n        route.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            temp,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 1000\\r\\n        );\\r\\n\\r\\n        (uint a, uint b, ) = asdicPair.getReserves();\\r\\n\\r\\n        uint tempB = route.quote(temp, a, b);\\r\\n\\r\\n        (, , uint liquidity) = route.addLiquidity(\\r\\n            address(mos),\\r\\n            address(asdic),\\r\\n            temp,\\r\\n            tempB,\\r\\n            1,\\r\\n            1,\\r\\n            address(this),\\r\\n            block.timestamp + 1000\\r\\n        );\\r\\n        _stake(sender, liquidity, _days);\\r\\n    }\\r\\n\\r\\n    function takeLp(uint index, uint amount) external {\\r\\n        address sender = msg.sender;\\r\\n        uint cTime = block.timestamp;\\r\\n        uint lpValue;\\r\\n\\r\\n        recordInfo[] storage info = record[sender];\\r\\n        require(info.length > index, \\\"Take lp error for index too long\\\");\\r\\n        require(\\r\\n            info[index].lpAmount >= amount,\\r\\n            \\\"Take lp error for exceed balance\\\"\\r\\n        );\\r\\n        require(\\r\\n            info[index].endTime <= cTime,\\r\\n            \\\"Take lp error for exceed the time\\\"\\r\\n        );\\r\\n        uint time = info[index].endTime.sub(info[index].stakeTime).div(1 days);\\r\\n        if (time == 100) {\\r\\n            lpValue = amount;\\r\\n        }\\r\\n        if (time == 200) {\\r\\n            lpValue = amount.mul(150).div(100);\\r\\n        }\\r\\n        if (time == 300) {\\r\\n            lpValue = amount.mul(2);\\r\\n        }\\r\\n        info[index].lpAmount = info[index].lpAmount.sub(amount);\\r\\n\\r\\n        if (info[index].lpAmount == 0) {\\r\\n            info[index] = info[info.length - 1];\\r\\n            info.pop();\\r\\n        }\\r\\n\\r\\n        updateIndex(opreate.upStake, lpValue);\\r\\n        updateUserIndex(sender, opreate.upStake, lpValue);\\r\\n\\r\\n        asdicPair.transfer(sender, amount);\\r\\n\\r\\n        address superior = Iasdic.superior(sender);\\r\\n\\r\\n        IFarmer.asyncHashrate(superior, lpValue, false);\\r\\n    }\\r\\n\\r\\n    function halfYear() internal returns (uint) {\\r\\n        require(subHalfTime > 0, \\\"SubHalf time error\\\");\\r\\n        startTime = startTime == 0 ? block.timestamp : startTime;\\r\\n        uint yearCount = (block.timestamp - startTime).div(subHalfTime);\\r\\n        uint value;\\r\\n        if (yearHalfCount <= yearCount) {\\r\\n            yearHalfCount = yearCount + 1;\\r\\n            uint backflow = IERC20(asdic).balanceOf(address(tokenReceiver));\\r\\n            if (backflow > 0) {\\r\\n                IERC20(asdic).transferFrom(\\r\\n                    tokenReceiver,\\r\\n                    address(this),\\r\\n                    backflow.div(2)\\r\\n                );\\r\\n                backFlowAmount = backflow.div(2);\\r\\n            }\\r\\n\\r\\n            yearHalfAmount = yearHalfAmount.div(2);\\r\\n        }\\r\\n        value = backFlowAmount + yearHalfAmount;\\r\\n        return value.div(subHalfTime);\\r\\n    }\\r\\n\\r\\n    function getHalfYear() internal view returns (uint) {\\r\\n        if (yearHalfAmount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint value = backFlowAmount + yearHalfAmount;\\r\\n        return value.div(subHalfTime);\\r\\n    }\\r\\n\\r\\n    function claim() public {\\r\\n        address sender = msg.sender;\\r\\n        updateIndex(opreate.claim, 0);\\r\\n        updateUserIndex(sender, opreate.claim, 0);\\r\\n\\r\\n        StakedInfo storage userStakedInfo = userStakedInfos[sender];\\r\\n\\r\\n        if (userStakedInfo.available > 0) {\\r\\n            uint temp = userStakedInfo.available;\\r\\n            IERC20(asdic).transfer(sender, temp.mul(30).div(100));\\r\\n            ILock(lock).locking(sender, temp.mul(70).div(100));\\r\\n            userStakedInfo.accruedReward += temp;\\r\\n\\r\\n            userStakedInfo.available = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateIndex(opreate _oprea, uint lpAmount) internal {\\r\\n        StakedInfo storage info = globalStakedInfo;\\r\\n        if (info.updateTime == 0 || info.stakedAmount == 0) {\\r\\n            info.updateTime = block.timestamp;\\r\\n            info.stakedAmount += lpAmount;\\r\\n            halfYear();\\r\\n            return;\\r\\n        }\\r\\n        uint release = halfYear();\\r\\n\\r\\n        release = release.mul(block.timestamp - info.updateTime);\\r\\n\\r\\n        release = release.mul(1e18);\\r\\n\\r\\n        release = release.div(info.stakedAmount);\\r\\n\\r\\n        info.index += release;\\r\\n\\r\\n        if (_oprea == opreate.stake) {\\r\\n            info.stakedAmount += lpAmount;\\r\\n        }\\r\\n        if (_oprea == opreate.upStake) {\\r\\n            info.stakedAmount -= lpAmount;\\r\\n        }\\r\\n\\r\\n        info.updateTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function awaitGetAmount(address user) external view returns (uint) {\\r\\n        StakedInfo memory infoGlo = globalStakedInfo;\\r\\n        StakedInfo memory infoUser = userStakedInfos[user];\\r\\n\\r\\n        uint secRelease = getHalfYear();\\r\\n\\r\\n        if (infoGlo.stakedAmount == 0) return 0;\\r\\n\\r\\n        uint _time = block.timestamp.sub(infoGlo.updateTime);\\r\\n\\r\\n        uint _amount = _time.mul(secRelease);\\r\\n\\r\\n        _amount = _amount.mul(1e18);\\r\\n\\r\\n        _amount = _amount.div(infoGlo.stakedAmount);\\r\\n\\r\\n        uint _gloIndex = infoGlo.index.add(_amount);\\r\\n\\r\\n        uint value = _gloIndex.sub(infoUser.index);\\r\\n\\r\\n        value = value.mul(infoUser.stakedAmount);\\r\\n\\r\\n        value = value.div(1e18);\\r\\n\\r\\n        value = value.add(infoUser.available);\\r\\n\\r\\n        return (value);\\r\\n    }\\r\\n\\r\\n    function updateUserIndex(\\r\\n        address user,\\r\\n        opreate _oprea,\\r\\n        uint lpAmount\\r\\n    ) internal {\\r\\n        StakedInfo storage info = userStakedInfos[user];\\r\\n\\r\\n        info.updateTime = block.timestamp;\\r\\n\\r\\n        uint value = info.stakedAmount.mul(globalStakedInfo.index - info.index);\\r\\n\\r\\n        value = value / 1e18;\\r\\n\\r\\n        if (value != 0) {\\r\\n            info.available += value;\\r\\n        }\\r\\n\\r\\n        if (_oprea == opreate.stake) {\\r\\n            info.stakedAmount += lpAmount;\\r\\n        }\\r\\n        if (_oprea == opreate.upStake) {\\r\\n            info.stakedAmount -= lpAmount;\\r\\n        }\\r\\n\\r\\n        info.index = globalStakedInfo.index;\\r\\n    }\\r\\n\\r\\n    function stake(uint _amount, uint _days) external {\\r\\n        _stake(msg.sender, _amount, _days);\\r\\n        asdicPair.transferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    function _stake(address _sender, uint _amount, uint _days) internal {\\r\\n        require(\\r\\n            _days == 100 days || _days == 200 days || _days == 300 days,\\r\\n            \\\"deposit days error\\\"\\r\\n        );\\r\\n        uint lpAmount;\\r\\n        if (_days == 100 days) {\\r\\n            lpAmount = _amount;\\r\\n        }\\r\\n        if (_days == 200 days) {\\r\\n            lpAmount = _amount.mul(150).div(100);\\r\\n        }\\r\\n        if (_days == 300 days) {\\r\\n            lpAmount = _amount.mul(2);\\r\\n        }\\r\\n\\r\\n        updateIndex(opreate.stake, lpAmount);\\r\\n        updateUserIndex(_sender, opreate.stake, lpAmount);\\r\\n\\r\\n        record[_sender].push(\\r\\n            recordInfo({\\r\\n                lpAmount: _amount,\\r\\n                stakeTime: block.timestamp,\\r\\n                endTime: block.timestamp + _days\\r\\n            })\\r\\n        );\\r\\n        address superior = Iasdic.superior(_sender);\\r\\n        require(superior != address(0), \\\"take lp need superior\\\");\\r\\n        IFarmer.asyncHashrate(superior, lpAmount, true);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mos\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_route\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asdic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IFarmer\",\"outputs\":[{\"internalType\":\"contract IFarmerPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Iasdic\",\"outputs\":[{\"internalType\":\"contract IAsdic\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asdic\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asdicPair\",\"outputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"asyncCrowdfund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"awaitGetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backFlowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRecordInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct MOSASPOOL.recordInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalStakedInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"contract ILock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mos\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"onceDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"onceDepositAsdic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"onceDepositMos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"record\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"route\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asdic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"setFarmerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setSubHalfTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setYearHalfAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subHalfTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakedInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearHalfAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearHalfCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MOSASPOOL", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000c9c8050639c4cc0df159e0e47020d6e39219140700000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000002ada0ce89f43547b0edd1dce82c8715d24be3919000000000000000000000000e1c0a5e553c30e776026e8176516ab32107098be000000000000000000000000e7c10ef8f91745b488b6599657462ba0d4547cf4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}