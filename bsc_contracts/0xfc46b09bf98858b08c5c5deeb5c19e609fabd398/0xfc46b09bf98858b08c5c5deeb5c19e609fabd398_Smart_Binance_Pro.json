{"SourceCode": "{\"Base.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\nimport \\\"./Smart_Binance.sol\\\";\\r\\nimport \\\"./M1.sol\\\";\\r\\nimport \\\"./M2.sol\\\";\\r\\nimport \\\"./M3.sol\\\";\\r\\nimport \\\"./M4.sol\\\";\\r\\nimport \\\"./M5.sol\\\";\\r\\nimport \\\"./M6.sol\\\";\\r\\nimport \\\"./M7.sol\\\";\\r\\nimport \\\"./M8.sol\\\";\\r\\nimport \\\"./M9.sol\\\";\\r\\nimport \\\"./M10.sol\\\";\\r\\nimport \\\"./M11.sol\\\";\\r\\nimport \\\"./M12.sol\\\";\\r\\ncontract Base { struct Node {\\r\\n        uint32 id;\\r\\n        uint32 AL;\\r\\n        uint32 AR;\\r\\n        uint24 LT;\\r\\n        uint24 RT;\\r\\n        uint8 XI;\\r\\n        bool YY;\\r\\n        address UP;\\r\\n        address PO;\\r\\n        address QO; }\\r\\n    mapping(address =\\u003e Node) internal KW;\\r\\n    mapping(address =\\u003e uint8) internal EE;\\r\\n    mapping(uint32 =\\u003e address) internal VV;\\r\\n    mapping(uint256 =\\u003e address) internal JJ;\\r\\n    mapping(uint24 =\\u003e address) internal JL;\\r\\n    mapping(uint24 =\\u003e address) internal JO;\\r\\n    mapping(uint16 =\\u003e address) internal LM;\\r\\n    mapping(uint8 =\\u003e address) internal UM;\\r\\n    address internal R_S;\\r\\n    address internal SBT;\\r\\n    address internal OP;\\r\\n    address internal JY;\\r\\n    IERC20 internal SC;\\r\\n    uint32 internal JK;\\r\\n    uint32 internal JP;\\r\\n    uint24 internal DJ;\\r\\n    uint24 internal DW;\\r\\n    uint24 internal ZL;\\r\\n    uint16 internal DS;\\r\\n    uint256 internal ZS;\\r\\n    uint256 internal ZM;\\r\\n    uint256 internal DZ;\\r\\n    uint8 internal LK;\\r\\n    uint8 internal DF;\\r\\n    uint8 CI;\\r\\n    Smart_Binance internal NBJ;\\r\\n    M1 internal NBJ2;\\r\\n    M2 internal NBJ3;\\r\\n    M3 internal NBJ4;\\r\\n    M4 internal NBJ5;\\r\\n    M5 internal NBJ6;\\r\\n    M6 internal NBJ7;\\r\\n    M7 internal NBJ8;\\r\\n    M8 internal NBJ9;\\r\\n    M9 internal NBJ10;\\r\\n    M10 internal NBJ11;\\r\\n    M11 internal NBJ12;\\r\\n    M12 internal NBJ13;\\r\\n    string internal Note;\\r\\n    string internal IPFS;}\"},\"M1.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ncontract M1{ \\r\\n    address[] internal ZA1;\\r\\n\\r\\n    constructor(){ ZA1 = [ \\r\\n\\r\\n0xfC58aF80F48824f1a8DFd58EeE72C5E885f104C6,\\r\\n0x0D6A1A71Ca9C6Cf2662713907A0168DaD6E456Ad,\\r\\n0x648E5defDE7CaA4929880734eF2D1282F9B9B205,\\r\\n0xC1c79533683DE3Dc35aC944EF1d5820599DE5Af6,\\r\\n0xB6861407Beed9f71855b4596B1970c51Ec25fB94,\\r\\n0x51D3058526a9A224641cC28bA89b9caA9Fcdf48A,\\r\\n0xa8F2463B15DE97E6e25A76A11A1a248592C809F8,\\r\\n0xB534d285eBA4503892039fA073A97299EDEec68B,\\r\\n0x229F41B26259f788404326CD6f5b5440436f1E6F,\\r\\n0x07B7292B92e74910Af435dB1E74d30431edaF7BC,\\r\\n0xa8a0937e58B93f3EeFfd1DeDBB7EadeC82A21051,\\r\\n0x458c46931899Fd3d3aC03D45ed6A2ebd1d462a73,\\r\\n0x0E2cDF53402B6f1E01746f4860f9D41502362c2C,\\r\\n0x71bbCC3695D2df845900f0098b9b8BdCCCC83521,\\r\\n0x8Ce88513CE7a038e9C74617af01CaE4e26eAC13B,\\r\\n0xDE33Ed289904B52C4A9B1Edf38dfF02CBd70790c,\\r\\n0x17687D96AFdB108a79F75b044E64e3855780Ce96,\\r\\n0xA858Abc0B1bDd3C18BD1959db4D7c3F9dC76DfAe,\\r\\n0x55081C0f192A0c79055018679F9AE62E84A29645,\\r\\n0x47877d088a0CeED6d97624EaaDD4B67C74A6DEEa,\\r\\n0x7bFe6Fa7615017F646FdC80Ca1A7466f09B8c1D4,\\r\\n0x535Ce76eD2FC88DE4Da20a3f7Eb8838f0bBEfc88,\\r\\n0x5be0033f13107eE74646f8C5f0391E702b22f83d,\\r\\n0xCb0ec08392628de2455C31b3e60874f90de5EbbC,\\r\\n0x3b43741283c4B0f4ad04e4ee678ff8740d85dbCf,\\r\\n0x6c6b00f275542eBc03FE7604C74434d7f85a865E,\\r\\n0xf463Ff37DDA7f7113B49113E64D0A5d5A8531596,\\r\\n0xb914655B297e056Cf11D91A988E3575C864f202F,\\r\\n0x370a89297771d6F1Cf6045EB826cB4D6e23e02C3,\\r\\n0x52e4CA6378D5BB85Ef8ebFD6dC369f5F5B674D01,\\r\\n0xd65D90C9Fb8d571D1d7028c535b7Fff47c79B3A9,\\r\\n0xE9d6Cd3FBcf1e150892407E35799b51fEae33E48,\\r\\n0x376070A723Cc1D18E6a69A46c2dC712Ba9EEf01b,\\r\\n0xD12C1525b205569153B81AEE9bB3D37BCAe1fe96,\\r\\n0x31e19Eb328DC7081DC2Bd1Ab839473f0ffCA5b58,\\r\\n0x2C6292AD9D6cf65f1423b9D2F32A61cC5dA53b95,\\r\\n0x96bA727F367d1FdF0920fb271b796E5510bAEe54,\\r\\n0xE750490300e382C6068426Fc1B15CC3bE09bfB7B,\\r\\n0x31CCD4546d27C0cb40d1d5851bc3e03D29335364,\\r\\n0x697B6B36ADC6A539042E0864A7184bbb7868960D,\\r\\n0xD72D9d602817fb1816e3A0A445EdD44B78cd29D6,\\r\\n0xb8f2A7EE2D984Fa57029a51B6B3DC065790F328C,\\r\\n0x5A18Db939F1f4154805CB5217B56562fc3305506,\\r\\n0xAE74ea7ed980F9F8ceb3e2664F7f18ce4ac7170a,\\r\\n0x6F1445F6F03c78d611a5c972159e3Af6A57d030E,\\r\\n0x5E7bC81e8FEdbad38C79217F62DFd16BB9AEC93E,\\r\\n0xDA120A6e8Fa5f8aB35cee26F5b664b5f102EA7ff,\\r\\n0x00BB241f47408d3b1d3e7454870894Fa1310A9d6,\\r\\n0xFA0c60C1EF0C268e7de989F5a3Af5427f89867C6,\\r\\n0xb66095A4063996B5dB2718C9d6EA9264F5F81C9B,\\r\\n0x2AcBdC484e144d2b5c139956d406C0E8Dc504285,\\r\\n0xDB03C23E4DD57a0D6d2F4956930DF82A1FC3C3c7,\\r\\n0xC6C880eeD98585c30ff79052314885EeE5c6Bb66,\\r\\n0x35668a41386c953Cc80a00FaEA519A083CFc175f,\\r\\n0x22f3597F49D03BB61F47B7dBF51bE8836ecAbA0f,\\r\\n0x36Cd3417CD576Bb20Dc0a31A4dC0aFd58D945161,\\r\\n0xC73511a2BCcf93F804D247F74516289ebAd2EFc5,\\r\\n0xf0975aD25083E25164038355f6DC761Ae5C6fE5e,\\r\\n0x51AdB29edcAeaE81b958d9722f4fDBb79519C6Bc,\\r\\n0x13bc4D4e3B5A4E4704c0e6B63c30c817A26fa6De,\\r\\n0x6De031311b4f5061791DEBf11e699891739C914c,\\r\\n0xB34dB44cA62E3d4fbcE6EA5c459EBBE2421a165A,\\r\\n0x8FeB4B5FF88ecbB1D4F356f725ACC76Ad2999887,\\r\\n0x59618b756a13a44a49206800E4eC5BaF7C03c008,\\r\\n0x895fB52A63aa73761327Bb65bAfCe1F3836E92b9,\\r\\n0x713e57742207C9d3bE6Da70822cAfe7987752202,\\r\\n0x56ee8B658C1bCd729639c3601E34799fC6199AB1,\\r\\n0xd49c589c19f1E481DE81ad0137Df71D990667f86,\\r\\n0x87b5B28A4496eE141cDd07fe106a1250250b271f,\\r\\n0x728A1F43813c7728b1C13567a9e550119bCc505e,\\r\\n0x3d0DAc695fE5Dd3C40f3cf43274BAab46C4C59c4,\\r\\n0x3C2D0A52473306D75a565bd20F7d773e5A632C1C,\\r\\n0x284E22DE991e16773940E3d83035b1D81391A14D,\\r\\n0x157C6c4eC8D8b78416E27F1536D8D952e262454A,\\r\\n0xBe074466A27c03Ec586E697AF668F6c0750b6AAB,\\r\\n0x6646853b0C7A1BA823E49aF7c47115656f3bDd28,\\r\\n0x6F57A49e13814B80180524B0343D19e62cD43BFe,\\r\\n0x4E89F4622d15157c2A24247d55ab2CA42d68388f,\\r\\n0xf13a0F281709C4bED24778fb82A02b491d0E8bA8,\\r\\n0x8A6b62dF507c80d5c24dbF7e4A6F076a8072116f,\\r\\n0x6d364C5D5c2aE90710C3Ff97aA28574816F1276E,\\r\\n0x04D083C96532e8Ee821501738f589D146fC72ea6,\\r\\n0xe7E4EBfD7B9801Ff617b16F6bbB06A430d4f4176,\\r\\n0xfd0083bB86ceBFb9351522425238d509F5bbE4aE,\\r\\n0xcD279051D534A40F874d29e3dCa0d37D73114157,\\r\\n0xA7Eab45F587d1f8736DeA55a9ac976E348c9cc32,\\r\\n0x8C2115a15Fc5CFd38020BD9BE56CD7948A4f9AD8,\\r\\n0xa26089E1A04142fd028585A072fbBF5B093026d4,\\r\\n0x4aAa21BaE3123D72De93b9E3B658b8E65ef234aE,\\r\\n0xCB20Fd6af065E56fdDc964f227d6f77E619F75E2,\\r\\n0x45D54836E89A2951a940F8030714C6868b8FC98B,\\r\\n0xE32F9e8d07eD7C44e61d84052AaFc6635B75511a,\\r\\n0xe02c9943DE609133c0F764c6f063FB65D9773eF2,\\r\\n0x8cF0f17F3107924Fd688e1b4b9f9F19d7887b4EA,\\r\\n0x1b60F7a2A0A32B00663F2929226f2d8CEb7BD4e6,\\r\\n0x1A9C623915383184D00b45B98edfeBE889a1F04C,\\r\\n0xFcf133c54cC2D88500CfE7fd1fee89090af3E6F2,\\r\\n0x255AEc4C4D33F01981dfCc8301B69d7df059BAD6,\\r\\n0xd4e346bb10BE72ce2B136776B93ad0713519fE5B,\\r\\n0x48ab47B53924Ee8FFef569E4aD7B54518771187c\\r\\n\\r\\n ];} function GA() public view \\r\\n     returns(address[] memory){ return ZA1; } }\"},\"M10.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ncontract M10{ \\r\\n    address[] internal ZA1;\\r\\n\\r\\n    constructor(){ ZA1 = [\\r\\n\\r\\n\\r\\n0xcb5a2ED3c3E66415779eae77a60e511dbE68D20e,\\r\\n0x186Fd04367eE5f77F6c060c6c1A8FEccaF484cBd,\\r\\n0xeC834c63Ac69D2B73eF92B7EFd058C6AD4C3c903,\\r\\n0xFfD606eAC6Cc347467Bda6965029BED99E1C588A,\\r\\n0x837c3EbC0bA6aC484682b6a5F7928b0F6f000985,\\r\\n0x75CD13D75596a6c237E07bf849932Cb15b80781A,\\r\\n0x3d013d9ec5C0424d409d45314061a85eBA7E3F6A,\\r\\n0x0d9b2576D13092e412e2b8ef3E0CfcdC80F4d008,\\r\\n0x5040172e5a6282e34658228675FBEC6C3D08bBEE,\\r\\n0x5acFD37250147678dB11049a3AdF597AD1875565,\\r\\n0xA28c0aF85a80d04F923C64230B3a8713d3bD794b,\\r\\n0xACE7d5668af0dDe64cd6d99aBa68CC03e32A45Af,\\r\\n0xC09Fe0aCe18D82bb37472eE0DffD102FC04824F2,\\r\\n0x7cbB2d71295Ea8D0279615AE55360B4571d91869,\\r\\n0x5c3D26D19D67D9956c2d6BCcCDdAe89D1C2dEff3,\\r\\n0xaB3FcE160E63489532142cCED0f22042De706478,\\r\\n0x80573A01b7420CFad7d5a002345Cc863D4db1cA3,\\r\\n0x04A4Fe7b19F283149b873E3ad84f678875Dc3310,\\r\\n0x90A3198997CdB0240897826293C09750aF314995,\\r\\n0xACf506Bd7512e3BcDBDE5efa346D8e7F2fe19948,\\r\\n0xe37419aeb9675f931D35751EA3a9e4833934eDb7,\\r\\n0x5eD4dDa614A789E9757F767D522d7924e85585B2,\\r\\n0x240f457CA1Ce489B2c8Cc32B251d587ACa7618D3,\\r\\n0xb1E0485D0941286e9c0e8d343B7c47488cA92B24,\\r\\n0xDf20d97DF4A353de64b09B3FedaE8ab81C7CCBFB,\\r\\n0x54F59B4Cf483B6Bb08dFA3086FCED7F2092A2170,\\r\\n0xd266EA157DE7AaF6299290f9895dAD3737D72167,\\r\\n0x5f885B73737Ab5dab0f034E82d2e2F43040F5614,\\r\\n0xCf3D0e913C6B4368748416969F51bA46DbDcdB75,\\r\\n0xa5499A1a942500F4CB3cf5C3A50ff02B280d220A,\\r\\n0x874315b11A1e363fB3138DcB12b5A871e13FC82B,\\r\\n0x7C4E2A5D2fF91cC073f95Ce7B85De4e9fF1D9B13,\\r\\n0x6E5B996b1E9287E0D2Aea4dF191FBa3373299d5d,\\r\\n0x44eC452a099E4D9ee3650b847269C5da5DF7f2b2,\\r\\n0x8b371faFaBa08E0a6e0793BB5FADaFd08317bd3a,\\r\\n0xd81305195EC194899b7cE65F4626E63B23ACf23A,\\r\\n0x54510807c3E9E98524c912dE586d9F3888d9FF03,\\r\\n0x13e31b53502636ebD527Dbffe74717E6FEd613D2,\\r\\n0xF8747bc8B4615A4f72D2c18D0c7DF0aE20f889B9,\\r\\n0xF97C77f35f5DDC2EFe73a1cb638da6C7569fa39b,\\r\\n0xbB902aF55C1Dc4D53efd2e497B8200a33A7Ac232,\\r\\n0x453F9022679253e36310d6a07cD0AB34D4cB08e1,\\r\\n0x66fdB429D58Bf0AB166EFeEf4e8Ca3f420d1Ca38,\\r\\n0xab35d748cE43E010104D7112A52392dE2c07FEf1,\\r\\n0xdCA962C3aa9Ed203ECcA697CE59d47049476a94A,\\r\\n0xE3d2c487BeBdD4A0a347133B6c57dbb4929D15c4,\\r\\n0x1a5E67ab079Ccb5297e36c78D7dF61819951610d,\\r\\n0xa18cE9bBfD1738dD8098FEEeB6d626E1796f644c,\\r\\n0xEDf8e2bf8f4fC0b1f19380b7e8172d443b145EB9,\\r\\n0xAD72272FAB9d9301e71E60978f408837232B8c99,\\r\\n0x8751221555947631D461E51445c87f2a89Fe95dD,\\r\\n0x92a46491d77609aB4E9038574f8AdE0eA98A8200,\\r\\n0x481a9f55D5C51c6312553930e53E3B42B2cE0122,\\r\\n0xAaa9bb2cBE33B74E5EbfB71bAaABDADe19479630,\\r\\n0x64bcBbD7A208ec29d950fa0429E59D051fd6053E,\\r\\n0xa9c86f84B18a56c0A23FC4Ae5D4299AC60C53292,\\r\\n0x298a05A5B9F0979b3dA2183F02EC3B580BBfE0BE,\\r\\n0xA6fD7D1FA6Ac1b8646F4C9a1d72734bcA13738fc,\\r\\n0xB1B54Add22B9d86fB066a5f1c7fbEDDf95342F8e,\\r\\n0xc9c6e983b00607D5bCfE1287E2e67fcf26958084,\\r\\n0xaD32Ee3E6287DBa56aE8B0FfF4073f931E2aD2F6,\\r\\n0xA8e2e589bC62A0d91CE00a44D3d914B051f08D60,\\r\\n0x23172751B8ea9e6eD74FC635F0cf4BB52f2Ca4dF,\\r\\n0xa5A1c0f9E611Ad574f34b858f51B2dF79C0D97C6,\\r\\n0x25DD2aB4167304A7Cbe49fc7308CC94D6F0AbEB7,\\r\\n0x0D6E1B9f93FD06C375DdD71b0Da1CbF19508981b,\\r\\n0xaB100b6eFeEE923fE773e088861b40D7dda5A3C4,\\r\\n0x830d72119386319D22AD86a6F13a2B6b22a4317b,\\r\\n0xd053D5F075e45aE42754B5a0b02FEDE09262bf25,\\r\\n0x9C9CE1B9172cE1a39Ab9c21C4340255c671C67d9,\\r\\n0xE53D1B786408CDda45BE67C0775bbe3cF0De0b91,\\r\\n0x5CFAE61940D615Ab6527E37CdA01717f1C4E3FCE,\\r\\n0x1E06C5AD03B64a5EcA7f181A8CA6ca08CAa7D426,\\r\\n0x69EE72853C89e5598890133FCa3617544527edF9,\\r\\n0xaDB280aD82B3Cf0eb02a76a91B0916CbcF9EF979,\\r\\n0x73B6082D9F189644625251aF437400b5915f7997,\\r\\n0xD9d3B9B630B5230046E1a4a8cD2Cae381AE0494b,\\r\\n0x04262B4097558CCe7277F4F8C069D327d0657f03,\\r\\n0x0BaC19ecF327e09D5AC1353D1d33D1887FD68573,\\r\\n0x005293FcB355C6C56036a2612C4f92E1F2a172Da,\\r\\n0x1b3D643d2E908b8F4eE2C8ce026217C00e66265b,\\r\\n0xc96A86175CEbFc8d0339C5E0e8A8Cb36664B7902,\\r\\n0xa62df2E3C4925984B35AA0cF9e6A06c3F1C43119,\\r\\n0x6D544b9211d241B3761DcA940bf4236389A8c694,\\r\\n0x34A60898f7c804a004De956457D06494935bfea9,\\r\\n0xFcfAfaDf5a29Ca50495C1B1f8Ce91060eE7aFeCa,\\r\\n0x01673a33aa5ED81BE3aCFeE5Cf8EB4A5e3Ad71aD,\\r\\n0x7c1B9F1AA0f933102623F5819551E352730680b0,\\r\\n0x17cb69c96607D711590FD35655838d3276C34B88,\\r\\n0x2f4fF7Ca00D3866821D5e25050Abf15f4CcaE18b,\\r\\n0xb049A501448aF3c38e612d22594c1eAD3844C9bF,\\r\\n0x297d8bD01BaDb4cca0faCADefe0334dC901E3Fb9,\\r\\n0xE11DECeB2FE117722d9e0F0d12F339c275e3Ef6F,\\r\\n0xa7DD92eFb93f261B14d5ABC07371FD073BB70616,\\r\\n0x8662195eF9a2A5Bdbd1c46a7c9e2b52599021c05,\\r\\n0x1e7eC88Fe98190FD3533d06700eaF8a76A92b106,\\r\\n0xfF4aaD55b9C096Ca239bA6c2944EFdDe8Aa321aF,\\r\\n0x7CA000156Aeb29B34b8F92C112a0B2781b725204,\\r\\n0x8BACd0212F0f6CCA1428986E0EC991a78bFB21C4\\r\\n\\r\\n\\r\\n];} function GA() public view \\r\\n     returns(address[] memory){ return ZA1; } }\"},\"M11.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ncontract M11{ \\r\\n    address[] internal ZA1;\\r\\n\\r\\n    constructor(){ ZA1 = [\\r\\n\\r\\n     \\r\\n0xBA7C40762307929234c9FFC3c8D063992cE28616,\\r\\n0x2C58b05bd366e9958c8e17f2d0473aA60EF7997c,\\r\\n0x6bc36F8D5a089a7Be85400Ea92127eb75Fe41503,\\r\\n0x16C1ba25F55C2816827DD898FE4251e6339B9182,\\r\\n0xa49bdcED78a5aaddaa9295fDe1205135F167ca2F,\\r\\n0x24621eAcb9220C15b9807674cC164d55F889c367,\\r\\n0xb6d3AFee25eDEF59ebF263F9626A763ffF6e6b74,\\r\\n0x8dcD64109e167d444a13Bd9e9c43BC867C510eAF,\\r\\n0xf53e4ec24C7F4e46763E30A7Fc3dBd50Bf5E515b,\\r\\n0x12440F9363a59AC778fC50C151818094F0b97F06,\\r\\n0x0b8508bE8Eb9d66463b1993F449Fe4BFd9EF703c,\\r\\n0x8681F5cA6f9C51eBAF5D3661E77F155E8a66ABBC,\\r\\n0x4B0ad68967db463D48edC1Dc185C1e417481beeC,\\r\\n0x4963F4E3bD8AefAfcE93199442098DEaEe84F423,\\r\\n0x34EA0E8Faee144F4A99039CCd1d44fF033Ea2952,\\r\\n0x3B81d54c29737bE3254A84236cb877727feec2fc,\\r\\n0x09A56a91BA9764a0d2d24f0F6156aAd521C8bcFd,\\r\\n0x8f483d03D654221437401907C4FC543A23F55Dba,\\r\\n0x88e65FdF627381882C3Dcda7fA08a453382D0Bb6,\\r\\n0xF1f53b5f8c6c490009c3f591283A5178934D2E68,\\r\\n0x3364A25D5aF0547be311cBfF462fcd35b3fe0627,\\r\\n0x3722173D9175e1425e0b523A465627e41eD0Bc48,\\r\\n0xBfb4263f544E56AF244A54EdeC94a5f74DBDBFda,\\r\\n0x02A3B6dED0c3981e6f2c8aa454633A2cC299343E,\\r\\n0x77D358addC36F3F0f4AC5395035b1F1cb72F1f85,\\r\\n0x5e83fF1f746C1c1E9cAcc2122Ac9800D37FF7988,\\r\\n0x788Cf97E1e4D04F11BecDEe9523bE02401715459,\\r\\n0x26d48223DcE2C4160c2aa9D01Bc55403763dC4f1,\\r\\n0xbb1dC2754196aD5ce6EcBb5416d54FDE1EF74aAD,\\r\\n0x392F2ADc220FdE6253D04A930D58C9852f6c60ae,\\r\\n0xFCe4b2232CC51e95C93f5CC327a4bE9F4B210635,\\r\\n0xc3c8a5F7DDE9773c39d453B6cEac5670A5ED05A7,\\r\\n0xb1558E21E7061b9A7a47b9a266887f35347D35FC,\\r\\n0xFbf97c7898aD3F2dbbfd99C6D0E09C9fee42849d,\\r\\n0xd9ab52BF6D13aCCE5858C961E38e5155dd5F3004,\\r\\n0x7A9a760Db38908cCC2f70d43844Fc0AED99101F1,\\r\\n0x98af99E56e2Ca554DB54B68e555635e0d5B49684,\\r\\n0x82ddD4F0F99E895915A7ac8271f9629FB7d96b93,\\r\\n0x6eC0e68e6e3A7af82501117F6902D17330afa17F,\\r\\n0x10563aa4130F48D53b4C7754B4E2aF899b1bEB97,\\r\\n0x9C732EF01F63e5Dec73b11a4C6DBc143AEd2a54c,\\r\\n0x6aB37C556De227d532E867CE4CDDC9BCEEadD719,\\r\\n0xE006A871FF56eCDf189b581c0C07DCe8E5CF2fC7,\\r\\n0xdCDA89D869f3D9866970E693633c5e7afC843f79,\\r\\n0xCd28Ab20d2a7668920fEEfCede3c8A5C132d7404,\\r\\n0xcB12c063f42c0bfe238DaaC00a61b06Fc5E46A05,\\r\\n0xdFbAd91fC9863AF73F5bCE7Aa46D825FB96da003,\\r\\n0xf7F301326b72b03eE21afA3dc828Dfcb7660daFE,\\r\\n0x5CcC4696751Fa6a24292159f604F54f87A1B76be,\\r\\n0xe2371c919cfCaf2985640A6E9f5331933b4Ab731,\\r\\n0xCA7E862Ca45B1E9fd411E7473A6F123987E2aB72,\\r\\n0x0a76D7348BfF30E757225133Adc32674f439ee64,\\r\\n0x756E737d0F011be44cF49e03A6631985bAc9ac25,\\r\\n0xDF595F5665Eef87B090cA05bADD2aaa3069b36b7,\\r\\n0x7C6fB8c7EA91F1075f29d85a91b2ec3B8E5EbBc9,\\r\\n0xCEFc7AA7175b26B62d40E0A642956Ea3cFc6fb24,\\r\\n0x712412842Ff6Ad930a352604F67E231b11FeC8cc,\\r\\n0xdC3fC17297A779B9e6BaB9165dA96478B7633394,\\r\\n0x847D5c86A6d88C9c9EB8708332C21b2531E4541F,\\r\\n0x02cA25d85b618e3bFF3Ca10F2C029ECd483Fc690,\\r\\n0x5AcaE278eC9f6777489f330b50fc89798F80425F,\\r\\n0x633412A494Fc4E52195a668f7Bafb0cFABBFA9A2,\\r\\n0x8d23f0dFbAca50799ed1168762aABc22D709D71f,\\r\\n0x9b2732D5638a09104f0250e21458c2f0a0d76396,\\r\\n0x29921043022412CD11F6C3a6f2D5F10aAB8Ede6F,\\r\\n0xd43a05D1b3F35BBCa3A89bFef397f4c86E9477ac,\\r\\n0xdDa25f9C5f9152fae3080EF176e11690720D69c8,\\r\\n0x59141ea5A471D8F449134f427fB394eDa95FaC5e,\\r\\n0x165D76424F9D9863fD2fDA0bCD57cB81Ab086cF0,\\r\\n0xA293D2cd7eebB47fFA21D7Eb88253Aabf17C2C8C,\\r\\n0x1eC5B608Dc641bD39Be5028341255A4142B04395,\\r\\n0x0F21d72AEF87c336912De48F3B4c6F521e20E7E6,\\r\\n0x976a442526f0422c10926bC68af0b5C83dA50BBf,\\r\\n0x2e73EDa41484b6EA32760F07083e2a8d4cd5d044,\\r\\n0x42d75A94e9aE5D2fa01F844CefacE0626f8de7fc,\\r\\n0xd90A0B3399722EA3abbA0124661fe4E2d31454E6,\\r\\n0xbfAb29254f21f04E105eE8f0E37F0154C3792512,\\r\\n0xb205ac444Cd5b0d774e92fAe5b94931bbeD9467b,\\r\\n0xa9E5C511dA6d3D9009e4219A002C3D738ddB1485,\\r\\n0xcd28C2229B407508FD5C41B457cae3A5d4d93907,\\r\\n0x5c04A861266EC6F749C57FDA5281968937b591c8,\\r\\n0xA16D6B5a4B4B6b5763636Fd1c2132a1Adb027c5E,\\r\\n0x4200A2F58b33B4e6681D36BbDa657753333CF2Ba,\\r\\n0xba2051C94096ca55e3f81849D30a02Db8BBe5631,\\r\\n0xf36D26Ca901363e1EF8293db16f8faD2e67BdB06,\\r\\n0x027aee0Aa5741D32be1e19b2Ff53d9570906C04b,\\r\\n0x05735279D198f9b4bd9c08492d87dCBEeFa2f4bd,\\r\\n0xA360F1F60E2a7Da8C1bD3c1890E412F3f5e0a33a,\\r\\n0x3fF01Eb2Df24db6d710FEFC8653E1448c024923b,\\r\\n0xB7ADe88e462a9FDa57CE0C3Ed93bE0D3da46587f,\\r\\n0x8915715f6BD1064E1fb31e61c393a3f3cdc476cD,\\r\\n0x66B49ef9006E7Aa5abF917446a67bEeF44aDC0Df,\\r\\n0x57c194380a5970082548B1f30A5FcA44463E7E4E,\\r\\n0x2ecf5C73Cc23EC99A2309b940D0caD9c939A1Da9,\\r\\n0xC12c9B47Af187A6f999c50F40A82CA5061ccb252,\\r\\n0x0526cDF1d90957fb5Ba728c485930a879C230293,\\r\\n0x8c708Aa625EA68c0E9D9D4C1aF023b496277d20C,\\r\\n0x513f38E8eF0b3A549cDad5F5b65f2086C04f8bAb,\\r\\n0x3a6c617e89fc0FEd12Da5D0D0784A73446B93557\\r\\n\\r\\n];} function GA() public view \\r\\n     returns(address[] memory){ return ZA1; } }\"},\"M12.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ncontract M12{ \\r\\n    address[] internal ZA1;\\r\\n\\r\\n    constructor(){ ZA1 = [\\r\\n\\r\\n0xF3dAD4020000574ea1d2B28992C84Da3cb41dbDf,\\r\\n0xa9a556F1eD3F1bAf11F738891Fa163A981506Bfa,\\r\\n0x27F69162Cc71E544ba1f79d605571dd39669026A,\\r\\n0xe32640B5618d1B28167cFFdcd2A02Ccf8Df26d92,\\r\\n0xf7604712Fca81D7A68a212E4d941ea0fb1c386B6,\\r\\n0xE4010c88f5BF564E5F74425f8C3a1f659Cf262F8,\\r\\n0x07d2476A3540986c9c7F94319D9883C7938A8ba8,\\r\\n0x59896bc359AC2F68Ce50b571C7D3d581B823E82F,\\r\\n0x584Ec2dda41af732e7065ad038a94e81215312A3,\\r\\n0xBE3499298Eb20E24C72bf71D20EEdB4D6c29bF6C,\\r\\n0xBDcf1EDF24af2900aA44610669671922ad0dd473,\\r\\n0x9ebc410ea1b2742d33D7697E9a514FF2197B3887,\\r\\n0x1423391e41D559eC20f30150412f567d8505f346,\\r\\n0x4473d67e673D751fE9D982eA8e9888B3b28ef830,\\r\\n0xE2615BEDdAEc4dfF0ABABC5aA2192146E247b9a7,\\r\\n0x6E8312907290b7da564643559aa7450Ade70E930,\\r\\n0xECCd4D30C3DD376B63725b2d8035468517358581,\\r\\n0x527D8B18C08430cA36cB7e35792Bd2C3304b0bed,\\r\\n0x67A812ce5a4671bBA71F769834BdEb3358665e3B,\\r\\n0x06799285C246f702A51717EAb5Fd7ded26b5FDE8,\\r\\n0xfcE1B97dE5bb7d219a9F381fc0e61c6C71391e9c,\\r\\n0xB6480c05D9901280d364738Ac8f4039ded148aDf,\\r\\n0xE9135a55075Fd1967e58D61978F6545b2830717D,\\r\\n0xcC48a06Ab93bb1d863423dd061279F8de252F637,\\r\\n0xba5afcef66960Aa0Ba49ED216ACAd1AD0AdA96F6,\\r\\n0x8681f124F873ABd7dEef7548Ea8dc9F15Ed590cE,\\r\\n0xC3015836C1b533d056C9524D011d8e829eb1ECE0,\\r\\n0x831Fad49f2ad7881eee2ef8c08E8F20104090b42,\\r\\n0x9dED0324115CB97565c53C493834effFad2D3Ffe,\\r\\n0x80E8006503B60d5C9d21b129D13abeA700075D9c,\\r\\n0xFe7885dAEc356518b3378E2Fa2D4d696B5375958,\\r\\n0xc2b5a88677C0673Ab29490fD1cD75f52e2197590,\\r\\n0x6DDf49E3C1bFd86B892F37B855E6d594A1B4D302,\\r\\n0x91DcdadeDDB6c7d45B9401E59C9cbEeA75F5b3D6,\\r\\n0xeaAa24F816b8556Ec6c319f877Cc82FcbFE73852,\\r\\n0x0D1E26bE876C8eC570F34C423735F038d6012ba5,\\r\\n0xf16C99D2b46CeF742177E6581B6B79131C6ab9D1,\\r\\n0x5E5d157268f78B6DEa2b1B667DDc402b23eDEdAf,\\r\\n0xFC94797D550485FbE569d3D3BB21c5a59CF426E3,\\r\\n0xe31fD9af58263ccf71a2aBf1da2f4CC62919635B,\\r\\n0x3bD23212383CF24f81D1fcd97E6C870c34022F0d,\\r\\n0xe8a16d1A7073b41a92346C47b5BB03f35e6c62aa,\\r\\n0xD31f520e905ae4D37Da55Ba60B41F96BD1EdEbE0,\\r\\n0xd71279fEf212fb66F3c4c46671D1634c698f4747,\\r\\n0x1f788d2F84008d67f2f7D99E02706f0Fb42B5c03,\\r\\n0x41307c3AB587927dc78Af7fA10e61d53228bf306,\\r\\n0x3C58a178897a5493B32Fa9DC4B28045f73150FDD,\\r\\n0xA8BA97116622640CE6BC0b9B994fD486D5779345,\\r\\n0xcD63092456c0e001D98C4cC1559Ed840A76f07A2,\\r\\n0x35f728e4c74F642134AbE702261EB55916a1879b,\\r\\n0xcF6e314926f4dCEabeAc68e6fD1d2C6083b746d4,\\r\\n0x5f28ACb809aFdA38fD67446B48c5BD9C6ecca5c2,\\r\\n0x43feE2A1CB961B2eAd305d717C3393F25479822c,\\r\\n0xCE519E1ddee1cCd7eAC91Cc5cb1c6D576Cb8b040,\\r\\n0x267877746f2D4Df672170ecA6e6f07ec687f50Ff,\\r\\n0x241d3913Ac77AD49e17027af642cB1E7f7803B78,\\r\\n0x22467D2C6b78B6Fa692bd156CDF693342B1F6341,\\r\\n0x9f32274BDAdAf2B91177d09e9E7af9e0781Af3c1,\\r\\n0x8618F03787063057E9B7D0Ee178c0122732307fd,\\r\\n0x0230D596Dd740FA751302C001AAbeb31c56F5BE8,\\r\\n0x4c5C359B5317992A458CC69F451746E508Aa5E71,\\r\\n0x68E68db3bD26b4D8a1c83224b1317383D98b2910,\\r\\n0xf89CC641E332A79F20892eAf858B4449fFeee001,\\r\\n0x0defE5a074377506cbb34022bD50b896f020Daa1,\\r\\n0x709079A8Da550fB84636F8Ef49303470dBF68379,\\r\\n0xFc2f544E299778655e94c892b7102529DCdB37AB,\\r\\n0x83f24FAF5aD29DF339CacE59950C5Fdd5634B2A5,\\r\\n0x986c9E70263E50495f51F4873d486Dc6908eb795,\\r\\n0xa54958Cb305Ff551F625e0acAc0bB955ECA2b843,\\r\\n0x5cCc93Ed78EaCE53ff8C0f70A6501287D989A695,\\r\\n0x6628DFcf021B2fc436bc8EcC5bB63babA9AC127C,\\r\\n0x451Ec5eb0063b8Ef4a073f082763E7F56C5F6824,\\r\\n0xf936c3B6adBEAA5B8b61Ae94AA1F88aEE6588bd5,\\r\\n0x5b508582b9B6C32b7510219EA447Ce83888B102a,\\r\\n0xe00A1751DAAacBb9af0a77999e8AcF09D418c149,\\r\\n0xceCE20cfdA2F8675Aa5cAe82E228B97EB97c5275,\\r\\n0xcF14577e35BfaD95BfC9Be640924Ade6FEE4394f,\\r\\n0x968eDa06937B04a959E32297ffd117C7Bf3d88ba,\\r\\n0xB427E253D5b1b1fCee44aD0f3B678426e0796953,\\r\\n0xce0C399C936F28A8258245C2EdE6354Ab8C77170,\\r\\n0x7f3fA87CD84A65D6300AeB03E63D4b652E879e46,\\r\\n0xb05dc5c697F4959Bf06e999F7f25A8d93Ca1fDF4,\\r\\n0x2E87e3efBf051954a68d265055Edb0639D3CD0A1,\\r\\n0x16c94922b685EdB34Cfe073A8093F5e9057a3E89,\\r\\n0x6661A4F594Af9eA53fB018988db7697dA9939e01,\\r\\n0x385F9E57E3FEaD63808d42258aBEDC447d8C87Ac,\\r\\n0xD257fdD238f9A571B10b49e533d370b4C54a3908,\\r\\n0x96aC03AAa818eA0770caD2b3790B78D4DC79BC35,\\r\\n0xb74220454225A4891CBfaD65342717435f868699,\\r\\n0x3E69F4592741A6e83d192dEFBB4857470529e0bb,\\r\\n0xf7Fc070eFe5d83db624EcD87DE3e68d74C8E9fe7,\\r\\n0xdD0922c9eE0c9c779bF1827e8621a932F8931c6f,\\r\\n0x0b8125Ecedcd7302618ee6459117132225BaF4A9,\\r\\n0xcd99d28e1d1dBcF05a4593eCC5d338b970D0cD73,\\r\\n0x722562C9a3C858b126efD9EC13764B1F8557e9bf,\\r\\n0x28F9EB367D99dd7651dc6342934bb149d2b457DE,\\r\\n0x22D81879F547B26c31A8cf5b3D7330CEa9B1D952,\\r\\n0x486562d3829D44FbD1153e5527Bae79d1d000EaA,\\r\\n0x7b23df129556227b9CeA765448aaF069A78f4bd6,\\r\\n0xd2Afa64d374875c4059C2F0E4DAAE8aA81e5EaD0\\r\\n\\r\\n ];} function GA() public view \\r\\n     returns(address[] memory){ return ZA1; } }\\r\\n\\r\\n\"},\"M2.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ncontract M2{ \\r\\n    address[] internal ZA1;\\r\\n\\r\\n    constructor(){ ZA1 = [\\r\\n        \\r\\n\\r\\n0x5262f5BF90C42577294dc225f2A335CCF16f32A6,\\r\\n0x716E7E6172Eb0e6Dd674557f7687A7307fDc097e,\\r\\n0xd5e3dD5f7C2B9959842E12e5ABFfec1a77aF6bAa,\\r\\n0xC4FBd8B6f3c53dB94516D0Adab01Bb7c930A8054,\\r\\n0x581ED5Ac7e9BB5b6351F25636d9d5Cb07A205678,\\r\\n0x5b17a027C52f43431853fA5F138093d8A96D8Fa2,\\r\\n0xfA504cDf4ADF99f0f59A20C607b55d883C42A554,\\r\\n0xD3b71be5c51460F30F3A3e5aA1297ADae3C3A6c9,\\r\\n0xd264a47571b44F65986E973f172B1Eaa19702205,\\r\\n0x9b4f200a8696650dba1c1295Ccf01A0E4892c5e2,\\r\\n0xd6Abfbbec47B2A463E1Fcb394D3EEDdC23f83bf0,\\r\\n0xC27EC64875E883D8250ec583A7E5799b6E511f18,\\r\\n0x457471aEd3c06FA5657641561C5d5E3cc288B29B,\\r\\n0xdD0d0C189837548915fD6cB1E7Cc3F3E469e96d6,\\r\\n0x3D503da10661E830A79B305C6462976C85Ab7464,\\r\\n0xC92489f0299AAcc3bd1F49Fab8991da3D891239f,\\r\\n0x4E78E6A39202A897e167fc940d4BAb367312B428,\\r\\n0x69f9f49D4E62f64aF9eD44328E927B093D2CF983,\\r\\n0x15F64C7d9D1192416C5367a57E14a1239e9948F2,\\r\\n0xB8c3E114E12FbF0ff64B096332BD3007dB44b5fF,\\r\\n0xaFe3a791Fc5856915b29823ab62C77405B4329bA,\\r\\n0xa9d628fD35391b59189c44Ef9EC1F9037D390874,\\r\\n0xC75973909916420E51F40d81cF51264bFF389bfB,\\r\\n0x9d5Bfb947C92FdDBfab6C14f0e9C1AdC911c6926,\\r\\n0x2Abe396bd029a95226e9A6ecC47e03f205b037dF,\\r\\n0x269A778fD039b5a01098fB51b6E9b755fDd5FdF8,\\r\\n0x48cB26A8264dFD8Adc1976ce0bca4cac7d5a2e6f,\\r\\n0x3A3F31F8D92a96AF009eB7606609bDbE7d9f49F2,\\r\\n0xf31A08AcBCE6182A6E077602A61859F77acd9dD1,\\r\\n0xD0fe47ab4b21f603f132C89E400B2958D805456B,\\r\\n0x267948320C44e87793c4E6051F5F1bC39Eb00D33,\\r\\n0xeD378B4fA3FE0f7Cf9A0C90B50c68D4A76Ed9cb1,\\r\\n0x1829709eF37402581d1D1feC598Ce132da98B0AF,\\r\\n0x1a99977a3aCcFEa764E540b356665D6417387335,\\r\\n0x3a85A4504e9b30f8CD623e68053B4Fae13F06cF5,\\r\\n0xE5f798d0b37f7413CDFdAf35438a3939Abe4bc27,\\r\\n0x9F84998b4c2eB171d1D522bEc80cF788eD5ed6cB,\\r\\n0x676e1d29292Ab7e21Bd43dEBa5126Eb46CE66F05,\\r\\n0x41D9Fd3bFF55dD45F3D9D6ba621cd4bB61C91a69,\\r\\n0x25180676A2de47883C0CF5Be9fDc09f64B6C1E6B,\\r\\n0x264c0dD14852B9ce52eb59E922539ACf59e1336D,\\r\\n0x856188EF5167224EAd5547C35bBC6b0170EBaAF0,\\r\\n0x02bd1ceDe10dB9Ea27b986F65a51abb51bfA9798,\\r\\n0x479825675027a227d9e00164e7b33382bf660f75,\\r\\n0xe3df21C2866118895acD4D008531CE86c194D776,\\r\\n0x7eA479a78CAEE0336F92635a317185F87D2D2C1E,\\r\\n0x61f78EF5B5FfbB7cCEf73928F58808860EB1300E,\\r\\n0xA32915C044dF304e5024Fd40FBd201c8A45d6e20,\\r\\n0x7eba174c39D70129d6D45cB4C1C494cf0fAe7C30,\\r\\n0x030CBB243407F820b23D84FFd7957667e1BED5A5,\\r\\n0xce5743fcA10b8AF4aE0535d5670CaD4dDB419409,\\r\\n0x4000d3026AD9E83B385DFf7ECE2CCA1DDF99Fa94,\\r\\n0x8482B6C6f3b47bf0Aec9441De62f09C886456BA1,\\r\\n0x7619f5A5101d86F1fD7609b1656828CF0C670aA0,\\r\\n0xec5b82643CC609E576606C9dac0Fe4F4266Aa308,\\r\\n0x12cb9AEA7f01c0405ac7b761e3e445b5AEcdd766,\\r\\n0x9dE3a56C66C22753cfFD77Afa8Fc5685F473378C,\\r\\n0x1484193Ae188A31b56B91C1e2ec9658D09905066,\\r\\n0x3e59000155679e529ce74DEd0E7837477a47824A,\\r\\n0x7007E85551A350BcbF3c580e789fd0e40747B76a,\\r\\n0x3F647538395BA74d8F3EA67673e5e3234e4C949a,\\r\\n0x888990767C885edCF665759Aa82a1BeF2d2597Af,\\r\\n0x808A0333F02356F77a2d60CC908Ac61735C3417d,\\r\\n0x70E7eDd88d3186546630676AC86598976bE6B91E,\\r\\n0x00BA32C2AEf1eE9940b157430AF8A311Fb708A40,\\r\\n0x393166353F8FcffB7c4263ac0775de4D3500dFc3,\\r\\n0x3DB9A21F04f119A54b444c77a301E75Bb88757ab,\\r\\n0x2ea21d5E62049775513DBe42F1E98C3cAF057f7e,\\r\\n0x1C483D58505Ba8dEed14058f0bC999675078DF4E,\\r\\n0xE166404922836D0f51255C15933e776b8cC4F250,\\r\\n0x1081B174E4fC8CBf0e65bC2CF4343249F159308f,\\r\\n0x4EE5ea290829D4A33a92cf77b5F67d10BD34CdE6,\\r\\n0x457776e381F46940e4D24e0D0eb9dF1587fCB63b,\\r\\n0xcc82dDeEd3705755B88B96fFc25a934CEaf070B0,\\r\\n0x26cf5118171e4FE41fF7559c89474F93809Dd603,\\r\\n0x43823699Ab717D603E90bAba839D319924163373,\\r\\n0xe7a5fA51Bd96A3DFCda17a398c5F73Aa80C32495,\\r\\n0x6FA5effB4E6F7a92c18159A4F9cE72D4b5D1Fc7d,\\r\\n0x281CCa5C8cA45414A31CB724259263ad4dE89C8B,\\r\\n0x596A16270Bf80934b1Ffa16EB8980162525c0Cc2,\\r\\n0xF17f230d10Accd2b2DA8FafC17a76eb1bA269866,\\r\\n0x47FC723293C0d7E46f9Cc8337B369379857Bb5e9,\\r\\n0xDA02a07ab60c381b12b4659BfEAEa23B97741e73,\\r\\n0x4e9F14EE7Ca63ad624757c57f38fd781f15Fb24e,\\r\\n0x2DC962c3c9B91517B10B0B5d20C74427b05E4bbC,\\r\\n0x9318A5C3FB9295d153aEB3AA3b11cE92D7cC2f88,\\r\\n0xD3a3Db6960674341a1aF11B327D2FC30940C7476,\\r\\n0xB5EecA79405982858809dECb9f2a65BDF734F582,\\r\\n0xd293287796c63184a13190b25F1431ec13Eb6B81,\\r\\n0x0dCBcbFe389e20928Ce8a64865c73A57F15843e0,\\r\\n0x673E1F9bd4e4E24CE3194Dc53f78D8f91917DEaB,\\r\\n0xaF0f980c985D4D082B6dC593B51AE2a73F14fA32,\\r\\n0x734b9c5e25dB4b37844393CE89Dcef28d416c6b2,\\r\\n0x4C55B5d98A12Dfb746F67A308e16114F9Ecb8fEe,\\r\\n0xdC85F173531CD2c38337aAb628239536D1f56315,\\r\\n0xCB2C142e67382bd0f4999133f10bC17130B959a0,\\r\\n0x8d40CE4BadeE93077a78f4b43d9D5F1F06D8Dc9d,\\r\\n0xd36101eD2bE14a609dd20a8aC33e609b6255AE7f,\\r\\n0xa0dEBFC573be145f5b6Eb48ff6C75aCCf2aa907C,\\r\\n0x0c2aeee89bA5bdF9f3dBFB058972438b0547796E,\\r\\n0x35f7250DE7D7aFBc4A16dDC8e161C3E4BBf85ed1\\r\\n\\r\\n];} function GA() public view \\r\\n     returns(address[] memory){ return ZA1; } }\\r\\n \\r\\n\\r\\n\"},\"M3.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ncontract M3{ \\r\\n    address[] internal ZA1;\\r\\n\\r\\n    constructor(){ ZA1 = [\\r\\n\\r\\n\\r\\n0xDdE5A8A5f5a3dd1DD366D254286966aaF30b15cE,\\r\\n0x87Ca38825D21A0FC2C733dA7f9f150acC3eB347e,\\r\\n0x87Ca38825D21A0FC2C733dA7f9f150acC3eB347e,\\r\\n0x8b0058eC4Dc9a346Dcc1cdfFEbBcDAf44A8A5b27,\\r\\n0x40B97E34bF576D78A52025D3947B8721BB887F73,\\r\\n0xC22228c760B80CcA233e99174B8375Cf7fb7BaeC,\\r\\n0xBeC125B85F0506cd1dbda6b836fB269a3b36e5d5,\\r\\n0xFd241595b8b96CC20Cb2e31a4A7901f8E4Ef478d,\\r\\n0xE4EA5B8361DBC9A5EBa15Aa1B8cB59a150E3b926,\\r\\n0xcbC394a18467E497d5491BC8EB5f7ABbACA7ee7F,\\r\\n0x0b6d1F968782A642eFf077e9b717Bea91a319d20,\\r\\n0x90e8601A5FaD3626f8379E0F9b3F4d0e98B063b8,\\r\\n0x40Ec6bB8357fa4B4cA80761814F33E09312F7F9E,\\r\\n0x183E9579bD551Aa0933b2802194DAcB106bCd6e2,\\r\\n0xB97bDF4D97006ff7328cc626f9A58945F7dF94D3,\\r\\n0x0cf335d3A5b246736F3ac60f5bB5F45D267651e1,\\r\\n0x57AC0954dd61F46eBc0fD9d073bAC160847b28C3,\\r\\n0x0C0A4aC595a219bB03489Ff45e365E832eF7a989,\\r\\n0x356E98d5E05601515834C4C78eAFBB4c023DfA48,\\r\\n0xf2efB658961b5c60875862D185A9a2C7B78592B0,\\r\\n0x8b6D0dC0cdCB53ED581D694Ff102D4863454A1e8,\\r\\n0x557AD409E65dF3e1805E17615A0d72535DbB90fF,\\r\\n0x4C8349a6fc6319d9c5A2E064CdfC97c513129c18,\\r\\n0xC2ed235bfDaB9E0Da1c63A8Cb4c00724Dabe2C60,\\r\\n0xc136cB0EdfB3E790efaEaD2E2f22De19B4A9071B,\\r\\n0x51870BaC70D0B1113f7d6c81B0A255CbEA131112,\\r\\n0x0fD84c62d1e677B8c09CE4B118D5C1e9a0966Ae8,\\r\\n0x8036f0E62F59F96e3d8bdc6524B61F670BB71368,\\r\\n0x741F8dd63364213b74eE3f6b9b8A87Ca4AC10Bd8,\\r\\n0xA86E5bc348827dEa632e3e678fc434E4Ae5eE0e7,\\r\\n0xFDc61645F8Da51cD55BAa4AA1BfEAEC715273cA8,\\r\\n0x52C5190bc9cA25b164b24adf1DE618D056F548C8,\\r\\n0xd5eabC219677b0290d0c1679eA491a8b1c3F4388,\\r\\n0xB34e76aEeeBb2fBDFd4F79B44b0456C35692cf2b,\\r\\n0x109dB8B9E2B7849ce8CA5688e9c0d7Ea6063796e,\\r\\n0xc6B1D663a3A896A4bcBB13E47b1C5f463d157Fa7,\\r\\n0x2323d3046dd40C3FEEe313632028c5871235070A,\\r\\n0xc358a510198c96dE580dF0a025575438cdD0AdbC,\\r\\n0x41a3c175296eace8d6CfD04Ae118EA1b0002b5c3,\\r\\n0x640F3438fc74220C6576bBAab75A89449dC8Ac08,\\r\\n0x3dc744F949e636C689f01A673B70ecDAd607AC3D,\\r\\n0x016B3EDFA1E94123cF17A4Af8fCb8F7A9c0a6169,\\r\\n0x968E79FE717F0D0ddac4a52E855841dF540503bA,\\r\\n0xBB88d860D5AB53Be61f6d6dfD6cB9Ef278cc8377,\\r\\n0xf19A7b8c8f3e65E0422D019d50493A8E94115f1B,\\r\\n0x5821516eee888B9d800C0B630041aaA121c5821D,\\r\\n0x35b27097176cD1DEA0e1Ed295047093C75421616,\\r\\n0xa5651b6Ffee6B69D90C89EB0Ca6c5322a08c771B,\\r\\n0x83004A2F71F3A8E403A6F646472827C26C49EA0A,\\r\\n0x9D82c460dEb9491cBB0f238bacE88E1F36F93C03,\\r\\n0x9bA2C7DFaE04453891C31e326A84eDD3B8e35E58,\\r\\n0xb28a5CdD057C84339aeBFeC1C02583e8BD652436,\\r\\n0x8268B143804EFb6Ab3E12d16a6872B894EAa3b12,\\r\\n0x4e602942613533DDd27BdeeB090c07bE94a6eF21,\\r\\n0xBDC20109a81F3B892144e6Ad22478B6a4f210aa6,\\r\\n0x47A48cd9dDAA7ac8e855b5C36fBde0b928F66Fe6,\\r\\n0x0508A18e825900886505486082894138144b4461,\\r\\n0xd57b7751Ec93A431A3dB14892dD67f8e638077d5,\\r\\n0x8513844e9cf778451429Efb055F59bdf2E8A84e5,\\r\\n0x10798f8fD33F8DA701d59ddD973bFF5Fd76545DC,\\r\\n0xf6132D3bc9CA091189aEEBc0f6a60dAB82E54788,\\r\\n0xCf438Ad92D193374CF589d4F5Db54F46ea6f711d,\\r\\n0x89Cde2C2814f780D2024490102F698D414fd3491,\\r\\n0x03805C7f530d3f33227D993Efc9913232Ed22D72,\\r\\n0xb04b2bD517826d47efd5f41979B0012923E3D3Ac,\\r\\n0x8a9a0165E0EFFaEE8AdA17843e092C737aF06125,\\r\\n0xAB6E0552Fc461dA53bA4E1297f9eAeF415fCaa29,\\r\\n0xF7Dd9589525e7169504D2D52C62442Ca6cecC2f0,\\r\\n0xF495551b8872267f1bE20fe08c615B4197466b60,\\r\\n0x2AAb2899815e405022b27E2d8cEF0AeDc4D4D8af,\\r\\n0x21447a36CDB8d226d60C92728C4cb48E238F27e9,\\r\\n0xA727FdB45Ece340FBD464b0045E0B43Bfc8e60da,\\r\\n0xD2986B8d049fD8395a2be92E8bC657EdBC615D46,\\r\\n0x4bE69E87f133003B762E004419578FDDFd5Bf58b,\\r\\n0x5dD246E2e1E4791378bdfB0eAc4A9CDA564F645b,\\r\\n0xBC3d7921Ca4c011F4E89639Fc13e6a17C0F90702,\\r\\n0xD664D9B52C3a2Bc63DBe0F3f4898E1C60B05D230,\\r\\n0xB4DEF4C5BB93b218F5533e650Ff1bC393c7e5256,\\r\\n0xeA67da11956b473B89ead7B8e72bCCeBde6722a5,\\r\\n0x22994cCaFEE7541db1bA6E7Fe9Bec815A6321d08,\\r\\n0x49760277c7AeDcC7C83E171f0ADf972A7235b8b6,\\r\\n0xeEEe1B500Ba97b9806FA6DFeaC1FCb6d5666e139,\\r\\n0x2A64F9E9796D6235D72BdF33Cde4633f60cb871D,\\r\\n0xF9b2B8bdD755e8DA29c6481Ef4F3BE287Bb16009,\\r\\n0x1435C3a8303B5d6BCE56298500882F6D9e4dBd96,\\r\\n0xfe8b395659F09637a27aFA277a4DEcCe8f13Fb20,\\r\\n0xdb44Cd96d11e01C93BCf1b688929BCd947ab673C,\\r\\n0x209A0BDDa602A6027124580F41Fec85F14e70768,\\r\\n0x25f0cBA97082CF3eCfBB9F27193806a312E984E5,\\r\\n0xc9f036022587E6F5F24234ebe7b7b832644B6cf1,\\r\\n0x630F7D376b78d73451339e6dB454aA8084e66Fd5,\\r\\n0x6b8410eE4723885258fE99321fB485c2EFAD057f,\\r\\n0x567b12c3dC373fBDAd54b46bA1Bc12f2A58fAd4c,\\r\\n0x80b41BD9330ebB9FE309E17B02a46319b072CA0C,\\r\\n0x8Da33f6883a2230608b59cc0505A82BA986d972E,\\r\\n0x8BEc655F41B1E29451Dc539bfDc7b51287Ab44AC,\\r\\n0xC63c54ccf82eC0d80D19AE6bA210fD45704F6bA9,\\r\\n0x657a0989a556955D8b47545B338db2C2Cbd693A1,\\r\\n0x1d081EBA065D2F374F4C03B9A1A80c698bca5BeB,\\r\\n0x2449373253d9bC59a8fc1827E4DC91B6606E7D3E\\r\\n\\r\\n\\r\\n];} function GA() public view \\r\\n     returns(address[] memory){ return ZA1; } }\"},\"M4.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ncontract M4{ \\r\\n    address[] internal ZA1;\\r\\n\\r\\n    constructor(){ ZA1 = [\\r\\n\\r\\n\\r\\n0x21c4cDAfe91F10ef7B3842a2C84c2a2925d65B11,\\r\\n0x6594514564FFf148A9E4b6E2A7C1B07Dc563e092,\\r\\n0x9d1FDBED823DE883317bF281401Ba5Ff76202B98,\\r\\n0x532661a5b4452027a25Fda9C4B4D68f19ebcF5FC,\\r\\n0x6326B4CBCD5A8BB5F4f92F1b56E98B8905722f09,\\r\\n0x494Dced573955Da8D5208F603E7bB51f124Ef7B9,\\r\\n0xb0a6F014f977f8D163a28343af8000930e867801,\\r\\n0x73aA459f43D4b0b5C342C88cC7F96408c8A4Cce5,\\r\\n0xDF0B3125B0A4c97D70a49D937de8df6663feCa95,\\r\\n0xFEa1493251e93cBE082149ED23a8153eaAFfB922,\\r\\n0x3613722544bae697307cB90A0A8EbAc61eA752Ca,\\r\\n0x358bBfdCB81726264A8e54b3BdF590d83F13AbFb,\\r\\n0xa9341fB816de6ba515af1955a8Af1ec136e579E0,\\r\\n0xfbDDa31a789142C09E4f4842182CbBE6f00d1869,\\r\\n0x9281E7B51D94A812957D976604Dc2FA8FAEa5d26,\\r\\n0xCfa2cB1Dc0cb78A5C126911258c6c1848929b987,\\r\\n0xD378f91d61B9E6AFA69A31B502bB214Ad4029bF5,\\r\\n0x3dee5D4C9d21375c6dfa0710c28681F547f618f1,\\r\\n0xA85a2e19171c7a22C7CaB3D0c2C8e5Bba8E7106D,\\r\\n0x398BE09AcD32D3fD8735Fc59ffAd3b39766DAf18,\\r\\n0xFEbb445C6881DA9570ee3571DAF06Eba710AeB6d,\\r\\n0x0FE3e2561E01408c2710CF97Ee2aD90B2cEEF83d,\\r\\n0x27B96A4784B36fB03a5453b2aC0886C3FeEA4628,\\r\\n0x9cc3973426Be94CdAF33C813602064FD1aF5ffb5,\\r\\n0x36A18dF364748377B242D4C5c813084a4a8e4F1f,\\r\\n0xfc20d36CEDd4B9EA8B5ed8E314d9dc16d43e202C,\\r\\n0xe8e4bCc4dA27890B58ca7720E4837bC13C2d920a,\\r\\n0xeE7BC8561a86f9bf477bE870abc263F5C1f53d22,\\r\\n0xD0b6ca173C4eee95e8B781e04C75ab68B0017001,\\r\\n0x22AE490c8C0720F2150398443D1850D802417a73,\\r\\n0x8901A6f86f80a16063c85D91736f3e86DfAdB6a4,\\r\\n0x7Dc9C5BFC9bBb36C3A0ccddc41020bDdb1896730, \\r\\n0x3B8A020155e8f67F10cF0F42a478217c7353Dd82,\\r\\n0x4e41c297BFB14b9292Ef112cE347e6f1DDAaf68f,\\r\\n0xA6c1fBE4DD2Ee8C648060C4b53EAE8De529449B0,\\r\\n0x862BCB22B04248e83bf497B32Ae96b923A11B5E0,\\r\\n0x9c01B82aA81C7002939Bbc4b670DBabDfCB4B9fb,\\r\\n0xeE25DB9ea6Cc66BBAD083FB29fCF4a217567850e,\\r\\n0xD181f48A74fc764488cB6C290B72523E4A2DEC57,\\r\\n0x049c5868ce5F88745f59Ca87a0EbDb10Be03031A,\\r\\n0x8c4248D754f464c32E8871CD1265758855127526,\\r\\n0x781063AFA3234Ea77fbdaeaCe97F4a3598f0daAA,\\r\\n0x5D0428C0067bB56D76bc9cdCc16cba468f0e1202,\\r\\n0x9ECC5BDdEFdeFCE0b1eFc21E49A26e6FD858ffc7,\\r\\n0x8C6C62930BfBef1C64Fe148D0300E68D5d63A1c8,\\r\\n0x09754cc21640E35Da4B90866a869d9f3074d2B22,\\r\\n0x03585870708EEf32e01fD8BC6dA500033e66a751,\\r\\n0x166fDf3346C686F9c5749242b4aed61b607b7Dd6,\\r\\n0xdc97C4d521ffb4033E091A64fbA6752A96E26f52,\\r\\n0x3F100c89c6647C0EC66092c99A70304A0BE9d07C,\\r\\n0x67Fd05047369fD28764bE5c94cCC3d44738ae909,\\r\\n0x6F197d975840077FC3F68ab6BFB5789be0679B92,\\r\\n0xE7086614548392bE2E05f8b7aEBD72c307a5c6e3,\\r\\n0xcA2BF6e036E8366bEFeb82bff50c64727164a521,\\r\\n0xDB94A8A4f08B760537a1321B868A5FB86A4538F9,\\r\\n0xb2B7386b23A5557f2C9A8dE2Ee3eE278D2332398,\\r\\n0xe0028A80b2Caf516A941a04701Ee2DEE2a297018,\\r\\n0x9996afA43265b6402B730e8672E82CDCB75a4265,\\r\\n0xe1da457A539f04B9B9604751fa66C641cabDD228,\\r\\n0xcFb1862a0AB3ba1441393373A84fd062FBaC6532,\\r\\n0x1aC3d1D41b6C4C67D25335019DfC0cE543f61f0b,\\r\\n0xB5363974c98A132c9FE28B34E5D15fB4384211e5,\\r\\n0xE3955eeEeE03D712aDA24f3C57B5fD79D2809698,\\r\\n0xc6772d00B31a846686252657F3bE9018d2B1171e,\\r\\n0x3677Eb6410cF21330306704aa83BC3F0679baa1e,\\r\\n0x0C51D5087b8CA0b49C050C0b1328C54Aa6E9d63D,\\r\\n0x445067d726a0A96c39D5cDE585f3570673007402,\\r\\n0xdC03768e53ac97F0E9aE4cB309F4eb6fbA04Dc0a,\\r\\n0x7780D47e05D3B8b476c0bbf8f45283C6e1071E81,\\r\\n0x85C7E05E8e36e928C8870B712cC98741AEa69393,\\r\\n0xa6dc305d198776B141F42C356A226B5a357C7851,\\r\\n0xe38e0370F53C674AC45a191443037750f24876d8,\\r\\n0xf8A96a7BEEF1c5BCc0142931284b4736D9fBd75c,\\r\\n0xb5ba7680e6eC3BAC4d31bCFd3eFDD529E6cb01C6,\\r\\n0xf6650150A1Fc140558845a478f8F6456Fe6FAbEb,\\r\\n0x1fD5B38181139aFb3e82F5581dCee65c112f41ab,\\r\\n0x462e07891B7321808C3219bf35912b269B6edc8A,\\r\\n0xBE2dcC6292CFc4C9485714EFF99ea60D3e5Ae669,\\r\\n0xD268AE3d1d065D085d7Ac61567946Ac5d2ACc362,\\r\\n0x01DEDc15a9e18eAb586d06AE6150C8F67c13bE2e,\\r\\n0x73788F4C2121d79DB16DF62721F481d57b60b568,\\r\\n0xeE5c5D5B5696f3c7f3a3615a3864327C74cC6de7,\\r\\n0x54f43A55aa9F1ad08A2e2401793D904972456312,\\r\\n0x32Ff963F9B779cB4a5148bF52F9Cf3739F5Ae8F8,\\r\\n0xb2347B4eD6214B238Af269C08Da6Bf8874413F61,\\r\\n0x6d2D5DDe2a8B9bC683BdE8c19Ee3fd4371AFe6B2,\\r\\n0xe27E56458E6E9594B52ffD6EfCD5eeed47d3B108,\\r\\n0x539D0FBfF42435223B1182cdEAb167356ef1ECD4,\\r\\n0x9cb3074E6F7f46b87494FEAD45aa186e0beEA8A5,\\r\\n0x37ca1255a0e312A6361877D9Dc305B5E747ddB73,\\r\\n0x000fa941f36196926e5aB2928e8864836A7F02A4,\\r\\n0xB6Fcf0B3ed852E4049d24fBA34924782957644b8,\\r\\n0x6534F427757252a4cf59D51f04579acd78c6B850,\\r\\n0x58fA11a71c5094d7001A11Eae8d785EA2DF2a1D9,\\r\\n0x0851aB2Ed004ED9954Da6B984B8E23aa580715AB,\\r\\n0x7092Bb880e517bbD35B0f73bB6dfF3de03d89A6C,\\r\\n0xbB247B8a43CB543104F630d57feA6d3622834D2E,\\r\\n0x872aE34479b18a2560880ba53bf9d0A709D3625f\\r\\n\\r\\n\\r\\n\\r\\n];} function GA() public view \\r\\n     returns(address[] memory){ return ZA1; } }\"},\"M5.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ncontract M5{ \\r\\n    address[] internal ZA1;\\r\\n\\r\\n    constructor(){ ZA1 = [\\r\\n\\r\\n\\r\\n0x75DAEc5f6545D80A1f89E0d5B882a7AEdD8c0d1c,\\r\\n0x4FBAF602FcA9f883A811EcFFfe59466c651a2d4e,\\r\\n0x9915C9351C8316F43780d2DAfD16eb54F8f0F1C5,\\r\\n0xB4E1009C0A78e13F1fcC5AbE7E32911E9556493C,\\r\\n0x120C59f426f3b920Ce34B9DE32f0EC0B872386C0,\\r\\n0xB1c91b21832d8b61a3201A80730bd2D6dCEc88CF,\\r\\n0x1b1C7013442F8429E181070C6d420c089Ed696f2,\\r\\n0x9992a9Fa2fb1cA6e1B63C014365AE2cCF68269cD,\\r\\n0xA0Ff48daAe945345b453E263057Ea532904dcDa8,\\r\\n0xd504158734063A8879ea56a8D81Bf2fe1ecCa1F4,\\r\\n0x10f44F8cE199187Ea1294E78bBEda7c72e2CE727,\\r\\n0xa00D6877A3721D776bbECf42F6391FD6c17064B9,\\r\\n0x8d88133c43203aa80AAE0f3E70ef1B7Af386f59E,\\r\\n0x475A6b5a278708B1e89D50b4a85365E749bB2aE3,\\r\\n0x44bA4a37775aEF1F1497c293558D4043f5c6a94F,\\r\\n0x06C57AdBf7cf9929F754B00e6bb3536a08f55149,\\r\\n0x478461B07Fd2369239D15c92B7714195209bD22b,\\r\\n0xaeB659366892c478763A0DF8d5138bF5222ca883,\\r\\n0x985771C7d1202eac9904e2307e519DAA28FfDD72,\\r\\n0x549461C2DE120d7e5E4D5CF3D2372097092Dd6c4,\\r\\n0x8E4D7413bd1ad45Ee37930fE763236723f52F6e5,\\r\\n0x9E4f7c62eaef8c14Ddac938F437D1737a07859Bf,\\r\\n0x77B61FE4723F9C70B9cb310d18CdD71A9AC5Eabc,\\r\\n0x7D60553d9fE64aB3f19B4C753747920380416630,\\r\\n0x84f5517c9FA852Ad7FB1CBa8e9c874f094093A66,\\r\\n0x800b5Aa12952cC4F3dD462c516e228506E73F49E,\\r\\n0xEb5B628ed5de4d3e4e331C0232d6db6071bfD4cD,\\r\\n0x7b2330B221A6A923dDD895020474AFa6540318f4,\\r\\n0xB60C677DCBDBcFA57D3Bc07Da42766A09C810225,\\r\\n0x545A5feb1d1a930284E18Cfd31633b8F11D972b3,\\r\\n0x441A77bEF192c4D6Bc0F214D8125344887609cc7,\\r\\n0xEff00fB61a23860769a3C66696D18D402814f81A,\\r\\n0xe16a77243b1bc2895C245e4A7966A090543A4f4F,\\r\\n0xCA9746F116daDaafE14fB0Bf91B6BFB420603dcB,\\r\\n0x21FE44a55586528C45B089a38F9370969E220910,\\r\\n0x9591b3e3D22d37ACacA661363b5f61da4F2c91d7,\\r\\n0x05bd0EdFA925baC9BB403310057D037CA862a762,\\r\\n0x47C816e7b941C8d5Eaf82F060b01dC10BD4895eF,\\r\\n0x47DD11DBd7b6D243Da3df16E96534f6731fb6C16,\\r\\n0x3CFb103Dbff0ee95BA457a0357C8CE955483ec2A,\\r\\n0xA0f21A7e7D02410Ee9fc334B6Fb39218D53b2c9a,\\r\\n0x4C50e0C3F1873e3dA56EAdf6C526Fdc8c5ad9aA8,\\r\\n0xFB85E690d229738F508ff917688D5914e19c9Fb6,\\r\\n0xD5B86a7ee4224b4Dd426915CFdFD0b76D056F78f,\\r\\n0x0E933889898D9169205FA170f774cb3F20D19d20,\\r\\n0x2eC45e84b03846900D283A2D976e11eA5Ef0e4aC,\\r\\n0x6EE2D3cb2CC7D6f322e05e0c780d4B6AC8126294,\\r\\n0xEb7E97C6E3D0A36A3a31da5979aBbE0d9Bda445f,\\r\\n0x8cC31698d8202806AA7FD9e80d6eC1b1Be41CC09,\\r\\n0xBcc01F9c7935e7aF856d6f142f78fB29B4A07b4B,\\r\\n0x036D698e4BA1B6EDE0fea26abBD0Fd9Ba3C86676,\\r\\n0x13415562Fb8215b6120EC269d4B2fd0145d91e6f,\\r\\n0x37f0190E6cFa2526Cf94Ce4FA5D9224C33fc7AF2,\\r\\n0xE07554d3ed4987702339DD9ADa0D4fe9A5881A93,\\r\\n0x5f46BAceEA1973B0c92C33FAB5a42bAA62FCc1fe,\\r\\n0xEA2dF64339866C039bFbA3308745BD7D602723c9,\\r\\n0x6292065195B83366cC0F4D0AB8bA84C67A9092eb,\\r\\n0x2469D313E648c6d8465684810E2F5646fEF749A7,\\r\\n0xE806D8Be64958A671D628BbDaDF6052B011d71C0,\\r\\n0x8A2a8Cf98f56f553C31E1C10457ddCeBF1ba514F,\\r\\n0x56398B016a6336785f13CCf41dbDDF06C97cb87f,\\r\\n0xA874aD7fED395660D119aceA717EAb8C7341FAa1,\\r\\n0x135a29FB10b3b8b1c6FCc3c46E07c164ED6357E0,\\r\\n0x20915A5549244a1F2a4410503EB046b03585F2B5,\\r\\n0x280D93bE59dCCC857F1c7869a28Eb41a1592309b,\\r\\n0xe0c4A5330b5Bb423B30739f2A7dF4Fdbe65C2E79,\\r\\n0xd001e8900D206Acec15FA2273F16Ddc34f355752,\\r\\n0x7b6C6FfD53a609F366Ec8f3a6f6E94BE8a92795e,\\r\\n0xaF642Aa6D584f3425dD1b117b9d08C6c820c2DF7,\\r\\n0x32e00F7543ba1D1F92b71deE82C76383f1D05538,\\r\\n0x0ECc8F89B5C4e2A13C4693E831086b3B2199Bc1a,\\r\\n0xFadfe56EE461169e7BE9Fd211Ab541438c60d8C7,\\r\\n0x9Bb9bE161b7D00ceCB81C89fA74A2C9a526Bc0f8,\\r\\n0x1C74fFF2fbD1968E1FcA1693E3ADfA2Ba5DD018c,\\r\\n0x933E537a94952ede6c0bF6A30cf7bFf00c489348,\\r\\n0x97ca33F16021A6e3c82Cf63175Ef58F9d0C5a1A2,\\r\\n0xA3c8B54d21899398465D5CE5719f0E28d6b9Ce65,\\r\\n0xE60Be587d7A47D060c5df907A724CADBacF76f1C,\\r\\n0xcEAa06c431FF7b392486A170ACff046Fad17cFbF,\\r\\n0x8e9Bb5735329a88E1814c36eBaD5cF4Bca6f5228,\\r\\n0xBcFE9BDDFd16F562De5b1c67D3e9Ccf74b9af377,\\r\\n0xd8c277DFfdef58e373a64807A03d7440a385e8C8,\\r\\n0x3b1A1346d6e9ed7fEa8b60e3bB95e3ef6050687e,\\r\\n0xA29c22A797c5cC516a6747bCaC24DFFE88d14341,\\r\\n0xE37c82f23A4aBB1D32Ec6AF4AC4881137AE7EE5B,\\r\\n0x9c7Ea742584cAd4c2C14eebee27851221b39FEb4,\\r\\n0x2e231a865B0e85C9e778f61E7993630b1547CE08,\\r\\n0x94075A5ffc9DeE5880c6A85fa9F71eDbE0C09514,\\r\\n0xEfa61f617EB49f3bB987609a498B4475096c2D05,\\r\\n0xc5d09D7733714ac8927FA0590C32e57E81Cc14d9,\\r\\n0xd444e4F009241AEcC224e128bCB915bc466D99B2,\\r\\n0x00f7f4dF1F865a6fCbC01260B725A86D3EA77102,\\r\\n0x9E92934ecadBA4457C97A7F4a3cA31F8C504699C,\\r\\n0x38AdE30FCf537ff25A5eEE44bCA8E0c2747fB766,\\r\\n0x121f7898DDDc058e19b2297Ac3c16e31CB5ac344,\\r\\n0x0eA45632EDAb548CbAa41b0eA23a18bF471aE1ea,\\r\\n0x4b35fF6B36aef15DBB9FF3f18622182A6AC1445B,\\r\\n0x5d8D2738ac6C7f2551bB27D05c549a14E37F23ca,\\r\\n0xE42114279182284604182d43aC0Ee40E18b535B0\\r\\n\\r\\n\\r\\n];} function GA() public view \\r\\n     returns(address[] memory){ return ZA1; } } \"},\"M6.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ncontract M6{ \\r\\n    address[] internal ZA1;\\r\\n\\r\\n    constructor(){ ZA1 = [\\r\\n\\r\\n\\r\\n0x8bB18Bd4c7B45AC5815A71623Ff4E12fCd4F3249,\\r\\n0x27c6c58c877B42C744Be3f59F4b2ea39861c11F5,\\r\\n0xC466efD3c37B0124Ac818F2691A176F3b1FED9c9,\\r\\n0x807170A805289e47349CEe5E6151e476bb0E0760,\\r\\n0x7AF83edE6202eb9782FC658fdCE4133F18050A7B,\\r\\n0x50DAed1fD20993BBf4E730aBccF4ec8f6013F241,\\r\\n0xf8aEc8Ab4ae85405bC1F171175f5cB0F447f6AdE,\\r\\n0xB3357c238fc2Fe73Bef0935ad5AE39817E44aecA,\\r\\n0xA88e80DCc958DCB35C01b62D664752342a45916c,\\r\\n0xA4bBa8ea2d1CBE2B0EC72604571Cf34B18abCfC8,\\r\\n0x6343fD2b76BA5A2d6a4730762D98D10A585e5997,\\r\\n0x3625270d4bcB4F7F0B5fF3c5200bEa0E52fD7875,\\r\\n0x73b21Cd1dA7eaCD1883e05121a1c05C038d22Da5,\\r\\n0x791F14e14634b9dc318C52a2D9624776357B4f9c,\\r\\n0x30B7ADfE42dC6AC159639fF99d1b22aa46Fe17fb,\\r\\n0xf1c8b83896d11645864fc5DCF0e87885c2917B78,\\r\\n0xeF780567756eDf005CB1D302f186DFf4763c2Cf6,\\r\\n0x4dA4eC2E875Fad6dB899DA9Db44D7a420F246d68,\\r\\n0x7Afd8B90376e39083f602D990Da31db09936b36b,\\r\\n0x4AcacBBeeADb7D0EB4677e49E422AA01c482659c,\\r\\n0xb86D17d81A4Eb916D6d7DC9B51f06047Dd948e8f,\\r\\n0x15Bf180b2cFA8a88180C6Da46Cc5A30BA4AbA4b8,\\r\\n0x0B1F44e37254Be97d3402706EAAD48470945759e,\\r\\n0xBa2D6159b3F9C27C80F065A4D0BaA4A6C34Bdd0d,\\r\\n0x2368224a35bcB3f48235E43f0E58CC5642ac2419,\\r\\n0x63e884adC56Ae84B954Be02bE9C7F916078Efb09,\\r\\n0x544dDAAe72995C7E9365cAB9Cdb410517dea4D28,\\r\\n0x1af84Da39AF593BD68f0645149782F3F2f5964e4,\\r\\n0xdA5CC9D958EDcB3396aC6d5BCc7D48b60FA76399,\\r\\n0xf10C80198337bdbE8405ada6E1a3812Cf9a90e72,\\r\\n0x9FdE109fEbAa07D0128c89cb3DCe7fb4000D4F6d,\\r\\n0x2e697dCF8853964f71a818d88aF92772d4B26597,\\r\\n0xB73f045b726777c2777eC0f50126d4f25a8876a4,\\r\\n0x9cf72bE8FCd9030EEC2Df5Ec67138f241324e2bD,\\r\\n0x5Ecda374A1ee9786539420fA149EBCDf96136487,\\r\\n0xd91e3273020595aFb5329B99976F397a5227afc4,\\r\\n0x338EeCa86b3Ac0a9E0176484ddd12D2197576636,\\r\\n0x70f39Fb7D3DB5aFe850Ec960Eb195FBbd5831E06,\\r\\n0xf393A81b47b42C388f493D8979c48F69C3D3d668,\\r\\n0x701CF22A9697AF3212EF58F9450E7508b2536085,\\r\\n0xd6dd0dE2d13a8Ea40af2DfeA922bc51D21552BD2,\\r\\n0xF1fe7b9A3Ac4B3d3C5817f2d554Aa131E103a33e,\\r\\n0x39FDB51a13315A3B0A7810158A2A2e088F085c91,\\r\\n0x2BD1e4E62Ff0Fbb6d9039298F2247EDf13968D26,\\r\\n0xC1a6dF8A220D1F4Da33B8a8d6f7C1BB72085e46F,\\r\\n0xED3e38eA6025eeb6891eb8BA80eE489A0049103b,\\r\\n0xA65febd0223832f11086b6db8aCaa94EcdcEad10,\\r\\n0x780DFC63064BEa7c493F56c5F8657468c9e3Ad72,\\r\\n0x50c226010C49C53b39d4b190CfE488E481eE68B4,\\r\\n0x92C57dB5D810ccC82cb5531AaE549250d3D62e67,\\r\\n0xE6fE66F8F5979E59288dFEb82D0f8924Da7684C7,\\r\\n0x14d85d953bCe3882e7ABa15ee1A5993502cc78e0,\\r\\n0xeB2076bf667F70DcEfaFDA536dBA45687B6D7c02,\\r\\n0x04d2f43deD6cacBe465C7bdDa804f45a962c5DC5,\\r\\n0x428CB979Bc6326654E31c15881f472Ad03930C1f,\\r\\n0xc11Fa5Ad748968Bc4AbE280c4C35096Eb6C57b40,\\r\\n0x137E176eC0FAC81275688A71b6471610758cDc38,\\r\\n0x1d1319940e193F75aE3836abB1e47834898F9AC7,\\r\\n0xa43A9e36FcB9C4e8F46b8730c92C4B95d414B867,\\r\\n0xe72b7F2327d8a5Eb0FE26562C13587E64c6A3740,\\r\\n0x8761bdf2D3bDfc36e84cC461907ae4cbD867b3C9,\\r\\n0x78fAf6Fb5bAdAe622061F5f89a7Ed9ECd0715Ae0,\\r\\n0xbaf5F267b5DF6674776d2B53D50B599863eB63df,\\r\\n0x68B6e5dd98edC555C445ec450DA76D7F6C6c6fD9,\\r\\n0x2dabce4c5b2071f84F9E649372F6C6C7AdaB2317,\\r\\n0x78d545dDd342F21B40BB34bf3A69096Cb42F98eE,\\r\\n0xd8064bB2089192761eC173755F4106D2820f9D2b,\\r\\n0x1592053E8B4AeFfc69F56350713eb0a4A63D44EA,\\r\\n0x73C38Cbbb4B039eDb77A12A22d37969895263299,\\r\\n0x8EB6e643Fc09b4D1C6819136Feb2eFd52F1155d4,\\r\\n0x91D954A0cF007d3C822C55E272e769713cb986A1,\\r\\n0x9b0f939510F77131FF62e78065581cdcD19c71c4,\\r\\n0xF21FEcC391Fb5850B839f7888FBCAe04963eD064,\\r\\n0x1213D7eFf102b9a9BE766B9Cb6706CE3c02d4E50,\\r\\n0x8675185CE644B8bEA335709Ca91E93b220feaf76,\\r\\n0x3bC96e49E96444aCA4DbBc9bC022DA2C987F73Cd,\\r\\n0x164883753685e427B52eC0434C8B1E980A7cb1C4,\\r\\n0x548E6c4D91EAB87A99D119A72ba68a5Ca2DaEf6a,\\r\\n0xa54a9bC2D04774e69d48431b1f7E33392e665B09,\\r\\n0x3ef3681318878C916c044adA597681be5042D26b,\\r\\n0x154985Bbe59d94d886e8F19553Bd3a2c65877D7D,\\r\\n0xB83C9D32348Bfb8E668e2c3c599Dbf61AF0e3899,\\r\\n0x765eCB2d5255C1E6793BDC0e6cAe157f07B040b0,\\r\\n0x44C5dc580bA5fa4e25d79383632C2C005FD33242,\\r\\n0xa16B2c0DB3553463C3f293B16820CeF7e48fB734,\\r\\n0xfa175C7F6eA9FD65179137675ae0ee5CE2FbEDF7,\\r\\n0x32b22Fb070196540dCa6f56E43Abc0b7E85E7395,\\r\\n0xEB41f88f37F3DB128E8257623Ac8F99dEBaCfcDd,\\r\\n0xB686B1111904b55A60Be6798871FC852975e37B8,\\r\\n0x0b48Ed09768Ca30F5352A438dbfeF9Bf81ca47C4,\\r\\n0x6e6792832c324D591feE6a94Ab3DEA7Fe882fc4d,\\r\\n0xf81650046Ec71aC0AF000a54968111DA8508B35E,\\r\\n0x8C23CBE8A6EcCc784CEe56ec9C680402B2326cd0,\\r\\n0x43fea5e3d56EEc48965566F308ff5129De7330b5,\\r\\n0x4154C0f9015E8Bc8DF1064FcffE2fA828e393639,\\r\\n0xfA515ADb3ba66A9bF4D1a60378220bF3d89313D7,\\r\\n0x59B76C80558BC1DFd2b0d467Fb94a4fEc2aaD190,\\r\\n0xc6885370E41a624AFCc9f7ac2f3068F684B81cb5,\\r\\n0xb01A709ec722f79F57314596409c6Ff4a228f893\\r\\n\\r\\n\\r\\n];} function GA() public view \\r\\n     returns(address[] memory){ return ZA1; } }\"},\"M7.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ncontract M7{ \\r\\n    address[] internal ZA1;\\r\\n\\r\\n    constructor(){ ZA1 = [\\r\\n\\r\\n\\r\\n0x3Ff323B828b6f13b4c4fbeC46106Ed10da40bF84,\\r\\n0xd24b97FDb04EF3e8770395BAF45b564042A38779,\\r\\n0xD7d37Ee2A1050A0379B1e88Ac8eeE93A11A4E725,\\r\\n0xD9108bd1522a5425762d2431E87C72dCFEd83b85,\\r\\n0xCe07026B0b1e14FA4a7eeB49A7a337102ecdE8e1,\\r\\n0x478aEc582707A686980c3e978ac7342D3E5e0Cdc,\\r\\n0x3563bBb710a60D99E0AeF3550c4C6Ac7e11F3348,\\r\\n0x3B13820796F1BE36e930b1BFE4ffa7F3dA4d071c,\\r\\n0x5eb586c7129573CE40DF1e5bF6163c3B8E587067,\\r\\n0x368C6f84258534900b7Ed0EE391b25c598739b3A,\\r\\n0x98D3b98ADED2Bc30f740E6bab83c799FfB2402C8,\\r\\n0xcbAc46a9C134dA31559046360fd697Df4e6eC05F,\\r\\n0x7A220B44fE488F741d767FcAb3954Ff4F5028a51,\\r\\n0x46B0d84387c0F393AE0442Bb503439D1970259E0,\\r\\n0x2C23a2caD1351693258a001b517c9057f4849630,\\r\\n0xda22CE2fa82780d1D61A55e034Abe1d72665E02b,\\r\\n0x8Cfed076d6e6D52e0316A55DD951B1604764fCAc,\\r\\n0x5523a7D1518D141F86aa46868E0026A5A1b0F035,\\r\\n0xA2630d657F1df3f16C1743dfc0c76e3FE299D885,\\r\\n0x6f614CB644aFF96796496f82DEC3F5382427E2F0,\\r\\n0xbd5D9f5f1CE8A569d4694d5694Fa74D4D7f9Af8F,\\r\\n0x497B51738415385f83DAaFbEE886Fc443d94DD10,\\r\\n0x6Cd3A82A60A6E68A563f237F56772aC00a39D72E,\\r\\n0x8E731D282CEf0d3e47e412C550dE4F91AF3A21ae,\\r\\n0xf94DFb03628496ABC2cB0716ABB77E23120e01f9,\\r\\n0x8c6537708F89451925C11AE5Dda3DEc4908ABB0e,\\r\\n0xEb182C4061464197463cF7e10376985040248816,\\r\\n0x8E4ab53923b0c36E016da2C0922c50825f8dcE46,\\r\\n0xC74CA1D866578cd09011687939fdaf7D05032fE5,\\r\\n0x3aF67053711b2138D483BE8D89bfA337F1ff42c2,\\r\\n0x97619787369cF37F0BE9959A8b8538AB00143DEc,\\r\\n0x4D9C356E64260E77BA55DAB7ADF7f08a348Ee5E2,\\r\\n0x0C4830a125623F15a8b1AE8bfc1F91f32371F245,\\r\\n0xF69E27c2058681ACbA5a4e0560E4bE79b1Ae0Ee2,\\r\\n0x4E4ad69e38818763E8941EB21124bcf82fE29264,\\r\\n0xBB4B6D8cD383Aa30c293A652C75AeDCA1A407547,\\r\\n0x5928f22495278aFD03C996715EE3bcF7BC2cE51f,\\r\\n0x00bb45B99C96E45B64ea96D7cC1BCFa1F89e0357,\\r\\n0xf17e43EE2D591b174e8D2500647854425c45A458,\\r\\n0xF20E7B7f0705CB71089Dfb8e796cE35b280D9Bef,\\r\\n0x7BC88624Bfa5B304F6eCE2A9C16c99C014799c94,\\r\\n0xeAbBf1b555fABD47dB9C72e8AB9BFb0f54f13Eaf,\\r\\n0x6141214342C235feD506F3562E88e8194348Ac22,\\r\\n0xFb3D77ddD2a0a250582AbC2E7437766E8C0AdBc7,\\r\\n0xb03F3F47d49278A9374c4a9E192E19876dc98532,\\r\\n0xc27D85A9807feEa461FD3793a2F0847dB7e20A06,\\r\\n0x7D743DAdd03AD8e6167aA47259388B70D2b8f05F,\\r\\n0x9d70CDe8cD5A7dd4218c44E5d6972B8141be648c,\\r\\n0x7052925ce4d0a87FABeFe1a09305257D24616a48,\\r\\n0xfAE68E9B4DBf3F44D87E1C7696e0f64F52D8D5a0,\\r\\n0xDFAF668e52D9cd8B4F8Cb0c5C4fd2b400682C3D1,\\r\\n0xA74ffDeEBb3691D8a63cCf9978b1Ce6a45aBe6f7,\\r\\n0x806351Aac79D315d428d4B1a92fb7d039fd33F6b,\\r\\n0x488A220C73C8F3E42Da2b0221A3D42F8504D5E2a,\\r\\n0x59d4a01C7baB525A6F951DFB6F671A024848F1e3,\\r\\n0xd85B6c748342c408547343101b60F579D2d9a627,\\r\\n0x24EC091627d001679acE3b8d01017A9C420FC7c4,\\r\\n0x27caD83B9fB14563eeAc51C68BA0b087d427edAC,\\r\\n0x40b5DB90E406696fE6e07a0c3848F2438378BD1A,\\r\\n0xbDCeFdF5Fa2eE9B77bF35C91b417FEE95779Af7F,\\r\\n0x27caD83B9fB14563eeAc51C68BA0b087d427edAC,\\r\\n0xB5045E5ccf53792A81F45f907aACB3FD7549e02a,\\r\\n0x3279e25A219F74E11D2c44ba8Cf047b0825368f5,\\r\\n0xC9dDEEcf082A4FF0F6Aac1789e962945E48e65fB,\\r\\n0xe90bF8F3F40328769D7432bFf6340c88d8404a2f,\\r\\n0x00e21f2B131CD5ba0c2e5594B1a7302A6Aa64152,\\r\\n0xE4D245DF7912429F2dEb544B8a671cd452A3136c,\\r\\n0x431430B832aa27d7807144ca4897A4d17215F259,\\r\\n0x654Af36F8C58372b4ADb543a5d467B123BeafF35,\\r\\n0xDaE4ce5FF3815e9542755303c65dC9255277100e,\\r\\n0x91390B082094f38DC3e6204a723982d16F9FDD7b,\\r\\n0x5de624b248d4fBA737DA87cE747D26AcaC4FD3e7,\\r\\n0xe0fD852e3D3B24fD533122E67baFF95264172ef6,\\r\\n0xf77aF59DFF41226E2c71eE3ea947227D296985d6,\\r\\n0xCDa1fe003b55c4E4F017f0C58cCbB3FA9929c8D6,\\r\\n0x2b319b8918Ae3f0D4f098Dd1034841DE3222a359,\\r\\n0xD6968E60e8425DB3167F443Fb0dba9f02A4F83ba,\\r\\n0xAf6301CCe8E4DA88883dfd15257993ca1970f056,\\r\\n0x30A6459Ffc20B621E8FA76d150799E8389B520e8,\\r\\n0x2822c1AE321C8492Fb771C0074b69f8205617A28,\\r\\n0x3248f4A6Bc2adef213498a353f2c4F2D2bdB45f5,\\r\\n0x7f8aF285A24Aa678e6D6CF35DeC9a635b4788801,\\r\\n0xcf744c14bf14286344Fa2BbA717308DE90ee725f,\\r\\n0x7fBB93dF04cFe6457CCF44AE9127EEdE729396E4,\\r\\n0x797be580e5816023B6532D64531F5106279c1668,\\r\\n0xBb23A0189683a0657C8434184e3C79956155b073,\\r\\n0x2FE83C2DeFD5bf4c0D25299D64b8890a8bCF1a4B,\\r\\n0x35fe1599F80D9e308Abb3c89bEa96B6fdD0Cb854,\\r\\n0xD822051390590dC4560aAeE171e6aDeC4fB77A8d,\\r\\n0x028e45c82C3a3f8f2b066Dbd78d172d77F49Db72,\\r\\n0xC6a14f983442Fdf08AFeE5c12C1831207c9B3526,\\r\\n0x82D09fC35fc3e0e504458b4614460478d1939aD5,\\r\\n0xf5c09891d251E276e854fD026640cFe1fc9B451F,\\r\\n0x6611d99C0d3FFd25CCf9bD1FBa536Df86e50C52c,\\r\\n0x1bdFA3Ff4616aB50f16345098cF41C469bbaac56,\\r\\n0xd1b4B5Edc144702d548cD7fA643A4A579B07d78b,\\r\\n0xA82Dd1bD3AEB3EF873d6E4fee5b43FAB1a821bcb,\\r\\n0x990593121c44e0Fbd26C3EBe59067aa92d082a52,\\r\\n0x1187ddCE13764d384D10Cd2B0854943514D37A06\\r\\n\\r\\n];} function GA() public view \\r\\n     returns(address[] memory){ return ZA1; } }\"},\"M8.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ncontract M8{ \\r\\n    address[] internal ZA1;\\r\\n\\r\\n    constructor(){ ZA1 = [\\r\\n\\r\\n\\r\\n0xB752A910Fb42085409C7D96cfB8aa724cA81a40B,\\r\\n0xd4C1191760a4183133535c4F355cDBcb622C5cfA,\\r\\n0x188AAf373625a063e86927ea506D13A792C1820E,\\r\\n0x0eF2BEe0358bD0c46d24eD502F713c1cd22F7CB3,\\r\\n0x492d239Dd9e2FCd8AF6A4E975dBB2176536185c5,\\r\\n0x580673EE72835aD5c6d6Ff42914EbBF2e39F4213,\\r\\n0x6F1925E1cB0F3931DfBB2a5a56d6D1203dB47099,\\r\\n0xFC21100714b7F42e62400FcA86E85dE3Bd5d457c,\\r\\n0xC33f43c5c3f9f724110BB7E0e2C10A8cc440D1cf,\\r\\n0x4251A1102A1aD33CC27F988f03535aB8362A53b6,\\r\\n0x07711d9aa470f6584d44865470a3A1076092D0CF,\\r\\n0x6603403431fD3d918088d7559f2e844142DA0f79,\\r\\n0x8eda4DF3af390603C2B46460D42B81D9499BC7bf,\\r\\n0xf58A65498544B0CFF4DCae964d22F8397F0E7eC8,\\r\\n0x701DF58b841A56656046B3976DE8f80BaA6FDe8E,\\r\\n0x307A332b0728982B3661495dD0861ef6C8109E12,\\r\\n0x7EF289AA8CdDF78f5b1004Ab1C5c57ba105D9d29,\\r\\n0x51BB6a4bBCECEa6f579A12bb3608b81813B480aE,\\r\\n0x318a2a5758E47d9a75c54b25aD8359443630cCAE,\\r\\n0x68e4E674706aEDAb5D105d3D9BffDD11BD0E71AB,\\r\\n0x5209565f7aF9DEbB0f674e59667e53Fbe0ce78D5,\\r\\n0xb8bA6E54B670D77347aE22Dc07817E80f00109A4,\\r\\n0x7F94794ff1D054e56Ea3173A94a57C297D5CAc96,\\r\\n0xf24bdf560F62406533eE0fDFD5B745DDb33523Ba,\\r\\n0x7C24513814DCBA88117bb0193D4E71373Fd1E844,\\r\\n0x368342626Fd44837334E24be1716F7B54334Fe3e,\\r\\n0x2b21Bdf8700095abc8E80a158D14f1bB0df1aDAB,\\r\\n0x935B8433df70c482C861A872D4aD0c354511892C,\\r\\n0x0c134FD102C5e21E87C8E2Aa9417660710671c4D,\\r\\n0xC424f1520570AB0eFbA3610bC5504aC87b312cD1,\\r\\n0x244b3fDC1caB71f7112C180Aed8E2BE3623B07Cd,\\r\\n0x2cEECe641de19017B318aA513A3Cb58eb8246579,\\r\\n0x5708059aEfE296801bF90382CaAf906420269eA2,\\r\\n0xeCF25Bbe2443aF0860F7FBBa1bf5fa1d1470d3a1,\\r\\n0xc1e03A0446038dC9619919c3D8eC93E9b6147896,\\r\\n0x33b1bac6FCD21E035aaF2318a702c4cceEf99C99,\\r\\n0xDCd794324d0513BD6c369da08C4D1802d47eF2f2,\\r\\n0x5bA9073792399ae49bd72a605CaDbdB7C95A42B5,\\r\\n0x15AC268f8B3dadDAC70bB46DaE1E917bF93eb137,\\r\\n0xce420b3b3eBEeA0F1fC68C6eC40C1C6390818b38,\\r\\n0x0c385b2277c65C9368E1186d5e077D93AcDb298C,\\r\\n0x74D98f03b33f30AA787213849D81d80884820d5f,\\r\\n0xa4e62c754A30b59CE286eD56cc413371EA5A5a9E,\\r\\n0xC9bbf615375791E5848D435084Bd16a20b2f7EeF,\\r\\n0xfF3D61D13692Dda0D6C8717cEfa8Dc03dFB9FC9b,\\r\\n0xdeEB493535f9F1De0FAB1A0f8A1774Ea85956935,\\r\\n0xff136f3c32dfc16ef7059702BF0Ad7AbFc7b1a5d,\\r\\n0x364c1200Bc56C9E081Cb196501B9c368994163a2,\\r\\n0x988cE72Af39ba14F6B138bCE2F6AF7Df1617813D,\\r\\n0x51bC26983838019DdF11f0B9B6fFfE01416aFab4,\\r\\n0xEf377BD4B74bb69E2401A3d3D3b61dFF81E1a653,\\r\\n0xE73dCBDB9AD554a5FfBCc4608EfA4ae32C5ADCE2,\\r\\n0xc1Dd1FB3F5D84AB7420aE9e0C0c0E691acd5eB44,\\r\\n0xbC00F3214b0c7134c910D21d8B790416C1a935f3,\\r\\n0x5D1291baC71f358fE65c1523ebF8CEB6De63B786,\\r\\n0x00F53165A334B3bB1c058A4F7b8e3BF798832d6F,\\r\\n0xeF1d0cadb6e62B58913B1bc4b857bc2F48661Ae5,\\r\\n0xE1Faf2560f2d89105a30DCd778581542821DE93a,\\r\\n0x693dC732dA9e695e374b1228DaEd24570c0037E7,\\r\\n0x6846A726173895513c43B1a388923eb6a256eF9e,\\r\\n0x9cf679564713174fB375f4DC8EA71c79e975F32E,\\r\\n0x8cAEc42FbEa8fF18ea9CA5D92164efeFDb9fAf86,\\r\\n0xC77956EeC2819d25f78F0a8D375E36992181d7E4,\\r\\n0x12c492a9ddCdfCbC94ba595bE5d9E21D326da1bd,\\r\\n0x59F552a3CdDaF0b235a57a0fbC5B9432d87EC747,\\r\\n0xA75f7A5806E4AE581e789B912dB3B93B84e37a4d,\\r\\n0x5E3f826C11dc549b6A5a9686Ddba5e0fc88182D8,\\r\\n0xD8D2D5515A71660F97CE583ea9A23F8205e598d1,\\r\\n0xbBE515E44E3845075c0a634442208921a753e189,\\r\\n0xE335e6b2d9a3cBB92Eec6Bc42301690707E30B7b,\\r\\n0x966EfE170887Cd5DFf23A43e3DbF77B9B88c4466,\\r\\n0x5ACd208F2FEa53EFe43F3D0EDa4a3677321bd107,\\r\\n0x9CcBbC709693412E76C8749123cf3f9e77529656,\\r\\n0xddB6429A63eE97f506c5243217f1CB9BA0E7Fc49,\\r\\n0x65F53fB0FEC078568064EE47c52C8060Dc0c3d4f,\\r\\n0x5d4Da5734Da9062eAa7CfbA41FFa26379037C221,\\r\\n0x47c65CEc252EFa90b17a8Ff9C38e8d522Aa6779B,\\r\\n0x72dd083219dA3F3F90504f253878762D1E8B12Ea,\\r\\n0x33ea7EBba14F17611E3B8bb4F5D9b7Ee5c226Df6,\\r\\n0x2B32A4723863e4F55DdFfB7d9F20f27279E20507,\\r\\n0x7DbAEeC71a9D56325B827D2195152C3cf977774f,\\r\\n0xA4928c5bbFDDe73f44AC85E4e86076c37bd319D5,\\r\\n0xfc0C98c3Bd5Da201eb49C29f50a44061A8c64F6a,\\r\\n0x15110bcDde2d34BAb1D1144034eEFa2AD53Cd5Ff,\\r\\n0x9CBDC03F19Ee8Fb46521C4815609a78bcFEfEE5e,\\r\\n0x75Bb9277F7cE1E89a25FB4982b39c5648ea99F67,\\r\\n0x1c10B6A3058E515173Cd29854AbE3Cf23db94842,\\r\\n0x47F63B951162DDdb6Ef5C4427F40Ef84049f2e5A,\\r\\n0x606c574A654325B18f94A0a541aEFf548683730d,\\r\\n0x46Bb607fD6D4077C22Ec9af582Ecace21daB80b5,\\r\\n0x7CD58564101eD83012EedA4552CFDce335aa781d,\\r\\n0x56072CE2Df539035AFa9CE94cF680BaB674459f3,\\r\\n0x0627300c5786A21F0b995F4ba1FF488d5B99D97f,\\r\\n0x315e56B030fE1DC820aDd45368Ee448e9b047fc6,\\r\\n0x0bC9371c7aeC231994Ab5DCB6f3788686c70C98b,\\r\\n0xcf7B6c1Db9213B789949Ff27825D1C49Af04CDFf,\\r\\n0x4B4465f98Fd72A173f393d7042A2Eb9428328b13,\\r\\n0xB1cE95C542eFA772Ac273382CBb3CBeaAccBc7d0,\\r\\n0x2471C6C7a1CA1cC3D61F75eb895dE1E7aD3d60Eb\\r\\n\\r\\n];} function GA() public view \\r\\n     returns(address[] memory){ return ZA1; } } \"},\"M9.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ncontract M9{ \\r\\n    address[] internal ZA1;\\r\\n\\r\\n    constructor(){ ZA1 = [\\r\\n\\r\\n\\r\\n0x512aa02d454fdaBbe9953E2Aa1609aADC563A2eF,\\r\\n0x2F8eF5C61f544C8374E7d51DAEEeF0EbB8224397,\\r\\n0x673Cc64b57A87B2504f65Db4Eb589bB50c4506fb,\\r\\n0xe980302f0d58506D3bb02d3B1ff1Bf37471ef5fB,\\r\\n0xc8EAF2285BEE5B12e8B4b22956fa31d22544fB08,\\r\\n0x953177C9570105E16640aD322d63481E69006E46,\\r\\n0x9314a17b049b7030604639ED2335d34A30cDa502,\\r\\n0x6af8b5aa8A8e1b2f39BA047C13DfA31A519c48a6,\\r\\n0x7c0d2D31b86dB2f0A0065B56d1A66E554Ab9c618,\\r\\n0x0cfD5c3B6517A494C5811673d565d8eceB6deA64,\\r\\n0x56ccbbE0110B7d26b2E4781EB4727f933C5053B7,\\r\\n0x3DBff1bbf913c85481D428c2837c3b204D58a26F,\\r\\n0x79Db956bB1D9180C18646d03b359cfA1F6400DF7,\\r\\n0xf8DC7b639af2c49A37FBBdBD2fE19612D44735c6,\\r\\n0x3b133EC45445C609ECF90ea85d233AF285547Ec8,\\r\\n0x0F977b5Cccc135e0d7fd52EA10da8F034549cBBD,\\r\\n0x7F4B8cE3cFA7b79f3b2Eb88c16072E0B888F912D,\\r\\n0x5AAd90Ea78669fD0CB3f287d84d5e4Cf2bF6a04f,\\r\\n0xA08AbB12f6533c127fa0D01D24efa4BdfCf63488,\\r\\n0xacF10491954b92a7fA29B3870eE8dB6bb0a07994,\\r\\n0xEDed388d0D82eBe03B8Eb4eBB5Cb7c2aded5AfEC,\\r\\n0xe70bCfA7F40FC54A33b23fAE9E0342CbD6d5b44C,\\r\\n0x9A52478c0fdFc78B2e6C669d42294E6A9eC4aA7f,\\r\\n0x286407D135015914e703Dd5DbFc113266f84b342,\\r\\n0x71C797e6575F7be05985c58552b2338b54588187,\\r\\n0x45100ea1aEa02f2FBE39B87Df1f3Ac0B4B20d8A5,\\r\\n0x51e043a838295aa7F62d69c5d8ACfC61268222D5,\\r\\n0xBf5b3D5B7318d1d019c9872bD570E8B8b44497E4,\\r\\n0x84f684B292736B6ea8DAD7E137D880bE0feec2e0,\\r\\n0xc3033f6f21D70d39721517eda48BdEd655329d69,\\r\\n0x2403BdA81e1292731d68B27B66A09D60Bd1F233b,\\r\\n0xccbDbb13233A6cCF5FA5baFE36920b5542A9Bb6c,\\r\\n0xa3B8E8a5062D0650BA1f7a871CDE44888F1CE2c6,\\r\\n0xC500e38c9b79e2B5C0f978705b3bAeDfe84b3cbD,\\r\\n0xEEa12d5CeB2638066cB3e8290A70914e451f15DF,\\r\\n0x758FED3014Be6E285EFc0DB636f9F150e154BbC9,\\r\\n0x39B8140B4382f6E63600A9Ee97C3a96ee731314B,\\r\\n0x43f61131d1b17D5F63725351992401FD02c9ECcf,\\r\\n0xbE453A255Fe736bE1b8f633c1c98C7614bd56d8E,\\r\\n0x985fE55EAaf159b538d778eb8bBa19ca8A165385,\\r\\n0xfd1a427E6d93499e585397769bD937E6eA6521d7,\\r\\n0x323dB0bE269b5017d8644c4EfEA893DFa7355838,\\r\\n0x8770a6f8ABD5877c20c2049b1d4c0ADff5007185,\\r\\n0x00C011F18dB62A7B4501970062202eC25d41A74A,\\r\\n0x2EF82ce1b0462828283a23C7866E4ED84C9D5e47,\\r\\n0xf4eB39F6d8B585e2bF7D4e0fFAa7fA895D565669,\\r\\n0xB436C0e0197931D0d9Ce60AEa8CA8CAB054d615e,\\r\\n0x02FFBbDdb2D960E0Ccad06130C078bdd4075Ed9c,\\r\\n0xC9f836772B2d71bee959a7CeD018495D6EF634bB,\\r\\n0xDDF1Ab4cdEB3067A3b18EaD8cCfbF5DDB6cf3Ff4,\\r\\n0xda1E82E4B5D08A8A0eEB24918770F9546fc34a70,\\r\\n0xbC4FAE52140D8797D6CcC8e03218909f331E2d4d,\\r\\n0x5f44a07d2d7FFe176C7B7f63F848C9fd6DE5777c,\\r\\n0x7272F06Afc711a0cAf1b8EaE712eb624D3a9eD04,\\r\\n0xEe44c232B6d49f086fc3070294584b87CaF9C9Ab,\\r\\n0xF6379F93343a78A5a6babBC1fcca3D6b7fE2CABc,\\r\\n0xE6e2B36d322FBeC348bEc80b5A1F8C3375913b1b,\\r\\n0xA9288c89E8Cf63958168303082D968C0A59C07D7,\\r\\n0x9016dD44b8612FeB66AbE24C1e04D41f4083B0B0,\\r\\n0x86f99CF7c8Fa35Fd7496816A9E40FFC0B2565EEE,\\r\\n0xcc98A53BD33A2D04A975AD880E624cD5CEAa54F0,\\r\\n0x4C23Ab8b415D67b638965dc4fe37Fe0286C94F97,\\r\\n0x8b2993e210B9b36308b68185E9FfABBBD09dE2B5,\\r\\n0x802688a4A87C594F03e44E5D1eF34272C8E059d8,\\r\\n0x9A09C07cACD78e4246D41B17a1840956eA5787fd,\\r\\n0x160F372f48BcF2Bc012778e5A18EAAf72f67cff6,\\r\\n0x980a628CB5249b8D7EeA07BBe92De24522270c9a,\\r\\n0xc54BF79c0a9d83276aC7bd68C1B029988d6a5D96,\\r\\n0xE91905cb7702b46136BFc10113CB7E8CC4e11bFc,\\r\\n0x4e49CE177563D38f5Ef89C8c64783545C2F3c444,\\r\\n0xAff62cf4726ad687A3F7BC3FbBC341e63275A311,\\r\\n0x6Ea41cb98E9b9AB7aAC12A37e3F4C9241226a1fC,\\r\\n0x507BF5c14d91301F383f5395F28B6907137E15f3,\\r\\n0x58523b892D40B544bB1f41f02DD7FF84b5f86c8F,\\r\\n0xd7Ecbd7dA9C152240f42E7A640AA34D8301a7572,\\r\\n0xF3bd187095801e673139b7505D279ec4771DFBD4,\\r\\n0xC7f82449BF299A358027F6EfDf24bd69d94808B2,\\r\\n0x54dB7fFD54aeAd12e1300D18e972c3cf51EC6827,\\r\\n0x5c25573377b6d460f4a3Db8A8465019b301Efc80,\\r\\n0x7b3F2da078Bd0324c4C04A6DA0aFD08eF71e1345,\\r\\n0x624109A74428e7b12920C8B97423BC0bdA190adb,\\r\\n0x6f241aB7A12Ae12D7477b13CF5F053b3d449d01A,\\r\\n0x48D34E4B9DD65546585b2B127fC3dE6e1730a35a,\\r\\n0xaBbD4445664c0a05ea8C3F566CA6086Cb1bBaD1F,\\r\\n0xF9FeCB85a816B8F8758E5177E47b3aCc36E70870,\\r\\n0x7b319176b52321d44c8Ea330862E92B89933dC8D,\\r\\n0x22Df2E5B157ECc3Fa869360B1e7d053D385086d7,\\r\\n0x64064Fd48318A9F92226ECab545d74676E417D87,\\r\\n0x96dC773Cd1F239f4CAa9D621fbC0d1D64Be6a504,\\r\\n0x97B9eeE6Ef0ad2424e13e03AEc7A8Bcb3980a633,\\r\\n0x3be8cBAC390d51F2E7ceaAEB355BA92eda66038b,\\r\\n0xA6a5943D0A4D90cE3730625aF6746B3cFfd24f24,\\r\\n0x03e17e481C0C935824012D7D3E7d656c4739bb00,\\r\\n0xe009abDFd5EA24AFE8EeD24Ca4C0ac47311e0412,\\r\\n0x677b6c96378DE435E55B9F8B38b439124BceA210,\\r\\n0xF53D7B1d53624d46799F58227Ca1022348FA5eCE,\\r\\n0x669b777B4e4a6a7F7177521403e01F7D266985Fb,\\r\\n0xef0B854C3837eEd54F1F48440177f55D4E70b6a8,\\r\\n0xB3d90A01f82bCEB2322ec1e304df9aD8D945A939\\r\\n\\r\\n\\r\\n];} function GA() public view \\r\\n     returns(address[] memory){ return ZA1; } }\"},\"Smart_Binance.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\nimport \\\"./Smart_Binary.sol\\\";\\r\\ncontract Smart_Binance is Context {\\r\\n    using SafeERC20 for IERC20; struct SEP { uint24 LD; uint24 RD; uint8 TCP; uint16 DP; uint8 CH; uint8 OR; address UPA; address LDA; address RDA;}\\r\\n    mapping(address =\\u003e SEP) private _XB; mapping(uint128 =\\u003e address) private JK; mapping(uint16 =\\u003e address) private _DUP;\\r\\n    address[] private EW; address[] private _PY; address[] private _X_N; uint32[] private _RNN; uint256 private LSR;\\r\\n    uint256 private LRF; uint256 private V_F; uint128 private _U_Z; uint128 private ZA_D; uint64 private _CF; uint64 private _CU_PY;\\r\\n    uint16 private _DUPId; uint8 private Lk; uint8 private Count_Upload; uint8 C_G; address private R_S; address private _SBT; address private Operator;\\r\\n    IERC20 private S_Coin; string private Note; string private IPFS; Smart_Binary private NBJ;\\r\\n    constructor() {R_S = _msgSender(); LSR = block.timestamp;\\r\\n        S_Coin = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\r\\n        _SBT = 0x52B5BD79C5B56B52747d735809177d9ee686E48e;\\r\\n        Operator = 0xF9B29B8853c98B68c19f53F5b39e69eF6eAF1e2c;\\r\\n        NBJ = Smart_Binary(0x3164B3841D2b603ddB43C909C7f6Efd787058541);}\\r\\n    function Reward_12() public {require(Lk == 0, \\\"Proccesing\\\");\\r\\n        require(_XB[_msgSender()].TCP \\u003e 0, \\\"You dont have point\\\" );\\r\\n        require(block.timestamp \\u003e LSR + 12 hours, \\\"Reward_12 time has not come\\\");\\r\\n        Lk = 1; uint256 ZZ = (PRP() * 90) - (Total_Point() * 10**18); V_F = (PRP() * 10);\\r\\n        uint256 QA = ((ZZ)) / Total_Point(); uint128 R_C = (Total_Point()) * 10**18;\\r\\n        for(uint128 i = 0; i \\u003c= _U_Z; i = unsafe_inc(i)) {SEP memory T_DE = _XB[JK[i]];\\r\\n        uint24 Pnt; uint24 RLT = T_DE.LD \\u003c= T_DE.RD ? T_DE.LD : T_DE.RD;\\r\\n        if (RLT \\u003e 0) {if (RLT \\u003e 25) {Pnt = 25; if (T_DE.LD \\u003c RLT) { T_DE.LD = 0; T_DE.RD -= RLT;} \\r\\n        else if (T_DE.RD \\u003c RLT) {T_DE.LD -= RLT; T_DE.RD = 0;} else {T_DE.LD -= RLT; T_DE.RD -= RLT;}} else {Pnt = RLT; \\r\\n        if (T_DE.LD \\u003c Pnt) {T_DE.LD = 0; T_DE.RD -= Pnt;} else if (T_DE.RD \\u003c Pnt) { T_DE.LD -= Pnt; T_DE.RD = 0;} \\r\\n        else {T_DE.LD -= Pnt; T_DE.RD -= Pnt;}} T_DE.TCP = 0; _XB[JK[i]] = T_DE;\\r\\n        if (Pnt * QA \\u003e S_Coin.balanceOf(address(this))) {S_Coin.safeTransfer(JK[i],S_Coin.balanceOf(address(this)));} \\r\\n        else {S_Coin.safeTransfer( JK[i], Pnt * QA);}_PY.push(JK[i]); _CU_PY++;}} LSR = block.timestamp;\\r\\n        if (R_C \\u003c= S_Coin.balanceOf(address(this))) {S_Coin.safeTransfer(_msgSender(), R_C);} Lk = 0; C_G = 1; LRF = block.timestamp;}\\r\\n    function Register(address upline) public {require(_XB[upline].CH != 2,\\\"Upline has two directs!\\\");\\r\\n        require(_msgSender() != upline, \\\"You can not enter your address!\\\");\\r\\n        bool UU = false; for(uint128 i = 0; i \\u003c= _U_Z; i = unsafe_inc(i)) {if (JK[i] == _msgSender()) {UU = true; break;}} require(UU == false, \\\"You were registered!\\\");\\r\\n        bool WH = false; for(uint128 i = 0; i \\u003c= _U_Z; i = unsafe_inc(i)) {if (JK[i] == upline) { WH = true; break;}} require(WH == true, \\\"Upline is not exist!\\\");\\r\\n        S_Coin.safeTransferFrom(_msgSender(), address(this), 100 * 10**18 ); JK[_U_Z] = _msgSender(); _U_Z++;\\r\\n        uint16 D_X = _XB[upline].DP + 1; _XB[_msgSender()] = SEP(0,0,0,D_X,0,_XB[upline].CH, upline, address(0), address(0));\\r\\n        if (_XB[upline].CH == 0) { _XB[upline].LD++; _XB[upline].LDA = _msgSender();} else {_XB[upline].RD++; _XB[upline].RDA = _msgSender(); } _XB[upline].CH++; setTDP(upline);\\r\\n        address UPN = _XB[upline].UPA; address ChNde = upline; for( uint128 j = 0; j \\u003c _XB[upline].DP; j = unsafe_inc(j)){ \\r\\n        if (_XB[ChNde].OR == 0) {_XB[UPN].LD++; } else {_XB[UPN].RD++; } setTDP(UPN); ChNde = UPN; UPN = _XB[UPN].UPA;}}\\r\\n    function Gift_3() public {require(C_G == 1,\\\"Gift_3 time has not come!\\\");\\r\\n        require(block.timestamp \\u003e LRF + 3 hours, \\\"Gift_3 time has not come\\\");\\r\\n        require(V_F \\u003e 20*10**18, \\\"Gift balance is not enough!\\\" );\\r\\n        require(_CF \\u003e 0, \\\"There is no candidate!\\\" );\\r\\n        bool II = false; for(uint128 i = 0; i \\u003c _CF; i = unsafe_inc(i)) {if (EW[i] == _msgSender()) {II = true; break;}}\\r\\n        require(II == true, \\\"You are not candidated!\\\"); S_Coin.safeTransfer(_msgSender(),10 * 10**18);\\r\\n        uint256 NW = ((V_F - 10*10**18) / 10**18) / 10; if (NW != 0 \\u0026\\u0026 _CF != 0) {if (_CF \\u003e NW) {\\r\\n        for(uint32 i = 1; i \\u003c= _CF; i++ ) {_RNN.push(i);} for(uint128 i = 1; i \\u003c= NW; i = unsafe_inc(i)){\\r\\n        uint256 randomIndex = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, i))) % _CF;\\r\\n        uint128 RSN = _RNN[randomIndex]; _RNN[randomIndex] = _RNN[ _RNN.length - 1 ]; _RNN.pop();\\r\\n        if(_XB[EW[RSN - 1]].TCP == 0){ S_Coin.safeTransfer(EW[RSN - 1], 10 * 10**18 );}}\\r\\n        for(uint128 i = 0; i \\u003c (_CF - NW); i = unsafe_inc(i)) {_RNN.pop();}} else {for (uint128 i = 0; i \\u003c _CF; i = unsafe_inc(i))\\r\\n        {S_Coin.safeTransfer(EW[i], 10 * 10**18 );}}} delete EW; _CF = 0; V_F = 0; C_G = 0; delete _PY; _CU_PY=0;}\\r\\n    function Smart_Gift() public { require(C_G == 1,\\\"Smart_Gift time has not come!\\\");\\r\\n        bool UPY = false; for(uint128 i = 0; i \\u003c _CU_PY; i = unsafe_inc(i)) {if (_PY[i] == _msgSender()) { UPY = true; break;}}  require(UPY == false, \\\"You have point!\\\");\\r\\n        bool UU = false; for(uint128 i = 0; i \\u003c= _U_Z; i = unsafe_inc(i)) {if (JK[i] == _msgSender()) { UU = true; break;}}\\r\\n        require(UU == true, \\\"You are not registered!\\\");\\r\\n        bool II = false; for(uint128 i = 0; i \\u003c _CF; i = unsafe_inc(i)) {if (EW[i] == _msgSender()) { II = true; break;}}\\r\\n        require(II == false, \\\"You were candidated!\\\");\\r\\n        require(((((V_F - 10*10**18) / 10**18) / 10)*2) \\u003e (_CF), \\\"Capacity is completed!\\\"); EW.push(_msgSender()); _CF++;}\\r\\n    function Emergency_72() public {require(_msgSender() == Operator, \\\"Just operator can write!\\\");\\r\\n        require(block.timestamp \\u003e LSR + 72 hours, \\\"Emergency_72 time has not come\\\");\\r\\n        S_Coin.safeTransfer(R_S, S_Coin.balanceOf(address(this)) );}\\r\\n    function Buy_SBT() public {require(S_Coin.balanceOf(_msgSender()) \\u003e= (10 * 10**18), \\\"You dont have enough S_Coin!\\\");\\r\\n        S_Coin.safeTransferFrom(_msgSender(),address(this), 10 * 10**18 ); IERC20(_SBT).transfer(_msgSender(), 100 * 10**18);}\\r\\n    function Get_SBT() public {bool CC = false; for (uint128 i = 0; i \\u003c= _U_Z; i = unsafe_inc(i)) {if (JK[i] == _msgSender()) {CC = true; break;}}\\r\\n        require(CC == true, \\\"You are not registered!\\\" );\\r\\n        bool TAU = false; for (uint128 i = 0; i \\u003c ZA_D; i = unsafe_inc(i)) {if (_X_N[i] == _msgSender()) {TAU = true; break;}}\\r\\n        require(TAU == false,\\\"You can not receive SBT again!\\\"); IERC20(_SBT).transfer(_msgSender(), 100 * 10**18); _X_N.push(_msgSender()); ZA_D++;}\\r\\n    function Import (address User) public {\\r\\n        bool UU = false; for(uint128 i = 0; i \\u003c= _U_Z; i = unsafe_inc(i)) {if (JK[i] == User) {UU = true; break;}} require(UU == false, \\\"You were registered!\\\");\\r\\n        bool TDUP = false; for(uint16 i = 0; i \\u003c= _DUPId; i++) {if (_DUP[i] == User) {TDUP = true; break;}} require(TDUP == false, \\\"You were uploaded!\\\");\\r\\n        require(NBJ.User_Information(User).UplineAddress != address(0), \\\"You were not in Smart Binary\\\");\\r\\n        JK[_U_Z] = User; _XB[JK[_U_Z]] = SEP( \\r\\n          uint24(NBJ.User_Information(User).leftDirect),\\r\\n          uint24(NBJ.User_Information(User).rightDirect), 0,\\r\\n          uint16(NBJ.User_Information(User).depth),\\r\\n          uint8(NBJ.User_Information(User).childs),\\r\\n          uint8(NBJ.User_Information(User).leftOrrightUpline),\\r\\n        NBJ.User_Information(User).UplineAddress,\\r\\n        NBJ.User_Information(User).leftDirectAddress,\\r\\n        NBJ.User_Information(User).rightDirectAddress); _U_Z++;}\\r\\n    function Upload (address User, uint24 L, uint24 R, uint16 D, uint8 C, uint8 LR, address UA, address LA, address RA) \\r\\n    public {require(_msgSender() == Operator, \\\"Just operator can write!\\\");\\r\\n    require(Count_Upload \\u003c= 60, \\\"Its over!\\\"); JK[_U_Z] = User; _XB[JK[_U_Z]] = SEP(L,R,0,D,C,LR,UA,LA,RA); _U_Z++; Count_Upload++;}\\r\\n    function Stable_Coin(address add) public{ require(_msgSender() == Operator, \\\"Just operator can write!\\\"); S_Coin = IERC20(add);}\\r\\n    function PRP() private view returns (uint256) { return (S_Coin.balanceOf(address(this))) / 100;}\\r\\n    function setTDP(address Q) private {uint24 min = _XB[Q].LD \\u003c= _XB[Q].RD ? _XB[Q].LD : _XB[Q].RD; if (min \\u003e 0) {_XB[Q].TCP = uint8(min);}}\\r\\n    function unsafe_inc(uint128 x) private pure returns (uint128) { unchecked { return x + 1;}}\\r\\n    function Add_DUP(address add) public {require(_msgSender() == Operator, \\\"Just operator can write!\\\"); _DUP[_DUPId] = add; _DUPId++;}\\r\\n    function Write_Note(string memory N) public {require(_msgSender() == Operator, \\\"Just operator can write!\\\"); Note = N;}\\r\\n    function Write_IPFS(string memory I) public {require(_msgSender() == Operator, \\\"Just operator can write!\\\"); IPFS = I;}\\r\\n    function User_Info(address User) public view returns (SEP memory) {return _XB[User];}\\r\\n    function Contract_Balance() public view returns (uint256) {return (S_Coin.balanceOf(address(this)) - V_F) / 10**18;}\\r\\n    function Reward_12_Writer () public view returns (uint256) {return Total_Point();}\\r\\n    function Reward_Balance () public view returns (uint256) {if(C_G == 1){return (((S_Coin.balanceOf(address(this)) - V_F)/100)*90) / 10**18; } else{ return (PRP() * 90) / 10**18;}}\\r\\n    function Gift_Balance() public view returns (uint256) {if(C_G == 1){return V_F / 10**18; } else{ return (PRP() * 10) / 10**18;}}\\r\\n    function Gift_Candidate() public view returns (uint256) {return _CF;}\\r\\n    function All_Register() public view returns (uint256) {return _U_Z;}\\r\\n    function User_Upline(address User) public view returns (address) {return _XB[User].UPA;}\\r\\n    function User_Directs(address User) public view returns (address, address) {return (_XB[User].LDA, _XB[User].RDA );}\\r\\n    function User_Left_Right(address User) public view returns (uint256, uint256) {return ( _XB[User].LD, _XB[User].RD );}\\r\\n    function Total_Point () public view returns (uint128) { uint128 TPnt; for (uint128 i = 0; i \\u003c= _U_Z; i = unsafe_inc(i)){\\r\\n    uint32 min = _XB[JK[i]].LD \\u003c= _XB[JK[i]].RD ? _XB[JK[i]].LD : _XB[JK[i]].RD; if (min \\u003e 25) {min = 25;} TPnt += min;} return TPnt;}\\r\\n    function Value_Point() public view returns (uint256) {if (Total_Point() == 0) {return Reward_Balance();} else {return ((Reward_Balance ()) - (Total_Point())) / (Total_Point());}}\\r\\n    function Read_Note() public view returns (string memory) {return Note;}\\r\\n    function Read_IPFS() public view returns (string memory) {return IPFS;} \\r\\n    function Gift_3_Writer() public view returns (uint256){ if(V_F \\u003e 20*10**18){return 10; } else{return 0;}}\\r\\n    function SBT () public view returns (address) {return _SBT;}}\\r\\n\"},\"Smart_Binance_Pro.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\nimport \\\"./Base.sol\\\";\\r\\ncontract Smart_Binance_Pro is Context,Base{\\r\\n    using SafeERC20 for IERC20;\\r\\n    constructor(){\\r\\n        R_S = _msgSender();\\r\\n        SC = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\r\\n        SBT = 0xb02880953A3aa56C086491B05f42482f84D01313;\\r\\n        OP = 0xF9B29B8853c98B68c19f53F5b39e69eF6eAF1e2c;\\r\\n        NBJ = Smart_Binance(0x5741da6D2937E5896e68B1604E25972a4834C701);\\r\\n        NBJ2 = M1(0xA602b50C0bb0fC9c578494Ed318F8Ce45A64037A);\\r\\n        NBJ3 = M2(0x30eB6645Bc4961ECf3CEc06f9eAA7584B6Bd37a5);\\r\\n        NBJ4 = M3(0xbdC8fcA68900ed4cDE7a2C15D809dcc4657d83B3);\\r\\n        NBJ5 = M4(0x2448EC031C29275623976A2362C09c066A9849Dc);\\r\\n        NBJ6 = M5(0x7af5d3472f0dc6a489f7b92056A9eA1E1402C643);\\r\\n        NBJ7 = M6(0x748e3494E37e0F5BF116D520B7E6ACB86D77EF23);\\r\\n        NBJ8 = M7(0x06C029497dbB75b56c0839f26fafF5623C8b2341);\\r\\n        NBJ9 = M8(0x606Fe0Ae7672fd0C8D9c9c7aD52eFEAC1485A748);\\r\\n        NBJ10 = M9(0x9E6cB8c45276C374449D25f3790fF8A1Ef373e69);\\r\\n        NBJ11 = M10(0x83A18c238c3ED379CE50d623757c3A6d8529A654);\\r\\n        NBJ12 = M11(0xE3e6d43c6FA6a551e2F5E7917733c8db8E42C4FF);\\r\\n        NBJ13 = M12(0xF2019f5D556F85f13C86821907173C7e320DC31C);\\r\\n        ZS = block.timestamp;}\\r\\n    function Register(address Up) external {DC(Up);}\\r\\n    function DC(address Up) private {\\r\\n        require(KW[Up].XI != 2, \\\" Upline Has 2 directs \\\");\\r\\n        require(_msgSender() != Up, \\\" Dont enter your address \\\" );\\r\\n        require(!DX(_msgSender()), \\\" You Are registered \\\");\\r\\n        require(DX(Up), \\\" Upline is Not Exist \\\");\\r\\n        SC.safeTransferFrom(_msgSender(), address(this), 100 * 10**18);\\r\\n        VV[JK] = _msgSender(); JK++;\\r\\n        Node memory user = Node({ id: JK, AL: 0, AR: 0, LT: 0, RT: 0, XI: 0, YY: KW[Up].XI == 0 ? false : true,\\r\\n        UP: Up, PO: address(0), QO: address(0) });\\r\\n        KW[_msgSender()] = user;  JJ[DZ] = _msgSender(); DZ++;\\r\\n        if (KW[Up].XI == 0) {KW[Up].LT++; KW[Up].AL++; KW[Up].PO = _msgSender();} \\r\\n        else {KW[Up].RT++; KW[Up].AR++; KW[Up].QO = _msgSender();}\\r\\n        KW[Up].XI++; IERC20(SBT).transfer(_msgSender(), 100 * 10**18);}\\r\\n    function Reward_12_Report() external {DH();}\\r\\n    function DH() private {require(LK == 0, \\\" Proccesing \\\");\\r\\n        require(block.timestamp \\u003e ZS + 12 hours, \\\" Reward_12_Report Time Has Not Come \\\");\\r\\n        ZB(); require(ZI() \\u003e 0, \\\" Total Point Is 0 \\\");\\r\\n        LK = 1; ZL = ZI(); JY = _msgSender();\\r\\n        uint256 ZO = ZK(); ZM = ZO; uint256 D_T = (DZ * 10 ** 18 );\\r\\n       for (uint24 i = 0; i \\u003c DJ; i++) { Node memory ZN = KW[JL[i]]; uint24 UT = ZH(JL[i]);\\r\\n            if (ZN.LT == UT) {ZN.LT = 0; ZN.RT -= UT;} \\r\\n            else if (ZN.RT == UT) {ZN.LT -= UT; ZN.RT = 0;} \\r\\n            else { if (ZN.LT \\u003c ZN.RT) {ZN.RT -= ZN.LT; ZN.LT = 0;} \\r\\n            else {ZN.LT -= ZN.RT; ZN.RT = 0;}}  KW[JL[i]] = ZN;\\r\\n            if (UT * ZO \\u003e SC.balanceOf(address(this))) \\r\\n            {SC.safeTransfer(JL[i], SC.balanceOf(address(this)));} \\r\\n            else {SC.safeTransfer(JL[i], UT * ZO);}}\\r\\n        if (D_T \\u003c= SC.balanceOf(address(this))) {SC.safeTransfer(_msgSender(), D_T);}\\r\\n        ZS = block.timestamp; DZ = 0; DJ = 0; DW = 0; DS = 0; LK = 0;}\\r\\n    function ZB() private {address ZC; address ZD;\\r\\n        for (uint256 k = 0; k \\u003c DZ; k++) {ZC = KW[KW[JJ[k]].UP] .UP; ZD = KW[JJ[k]].UP;\\r\\n            if (ZE(ZD) == true) { JL[DJ] = ZD; DJ++; }\\r\\n            while (ZC != address(0)) { if (KW[ZD].YY == false) { KW[ZC].LT++; KW[ZC].AL++;} \\r\\n            else { KW[ZC].RT++; KW[ZC].AR++;} \\r\\n            if (ZE(ZC) == true) { JL[DJ] = ZC; DJ++;} ZD = ZC; ZC = KW[ZC].UP;}}}\\r\\n    function Smart_Gift(uint8 YourNumber) external {\\r\\n        require(LK == 0, \\\"Proccesing\\\");\\r\\n        require(YourNumber \\u003c 6 \\u0026\\u0026 YourNumber \\u003e 0, \\\" Just : 1,2,3,4,5 \\\" );\\r\\n        require(DX(_msgSender()), \\\" User is Not Exist \\\");\\r\\n        require(User_All_Time_Point(_msgSender()) \\u003c 1, \\\" Just All Time 0 Point \\\");\\r\\n        require(Just_Gift_Balance() \\u003e 0, \\\" Smart_Gift Balance Is 0 \\\");\\r\\n        require(ZF(_msgSender()), \\\" You Did Smart_Gift Today \\\");\\r\\n        JO[DW] = _msgSender(); DW++; if (YourNumber == random(4)) {SC.safeTransfer(_msgSender(), 10 * 10**18); LM[DS] = _msgSender(); DS++; JP++;}}\\r\\n    function _Import_Fast() external {address[] memory ZA1;\\r\\n        if(CI == 0){ZA1 = NBJ2.GA();CI++;\\r\\n        }else if(CI == 1){ZA1 = NBJ3.GA();CI++;\\r\\n        }else if(CI == 2){ZA1 = NBJ4.GA();CI++;\\r\\n        }else if(CI == 3){ZA1 = NBJ5.GA();CI++;\\r\\n        }else if(CI == 4){ZA1 = NBJ6.GA();CI++;\\r\\n        }else if(CI == 5){ZA1 = NBJ7.GA();CI++;\\r\\n        }else if(CI == 6){ZA1 = NBJ8.GA();CI++;\\r\\n        }else if(CI == 7){ZA1 = NBJ9.GA();CI++;\\r\\n        }else if(CI == 8){ZA1 = NBJ10.GA();CI++;\\r\\n        }else if(CI == 9){ZA1 = NBJ11.GA();CI++;\\r\\n        }else if(CI == 10){ZA1 = NBJ12.GA();CI++;\\r\\n        }else if(CI == 11){ZA1 = NBJ13.GA();}\\r\\n    for(uint256 i = 0; i \\u003c ZA1.length; i++){address User = ZA1[i];\\r\\n            if(DX(User) == true){continue;} VV[JK] = User; JK++; Node memory user = Node({ id: JK,\\r\\n                AL: uint32(NBJ.User_Info(User).LD),\\r\\n                AR: uint32(NBJ.User_Info(User).RD),\\r\\n                LT: uint24(NBJ.User_Info(User).LD),\\r\\n                RT: uint24(NBJ.User_Info(User).RD),\\r\\n                XI: uint8(NBJ.User_Info(User).CH),\\r\\n                YY: NBJ.User_Info(User).OR == 0 ? false : true,\\r\\n                UP: NBJ.User_Info(User).UPA,\\r\\n                PO: NBJ.User_Info(User).LDA,\\r\\n                QO: NBJ.User_Info(User).RDA });\\r\\n            KW[User] = user; IERC20(SBT).transfer(User, 100 * 10**18); }}\\r\\n    function Smart_Import(address User) external {\\r\\n        require(NBJ.User_Info(User).UPA != address(0), \\\" You were not in Smart Binance \\\" );\\r\\n        require(!DX(User), \\\" You were Imported \\\");\\r\\n        require(ZG(User), \\\" You were Uploaded \\\");\\r\\n        VV[JK] = User; JK++; Node memory user = Node({ id: JK,\\r\\n            AL: uint32(NBJ.User_Info(User).LD),\\r\\n            AR: uint32(NBJ.User_Info(User).RD),\\r\\n            LT: uint24(NBJ.User_Info(User).LD),\\r\\n            RT: uint24(NBJ.User_Info(User).RD),\\r\\n            XI: uint8(NBJ.User_Info(User).CH),\\r\\n            YY: NBJ.User_Info(User).OR == 0 ? false : true,\\r\\n            UP: NBJ.User_Info(User).UPA,\\r\\n            PO: NBJ.User_Info(User).LDA,\\r\\n            QO: NBJ.User_Info(User).RDA });\\r\\n        KW[User] = user; IERC20(SBT).transfer(User, 100 * 10**18);}\\r\\n    function _Upload (address OW, address User, uint32 AL, uint32 AR, uint24 L, uint24 R, uint8 C, bool LR, address UA, address LA, address RA ) external {\\r\\n        require(_msgSender() == OP , \\\" Just Operator \\\");\\r\\n        require(DF \\u003c= 99, \\\" Upload is over \\\"); VV[JK] = User; JK++;\\r\\n        Node memory user = Node({ id: JK, AL: AL, AR: AR, LT: L, RT: R, XI: C, YY: LR,\\r\\n        UP: UA, PO: LA, QO: RA }); KW[User] = user; UM[DF] = OW; DF++; IERC20(SBT).transfer(User, 100 * 10**18);}\\r\\n function Smart_Token() external { require(EE[_msgSender()] \\u003c 5 , \\\" Your 5 Times Are Over \\\");\\r\\n    uint32 K = User_All_Time_Point(_msgSender());\\r\\n    if(K \\u003e= 10 \\u0026\\u0026 K \\u003c 30) {IERC20(SBT).transfer(_msgSender(), 100 * 10**18); EE[_msgSender()]++;} else \\r\\n    if(K \\u003e= 30 \\u0026\\u0026 K \\u003c 100) {IERC20(SBT).transfer(_msgSender(), 300 * 10**18); EE[_msgSender()]++;} else \\r\\n    if(K \\u003e= 100 \\u0026\\u0026 K \\u003c 300) {IERC20(SBT).transfer(_msgSender(), 1000 * 10**18); EE[_msgSender()]++;} else \\r\\n    if(K \\u003e= 300 \\u0026\\u0026 K \\u003c 1000) {IERC20(SBT).transfer(_msgSender(), 3000 * 10**18); EE[_msgSender()]++;} else \\r\\n    if(K \\u003e= 1000 \\u0026\\u0026 K \\u003c 3000) {IERC20(SBT).transfer(_msgSender(), 10000 * 10**18); EE[_msgSender()]++;} else \\r\\n    if(K \\u003e= 3000 \\u0026\\u0026 K \\u003c 10000) {IERC20(SBT).transfer(_msgSender(), 30000 * 10**18); EE[_msgSender()]++;} else \\r\\n    if(K \\u003e= 10000 \\u0026\\u0026 K \\u003c 30000) {IERC20(SBT).transfer(_msgSender(), 100000 * 10**18); EE[_msgSender()]++;} else \\r\\n    if(K \\u003e= 30000 \\u0026\\u0026 K \\u003c 100000) {IERC20(SBT).transfer(_msgSender(), 300000 * 10**18); EE[_msgSender()]++;} else \\r\\n    if(K \\u003e= 100000 \\u0026\\u0026 K \\u003c 300000) {IERC20(SBT).transfer(_msgSender(), 1000000 * 10**18); EE[_msgSender()]++;} else \\r\\n    if(K \\u003e= 300000 \\u0026\\u0026 K \\u003c 1000000) {IERC20(SBT).transfer(_msgSender(), 3000000 * 10**18); EE[_msgSender()]++;} else \\r\\n    if(K \\u003e= 1000000)                 {IERC20(SBT).transfer(_msgSender(), 10000000 * 10**18); EE[_msgSender()]++;}}\\r\\n    function _Emergency_72() external {\\r\\n        require(_msgSender() == OP , \\\" Just Operator \\\");\\r\\n        require(block.timestamp \\u003e ZS + 72 hours, \\\" Emergency_72 Time Has Not Come \\\");\\r\\n        SC.safeTransfer(R_S, SC.balanceOf(address(this))); ZS = block.timestamp; DZ = 0; DJ = 0; DW = 0; DS = 0;}\\r\\n    function ZK() private view returns (uint256) {return (ZJ() * 10**18) / ZI();}\\r\\n    function random(uint256 number) private view returns (uint256) {return (uint256 (keccak256( abi.encodePacked(block.timestamp, block.prevrandao, msg.sender ) ) ) % number) + 1;}\\r\\n    function ZJ() private view returns (uint256) {return (SC.balanceOf(address(this)) - (DZ * 10**18)) / 10**18;}\\r\\n    function DX(address A) private view returns (bool) {return (KW[A].id != 0);}\\r\\n    function ZE(address A) private view returns (bool) { if (ZH(A) \\u003e 0) { for (uint24 i = 0; i \\u003c DJ; i++) { if (JL[i] == A) {return false;}} return true;} else {return false;}}\\r\\n    function ZF(address A) private view returns (bool) { for (uint24 i = 0; i \\u003c DW; i++) { if (JO[i] == A) {return false;}} return true;}\\r\\n    function ZG(address A) private view returns (bool) { for (uint8 i = 0; i \\u003c DF; i++) { if (UM[i] == A) {return false;}} return true;}\\r\\n    function unsafe_inc(uint24 x) private pure returns (uint24) {unchecked {return x + 1;}}\\r\\n    function ZH(address A) private view returns (uint24) {uint24 min = KW[A].LT \\u003c= KW[A].RT ? KW[A].LT : KW[A].RT; if (min \\u003e 25) {return 25;} else {return min;}}\\r\\n    function ZI() private view returns (uint24) {uint24 AA; for (uint24 i = 0; i \\u003c= JK; i = unsafe_inc(i)) {uint24 min = KW[VV[i]].LT \\u003c= KW[VV[i]].RT ? KW[VV[i]].LT : KW[VV[i]].RT; if (min \\u003e 25) {min = 25;} AA += min;} return AA;}\\r\\n    function _SBT() public view returns (address) {return SBT;}\\r\\n    function _Old_Point (address U, uint16 V) external {require(_msgSender() == OP , \\\" Just Operator \\\"); KW[U].AL += V; KW[U].AR += V;}\\r\\n    function _S_Coin(address S) external {require(_msgSender() == OP , \\\" Just Operator \\\"); SC = IERC20(S);}\\r\\n    function _Write_Note(string memory N) public {require(_msgSender() == OP , \\\" Just operator \\\"); Note = N;}\\r\\n    function _Read_Note() public view returns (string memory) {return Note;}\\r\\n    function _Write_IPFS(string memory I) public {require(_msgSender() == OP , \\\" Just operator \\\"); IPFS = I;}\\r\\n    function _Read_IPFS() public view returns (string memory) {return IPFS;}\\r\\n    function All_Register() public view returns (uint32) {return JK;}\\r\\n    function All_Contract_Payment() public view returns (uint32) {return JK * 100 ;}\\r\\n    function All_Gift_Winner() public view returns (uint32) {return JP;}\\r\\n    function All_Reward_12_Payment () public view returns (uint32) {return All_Contract_Payment() - All_Gift_Winner() ;}\\r\\n    function All_User_Address() public view returns (address[] memory) {address[] memory ret = new address[](JK); for (uint32 i = 0; i \\u003c JK; i++) {ret[i] = VV[i]; } return ret;}\\r\\n    function Last_Value_Point() public view returns (uint256) {return ZM / 10**18; }\\r\\n    function Last_Reward_12_Writer() public view returns(address) {return JY;}\\r\\n    function Last_Total_Point() public view returns (uint24) {return ZL;}\\r\\n    function Just_Contract_Balance() public view returns (uint256) {return SC.balanceOf(address(this)) / 10**18;}\\r\\n    function Just_Reward_12_Balance() public view returns (uint256) {return (DZ * 90);}\\r\\n    function Just_Gift_Balance() public view returns (uint256) {return (Just_Contract_Balance() - (DZ * 90));}\\r\\n    function Today_Contract_InPut() public view returns (uint256) {return (DZ * 100);}\\r\\n    function Today_Register_Address() public view returns (address[] memory) {address[] memory ret = new address[](DZ); for (uint24 i = 0; i \\u003c DZ; i++) {ret[i] = JJ[i];} return ret;}\\r\\n    function Today_Gift_Candida_Address() public view returns (address[] memory) {address[] memory ret = new address[](DW); for (uint24 i = 0; i \\u003c DW; i++) {ret[i] = JO[i];} return ret;}\\r\\n    function Today_Reward_12_Writer() public view returns (uint256) {return DZ;}\\r\\n    function Today_Gift_Winner_Address() public view returns(address[] memory) {address[] memory ret = new address[](DS); for (uint16 i = 0; i \\u003c DS; i++) {ret[i] = LM[i];} return ret;}\\r\\n    function Today_Register_Number() public view returns (uint256) {return DZ; }\\r\\n    function User_Upline(address User) public view returns (address) {return KW[User].UP;}\\r\\n    function User_Directs(address User) public view returns (address, address) {return (KW[User].PO, KW[User].QO );}\\r\\n    function User_All_Time_Left_Right (address User) public view returns (uint32, uint32) {return (KW[User].AL, KW[User].AR);}\\r\\n    function User_All_Time_Point(address User) public view returns (uint32) {return KW[User].AL \\u003c= KW[User].AR ? KW[User].AL : KW[User].AR; }\\r\\n    function User_Info(address User) public view returns (Node memory) {return KW[User];}}\"},\"Smart_Binary.sol\":{\"content\":\"/**\\n *Submitted for verification at BscScan.com on 2022-09-01\\n*/\\n\\n// SPDX-License-Identifier: Unlicensed\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n    function _msgData() internal pure virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance \\u003e= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance \\u003e= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\n            data\\n        );\\n        if (success) {\\n            return returndata;\\n        } else {\\n            if (returndata.length \\u003e 0) {\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) +\\n            (value);\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) -\\n            (value);\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length \\u003e 0) {\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\ncontract Smart_Binary is Context {\\n    using SafeERC20 for IERC20;\\n    struct Node {\\n        uint256 leftDirect;\\n        uint256 rightDirect;\\n        uint256 ALLleftDirect;\\n        uint256 ALLrightDirect;\\n        uint256 todayCountPoint;\\n        uint256 depth;\\n        uint256 childs;\\n        uint256 leftOrrightUpline;\\n        address UplineAddress;\\n        address leftDirectAddress;\\n        address rightDirectAddress;\\n    }\\n    mapping(address =\\u003e Node) private _users;\\n    mapping(uint256 =\\u003e address) private _allUsersAddress;\\n    mapping(uint256 =\\u003e address) private Flash_User;\\n    address private owner;\\n    address private tokenAddress;\\n    address private Last_Reward_Order;\\n    address[] private Lottery_candida;\\n    uint256 private _listingNetwork;\\n    uint256 private _lotteryNetwork;\\n    uint256 private _counter_Flash;\\n    uint256 private _userId;\\n    uint256 private lastRun;\\n    uint256 private All_Payment;\\n    uint256 private _count_Lottery_Candidate;\\n    uint256 private Value_LotteryANDFee;\\n    uint256[] private _randomNumbers;\\n    uint256 private Lock = 0;\\n    uint256 private Max_Point;\\n    uint256 private Max_Lottery_Price;\\n    uint256 private Count_Last_Users;\\n    IERC20 private _depositToken;\\n\\n    constructor() {\\n        owner = _msgSender();\\n        _listingNetwork = 100 * 10**18;\\n        _lotteryNetwork = 2500000 * 10**18;\\n        Max_Point = 50;\\n        Max_Lottery_Price = 25;\\n        lastRun = block.timestamp;\\n        tokenAddress = 0x4DB1B84d1aFcc9c6917B5d5cF30421a2f2Cab4cf; \\n        _depositToken = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\n        Count_Last_Users = 0;\\n        All_Payment = 26200 * 10**18;\\n    }\\n\\n    function Reward_24() public {\\n        require(Lock == 0, \\\"Proccesing\\\");\\n        require(\\n            _users[_msgSender()].todayCountPoint \\u003e 0,\\n            \\\"You Dont Have Any Point Today\\\"\\n        );\\n\\n        require(\\n            block.timestamp \\u003e lastRun + 24 hours,\\n            \\\"The Reward_24 Time Has Not Come\\\"\\n        );\\n\\n        Lock = 1;\\n        Last_Reward_Order = _msgSender();\\n        All_Payment += _depositToken.balanceOf(address(this));\\n\\n        uint256 Value_Reward = Price_Point() * 90;\\n        Value_LotteryANDFee = Price_Point();\\n\\n        uint256 valuePoint = ((Value_Reward)) / Today_Total_Point();\\n        uint256 _counterFlash = _counter_Flash;\\n\\n        uint256 RewardClick = Today_Reward_Writer_Reward() * 10**18;\\n\\n        for (uint256 i = 0; i \\u003c= _userId; i = unsafe_inc(i)) {\\n            Node memory TempNode = _users[_allUsersAddress[i]];\\n            uint256 Point;\\n            uint256 Result = TempNode.leftDirect \\u003c= TempNode.rightDirect\\n                ? TempNode.leftDirect\\n                : TempNode.rightDirect;\\n            if (Result \\u003e 0) {\\n                if (Result \\u003e Max_Point) {\\n                    Point = Max_Point;\\n                    if (TempNode.leftDirect \\u003c Result) {\\n                        TempNode.leftDirect = 0;\\n                        TempNode.rightDirect -= Result;\\n                    } else if (TempNode.rightDirect \\u003c Result) {\\n                        TempNode.leftDirect -= Result;\\n                        TempNode.rightDirect = 0;\\n                    } else {\\n                        TempNode.leftDirect -= Result;\\n                        TempNode.rightDirect -= Result;\\n                    }\\n                    Flash_User[_counterFlash] = _allUsersAddress[i];\\n                    _counterFlash++;\\n                } else {\\n                    Point = Result;\\n                    if (TempNode.leftDirect \\u003c Point) {\\n                        TempNode.leftDirect = 0;\\n                        TempNode.rightDirect -= Point;\\n                    } else if (TempNode.rightDirect \\u003c Point) {\\n                        TempNode.leftDirect -= Point;\\n                        TempNode.rightDirect = 0;\\n                    } else {\\n                        TempNode.leftDirect -= Point;\\n                        TempNode.rightDirect -= Point;\\n                    }\\n                }\\n                TempNode.todayCountPoint = 0;\\n                _users[_allUsersAddress[i]] = TempNode;\\n\\n                if (\\n                    Point * valuePoint \\u003e _depositToken.balanceOf(address(this))\\n                ) {\\n                    _depositToken.safeTransfer(\\n                        _allUsersAddress[i],\\n                        _depositToken.balanceOf(address(this))\\n                    );\\n                } else {\\n                    _depositToken.safeTransfer(\\n                        _allUsersAddress[i],\\n                        Point * valuePoint\\n                    );\\n                }\\n\\n                if (\\n                    Point * 1000000 * 10**18 \\u003c=\\n                    IERC20(tokenAddress).balanceOf(address(this))\\n                ) {\\n                    IERC20(tokenAddress).transfer(\\n                        _allUsersAddress[i],\\n                        Point * 1000000 * 10**18\\n                    );\\n                }\\n            }\\n        }\\n        _counter_Flash = _counterFlash;\\n        lastRun = block.timestamp;\\n\\n        if (RewardClick \\u003c= _depositToken.balanceOf(address(this))) {\\n            _depositToken.safeTransfer(_msgSender(), RewardClick);\\n        }\\n\\n        Lottery_Reward();\\n\\n        _depositToken.safeTransfer(\\n            owner,\\n            _depositToken.balanceOf(address(this))\\n        );\\n\\n        Lock = 0;\\n    }\\n\\n    function X_Emergency_72() public {\\n        require(_msgSender() == owner, \\\"Just Owner Can Run This Order!\\\");\\n        require(\\n            block.timestamp \\u003e lastRun + 72 hours,\\n            \\\"The X_Emergency_72 Time Has Not Come\\\"\\n        );\\n        _depositToken.safeTransfer(\\n            owner,\\n            _depositToken.balanceOf(address(this))\\n        );\\n    }\\n\\n    function Register(address uplineAddress) public {\\n        require(\\n            _users[uplineAddress].childs != 2,\\n            \\\"This address have two directs and could not accept new members!\\\"\\n        );\\n        require(\\n            _msgSender() != uplineAddress,\\n            \\\"You can not enter your own address!\\\"\\n        );\\n        bool testUser = false;\\n        for (uint256 i = 0; i \\u003c= _userId; i = unsafe_inc(i)) {\\n            if (_allUsersAddress[i] == _msgSender()) {\\n                testUser = true;\\n                break;\\n            }\\n        }\\n        require(testUser == false, \\\"This address is already registered!\\\");\\n\\n        bool testUpline = false;\\n        for (uint256 i = 0; i \\u003c= _userId; i = unsafe_inc(i)) {\\n            if (_allUsersAddress[i] == uplineAddress) {\\n                testUpline = true;\\n                break;\\n            }\\n        }\\n        require(testUpline == true, \\\"This Upline address is Not Exist!\\\");\\n\\n        _depositToken.safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            _listingNetwork\\n        );       \\n        _allUsersAddress[_userId] = _msgSender();\\n        _userId++;\\n        uint256 depthChild = _users[uplineAddress].depth + 1;\\n        _users[_msgSender()] = Node(\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            depthChild,\\n            0,\\n            _users[uplineAddress].childs,\\n            uplineAddress,\\n            address(0),\\n            address(0)\\n        );\\n        if (_users[uplineAddress].childs == 0) {\\n            _users[uplineAddress].leftDirect++;\\n            _users[uplineAddress].ALLleftDirect++;\\n            _users[uplineAddress].leftDirectAddress = _msgSender();\\n        } else {\\n            _users[uplineAddress].rightDirect++;\\n            _users[uplineAddress].ALLrightDirect++;\\n            _users[uplineAddress].rightDirectAddress = _msgSender();\\n        }\\n        _users[uplineAddress].childs++;\\n        setTodayPoint(uplineAddress);\\n        address uplineNode = _users[uplineAddress].UplineAddress;\\n        address childNode = uplineAddress;\\n        for (\\n            uint256 j = 0;\\n            j \\u003c _users[uplineAddress].depth;\\n            j = unsafe_inc(j)\\n        ) {\\n            if (_users[childNode].leftOrrightUpline == 0) {\\n                _users[uplineNode].leftDirect++;\\n                _users[uplineNode].ALLleftDirect++;\\n            } else {\\n                _users[uplineNode].rightDirect++;\\n                _users[uplineNode].ALLrightDirect++;\\n            }\\n            setTodayPoint(uplineNode);\\n            childNode = uplineNode;\\n            uplineNode = _users[uplineNode].UplineAddress;\\n        }\\n        IERC20(tokenAddress).transfer(_msgSender(), 100000000 * 10**18);\\n    }\\n\\n    function Lottery_Reward() private {\\n        uint256 Numer_Win = ((Value_LotteryANDFee * 9) / 10**18) /\\n            Max_Lottery_Price;\\n\\n        if (Numer_Win != 0 \\u0026\\u0026 _count_Lottery_Candidate != 0) {\\n            if (_count_Lottery_Candidate \\u003e Numer_Win) {\\n                for (\\n                    uint256 i = 1;\\n                    i \\u003c= _count_Lottery_Candidate;\\n                    i = unsafe_inc(i)\\n                ) {\\n                    _randomNumbers.push(i);\\n                }\\n\\n                for (uint256 i = 1; i \\u003c= Numer_Win; i = unsafe_inc(i)) {\\n                    uint256 randomIndex = uint256(\\n                        keccak256(\\n                            abi.encodePacked(block.timestamp, msg.sender, i)\\n                        )\\n                    ) % _count_Lottery_Candidate;\\n                    uint256 resultNumber = _randomNumbers[randomIndex];\\n\\n                    _randomNumbers[randomIndex] = _randomNumbers[\\n                        _randomNumbers.length - 1\\n                    ];\\n                    _randomNumbers.pop();\\n\\n                    _depositToken.safeTransfer(\\n                        Lottery_candida[resultNumber - 1],\\n                        Max_Lottery_Price * 10**18\\n                    );\\n                }\\n\\n                for (\\n                    uint256 i = 0;\\n                    i \\u003c (_count_Lottery_Candidate - Numer_Win);\\n                    i = unsafe_inc(i)\\n                ) {\\n                    _randomNumbers.pop();\\n                }\\n            } else {\\n                for (\\n                    uint256 i = 0;\\n                    i \\u003c _count_Lottery_Candidate;\\n                    i = unsafe_inc(i)\\n                ) {\\n                    _depositToken.safeTransfer(\\n                        Lottery_candida[i],\\n                        Max_Lottery_Price * 10**18\\n                    );\\n                }\\n            }\\n        }\\n\\n        for (uint256 i = 0; i \\u003c _count_Lottery_Candidate; i = unsafe_inc(i)) {\\n            Lottery_candida.pop();\\n        }\\n\\n        _count_Lottery_Candidate = 0;\\n    }\\n\\n    function Smart_Gift() public {\\n        require(\\n            _users[_msgSender()].todayCountPoint \\u003c 1,\\n            \\\"You Have Point Today\\\"\\n        );\\n        require(\\n            IERC20(tokenAddress).balanceOf(_msgSender()) \\u003e= _lotteryNetwork,\\n            \\\"You Dont Have Enough Smart Binary Token!\\\"\\n        );\\n\\n        bool testUser = false;\\n        for (uint256 i = 0; i \\u003c= _userId; i = unsafe_inc(i)) {\\n            if (_allUsersAddress[i] == _msgSender()) {\\n                testUser = true;\\n                break;\\n            }\\n        }\\n        require(\\n            testUser == true,\\n            \\\"This address is not in Smart Binary Contract!\\\"\\n        );\\n\\n        IERC20(tokenAddress).safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            _lotteryNetwork\\n        );\\n\\n        Lottery_candida.push(_msgSender());\\n        _count_Lottery_Candidate++;\\n    }\\n\\n    function Upload_Old_Users(\\n        address person,\\n        uint256 leftDirect,\\n        uint256 rightDirect,\\n        uint256 ALLleftDirect,\\n        uint256 ALLrightDirect,\\n        uint256 depth,\\n        uint256 childs,\\n        uint256 leftOrrightUpline,\\n        address UplineAddress,\\n        address leftDirectAddress,\\n        address rightDirectAddress\\n    ) public {\\n        require(_msgSender() == owner, \\\"Just Owner Can Run This Order!\\\");\\n        require(Count_Last_Users \\u003c= 262, \\\"The number of old users is over!\\\");\\n\\n        _allUsersAddress[_userId] = person;\\n        _users[_allUsersAddress[_userId]] = Node(\\n            leftDirect,\\n            rightDirect,\\n            ALLleftDirect,\\n            ALLrightDirect,\\n            0,\\n            depth,\\n            childs,\\n            leftOrrightUpline,\\n            UplineAddress,\\n            leftDirectAddress,\\n            rightDirectAddress\\n        );\\n        IERC20(tokenAddress).transfer(person, 100000000 * 10**18);\\n        Count_Last_Users++;\\n        _userId++;\\n    }\\n\\n    function unsafe_inc(uint256 x) private pure returns (uint256) {\\n        unchecked {\\n            return x + 1;\\n        }\\n    }\\n\\n    function User_Information(address UserAddress)\\n        public\\n        view\\n        returns (Node memory)\\n    {\\n        return _users[UserAddress];\\n    }\\n\\n    function Today_Contract_Balance() public view returns (uint256) {\\n        return _depositToken.balanceOf(address(this)) / 10**18;\\n    }\\n\\n    function Price_Point() private view returns (uint256) {\\n        return (_depositToken.balanceOf(address(this))) / 100;\\n    }\\n\\n    function Today_Reward_Balance() public view returns (uint256) {\\n        return (Price_Point() * 90) / 10**18;\\n    }\\n\\n    function Today_Gift_Balance() public view returns (uint256) {\\n        return (Price_Point() * 9) / 10**18;\\n    }\\n\\n    function Today_Reward_Writer_Reward() public view returns (uint256) {\\n        uint256 Remain = ((Price_Point() * 9) / 10**18) % Max_Lottery_Price;\\n        return Remain;\\n    }\\n\\n    function Number_Of_Gift_Candidate() public view returns (uint256) {\\n        return _count_Lottery_Candidate;\\n    }\\n\\n    function All_payment() public view returns (uint256) {\\n        return All_Payment / 10**18;\\n    }\\n\\n    function X_Old_Users_Counter() public view returns (uint256) {\\n        return Count_Last_Users;\\n    }\\n\\n    function Contract_Address() public view returns (address) {\\n        return address(this);\\n    }\\n\\n    function Smart_Binary_Token_Address() public view returns (address) {\\n        return tokenAddress;\\n    }\\n\\n    function Total_Register() public view returns (uint256) {\\n        return _userId;\\n    }\\n\\n    function User_Upline(address Add_Address) public view returns (address) {\\n        return _users[Add_Address].UplineAddress;\\n    }\\n\\n    function Last_Reward_Writer() public view returns (address) {\\n        return Last_Reward_Order;\\n    }\\n\\n    function User_Directs_Address(address Add_Address)\\n        public\\n        view\\n        returns (address, address)\\n    {\\n        return (\\n            _users[Add_Address].leftDirectAddress,\\n            _users[Add_Address].rightDirectAddress\\n        );\\n    }\\n\\n    function Today_User_Point(address Add_Address)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_users[Add_Address].todayCountPoint \\u003e Max_Point) {\\n            return Max_Point;\\n        } else {\\n            return _users[Add_Address].todayCountPoint;\\n        }\\n    }\\n\\n    function Today_User_Left_Right(address Add_Address)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (\\n            _users[Add_Address].leftDirect,\\n            _users[Add_Address].rightDirect\\n        );\\n    }\\n\\n    function All_Time_User_Left_Right(address Add_Address)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (\\n            _users[Add_Address].ALLleftDirect,\\n            _users[Add_Address].ALLrightDirect\\n        );\\n    }\\n\\n    function Today_Total_Point() public view returns (uint256) {\\n        uint256 TPoint;\\n        for (uint256 i = 0; i \\u003c= _userId; i = unsafe_inc(i)) {\\n            uint256 min = _users[_allUsersAddress[i]].leftDirect \\u003c=\\n                _users[_allUsersAddress[i]].rightDirect\\n                ? _users[_allUsersAddress[i]].leftDirect\\n                : _users[_allUsersAddress[i]].rightDirect;\\n\\n            if (min \\u003e Max_Point) {\\n                min = Max_Point;\\n            }\\n            TPoint += min;\\n        }\\n        return TPoint;\\n    }\\n\\n    function Flash_users() public view returns (address[] memory) {\\n        address[] memory items = new address[](_counter_Flash);\\n\\n        for (uint256 i = 0; i \\u003c _counter_Flash; i = unsafe_inc(i)) {\\n            items[i] = Flash_User[i];\\n        }\\n        return items;\\n    }\\n\\n    function Today_Value_Point() public view returns (uint256) {\\n        if (Today_Total_Point() == 0) {\\n            return Today_Reward_Balance();\\n        } else {\\n            return (Price_Point() * 90) / (Today_Total_Point() * 10**18);\\n        }\\n    }\\n\\n    function setTodayPoint(address userAddress) private {\\n        uint256 min = _users[userAddress].leftDirect \\u003c=\\n            _users[userAddress].rightDirect\\n            ? _users[userAddress].leftDirect\\n            : _users[userAddress].rightDirect;\\n        if (min \\u003e 0) {\\n            _users[userAddress].todayCountPoint = min;\\n        }\\n    }\\n  \\n    function User_Exist(address Useraddress)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        bool test = false;\\n        for (uint256 i = 0; i \\u003c= _userId; i = unsafe_inc(i)) {\\n            if (_allUsersAddress[i] == Useraddress) {\\n                test = true;\\n            }\\n        }\\n        if (test) {\\n            return \\\"YES!\\\";\\n        } else {\\n            return \\\"NO!\\\";\\n        }\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"All_Contract_Payment\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"All_Gift_Winner\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"All_Register\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"All_Reward_12_Payment\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"All_User_Address\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Just_Contract_Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Just_Gift_Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Just_Reward_12_Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Last_Reward_12_Writer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Last_Total_Point\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Last_Value_Point\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Up\",\"type\":\"address\"}],\"name\":\"Register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Reward_12_Report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"YourNumber\",\"type\":\"uint8\"}],\"name\":\"Smart_Gift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"}],\"name\":\"Smart_Import\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Smart_Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Today_Contract_InPut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Today_Gift_Candida_Address\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Today_Gift_Winner_Address\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Today_Register_Address\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Today_Register_Number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Today_Reward_12_Writer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"}],\"name\":\"User_All_Time_Left_Right\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"}],\"name\":\"User_All_Time_Point\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"}],\"name\":\"User_Directs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"}],\"name\":\"User_Info\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"AL\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"AR\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"LT\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"RT\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"XI\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"YY\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"UP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"PO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"QO\",\"type\":\"address\"}],\"internalType\":\"struct Base.Node\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"}],\"name\":\"User_Upline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Emergency_72\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Import_Fast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"U\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"V\",\"type\":\"uint16\"}],\"name\":\"_Old_Point\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Read_IPFS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Read_Note\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_SBT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"S\",\"type\":\"address\"}],\"name\":\"_S_Coin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"OW\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"AL\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"AR\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"L\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"R\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"C\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"LR\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"UA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"RA\",\"type\":\"address\"}],\"name\":\"_Upload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"I\",\"type\":\"string\"}],\"name\":\"_Write_IPFS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"N\",\"type\":\"string\"}],\"name\":\"_Write_Note\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Smart_Binance_Pro", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ef7e6be40b9bce3c2124837e48c1f2140889908567c6f7f5a1ab1292601fd5e0"}