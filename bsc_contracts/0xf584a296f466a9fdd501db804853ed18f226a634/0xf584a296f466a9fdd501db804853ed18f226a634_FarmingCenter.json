{"SourceCode": "// File: openzeppelin-solidity/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n// File: contracts/lib/Ownable.sol\r\n\r\npragma solidity >=0.4.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() public {}\r\n\r\n    function initializeOwner(address ownerAddr) internal {\r\n        _owner = ownerAddr;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity >=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interface/IFarm.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IFarm {\r\n    function initialize(address _owner, IBEP20 _sbf, address taxVault) external;\r\n    function startFarmingPeriod(uint256 farmingPeriod, uint256 startHeight, uint256 sbfRewardPerBlock) external;\r\n    function addPool(uint256 _allocPoint, IBEP20 _lpToken, uint256 maxTaxPercent, uint256 miniTaxFreeDay, bool _withUpdate) external;\r\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;\r\n\r\n    function deposit(uint256 _pid, uint256 _amount, address _userAddr) external;\r\n    function withdraw(uint256 _pid, uint256 _amount, address _userAddr) external;\r\n    function emergencyWithdraw(uint256 _pid, uint256 _amount, address _userAddr) external ;\r\n    function redeemSBF(address _recipient) external;\r\n\r\n    function pendingSBF(uint256 _pid, address _user) external view returns (uint256);\r\n    function lpSupply(uint256 _pid) external view returns (uint256);\r\n\r\n    function stopFarmingPhase() external;\r\n}\r\n\r\n// File: contracts/interface/IMintBurnToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IMintBurnToken {\r\n\r\n    function mintTo(address to, uint256 amount) external returns (bool);\r\n\r\n    function burn(uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, 'SafeMath: modulo by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}('');\r\n        require(success, 'Address: unable to send value, recipient may have reverted');\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, 'Address: low-level call failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), 'Address: call to non-contract');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            'SafeBEP20: approve from non-zero to non-zero allowance'\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            'SafeBEP20: decreased allowance below zero'\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/FarmingCenter.sol\r\n\r\npragma solidity 0.6.12;\r\n//pragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FarmingCenter is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    struct FarmingInfo {\r\n        address userAddr;\r\n        uint256 poolID;\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n        uint256 farmingPhaseAmount;\r\n    }\r\n    \r\n    uint256 constant public POOL_ID_SBF = 0;\r\n    uint256 constant public POOL_ID_LP_LBNB_BNB = 1;\r\n    uint256 constant public POOL_ID_LP_SBF_BUSD = 2;\r\n\r\n    uint256 constant public ONE_DAY = 86400;\r\n\r\n    bool public initialized;\r\n    bool public pool_initialized;\r\n\r\n    address public aSBF;\r\n    address public aLBNB2BNBLP;\r\n    address public aSBF2BUSDLP;\r\n\r\n    uint256 public farmingIdx;\r\n    mapping(uint256 => FarmingInfo) public farmingInfoMap;\r\n    mapping(address => mapping(uint256 => uint256[])) public userToFarmingIDsMap;\r\n    mapping(uint256 => uint256) public poolAllocPoints;\r\n\r\n    IBEP20 public sbf;\r\n    IBEP20 public lpLBNB2BNB;\r\n    IBEP20 public lpSBF2BUSD;\r\n\r\n    IFarm[4] public farmingPhases;\r\n\r\n    uint256 public startBlock;\r\n    uint256 public endBlock;\r\n    uint256 public sbfRewardPerBlock;\r\n\r\n    event Deposit(address indexed userInfo, uint256 indexed pid, uint256 amount, uint256 reward);\r\n    event Withdraw(address indexed userInfo, uint256 indexed pid, uint256 amount, uint256 reward);\r\n    event WithdrawTax(address indexed lpAddr, address indexed userAddr, uint256 amount);\r\n    event EmergencyWithdraw(address indexed userInfo, uint256 indexed pid, uint256 amount);\r\n\r\n    constructor() public {}\r\n\r\n    function initialize(\r\n        address _owner,\r\n        address _aSBF,\r\n        address _aLBNB2BNBLP,\r\n        address _aSBF2BUSDLP,\r\n\r\n        IBEP20 _sbf,\r\n        IBEP20 _lpLBNB2BNB,\r\n        IBEP20 _lpSBF2BUSD,\r\n\r\n        IFarm _farmingPhase1,\r\n        IFarm _farmingPhase2,\r\n        IFarm _farmingPhase3,\r\n        IFarm _farmingPhase4,\r\n        address _taxVault\r\n    ) public {\r\n        require(!initialized, \"already initialized\");\r\n        initialized = true;\r\n\r\n        super.initializeOwner(_owner);\r\n\r\n        aSBF = _aSBF;\r\n        aLBNB2BNBLP = _aLBNB2BNBLP;\r\n        aSBF2BUSDLP = _aSBF2BUSDLP;\r\n\r\n        sbf = _sbf;\r\n        lpLBNB2BNB = _lpLBNB2BNB;\r\n        lpSBF2BUSD = _lpSBF2BUSD;\r\n\r\n        farmingPhases[0] = _farmingPhase1;\r\n        farmingPhases[1] = _farmingPhase2;\r\n        farmingPhases[2] = _farmingPhase3;\r\n        farmingPhases[3] = _farmingPhase4;\r\n\r\n        for(uint256 i=0;i<4;i++){\r\n            farmingPhases[i].initialize(address(this), _sbf, _taxVault);\r\n        }\r\n    }\r\n\r\n    function initPools(uint256[] calldata _allocPoints, uint256[] calldata _maxTaxPercents, uint256[] calldata _miniTaxFreeDays, bool _withUpdate) external onlyOwner {\r\n        require(initialized, \"farm is not initialized\");\r\n        require(!pool_initialized, \"farms are already initialized\");\r\n        pool_initialized = true;\r\n\r\n        require(_allocPoints.length==3&&_maxTaxPercents.length==3&&_miniTaxFreeDays.length==3, \"wrong array length\");\r\n\r\n        IBEP20[3] memory LPs = [sbf, lpLBNB2BNB, lpSBF2BUSD];\r\n        for(uint256 i=0;i<3;i++){\r\n            poolAllocPoints[i] = _allocPoints[i];\r\n            for(uint256 j=0;j<4;j++){\r\n                farmingPhases[j].addPool(_allocPoints[i], LPs[i],_maxTaxPercents[i],_miniTaxFreeDays[i],_withUpdate);\r\n            }\r\n        }\r\n    }\r\n\r\n    function startFarmingPeriod(uint256 _farmingPeriod, uint256 _startHeight, uint256 _sbfRewardPerBlock) public onlyOwner {\r\n        require(pool_initialized, \"farm pools are not initialized\");\r\n        require(block.number >= endBlock, \"start farming twice\");\r\n\r\n        startBlock = _startHeight;\r\n        endBlock = _startHeight.add(_farmingPeriod);\r\n\r\n        uint256 totalSBFAmount = _farmingPeriod.mul(_sbfRewardPerBlock);\r\n        sbf.safeTransferFrom(msg.sender, address(this), totalSBFAmount);\r\n\r\n        sbf.approve(address(farmingPhases[0]), totalSBFAmount.mul(10).div(100));\r\n        sbf.approve(address(farmingPhases[1]), totalSBFAmount.mul(30).div(100));\r\n        sbf.approve(address(farmingPhases[2]), totalSBFAmount.mul(30).div(100));\r\n        sbf.approve(address(farmingPhases[3]), totalSBFAmount.mul(30).div(100));\r\n\r\n        farmingPhases[0].startFarmingPeriod(_farmingPeriod, _startHeight, _sbfRewardPerBlock.mul(10).div(100));\r\n        farmingPhases[1].startFarmingPeriod(_farmingPeriod, _startHeight, _sbfRewardPerBlock.mul(30).div(100));\r\n        farmingPhases[2].startFarmingPeriod(_farmingPeriod, _startHeight, _sbfRewardPerBlock.mul(30).div(100));\r\n        farmingPhases[3].startFarmingPeriod(_farmingPeriod, _startHeight, _sbfRewardPerBlock.mul(30).div(100));\r\n\r\n        sbfRewardPerBlock = _sbfRewardPerBlock;\r\n    }\r\n\r\n    /*\r\n     pid 0 -> sbf pool\r\n     pid 1 -> lbnb2bnb pool\r\n     pid 2 -> sbf2busd pool\r\n    */\r\n    function set(uint256 _pid, uint256 _allocPoints, bool _withUpdate) public onlyOwner {\r\n        poolAllocPoints[_pid] = _allocPoints;\r\n        for(uint256 i=0;i<4;i++){\r\n            farmingPhases[i].set(_pid, _allocPoints, _withUpdate);\r\n        }\r\n    }\r\n\r\n    function redeemSBF() public onlyOwner {\r\n        require(block.number>=endBlock, \"farming is not end\");\r\n        for(uint256 i=0;i<4;i++){\r\n            farmingPhases[i].redeemSBF(msg.sender);\r\n        }\r\n    }\r\n\r\n    function pendingSBF(uint256 _pid, address _user) external view returns (uint256) {\r\n        return farmingPhases[0].pendingSBF(_pid, _user).\r\n        add(farmingPhases[1].pendingSBF(_pid, _user)).\r\n        add(farmingPhases[2].pendingSBF(_pid, _user)).\r\n        add(farmingPhases[3].pendingSBF(_pid, _user));\r\n    }\r\n\r\n    function getUserFarmingIdxs(uint256 _pid, address _user) external view returns(uint256[] memory) {\r\n        return userToFarmingIDsMap[_user][_pid];\r\n    }\r\n\r\n    function farmingSpeed(uint256 _pid, address _user) external view returns (uint256) {\r\n        uint256[] memory farmingIdxs = userToFarmingIDsMap[_user][_pid];\r\n        uint256 farmingIdxsLength = farmingIdxs.length;\r\n\r\n        uint256[] memory phaseAmountArray = new uint256[](4);\r\n        for (uint256 idx=0;idx<farmingIdxsLength;idx++){\r\n            FarmingInfo memory farmingInfo = farmingInfoMap[farmingIdxs[idx]];\r\n            if (farmingInfo.poolID != _pid) {\r\n                continue;\r\n            }\r\n            phaseAmountArray[farmingInfo.farmingPhaseAmount-1] = phaseAmountArray[farmingInfo.farmingPhaseAmount-1].add(farmingInfo.amount);\r\n        }\r\n        uint256 totalAllocPoints = poolAllocPoints[0].add(poolAllocPoints[1]).add(poolAllocPoints[2]);\r\n        uint256 poolSBFRewardPerBlock = sbfRewardPerBlock.mul(poolAllocPoints[_pid]).div(totalAllocPoints);\r\n\r\n        uint256 totalPhaseAmount;\r\n        uint256 accumulatePhaseAmount = phaseAmountArray[3];\r\n        if (farmingPhases[3].lpSupply(_pid)!=0) {\r\n            totalPhaseAmount = totalPhaseAmount.add(accumulatePhaseAmount.mul(30).mul(poolSBFRewardPerBlock).div(farmingPhases[3].lpSupply(_pid)));\r\n        }\r\n\r\n        accumulatePhaseAmount = accumulatePhaseAmount.add(phaseAmountArray[2]);\r\n        if (farmingPhases[2].lpSupply(_pid)!=0) {\r\n            totalPhaseAmount = totalPhaseAmount.add(accumulatePhaseAmount.mul(30).mul(poolSBFRewardPerBlock).div(farmingPhases[2].lpSupply(_pid)));\r\n        }\r\n\r\n        accumulatePhaseAmount = accumulatePhaseAmount.add(phaseAmountArray[1]);\r\n        if (farmingPhases[1].lpSupply(_pid)!=0) {\r\n            totalPhaseAmount = totalPhaseAmount.add(accumulatePhaseAmount.mul(30).mul(poolSBFRewardPerBlock).div(farmingPhases[1].lpSupply(_pid)));\r\n        }\r\n\r\n        accumulatePhaseAmount = accumulatePhaseAmount.add(phaseAmountArray[0]);\r\n        if (farmingPhases[0].lpSupply(_pid)!=0) {\r\n            totalPhaseAmount = totalPhaseAmount.add(accumulatePhaseAmount.mul(10).mul(poolSBFRewardPerBlock).div(farmingPhases[0].lpSupply(_pid)));\r\n        }\r\n\r\n        return totalPhaseAmount.div(100);\r\n    }\r\n\r\n    function depositSBFPool(uint256 _amount) public {\r\n        if (_amount>0){\r\n            farmingInfoMap[farmingIdx] = FarmingInfo({\r\n                userAddr: msg.sender,\r\n                poolID: POOL_ID_SBF,\r\n                amount: _amount,\r\n                timestamp: block.timestamp,\r\n                farmingPhaseAmount: 1\r\n            });\r\n            userToFarmingIDsMap[msg.sender][POOL_ID_SBF].push(farmingIdx);\r\n            farmingIdx++;\r\n        }\r\n\r\n        sbf.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n\r\n        farmingPhases[0].deposit(POOL_ID_SBF, _amount, msg.sender);\r\n        IMintBurnToken(aSBF).mintTo(msg.sender, _amount);\r\n    }\r\n\r\n    function withdrawSBFPool(uint256 _amount, uint256 _farmingIdx) public {\r\n        FarmingInfo storage farmingInfo = farmingInfoMap[_farmingIdx];\r\n        require(farmingInfo.userAddr==msg.sender, \"can't withdraw other farming\");\r\n        require(farmingInfo.poolID==POOL_ID_SBF, \"pool id mismatch\");\r\n        require(farmingInfo.amount>=_amount, \"withdraw amount too much\");\r\n\r\n        IBEP20(aSBF).transferFrom(msg.sender, address(this), _amount);\r\n        IMintBurnToken(aSBF).burn(_amount);\r\n\r\n        if (farmingInfo.farmingPhaseAmount >= 4) {\r\n            farmingPhases[3].withdraw(POOL_ID_SBF, farmingInfo.amount, farmingInfo.userAddr);\r\n        }\r\n        if (farmingInfo.farmingPhaseAmount >= 3) {\r\n            farmingPhases[2].withdraw(POOL_ID_SBF, farmingInfo.amount, farmingInfo.userAddr);\r\n        }\r\n        if (farmingInfo.farmingPhaseAmount >= 2) {\r\n            farmingPhases[1].withdraw(POOL_ID_SBF, farmingInfo.amount, farmingInfo.userAddr);\r\n        }\r\n        farmingPhases[0].withdraw(POOL_ID_SBF, _amount, farmingInfo.userAddr);\r\n\r\n        if (farmingInfo.amount == _amount) {\r\n            deleteUserFarmingIDs(_farmingIdx, POOL_ID_SBF);\r\n            delete farmingInfoMap[_farmingIdx];\r\n        } else {\r\n            farmingInfo.amount = farmingInfo.amount.sub(_amount);\r\n            farmingInfo.farmingPhaseAmount = 1;\r\n            farmingInfo.timestamp = block.timestamp;\r\n        }\r\n        sbf.safeTransfer(address(msg.sender), _amount);\r\n    }\r\n\r\n    function batchWithdrawSBFPool(uint256[] memory _farmingIdxs) public {\r\n        for(uint256 idx=0;idx<_farmingIdxs.length;idx++){\r\n            FarmingInfo memory farmingInfo = farmingInfoMap[_farmingIdxs[idx]];\r\n            withdrawSBFPool(farmingInfo.amount, _farmingIdxs[idx]);\r\n        }\r\n    }\r\n\r\n    function depositLBNB2BNBPool(uint256 _amount) public {\r\n        if (_amount>0){\r\n            farmingInfoMap[farmingIdx] = FarmingInfo({\r\n                userAddr: msg.sender,\r\n                poolID: POOL_ID_LP_LBNB_BNB,\r\n                amount: _amount,\r\n                timestamp: block.timestamp,\r\n                farmingPhaseAmount: 4\r\n            });\r\n            userToFarmingIDsMap[msg.sender][POOL_ID_LP_LBNB_BNB].push(farmingIdx);\r\n            farmingIdx++;\r\n\r\n            lpLBNB2BNB.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        }\r\n\r\n        farmingPhases[0].deposit(POOL_ID_LP_LBNB_BNB, _amount, msg.sender);\r\n        farmingPhases[1].deposit(POOL_ID_LP_LBNB_BNB, _amount, msg.sender);\r\n        farmingPhases[2].deposit(POOL_ID_LP_LBNB_BNB, _amount, msg.sender);\r\n        farmingPhases[3].deposit(POOL_ID_LP_LBNB_BNB, _amount, msg.sender);\r\n        \r\n        IMintBurnToken(aLBNB2BNBLP).mintTo(msg.sender, _amount);\r\n    }\r\n\r\n    function withdrawLBNB2BNBPool(uint256 _amount, uint256 _farmingIdx) public {\r\n        FarmingInfo storage farmingInfo = farmingInfoMap[_farmingIdx];\r\n        require(farmingInfo.userAddr==msg.sender, \"can't withdraw other farming\");\r\n        require(farmingInfo.poolID==POOL_ID_LP_LBNB_BNB, \"pool id mismatch\");\r\n        require(_amount>0, \"withdraw amount must be positive\");\r\n        require(farmingInfo.amount>=_amount, \"withdraw amount too much\");\r\n        \r\n        IBEP20(aLBNB2BNBLP).transferFrom(msg.sender, address(this), _amount);\r\n        IMintBurnToken(aLBNB2BNBLP).burn(_amount);\r\n\r\n        farmingPhases[3].withdraw(POOL_ID_LP_LBNB_BNB, _amount, msg.sender);\r\n        farmingPhases[2].withdraw(POOL_ID_LP_LBNB_BNB, _amount, msg.sender);\r\n        farmingPhases[1].withdraw(POOL_ID_LP_LBNB_BNB, _amount, msg.sender);\r\n        farmingPhases[0].withdraw(POOL_ID_LP_LBNB_BNB, _amount, msg.sender);\r\n\r\n        lpLBNB2BNB.safeTransfer(msg.sender, _amount);\r\n\r\n        if (farmingInfo.amount == _amount) {\r\n            deleteUserFarmingIDs(_farmingIdx, POOL_ID_LP_LBNB_BNB);\r\n            delete farmingInfoMap[_farmingIdx];\r\n        } else {\r\n            farmingInfo.amount = farmingInfo.amount.sub(_amount);\r\n            farmingInfo.timestamp = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function batchWithdrawLBNB2BNBPool(uint256[] memory _farmingIdxs) public {\r\n        for(uint256 idx=0;idx<_farmingIdxs.length;idx++){\r\n            FarmingInfo memory farmingInfo = farmingInfoMap[_farmingIdxs[idx]];\r\n            withdrawLBNB2BNBPool(farmingInfo.amount, _farmingIdxs[idx]);\r\n        }\r\n    }\r\n\r\n    function depositSBF2BUSDPool(uint256 _amount) public {\r\n        if (_amount>0){\r\n            farmingInfoMap[farmingIdx] = FarmingInfo({\r\n                userAddr: msg.sender,\r\n                poolID: POOL_ID_LP_SBF_BUSD,\r\n                amount: _amount,\r\n                timestamp: block.timestamp,\r\n                farmingPhaseAmount: 3\r\n            });\r\n            userToFarmingIDsMap[msg.sender][POOL_ID_LP_SBF_BUSD].push(farmingIdx);\r\n            farmingIdx++;\r\n        }\r\n\r\n        lpSBF2BUSD.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n\r\n        farmingPhases[0].deposit(POOL_ID_LP_SBF_BUSD, _amount, msg.sender);\r\n        farmingPhases[1].deposit(POOL_ID_LP_SBF_BUSD, _amount, msg.sender);\r\n        farmingPhases[2].deposit(POOL_ID_LP_SBF_BUSD, _amount, msg.sender);\r\n\r\n        IMintBurnToken(aSBF2BUSDLP).mintTo(msg.sender, _amount);\r\n    }\r\n\r\n    function withdrawSBF2BUSDPool(uint256 _amount, uint256 _farmingIdx) public {\r\n        FarmingInfo storage farmingInfo = farmingInfoMap[_farmingIdx];\r\n        require(farmingInfo.userAddr==msg.sender, \"can't withdraw other farming\");\r\n        require(farmingInfo.poolID==POOL_ID_LP_SBF_BUSD, \"pool id mismatch\");\r\n        require(_amount>0, \"withdraw amount must be positive\");\r\n        require(farmingInfo.amount>=_amount, \"withdraw amount too much\");\r\n\r\n        IBEP20(aSBF2BUSDLP).transferFrom(msg.sender, address(this), _amount);\r\n        IMintBurnToken(aSBF2BUSDLP).burn(_amount);\r\n\r\n        if (farmingInfo.farmingPhaseAmount >= 4) {\r\n            farmingPhases[3].withdraw(POOL_ID_LP_SBF_BUSD, farmingInfo.amount, msg.sender);\r\n        }\r\n        farmingPhases[2].withdraw(POOL_ID_LP_SBF_BUSD, _amount, msg.sender);\r\n        farmingPhases[1].withdraw(POOL_ID_LP_SBF_BUSD, _amount, msg.sender);\r\n        farmingPhases[0].withdraw(POOL_ID_LP_SBF_BUSD, _amount, msg.sender);\r\n\r\n        lpSBF2BUSD.safeTransfer(msg.sender, _amount);\r\n\r\n        if (farmingInfo.amount == _amount) {\r\n            deleteUserFarmingIDs(_farmingIdx, POOL_ID_LP_SBF_BUSD);\r\n            delete farmingInfoMap[_farmingIdx];\r\n        } else {\r\n            farmingInfo.amount = farmingInfo.amount.sub(_amount);\r\n            farmingInfo.farmingPhaseAmount = 3;\r\n            farmingInfo.timestamp = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function batchWithdrawSBF2BUSDPool(uint256[] memory _farmingIdxs) public {\r\n        for(uint256 idx=0;idx<_farmingIdxs.length;idx++){\r\n            FarmingInfo memory farmingInfo = farmingInfoMap[_farmingIdxs[idx]];\r\n            withdrawSBF2BUSDPool(farmingInfo.amount, _farmingIdxs[idx]);\r\n        }\r\n    }\r\n\r\n    function harvest(uint256 _pid) public {\r\n        require(_pid==POOL_ID_SBF|| _pid==POOL_ID_LP_SBF_BUSD|| _pid==POOL_ID_LP_LBNB_BNB, \"wrong pool id\");\r\n        for(uint256 i=0;i<4;i++){\r\n            farmingPhases[i].deposit(_pid, 0, msg.sender);\r\n        }\r\n    }\r\n\r\n    function emergencyWithdrawSBF(uint256[] memory _farmingIdxs) public {\r\n        for(uint256 idx=0;idx<_farmingIdxs.length;idx++){\r\n            FarmingInfo memory farmingInfo = farmingInfoMap[_farmingIdxs[idx]];\r\n            require(farmingInfo.userAddr==msg.sender, \"can't withdraw other farming\");\r\n            require(farmingInfo.poolID==POOL_ID_SBF, \"pool id mismatch\");\r\n\r\n            IBEP20(aSBF).transferFrom(msg.sender, address(this), farmingInfo.amount);\r\n            IMintBurnToken(aSBF).burn(farmingInfo.amount);\r\n\r\n            for(uint256 farmingPhaseIdx=0; farmingPhaseIdx<farmingInfo.farmingPhaseAmount; farmingPhaseIdx++) {\r\n                farmingPhases[farmingPhaseIdx].emergencyWithdraw(POOL_ID_SBF, farmingInfo.amount, msg.sender);\r\n            }\r\n            sbf.safeTransfer(address(msg.sender), farmingInfo.amount);\r\n            emit EmergencyWithdraw(msg.sender, POOL_ID_SBF, farmingInfo.amount);\r\n            delete farmingInfoMap[_farmingIdxs[idx]];\r\n            deleteUserFarmingIDs(_farmingIdxs[idx], POOL_ID_SBF);\r\n        }\r\n    }\r\n\r\n    function emergencyWithdrawLBNB2BNBLP(uint256[] memory _farmingIdxs) public {\r\n        for(uint256 idx=0;idx<_farmingIdxs.length;idx++){\r\n            FarmingInfo memory farmingInfo = farmingInfoMap[_farmingIdxs[idx]];\r\n            require(farmingInfo.userAddr==msg.sender, \"can't withdraw other farming\");\r\n            require(farmingInfo.poolID==POOL_ID_LP_LBNB_BNB, \"pool id mismatch\");\r\n\r\n            IBEP20(aLBNB2BNBLP).transferFrom(msg.sender, address(this), farmingInfo.amount);\r\n            IMintBurnToken(aLBNB2BNBLP).burn(farmingInfo.amount);\r\n\r\n            for(uint256 farmingPhaseIdx=0; farmingPhaseIdx<farmingInfo.farmingPhaseAmount; farmingPhaseIdx++) {\r\n                farmingPhases[farmingPhaseIdx].emergencyWithdraw(POOL_ID_LP_LBNB_BNB, farmingInfo.amount, msg.sender);\r\n            }\r\n            lpLBNB2BNB.safeTransfer(address(msg.sender), farmingInfo.amount);\r\n            emit EmergencyWithdraw(msg.sender, POOL_ID_LP_LBNB_BNB, farmingInfo.amount);\r\n            delete farmingInfoMap[_farmingIdxs[idx]];\r\n            deleteUserFarmingIDs(_farmingIdxs[idx], POOL_ID_LP_LBNB_BNB);\r\n        }\r\n    }\r\n\r\n    function emergencyWithdrawSBF2BUSDLP(uint256[] memory _farmingIdxs) public {\r\n        for(uint256 idx=0;idx<_farmingIdxs.length;idx++){\r\n            FarmingInfo memory farmingInfo = farmingInfoMap[_farmingIdxs[idx]];\r\n            require(farmingInfo.userAddr==msg.sender, \"can't withdraw other farming\");\r\n            require(farmingInfo.poolID==POOL_ID_LP_SBF_BUSD, \"pool id mismatch\");\r\n\r\n            IBEP20(aSBF2BUSDLP).transferFrom(msg.sender, address(this), farmingInfo.amount);\r\n            IMintBurnToken(aSBF2BUSDLP).burn(farmingInfo.amount);\r\n\r\n            for(uint256 farmingPhaseIdx=0; farmingPhaseIdx<farmingInfo.farmingPhaseAmount; farmingPhaseIdx++) {\r\n                farmingPhases[farmingPhaseIdx].emergencyWithdraw(POOL_ID_LP_SBF_BUSD, farmingInfo.amount, msg.sender);\r\n            }\r\n            lpSBF2BUSD.safeTransfer(address(msg.sender), farmingInfo.amount);\r\n            emit EmergencyWithdraw(msg.sender, POOL_ID_LP_SBF_BUSD, farmingInfo.amount);\r\n            delete farmingInfoMap[_farmingIdxs[idx]];\r\n            deleteUserFarmingIDs(_farmingIdxs[idx], POOL_ID_LP_SBF_BUSD);\r\n        }\r\n    }\r\n\r\n    function deleteUserFarmingIDs(uint256 _idx, uint256 _pid) internal {\r\n        uint256[] storage farmingIdxs = userToFarmingIDsMap[msg.sender][_pid];\r\n        uint256 farmingIdxsLength = farmingIdxs.length;\r\n        for (uint256 idx=0;idx<farmingIdxsLength;idx++){\r\n            if (farmingIdxs[idx]==_idx) {\r\n                farmingIdxs[idx]=farmingIdxs[farmingIdxsLength-1];\r\n                farmingIdxs.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function migrateSBFPoolAgeFarming(uint256 _farmingIdx) public {\r\n        bool needMigration = false;\r\n        FarmingInfo storage farmingInfo = farmingInfoMap[_farmingIdx];\r\n        require(farmingInfo.userAddr!=address(0x0), \"empty farming info\");\r\n        require(farmingInfo.poolID==POOL_ID_SBF, \"pool id mismatch\");\r\n        if (block.timestamp-farmingInfo.timestamp>7*ONE_DAY&&farmingInfo.farmingPhaseAmount<2) {\r\n            farmingPhases[1].deposit(POOL_ID_SBF, farmingInfo.amount, farmingInfo.userAddr);\r\n            farmingInfo.farmingPhaseAmount = 2;\r\n            needMigration = true;\r\n        }\r\n        if (block.timestamp-farmingInfo.timestamp>30*ONE_DAY&&farmingInfo.farmingPhaseAmount<3) {\r\n            farmingPhases[2].deposit(POOL_ID_SBF, farmingInfo.amount, farmingInfo.userAddr);\r\n            farmingInfo.farmingPhaseAmount = 3;\r\n            needMigration = true;\r\n        }\r\n        if (block.timestamp-farmingInfo.timestamp>60*ONE_DAY&&farmingInfo.farmingPhaseAmount<4) {\r\n            farmingPhases[3].deposit(POOL_ID_SBF, farmingInfo.amount, farmingInfo.userAddr);\r\n            farmingInfo.farmingPhaseAmount = 4;\r\n            needMigration = true;\r\n        }\r\n        require(needMigration, \"no need to migration\");\r\n    }\r\n\r\n    function batchMigrateSBFPoolAgeFarming(uint256[] memory _farmingIdxs) public {\r\n        for(uint256 idx=0;idx<_farmingIdxs.length;idx++){\r\n            migrateSBFPoolAgeFarming(_farmingIdxs[idx]);\r\n        }\r\n    }\r\n\r\n    function migrateSBF2BUSDPoolAgeFarming(uint256 _farmingIdx) public {\r\n        bool needMigration = false;\r\n        FarmingInfo storage farmingInfo = farmingInfoMap[_farmingIdx];\r\n        require(farmingInfo.userAddr!=address(0x0), \"empty farming info\");\r\n        require(farmingInfo.poolID==POOL_ID_LP_SBF_BUSD, \"pool id mismatch\");\r\n        if (block.timestamp-farmingInfo.timestamp>60*ONE_DAY&&farmingInfo.farmingPhaseAmount<4) {\r\n            farmingPhases[3].deposit(POOL_ID_LP_SBF_BUSD, farmingInfo.amount, farmingInfo.userAddr);\r\n            farmingInfo.farmingPhaseAmount = 4;\r\n            needMigration = true;\r\n        }\r\n        require(needMigration, \"no need to migration\");\r\n    }\r\n\r\n    function batchMigrateSBF2BUSDPoolAgeFarming(uint256[] memory _farmingIdxs) public {\r\n        for(uint256 idx=0;idx<_farmingIdxs.length;idx++){\r\n            migrateSBF2BUSDPoolAgeFarming(_farmingIdxs[idx]);\r\n        }\r\n    }\r\n\r\n    function stopFarming() public onlyOwner {\r\n        for(uint256 i=0;i<4;i++){\r\n            farmingPhases[i].stopFarmingPhase();\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userInfo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userInfo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userInfo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTax\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_ID_LP_LBNB_BNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_ID_LP_SBF_BUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_ID_SBF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aLBNB2BNBLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aSBF\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aSBF2BUSDLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_farmingIdxs\",\"type\":\"uint256[]\"}],\"name\":\"batchMigrateSBF2BUSDPoolAgeFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_farmingIdxs\",\"type\":\"uint256[]\"}],\"name\":\"batchMigrateSBFPoolAgeFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_farmingIdxs\",\"type\":\"uint256[]\"}],\"name\":\"batchWithdrawLBNB2BNBPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_farmingIdxs\",\"type\":\"uint256[]\"}],\"name\":\"batchWithdrawSBF2BUSDPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_farmingIdxs\",\"type\":\"uint256[]\"}],\"name\":\"batchWithdrawSBFPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositLBNB2BNBPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositSBF2BUSDPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositSBFPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_farmingIdxs\",\"type\":\"uint256[]\"}],\"name\":\"emergencyWithdrawLBNB2BNBLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_farmingIdxs\",\"type\":\"uint256[]\"}],\"name\":\"emergencyWithdrawSBF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_farmingIdxs\",\"type\":\"uint256[]\"}],\"name\":\"emergencyWithdrawSBF2BUSDLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farmingInfoMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"farmingPhaseAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farmingPhases\",\"outputs\":[{\"internalType\":\"contract IFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"farmingSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserFarmingIdxs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxTaxPercents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_miniTaxFreeDays\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"initPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aSBF\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aLBNB2BNBLP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aSBF2BUSDLP\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_sbf\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpLBNB2BNB\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpSBF2BUSD\",\"type\":\"address\"},{\"internalType\":\"contract IFarm\",\"name\":\"_farmingPhase1\",\"type\":\"address\"},{\"internalType\":\"contract IFarm\",\"name\":\"_farmingPhase2\",\"type\":\"address\"},{\"internalType\":\"contract IFarm\",\"name\":\"_farmingPhase3\",\"type\":\"address\"},{\"internalType\":\"contract IFarm\",\"name\":\"_farmingPhase4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxVault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpLBNB2BNB\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSBF2BUSD\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farmingIdx\",\"type\":\"uint256\"}],\"name\":\"migrateSBF2BUSDPoolAgeFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farmingIdx\",\"type\":\"uint256\"}],\"name\":\"migrateSBFPoolAgeFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSBF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolAllocPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemSBF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbf\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sbfRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farmingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sbfRewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"startFarmingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userToFarmingIDsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_farmingIdx\",\"type\":\"uint256\"}],\"name\":\"withdrawLBNB2BNBPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_farmingIdx\",\"type\":\"uint256\"}],\"name\":\"withdrawSBF2BUSDPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_farmingIdx\",\"type\":\"uint256\"}],\"name\":\"withdrawSBFPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FarmingCenter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://611fa4ea5cc4b937ea40d0bfebfb2f6dfdb33ccdcc82a9be60e30cb5b14f4dc0"}