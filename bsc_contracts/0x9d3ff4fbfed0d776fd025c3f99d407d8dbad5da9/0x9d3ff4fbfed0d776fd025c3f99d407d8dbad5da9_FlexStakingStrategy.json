{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract MulticallUpgradeable is Initializable {\\n    function __Multicall_init() internal onlyInitializing {\\n    }\\n\\n    function __Multicall_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = AddressUpgradeable.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/core/stakings/FlexStakingStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nimport { ITreasury } from \\\"../../interfaces/ITreasury.sol\\\";\\r\\nimport { IAddressBook } from \\\"../../interfaces/IAddressBook.sol\\\";\\r\\nimport { IItem } from \\\"../../interfaces/IItem.sol\\\";\\r\\nimport { IStakingStrategy } from \\\"../../interfaces/IStakingStrategy.sol\\\";\\r\\nimport { DateTimeLib } from \\\"../../utils/DateTimeLib.sol\\\";\\r\\nimport { MulticallUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\\\";\\r\\n\\r\\ncontract FlexStakingStrategy is\\r\\n    IStakingStrategy,\\r\\n    ReentrancyGuardUpgradeable,\\r\\n    UUPSUpgradeable,\\r\\n    MulticallUpgradeable\\r\\n{\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- STORAGE ----------------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    address public addressBook;\\r\\n    uint256 public minLockYears;\\r\\n    uint256 public maxLockYears;\\r\\n    uint256 public initialMonths;\\r\\n    uint256 public initialRewardsRate;\\r\\n    uint256 public yearDeprecationRate;\\r\\n    uint256 public minMonthsCount;\\r\\n    uint256 public maxMonthsCount;\\r\\n\\r\\n    mapping(uint256 year => mapping(uint256 month => uint256)) public earnings;\\r\\n    mapping(uint256 year => mapping(uint256 month => uint256 depositToRemove))\\r\\n        public depositsToRemove;\\r\\n    mapping(uint256 year => mapping(uint256 month => uint256 deposit)) public deposits;\\r\\n    uint256 public lastUpdatedTimestamp;\\r\\n\\r\\n    mapping(address item => mapping(uint256 tokenId => bool)) public isStakedToken;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public initialTimestamp;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public startStakingTimestamp;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public itemsPrice;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public claimedPeriodsCount;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public finalTimestamp;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public remainder;\\r\\n    mapping(address item => mapping(uint256 tokenId => uint256)) public totalWithdrawn;\\r\\n\\r\\n    struct DepositsDate {\\r\\n        uint256 finalYear;\\r\\n        uint256 finalMonth;\\r\\n        uint256 prevFinalYear;\\r\\n        uint256 prevFinalMonth;\\r\\n    }\\r\\n    mapping(address item => mapping(uint256 tokenId => DepositsDate)) public depostitsDate;\\r\\n\\r\\n    uint256 public lastUpdatedEarningsYear;\\r\\n    uint256 public lastUpdatedEarningsMonth;\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- EVENTS  ----------------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    event UpdateDeposits(uint256 year, uint256 month, uint256 deposits);\\r\\n    event SetEarnings(uint256 year, uint256 month, uint256 earnings);\\r\\n    event Stake(\\r\\n        address itemAddress,\\r\\n        uint256 itemId,\\r\\n        address itemOwner,\\r\\n        uint256 itemsPrice,\\r\\n        uint256 initialTimestamp,\\r\\n        uint256 startStakingTimetsmap,\\r\\n        uint256 finalTimestamp,\\r\\n        uint256 remainder\\r\\n    );\\r\\n    event Claim(\\r\\n        address itemAddress,\\r\\n        uint256 itemId,\\r\\n        address itemOwner,\\r\\n        uint256 rewards,\\r\\n        uint256 claimedPeriods,\\r\\n        address withdrawToken,\\r\\n        uint256 withdrawTokenAmount\\r\\n    );\\r\\n    event Sell(\\r\\n        address itemAddress,\\r\\n        uint256 itemId,\\r\\n        address itemOwner,\\r\\n        uint256 sellPrice,\\r\\n        address withdrawToken,\\r\\n        uint256 withdrawTokenAmount\\r\\n    );\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- DEPLOY & UPGRADE  ------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _addressBook,\\r\\n        uint256 _minLockYears,\\r\\n        uint256 _maxLockYears,\\r\\n        uint256 _initialMonths,\\r\\n        uint256 _initialRewardsRate,\\r\\n        uint256 _yearDeprecationRate\\r\\n    ) public initializer {\\r\\n        require(_minLockYears > 0, \\\"_minLockYears cannot be zero\\\");\\r\\n        require(_maxLockYears > _minLockYears, \\\"_maxLockYears must be greater than _minLockYears!\\\");\\r\\n        require(_initialMonths > 0, \\\"_initialMonths cannot be zero\\\");\\r\\n        require(_initialRewardsRate > 0, \\\"_initialRewardsRate cannot be zero\\\");\\r\\n        require(_addressBook != address(0), \\\"_addressBook!\\\");\\r\\n        addressBook = _addressBook;\\r\\n        minLockYears = _minLockYears;\\r\\n        maxLockYears = _maxLockYears;\\r\\n        initialMonths = _initialMonths;\\r\\n        initialRewardsRate = _initialRewardsRate;\\r\\n        yearDeprecationRate = _yearDeprecationRate;\\r\\n\\r\\n        (uint256 initialYear, uint256 initialMonth, ) = DateTimeLib.timestampToDate(\\r\\n            DateTimeLib.subMonths(_blockTimestamp(), 1)\\r\\n        );\\r\\n        lastUpdatedTimestamp = DateTimeLib.timestampFromDate(initialYear, initialMonth, 1);\\r\\n        lastUpdatedEarningsYear = initialYear;\\r\\n        lastUpdatedEarningsMonth = initialMonth;\\r\\n\\r\\n        maxMonthsCount = 12 * _maxLockYears + 1;\\r\\n        minMonthsCount = 12 * _minLockYears + 1;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address) internal view override {\\r\\n        IAddressBook(addressBook).enforceIsProductOwner(msg.sender);\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // -----  PRODUCT OWNER ACTIONS  ------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    /// @notice Protocol owner sets the income for the period\\r\\n    /// @dev Awards must be stated for each period; if there was no income, you must indicate at least $1.\\r\\n    function setEarnings(uint256 _year, uint256 _month, uint256 _formatedEarning) external {\\r\\n        IAddressBook(addressBook).enforceIsProductOwner(msg.sender);\\r\\n        require(_formatedEarning > 0, \\\"earnings cannot be zero!\\\");\\r\\n\\r\\n        uint256 earningsTimestamp = DateTimeLib.timestampFromDate(_year, _month, 1);\\r\\n        require(\\r\\n            earningsTimestamp <= lastUpdatedTimestamp,\\r\\n            \\\"cannot set earnings for an unexpired period!\\\"\\r\\n        );\\r\\n        uint256 usdDecimals = ITreasury(IAddressBook(addressBook).treasury()).USD_DECIMALS();\\r\\n        uint256 _earnings = _formatedEarning * (10 ** usdDecimals);\\r\\n        earnings[_year][_month] = _earnings;\\r\\n\\r\\n        lastUpdatedEarningsYear = _year;\\r\\n        lastUpdatedEarningsMonth = _month;\\r\\n\\r\\n        emit SetEarnings(_year, _month, _earnings);\\r\\n    }\\r\\n\\r\\n    function updateDeposits() public {\\r\\n        IAddressBook(addressBook).enforceIsProductOwner(msg.sender);\\r\\n\\r\\n        uint256 _lastUpdatedTimestamp = lastUpdatedTimestamp;\\r\\n        uint256 diffMonths = DateTimeLib.diffMonths(_lastUpdatedTimestamp, _blockTimestamp());\\r\\n        if (diffMonths == 0) return;\\r\\n        uint256 monthsToUpdate = diffMonths - 1;\\r\\n        if (monthsToUpdate == 0) return;\\r\\n        // The variable i is initialized to 0 by default\\r\\n        for (uint256 i; i < monthsToUpdate; ++i) {\\r\\n            (uint256 prevYear, uint256 prevMonth, ) = DateTimeLib.timestampToDate(\\r\\n                _lastUpdatedTimestamp\\r\\n            );\\r\\n            _lastUpdatedTimestamp = DateTimeLib.addMonths(_lastUpdatedTimestamp, 1);\\r\\n            (uint256 year, uint256 month, ) = DateTimeLib.timestampToDate(_lastUpdatedTimestamp);\\r\\n            uint256 newDeposits = deposits[year][month] +\\r\\n                deposits[prevYear][prevMonth] -\\r\\n                depositsToRemove[year][month];\\r\\n            deposits[year][month] = newDeposits;\\r\\n\\r\\n            emit UpdateDeposits(year, month, newDeposits);\\r\\n        }\\r\\n        lastUpdatedTimestamp = _lastUpdatedTimestamp;\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // -----  PROTOCOL ACTIONS  -----------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    function stake(address _itemAddress, uint256 _itemId, bytes memory) external {\\r\\n        IAddressBook(addressBook).enforceIsItemContract(msg.sender);\\r\\n\\r\\n        // Initial data\\r\\n        isStakedToken[_itemAddress][_itemId] = true;\\r\\n        uint256 _initialTimestamp = _blockTimestamp();\\r\\n        initialTimestamp[_itemAddress][_itemId] = _initialTimestamp;\\r\\n        (uint256 year, uint256 month, uint256 initialDay) = DateTimeLib.timestampToDate(\\r\\n            _initialTimestamp\\r\\n        );\\r\\n\\r\\n        uint256 _startStakingTimestamp = DateTimeLib.timestampFromDate(year, month, 1);\\r\\n        startStakingTimestamp[_itemAddress][_itemId] = _startStakingTimestamp;\\r\\n\\r\\n        uint256 _itemsPrice = IItem(_itemAddress).price();\\r\\n        itemsPrice[_itemAddress][_itemId] = _itemsPrice;\\r\\n\\r\\n        // Remainder\\r\\n        uint256 daysInStartMonth = DateTimeLib.getDaysInMonth(_startStakingTimestamp);\\r\\n        uint256 ratio = (1e18 * initialDay) / (daysInStartMonth + 1); // Division occurs after multiplication\\r\\n        uint256 _remainder = (_itemsPrice * ratio) / 1e18; // Division occurs after multiplication\\r\\n        remainder[_itemAddress][_itemId] = _remainder;\\r\\n        // Final date\\r\\n        uint256 _finalTimestamp = DateTimeLib.addMonths(_startStakingTimestamp, maxMonthsCount);\\r\\n        finalTimestamp[_itemAddress][_itemId] = _finalTimestamp;\\r\\n        // Earnings date\\r\\n        uint256 earningsTimestamp = DateTimeLib.addMonths(_startStakingTimestamp, initialMonths);\\r\\n        (uint256 earningsYear, uint256 earningsMonth, ) = DateTimeLib.timestampToDate(\\r\\n            earningsTimestamp\\r\\n        );\\r\\n        // Next earnings date\\r\\n        (uint256 nextEarningsYear, uint256 nextEarningsMonth, ) = DateTimeLib.timestampToDate(\\r\\n            DateTimeLib.addMonths(earningsTimestamp, 1)\\r\\n        );\\r\\n        // Prev final date\\r\\n        (uint256 prevFinalYear, uint256 prevFinalMonth, ) = DateTimeLib.timestampToDate(\\r\\n            DateTimeLib.subMonths(_finalTimestamp, 1)\\r\\n        );\\r\\n        // Final date\\r\\n        (uint256 finalYear, uint256 finalMonth, ) = DateTimeLib.timestampToDate(_finalTimestamp);\\r\\n\\r\\n        // Set deposits\\r\\n        deposits[earningsYear][earningsMonth] += _itemsPrice - _remainder;\\r\\n        deposits[nextEarningsYear][nextEarningsMonth] += _remainder;\\r\\n        // Set deposits to remove\\r\\n        depositsToRemove[prevFinalYear][prevFinalMonth] += _itemsPrice - _remainder;\\r\\n        depositsToRemove[finalYear][finalMonth] += _remainder;\\r\\n        depostitsDate[_itemAddress][_itemId] = DepositsDate(\\r\\n            finalYear,\\r\\n            finalMonth,\\r\\n            prevFinalYear,\\r\\n            prevFinalMonth\\r\\n        );\\r\\n\\r\\n        address _itemOwner = IERC721(_itemAddress).ownerOf(_itemId);\\r\\n\\r\\n        emit Stake(\\r\\n            _itemAddress,\\r\\n            _itemId,\\r\\n            _itemOwner,\\r\\n            _itemsPrice,\\r\\n            _initialTimestamp,\\r\\n            _startStakingTimestamp,\\r\\n            _finalTimestamp,\\r\\n            _remainder\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- USER ACTIONS  ----------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    function claim(address _itemAddress, uint256 _itemId, address _withdrawToken) external {\\r\\n        _enforceIsItemOwner(_itemAddress, _itemId);\\r\\n        _enforceIsStakedToken(_itemAddress, _itemId);\\r\\n        address _itemOwner = msg.sender;\\r\\n\\r\\n        (uint256 rewards, uint256 claimedPeriods) = estimateRewards(_itemAddress, _itemId);\\r\\n        require(rewards > 0, \\\"not has rewards!\\\");\\r\\n\\r\\n        totalWithdrawn[_itemAddress][_itemId] += rewards;\\r\\n        claimedPeriodsCount[_itemAddress][_itemId] += claimedPeriods;\\r\\n\\r\\n        // Withdraw\\r\\n        address _treasury = IAddressBook(addressBook).treasury();\\r\\n        uint256 withdrawTokenAmount = ITreasury(_treasury).usdAmountToToken(\\r\\n            rewards,\\r\\n            _withdrawToken\\r\\n        );\\r\\n        ITreasury(_treasury).withdraw(_withdrawToken, withdrawTokenAmount, msg.sender);\\r\\n\\r\\n        emit Claim(\\r\\n            _itemAddress,\\r\\n            _itemId,\\r\\n            _itemOwner,\\r\\n            rewards,\\r\\n            claimedPeriods,\\r\\n            _withdrawToken,\\r\\n            withdrawTokenAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function sell(address _itemAddress, uint256 _itemId, address _withdrawToken) external {\\r\\n        _enforceIsItemOwner(_itemAddress, _itemId);\\r\\n        _enforceIsStakedToken(_itemAddress, _itemId);\\r\\n        address _itemOwner = msg.sender;\\r\\n\\r\\n        require(canSell(_itemAddress, _itemId), \\\"can't sell!\\\");\\r\\n\\r\\n        uint256 currentTimestamp = _blockTimestamp();\\r\\n        (uint256 currentYear, uint256 currentMonth, ) = DateTimeLib.timestampToDate(\\r\\n            currentTimestamp\\r\\n        );\\r\\n\\r\\n        uint256 _finalTimestamp = finalTimestamp[_itemAddress][_itemId];\\r\\n\\r\\n        uint256 sellTimestamp = DateTimeLib.subMonths(currentTimestamp, 1);\\r\\n        if (sellTimestamp > _finalTimestamp) sellTimestamp = _finalTimestamp;\\r\\n        (uint256 sellYear, uint256 sellMonth, ) = DateTimeLib.timestampToDate(sellTimestamp);\\r\\n\\r\\n        uint256 diffMonths = DateTimeLib.diffMonths(sellTimestamp, _finalTimestamp);\\r\\n\\r\\n        uint256 _remainder = remainder[_itemAddress][_itemId];\\r\\n        DepositsDate memory d = depostitsDate[_itemAddress][_itemId];\\r\\n        uint256 _itemsPrice = itemsPrice[_itemAddress][_itemId];\\r\\n\\r\\n        if (diffMonths == 0) {\\r\\n            // final\\r\\n            depositsToRemove[sellYear][sellMonth] += _remainder;\\r\\n        } else if (diffMonths == 1) {\\r\\n            // prev final\\r\\n            depositsToRemove[d.finalYear][d.finalMonth] += _itemsPrice;\\r\\n        } else {\\r\\n            // early\\r\\n            depositsToRemove[currentYear][currentMonth] += _itemsPrice;\\r\\n        }\\r\\n        depositsToRemove[d.prevFinalYear][d.prevFinalMonth] -= _itemsPrice - _remainder;\\r\\n        depositsToRemove[d.finalYear][d.finalMonth] -= _remainder;\\r\\n\\r\\n        uint256 sellPrice = estimateSell(_itemAddress, _itemId);\\r\\n\\r\\n        totalWithdrawn[_itemAddress][_itemId] += sellPrice;\\r\\n\\r\\n        address _treasury = IAddressBook(addressBook).treasury();\\r\\n        uint256 withdrawTokenAmount = ITreasury(_treasury).usdAmountToToken(\\r\\n            sellPrice,\\r\\n            _withdrawToken\\r\\n        );\\r\\n        require(withdrawTokenAmount > 0, \\\"zero amount!\\\");\\r\\n\\r\\n        IItem(_itemAddress).burn(_itemId);\\r\\n        ITreasury(_treasury).withdraw(_withdrawToken, withdrawTokenAmount, msg.sender);\\r\\n\\r\\n        emit Sell(\\r\\n            _itemAddress,\\r\\n            _itemId,\\r\\n            _itemOwner,\\r\\n            sellPrice,\\r\\n            _withdrawToken,\\r\\n            withdrawTokenAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------------------\\r\\n    // ----- VIEW  ------------------------------------------------------------------------\\r\\n    // ------------------------------------------------------------------------------------\\r\\n\\r\\n    function stakingType() external pure returns (string memory) {\\r\\n        return \\\"flex\\\";\\r\\n    }\\r\\n\\r\\n    function currentPeriod() external view returns (uint256 year_, uint256 month_, uint256 day_) {\\r\\n        return timestampPeriod(_blockTimestamp());\\r\\n    }\\r\\n\\r\\n    function timestampPeriod(\\r\\n        uint256 _timestamp\\r\\n    ) public pure returns (uint256 year_, uint256 month_, uint256 day_) {\\r\\n        (year_, month_, day_) = DateTimeLib.timestampToDate(_timestamp);\\r\\n    }\\r\\n\\r\\n    function claimTimestamp(\\r\\n        address _itemAddress,\\r\\n        uint256 _itemId,\\r\\n        uint256 _monthsCount\\r\\n    ) external view returns (uint256) {\\r\\n        uint256 _finalTimestamp = finalTimestamp[_itemAddress][_itemId];\\r\\n        uint256 _startStakingTimestamp = startStakingTimestamp[_itemAddress][_itemId];\\r\\n        uint256 _nextClaimTimestamp = DateTimeLib.addMonths(_startStakingTimestamp, _monthsCount);\\r\\n        if (_nextClaimTimestamp > _finalTimestamp) _nextClaimTimestamp = _finalTimestamp;\\r\\n        return _nextClaimTimestamp;\\r\\n    }\\r\\n\\r\\n    function getAllExpiredMonths(\\r\\n        address _itemAddress,\\r\\n        uint256 _itemId\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 _startStakingTimestamp = startStakingTimestamp[_itemAddress][_itemId];\\r\\n        uint256 _maxMonthsCount = maxMonthsCount;\\r\\n        uint256 allExpiredMonths = DateTimeLib.diffMonths(\\r\\n            _startStakingTimestamp,\\r\\n            _blockTimestamp()\\r\\n        );\\r\\n        if (allExpiredMonths > _maxMonthsCount) allExpiredMonths = _maxMonthsCount;\\r\\n        return allExpiredMonths;\\r\\n    }\\r\\n\\r\\n    function estimateRewards(\\r\\n        address _itemAddress,\\r\\n        uint256 _itemId\\r\\n    ) public view returns (uint256 rewards_, uint256 claimedPeriods_) {\\r\\n        uint256 _startStakingTimestamp = startStakingTimestamp[_itemAddress][_itemId];\\r\\n        uint256 _itemsPrice = itemsPrice[_itemAddress][_itemId];\\r\\n        uint256 _claimedPeriodsCount = claimedPeriodsCount[_itemAddress][_itemId];\\r\\n        uint256 _remainder = remainder[_itemAddress][_itemId];\\r\\n        uint256 _maxMonthsCount = maxMonthsCount;\\r\\n        uint256 _initialMonths = initialMonths;\\r\\n        uint256 _initialRewardsRate = initialRewardsRate;\\r\\n\\r\\n        uint256 allExpiredMonths = getAllExpiredMonths(_itemAddress, _itemId);\\r\\n\\r\\n        for (uint256 i = _claimedPeriodsCount; i < allExpiredMonths; ++i) {\\r\\n            if (i <= _initialMonths) {\\r\\n                uint256 initialItemsPrice = _itemsPrice;\\r\\n                if (i == 0) {\\r\\n                    initialItemsPrice = _itemsPrice - _remainder;\\r\\n                } else if (i == _initialMonths) {\\r\\n                    initialItemsPrice = _remainder;\\r\\n                }\\r\\n                rewards_ += (initialItemsPrice * _initialRewardsRate) / 10000;\\r\\n                if (i < _initialMonths) {\\r\\n                    ++claimedPeriods_;\\r\\n                    continue;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            (uint256 year, uint256 month, ) = DateTimeLib.timestampToDate(\\r\\n                DateTimeLib.addMonths(_startStakingTimestamp, i)\\r\\n            );\\r\\n\\r\\n            // If rewards are not indicated for a period, then there are no further ones either.\\r\\n            uint256 _earnings = earnings[year][month];\\r\\n            if (_earnings == 0) {\\r\\n                if (claimedPeriods_ == 0) rewards_ = 0;\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            uint256 earningsItemsPrice = _itemsPrice;\\r\\n            if (i == _initialMonths) {\\r\\n                earningsItemsPrice = _itemsPrice - _remainder;\\r\\n            } else if (i == _maxMonthsCount - 1) {\\r\\n                earningsItemsPrice = _remainder;\\r\\n            }\\r\\n\\r\\n            rewards_ += (earningsItemsPrice * _earnings) / deposits[year][month];\\r\\n            ++claimedPeriods_;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function canSell(address _itemAddress, uint256 _itemId) public view returns (bool) {\\r\\n        uint256 _claimedPeriodsCount = claimedPeriodsCount[_itemAddress][_itemId];\\r\\n        return\\r\\n            _claimedPeriodsCount >= minMonthsCount &&\\r\\n            _claimedPeriodsCount == getAllExpiredMonths(_itemAddress, _itemId);\\r\\n    }\\r\\n\\r\\n    /// @dev May return zero in collections where the cost of equipment is not returned\\r\\n    function estimateSell(address _itemAddress, uint256 _itemId) public view returns (uint256) {\\r\\n        uint256 allExpiredMonths = getAllExpiredMonths(_itemAddress, _itemId);\\r\\n        if (allExpiredMonths < minMonthsCount) return 0;\\r\\n        --allExpiredMonths; // sub additional splited month\\r\\n\\r\\n        uint256 _itemsPrice = itemsPrice[_itemAddress][_itemId];\\r\\n        uint256 deprecation = (_itemsPrice * allExpiredMonths * yearDeprecationRate) / 12 / 10000;\\r\\n\\r\\n        if (deprecation > _itemsPrice) return 0;\\r\\n        return _itemsPrice - deprecation;\\r\\n    }\\r\\n\\r\\n    function lastUpdatedEarningsPeriod() external view returns (uint256 year_, uint256 month_) {\\r\\n        year_ = lastUpdatedEarningsYear;\\r\\n        month_ = lastUpdatedEarningsMonth;\\r\\n    }\\r\\n\\r\\n    function _enforceIsStakedToken(address _itemAddress, uint256 _itemId) internal view {\\r\\n        require(isStakedToken[_itemAddress][_itemId], \\\"only staked token\\\");\\r\\n    }\\r\\n\\r\\n    function _enforceIsItemOwner(address _itemAddress, uint256 _itemId) internal view {\\r\\n        require(msg.sender == IERC721(_itemAddress).ownerOf(_itemId), \\\"only item owner!\\\");\\r\\n    }\\r\\n\\r\\n    function _blockTimestamp() internal view returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface IAddressBook {\\r\\n    function treasury() external view returns (address);\\r\\n\\r\\n    function enforceIsItemContract(address _contract) external view;\\r\\n\\r\\n    function enforceIsProductOwner(address _account) external view;\\r\\n    \\r\\n    function productOwner() external view returns (address);\\r\\n\\r\\n    function items(address _item) external view returns (bool);\\r\\n\\r\\n    function stakingStrategies(address _stakingStrategy) external view returns (bool);\\r\\n\\r\\n    function enforceIsStakingStrategyContract(address _contract) external view;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IItem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface IItem {\\r\\n    function burn(uint256 _tokenId) external;\\r\\n\\r\\n    function price() external view returns (uint256);\\r\\n\\r\\n    function maxSupply() external returns (uint256);\\r\\n\\r\\n    function totalMintedAmount() external returns (uint256);\\r\\n\\r\\n    function tokenStakingStrategy(uint256 _tokenId) external returns (address);\\r\\n\\r\\n    function mint(address _stakingStrategy, address _payToken, bytes memory _payload) external;\\r\\n\\r\\n    function stopSell() external;\\r\\n\\r\\n    function setNewMaxSupply(uint256 _maxSupply) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface IStakingStrategy {\\r\\n    function stake(address _itemAddress, uint256 _itemId, bytes memory _payload) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\ninterface ITreasury {\\r\\n    function enforceIsSupportedToken(address _token) external view;\\r\\n\\r\\n    function usdAmountToToken(uint256 _usdAmount, address _token) external view returns (uint256);\\r\\n\\r\\n    function withdraw(address _token, uint256 _amount, address _recipient) external;\\r\\n\\r\\n    function USD_DECIMALS() external view returns(uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/DateTimeLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nlibrary DateTimeLib {\\r\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\r\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\r\\n    uint constant SECONDS_PER_MINUTE = 60;\\r\\n    int constant OFFSET19700101 = 2440588;\\r\\n\\r\\n    uint constant DOW_MON = 1;\\r\\n    uint constant DOW_TUE = 2;\\r\\n    uint constant DOW_WED = 3;\\r\\n    uint constant DOW_THU = 4;\\r\\n    uint constant DOW_FRI = 5;\\r\\n    uint constant DOW_SAT = 6;\\r\\n    uint constant DOW_SUN = 7;\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\r\\n    // the date conversion algorithm from\\r\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\r\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\r\\n    //\\r\\n    // days = day\\r\\n    //      - 32075\\r\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\r\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\r\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\r\\n    //      - offset\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\r\\n        require(year >= 1970);\\r\\n        int _year = int(year);\\r\\n        int _month = int(month);\\r\\n        int _day = int(day);\\r\\n\\r\\n        int __days = _day -\\r\\n            32075 +\\r\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\r\\n            4 +\\r\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\r\\n            12 -\\r\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\r\\n            4 -\\r\\n            OFFSET19700101;\\r\\n\\r\\n        _days = uint(__days);\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------------------------------\\r\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\r\\n    // the date conversion algorithm from\\r\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\r\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\r\\n    //\\r\\n    // int L = days + 68569 + offset\\r\\n    // int N = 4 * L / 146097\\r\\n    // L = L - (146097 * N + 3) / 4\\r\\n    // year = 4000 * (L + 1) / 1461001\\r\\n    // L = L - 1461 * year / 4 + 31\\r\\n    // month = 80 * L / 2447\\r\\n    // dd = L - 2447 * month / 80\\r\\n    // L = month / 11\\r\\n    // month = month + 2 - 12 * L\\r\\n    // year = 100 * (N - 49) + year + L\\r\\n    // ------------------------------------------------------------------------\\r\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\r\\n        int __days = int(_days);\\r\\n\\r\\n        int L = __days + 68569 + OFFSET19700101;\\r\\n        int N = (4 * L) / 146097;\\r\\n        L = L - (146097 * N + 3) / 4;\\r\\n        int _year = (4000 * (L + 1)) / 1461001;\\r\\n        L = L - (1461 * _year) / 4 + 31;\\r\\n        int _month = (80 * L) / 2447;\\r\\n        int _day = L - (2447 * _month) / 80;\\r\\n        L = _month / 11;\\r\\n        _month = _month + 2 - 12 * L;\\r\\n        _year = 100 * (N - 49) + _year + L;\\r\\n\\r\\n        year = uint(_year);\\r\\n        month = uint(_month);\\r\\n        day = uint(_day);\\r\\n    }\\r\\n\\r\\n    function timestampFromDate(\\r\\n        uint year,\\r\\n        uint month,\\r\\n        uint day\\r\\n    ) internal pure returns (uint timestamp) {\\r\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\r\\n    }\\r\\n\\r\\n    function timestampFromDateTime(\\r\\n        uint year,\\r\\n        uint month,\\r\\n        uint day,\\r\\n        uint hour,\\r\\n        uint minute,\\r\\n        uint second\\r\\n    ) internal pure returns (uint timestamp) {\\r\\n        timestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            hour *\\r\\n            SECONDS_PER_HOUR +\\r\\n            minute *\\r\\n            SECONDS_PER_MINUTE +\\r\\n            second;\\r\\n    }\\r\\n\\r\\n    function timestampToDate(\\r\\n        uint timestamp\\r\\n    ) internal pure returns (uint year, uint month, uint day) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function timestampToDateTime(\\r\\n        uint timestamp\\r\\n    ) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\r\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        uint secs = timestamp % SECONDS_PER_DAY;\\r\\n        hour = secs / SECONDS_PER_HOUR;\\r\\n        secs = secs % SECONDS_PER_HOUR;\\r\\n        minute = secs / SECONDS_PER_MINUTE;\\r\\n        second = secs % SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\r\\n        if (year >= 1970 && month > 0 && month <= 12) {\\r\\n            uint daysInMonth = _getDaysInMonth(year, month);\\r\\n            if (day > 0 && day <= daysInMonth) {\\r\\n                valid = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isValidDateTime(\\r\\n        uint year,\\r\\n        uint month,\\r\\n        uint day,\\r\\n        uint hour,\\r\\n        uint minute,\\r\\n        uint second\\r\\n    ) internal pure returns (bool valid) {\\r\\n        if (isValidDate(year, month, day)) {\\r\\n            if (hour < 24 && minute < 60 && second < 60) {\\r\\n                valid = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\r\\n        (uint year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        leapYear = _isLeapYear(year);\\r\\n    }\\r\\n\\r\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\r\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\r\\n    }\\r\\n\\r\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\r\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\r\\n    }\\r\\n\\r\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\r\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\r\\n    }\\r\\n\\r\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\r\\n        (uint year, uint month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        daysInMonth = _getDaysInMonth(year, month);\\r\\n    }\\r\\n\\r\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\r\\n        if (\\r\\n            month == 1 ||\\r\\n            month == 3 ||\\r\\n            month == 5 ||\\r\\n            month == 7 ||\\r\\n            month == 8 ||\\r\\n            month == 10 ||\\r\\n            month == 12\\r\\n        ) {\\r\\n            daysInMonth = 31;\\r\\n        } else if (month != 2) {\\r\\n            daysInMonth = 30;\\r\\n        } else {\\r\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // 1 = Monday, 7 = Sunday\\r\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\r\\n        uint _days = timestamp / SECONDS_PER_DAY;\\r\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\r\\n    }\\r\\n\\r\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\r\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\r\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\r\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n    }\\r\\n\\r\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\r\\n        uint secs = timestamp % SECONDS_PER_DAY;\\r\\n        hour = secs / SECONDS_PER_HOUR;\\r\\n    }\\r\\n\\r\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\r\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\r\\n        minute = secs / SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\r\\n        second = timestamp % SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        year += _years;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            (timestamp % SECONDS_PER_DAY);\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        month += _months;\\r\\n        year += (month - 1) / 12;\\r\\n        month = ((month - 1) % 12) + 1;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            (timestamp % SECONDS_PER_DAY);\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp + _seconds;\\r\\n        require(newTimestamp >= timestamp);\\r\\n    }\\r\\n\\r\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        year -= _years;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            (timestamp % SECONDS_PER_DAY);\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\r\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\r\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\r\\n        year = yearMonth / 12;\\r\\n        month = (yearMonth % 12) + 1;\\r\\n        uint daysInMonth = _getDaysInMonth(year, month);\\r\\n        if (day > daysInMonth) {\\r\\n            day = daysInMonth;\\r\\n        }\\r\\n        newTimestamp =\\r\\n            _daysFromDate(year, month, day) *\\r\\n            SECONDS_PER_DAY +\\r\\n            (timestamp % SECONDS_PER_DAY);\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\r\\n        newTimestamp = timestamp - _seconds;\\r\\n        require(newTimestamp <= timestamp);\\r\\n    }\\r\\n\\r\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        (uint fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\r\\n        (uint toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\r\\n        _years = toYear - fromYear;\\r\\n    }\\r\\n\\r\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        (uint fromYear, uint fromMonth, ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\r\\n        (uint toYear, uint toMonth, ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\r\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\r\\n    }\\r\\n\\r\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\r\\n    }\\r\\n\\r\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\r\\n    }\\r\\n\\r\\n    function diffMinutes(\\r\\n        uint fromTimestamp,\\r\\n        uint toTimestamp\\r\\n    ) internal pure returns (uint _minutes) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\r\\n    }\\r\\n\\r\\n    function diffSeconds(\\r\\n        uint fromTimestamp,\\r\\n        uint toTimestamp\\r\\n    ) internal pure returns (uint _seconds) {\\r\\n        require(fromTimestamp <= toTimestamp);\\r\\n        _seconds = toTimestamp - fromTimestamp;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedPeriods\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"}],\"name\":\"SetEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemsPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startStakingTimetsmap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainder\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"}],\"name\":\"UpdateDeposits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"canSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawToken\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_monthsCount\",\"type\":\"uint256\"}],\"name\":\"claimTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimedPeriodsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"year_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"}],\"name\":\"depositsToRemove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositToRemove\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depostitsDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finalYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalMonth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevFinalYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevFinalMonth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"}],\"name\":\"earnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"estimateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedPeriods_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"estimateSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"finalTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getAllExpiredMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialRewardsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"initialTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressBook\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minLockYears\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLockYears\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialMonths\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialRewardsRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yearDeprecationRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isStakedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"itemsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedEarningsMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedEarningsPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"year_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedEarningsYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockYears\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMonthsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockYears\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMonthsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"remainder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_withdrawToken\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_formatedEarning\",\"type\":\"uint256\"}],\"name\":\"setEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_itemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"startStakingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"timestampPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"year_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"item\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearDeprecationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FlexStakingStrategy", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": ""}