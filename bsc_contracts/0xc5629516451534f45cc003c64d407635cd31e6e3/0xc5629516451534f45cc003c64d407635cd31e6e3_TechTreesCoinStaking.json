{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IPoint {\r\n    event Mint(address indexed to, uint256 value);\r\n\r\n    event Consume(address indexed consumer, address indexed from, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function gainOf(address account) external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function consume(address spender, uint256 amount) external;\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract TechTreesCoinStaking is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event TokenInjectorChanged(address indexed operator, address tokenInjector);\r\n    event PoolAdded(address indexed operator, uint256 flags, uint256 factor, uint256 feeFreePeriod, uint256 lockPeriod);\r\n    event Deposit(address indexed account, uint256 indexed poolId, uint256 value);\r\n    event Withdraw(address indexed account, uint256 indexed poolId, uint256 value);\r\n    event WithdrawPendingTokens(address indexed account, uint256 points, uint256 value);\r\n    event EmergencyWithdraw(address indexed account, uint256 value);\r\n\r\n    event Start(address indexed operator, uint256 powEndBlock);\r\n    event StakingParameterChanged(address indexed operator, uint256 totalInjectedTokens, uint256 powTokensPerBlock, uint256 pointsPerBlock);\r\n    event StakingInternalParameterChanged(address indexed operator, uint256 lastUpdateBlock, uint256 accTokensPerShare, uint256 accPointsPerEther);\r\n\r\n    // TTC-10 remove unnecessary variables\r\n    uint256 private constant fPoint = 1 << 0;\r\n    uint256 private constant fTTC = 1 << 1;\r\n    uint256 private constant fObsolete = 1 << 2;\r\n    uint256 private constant blocksPerday = 20 * 60 * 24;\r\n    uint256 private constant sqrt1EtherFBase = 1e10;\r\n    uint256 private constant feePercentage = 95;\r\n    uint256 private constant factorBase = 100;\r\n    uint256 private constant acc1e12 = 1e12;\r\n    address private constant zeroAddress = address(0);\r\n\r\n    struct Pool {\r\n        uint8 flags;\r\n        uint16 factor; // base 100\r\n        uint32 feeFreePeriod; // fee free blocks\r\n        uint32 lockPeriod; // lock blocks\r\n        uint96 totalStake; // total\r\n    }\r\n\r\n    struct StakedShare {\r\n        uint96 amount;\r\n        uint32 lastDepositBlock;\r\n        uint128 powRewardDebt; // 256bits\r\n        uint256 pointRewardDebt; // 256bits\r\n    }\r\n\r\n    bool public emergency;\r\n    uint216 public accTokensPerShare;\r\n    uint32 public lastUpdateBlock;\r\n    // 256 bits\r\n    uint32 public powEndBlock;\r\n    uint96 public powTokensPerBlock;\r\n    uint128 public powShareTotal;\r\n    // 256 bits\r\n    uint256 public totalStaked;\r\n    uint256 public totalInjectedTokens;\r\n\r\n    uint96 public pointsPerBlock;\r\n    uint160 public accPointsPerEther;\r\n    // 256 bits\r\n\r\n    // pool => account => value\r\n    mapping(address => mapping(uint256 => StakedShare)) private _userStakes;\r\n\r\n    Pool[] public pools;\r\n\r\n    IPoint public immutable ttPoint;\r\n    IERC20 public immutable ttCoin;\r\n    address public tokenInjector;\r\n\r\n    constructor(address ttPoint_, address ttCoin_) {\r\n        ttPoint = IPoint(ttPoint_);\r\n        ttCoin = IERC20(ttCoin_);\r\n        _initPoolDev();\r\n    }\r\n\r\n    function setEmergency() external onlyOwner {\r\n        emergency = true;\r\n    }\r\n\r\n    function _initPoolDev() private {\r\n        pools.push(Pool({flags: uint8(fPoint), factor: 100, feeFreePeriod: uint32(blocksPerday * 7), lockPeriod: 0, totalStake: 0}));\r\n        pools.push(Pool({flags: uint8(fTTC), factor: 100, feeFreePeriod: uint32(blocksPerday * 7), lockPeriod: 0, totalStake: 0}));\r\n        pools.push(Pool({flags: uint8(fPoint | fTTC), factor: 150, feeFreePeriod: 0, lockPeriod: uint32(blocksPerday * 30), totalStake: 0}));\r\n        pools.push(Pool({flags: uint8(fPoint | fTTC), factor: 200, feeFreePeriod: 0, lockPeriod: uint32(blocksPerday * 60), totalStake: 0}));\r\n        pools.push(Pool({flags: uint8(fPoint | fTTC), factor: 400, feeFreePeriod: 0, lockPeriod: uint32(blocksPerday * 120), totalStake: 0}));\r\n    }\r\n\r\n    function start() external onlyOwner nonStarted {\r\n        // make sure the contract has been injected enought tokens for staking\r\n        require(totalInjectedTokens > 0, \"not enought pow tokens\");\r\n        require(powTokensPerBlock > 0, \"powTokensPerBlock not initialized\");\r\n        require(pointsPerBlock > 0, \"pointsPerBlock not initialized\");\r\n        // confirm staking end block\r\n        powEndBlock = uint32(block.number + totalInjectedTokens / powTokensPerBlock);\r\n        // set last update block to current block\r\n        lastUpdateBlock = uint32(block.number);\r\n        emit Start(msg.sender, powEndBlock);\r\n    }\r\n\r\n    // can be called after staking is started in order to adjust dispatch ratio\r\n    // it will change the end time of staking proceduce\r\n    function setPowTokensPerBlock(uint256 powTokensPerBlock_) external onlyOwner {\r\n        if (lastUpdateBlock > 0) {\r\n            // if staking is started, it needs update staking parameters\r\n            require(powEndBlock > block.number, \"already ended\");\r\n            _updateStakingParameter();\r\n            uint256 restToken = (uint256(powEndBlock) - block.number) * powTokensPerBlock;\r\n            powEndBlock = uint32(block.number + restToken / powTokensPerBlock_);\r\n        }\r\n        powTokensPerBlock = uint96(powTokensPerBlock_);\r\n        emit StakingParameterChanged(msg.sender, totalInjectedTokens, powTokensPerBlock, pointsPerBlock);\r\n    }\r\n\r\n    // can be called after staking is started in order to adjust dispatch ratio\r\n    function setPointsPerBlock(uint256 pointsPerBlock_) external onlyOwner {\r\n        if (lastUpdateBlock > 0) {\r\n            // if staking is started, it needs update staking parameters\r\n            require(powEndBlock > block.number, \"already ended\");\r\n            _updateStakingParameter();\r\n        }\r\n        pointsPerBlock = uint96(pointsPerBlock_);\r\n        emit StakingParameterChanged(msg.sender, totalInjectedTokens, powTokensPerBlock, pointsPerBlock);\r\n    }\r\n\r\n    // can be called after staking is started in order to add dispatchable tokens\r\n    // it will change the end time of staking proceduce\r\n    function addPowTokens(uint256 powTokens) external onlyTokenInjector {\r\n        ttCoin.safeTransferFrom(msg.sender, address(this), powTokens);\r\n        totalInjectedTokens += powTokens;\r\n        if (lastUpdateBlock > 0) {\r\n            // if staking is started, it needs update staking parameters\r\n            require(powEndBlock > block.number, \"already ended\");\r\n            uint256 restToken = (uint256(powEndBlock) - block.number) * powTokensPerBlock + powTokens;\r\n            powEndBlock = uint32(block.number + restToken / powTokensPerBlock);\r\n        }\r\n        emit StakingParameterChanged(msg.sender, totalInjectedTokens, powTokensPerBlock, pointsPerBlock);\r\n    }\r\n\r\n    function setTokenInjector(address tokenInjector_) external onlyOwner {\r\n        tokenInjector = tokenInjector_;\r\n        emit TokenInjectorChanged(msg.sender, tokenInjector_);\r\n    }\r\n\r\n    function restInjectedTokens() public view returns (uint256) {\r\n        if (lastUpdateBlock == 0) return totalInjectedTokens;\r\n        else return (powEndBlock - min(block.number, powEndBlock)) * powTokensPerBlock;\r\n    }\r\n\r\n    function flipPoolObsolete(uint256 pId) external onlyOwner {\r\n        pools[pId].flags ^= uint8(fObsolete);\r\n    }\r\n\r\n    function addPool(\r\n        uint8 flags,\r\n        uint16 factor,\r\n        uint32 feeFreePeriod,\r\n        uint32 lockPeriod\r\n    ) external onlyOwner {\r\n        pools.push(Pool({flags: flags, factor: factor, feeFreePeriod: feeFreePeriod, lockPeriod: lockPeriod, totalStake: 0}));\r\n        emit PoolAdded(msg.sender, flags, factor, feeFreePeriod, lockPeriod);\r\n    }\r\n\r\n    function poolCount() external view returns (uint256 count) {\r\n        return pools.length;\r\n    }\r\n\r\n    // deposit\r\n    function deposit(uint256 pId, uint256 value) external nonEmergency validPool(pId) {\r\n        require(value > 0, \"empty deposit is not allowed\");\r\n        // transfer-in tokens\r\n        ttCoin.safeTransferFrom(msg.sender, address(this), value);\r\n\r\n        // withdraw pending tokens(if any) then update global staking parameters\r\n        (uint256 _accTokensPerShare, uint256 _accPointsPerEther) = _withdrawSinglePending(msg.sender, pId);\r\n        if ((pools[pId].flags & fTTC) > 0) powShareTotal += uint128((value * pools[pId].factor) / factorBase);\r\n        totalStaked += value;\r\n\r\n        // update user's staking parameters\r\n        StakedShare storage stakedShare = _userStakes[msg.sender][pId];\r\n        stakedShare.amount += uint96(value);\r\n        stakedShare.lastDepositBlock = uint32(block.number);\r\n        // recalculate the reward debt of points and tokens\r\n        uint256 userStakeFactor = uint256(stakedShare.amount) * pools[pId].factor;\r\n        stakedShare.powRewardDebt = uint128((userStakeFactor * _accTokensPerShare) / (factorBase * acc1e12));\r\n        stakedShare.pointRewardDebt = uint128((sqrt(userStakeFactor) * _accPointsPerEther) / sqrt1EtherFBase);\r\n\r\n        emit Deposit(msg.sender, pId, value);\r\n    }\r\n\r\n    function withdraw(uint256 pId, uint256 value) external nonEmergency {\r\n        require(value > 0, \"empty withdraw is not allowed\");\r\n        // check prerequirement\r\n        StakedShare storage stakedShare = _userStakes[msg.sender][pId];\r\n        require(value <= stakedShare.amount, \"not enough to withdraw\");\r\n        require(block.number >= stakedShare.lastDepositBlock + pools[pId].lockPeriod, \"not reach withdraw block\");\r\n\r\n        // withdraw pending tokens(if any) then update global staking parameters\r\n        (uint256 _accTokensPerShare, uint256 _accPointsPerEther) = _withdrawSinglePending(msg.sender, pId);\r\n        if ((pools[pId].flags & fTTC) > 0) powShareTotal -= uint128((value * pools[pId].factor) / factorBase);\r\n        totalStaked -= value;\r\n\r\n        // update user's staking parameters\r\n        stakedShare.amount -= uint96(value);\r\n        uint256 userStakeFactor = uint256(stakedShare.amount) * pools[pId].factor;\r\n        stakedShare.powRewardDebt = uint128((userStakeFactor * _accTokensPerShare) / (factorBase * acc1e12));\r\n        stakedShare.pointRewardDebt = (sqrt(userStakeFactor) * _accPointsPerEther) / sqrt1EtherFBase;\r\n\r\n        // transfer-out withdraw tokens\r\n        // the penalty fee will be taken under some situation\r\n        if (block.number < stakedShare.lastDepositBlock + pools[pId].feeFreePeriod) ttCoin.safeTransfer(msg.sender, (value * feePercentage) / factorBase);\r\n        else ttCoin.safeTransfer(msg.sender, value);\r\n\r\n        emit Withdraw(msg.sender, pId, value);\r\n    }\r\n\r\n    // do a loop to withdraw all pending tokens\r\n    function withdrawAllPending() external nonEmergency {\r\n        uint256 points;\r\n        uint256 tokens;\r\n        uint256 _poolCount = pools.length;\r\n        for (uint256 index = 0; index < _poolCount; ++index) {\r\n            (, , uint256 tempPoints, uint256 tempTokens) = _withdrawPending(msg.sender, index);\r\n            points += tempPoints;\r\n            tokens += tempTokens;\r\n        }\r\n        _withdrawTransfer(msg.sender, points, tokens);\r\n    }\r\n\r\n    function withdrawPending(uint256 pId) external nonEmergency {\r\n        _withdrawSinglePending(msg.sender, pId);\r\n    }\r\n\r\n    function _withdrawSinglePending(address account, uint256 pId) private returns (uint256 _accTokensPerShare, uint256 _accPointsPerEther) {\r\n        uint256 points;\r\n        uint256 tokens;\r\n        (_accTokensPerShare, _accPointsPerEther, points, tokens) = _withdrawPending(account, pId);\r\n        _withdrawTransfer(account, points, tokens);\r\n    }\r\n\r\n    function _withdrawPending(address account, uint256 pId)\r\n        private\r\n        returns (\r\n            uint256 _accTokensPerShare,\r\n            uint256 _accPointsPerEther,\r\n            uint256 points,\r\n            uint256 tokens\r\n        )\r\n    {\r\n        uint256 minBlock;\r\n        (_accTokensPerShare, _accPointsPerEther, minBlock) = _updateStakingParameter();\r\n        StakedShare storage _stakeShare = _userStakes[account][pId];\r\n        // if user has some staking values\r\n        if (_stakeShare.amount > 0) {\r\n            uint256 userStakeFactor = _stakeShare.amount * pools[pId].factor;\r\n            // update global staking parameters\r\n            if ((pools[pId].flags & fPoint) > 0) {\r\n                // points pending calculation\r\n                uint256 _pending = (sqrt(userStakeFactor) * _accPointsPerEther) / sqrt1EtherFBase;\r\n                points = _pending - _stakeShare.pointRewardDebt;\r\n                _stakeShare.pointRewardDebt = _pending;\r\n            }\r\n            if ((pools[pId].flags & fTTC) > 0) {\r\n                // token pending calculation\r\n                uint256 _pending = (userStakeFactor * _accTokensPerShare) / (factorBase * acc1e12);\r\n                tokens = _pending - _stakeShare.powRewardDebt;\r\n                _stakeShare.powRewardDebt = uint128(_pending);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _withdrawTransfer(\r\n        address to,\r\n        uint256 points,\r\n        uint256 tokens\r\n    ) private {\r\n        if (points > 0) ttPoint.mint(to, points);\r\n        if (tokens > 0) ttCoin.safeTransfer(to, tokens);\r\n        if (points > 0 || tokens > 0) emit WithdrawPendingTokens(to, points, tokens);\r\n    }\r\n\r\n    // fixes for TCK-01 emit events when internal parameter changes\r\n    function _updateStakingParameter()\r\n        private\r\n        returns (\r\n            uint256 _accTokensPerShare,\r\n            uint256 _accPointsPerEther,\r\n            uint256 minBlock\r\n        )\r\n    {\r\n        _accTokensPerShare = accTokensPerShare;\r\n        _accPointsPerEther = accPointsPerEther;\r\n        // get the minor block of current block and staking end block to avoid the overflow of token dispatching\r\n        minBlock = min(block.number, powEndBlock);\r\n        // make sure staking is started and not yet finished\r\n        if (lastUpdateBlock > 0 && minBlock > lastUpdateBlock) {\r\n            uint256 diffBlocks = minBlock - lastUpdateBlock;\r\n            // accumulate points\r\n            _accPointsPerEther += diffBlocks * pointsPerBlock;\r\n            accPointsPerEther = uint160(_accPointsPerEther);\r\n            // update last update blocks\r\n            lastUpdateBlock = uint32(minBlock);\r\n            if (powShareTotal > 0) {\r\n                // accumulate token dispatching parameters\r\n                uint256 diff = powTokensPerBlock * diffBlocks;\r\n                _accTokensPerShare += (diff * acc1e12) / powShareTotal;\r\n                accTokensPerShare = uint216(_accTokensPerShare);\r\n            }\r\n            // emit event\r\n            emit StakingInternalParameterChanged(msg.sender, minBlock, _accTokensPerShare, _accPointsPerEther);\r\n        }\r\n    }\r\n\r\n    // fixes for TTC-04\r\n    function emergencyWithdraw(uint256 pId) external underEmergency {\r\n        require(emergency, \"not in emergency\");\r\n        uint256 _poolCount = pools.length;\r\n        uint256 value;\r\n        for (uint256 index = 0; index < _poolCount; ++index) {\r\n            uint256 oneAmount = _userStakes[msg.sender][pId].amount;\r\n            if (oneAmount > 0) {\r\n                // in case of emergency withdraw, modify deposited values\r\n                value += oneAmount;\r\n                _userStakes[msg.sender][pId].amount = 0;\r\n            }\r\n        }\r\n        if (value > 0) {\r\n            ttCoin.safeTransfer(msg.sender, value);\r\n            totalStaked -= value;\r\n            emit EmergencyWithdraw(msg.sender, value);\r\n        }\r\n    }\r\n\r\n    // get user withdrawable tokens and point, base on _withdrawPending() algorithm, view only\r\n    function pending(address account, uint256 pId) public view returns (uint256 points, uint256 tokens) {\r\n        StakedShare storage _stakeShare = _userStakes[account][pId];\r\n        uint256 userStakeFactor = _stakeShare.amount * pools[pId].factor;\r\n        if (lastUpdateBlock > 0 && userStakeFactor > 0) {\r\n            uint256 diffBlock = min(block.number, powEndBlock) - lastUpdateBlock;\r\n            if ((pools[pId].flags & fPoint) > 0) {\r\n                uint256 _accPointsPerEther = accPointsPerEther;\r\n                _accPointsPerEther += diffBlock * pointsPerBlock;\r\n                points = (sqrt(userStakeFactor) * _accPointsPerEther) / sqrt1EtherFBase - _stakeShare.pointRewardDebt;\r\n            }\r\n            if ((pools[pId].flags & fTTC) > 0 && powShareTotal > 0) {\r\n                uint256 _accTokensPerShare = accTokensPerShare;\r\n                _accTokensPerShare += (powTokensPerBlock * diffBlock * acc1e12) / powShareTotal;\r\n                tokens = (userStakeFactor * _accTokensPerShare) / (factorBase * acc1e12) - _stakeShare.powRewardDebt;\r\n            }\r\n        }\r\n    }\r\n\r\n    function userStakes(address account, uint256 pId)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 amount,\r\n            uint256 feeFreeRestBlocks,\r\n            uint256 lockRestBlocks,\r\n            uint256 points,\r\n            uint256 tokens\r\n        )\r\n    {\r\n        amount = _userStakes[account][pId].amount;\r\n        {\r\n            uint256 withdrawBlock = _userStakes[account][pId].lastDepositBlock + pools[pId].lockPeriod;\r\n            if (withdrawBlock > block.number) lockRestBlocks = withdrawBlock - block.number;\r\n        }\r\n        {\r\n            uint256 feeFreeBlock = _userStakes[account][pId].lastDepositBlock + pools[pId].feeFreePeriod;\r\n            if (feeFreeBlock > block.number) feeFreeRestBlocks = feeFreeBlock - block.number;\r\n        }\r\n        (points, tokens) = pending(account, pId);\r\n    }\r\n\r\n    function estimate(uint256 pId, uint256 value) public view returns (uint256 pointsPerBlock_, uint256 userStakeFactor_) {\r\n        userStakeFactor_ = value * pools[pId].factor;\r\n        if ((pools[pId].flags & fPoint) > 0) {\r\n            pointsPerBlock_ = (sqrt(userStakeFactor_) * pointsPerBlock) / sqrt1EtherFBase;\r\n        }\r\n        if ((pools[pId].flags & fTTC) == 0) userStakeFactor_ = 0;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) public pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev uint256 sqrt function\r\n     */\r\n    function sqrt(uint256 x) public pure returns (uint256) {\r\n        uint256 z = (x + 1) >> 1;\r\n        uint256 y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) >> 1;\r\n        }\r\n        return y;\r\n    }\r\n\r\n    modifier validPool(uint256 pId) {\r\n        require((pools[pId].flags & fObsolete) == 0, \"pool is obsolete\");\r\n        _;\r\n    }\r\n\r\n    modifier started() {\r\n        require(lastUpdateBlock > 0, \"not started\");\r\n        _;\r\n    }\r\n\r\n    modifier nonStarted() {\r\n        require(lastUpdateBlock == 0, \"already started\");\r\n        _;\r\n    }\r\n\r\n    modifier nonEmergency() {\r\n        require(!emergency, \"cannot perform under emergency\");\r\n        _;\r\n    }\r\n\r\n    modifier underEmergency() {\r\n        require(emergency, \"only under emergency\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenInjector() {\r\n        require(tokenInjector == zeroAddress || msg.sender == tokenInjector, \"requires tokenInjector\");\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ttPoint_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ttCoin_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeFreePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accTokensPerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accPointsPerEther\",\"type\":\"uint256\"}],\"name\":\"StakingInternalParameterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalInjectedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"powTokensPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pointsPerBlock\",\"type\":\"uint256\"}],\"name\":\"StakingParameterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"powEndBlock\",\"type\":\"uint256\"}],\"name\":\"Start\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenInjector\",\"type\":\"address\"}],\"name\":\"TokenInjectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawPendingTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accPointsPerEther\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokensPerShare\",\"outputs\":[{\"internalType\":\"uint216\",\"name\":\"\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"flags\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"factor\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feeFreePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockPeriod\",\"type\":\"uint32\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"powTokens\",\"type\":\"uint256\"}],\"name\":\"addPowTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"estimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pointsPerBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStakeFactor_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"flipPoolObsolete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointsPerBlock\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"flags\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"factor\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feeFreePeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"totalStake\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powEndBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powShareTotal\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powTokensPerBlock\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restInjectedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pointsPerBlock_\",\"type\":\"uint256\"}],\"name\":\"setPointsPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"powTokensPerBlock_\",\"type\":\"uint256\"}],\"name\":\"setPowTokensPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenInjector_\",\"type\":\"address\"}],\"name\":\"setTokenInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenInjector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInjectedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ttCoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ttPoint\",\"outputs\":[{\"internalType\":\"contract IPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeFreeRestBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockRestBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"withdrawPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TechTreesCoinStaking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "0000000000000000000000008a8c714698a367590d441afb37ca17e4bacd49710000000000000000000000006a684b3578f5b07c0aa02fafc33ed248ae0c2db2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dfd02edd468f5ecf88d107c2057dbd19f02f0938df5c0f37c037fdcbc8ab3e39"}