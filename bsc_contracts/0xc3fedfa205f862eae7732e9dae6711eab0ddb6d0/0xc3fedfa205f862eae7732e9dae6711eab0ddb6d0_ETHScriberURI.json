{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ETHscriberURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nerror EmptyDataField();\\nerror InvalidFunctionCall(bytes response);\\nerror NonExistantContractOrToken(address addr, uint256 tokenId);\\nerror NotEnoughETHProvided(uint256 value);\\n\\ninterface ITokenURI {\\n    /**\\n     * @dev Returns the token URI for a given token ID from the a.\\n     * @param tokenId The token ID to return the URI for\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n/**\\n * @title ETHScriberURI\\n * @author @ownerlessInc\\n * @notice This contract is just a study case of the development of the Ethscriptions\\n * initiative. Use as you wish, but be aware that this is not a production ready contract.\\n * Rather than that, it's a proof of concept that can be used as a base for further\\n * developments. Any transactions will be considered\\n */\\ncontract ETHScriberURI {\\n    // Global address of the Ethscriber contract\\n    address public constant ETHSCRIBER =\\n        0xD15EBb0658DC90D30A4256Da8A891B6A89f7cc4D;\\n\\n    // Price of the Inscription\\n    uint256 public constant price = 0.001 ether;\\n\\n    // Owner of the contract\\n    address public immutable owner;\\n\\n    // Constructor\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev This function is used to ethscribe NFTs from contracts that implement the\\n     * `tokenURI(uint256)` function, which is part of the ERC721 standard.\\n     *\\n     * We send a transaction to the Ethscriber contract with the tokenURI as `msg.data`.\\n     * The Ethscriber will send us back a modified `msg.data` with a blackspace in front,\\n     * which determines that this ethscriptions was generated using internal transactions.\\n     *\\n     * IMPORTANT! Blank spaces won't alter the visibility of the Ethscriptions in the\\n     * indexers, that is because all compilers ignore the `0x20`which representes a blank\\n     * space. We can say the ethscription will belong to the caller of the contract, because\\n     * the Ethscriber contract will send the caller a transaction containing the modified\\n     * `msg.data`. The standard is yet uncertain, but following the msg.data field being the\\n     * ethscription itself, we can say that the ethscription will belong to the caller.\\n     * It's fun to realize that a lot of ethscriptions were already made before, but it will\\n     * very costly to investigate such chained events in the past blocks.\\n     *\\n     * Requirements:\\n     * - The contract that holds the NFT must implement the `tokenURI(uint256)` function.\\n     * - The contract that holds the NFT must be deployed on the same network as the Ethscriber.\\n     * - Price for the inscription must be provided.\\n     *\\n     * @param _addr The address of the contract that holds the desired NFT.\\n     * @param _tokenId The ID of the NFT to be ethscribed.\\n     */\\n    function ethscribe(address _addr, uint256 _tokenId) public payable {\\n        if (msg.value < price) revert NotEnoughETHProvided(msg.value);\\n\\n        try ITokenURI(_addr).tokenURI(_tokenId) returns (\\n            string memory tokenURI\\n        ) {\\n            _ethscribe(tokenURI);\\n        } catch {\\n            revert NonExistantContractOrToken(_addr, _tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev This internal function will ethscribe an existing NFT to the data field\\n     * of the transaction hash generated by the caller.\\n     * @param _tokenURI The token URI of the NFT to be ethscribed.\\n     */\\n    function _ethscribe(string memory _tokenURI) internal {\\n        (bool sent, bytes memory response) = address(ETHSCRIBER).delegatecall(\\n            bytes(_tokenURI)\\n        );\\n        if (!sent) revert InvalidFunctionCall(response);\\n    }\\n\\n    /**\\n     * @dev This function is used withdraw funds from the contract.\\n     */\\n    function withdraw() public {\\n        address(owner).call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    /* Receive ETH */\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"InvalidFunctionCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NonExistantContractOrToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NotEnoughETHProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHSCRIBER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ethscribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ETHScriberURI", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}