{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/bb/contracts/BBCSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\n// Deployed with the Atlas IDE\\n// https://app.atlaszk.com\\n\\npragma solidity ^0.8.0;\\n\\nimport './IERC20Upgradeable.sol';\\n\\ncontract SwapContract {\\n \\n    address payable public owner;    \\n    IERC20Upgradeable public BBC; \\n    IERC20Upgradeable public USDT; \\n    uint256 public BBC_DECIMALS = 18; \\n    uint256 public USDT_DECIMALS = 18;  \\n    uint256 public rateToBBC = 1;     // 1 BBC = 50 USDT\\n    uint256 public rateToUSDT = 50;   // 1 USDT = 1 / 50 BBC = 0.02 BBC \\n    uint256 public feeRate = 10;  // \u624b\u7eed\u8d39\u7387,\u5355\u4f4d\u4e3a%\\n\\n\\n    event Swap(address indexed inputToken, uint256 inputAmount, address indexed outputToken, uint256 outputAmount, address indexed recipient);\\n\\n    // Define the addresses of the tokens \\n    constructor() {        \\n        owner = payable(msg.sender); \\n        BBC = IERC20Upgradeable(0xfd332080C56273bdA14E9C8250b5d6Bcc43dB4D5);        \\n        USDT = IERC20Upgradeable(0x55d398326f99059fF775485246999027B3197955); \\n    } \\n\\n    modifier onlyOwner() {        \\n        require(msg.sender == owner, \\\"Not the contract owner\\\"); \\n        _;    \\n    } \\n    \\n    function transferOwnership(address payable  newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Invalid new owner address.\\\");\\n        owner = newOwner;\\n    }\\n\\n  function swap(address payable _inputToken,  uint256 _inputAmount, address payable _outputToken, address payable _to) public returns (uint256) {\\n    require(_inputToken != address(0), \\\"Invalid input token address\\\");\\n    require(_outputToken != address(0), \\\"Invalid output token address\\\");\\n    require(_to != address(0), \\\"Invalid recipient address\\\");\\n\\n    IERC20Upgradeable inputToken = IERC20Upgradeable(_inputToken);\\n    IERC20Upgradeable outputToken = IERC20Upgradeable(_outputToken);\\n \\n\\n    require(inputToken != outputToken, \\\"Input and output tokens must be different\\\");\\n    // \u68c0\u67e5\u8f93\u5165\u4ee3\u5e01\u4f59\u989d\u662f\u5426\u8db3\u591f\\n    require(inputToken.balanceOf(msg.sender) >= _inputAmount, \\\"Insufficient input token balance\\\");\\n\\n\\n   if(inputToken == USDT) {\\n        // \u8ba1\u7b97\u53ef\u5151\u6362BBC\u6570\u91cf\\n        uint256 amountOut = convert(_inputAmount, true);   // toBBC = true\\n        // \u68c0\u67e5BBC\u4f59\u989d\u662f\u5426\u8db3\u591f\\n        require(BBC.balanceOf(address(this)) >= amountOut, \\\"Insufficient BBC balance in the contract\\\");\\n\\n        inputToken.transferFrom(msg.sender, address(this), _inputAmount);\\n        outputToken.transfer(_to, amountOut);\\n\\n        // \u89e6\u53d1Swap\u4e8b\u4ef6\\n        emit Swap(_inputToken, _inputAmount, _outputToken, amountOut, _to);\\n        return amountOut;\\n    } else if(inputToken == BBC) {\\n        // \u8ba1\u7b97\u53ef\u5151\u6362USDT\u6570\u91cf\\n        uint amountOut = convert(_inputAmount, false);   // toBBC = false\\n        // \u68c0\u67e5USDT\u4f59\u989d\u662f\u5426\u8db3\u591f\\n        require(USDT.balanceOf(address(this)) >= amountOut, \\\"Insufficient USDT balance in the contract\\\");\\n\\n        inputToken.transferFrom(msg.sender, address(this), _inputAmount); \\n        outputToken.transfer(_to, amountOut);\\n\\n        // \u89e6\u53d1Swap\u4e8b\u4ef6\\n        emit Swap(_inputToken, _inputAmount, _outputToken, amountOut, _to);\\n        return amountOut;\\n    } else {\\n        revert(\\\"Invalid token\\\");\\n    }\\n    \\n  }\\n\\n    function convert(uint256 inputAmount, bool toBBC) public view returns (uint256) {\\n        uint256 decRate;\\n        require(toBBC ? rateToBBC != 0 : rateToUSDT != 0, \\\"Invalid rate\\\");\\n\\n        if (toBBC) {\\n            // \u8ba1\u7b97\u6bd4\u7387\uff1a(1/50) => 1 BBC = 50 USDT\\n            decRate =  (10**(BBC_DECIMALS + USDT_DECIMALS)) * rateToBBC / rateToUSDT; \\n         } else {\\n           // \u8ba1\u7b97\u6bd4\u7387\uff1a (1/50) => 0.02 BBC = 1 USDT \\n           decRate =   (10**(BBC_DECIMALS + USDT_DECIMALS)) * rateToUSDT / rateToBBC;\\n         }\\n \\n        // \u8ba1\u7b97\u8f93\u51fa\u91d1\u989d\\n        uint256 _amountOut = inputAmount * decRate / (10**(USDT_DECIMALS + BBC_DECIMALS));\\n \\n        // \u8ba1\u7b97\u624b\u7eed\u8d39\\n        uint256 _feeAmount = (_amountOut * feeRate) / 100;\\n \\n        // \u68c0\u67e5\u624b\u7eed\u8d39\u662f\u5426\u8d85\u8fc7\u8f93\u5165\u6570\u91cf\\n        require(_feeAmount <= _amountOut, \\\"Invalid fee amount\\\");\\n\\n        _amountOut = _amountOut - _feeAmount;\\n \\n        return _amountOut;\\n    }\\n\\n  \\n\\n \\n\\n    //\u51fd\u6570\u8bbe\u7f6e\u624b\u7eed\u8d39\u7387\\n    function setFeeRate(uint _feeRate) external onlyOwner {\\n        feeRate = _feeRate;\\n    }\\n\\n    function setRateToBBC(uint256 _rateToBBC) external onlyOwner {\\n        rateToBBC = _rateToBBC;\\n    }\\n\\n    function setRateToUSDT(uint256 _rateToUSDT) external onlyOwner {\\n        rateToUSDT = _rateToUSDT;\\n    }\\n\\n    // \u63d0\u53d6 ERC20 Token \\n    function withdrawTokens(address tokenAddress, uint256 amount) external onlyOwner {        \\n        IERC20Upgradeable(tokenAddress).transfer(owner, amount); \\n    }\\n\\n    // \u63d0\u53d6 ETH\\n    function withdrawEther() external onlyOwner {\\n        payable(owner).transfer(address(this).balance);\\n    }\\n\\n    // \u5b58\u5165 USDT\\n    function depositUSDT(uint amount) external onlyOwner {\\n        USDT.transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    // \u5b58\u5165 BBC \\n    function depositBBC(uint amount) external onlyOwner {\\n        BBC.transferFrom(msg.sender, address(this), amount); \\n    }\\n\\n    // \u66ff\u6362BBC\u5730\u5740\\n    function setBbcToken(address _bbcToken) external onlyOwner {\\n        BBC = IERC20Upgradeable(_bbcToken);\\n    }\\n    // \u66ff\u6362USDT\u5730\u5740\\n    function setUsdtToken(address _usdtToken) external onlyOwner {\\n        USDT = IERC20Upgradeable(_usdtToken);\\n    }\\n\\n   // \u66ff\u6362 USDT \u7cbe\u5ea6\\n    function setUsdtDecimals(uint256 _decimals) external onlyOwner {\\n        USDT_DECIMALS = _decimals;\\n    }\\n\\n   // \u66ff\u6362 BBC \u7cbe\u5ea6\\n    function setBbcDecimals(uint256 _decimals) external onlyOwner {\\n        BBC_DECIMALS = _decimals;\\n    }\\n\\n    function getUSDTBalance(address _address) public view returns (uint) {\\n        return USDT.balanceOf(_address);\\n    }\\n\\n    function getBBCBalance(address _address) public view returns (uint) {\\n        return BBC.balanceOf(_address);\\n    }\\n\\n\\n\\n}\"\r\n    },\r\n    \"/bb/contracts/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\ninterface IERC20Upgradeable {\\n  function decimals() external view returns (uint8);\\n  function transferFrom(address from, address to, uint amount) external;\\n  function transfer(address payable to, uint amount) external;\\n  function balanceOf(address account) external view returns (uint256); \\n  function allowance(address owner, address spender) external view returns (uint256);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BBC\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BBC_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toBBC\",\"type\":\"bool\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositBBC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBBCBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUSDTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateToBBC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateToUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"setBbcDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bbcToken\",\"type\":\"address\"}],\"name\":\"setBbcToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rateToBBC\",\"type\":\"uint256\"}],\"name\":\"setRateToBBC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rateToUSDT\",\"type\":\"uint256\"}],\"name\":\"setRateToUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"setUsdtDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"}],\"name\":\"setUsdtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwapContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}