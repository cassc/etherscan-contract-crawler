{"SourceCode": "/***\r\n*     \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\r\n*    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d      \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u255d\r\n*    \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551      \u255a\u2588\u2588\u2588\u2554\u255d \r\n*    \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551      \u2588\u2588\u2554\u2588\u2588\u2557 \r\n*    \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551      \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2554\u255d \u2588\u2588\u2557\r\n*     \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d      \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\r\n*        \r\n * https://cocosbcx.io/\r\n                                  \r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2021 dego\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/library/Governance.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\ncontract Governance {\r\n\r\n    address public _governance;\r\n\r\n    constructor() public {\r\n        _governance = tx.origin;\r\n    }\r\n\r\n    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyGovernance {\r\n        require(msg.sender == _governance, \"not governance\");\r\n        _;\r\n    }\r\n\r\n    function setGovernance(address governance)  public  onlyGovernance\r\n    {\r\n        require(governance != address(0), \"new governance the zero address\");\r\n        emit GovernanceTransferred(_governance, governance);\r\n        _governance = governance;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/interface/ICocosVipBook.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface ICocosVipBook {\r\n    \r\n    function getVIPInfoxAddress(address from) external view\r\n        returns (\r\n            bytes32 name, uint256 laffID, uint256 laff_laffID,\r\n            uint256 referReward, uint256 claimReward,\r\n            uint256 lv1Count, uint256 lv2Count);\r\n    \r\n    function getVIPInfoxID(uint256 vipID) external view\r\n        returns (\r\n            address addr, bytes32 name, uint256 laffID, uint256 laff_laffID,\r\n            uint256 referReward, uint256 claimReward,\r\n            uint256 lv1Count, uint256 lv2Count);\r\n                \r\n    function hasRegistered(address from) external view returns (bool registered);\r\n}\r\n\r\n// File: contracts/library/TransferHelper.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    // function safeSetApprovalForAll(address token, address operator, bool _approved) internal {\r\n    //     // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n    //     (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n    //     require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    // }\r\n\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// File: contracts/interface/ILaunchpadController.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface ILaunchpadController {\r\n    function getMaxVipLevel() external view returns (uint);  // begin 0\r\n    function getVipLevel(uint power)external view returns (uint);  \r\n    function getShareAlloc(uint256 vipLevel) external view returns (uint);\r\n    function getTotalShareAlloc() external view returns (uint);\r\n    function getTeamWallet() external view returns (address);\r\n\r\n\r\n    function updateUserPower(address user, uint val, bool isIncreased) external ;\r\n}\r\n\r\n// File: contracts/interface/ILaunchpadPool.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface ILaunchpadPool {\r\n    function updateUserPower(address user, uint val, bool isIncreased) external ;\r\n}\r\n\r\n// File: contracts/LaunchpadPool.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LaunchpadPool is ILaunchpadPool, Governance, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 constant public INT_BASE = 100000;\r\n\r\n    bool private initialized_; // Flag of initialize data\r\n\r\n    // // user->viplevel + 1\r\n    mapping (address => uint256 ) public _userVipLevels;  \r\n\r\n    \r\n    uint256[] public _vipCounts;   // vip0 begin\r\n\r\n    uint256[] public _vipShares; // vip0 begin\r\n    bool public _hasRebase; \r\n\r\n    uint256 public _totalRaisedUser = 0;\r\n    uint256 public _totalDrawUser = 0;\r\n    mapping(address => uint) public _drawUserStatus;  // 0: init, 1: not, 2: ok\r\n\r\n    \r\n    address public _targetToken ;   // token of project\r\n    address public _costToken;  // cost token, if bnb, must wbnb\r\n\r\n    uint256 public _oneSharePrice = 0;       // price of one share\r\n\r\n    uint256 public _oneShareAmount = 0;\r\n\r\n    uint256 public _raisedStartTime = 0;\r\n\r\n    uint256 public _raisedEndTime = 0;\r\n\r\n    uint256 public _drawTime = 0;\r\n\r\n    uint256 public  _totalShares = 0; \r\n\r\n    address public _controller;\r\n\r\n    address public _vipBook;\r\n\r\n    address public _powerProxy;\r\n\r\n    uint256 public _drawFund = 0; \r\n\r\n    uint256 public _totalDrawFund = 0; \r\n\r\n    uint256 public _totalRaisedFund;\r\n\r\n    address public _projectTeamAddress; \r\n\r\n    uint256 public _maxVipLevel;\r\n\r\n    uint256 public _lv1Fee = 800;\r\n    uint256 public _lv2Fee = 200;\r\n    uint256 public _withdrawFee = 2000;      // int base\r\n\r\n    uint256 public _firstReleaseTime;\r\n    uint256 public _firstRate; \r\n    uint256 public _linearReleaseTime;\r\n    uint256 public _timeStep;\r\n    uint256 public _remainStepRate; \r\n\r\n    mapping (address => uint ) public  _unlockTimeRecords; \r\n    mapping (address => uint ) public  _unlockBalanceRecords; \r\n\r\n    event Withdraw(address indexed targetToken , address costToken, uint withdrawAmount, uint fee, \r\n        address projectAddress, address teamAddress);\r\n    event ChangeFee(uint indexed preWithdrawFee,  uint newWithdrawFee, uint feeType);\r\n    event Draw(address indexed user,  bool isIn);\r\n    event Raise(address indexed user,  uint amount);\r\n    event Release(address indexed user,  uint amount, address parent, uint lv1Amount, address grand, uint lv2Amount);\r\n    event eveRebase(address indexed user);\r\n\r\n    // --- Init ---\r\n    function initialize(address governance, address controller, address vipBook, address powerProxy, address targetToken, address costToken,  \r\n        uint256 oneSharePrice, uint256 oneShareAmount, uint256 raisedStartTime, uint256 raisedEndTime, uint256 drawTime, uint256 totalShares) public {\r\n        require(!initialized_, \"initialize: Already initialized!\");\r\n        require( raisedStartTime < raisedEndTime && raisedEndTime < drawTime, \"error time args\");\r\n\r\n\r\n        _governance = governance;\r\n\r\n        _controller = controller;\r\n\r\n        _vipBook = vipBook;\r\n\r\n        _powerProxy = powerProxy;\r\n\r\n        _targetToken = targetToken;\r\n        _costToken = costToken;\r\n\r\n        _oneSharePrice = oneSharePrice;\r\n        _oneShareAmount = oneShareAmount;\r\n        _raisedStartTime = raisedStartTime;\r\n        _raisedEndTime = raisedEndTime;\r\n        _drawTime = drawTime;\r\n\r\n        _totalShares = totalShares;\r\n\r\n        _projectTeamAddress = address(0x0);\r\n\r\n        _hasRebase = false;\r\n\r\n        _maxVipLevel = ILaunchpadController(_controller).getMaxVipLevel();\r\n\r\n        uint totalShareAlloc = ILaunchpadController(_controller).getTotalShareAlloc();\r\n        uint hasAllocShares = 0;\r\n        for(uint i = 0; i < _maxVipLevel-1; i++ ){\r\n            _vipCounts.push(0); \r\n            uint shareValRate = ILaunchpadController(_controller).getShareAlloc(i);\r\n            uint share = _totalShares.mul(shareValRate).div(totalShareAlloc);\r\n            hasAllocShares = hasAllocShares.add(share);\r\n            _vipShares.push(share);\r\n        }\r\n\r\n        _vipCounts.push(0); \r\n        _vipShares.push(_totalShares.sub(hasAllocShares));\r\n\r\n        initialized_ = true;\r\n    }\r\n\r\n    function raise() external nonReentrant{\r\n        require( _raisedStartTime <= block.timestamp && block.timestamp <= _raisedEndTime, \"not start or has end\");\r\n\r\n        bool hasRegistry = ICocosVipBook(_vipBook).hasRegistered(msg.sender);\r\n        require(hasRegistry, \"Only VIPs can participate\");\r\n\r\n        bool raised = hasRaised(msg.sender);\r\n        require(!raised, \"has raised\");\r\n\r\n        TransferHelper.safeTransferFrom(_costToken, msg.sender, address(this), _oneSharePrice);\r\n\r\n        emit Raise(msg.sender, _oneSharePrice);\r\n\r\n        _totalRaisedFund =  _totalRaisedFund.add(_oneSharePrice);\r\n\r\n        uint power = IERC20(_powerProxy).balanceOf(msg.sender);\r\n        doUpdateUserPower(msg.sender, power);\r\n\r\n        _totalRaisedUser = _totalRaisedUser.add(1);\r\n    }\r\n\r\n\r\n    function draw() external nonReentrant{\r\n        require( block.timestamp >= _drawTime, \"error time\");\r\n        require(_hasRebase, \"must after rebase\");\r\n\r\n        bool hasRegistry = ICocosVipBook(_vipBook).hasRegistered(msg.sender);\r\n        require(hasRegistry, \"Only VIPs can participate\");\r\n\r\n        bool raised = hasRaised(msg.sender);\r\n        require(raised, \"must raised\");\r\n\r\n        require(_drawUserStatus[msg.sender] == 0, \"has draw\");\r\n\r\n        uint vipLevel = _userVipLevels[msg.sender] - 1;\r\n\r\n        uint shareCount = _vipShares[vipLevel];\r\n        if(shareCount == 0){\r\n            doRefund(msg.sender);\r\n            return ;\r\n        }\r\n    \r\n        uint userCount = _vipCounts[vipLevel];\r\n        if( userCount == 0){\r\n            return ;\r\n        }\r\n\r\n        if(shareCount >= userCount){\r\n            doDraw(msg.sender);\r\n        }else{\r\n            uint val = shareCount.mul(INT_BASE).div(userCount);\r\n            uint seed = computerSeed(msg.sender)%INT_BASE;\r\n            if(seed <= val){\r\n                doDraw(msg.sender);\r\n            }else{\r\n                doRefund(msg.sender);\r\n            }\r\n        }\r\n        _vipCounts[vipLevel] =  _vipCounts[vipLevel].sub(1);\r\n\r\n        _totalDrawUser = _totalDrawUser.add(1);\r\n        \r\n    }\r\n\r\n    // desgin for web developer\r\n    function canClaim(address user) public view returns (bool) {\r\n        if( block.timestamp < _firstReleaseTime){\r\n            return false;\r\n        }\r\n        \r\n        if(_drawUserStatus[user] != 2){\r\n            return false;\r\n        }\r\n\r\n        if(_unlockBalanceRecords[user] == 0){\r\n            return false;\r\n        }\r\n\r\n        uint lastTime = _unlockTimeRecords[user];\r\n        if(lastTime > 0 && block.timestamp < _linearReleaseTime){\r\n            return false;\r\n        }\r\n\r\n        if(lastTime == _firstReleaseTime){\r\n            lastTime = _linearReleaseTime;\r\n        }\r\n\r\n        uint step = (block.timestamp.sub(lastTime)).div(_timeStep);\r\n        if(step == 0){\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function claim() external nonReentrant{\r\n        require(_unlockBalanceRecords[msg.sender] > 0, \"empty\");\r\n        require(_firstReleaseTime != 0, \"can't release\");\r\n        require(block.timestamp >= _firstReleaseTime, \"error time\");\r\n \r\n        uint lastTime = _unlockTimeRecords[msg.sender];\r\n        if(lastTime == 0){\r\n            // fist time\r\n            uint balance = _oneShareAmount.mul(_firstRate).div(INT_BASE);\r\n\r\n            distributeToken(msg.sender, balance);\r\n            _unlockTimeRecords[msg.sender] = _firstReleaseTime;\r\n        }else{            \r\n            require(block.timestamp >= _linearReleaseTime, \"error second time\"); \r\n\r\n            if(lastTime == _firstReleaseTime){\r\n                lastTime = _linearReleaseTime;\r\n                _unlockTimeRecords[msg.sender] = lastTime;\r\n            }\r\n            uint step = (block.timestamp.sub(lastTime)).div(_timeStep);\r\n            require(step > 0, \"wait\");\r\n            uint releaseBalance = 0;\r\n            if( step > 0){\r\n                releaseBalance = _oneShareAmount.mul(_remainStepRate).mul(step).div(INT_BASE);\r\n                if( releaseBalance > _unlockBalanceRecords[msg.sender] ){\r\n                    releaseBalance = _unlockBalanceRecords[msg.sender];\r\n                }\r\n\r\n                distributeToken(msg.sender, releaseBalance);\r\n                _unlockTimeRecords[msg.sender] = lastTime.add(step.mul(_timeStep));\r\n            }\r\n        }\r\n    }\r\n\r\n    function doDraw(address user) private {\r\n        // give token\r\n        _drawFund = _drawFund.add(_oneSharePrice);\r\n        _totalDrawFund = _totalDrawFund.add(_oneSharePrice);\r\n\r\n        _unlockBalanceRecords[user] = _oneShareAmount;  \r\n\r\n        uint vipLevel = _userVipLevels[user] - 1;\r\n        _vipShares[vipLevel] =  _vipShares[vipLevel].sub(1);\r\n        _drawUserStatus[msg.sender] = 2;\r\n        emit Draw(user, true);      \r\n    }\r\n\r\n\r\n    function distributeToken(address user, uint balance) private{\r\n\r\n        uint lv1Reward = balance.mul(_lv1Fee).div(INT_BASE);\r\n        uint lv2Reward = balance.mul(_lv2Fee).div(INT_BASE);\r\n\r\n        uint256 laffID = 0;\r\n        uint256 laff_laffID = 0;\r\n\r\n        (,laffID,laff_laffID,,,,) = ICocosVipBook(_vipBook).getVIPInfoxAddress(user);\r\n\r\n        // send to parent\r\n        address laffAddress;\r\n        (laffAddress,,,,,,,) =  ICocosVipBook(_vipBook).getVIPInfoxID(laffID);\r\n        TransferHelper.safeTransfer(_targetToken, laffAddress, lv1Reward);\r\n\r\n        // send to grand\r\n        address laff_laffAddress;\r\n        (laff_laffAddress,,,,,,,) =  ICocosVipBook(_vipBook).getVIPInfoxID(laff_laffID);\r\n        TransferHelper.safeTransfer(_targetToken, laff_laffAddress, lv2Reward);\r\n\r\n\r\n        uint realRaised = balance.sub(lv1Reward).sub(lv2Reward);\r\n        // send to msg.sender\r\n        TransferHelper.safeTransfer(_targetToken,  user, realRaised);\r\n\r\n        _unlockBalanceRecords[user] = _unlockBalanceRecords[user].sub(balance);\r\n\r\n        emit Release(user,  realRaised, laffAddress, lv1Reward, laff_laffAddress, lv2Reward);\r\n    }\r\n\r\n\r\n    function doRefund(address user) private{\r\n\r\n        TransferHelper.safeTransfer(_costToken, user, _oneSharePrice);\r\n        _drawUserStatus[msg.sender] = 1;\r\n        emit Draw(user, false);  \r\n    }\r\n\r\n    function rebaseShare() external{\r\n        require( _raisedEndTime < block.timestamp , \"not start\");\r\n        require(!_hasRebase, \"has rebase\");\r\n\r\n        for(uint i = _maxVipLevel - 1; i > 0; i-- ){\r\n            uint currentShare = _vipShares[i];\r\n            uint vipUserCount = _vipCounts[i];\r\n            if(currentShare > vipUserCount){\r\n                _vipShares[i] = vipUserCount;\r\n                _vipShares[i-1] += (currentShare - vipUserCount);\r\n            }\r\n\r\n        }\r\n        _hasRebase = true;\r\n        emit eveRebase(msg.sender);\r\n    }\r\n\r\n    /*\r\n     * widthdraw raise fund \r\n     */\r\n    function withdraw()  public  onlyGovernance {\r\n\r\n        require( block.timestamp > _raisedEndTime && _drawFund > 0, \"error time\");\r\n        require( _projectTeamAddress != address(0x0), \"recived address cant be null\");\r\n \r\n        address teamWallet = ILaunchpadController(_controller).getTeamWallet();\r\n        \r\n        uint withdrawFund = (INT_BASE.sub(_withdrawFee)).mul(_drawFund).div(INT_BASE);\r\n   \r\n        TransferHelper.safeTransfer(_costToken, _projectTeamAddress, withdrawFund);\r\n        TransferHelper.safeTransfer(_costToken, teamWallet, _drawFund.sub(withdrawFund));\r\n        \r\n        emit Withdraw(_targetToken, _costToken, withdrawFund, _drawFund.sub(withdrawFund), _projectTeamAddress, teamWallet);\r\n\r\n        _drawFund = 0;\r\n    }\r\n\r\n\r\n    // just for emergency, onlyGovernance\r\n    function emergencyWithdraw(address token, address targetAddress, uint256 value) external onlyGovernance(){\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        require(balance >= value, \"too much value\");\r\n        TransferHelper.safeTransfer(token, targetAddress, value);\r\n    } \r\n\r\n    function setProjectTeamAddress(address addr) external onlyGovernance{\r\n        _projectTeamAddress = addr;\r\n    }\r\n    \r\n\r\n    function setCostToken(address costToken) external onlyGovernance(){\r\n        _costToken = costToken;\r\n    }\r\n\r\n    function setOneSharePrice(uint256 oneSharePrice) external onlyGovernance(){\r\n        _oneSharePrice = oneSharePrice;\r\n    }\r\n\r\n    function setRaisedStartTime(uint256 raisedStartTime) external onlyGovernance(){\r\n        _raisedStartTime = raisedStartTime;\r\n    }\r\n\r\n    function setRaisedEndTime(uint256 raisedEndTime) external onlyGovernance(){\r\n        _raisedEndTime = raisedEndTime;\r\n    }\r\n\r\n    function setDrawTime(uint256 drawTime) external onlyGovernance(){\r\n        _drawTime = drawTime;\r\n    }\r\n\r\n    function setTotalShares(uint256 totalShares) external onlyGovernance(){\r\n        _totalShares = totalShares;\r\n    }\r\n\r\n    function doUpdateUserPower(address user, uint power) private {\r\n        uint vip = ILaunchpadController(_controller).getVipLevel(power);\r\n\r\n        uint oldVipLevel = _userVipLevels[user];\r\n        if( oldVipLevel > 0){\r\n            _vipCounts[oldVipLevel-1] -= 1;\r\n        }\r\n\r\n        _userVipLevels[user] = vip + 1;\r\n        _vipCounts[vip] += 1;\r\n    }\r\n\r\n    function hasRaised(address user) public view returns (bool) {\r\n        uint vipLevel = _userVipLevels[user];\r\n        return (vipLevel > 0);\r\n    }\r\n\r\n    modifier onlyController {\r\n        require( (msg.sender == _controller), \"not controller\");\r\n        _;\r\n    }\r\n\r\n    function updateUserPower(address user, uint val, bool isIncreased) external override \r\n        onlyController {\r\n\r\n        // no registry\r\n        bool hasRegistry = ICocosVipBook(_vipBook).hasRegistered(user);\r\n        if( !hasRegistry){\r\n            return ;\r\n        }\r\n\r\n        // no raise\r\n        bool raised = hasRaised(user);\r\n        if(!raised){\r\n            return ;\r\n        }\r\n\r\n        if(block.timestamp > _raisedEndTime){\r\n            return ;\r\n        }\r\n\r\n        \r\n        uint oldPower = IERC20(_powerProxy).balanceOf(user);\r\n        if(isIncreased){\r\n            doUpdateUserPower(user, oldPower.add(val));\r\n        }else{\r\n            doUpdateUserPower(user, oldPower.sub(val));\r\n        }\r\n    }\r\n\r\n    function getRaisedCount() external view returns (uint){\r\n        return _totalRaisedFund.div(_oneSharePrice);\r\n    }\r\n\r\n\r\n    function setController(address controller) external \r\n        onlyGovernance \r\n    {\r\n        require(controller != address(0), \"the zero address\");\r\n        _controller = controller;\r\n    }\r\n\r\n\r\n\r\n    function setVipBook(address vipBook) external \r\n        onlyGovernance \r\n    {\r\n        require(vipBook != address(0), \"the zero address\");\r\n        _vipBook = vipBook;\r\n    }\r\n\r\n\r\n    function setPowerProxy(address powerProxy) external \r\n        onlyGovernance \r\n    {\r\n        require(powerProxy != address(0), \"the zero address\");\r\n        _powerProxy = powerProxy;\r\n    }\r\n\r\n\r\n   function setLV1Fee(uint256 fee) external \r\n        onlyGovernance \r\n    {\r\n        \r\n        require(fee != _lv1Fee && fee < INT_BASE,\"invalid args\");\r\n        emit ChangeFee(_lv1Fee, fee, 1);\r\n        _lv1Fee = fee;\r\n    }\r\n\r\n\r\n   function setLV2Fee(uint256 fee) external \r\n        onlyGovernance \r\n    {\r\n        \r\n        require(fee != _lv2Fee && fee < INT_BASE,\"invalid args\");\r\n        emit ChangeFee(_lv2Fee, fee, 2);\r\n        _lv2Fee = fee;\r\n    }\r\n\r\n\r\n   function setWithdrawFee(uint256 withdrawFee) external \r\n        onlyGovernance \r\n    {   \r\n        require(withdrawFee != _withdrawFee && withdrawFee < INT_BASE,\"invalid args\");\r\n        emit ChangeFee(_withdrawFee, withdrawFee, 0);\r\n        _withdrawFee = withdrawFee;\r\n    }\r\n\r\n    function setTargetToken(address targetToken) external \r\n        onlyGovernance \r\n    {   \r\n        require( targetToken != address(0x0), \"targetToken cant be null\");\r\n        require( block.timestamp < _firstReleaseTime, \"cant update\");\r\n        \r\n        _targetToken = targetToken;\r\n    }\r\n\r\n\r\n    function setUnlockArgs(uint256 firstReleaseTime, uint256 firstRate, \r\n        uint256 linearReleaseTime, uint256 timeStep, uint256 remainStepRate) external \r\n        onlyGovernance\r\n    {\r\n        _firstReleaseTime = firstReleaseTime;\r\n        _firstRate = firstRate; \r\n        _linearReleaseTime = linearReleaseTime;\r\n        _timeStep = timeStep;\r\n        _remainStepRate = remainStepRate;\r\n    }\r\n\r\n    function computerSeed( address user ) internal view returns (uint256) {\r\n        // from fomo3D\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(\r\n            //(user.balance).add\r\n            (block.timestamp).add\r\n            (block.difficulty).add\r\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\r\n            (block.gaslimit).add\r\n            ((uint256(keccak256(abi.encodePacked(user)))) / (now)).add\r\n            (block.number)\r\n            \r\n        )));\r\n        return seed;\r\n    }\r\n}\r\n\r\n// File: contracts/LaunchpadController.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CocosLaunchpadController is ILaunchpadController, Governance, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    bool private initialized_; // Flag of initialize data\r\n\r\n    uint256 public _maxVipLevel; \r\n\r\n    uint256[] public _defaultShareAllocRulers;  // base  100000\r\n\r\n    uint256[] public _vipOfPowerCounts; \r\n\r\n    address[] public _pools;\r\n\r\n    address public _currentPool; \r\n\r\n    \r\n    address public _teamWallet;\r\n\r\n    address public _vipBook;\r\n\r\n    address public _powerProxy;\r\n\r\n\r\n    address public _updatePowerCaller;\r\n    \r\n    event eveCreatePool(\r\n        address indexed pool, address indexed targetToken, address indexed costToken,\r\n        uint256 oneSharePrice, uint256 oneShareAmount,\r\n        uint256 raisedStartTime, uint256 raisedEndTime, \r\n        uint256 drawTime, uint256 totalShares);\r\n\r\n\r\n    event eveUpdateCurrentPool(address indexed pool);\r\n\r\n    function initialize(address vipBook, address powerProxy, address teamWallet) public {\r\n        require(!initialized_, \"initialize: Already initialized!\");\r\n        _governance = msg.sender;\r\n\r\n        _maxVipLevel = 4;\r\n        _teamWallet = teamWallet;\r\n        _vipBook = vipBook;\r\n \r\n        _powerProxy = powerProxy;\r\n\r\n        _defaultShareAllocRulers.push(5000);\r\n        _defaultShareAllocRulers.push(15000);\r\n        _defaultShareAllocRulers.push(30000);\r\n        _defaultShareAllocRulers.push(50000);\r\n\r\n        _vipOfPowerCounts.push(0);\r\n        _vipOfPowerCounts.push(500 ether);\r\n        _vipOfPowerCounts.push(3000 ether);\r\n        _vipOfPowerCounts.push(10000 ether);\r\n\r\n        initialized_ = true;\r\n    }\r\n    \r\n    function setShareAlloc(uint256 vipLevel, uint val) external onlyGovernance {\r\n        require( vipLevel < _maxVipLevel, \"error vipLevel\");\r\n        _defaultShareAllocRulers[vipLevel] = val;\r\n    }\r\n\r\n    function setVipOfPower(uint256 vipLevel, uint pow) external onlyGovernance {\r\n        require( vipLevel < _maxVipLevel, \"error vipLevel\");\r\n        _vipOfPowerCounts[vipLevel] = pow;\r\n    }\r\n\r\n    function increaseVipLevel(uint256 power) external onlyGovernance {\r\n        // must change: _defaultShareAllocRulers after executing this\r\n        _defaultShareAllocRulers.push(0);\r\n        _vipOfPowerCounts.push(power);\r\n        _maxVipLevel++ ;\r\n    }\r\n\r\n\r\n    function createPool(\r\n        address targetToken, address costToken, uint256 oneSharePrice, \r\n        uint256 oneShareAmount, uint256 raisedStartTime, uint256 raisedEndTime, \r\n        uint256 drawTime, uint256 totalShares) \r\n        external returns(address) {\r\n        LaunchpadPool pool = new LaunchpadPool();\r\n        address poolAddress = address(pool);\r\n        //emit event\r\n        _pools.push(poolAddress);\r\n        address targetToken_ = targetToken;\r\n        address costToken_ = costToken;\r\n        uint256 oneSharePrice_ = oneSharePrice;\r\n        uint256 oneShareAmount_ = oneShareAmount;\r\n        uint256 raisedStartTime_ = raisedStartTime;\r\n        uint256 raisedEndTime_ = raisedEndTime;\r\n        uint256 drawTime_ = drawTime;\r\n        uint256 totalShares_ = totalShares;\r\n\r\n        pool.initialize(\r\n            _governance , address(this), _vipBook, \r\n            _powerProxy, targetToken_, costToken_, \r\n            oneSharePrice_, oneShareAmount_, raisedStartTime_, \r\n            raisedEndTime_, drawTime_, totalShares_);\r\n\r\n        _currentPool = poolAddress;\r\n\r\n        emit eveCreatePool(\r\n            _currentPool, targetToken_, costToken_,\r\n            oneSharePrice_, oneShareAmount_, raisedStartTime_, \r\n            raisedEndTime_, drawTime_, totalShares_);\r\n\r\n        return _currentPool;\r\n\r\n    }   \r\n\r\n    function updateCurrentPool(address pool) external onlyGovernance {\r\n        _currentPool = pool;\r\n        emit eveUpdateCurrentPool(_currentPool);\r\n    }\r\n\r\n    function getMaxVipLevel() external view override returns (uint256){\r\n        return _maxVipLevel;\r\n    }\r\n\r\n    function getShareAlloc(uint256 vipLevel) external view override returns (uint){\r\n        require( vipLevel < _maxVipLevel, \"error vipLevel\");\r\n        return _defaultShareAllocRulers[vipLevel];\r\n    }\r\n\r\n\r\n    function getTotalShareAlloc() external view override returns (uint){\r\n        uint totalShares = 0;\r\n\r\n        for(uint i = 0; i < _maxVipLevel; i++ ){\r\n            totalShares += _defaultShareAllocRulers[i];\r\n        }\r\n        return totalShares;\r\n    }\r\n\r\n    function getVipLevel(uint power)external view override returns (uint){\r\n        for(uint i = _maxVipLevel - 1; i >= 0; i--){\r\n            if( power >= _vipOfPowerCounts[i] ){\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n\r\n    function getTeamWallet() external view override  returns (address){\r\n        return _teamWallet;\r\n    }\r\n\r\n    \r\n    function changeTeamWallet(address newAddress) external \r\n        onlyGovernance \r\n    {\r\n        require(newAddress != address(0), \"the zero address\");\r\n        _teamWallet = newAddress;\r\n    }\r\n\r\n\r\n    function setVipBook(address vipBook) external \r\n        onlyGovernance \r\n    {\r\n        require(vipBook != address(0), \"the zero address\");\r\n        _vipBook = vipBook;\r\n    }\r\n\r\n\r\n    function setPowerProxy(address powerProxy) external \r\n        onlyGovernance \r\n    {\r\n        require(powerProxy != address(0), \"the zero address\");\r\n        _powerProxy = powerProxy;\r\n    }\r\n\r\n    function setUpdatePowerCaller(address addr) external \r\n        onlyGovernance \r\n    {\r\n        require(addr != address(0x0), \"the zero address\");\r\n        _updatePowerCaller = addr;\r\n    }\r\n\r\n\r\n    modifier onlyUpdatePowerCaller {\r\n        require( (_updatePowerCaller!= address(0x0)) && (msg.sender == _updatePowerCaller), \"not update power caller\");\r\n        _;\r\n    }\r\n\r\n\r\n    function updateUserPower(address user, uint val, bool isIncreased) external  override onlyUpdatePowerCaller {\r\n        if(_currentPool != address(0x0)){\r\n            ILaunchpadPool(_currentPool).updateUserPower(user, val, isIncreased);\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"preWithdrawFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeType\",\"type\":\"uint256\"}],\"name\":\"ChangeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isIn\",\"type\":\"bool\"}],\"name\":\"Draw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Raise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lv1Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"grand\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lv2Amount\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"costToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"projectAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"eveRebase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INT_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_costToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_drawFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_drawTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_drawUserStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_firstRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_firstReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_linearReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lv1Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lv2Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxVipLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_oneShareAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_oneSharePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_powerProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_projectTeamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_raisedEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_raisedStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_remainStepRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_targetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_timeStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalDrawFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalDrawUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalRaisedFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalRaisedUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_unlockBalanceRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_unlockTimeRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userVipLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_vipBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_vipCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_vipShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaisedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasRaised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vipBook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"powerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"costToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oneSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oneShareAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raisedStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raisedEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"costToken\",\"type\":\"address\"}],\"name\":\"setCostToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drawTime\",\"type\":\"uint256\"}],\"name\":\"setDrawTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setLV1Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setLV2Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"oneSharePrice\",\"type\":\"uint256\"}],\"name\":\"setOneSharePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"powerProxy\",\"type\":\"address\"}],\"name\":\"setPowerProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setProjectTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raisedEndTime\",\"type\":\"uint256\"}],\"name\":\"setRaisedEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"raisedStartTime\",\"type\":\"uint256\"}],\"name\":\"setRaisedStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"}],\"name\":\"setTargetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"setTotalShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"linearReleaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainStepRate\",\"type\":\"uint256\"}],\"name\":\"setUnlockArgs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vipBook\",\"type\":\"address\"}],\"name\":\"setVipBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isIncreased\",\"type\":\"bool\"}],\"name\":\"updateUserPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LaunchpadPool", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1ddb227796810fab93bf7d4305c78e5f5ccd47484c5187b5c24afd2abdebede3"}