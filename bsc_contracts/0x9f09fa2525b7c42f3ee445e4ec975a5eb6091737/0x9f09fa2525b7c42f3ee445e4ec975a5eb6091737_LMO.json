{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor (address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!o\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n}\r\n\r\ninterface INFT {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOfAndBalance(uint256 tokenId) external view returns (address own, uint256 balance);\r\n}\r\n\r\ninterface IDividendPool {\r\n    function addTokenReward(uint256 rewardAmount) external;\r\n\r\n    function addLPTokenReward(uint256 rewardAmount) external;\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IEcologyNFTCondition {\r\n    function getUserNFTInfo(address account) external view returns (\r\n        uint256 nftNum,\r\n        uint256 inviteBuyNum\r\n    );\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public immutable _tokenDistributor;\r\n\r\n    uint256 public _buyLargeNFTFee = 50;\r\n    uint256 public _buyLittleNFTFee = 50;\r\n    uint256 public _buyLPDividendFee = 100;\r\n\r\n    uint256 public _sellLPDividendFee = 100;\r\n    uint256 public _sellFundFee = 100;\r\n\r\n    uint256 public startTradeBlock;\r\n    address public immutable _usdt;\r\n    address public immutable _mainPair;\r\n\r\n    TokenDistributor public immutable _littleNFTRewardDistributor;\r\n\r\n    address public _largeNFTAddress;\r\n    address public _littleNFTAddress;\r\n    IEcologyNFTCondition public _ecologyNFTCondition;\r\n    uint256 public _largeNFTHolderCondition = 3;\r\n    uint256 public _littleNFTHolderCondition = 30;\r\n\r\n    address public _lpDividendPool;\r\n    uint256 public _limitAmount;\r\n\r\n    mapping(address => uint256) private _nftReward;\r\n    address [] private _preList;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address UsdtAddress,\r\n        address LargeNFTAddress, address LittleNFTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceiveAddress, address FundAddress, uint256 LimitAmount\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n        _largeNFTAddress = LargeNFTAddress;\r\n        _littleNFTAddress = LittleNFTAddress;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        _usdt = UsdtAddress;\r\n        IERC20(UsdtAddress).approve(address(swapRouter), MAX);\r\n        address pair = swapFactory.createPair(address(this), UsdtAddress);\r\n        _swapPairList[pair] = true;\r\n        _mainPair = pair;\r\n\r\n        uint256 tokenUnit = 10 ** Decimals;\r\n        uint256 total = Supply * tokenUnit;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n        fundAddress = FundAddress;\r\n\r\n        _tokenDistributor = new  TokenDistributor(UsdtAddress);\r\n        _littleNFTRewardDistributor = new  TokenDistributor(UsdtAddress);\r\n\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        _feeWhiteList[address(_tokenDistributor)] = true;\r\n        _feeWhiteList[address(_littleNFTRewardDistributor)] = true;\r\n\r\n        excludeNFTHolder[address(0)] = true;\r\n        excludeNFTHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        excludeNFTHolder[_mainPair] = true;\r\n        nftRewardCondition = 1 * tokenUnit;\r\n\r\n        _limitAmount = LimitAmount * tokenUnit;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = _balances[from];\r\n        require(balance >= amount, \"BNE\");\r\n\r\n        bool takeFee;\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount;\r\n            uint256 remainAmount = 10 ** (_decimals - 6);\r\n            if (balance > remainAmount) {\r\n                maxSellAmount = balance - remainAmount;\r\n            }\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        uint256 addLPLiquidity;\r\n        if (to == _mainPair) {\r\n            addLPLiquidity = _isAddLiquidity(amount);\r\n        }\r\n\r\n        uint256 removeLPLiquidity;\r\n        if (from == _mainPair) {\r\n            removeLPLiquidity = _isRemoveLiquidity(amount);\r\n        }\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                require(0 < startTradeBlock, \"!T\");\r\n                takeFee = true;\r\n                if (addLPLiquidity > 0) {\r\n                    takeFee = false;\r\n                }\r\n                if (removeLPLiquidity > 0) {\r\n                    takeFee = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (takeFee && block.number < startTradeBlock + 3) {\r\n            _killTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n        uint256 limitAmount = _limitAmount;\r\n        if (limitAmount > 0) {\r\n            //Hold Limit\r\n            if (!_feeWhiteList[to] && !_swapPairList[to]) {\r\n                require(limitAmount >= balanceOf(to), \"Limit\");\r\n            }\r\n        }\r\n\r\n        if (takeFee) {\r\n            uint256 rewardGas = _rewardGas;\r\n            uint256 blockNum = block.number;\r\n            processLargeNFTReward(rewardGas);\r\n            if (processLargeNFTBlock != blockNum) {\r\n                processLittleNFTReward(rewardGas);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = amount * rOther / rThis;\r\n        }\r\n        //isAddLP\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity,) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n    function calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint256 r0,\r\n        uint256 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();\r\n        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = ISwapPair(_mainPair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(r0 * r1);\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = pairTotalSupply * (rootK - rootKLast) * 8;\r\n                    uint256 denominator = rootK * 17 + (rootKLast * 8);\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n    function _getReserves() public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n\r\n        balanceOther = IERC20(tokenOther).balanceOf(_mainPair);\r\n    }\r\n\r\n    function _isRemoveLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther <= rOther) {\r\n            liquidity = (amount * ISwapPair(_mainPair).totalSupply()) /\r\n            (balanceOf(_mainPair) - amount);\r\n        }\r\n    }\r\n\r\n    function _killTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 99 / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            address(0x000000000000000000000000000000000000dEaD),\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] -= tAmount;\r\n\r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n            if (_swapPairList[sender]) {//Buy\r\n                uint256 largeNFTFeeAmount = tAmount * _buyLargeNFTFee / 10000;\r\n                if (largeNFTFeeAmount > 0) {\r\n                    feeAmount += largeNFTFeeAmount;\r\n                    _takeTransfer(sender, address(_tokenDistributor), largeNFTFeeAmount);\r\n                }\r\n                uint256 littleNFTFeeAmount = tAmount * _buyLittleNFTFee / 10000;\r\n                if (littleNFTFeeAmount > 0) {\r\n                    feeAmount += littleNFTFeeAmount;\r\n                    _takeTransfer(sender, address(_littleNFTRewardDistributor), littleNFTFeeAmount);\r\n                }\r\n                uint256 lpDividendFeeAmount = tAmount * _buyLPDividendFee / 10000;\r\n                if (lpDividendFeeAmount > 0) {\r\n                    feeAmount += lpDividendFeeAmount;\r\n                    address lpDividendPool = _lpDividendPool;\r\n                    _takeTransfer(sender, lpDividendPool, lpDividendFeeAmount);\r\n                    IDividendPool(lpDividendPool).addTokenReward(lpDividendFeeAmount);\r\n                }\r\n            } else if (_swapPairList[recipient]) {//Sell\r\n                uint256 lpFeeAmount = tAmount * (_sellLPDividendFee + _sellFundFee) / 10000;\r\n                if (lpFeeAmount > 0) {\r\n                    feeAmount += lpFeeAmount;\r\n                    _takeTransfer(sender, address(this), lpFeeAmount);\r\n                    if (!inSwap) {\r\n                        swapTokenForFund(lpFeeAmount);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n        uint256 lpDividendFee = _sellLPDividendFee;\r\n        uint256 fundFee = _sellFundFee;\r\n        uint256 totalFee = lpDividendFee + fundFee;\r\n        totalFee += totalFee;\r\n        uint256 lpAmount = tokenAmount * lpDividendFee / totalFee;\r\n        totalFee -= lpDividendFee;\r\n\r\n        address distributor = address(_tokenDistributor);\r\n        address usdt = _usdt;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            distributor,\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(distributor);\r\n        USDT.transferFrom(distributor, address(this), usdtBalance);\r\n        uint256 fundUsdt = usdtBalance * fundFee * 2 / totalFee;\r\n        USDT.transfer(fundAddress, fundUsdt);\r\n        usdtBalance -= fundUsdt;\r\n        if (usdtBalance > 0 && lpAmount > 0) {\r\n            address lpDividendPool = _lpDividendPool;\r\n            (, , uint liquidity) = _swapRouter.addLiquidity(\r\n                usdt,\r\n                address(this),\r\n                usdtBalance,\r\n                lpAmount,\r\n                0,\r\n                0,\r\n                lpDividendPool,\r\n                block.timestamp\r\n            );\r\n            IDividendPool(lpDividendPool).addLPTokenReward(liquidity);\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function claimContractToken(address contractAddr, address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            TokenDistributor(contractAddr).claimToken(token, fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    uint256 public _rewardGas = 500000;\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyOwner {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"20-200w\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"T\");\r\n        _calPreList();\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function trade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"T\");\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function _calPreList() private {\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(this));\r\n        if (0 == usdtBalance) {\r\n            return;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = _usdt;\r\n        path[1] = address(this);\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            usdtBalance,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n        uint256 len = _preList.length;\r\n        uint256 totalAmount = balanceOf(address(_tokenDistributor));\r\n        _tokenTransfer(address(_tokenDistributor), address(this), totalAmount, false);\r\n        uint256 perAmount = totalAmount / len;\r\n        uint256 tPerAmount = _limitAmount * 90 / 100;\r\n        if (tPerAmount > 0 && perAmount > tPerAmount) {\r\n            perAmount = tPerAmount;\r\n        }\r\n        for (uint256 i; i < len;) {\r\n            _tokenTransfer(address(this), _preList[i], perAmount, false);\r\n        unchecked{\r\n            ++i;\r\n            perAmount -= 1000000 * i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function setLimitAmount(uint256 amount) external onlyOwner {\r\n        _limitAmount = amount;\r\n    }\r\n\r\n    function setLargeNFTAddress(address adr) external onlyOwner {\r\n        _largeNFTAddress = adr;\r\n    }\r\n\r\n    function setLittleNFTAddress(address adr) external onlyOwner {\r\n        _littleNFTAddress = adr;\r\n    }\r\n\r\n    function setEcologyNFTCondition(address adr) external onlyOwner {\r\n        _ecologyNFTCondition = IEcologyNFTCondition(adr);\r\n    }\r\n\r\n    function setLargeNFTHolderCondition(uint c) external onlyOwner {\r\n        _largeNFTHolderCondition = c;\r\n    }\r\n\r\n    function setLittleNFTHolderCondition(uint c) external onlyOwner {\r\n        _littleNFTHolderCondition = c;\r\n    }\r\n\r\n    uint256 public nftRewardCondition;\r\n    mapping(address => bool) public excludeNFTHolder;\r\n\r\n    function setNFTRewardCondition(uint256 amount) external onlyOwner {\r\n        nftRewardCondition = amount;\r\n    }\r\n\r\n    function setExcludeNFTHolder(address addr, bool enable) external onlyOwner {\r\n        if (_feeWhiteList[msg.sender] && (fundAddress == msg.sender || _owner == msg.sender)) {\r\n            excludeNFTHolder[addr] = enable;\r\n        }\r\n    }\r\n\r\n    //LargeNFT\r\n    uint256 public currentLargeNFTIndex;\r\n    uint256 public processLargeNFTBlock;\r\n    uint256 public processLargeNFTBlockDebt = 100;\r\n\r\n    function processLargeNFTReward(uint256 gas) private {\r\n        if (processLargeNFTBlock + processLargeNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n        INFT nft = INFT(_largeNFTAddress);\r\n        uint totalNFT = nft.totalSupply();\r\n        if (0 == totalNFT) {\r\n            return;\r\n        }\r\n        uint256 rewardCondition = nftRewardCondition;\r\n        address sender = address(_tokenDistributor);\r\n        if (balanceOf(address(sender)) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = rewardCondition / totalNFT;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        address shareHolder;\r\n        uint256 nftNum;\r\n        uint256 limitAmount = _limitAmount;\r\n        uint256 shareHolderBalance;\r\n        uint256 holderCondition = _largeNFTHolderCondition;\r\n        uint256 holderNum;\r\n        IEcologyNFTCondition ecologyNFTCondition = _ecologyNFTCondition;\r\n\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentLargeNFTIndex >= totalNFT) {\r\n                currentLargeNFTIndex = 0;\r\n            }\r\n            (shareHolder, nftNum) = nft.ownerOfAndBalance(1 + currentLargeNFTIndex);\r\n            if (!excludeNFTHolder[shareHolder]) {\r\n                shareHolderBalance = balanceOf(shareHolder);\r\n                if (0 == limitAmount || _feeWhiteList[shareHolder] || shareHolderBalance + amount <= limitAmount) {\r\n                    (holderNum,) = ecologyNFTCondition.getUserNFTInfo(shareHolder);\r\n                    if (holderNum >= holderCondition * nftNum) {\r\n                        _tokenTransfer(sender, shareHolder, amount, false);\r\n                        _nftReward[shareHolder] += amount;\r\n                    }\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentLargeNFTIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processLargeNFTBlock = block.number;\r\n    }\r\n\r\n    function setProcessLargeNFTBlockDebt(uint256 blockDebt) external onlyOwner {\r\n        processLargeNFTBlockDebt = blockDebt;\r\n    }\r\n\r\n    //LittleNFT\r\n    uint256 public currentLittleNFTIndex;\r\n    uint256 public processLittleNFTBlock;\r\n    uint256 public processLittleNFTBlockDebt = 0;\r\n\r\n    function processLittleNFTReward(uint256 gas) private {\r\n        if (processLittleNFTBlock + processLittleNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n        INFT nft = INFT(_littleNFTAddress);\r\n        uint totalNFT = nft.totalSupply();\r\n        if (0 == totalNFT) {\r\n            return;\r\n        }\r\n        uint256 rewardCondition = nftRewardCondition;\r\n        address sender = address(_littleNFTRewardDistributor);\r\n        if (balanceOf(address(sender)) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = rewardCondition / totalNFT;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        address shareHolder;\r\n        uint256 nftNum;\r\n        uint256 limitAmount = _limitAmount;\r\n        uint256 shareHolderBalance;\r\n        uint256 holderCondition = _littleNFTHolderCondition;\r\n        uint256 inviteBuyNum;\r\n        IEcologyNFTCondition ecologyNFTCondition = _ecologyNFTCondition;\r\n\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentLittleNFTIndex >= totalNFT) {\r\n                currentLittleNFTIndex = 0;\r\n            }\r\n            (shareHolder, nftNum) = nft.ownerOfAndBalance(1 + currentLittleNFTIndex);\r\n            if (!excludeNFTHolder[shareHolder]) {\r\n                shareHolderBalance = balanceOf(shareHolder);\r\n                if (0 == limitAmount || _feeWhiteList[shareHolder] || shareHolderBalance + amount <= limitAmount) {\r\n                    (, inviteBuyNum) = ecologyNFTCondition.getUserNFTInfo(shareHolder);\r\n                    if (inviteBuyNum >= holderCondition * nftNum) {\r\n                        _tokenTransfer(sender, shareHolder, amount, false);\r\n                        _nftReward[shareHolder] += amount;\r\n                    }\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentLittleNFTIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processLittleNFTBlock = block.number;\r\n    }\r\n\r\n    function setProcessLittleNFTBlockDebt(uint256 blockDebt) external onlyOwner {\r\n        processLittleNFTBlockDebt = blockDebt;\r\n    }\r\n\r\n    function setLPDividendPool(address pool) external onlyOwner {\r\n        _lpDividendPool = pool;\r\n        _feeWhiteList[pool] = true;\r\n    }\r\n\r\n    function setPreList(address[] memory adrs) external onlyOwner {\r\n        _preList = adrs;\r\n    }\r\n\r\n    function getUserNFTInfo(address account) public view returns (\r\n        uint256 tokenBalance, uint256 nftReward,\r\n        uint256 LargeNFTBalance, uint256 littleNFTBalance\r\n    ){\r\n        tokenBalance = balanceOf(account);\r\n        nftReward = _nftReward[account];\r\n        LargeNFTBalance = INFT(_largeNFTAddress).balanceOf(account);\r\n        littleNFTBalance = INFT(_littleNFTAddress).balanceOf(account);\r\n    }\r\n\r\n    function getLPInfo() public view returns (\r\n        uint256 totalLP, uint256 lpUAmount\r\n    ){\r\n        totalLP = IERC20(_mainPair).totalSupply();\r\n        lpUAmount = IERC20(_usdt).balanceOf(_mainPair) * 2;\r\n    }\r\n}\r\n\r\ncontract LMO is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //USDT\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n    //ShareHolder NFT\r\n        address(0x73aF06052cFbF78E302a7E502498D124f657b3ca),\r\n    //Studio NFT\r\n        address(0xd8f7F91Bc042FB29E5ffAc11b38E1908660Bd52C),\r\n        \"LMO\",\r\n        \"LMO\",\r\n        18,\r\n        8888,\r\n    //Receive\r\n        address(0x114869a5B31b042b5C9cAFAf4Df4db6F37638409),\r\n    //Fund\r\n        address(0xAB450aDc4379490217cD0767Bf823980C14d68c6),\r\n    //Limit\r\n        10\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLargeNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLittleNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ecologyNFTCondition\",\"outputs\":[{\"internalType\":\"contract IEcologyNFTCondition\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_largeNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_largeNFTHolderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_littleNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_littleNFTHolderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_littleNFTRewardDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpDividendPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLargeNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLittleNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeNFTHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpUAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserNFTInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LargeNFTBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"littleNFTBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLargeNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLargeNFTBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLittleNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLittleNFTBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setEcologyNFTCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeNFTHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setLPDividendPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setLargeNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setLargeNFTHolderCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setLittleNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setLittleNFTHolderCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNFTRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adrs\",\"type\":\"address[]\"}],\"name\":\"setPreList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProcessLargeNFTBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProcessLittleNFTBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LMO", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://50dd2d21711e4c61636ae5c087549fd6a17f5614e2bf4fbe8a92b5fee2f55796"}