{"SourceCode": "/**\t\r\nContract Safemoon but better improved by a hidden DEV :)\r\n */\t\r\npragma solidity 0.6.12;\t\r\n// SPDX-License-Identifier: Unlicensed\t\r\ninterface IERC20 {\t\r\n    function totalSupply() external view returns (uint256);\t\r\n    /**\t\r\n     * @dev Returns the amount of tokens owned by `account`.\t\r\n     */\t\r\n    function balanceOf(address account) external view returns (uint256);\t\r\n    /**\t\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\t\r\n     *\t\r\n     * Returns a boolean value indicating whether the operation succeeded.\t\r\n     *\t\r\n     * Emits a {Transfer} event.\t\r\n     */\t\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\t\r\n    /**\t\r\n     * @dev Returns the remaining number of tokens that `spender` will be\t\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\t\r\n     * zero by default.\t\r\n     *\t\r\n     * This value changes when {approve} or {transferFrom} are called.\t\r\n     */\t\r\n    function allowance(address owner, address spender) external view returns (uint256);\t\r\n    /**\t\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\t\r\n     *\t\r\n     * Returns a boolean value indicating whether the operation succeeded.\t\r\n     *\t\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\t\r\n     * that someone may use both the old and the new allowance by unfortunate\t\r\n     * transaction ordering. One possible solution to mitigate this race\t\r\n     * condition is to first reduce the spender's allowance to 0 and set the\t\r\n     * desired value afterwards:\t\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\t\r\n     *\t\r\n     * Emits an {Approval} event.\t\r\n     */\t\r\n    function approve(address spender, uint256 amount) external returns (bool);\t\r\n    /**\t\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\t\r\n     * allowance mechanism. `amount` is then deducted from the caller's\t\r\n     * allowance.\t\r\n     *\t\r\n     * Returns a boolean value indicating whether the operation succeeded.\t\r\n     *\t\r\n     * Emits a {Transfer} event.\t\r\n     */\t\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\t\r\n    /**\t\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\t\r\n     * another (`to`).\t\r\n     *\t\r\n     * Note that `value` may be zero.\t\r\n     */\t\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\t\r\n    /**\t\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\t\r\n     * a call to {approve}. `value` is the new allowance.\t\r\n     */\t\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\t\r\n}\t\r\n/**\t\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\t\r\n * checks.\t\r\n *\t\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\t\r\n * in bugs, because programmers usually assume that an overflow raises an\t\r\n * error, which is the standard behavior in high level programming languages.\t\r\n * `SafeMath` restores this intuition by reverting the transaction when an\t\r\n * operation overflows.\t\r\n *\t\r\n * Using this library instead of the unchecked operations eliminates an entire\t\r\n * class of bugs, so it's recommended to use it always.\t\r\n */\t\r\n \t\r\nlibrary SafeMath {\t\r\n    /**\t\r\n     * @dev Returns the addition of two unsigned integers, reverting on\t\r\n     * overflow.\t\r\n     *\t\r\n     * Counterpart to Solidity's `+` operator.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - Addition cannot overflow.\t\r\n     */\t\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        uint256 c = a + b;\t\r\n        require(c >= a, \"SafeMath: addition overflow\");\t\r\n        return c;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\t\r\n     * overflow (when the result is negative).\t\r\n     *\t\r\n     * Counterpart to Solidity's `-` operator.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - Subtraction cannot overflow.\t\r\n     */\t\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\t\r\n     * overflow (when the result is negative).\t\r\n     *\t\r\n     * Counterpart to Solidity's `-` operator.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - Subtraction cannot overflow.\t\r\n     */\t\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\t\r\n        require(b <= a, errorMessage);\t\r\n        uint256 c = a - b;\t\r\n        return c;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\t\r\n     * overflow.\t\r\n     *\t\r\n     * Counterpart to Solidity's `*` operator.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - Multiplication cannot overflow.\t\r\n     */\t\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\t\r\n        // benefit is lost if 'b' is also tested.\t\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\t\r\n        if (a == 0) {\t\r\n            return 0;\t\r\n        }\t\r\n        uint256 c = a * b;\t\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\t\r\n        return c;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\t\r\n     * division by zero. The result is rounded towards zero.\t\r\n     *\t\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\t\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\t\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The divisor cannot be zero.\t\r\n     */\t\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        return div(a, b, \"SafeMath: division by zero\");\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\t\r\n     * division by zero. The result is rounded towards zero.\t\r\n     *\t\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\t\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\t\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The divisor cannot be zero.\t\r\n     */\t\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\t\r\n        require(b > 0, errorMessage);\t\r\n        uint256 c = a / b;\t\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\t\r\n        return c;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\t\r\n     * Reverts when dividing by zero.\t\r\n     *\t\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\t\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\t\r\n     * invalid opcode to revert (consuming all remaining gas).\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The divisor cannot be zero.\t\r\n     */\t\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\t\r\n     * Reverts with custom message when dividing by zero.\t\r\n     *\t\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\t\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\t\r\n     * invalid opcode to revert (consuming all remaining gas).\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The divisor cannot be zero.\t\r\n     */\t\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\t\r\n        require(b != 0, errorMessage);\t\r\n        return a % b;\t\r\n    }\t\r\n}\t\r\nabstract contract Context {\t\r\n    function _msgSender() internal view virtual returns (address payable) {\t\r\n        return msg.sender;\t\r\n    }\t\r\n    function _msgData() internal view virtual returns (bytes memory) {\t\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\t\r\n        return msg.data;\t\r\n    }\t\r\n}\t\r\n/**\t\r\n * @dev Collection of functions related to the address type\t\r\n */\t\r\nlibrary Address {\t\r\n    /**\t\r\n     * @dev Returns true if `account` is a contract.\t\r\n     *\t\r\n     * [IMPORTANT]\t\r\n     * ====\t\r\n     * It is unsafe to assume that an address for which this function returns\t\r\n     * false is an externally-owned account (EOA) and not a contract.\t\r\n     *\t\r\n     * Among others, `isContract` will return false for the following\t\r\n     * types of addresses:\t\r\n     *\t\r\n     *  - an externally-owned account\t\r\n     *  - a contract in construction\t\r\n     *  - an address where a contract will be created\t\r\n     *  - an address where a contract lived, but was destroyed\t\r\n     * ====\t\r\n     */\t\r\n    function isContract(address account) internal view returns (bool) {\t\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\t\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\t\r\n        // for accounts without code, i.e. `keccak256('')`\t\r\n        bytes32 codehash;\t\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\t\r\n        // solhint-disable-next-line no-inline-assembly\t\r\n        assembly { codehash := extcodehash(account) }\t\r\n        return (codehash != accountHash && codehash != 0x0);\t\r\n    }\t\r\n    /**\t\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\t\r\n     * `recipient`, forwarding all available gas and reverting on errors.\t\r\n     *\t\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\t\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\t\r\n     * imposed by `transfer`, making them unable to receive funds via\t\r\n     * `transfer`. {sendValue} removes this limitation.\t\r\n     *\t\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\t\r\n     *\t\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\t\r\n     * taken to not create reentrancy vulnerabilities. Consider using\t\r\n     * {ReentrancyGuard} or the\t\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\t\r\n     */\t\r\n    function sendValue(address payable recipient, uint256 amount) internal {\t\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\t\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\t\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\t\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\t\r\n    }\t\r\n    /**\t\r\n     * @dev Performs a Solidity function call using a low level `call`. A\t\r\n     * plain`call` is an unsafe replacement for a function call: use this\t\r\n     * function instead.\t\r\n     *\t\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\t\r\n     * function (like regular Solidity function calls).\t\r\n     *\t\r\n     * Returns the raw returned data. To convert to the expected return value,\t\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - `target` must be a contract.\t\r\n     * - calling `target` with `data` must not revert.\t\r\n     *\t\r\n     * _Available since v3.1._\t\r\n     */\t\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\t\r\n      return functionCall(target, data, \"Address: low-level call failed\");\t\r\n    }\t\r\n    /**\t\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\t\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\t\r\n     *\t\r\n     * _Available since v3.1._\t\r\n     */\t\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\t\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\t\r\n    }\t\r\n    /**\t\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\t\r\n     * but also transferring `value` wei to `target`.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - the calling contract must have an ETH balance of at least `value`.\t\r\n     * - the called Solidity function must be `payable`.\t\r\n     *\t\r\n     * _Available since v3.1._\t\r\n     */\t\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\t\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\t\r\n    }\t\r\n    /**\t\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\t\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\t\r\n     *\t\r\n     * _Available since v3.1._\t\r\n     */\t\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\t\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\t\r\n        return _functionCallWithValue(target, data, value, errorMessage);\t\r\n    }\t\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\t\r\n        require(isContract(target), \"Address: call to non-contract\");\t\r\n        // solhint-disable-next-line avoid-low-level-calls\t\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\t\r\n        if (success) {\t\r\n            return returndata;\t\r\n        } else {\t\r\n            // Look for revert reason and bubble it up if present\t\r\n            if (returndata.length > 0) {\t\r\n                // The easiest way to bubble the revert reason is using memory via assembly\t\r\n                // solhint-disable-next-line no-inline-assembly\t\r\n                assembly {\t\r\n                    let returndata_size := mload(returndata)\t\r\n                    revert(add(32, returndata), returndata_size)\t\r\n                }\t\r\n            } else {\t\r\n                revert(errorMessage);\t\r\n            }\t\r\n        }\t\r\n    }\t\r\n}\t\r\n/**\t\r\n * @dev Contract module which provides a basic access control mechanism, where\t\r\n * there is an account (an owner) that can be granted exclusive access to\t\r\n * specific functions.\t\r\n *\t\r\n * By default, the owner account will be the one that deploys the contract. This\t\r\n * can later be changed with {transferOwnership}.\t\r\n *\t\r\n * This module is used through inheritance. It will make available the modifier\t\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\t\r\n * the owner.\t\r\n */\t\r\ncontract Ownable is Context {\t\r\n    address private _owner;\t\r\n    address private _previousOwner;\t\r\n    uint256 private _lockTime;\t\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\t\r\n    /**\t\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\t\r\n     */\t\r\n    constructor () internal {\t\r\n        address msgSender = _msgSender();\t\r\n        _owner = msgSender;\t\r\n        emit OwnershipTransferred(address(0), msgSender);\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the address of the current owner.\t\r\n     */\t\r\n    function owner() public view returns (address) {\t\r\n        return _owner;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Throws if called by any account other than the owner.\t\r\n     */\t\r\n    modifier onlyOwner() {\t\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\t\r\n        _;\t\r\n    }\t\r\n     /**\t\r\n     * @dev Leaves the contract without owner. It will not be possible to call\t\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\t\r\n     *\t\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\t\r\n     * thereby removing any functionality that is only available to the owner.\t\r\n     */\t\r\n    function renounceOwnership() external virtual onlyOwner {\t\r\n        emit OwnershipTransferred(_owner, address(0));\t\r\n        _owner = address(0);\t\r\n    }\t\r\n    /**\t\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\t\r\n     * Can only be called by the current owner.\t\r\n     */\t\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\t\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\t\r\n        emit OwnershipTransferred(_owner, newOwner);\t\r\n        _owner = newOwner;\t\r\n    }\t\r\n    function getUnlockTime() external view returns (uint256) {\t\r\n        return _lockTime;\t\r\n    }\t\r\n    function getTime() external view returns (uint256) {\r\n        return now;\r\n    }\r\n    //Locks the contract for owner for the amount of time provided\t\r\n    function lock(uint256 time) external virtual onlyOwner {\t\r\n        _previousOwner = _owner;\t\r\n        _owner = address(0);\t\r\n        _lockTime = now + time;\t\r\n        emit OwnershipTransferred(_owner, address(0));\t\r\n    }\t\r\n    \t\r\n    //Unlocks the contract for owner when _lockTime is exceeds\t\r\n    function unlock() external virtual {\t\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\t\r\n        require(now > _lockTime , \"Contract is locked until 7 days\");\t\r\n        emit OwnershipTransferred(_owner, _previousOwner);\t\r\n        _owner = _previousOwner;\t\r\n    }\t\r\n}\t\r\n// pragma solidity >=0.5.0;\t\r\ninterface IPancakeswapV2Factory {\t\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\t\r\n    function feeTo() external view returns (address);\t\r\n    function feeToSetter() external view returns (address);\t\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\t\r\n    function allPairs(uint) external view returns (address pair);\t\r\n    function allPairsLength() external view returns (uint);\t\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\t\r\n    function setFeeTo(address) external;\t\r\n    function setFeeToSetter(address) external;\t\r\n}\t\r\n// pragma solidity >=0.5.0;\t\r\ninterface IPancakeswapV2Pair {\t\r\n    event Approval(address indexed owner, address indexed spender, uint value);\t\r\n    event Transfer(address indexed from, address indexed to, uint value);\t\r\n    function name() external pure returns (string memory);\t\r\n    function symbol() external pure returns (string memory);\t\r\n    function decimals() external pure returns (uint8);\t\r\n    function totalSupply() external view returns (uint);\t\r\n    function balanceOf(address owner) external view returns (uint);\t\r\n    function allowance(address owner, address spender) external view returns (uint);\t\r\n    function approve(address spender, uint value) external returns (bool);\t\r\n    function transfer(address to, uint value) external returns (bool);\t\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\t\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\t\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\t\r\n    function nonces(address owner) external view returns (uint);\t\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\t\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\t\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\t\r\n    event Swap(\t\r\n        address indexed sender,\t\r\n        uint amount0In,\t\r\n        uint amount1In,\t\r\n        uint amount0Out,\t\r\n        uint amount1Out,\t\r\n        address indexed to\t\r\n    );\t\r\n    event Sync(uint112 reserve0, uint112 reserve1);\t\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\t\r\n    function factory() external view returns (address);\t\r\n    function token0() external view returns (address);\t\r\n    function token1() external view returns (address);\t\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\t\r\n    function price0CumulativeLast() external view returns (uint);\t\r\n    function price1CumulativeLast() external view returns (uint);\t\r\n    function kLast() external view returns (uint);\t\r\n    function mint(address to) external returns (uint liquidity);\t\r\n    function burn(address to) external returns (uint amount0, uint amount1);\t\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\t\r\n    function skim(address to) external;\t\r\n    function sync() external;\t\r\n    function initialize(address, address) external;\t\r\n}\t\r\n// pragma solidity >=0.6.2;\t\r\ninterface IPancakeswapV2Router01 {\t\r\n    function factory() external pure returns (address);\t\r\n    function WETH() external pure returns (address);\t\r\n    function addLiquidity(\t\r\n        address tokenA,\t\r\n        address tokenB,\t\r\n        uint amountADesired,\t\r\n        uint amountBDesired,\t\r\n        uint amountAMin,\t\r\n        uint amountBMin,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\t\r\n    function addLiquidityETH(\t\r\n        address token,\t\r\n        uint amountTokenDesired,\t\r\n        uint amountTokenMin,\t\r\n        uint amountETHMin,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\t\r\n    function removeLiquidity(\t\r\n        address tokenA,\t\r\n        address tokenB,\t\r\n        uint liquidity,\t\r\n        uint amountAMin,\t\r\n        uint amountBMin,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external returns (uint amountA, uint amountB);\t\r\n    function removeLiquidityETH(\t\r\n        address token,\t\r\n        uint liquidity,\t\r\n        uint amountTokenMin,\t\r\n        uint amountETHMin,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external returns (uint amountToken, uint amountETH);\t\r\n    function removeLiquidityWithPermit(\t\r\n        address tokenA,\t\r\n        address tokenB,\t\r\n        uint liquidity,\t\r\n        uint amountAMin,\t\r\n        uint amountBMin,\t\r\n        address to,\t\r\n        uint deadline,\t\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\t\r\n    ) external returns (uint amountA, uint amountB);\t\r\n    function removeLiquidityETHWithPermit(\t\r\n        address token,\t\r\n        uint liquidity,\t\r\n        uint amountTokenMin,\t\r\n        uint amountETHMin,\t\r\n        address to,\t\r\n        uint deadline,\t\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\t\r\n    ) external returns (uint amountToken, uint amountETH);\t\r\n    function swapExactTokensForTokens(\t\r\n        uint amountIn,\t\r\n        uint amountOutMin,\t\r\n        address[] calldata path,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external returns (uint[] memory amounts);\t\r\n    function swapTokensForExactTokens(\t\r\n        uint amountOut,\t\r\n        uint amountInMax,\t\r\n        address[] calldata path,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external returns (uint[] memory amounts);\t\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\t\r\n        external\t\r\n        payable\t\r\n        returns (uint[] memory amounts);\t\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\t\r\n        external\t\r\n        returns (uint[] memory amounts);\t\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\t\r\n        external\t\r\n        returns (uint[] memory amounts);\t\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\t\r\n        external\t\r\n        payable\t\r\n        returns (uint[] memory amounts);\t\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\t\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\t\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\t\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\t\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\t\r\n}\t\r\n// pragma solidity >=0.6.2;\t\r\ninterface IPancakeswapV2Router02 is IPancakeswapV2Router01 {\t\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\t\r\n        address token,\t\r\n        uint liquidity,\t\r\n        uint amountTokenMin,\t\r\n        uint amountETHMin,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external returns (uint amountETH);\t\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\t\r\n        address token,\t\r\n        uint liquidity,\t\r\n        uint amountTokenMin,\t\r\n        uint amountETHMin,\t\r\n        address to,\t\r\n        uint deadline,\t\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\t\r\n    ) external returns (uint amountETH);\t\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\t\r\n        uint amountIn,\t\r\n        uint amountOutMin,\t\r\n        address[] calldata path,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external;\t\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\t\r\n        uint amountOutMin,\t\r\n        address[] calldata path,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external payable;\t\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\t\r\n        uint amountIn,\t\r\n        uint amountOutMin,\t\r\n        address[] calldata path,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external;\t\r\n}\t\r\n\r\n//Please remind yourself to change the decimals everywhere\r\ncontract SpaceJupiter   is Context, IERC20, Ownable {\t\r\n    using SafeMath for uint256;\t\r\n    using Address for address;\t\r\n    mapping (address => uint256) private _rOwned;\t\r\n    mapping (address => uint256) private _tOwned;\t\r\n    mapping (address => mapping (address => uint256)) private _allowances;\t\r\n    // 2 Mappings - one for the fundfee and one for the other fees\r\n    mapping (address => bool) private _isExcludedFromFee;\t\r\n    mapping (address => bool) private _isExcluded;\t\r\n    //Can block funds from a user to sell\r\n    mapping (address => bool) private _isBlacklisted;\t\r\n    \t\r\n    mapping(address=>bool) private _isExcludedFromFundFee;\t\r\n    address[] private _excluded;\t\r\n   \t\r\n    uint256 private constant MAX = ~uint256(0);\t\r\n    uint256 private constant _tTotal = 1000000000000000 * 10**6;\t\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\t\r\n    uint256 private _tFeeTotal;\t\r\n    string private constant _name = \"SpaceJupiter \";\t\r\n    string private constant _symbol = \"SJT\";\t\r\n    uint8 private constant _decimals = 6;\t\r\n    \t\r\n    uint256 public _fundFee = 0;\t\r\n    uint256 private _previousFundFee = _fundFee;\t\r\n    \t\r\n    address public _fundWallet = _msgSender();\t\r\n    address private _previousFundWallet = _fundWallet;\t\r\n    \t\r\n    uint256 public _shareFee = 0;\t\r\n    uint256 private _previousTaxFee = _shareFee;\t\r\n    \t\r\n    uint256 public _liquidityFee = 0;\t\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\t\r\n    IPancakeswapV2Router02 public immutable pancakeswapV2Router;\t\r\n    address public immutable pancakeswapV2Pair;\t\r\n    address public pancakeswapRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;   // it's pointing to Mainnet\r\n    \t//Mainnet: 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n    \t//Testnet 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n    bool inSwapAndLiquify;\t\r\n    bool public swapAndLiquifyEnabled = false;\t\r\n    \t\r\n    uint256 public _maxTxAmount = 1000000000000000 * 10**6;\t\r\n    \r\n\r\n      uint256 private minimumTokensBeforeSwap = 100000000000 * 10**6;\r\n    \t\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\t\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\t\r\n    event SwapAndLiquify(\t\r\n        uint256 tokensSwapped,\t\r\n        uint256 ethReceived,\t\r\n        uint256 tokensIntoLiquidity\t\r\n    );\t\r\n    event IncludeInReward(address);\t\r\n    event ExcludeFromLiquidityFee(address);\t\r\n    event IncludeInLiquidityFee(address);\t\r\n    event TaxFeeUpdated(uint256,uint256);\t\r\n    event LiquidityFeeUpdated(uint256,uint256);\t\r\n    event FundFee(uint256,uint256);\t\r\n    event OwnerTaxAccountUpdated(address,address);\t\r\n    event ExcludedFromFundFee(address);\t\r\n    event IncludedInFundFee(address);\r\n    event newPancakeswapRouterAddress(address);\r\n    event Blacklist(address);\r\n    \t\r\n    modifier lockTheSwap {\t\r\n        inSwapAndLiquify = true;\t\r\n        _;\t\r\n        inSwapAndLiquify = false;\t\r\n    }\t\r\n    \t\r\n    constructor() public {\t\r\n        _rOwned[_msgSender()] = _rTotal;\t\r\n        \t\r\n        \t\r\n        //Mainnet :0x10ED43C718714eb63d5aA57B78B54704E256024E\t\r\n        //Testnet: 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\t\r\n        IPancakeswapV2Router02 _pancakeswapV2Router = IPancakeswapV2Router02(pancakeswapRouterAddress);\t\r\n         // Create a pancakeswap pair for this new token\t\r\n        pancakeswapV2Pair = IPancakeswapV2Factory(_pancakeswapV2Router.factory())\t\r\n            .createPair(address(this), _pancakeswapV2Router.WETH());\t\r\n        // set the rest of the contract variables\t\r\n        pancakeswapV2Router = _pancakeswapV2Router;\t\r\n        \t\r\n        //exclude owner and this contract from fee\t\r\n        _isExcludedFromFee[owner()] = true;\t\r\n        _isExcludedFromFee[address(this)] = true;\t\r\n        \t\r\n        //exclude owner and this contract from fee\t\r\n        _isExcludedFromFundFee[owner()] = true;\t\r\n        _isExcludedFromFundFee[address(this)] = true;\t\r\n        \t\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\t\r\n    }\t\r\n    function name() external pure returns (string memory) {\t\r\n        return _name;\t\r\n    }\t\r\n    function symbol() external pure returns (string memory) {\t\r\n        return _symbol;\t\r\n    }\t\r\n    function decimals() external pure returns (uint8) {\t\r\n        return _decimals;\t\r\n    }\t\r\n    function totalSupply() external view override returns (uint256) {\t\r\n        return _tTotal;\t\r\n    }\t\r\n    function balanceOf(address account) public view override returns (uint256) {\t\r\n        if (_isExcluded[account]) return _tOwned[account];\t\r\n        return tokenFromReflection(_rOwned[account]);\t\r\n    }\t\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\t\r\n        _transfer(_msgSender(), recipient, amount);\t\r\n        return true;\t\r\n    }\t\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\t\r\n        return _allowances[owner][spender];\t\r\n    }\t\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\t\r\n        _approve(_msgSender(), spender, amount);\t\r\n        return true;\t\r\n    }\t\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\t\r\n        _transfer(sender, recipient, amount);\t\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\t\r\n        return true;\t\r\n    }\t\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\t\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\t\r\n        return true;\t\r\n    }\t\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\t\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\t\r\n        return true;\t\r\n    }\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \r\n    function totalFees() external view returns (uint256) {\t\r\n        return _tFeeTotal;\t\r\n    }\t\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\t\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\t\r\n        if (!deductTransferFee) {\t\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\t\r\n            return rAmount;\t\r\n        } else {\t\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\t\r\n            return rTransferAmount;\t\r\n        }\t\r\n    }\t\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\t\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\t\r\n        uint256 currentRate =  _getRate();\t\r\n        return rAmount.div(currentRate);\t\r\n    }\r\n        function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\t\r\n    function includeInReward(address account) external onlyOwner() {\t\r\n        require(_isExcluded[account], \"Account is not excluded\");\t\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\t\r\n            if (_excluded[i] == account) {\t\r\n                _excluded[i] = _excluded[_excluded.length - 1];\t\r\n                uint256 currentRate = _getRate();\r\n                _rOwned[account] = _tOwned[account].mul(currentRate);\r\n                _tOwned[account] = 0;\t\r\n                _isExcluded[account] = false;\t\r\n                _excluded.pop();\t\r\n                break;\t\r\n            }\t\r\n        }\t\r\n        \t\r\n        emit IncludeInReward(account);\t\r\n    }\t\r\n        function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\t\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\t\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\t\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\t\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \t\r\n        _takeLiquidity(tLiquidity);\t\r\n        _reflectFee(rFee, tFee);\t\r\n        emit Transfer(sender, recipient, tTransferAmount);\t\r\n    }\t\r\n    \t\r\n    function excludeFromLiquidityFee(address account) external onlyOwner {\t\r\n        _isExcludedFromFee[account] = true;\t\r\n        emit ExcludeFromLiquidityFee(account);\t\r\n    }\t\r\n    \r\n        function includeInBlacklist(address account) external onlyOwner {\t\r\n        _isBlacklisted[account] = true;\t\r\n        emit Blacklist(account);\t\r\n    }\r\n    \r\n    \r\n    function setminimumTokensBeforeSwap(uint256 _minimumTokensBeforeSwap) external onlyOwner() {\r\nminimumTokensBeforeSwap = _minimumTokensBeforeSwap;\r\n}\r\n    \tfunction minimumTokensBeforeSwapAmount() public view returns (uint256) {\r\nreturn minimumTokensBeforeSwap;\r\n}\r\n    \t\r\n\r\n    \t\r\n   function excludedFromFundFee(address account) external onlyOwner {\t\r\n        _isExcludedFromFundFee[account] = true;\t\r\n        emit ExcludedFromFundFee(account);\t\r\n    }\t\r\n        function includeInLiquidityFee(address account) external onlyOwner {\t\r\n         require( _isExcludedFromFee[account], \"Account is not excluded From liquidityFee\");\t\r\n        _isExcludedFromFee[account] = false;\t\r\n        emit IncludeInLiquidityFee(account);\t\r\n    }\t\r\n       \t\r\n\r\n    function includeInFundFee(address account) external onlyOwner{\t\r\n         require( _isExcludedFromFundFee[account], \"Account is not excluded From FundFee\");\t\r\n        _isExcludedFromFundFee[account] = false;\t\r\n        emit IncludedInFundFee(account);\t\r\n        \t\r\n    }\t\r\n        function removefromBlacklist(address account) external onlyOwner{\t\r\n         require( _isBlacklisted[account], \"Account is not excluded From FundFee\");\t\r\n        _isBlacklisted[account] = false;\t\r\n        emit Blacklist(account);\t\r\n        \t\r\n    }\t\r\n    \t\r\n    \t\r\n   \t\r\n    function setShareFeePercent(uint256 taxFee) external onlyOwner() {\t\r\n        _previousTaxFee = _shareFee;\t\r\n        _shareFee = taxFee;\t\r\n        emit TaxFeeUpdated(_previousTaxFee,_shareFee);\t\r\n    }\t\r\n    \t\r\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\t\r\n        _previousLiquidityFee = _liquidityFee;\t\r\n        _liquidityFee = liquidityFee;\t\r\n        \t\r\n        emit LiquidityFeeUpdated(_previousLiquidityFee,_liquidityFee);\t\r\n    }\t\r\n   \t//Could limit with this divider the MaxTx Amount to 0.01% of the Supply\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\r\n            10000\r\n        );\r\n    }\t\r\n    \t\r\n    function setFundFeePercent(uint256 _fundFeePercent) external onlyOwner() {\t\r\n        _previousFundFee = _fundFee;\t\r\n        _fundFee = _fundFeePercent;\t\r\n        emit FundFee(_previousFundFee,_fundFee);\t\r\n    }\t\r\n    \t\r\n    \t\r\n    function setOwnerTaxAccount(address _account) external onlyOwner() {\t\r\n        _previousFundWallet = _fundWallet;\t\r\n        _fundWallet = _account;\t\r\n        \t\r\n        emit OwnerTaxAccountUpdated(_previousFundWallet,_fundWallet);\t\r\n    }\t\r\n    \t\r\n    \t\r\n    \t\r\n    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {\t\r\n        swapAndLiquifyEnabled = _enabled;\t\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\t\r\n    }\t\r\n    \t\r\n     //to receive ETH from pancakeswapV2Router when swapping\t\r\n    receive() external payable {}\t\r\n    \t\r\n    \t\r\n    \t//Withdrawing stuck BNBs from the contract\r\n\t     function withdrawStuckBNBs() external onlyOwner {\t\r\n         msg.sender.transfer(address(this).balance);\t\r\n     }\t\r\n     \r\n     //Burning the stuck tokens to the FeeWallet\r\n         function burnStuckTokens(uint256 tAmount) external onlyOwner {\r\n        _tokenTransfer(address(this) ,address(0) ,tAmount ,false);\r\n    }\r\n    \t\r\n    \t\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\t\r\n        _rTotal = _rTotal.sub(rFee);\t\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\t\r\n    }\t\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\t\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\t\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\t\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\t\r\n    }\t\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\t\r\n        uint256 tFee = calculateTaxFee(tAmount);\t\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\t\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\t\r\n        return (tTransferAmount, tFee, tLiquidity);\t\r\n    }\t\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\t\r\n        uint256 rAmount = tAmount.mul(currentRate);\t\r\n        uint256 rFee = tFee.mul(currentRate);\t\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\t\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\t\r\n        return (rAmount, rTransferAmount, rFee);\t\r\n    }\t\r\n    function _getRate() private view returns(uint256) {\t\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\t\r\n        return rSupply.div(tSupply);\t\r\n    }\t\r\n    \r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\t\r\n        uint256 rSupply = _rTotal;\t\r\n        uint256 tSupply = _tTotal;      \t\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\t\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\t\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\t\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\t\r\n        }\t\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\t\r\n        return (rSupply, tSupply);\t\r\n    }\t\r\n    \t\r\n    function _takeLiquidity(uint256 tLiquidity) private {\t\r\n        uint256 currentRate =  _getRate();\t\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\t\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\t\r\n        if(_isExcluded[address(this)])\t\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\t\r\n    }\t\r\n    \t\r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\t\r\n        return _amount.mul(_shareFee).div(\t\r\n            10**2\t\r\n        );\t\r\n    }\t\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\t\r\n        return _amount.mul(_liquidityFee).div(\t\r\n            10**2\t\r\n        );\t\r\n    }\t\r\n    \t//Doenst implement the Fund Fee, be careful\r\n    function removeAllFee() private {\t\r\n        if(_shareFee == 0 && _liquidityFee == 0) return;\t\r\n        \t\r\n        _previousTaxFee = _shareFee;\t\r\n        _previousLiquidityFee = _liquidityFee;\t\r\n        \t\r\n        _shareFee = 0;\t\r\n        _liquidityFee = 0;\t\r\n    }\t\r\n    \t\r\n    function restoreAllFee() private {\t\r\n        _shareFee = _previousTaxFee;\t\r\n        _liquidityFee = _previousLiquidityFee;\t\r\n    }\t\r\n    \t\r\n    function isExcludedFromFee(address account) external view returns(bool) {\t\r\n        return _isExcludedFromFee[account];\t\r\n    }\t\r\n        function isBlacklisted(address account) external view returns(bool) {\t\r\n        return _isBlacklisted[account];\t\r\n    }\t\r\n    function _approve(address owner, address spender, uint256 amount) private {\t\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\t\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\t\r\n        _allowances[owner][spender] = amount;\t\r\n        emit Approval(owner, spender, amount);\t\r\n    }\t\r\n    function _transfer(\t\r\n        address from,\t\r\n        address to,\t\r\n        uint256 amount\t\r\n    ) private {\t\r\n        require(!_isBlacklisted[from], \"You are blacklisted\");\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\t\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\t\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\t\r\n        if(from != owner() && to != owner())\t\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\t\r\n            \t\r\n            \t\r\n            \t\r\n            \t\r\n        \t\r\n        \t\r\n        // is the token balance of this contract address over the min number of\t\r\n        // tokens that we need to initiate a swap + liquidity lock?\t\r\n        // also, don't get caught in a circular liquidity event.\t\r\n        // also, don't swap & liquify if sender is pancakeswap pair.\t\r\n        uint256 contractTokenBalance = balanceOf(address(this));\t\r\n        \t\r\n        if(contractTokenBalance >= _maxTxAmount)\t\r\n        {\t\r\n            contractTokenBalance = _maxTxAmount;\t\r\n        }\t\r\n        \t\r\n        bool overMinTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\t\r\n        if (\t\r\n            overMinTokenBalance &&\t\r\n            !inSwapAndLiquify &&\t\r\n            from != pancakeswapV2Pair &&\t\r\n            swapAndLiquifyEnabled\t\r\n        ) {\t\r\n            contractTokenBalance = minimumTokensBeforeSwap;\t\r\n            //add liquidity\t\r\n            swapAndLiquify(contractTokenBalance);\t\r\n        }\t\r\n        \t\r\n        //indicates if fee should be deducted from transfer\t\r\n        bool takeFee = true;\t\r\n        \t\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\t\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\t\r\n            takeFee = false;\t\r\n        }\t\r\n        \t\r\n        \t\r\n        if(_isExcludedFromFundFee[from]){\t\r\n          _tokenTransfer(from,to,amount,takeFee);  \t\r\n                \t\r\n        }else {\t\r\n            \t\r\n         //send tax to owner\t\r\n        uint256 _amountSentToOwner = amount.mul(_fundFee).div(10**2);\t\r\n        uint256 _remainingAmount =  amount.sub(_amountSentToOwner);\t\r\n            \t\r\n        _tokenTransfer(from,_fundWallet,_amountSentToOwner,takeFee);\t\r\n        //transfer amount, it will take tax, burn, liquidity fee\t\r\n        _tokenTransfer(from,to,_remainingAmount,takeFee);\t\r\n            \t\r\n        }\t\r\n        \t\r\n        \t\r\n        \t\r\n    }\t\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\t\r\n        // split the contract balance into halves\t\r\n        uint256 half = contractTokenBalance.div(2);\t\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\t\r\n        // capture the contract's current ETH balance.\t\r\n        // this is so that we can capture exactly the amount of ETH that the\t\r\n        // swap creates, and not make the liquidity event include any ETH that\t\r\n        // has been manually sent to the contract\t\r\n        uint256 initialBalance = address(this).balance;\t\r\n        // swap tokens for ETH\t\r\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\t\r\n        // how much ETH did we just swap into?\t\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\t\r\n        // add liquidity to pancakeswap\t\r\n        addLiquidity(otherHalf, newBalance);\t\r\n        \t\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\t\r\n    }\t\r\n    function swapTokensForEth(uint256 tokenAmount) private {\t\r\n        // generate the pancakeswap pair path of token -> weth\t\r\n        address[] memory path = new address[](2);\t\r\n        path[0] = address(this);\t\r\n        path[1] = pancakeswapV2Router.WETH();\t\r\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\t\r\n        // make the swap\t\r\n        pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\t\r\n            tokenAmount,\t\r\n            0, // accept any amount of ETH\t\r\n            path,\t\r\n            address(this),\t\r\n            block.timestamp\t\r\n        );\t\r\n    }\t\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\t\r\n        // approve token transfer to cover all possible scenarios\t\r\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\t\r\n        // add the liquidity\t\r\n        pancakeswapV2Router.addLiquidityETH{value: ethAmount}(\t\r\n            address(this),\t\r\n            tokenAmount,\t\r\n            0, // slippage is unavoidable\t\r\n            0, // slippage is unavoidable\t\r\n            owner(),\t\r\n            block.timestamp\t\r\n        );\t\r\n    }\t\r\n    //this method is responsible for taking all fee, if takeFee is true\t\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\t\r\n        if(!takeFee)\t\r\n            removeAllFee();\t\r\n        \t\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\t\r\n            _transferFromExcluded(sender, recipient, amount);\t\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\t\r\n            _transferToExcluded(sender, recipient, amount);\t\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\t\r\n            _transferBothExcluded(sender, recipient, amount);\t\r\n        } else {\t\r\n            _transferStandard(sender, recipient, amount);\t\r\n        }\t\r\n        \t\r\n        if(!takeFee)\t\r\n            restoreAllFee();\t\r\n    }\t\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\t\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\t\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\t\r\n        _takeLiquidity(tLiquidity);\t\r\n        _reflectFee(rFee, tFee);\t\r\n        emit Transfer(sender, recipient, tTransferAmount);\t\r\n    }\t\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\t\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\t\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\t\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \t\r\n        _takeLiquidity(tLiquidity);\t\r\n        _reflectFee(rFee, tFee);\t\r\n        emit Transfer(sender, recipient, tTransferAmount);\t\r\n    }\t\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\t\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\t\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\t\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \t\r\n        _takeLiquidity(tLiquidity);\t\r\n        _reflectFee(rFee, tFee);\t\r\n        emit Transfer(sender, recipient, tTransferAmount);\t\r\n    }\r\n    \r\n    function setPancakeSwapRouterAddress(address _newRouterAddress) external onlyOwner {\r\n        \r\n        pancakeswapRouterAddress = _newRouterAddress;\r\n        \r\n        emit newPancakeswapRouterAddress(_newRouterAddress);\r\n        \r\n        \r\n    }\r\n    \r\n    \t\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Blacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ExcludeFromLiquidityFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ExcludedFromFundFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"FundFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IncludeInLiquidityFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IncludeInReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"IncludedInFundFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LiquidityFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OwnerTaxAccountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TaxFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newPancakeswapRouterAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_fundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_shareFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"burnStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludedFromFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removefromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundFeePercent\",\"type\":\"uint256\"}],\"name\":\"setFundFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOwnerTaxAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRouterAddress\",\"type\":\"address\"}],\"name\":\"setPancakeSwapRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setShareFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"setminimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckBNBs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SpaceJupiter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f0f72fcc11ad81179bd99abb18577c2d9ad63d99db73cde9756ac7828bf0a701"}