{"SourceCode": "pragma solidity ^0.8.6;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()  {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract VenusToken is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping (address => bool) isDividendExempt;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _updated;\r\n    mapping(uint256 => FeeRates) public _levelFeeRates;\r\n    \r\n    uint256 private _tFeeTotal;\r\n    string private _name = \"Venus Token\";\r\n    string private _symbol = \"VUS\";\r\n    uint8 private _decimals = 18;\r\n\r\n    uint256 public level=1;\r\n    uint256 private _previousLevel;\r\n    bool public isSetLevel = false;\r\n\r\n    struct FeeRates {\r\n        uint256 burnFee;\r\n        uint256 lpFee;\r\n        uint256 cakeFee;\r\n        uint256 inviterFee;\r\n    }\r\n\r\n    event VenusTransfer(address indexed from, address indexed to, uint256 value,string Event);\r\n    uint256 [3] public  levelAmounts = [20000*10**18,50000*10**18,100000*10**18];\r\n    // uint256[4][4] _levelFeeeRates = [[100,400,0,1000],[100,300,0,600],[100,200,0,200],[0,0,0,0]];\r\n    uint256 public _burnFee;\r\n    uint256 private _previousburnFee;\r\n\r\n    uint256 public _lpFee;\r\n    uint256 private _previousLpFee;\r\n\r\n    uint256 public _cakeFee;\r\n    uint256 private _previousCakeFee;\r\n\r\n    uint256 public _inviterFee;\r\n    uint256 private _previousInviterFee;\r\n\r\n    uint256 currentIndex;  \r\n    uint256 private _tTotal = 41 * 10**8 * 10**18;\r\n    uint256 distributorGas = 500000;\r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public lpFeeShareTime;\r\n\r\n    uint256 public minBalance = 10*10**18;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public  uniswapV2Pair;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n    address public blackHoleAddress = address(0x9Aa14E45D851c3e74c7E4485d7D0E0958eC0f9A3);\r\n    address public holdAddress = address(0xA5c4e2762D5c05c2D2cbF956a7A394eDC9dFeC0d);\r\n   //bsc TESTNET wbnb:0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd \r\n    address public coinAddress = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c); //testnet bsc wbnb \u5730\u5740\r\n\r\n    mapping(address => address) public inviter;\r\n    address[] public shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n\r\n    bool inSwapAndLiquify;\r\n    \r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor() {\r\n        _tOwned[msg.sender] = _tTotal;\r\n        //BSC TESTNET UniSwapV2Router: 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n         //pancake\r\n        \r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[blackHoleAddress] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[holdAddress] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(0)] = true;\r\n         isDividendExempt[holdAddress] = true;\r\n        isDividendExempt[blackHoleAddress] = true;\r\n\r\n        initLevel();\r\n        \r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n        emit VenusTransfer(address(0), msg.sender, _tTotal, \"Mint\");\r\n    }\r\n    function setRouterAddress (address routerAddress) public onlyOwner ()\r\n    {\r\n        IUniswapV2Router02 _routerAddress = IUniswapV2Router02(routerAddress);\r\n        uniswapV2Router = _routerAddress;\r\n    }\r\n    \r\n    function setPairAddress (address pairAddress) public onlyOwner ()\r\n    {\r\n        \r\n        uniswapV2Pair = pairAddress;\r\n    }\r\n    function setCoinAddress (address _coinaddress) public onlyOwner ()\r\n    {\r\n        \r\n        coinAddress = _coinaddress;\r\n    }\r\n    function setMinBalance (uint256 _minBalance) public onlyOwner()\r\n    {\r\n        minBalance = _minBalance;\r\n    }\r\n    /*\r\n    ** level: 0 for no fees; 1 - 3  for 3 different fee level from 1 to 3;\r\n    */\r\n    function setLevel (uint256 level_) public onlyOwner ()\r\n    {\r\n        level=level_;\r\n        isSetLevel = true;\r\n\r\n    }\r\n    function initLevel() private {\r\n        FeeRates memory feeRate1;\r\n        FeeRates memory feeRate2;\r\n        FeeRates memory feeRate3;\r\n        FeeRates memory feeRate4;\r\n           feeRate1.burnFee=500;\r\n           feeRate1.lpFee=0;\r\n           feeRate1.cakeFee=0;\r\n           feeRate1.inviterFee=1000;\r\n           _levelFeeRates[1]= feeRate1;\r\n\r\n           feeRate2.burnFee=300;\r\n           feeRate2.lpFee=0;\r\n           feeRate2.cakeFee=0;\r\n           feeRate2.inviterFee=700;\r\n           _levelFeeRates[2]= feeRate2;\r\n\r\n           feeRate3.burnFee=200;\r\n           feeRate3.lpFee=0;\r\n           feeRate3.cakeFee=0;\r\n           feeRate3.inviterFee=300;\r\n           _levelFeeRates[3]= feeRate3;\r\n\r\n           feeRate4.burnFee=0;\r\n           feeRate4.lpFee=0;\r\n           feeRate4.cakeFee=0;\r\n           feeRate4.inviterFee=0;\r\n           _levelFeeRates[0]= feeRate4;\r\n    }\r\n    function setLevelAmounts (uint256[3] memory amount) public onlyOwner() {\r\n        levelAmounts=amount;\r\n        isSetLevel = false;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n   function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n    function getAllFee() public view returns (FeeRates memory feerate){\r\n        feerate = _levelFeeRates[level];\r\n        /**\r\n        _burnFee = _levelFeeRates[level].burnFee;\r\n        _lpFee = _levelFeeRates[level].lpFee;\r\n        _cakeFee = _levelFeeRates[level].cakeFee;\r\n        _inviterFee = _levelFeeRates[level].inviterFee;\r\n        **/\r\n        return feerate;\r\n    }\r\n    function removeAllFee() private {\r\n        /**\r\n        _previousburnFee = _levelFeeRates[level].burnFee;\r\n        _previousLpFee = _levelFeeRates[level].lpFee;\r\n        _previousCakeFee = _levelFeeRates[level].cakeFee;\r\n        _previousInviterFee = _levelFeeRates[level].inviterFee;\r\n\r\n        _burnFee = 0;\r\n        _lpFee = 0;\r\n        _inviterFee = 0;\r\n        _cakeFee = 0;\r\n          _previousburnFee = _burnFee;\r\n        _previousLpFee = _lpFee;\r\n        _previousCakeFee = _cakeFee;\r\n        _previousInviterFee = _inviterFee;\r\n\r\n        _burnFee = 0;\r\n        _lpFee = 0;\r\n        _inviterFee = 0;\r\n        _cakeFee = 0;*/\r\n\r\n        _previousLevel = level;\r\n        level = 0;\r\n\r\n      \r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        /*\r\n        _burnFee = _previousburnFee;\r\n        _lpFee = _previousLpFee;\r\n        _inviterFee = _previousInviterFee;\r\n        _cakeFee = _previousCakeFee;\r\n        */\r\n        level = _previousLevel;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee \r\n\r\n        // to == uniswapV2Pair deleted for addliquidity and sell coins takefee\r\n        // add to == address(uniswapV2Router)  for removeliquidity not take fee \r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || from == address(uniswapV2Router)  || to == address(uniswapV2Router) ) {\r\n            takeFee = false;\r\n        }\r\n        if ( to != uniswapV2Pair && to != address(uniswapV2Router) && from != uniswapV2Pair && from != address(uniswapV2Router)) {\r\n            takeFee = false;\r\n        }\r\n        \r\n        bool shouldSetInviter = balanceOf(to) == 0 && inviter[to] == address(0) && from != uniswapV2Pair;\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        \r\n        if (shouldSetInviter) {\r\n            inviter[to] = from;\r\n        }\r\n        if(fromAddress == address(0) ) fromAddress = from;\r\n        if(toAddress == address(0)) toAddress = to;\r\n        if(!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair ) setShare(fromAddress);\r\n        if(!isDividendExempt[toAddress] && toAddress != uniswapV2Pair ) setShare(toAddress);\r\n        \r\n        fromAddress = from;\r\n        toAddress = to;  \r\n         if(_tOwned[holdAddress] >= 1 * 10**4 * 10**18 && from !=holdAddress && lpFeeShareTime.add(minPeriod) <= block.timestamp) {\r\n             process(distributorGas) ;\r\n             lpFeeShareTime = block.timestamp;\r\n        }\r\n    }\r\n    \r\n    function process(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0)return;\r\n        uint256 nowbanance = _tOwned[holdAddress];\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n\r\n          uint256 amount = nowbanance.mul(IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex])).div(IERC20(uniswapV2Pair).totalSupply());\r\n         if( amount < 1 * 10**18) {\r\n             currentIndex++;\r\n             iterations++;\r\n             return;\r\n         }\r\n         if(_tOwned[holdAddress]  < amount )return;\r\n            distributeDividend(shareholders[currentIndex],amount);\r\n            \r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n   \r\n    function distributeDividend(address shareholder ,uint256 amount) internal {\r\n            _tOwned[holdAddress] = _tOwned[holdAddress].sub(amount);\r\n            _tOwned[shareholder] = _tOwned[shareholder].add(amount);\r\n             emit Transfer(holdAddress, shareholder, amount);\r\n             emit VenusTransfer(holdAddress, shareholder, amount,\"Distribute\");\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n           if(_updated[shareholder] ){      \r\n                if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) quitShare(shareholder);              \r\n                return;  \r\n           }\r\n           if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;  \r\n            addShareholder(shareholder);\r\n            _updated[shareholder] = true;   \r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n    \r\n    function quitShare(address shareholder) private {\r\n           removeShareholder(shareholder);   \r\n           _updated[shareholder] = false; \r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n        emit Transfer(sender, recipient, amount);\r\n        emit VenusTransfer(sender, recipient, amount,\"tokenTransfer\");\r\n    }\r\n\r\n    //\r\n    function _takeburnFee(\r\n        address sender,\r\n        uint256 tAmount,\r\n        uint256 burnFee\r\n    ) private {\r\n        // _burnFee = _levelFeeRates[level].burnFee;\r\n        if (burnFee == 0) return;\r\n        if(_tFeeTotal >= 999 * 10**7 * 10**18) burnFee = 0;\r\n        //_tOwned[address(0)] = _tOwned[address(0)].add(tAmount); //burn add\r\n        _tOwned[blackHoleAddress] = _tOwned[blackHoleAddress].add(tAmount); //burn add\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n        emit Transfer(sender, blackHoleAddress, tAmount);\r\n        emit VenusTransfer(sender, blackHoleAddress, tAmount,\"BurnFee\");\r\n    }\r\n\r\n    function _takeLPFee(address sender,uint256 tAmount, uint256 lpFee,uint256 cakeFee) private {\r\n        // _lpFee =  _levelFeeRates[level].lpFee;\r\n        if (lpFee == 0 && cakeFee == 0) return;\r\n        _tOwned[uniswapV2Pair] = _tOwned[uniswapV2Pair].add(tAmount);\r\n        emit Transfer(sender, uniswapV2Pair, tAmount);\r\n        emit VenusTransfer(sender, uniswapV2Pair, tAmount,\"LPFee\");\r\n    }\r\n\r\n    function _takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 inviterFee\r\n    ) private {\r\n       //  _inviterFee = _levelFeeRates[level].inviterFee;\r\n        if (inviterFee == 0) return;\r\n        address cur;\r\n        if (sender == uniswapV2Pair) {\r\n            cur = recipient;\r\n        } else if (recipient == uniswapV2Pair) {\r\n            cur = sender;\r\n        } else {\r\n            _tOwned[holdAddress] = _tOwned[holdAddress].add(tAmount.div(10000).mul(inviterFee));\r\n            emit Transfer(sender, holdAddress, tAmount.div(10000).mul(inviterFee));\r\n            emit VenusTransfer(sender, holdAddress, tAmount.div(10000).mul(inviterFee),\"InviterFee\");\r\n            return;\r\n        } \r\n        uint256 accurRate;\r\n \r\n         if (level==1) {\r\n           \r\n            for (int256 i = 0; i < 8; i++) {\r\n                uint256 rate;\r\n                if (i == 0) {\r\n                    rate = 500;\r\n                } else if(i == 1 ){\r\n                    rate = 200;\r\n                } else {\r\n                    rate = 50;\r\n                }\r\n                cur = inviter[cur];\r\n                if (cur == address(0)) {\r\n                    break;\r\n                }\r\n                accurRate = accurRate.add(rate);\r\n\r\n                uint256 curTAmount = tAmount.div(10000).mul(rate);\r\n                if(_tOwned[cur]>=minBalance)\r\n                    _tOwned[cur] = _tOwned[cur].add(curTAmount);\r\n                else \r\n                    _tOwned[holdAddress] = _tOwned[holdAddress].add(curTAmount);\r\n                emit Transfer(sender, cur, curTAmount);\r\n                emit VenusTransfer(sender, cur, curTAmount,\"Level 1 Fee\");\r\n            }\r\n         }\r\n        if (level==2) {\r\n           \r\n            for (int256 i = 0; i < 2; i++) {\r\n                uint256 rate;\r\n                if (i == 0) {\r\n                    rate = 500;\r\n                } else {\r\n                    rate = 200;\r\n                }\r\n                cur = inviter[cur];\r\n                if (cur == address(0)) {\r\n                    break;\r\n                }\r\n                accurRate = accurRate.add(rate);\r\n\r\n                uint256 curTAmount = tAmount.div(10000).mul(rate);\r\n                if(_tOwned[cur]>=minBalance)\r\n                    _tOwned[cur] = _tOwned[cur].add(curTAmount);\r\n                else \r\n                    _tOwned[holdAddress] = _tOwned[holdAddress].add(curTAmount);\r\n                // _tOwned[cur] = _tOwned[cur].add(curTAmount);\r\n                emit Transfer(sender, cur, curTAmount);\r\n                emit VenusTransfer(sender, cur, curTAmount, \"Level 2 Fee\");\r\n            }\r\n        }\r\n        if (level==3) {\r\n          \r\n               uint256 rate = 300;\r\n               \r\n                cur = inviter[cur];\r\n                if (cur == address(0)) {\r\n                    return;\r\n                }\r\n                accurRate = accurRate.add(rate);\r\n\r\n                uint256 curTAmount = tAmount.div(10000).mul(rate);\r\n                if(_tOwned[cur]>=minBalance)\r\n                    _tOwned[cur] = _tOwned[cur].add(curTAmount);\r\n                else \r\n                    _tOwned[holdAddress] = _tOwned[holdAddress].add(curTAmount);\r\n                // _tOwned[cur] = _tOwned[cur].add(curTAmount);\r\n                emit Transfer(sender, cur, curTAmount);\r\n                emit VenusTransfer(sender, cur, curTAmount, \"Level 3 Fee\");\r\n\r\n        }\r\n        _tOwned[holdAddress] = _tOwned[holdAddress].add(tAmount.div(10000).mul(_inviterFee.sub(accurRate)));\r\n        emit Transfer(sender, holdAddress, tAmount.div(10000).mul(_inviterFee.sub(accurRate)));\r\n        emit VenusTransfer(sender, holdAddress, tAmount.div(10000).mul(_inviterFee.sub(accurRate)),\"Remained Fee\");\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currLevel = level;\r\n        uint256 pairBalance = IERC20(coinAddress).balanceOf(uniswapV2Pair);\r\n         if (pairBalance<levelAmounts[0]) level=1;\r\n         else if (pairBalance<levelAmounts[1]) level=2;\r\n         else if (pairBalance<levelAmounts[2]) level=3;\r\n         else level=0;\r\n         if(isSetLevel) level = currLevel; \r\n\r\n         if (currLevel == 0) level=0;\r\n\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\r\n            _burnFee = _levelFeeRates[level].burnFee;\r\n            _lpFee = _levelFeeRates[level].lpFee;\r\n            _cakeFee = _levelFeeRates[level].cakeFee;\r\n            _inviterFee = _levelFeeRates[level].inviterFee;\r\n      \r\n        _takeburnFee(sender, tAmount.div(10000).mul(_burnFee),_burnFee);\r\n        _takeLPFee(sender, tAmount.div(10000).mul(_lpFee.add(_cakeFee)),_lpFee,_cakeFee);\r\n        _takeInviterFee(sender, recipient, tAmount,_inviterFee);\r\n       \r\n        uint256 recipientRate = 10000 - _burnFee -_lpFee - _cakeFee - _inviterFee;\r\n        _tOwned[recipient] = _tOwned[recipient].add(tAmount.div(10000).mul(recipientRate));\r\n        emit Transfer(sender, recipient, tAmount.div(10000).mul(recipientRate));\r\n        emit VenusTransfer(sender, recipient, tAmount.div(10000).mul(recipientRate),\"Receipt\");\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"Event\",\"type\":\"string\"}],\"name\":\"VenusTransfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_levelFeeRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackHoleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterFee\",\"type\":\"uint256\"}],\"internalType\":\"struct VenusToken.FeeRates\",\"name\":\"feerate\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSetLevel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"level\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeShareTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coinaddress\",\"type\":\"address\"}],\"name\":\"setCoinAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level_\",\"type\":\"uint256\"}],\"name\":\"setLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amount\",\"type\":\"uint256[3]\"}],\"name\":\"setLevelAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBalance\",\"type\":\"uint256\"}],\"name\":\"setMinBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VenusToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ae1f3e389cc7ba957c14a16b29cbf4603682bcba73093f3736a315421760f529"}