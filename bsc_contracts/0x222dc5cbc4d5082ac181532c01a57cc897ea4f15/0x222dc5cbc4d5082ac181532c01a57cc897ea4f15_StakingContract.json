{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StakingContract.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport './IRewardToken.sol';\\n\\ncontract StakingContract is Ownable, ReentrancyGuard {\\n  using SafeMath for uint256;\\n\\n  // Token given as reward for staking\\n  IRewardToken public immutable rewardToken;\\n  // Token deposited for staking\\n  IERC20 public immutable stakedToken;\\n\\n  // Total staked token balance\\n  uint256 public totalStakedSupply;\\n  // Staked LP token balance of each user\\n  mapping(address => uint256) public stakedBalances;\\n  // First deposit timestamp of each user\\n  mapping(address => uint256) public firstDepositTimestamps;\\n  // Used for calculating the latest rewards. Resets after each reward claim.\\n  mapping(address => uint256) public rewardCalculationStartTimestamps;\\n  // The pending rewards, saved each time user tops up staked balance\\n  mapping(address => uint256) public pendingRewardsUpToLastDeposit;\\n\\n  // Yearly mint rate per staked token\\n  uint256 public immutable APRM;\\n  // Basis points of staked token processing fee taken when user withdraws\\n  uint256 public immutable processingFeeForStakedToken;\\n\\n  // Minimum number of tokens that can be staked\\n  uint256 public minimumStakeAmount;\\n  // Minimum stake time to receive rewards after the first deposit\\n  uint256 public minimumStakeTime;\\n  // Address of fee vault\\n  address public feeVaultAddress;\\n\\n  bool public depositsPaused;\\n  bool public withdrawalsPaused;\\n\\n  event Deposit(address indexed account, uint256 indexed amount);\\n  event Withdrawal(address indexed account, uint256 indexed amount);\\n  event EmergencyWithdrawal(address indexed account, uint256 indexed amount);\\n  event RewardClaim(address indexed account, uint256 indexed amount);\\n  event DepositsPaused(bool indexed paused);\\n  event WithdrawalsPaused(bool indexed paused);\\n\\n  constructor(\\n    address _rewardToken,\\n    address _stakedToken,\\n    uint256 _APRM,\\n    uint256 _minimumStakeAmount,\\n    uint256 _minimumStakeTime,\\n    uint256 _processingFeeForStakedToken,\\n    address _feeVaultAddress\\n  ) {\\n    rewardToken = IRewardToken(_rewardToken);\\n    stakedToken = IERC20(_stakedToken);\\n    APRM = _APRM;\\n    minimumStakeAmount = _minimumStakeAmount;\\n    minimumStakeTime = _minimumStakeTime;\\n    processingFeeForStakedToken = _processingFeeForStakedToken;\\n    feeVaultAddress = _feeVaultAddress;\\n    depositsPaused = false;\\n    withdrawalsPaused = false;\\n  }\\n\\n  /**\\n   * @dev Throws if deposit is paused.\\n   */\\n  modifier whenDepositNotPaused() {\\n    require(!depositsPaused, 'DEPOSITS ARE PAUSED');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if withdraw is paused.\\n   */\\n  modifier whenWithdrawNotPaused() {\\n    require(!withdrawalsPaused, 'WITHDRAWS ARE PAUSED');\\n    _;\\n  }\\n\\n  /**\\n   * Allows user to deposit the token for staking and earn reward token, calculated with the APRM.\\n   * To be able to deposit user should give allowance to the staking contract and\\n   * deposit at least the minimum stake amount.\\n   */\\n  function deposit(uint256 amount) external nonReentrant whenDepositNotPaused {\\n    require(amount <= stakedToken.allowance(msg.sender, address(this)), 'NOT ENOUGH ALLOWANCE');\\n    require(amount <= stakedToken.balanceOf(msg.sender), 'NOT ENOUGH TOKEN BALANCE');\\n    require(amount >= minimumStakeAmount, 'AMOUNT CANNOT BE SMALLER THAN MINIMUM AMOUNT');\\n\\n    uint256 balanceOfAccount = stakedBalances[msg.sender];\\n\\n    if (balanceOfAccount > 0) {\\n      // Adds all pending rewards to pending rewards of the account.\\n      pendingRewardsUpToLastDeposit[msg.sender] = calculateTotalPendingRewards(msg.sender);\\n    }\\n\\n    // Adds amount to total supply and balance of the account, sets timestamps of the account.\\n    totalStakedSupply = totalStakedSupply.add(amount);\\n    stakedBalances[msg.sender] = stakedBalances[msg.sender].add(amount);\\n    if (firstDepositTimestamps[msg.sender] == 0) {\\n      firstDepositTimestamps[msg.sender] = block.timestamp;\\n    }\\n    rewardCalculationStartTimestamps[msg.sender] = block.timestamp;\\n\\n    // Receives tokens from the account.\\n    bool success = stakedToken.transferFrom(msg.sender, address(this), amount);\\n    require(success, 'TRANSFER_FROM REVERTED');\\n\\n    emit Deposit(msg.sender, amount);\\n  }\\n\\n  /**\\n   * Claim pending rewards if minimum stake time has passed since the first deposit.\\n   */\\n  function claimRewards() external nonReentrant whenWithdrawNotPaused {\\n    uint256 userBalance = stakedBalances[msg.sender];\\n    require(userBalance > 0, 'NO STAKED BALANCE');\\n    require(\\n      (block.timestamp - firstDepositTimestamps[msg.sender]) >= minimumStakeTime,\\n      'MINIMUM STAKE TIME HAS NOT PASSED'\\n    );\\n\\n    uint256 totalRewardsAmount = calculateTotalPendingRewards(msg.sender);\\n    require(totalRewardsAmount > 0, 'NO PENDING REWARDS');\\n\\n    rewardCalculationStartTimestamps[msg.sender] = block.timestamp;\\n    pendingRewardsUpToLastDeposit[msg.sender] = 0;\\n\\n    // Mints total rewards amount for the user and fee vault.\\n    rewardToken.mint(msg.sender, totalRewardsAmount);\\n    rewardToken.mint(feeVaultAddress, totalRewardsAmount);\\n    emit RewardClaim(msg.sender, totalRewardsAmount);\\n  }\\n\\n  /**\\n   * Withdraws all tokens of an account and rewards.\\n   */\\n  function withdraw() external nonReentrant whenWithdrawNotPaused {\\n    uint256 userBalance = stakedBalances[msg.sender];\\n    require(userBalance > 0, 'NO STAKED BALANCE');\\n\\n    // Calculate total rewards amount (if minimumStakeTime has passed), and reset timestamp and pending rewards of the account\\n    uint256 totalRewardsAmount;\\n    if (block.timestamp - firstDepositTimestamps[msg.sender] >= minimumStakeTime) {\\n      totalRewardsAmount = calculateTotalPendingRewards(msg.sender);\\n    }\\n    rewardCalculationStartTimestamps[msg.sender] = 0;\\n    pendingRewardsUpToLastDeposit[msg.sender] = 0;\\n    firstDepositTimestamps[msg.sender] = 0;\\n\\n    // Substract amount from total supply and reset balance of the account.\\n    totalStakedSupply = totalStakedSupply.sub(userBalance);\\n    stakedBalances[msg.sender] = 0;\\n\\n    // Send staked tokens to the user account and fees to feeVault.\\n    uint256 stakeTokenFee = userBalance.mul(processingFeeForStakedToken).div(10000);\\n    uint256 stakeTokenAmountAfterFee = userBalance.sub(stakeTokenFee);\\n    bool transferToSender = stakedToken.transfer(msg.sender, stakeTokenAmountAfterFee);\\n    bool transferToVault = stakedToken.transfer(feeVaultAddress, stakeTokenFee);\\n    require(transferToSender && transferToVault, 'TRANSFER REVERTED');\\n    emit Withdrawal(msg.sender, stakeTokenAmountAfterFee);\\n\\n    if (totalRewardsAmount > 0) {\\n      // Mints total rewards amount for the user and fee vault.\\n      rewardToken.mint(msg.sender, totalRewardsAmount);\\n      rewardToken.mint(feeVaultAddress, totalRewardsAmount);\\n      emit RewardClaim(msg.sender, totalRewardsAmount);\\n    }\\n  }\\n\\n  /**\\n   * Withdraws all tokens of an account immediately without a reward.\\n   */\\n  function emergencyWithdraw() external nonReentrant {\\n    uint256 userBalance = stakedBalances[msg.sender];\\n    require(userBalance > 0, 'NO STAKED BALANCE');\\n\\n    // Substract amount from total supply and resets all data of the account.\\n    totalStakedSupply = totalStakedSupply.sub(userBalance);\\n    stakedBalances[msg.sender] = 0;\\n    firstDepositTimestamps[msg.sender] = 0;\\n    rewardCalculationStartTimestamps[msg.sender] = 0;\\n    pendingRewardsUpToLastDeposit[msg.sender] = 0;\\n\\n    // Sends tokens to the account and fees to vault.\\n    uint256 stakeTokenFee = userBalance.mul(processingFeeForStakedToken).div(10000);\\n    uint256 stakeTokenAmountAfterFee = userBalance.sub(stakeTokenFee);\\n    bool transferToSender = stakedToken.transfer(msg.sender, stakeTokenAmountAfterFee);\\n    bool transferToVault = stakedToken.transfer(feeVaultAddress, stakeTokenFee);\\n    require(transferToSender && transferToVault, 'TRANSFER REVERTED');\\n    emit EmergencyWithdrawal(msg.sender, stakeTokenAmountAfterFee);\\n  }\\n\\n  /**\\n   * Calculate rewards.\\n   */\\n  function calculateLatestRewards(address userAddress) public view returns (uint256) {\\n    // Subtract current time from starting time and convert the timestamp to the day.\\n    uint256 dayCount = (block.timestamp - rewardCalculationStartTimestamps[userAddress]).div(60).div(60).div(24);\\n    // Calculate yearly mint rate.\\n    uint256 yearlyMint = stakedBalances[userAddress].mul(APRM).div(10000);\\n    // Calculate total amount of interest.\\n    uint256 rewards = yearlyMint.div(365).mul(dayCount);\\n\\n    return rewards;\\n  }\\n\\n  /**\\n   * Return total pending rewards.\\n   */\\n  function calculateTotalPendingRewards(address userAddress) public view returns (uint256) {\\n    uint256 pendingSinceLastDeposit = calculateLatestRewards(userAddress);\\n    return pendingSinceLastDeposit.add(pendingRewardsUpToLastDeposit[userAddress]);\\n  }\\n\\n  /**\\n   * Set Minimum Stake Amount.\\n   */\\n  function setMinimumStakeAmount(uint256 _minimumStakeAmount) public onlyOwner {\\n    minimumStakeAmount = _minimumStakeAmount;\\n  }\\n\\n  /**\\n   * Set Minimum Stake Time.\\n   */\\n  function setMinimumStakeTime(uint256 _minimumStakeTime) public onlyOwner {\\n    minimumStakeTime = _minimumStakeTime;\\n  }\\n\\n  /**\\n   * Set Processing Fee Vault Address.\\n   */\\n  function setFeeVaultAddress(address _address) public onlyOwner {\\n    feeVaultAddress = _address;\\n  }\\n\\n  /**\\n   * Pause/unpause deposits.\\n   */\\n  function pauseDeposits(bool pause) public onlyOwner {\\n    depositsPaused = pause;\\n    emit DepositsPaused(pause);\\n  }\\n\\n  /**\\n   * Pause/unpause withdrawals.\\n   */\\n  function pauseWithdrawals(bool pause) public onlyOwner {\\n    withdrawalsPaused = pause;\\n    emit WithdrawalsPaused(pause);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IRewardToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\ninterface IRewardToken {\\n  function giveMintingConsent() external;\\n\\n  function removeMintingConsent() external;\\n\\n  function proposeMinter(address proposedMinterAddress) external;\\n\\n  function approveProposedMinter(address proposedMinterAddress) external;\\n\\n  function proposeMinterRemoval(address minterAddress) external;\\n\\n  function approveMinterRemoval(address minterAddress) external;\\n\\n  function mint(address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_APRM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_processingFeeForStakedToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeVaultAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"DepositsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"WithdrawalsPaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APRM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"calculateLatestRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"calculateTotalPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstDepositTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"pauseDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"pauseWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingRewardsUpToLastDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processingFeeForStakedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardCalculationStartTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IRewardToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFeeVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStakeTime\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ba0f58179f5441d81d22402bd0183ffff130e243000000000000000000000000d632bd021a07af70592ce1e18717ab9aa126decb0000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000069e10de76676d0800000000000000000000000000000000000000000000000000000000000000002a300000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000a77d3754428edda3760438f9c25b9bd25dc23b6a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}