{"SourceCode": "pragma solidity ^0.6.12;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n \r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    \r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(now > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract DiamondHold is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    /**\r\n     * @dev Token Meta Data\r\n     */ \r\n    string public  constant _name     = \"DiamondHold\";\r\n    string public  constant _symbol   = \"DHOLD\";\r\n    uint8  private constant _decimals = 9;\r\n\r\n    /**\r\n     * @dev Swapping & Liquify Settings\r\n     */\r\n    IUniswapV2Router02 public immutable pancakeswapV2Router; // The PancakeSwap V2 router for sending and receiving tokens\r\n    address public immutable pancakeswapV2Pair;              // The pair between DHT/BNB created by this contract\r\n    \r\n    bool public enableAutoLiquidityProtocol = false; // If true, enables the auto-liquidity protocol\r\n    \r\n    bool lockSwappingAndLiquify;                     // Controlled by the modifier, preventing liquidity events from being fired if they're aready running\r\n    modifier lockTheSwap {                           // Modifier used to signal that the contract is currently executing a swap and liquify  \r\n        lockSwappingAndLiquify = true;\r\n        _;\r\n        lockSwappingAndLiquify = false;\r\n    }\r\n   \r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 bnbReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n    \r\n    /**\r\n     * @dev Token Settings\r\n     */\r\n    uint256 private constant MAX               = ~uint256(0);                     // The maximum value of a 256 bit unsigned integer \r\n    uint256 private constant _totalSupply      = 10**15 * 10**uint256(_decimals); // Total tokens at start (10**15 = 1 quadrillion tokens and 10**9 is for decimal values)\r\n    uint256 private constant _totalReflections = MAX - (MAX % _totalSupply);      // The total reflections\r\n    uint256 private _reflectionTierOne         = _totalReflections;               // The current reflection value for tier 1 (this value slowly depletes)\r\n    uint256 private _reflectionTierTwo         = _totalReflections;               // The current reflection value for tier 2 (this value slowly depletes)\r\n    uint256 private _reflectionTierThree       = _totalReflections;               // The current reflection value for tier 3 (this value slowly depletes)\r\n    uint256 private _reflectionTierFour        = _totalReflections;               // The current reflection value for tier 4 (this value slowly depletes)\r\n    uint256 private _totalBurned;                                                 // Total burned tokens from liquidity tax\r\n    \r\n    uint256 public _maxTxAmount                   = 10**15 * 10**uint256(_decimals);       // 1 quadrillion - The maximum amount of tokens each transfer is allowed to send\r\n    uint256 public _numTokensSellToAddToLiquidity = 400 * 10**9 * 10**uint256(_decimals);  // 400 billion - The number of tokens the contract has to acrue before we execute a liquidity event\r\n    \r\n    /**\r\n     * @dev Treasury Settings\r\n     */\r\n    uint256 private constant _tierOneFactor   = 1;  // 10%  - Account can draw from tier 1\r\n    uint256 private constant _tierTwoFactor   = 3;  // 30%  - Account can draw from tier 1 and 2\r\n    uint256 private constant _tierThreeFactor = 6;  // 60%  - Account can draw from tier 1, 2 and 3\r\n    uint256 private constant _tierFourFactor  = 10; // 100% - Account can draw from tier 1, 2, 3 and 4 \r\n    \r\n    uint256 private _tier1Total; // Displays how many tokens have been reflected from 10% of the overall reflection tax\r\n    uint256 private _tier2Total; // Displays how many tokens have been reflected from 30% of the overall reflection tax\r\n    uint256 private _tier3Total; // Displays how many tokens have been reflected from 60% of the overall reflection tax\r\n    uint256 private _tier4Total; // Displays how many tokens have been reflected from 100% of the overall reflection tax\r\n    \r\n    uint private constant DAY = 86400; // How many seconds in a day\r\n    \r\n    uint private _tierOneAge   = DAY * 3;  // 3 days until a tier 1 wallet reaches maturity and should be upgraded to tier 2\r\n    uint private _tierTwoAge   = DAY * 7;  // 7 days until a tier 2 wallet reaches maturity and should be upgraded to tier 3\r\n    uint private _tierThreeAge = DAY * 30; // 30 days until a tier 3 wallet reaches maturity and should be upgraded to tier 4\r\n\r\n    /**\r\n     * @dev Transaction Tax Settings\r\n     */\r\n    uint256 private _reflectionTaxTierOne   = 10;   // 10% redistributed across all treasuries\r\n    uint256 private _reflectionTaxTierTwo   = 8;    //  8% redistributed across all treasuries\r\n    uint256 private _reflectionTaxTierThree = 5;    //  5% redistributed across all treasuries\r\n    uint256 private _reflectionTaxTierFour  = 1;    //  1% redistributed across all treasuries\r\n    uint256 private _liquidityTax           = 5;    // The contract takes 5% of each transaction to be used by the auto-liquidity protocol\r\n    uint256 private _previousReflectionTaxTierOne   = _reflectionTaxTierOne;\r\n    uint256 private _previousReflectionTaxTierTwo   = _reflectionTaxTierTwo;   \r\n    uint256 private _previousReflectionTaxTierThree = _reflectionTaxTierThree;\r\n    uint256 private _previousReflectionTaxTierFour  = _reflectionTaxTierFour;\r\n    uint256 private _previousLiquidityTax           = _liquidityTax;\r\n    \r\n    /**\r\n     * @dev Wallet Storage\r\n     */\r\n    mapping (address => uint256) private                      _tokenBalances;     // Holds the token balances \r\n    mapping (address => uint256) private                      _reflectBalances;   // Holds the reflection balance amounts\r\n    mapping (address => mapping (address => uint256)) private _allowances;        // The approved amounts that each wallet can transfer, used by a third party\r\n    mapping (address => uint) private                         _timeSinceFirstBuy; // Holds a list of wallets and the times since they started holding\r\n    \r\n    /**\r\n     * @dev Exclusion Settings\r\n     */\r\n    address[] private                 _excluded;                   // Wallets that are excluded from participating in reflection rewards\r\n    mapping (address => bool) private _isExcludedFromReflection;   // Which wallets are excluded from earning reflection\r\n    mapping (address => bool) private _isExcludedFromFees;         // Which wallets are excluded from earning fees\r\n    mapping (address => bool) private _isExchangeAddress;          // Transfers from (not to) these wallets tax the receiver instead\r\n    \r\n    bool private startOnTier2 = true; // Used for migration, giving tier two to the airdropped candidates\r\n    \r\n    /**\r\n     * @dev Executed once on start when contract is deployed to the network\r\n     */\r\n    constructor () public {\r\n        // Mint the starting supply of 1 quadrillion tokens to the original caller (whoever deployed this contract)\r\n        _reflectBalances[_msgSender()] = _totalReflections;\r\n        \r\n        // Connect to the PancakeSwap V2 Router\r\n        IUniswapV2Router02 router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        // Create a DHT/BNB pair\r\n        pancakeswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\r\n        \r\n        // Set the router \r\n        pancakeswapV2Router = router;\r\n    \r\n        // Exclude the contract and owner from paying tax or earning rewards\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[owner()] = true;\r\n        \r\n        // Set the ages for each of the main initial addresses\r\n        _timeSinceFirstBuy[owner()] = now;\r\n        \r\n        // Emit a transfer event to the blockchain of the minting\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n    \r\n    /**\r\n     * @dev Required to recieve BNB from PancakeSwap V2 Router when swaping\r\n     */\r\n    receive() external payable {}\r\n    \r\n    /**\r\n     * @dev Required to withdraw stuck or leftover BNB from the contract\r\n     */\r\n    function withdraw() public onlyOwner() {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraws non-DHOLD tokens that are stuck as to not interfere with the liquidity\r\n     */\r\n    function withdrawToken(address token) public onlyOwner() {\r\n        require(address(this) != address(token), \"Cannot withdraw DHOLD\");\r\n        IERC20(address(token)).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token\r\n     */\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token\r\n     */\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     */\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. \r\n     * This is zero by default.\r\n     */\r\n    function allowance(address owner, address account) public view override returns (uint256) {\r\n        return _allowances[owner][account];\r\n    }\r\n    \r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     */ \r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"Cant sub below 0\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Executes a 2-party transfer where the sender \r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Executes a 3-party transfer where the sender authorizes the caller to transfer some tokens on their behalf.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"Amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the total burned tokens.\r\n     */\r\n    function totalFees() external view returns (uint256) {\r\n        return _totalBurned;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns how many tokens are available to tier 1 wallets\r\n     */\r\n    function getTierOneTotal() external view returns (uint256) {\r\n        return _tier1Total;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns how many tokens are available to tier 2 wallets\r\n     */\r\n    function getTierTwoTotal() external view returns (uint256) {\r\n        return _tier2Total;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns how many tokens are available to tier 3 wallets\r\n     */\r\n    function getTierThreeTotal() external view returns (uint256) {\r\n        return _tier3Total;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns how many tokens are available to tier 4 wallets\r\n     */\r\n    function getTierFourTotal() external view returns (uint256) {\r\n        return _tier4Total;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the true total amount of tokens owned by `wallet`.\r\n     */\r\n    function balanceOf(address wallet) public view override returns (uint256) {\r\n        if (_isExcludedFromReflection[wallet]) return _tokenBalances[wallet];\r\n        else return getTokenBalanceFromReflection(wallet);\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns a hypothetical `wallet` balance as if they were a certain `tier`\r\n     */\r\n    function getBalanceOf(address wallet, uint8 tier) public view returns (uint256) {\r\n        if (_isExcludedFromReflection[wallet]) return _tokenBalances[wallet];\r\n        else return _reflectBalances[wallet].div(_getRate(tier));\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculates the token balance for a given `wallet`\r\n     */\r\n    function getTokenBalanceFromReflection(address wallet) internal view returns (uint256) {\r\n        uint256 currentRate = _getRate(getWalletTier(wallet));\r\n        return _reflectBalances[wallet].div(currentRate);\r\n    } \r\n    \r\n    /**\r\n     * @dev Calculates the age of a wallet since its first buy in seconds\r\n     */\r\n    function getWalletAge(address account) public view returns (uint) {\r\n        require(now >= _timeSinceFirstBuy[account], \"Account has invalid age\");\r\n        if (_timeSinceFirstBuy[account] == 0) return 0;\r\n        return now.sub(_timeSinceFirstBuy[account]);\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the tier of the `wallet` based on its age, if the wallet doesn't exist then it is assumed to be tier 1\r\n     */\r\n    function getWalletTier(address wallet) public view returns (uint8) {\r\n        uint age = getWalletAge(wallet);\r\n        if(age >= _tierThreeAge){\r\n            return 4;\r\n        } else if(age >= _tierTwoAge && age < _tierThreeAge) {\r\n            return 3;\r\n        } else if(age >= _tierOneAge && age < _tierTwoAge) {\r\n            return 2;\r\n        } else {\r\n            return 1;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Calculates the reflection factor of a `wallet`, which is the percentage of rewards the wallet has access to\r\n     */\r\n    function getWalletReflectionFactor(address wallet) public view returns (uint256) {\r\n        uint8 tier = getWalletTier(wallet);\r\n        if (tier == 2) {\r\n            return _tierTwoFactor;\r\n        } else if (tier == 3) {\r\n            return _tierThreeFactor;\r\n        } else if (tier == 4) {\r\n            return _tierFourFactor;\r\n        } else {\r\n            return _tierOneFactor;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets the tier of the `wallet`\r\n     */\r\n    function setWalletTier(address wallet, uint8 tier) public onlyOwner() {\r\n        if (tier == 4) {\r\n             _timeSinceFirstBuy[wallet] = now.sub(_tierThreeAge);\r\n        } else if (tier == 3) {\r\n             _timeSinceFirstBuy[wallet] = now.sub(_tierTwoAge);\r\n        } else if (tier == 2) {\r\n             _timeSinceFirstBuy[wallet] = now.sub(_tierOneAge);\r\n        } else {\r\n             _timeSinceFirstBuy[wallet] = now;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if an `wallet` is excluded from the reflection system\r\n     */\r\n    function isExcludedFromReflection(address wallet) public view returns (bool) {\r\n        return _isExcludedFromReflection[wallet];\r\n    }\r\n\r\n    /**\r\n     * @dev Excludes an `wallet` the reflection system\r\n     */\r\n    function excludeFromReflection(address wallet) public onlyOwner() {\r\n        require(!_isExcludedFromReflection[wallet], \"Account is already excluded\");\r\n        \r\n        // If there is a reflection balance then convert it over to token balance as if the wallet is tier 4\r\n        if(_reflectBalances[wallet] > 0) {\r\n            _tokenBalances[wallet] = getTokenBalanceFromReflection(wallet);\r\n        }\r\n        \r\n        // Set the wallet to tier system\r\n        _timeSinceFirstBuy[wallet] = now.sub(_tierThreeAge);\r\n        \r\n        // Exclude the wallet \r\n        _isExcludedFromReflection[wallet] = true;\r\n        _excluded.push(wallet);\r\n    }\r\n\r\n    /**\r\n     * @dev Includes an `wallet` into the reflection system\r\n     */\r\n    function includeInReflection(address account) external onlyOwner() {\r\n        require(_isExcludedFromReflection[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; ++i) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _isExcludedFromReflection[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Removes all fees from transactions, and remembers them to be restored later with `restoreAllFees()`\r\n     */\r\n    function removeAllFees() private {\r\n        if(_reflectionTaxTierOne == 0 \r\n            && _reflectionTaxTierTwo == 0 \r\n            && _reflectionTaxTierThree == 0 \r\n            && _reflectionTaxTierFour == 0 \r\n            && _liquidityTax == 0) \r\n        {\r\n            return;\r\n        }\r\n        \r\n        _previousReflectionTaxTierOne = _reflectionTaxTierOne;\r\n        _previousReflectionTaxTierTwo = _reflectionTaxTierTwo;\r\n        _previousReflectionTaxTierThree = _reflectionTaxTierThree;\r\n        _previousReflectionTaxTierFour = _reflectionTaxTierFour;\r\n        _previousLiquidityTax = _liquidityTax;\r\n        \r\n        _reflectionTaxTierOne = 0;\r\n        _reflectionTaxTierTwo = 0;\r\n        _reflectionTaxTierThree = 0;\r\n        _reflectionTaxTierFour = 0;\r\n        _liquidityTax = 0;\r\n    }\r\n    \r\n    /**\r\n     * @dev Restores fees that were previously removed by `removeAllFee()`\r\n     */\r\n    function restoreAllFees() private {\r\n        _reflectionTaxTierOne = _previousReflectionTaxTierOne;\r\n        _reflectionTaxTierTwo = _previousReflectionTaxTierTwo;\r\n        _reflectionTaxTierThree = _previousReflectionTaxTierThree;\r\n        _reflectionTaxTierFour = _previousReflectionTaxTierFour;\r\n        _liquidityTax = _previousLiquidityTax;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns true if the account is excluded from fees\r\n     */\r\n    function isExcludedFromFee(address account) external view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n    \r\n    /**\r\n     * @dev Excludes an account from fees\r\n     */\r\n    function excludeFromFees(address account) external onlyOwner() {\r\n        _isExcludedFromFees[account] = true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Includes an account to receiving fees\r\n     */\r\n    function includeInFees(address account) external onlyOwner() {\r\n        _isExcludedFromFees[account] = false;\r\n    }\r\n    \r\n    /**\r\n     * @dev Disables wallets starting on tier 2, use after the migration\r\n     */\r\n    function disableStartOnTier2() external onlyOwner() {\r\n        startOnTier2 = false;\r\n    }\r\n    \r\n    /**\r\n     * @dev Checks if a specific `wallet` is marked as an exchange \r\n     */\r\n    function isExchange(address wallet) external view returns(bool) {\r\n        return _isExchangeAddress[wallet];\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets a `wallet` to be handled as an exchange (sender will be taxed when it's the recipient)\r\n     */\r\n    function enableExchange(address wallet) external onlyOwner() {\r\n        _isExchangeAddress[wallet] = true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets a `wallet` to be handled as a normal wallet\r\n     */\r\n    function disableExchange(address wallet) external onlyOwner() {\r\n        _isExchangeAddress[wallet] = false;\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets the amount of tax tier 1 wallets incur\r\n     */\r\n    function setTierOneReflectionTaxPercent(uint256 tax) external onlyOwner() {\r\n        _reflectionTaxTierOne = tax;\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets the amount of tax tier 2 wallets incur\r\n     */\r\n    function setTierTwoReflectionTaxPercent(uint256 tax) external onlyOwner() {\r\n        _reflectionTaxTierTwo = tax;\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets the amount of tax tier 3 wallets incur\r\n     */\r\n    function setTierThreeReflectionTaxPercent(uint256 tax) external onlyOwner() {\r\n        _reflectionTaxTierThree = tax;\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets the amount of tax tier 4 wallets incur\r\n     */\r\n    function setTierFourReflectionTaxPercent(uint256 tax) external onlyOwner() {\r\n        _reflectionTaxTierFour = tax;\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets the amount of tax that is taken for liquidity\r\n     */\r\n    function setLiquidityTaxPercent(uint256 tax) external onlyOwner() {\r\n        _liquidityTax = tax;\r\n    }\r\n   \r\n    /**\r\n     * @dev Sets the maximum amount each transaction can transfer in one go\r\n     */\r\n    function setMaxTokenPercent(uint256 percent) external onlyOwner() {\r\n        _maxTxAmount = _totalSupply.mul(percent).div(100);\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets the amount each liquidity transaction needs to trigger\r\n     */\r\n    function setNumTokensLiquidity(uint256 tokenCount) external onlyOwner() {\r\n        _numTokensSellToAddToLiquidity = tokenCount;\r\n    }\r\n\r\n    /**\r\n     * @dev Enables or disables the auto liquidity protocol. Disabling this allows tokens to build up in the contract that will be unretrievable.\r\n     */\r\n    function setAutoLiquidityProtocol(bool _enabled) public onlyOwner() {\r\n        enableAutoLiquidityProtocol = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the rate for a particular account\r\n     */\r\n    function _getRate(uint8 tier) private view returns(uint256) {\r\n        (uint256 circulatingSupply, uint256 totalTokens) = _getCurrentSupply(tier);\r\n        return circulatingSupply.div(totalTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Finds how many tokens are circulating both regular tokens and excluded tokens \r\n     */\r\n    function _getCurrentSupply(uint8 tier) private view returns(uint256, uint256){\r\n        uint256 totalReflections = 0;\r\n        \r\n        if (tier == 4) {\r\n            totalReflections = _reflectionTierFour;\r\n        } else if (tier == 3) {\r\n            totalReflections = _reflectionTierThree;\r\n        } else if (tier == 2) {\r\n            totalReflections = _reflectionTierTwo;\r\n        } else {\r\n            totalReflections = _reflectionTierOne;\r\n        }\r\n        \r\n        uint256 rSupply = totalReflections;\r\n        uint256 tSupply = _totalSupply;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_reflectBalances[_excluded[i]] > rSupply || _tokenBalances[_excluded[i]] > tSupply) return (totalReflections, _totalSupply);\r\n            rSupply = rSupply.sub(_reflectBalances[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tokenBalances[_excluded[i]]);\r\n        }\r\n        if (rSupply < totalReflections.div(_totalSupply)) return (totalReflections, _totalSupply);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Breaks down a token amount into its transfer, reflection and liquidity\r\n     */\r\n    function _getTokenValues(uint256 tAmount, uint8 tier) private view returns (uint256, uint256, uint256) {\r\n        uint256 tFee = 0;\r\n        \r\n        // Determines the fee based on the given tier that will cost this transaction\r\n        if (tier == 4) {\r\n            tFee = tAmount.mul(_reflectionTaxTierFour).div(100);\r\n        } else if (tier == 3) {\r\n            tFee = tAmount.mul(_reflectionTaxTierThree).div(100);\r\n        } else if (tier == 2) {\r\n            tFee = tAmount.mul(_reflectionTaxTierTwo).div(100);\r\n        } else {\r\n            tFee = tAmount.mul(_reflectionTaxTierOne).div(100);\r\n        }\r\n   \r\n        uint256 tLiquidity = tAmount.mul(_liquidityTax).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    /**\r\n     * @dev Breaks down a reflection anount into its transfer, reflection and liquidity components\r\n     */\r\n    function _getReflectionValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint8 tier) private view returns (uint256, uint256, uint256) {\r\n        uint256 currentRate = _getRate(tier);\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Reflects the fees into the reflection amounts\r\n     */\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        // Reflect across all 4 tiers\r\n        _reflectionTierOne = _reflectionTierOne.sub(rFee.div(10));\r\n        _reflectionTierTwo = _reflectionTierTwo.sub(rFee.mul(3).div(10));\r\n        _reflectionTierThree = _reflectionTierThree.sub(rFee.mul(6).div(10));\r\n        _reflectionTierFour = _reflectionTierFour.sub(rFee);\r\n\r\n        // Store some fun & useful statistics :)\r\n        _totalBurned = _totalBurned.add(tFee);\r\n        _tier1Total = _tier1Total.add(tFee.mul(10).div(100));\r\n        _tier2Total = _tier2Total.add(tFee.mul(30).div(100));\r\n        _tier3Total = _tier3Total.add(tFee.mul(60).div(100));\r\n        _tier4Total = _tier4Total.add(tFee);\r\n    }\r\n    \r\n    /**\r\n     * @dev Takes the tokens from the liquidity tax from transactions and stores it inside the contract address \r\n     */\r\n    function _takeLiquidity(uint256 tLiquidity, uint8 tier) private {\r\n        uint256 currentRate =  _getRate(tier);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _reflectBalances[address(this)] = _reflectBalances[address(this)].add(rLiquidity);\r\n        if(_isExcludedFromReflection[address(this)]) {\r\n            _tokenBalances[address(this)] = _tokenBalances[address(this)].add(tLiquidity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the owners's tokens.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Handles the before and after of a token transfer, such as taking fees and firing off a swap and liquify event\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        // Only the owner of this contract can bypass the max transfer amount\r\n        if(from != owner() && to != owner()) {\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n        \r\n        // If the contract balance is over the max transfer amount, cut it down to ensure that we can always send off a swap \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        if(contractTokenBalance >= _maxTxAmount)\r\n        {\r\n            contractTokenBalance = _maxTxAmount;\r\n        }\r\n        \r\n        // Check that the contract balance has reached the threshold required to execute a swap and liquify event\r\n        bool overMinTokenBalance = contractTokenBalance >= _numTokensSellToAddToLiquidity;\r\n        \r\n        // Do not execute the swap and liquify if there is already a swap happening\r\n        // Do not allow the swap and liquify if the sender is PancakeSwap V2\r\n        if (enableAutoLiquidityProtocol && overMinTokenBalance && !lockSwappingAndLiquify && from != pancakeswapV2Pair) {\r\n            contractTokenBalance = _numTokensSellToAddToLiquidity;\r\n            // Add liquidity\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n        \r\n        // If any account belongs to _isExcludedFromFee account then remove the fee\r\n        bool takeFee = !(_isExcludedFromFees[from] || _isExcludedFromFees[to]);\r\n\r\n        if (!takeFee) {\r\n            removeAllFees();\r\n        }\r\n        \r\n        // Transfer the token amount from sender to receipient.\r\n        _tokenTransfer(from, to, amount);\r\n        \r\n        if (!takeFee) {\r\n            restoreAllFees();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sells the tokens inside this contract to the liquidity pool\r\n     */\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        // Split the contract balance into equal halves\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        // Capture the contract's current BNB balance so that we know exactly the amount of BNB that the\r\n        // swap creates. This way the liquidity event wont include any BNB that has been manually sent to the contract.\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // Swap tokens for BNB\r\n        swapTokensForBNB(half); // Breaks the BNB -> DHT swap when swap+liquify is triggered\r\n\r\n        // How much BNB did we just receive\r\n        uint256 receivedBNB = address(this).balance.sub(initialBalance);\r\n\r\n        // Add liquidity via the PancakeSwap V2 Router\r\n        addLiquidity(otherHalf, receivedBNB);\r\n        \r\n        emit SwapAndLiquify(half, receivedBNB, otherHalf);\r\n    }\r\n    \r\n    /**\r\n     * @dev Swap tokens for WBNB \r\n     */\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        // Generate the Pancakeswap pair for DHT/WBNB\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeswapV2Router.WETH(); // WETH = WBNB on BSC\r\n\r\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\r\n\r\n        // Execute the swap\r\n        pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // Accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Adds liquidity to the PancakeSwap V2 LP\r\n     */\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        // Approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\r\n\r\n        // Adds the liquidity and gives the LP tokens to the owner of this contract\r\n        // The LP tokens need to be manually locked\r\n        pancakeswapV2Router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Handles the token transfer logic\r\n     */\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount) private {\r\n        // Grab the tier of the sender, if they are excluded from recipient tax (i.e. pancakeswap or other decentralized exchanges), then tax the sender.\r\n        // This way as a sender to pancakeswap you are taxed based on your wallet, and as a receiver you are taxed based on your wallet.\r\n        uint8 tier = getWalletTier(sender);\r\n        if(_isExchangeAddress[sender]) {\r\n            tier = getWalletTier(recipient);\r\n        }\r\n        \r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTokenValues(tAmount, tier);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getReflectionValues(tAmount, tFee, tLiquidity, tier);\r\n        \r\n        // Take tokens from sender\r\n        if(_isExcludedFromReflection[sender]) {\r\n\t\t    _tokenBalances[sender] = _tokenBalances[sender].sub(tAmount);\r\n        }\r\n\t\t_reflectBalances[sender] = _reflectBalances[sender].sub(rAmount);\r\n\t\t\r\n\t\t// If we haven't seen the recipient before, or their balance is previously 0, then we update the time since their first buy\r\n\t\tif(_timeSinceFirstBuy[recipient] == 0) {\r\n\t\t    if(startOnTier2) {\r\n\t\t        _timeSinceFirstBuy[recipient] = now.sub(_tierOneAge);\r\n\t\t    } else {\r\n\t\t        _timeSinceFirstBuy[recipient] = now;\r\n\t\t    }\r\n\t\t}\r\n\r\n        // Give tokens to recipient\r\n        if(_isExcludedFromReflection[recipient]) {\r\n\t    \t_tokenBalances[recipient] = _tokenBalances[recipient].add(tTransferAmount);\r\n        }\r\n\t\t_reflectBalances[recipient] = _reflectBalances[recipient].add(rTransferAmount);\r\n\r\n        // Take the liquidity and reflect the fee\r\n        _takeLiquidity(tLiquidity, tier);\r\n\t\t_reflectFee(rFee, tFee);\r\n            \r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"disableExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableStartOnTier2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoLiquidityProtocol\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"enableExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"excludeFromReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"getBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTierFourTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTierOneTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTierThreeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTierTwoTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getWalletAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWalletReflectionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWalletTier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReflection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isExcludedFromReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setAutoLiquidityProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"setLiquidityTaxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxTokenPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"setNumTokensLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"setTierFourReflectionTaxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"setTierOneReflectionTaxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"setTierThreeReflectionTaxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"setTierTwoReflectionTaxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"setWalletTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DiamondHold", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f6fabf6e7df0e18cf3b4cd742f14110b2c1c7b83a9d967b21323cc35c70af31c"}