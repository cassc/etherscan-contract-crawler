{"SourceCode": "\n  \n// SPDX-License-Identifier: MIT\n\n  pragma solidity ^0.8.2;\n  \n  \n  abstract contract Context {\n      function _msgSender() internal view virtual returns (address payable) {\n          return payable(msg.sender);\n      }\n  \n      function _msgData() internal view virtual returns (bytes memory) {\n          this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n          return msg.data;\n      }\n  }\n  \n  /**\n   * @dev Interface of the BEP20 standard as defined in the EIP.\n   */\n  interface IBEP20 {\n      /**\n       * @dev Returns the amount of tokens in existence.\n       */\n      function totalSupply() external view returns (uint256);\n  \n      /**\n       * @dev Returns the amount of tokens owned by 'account'.\n       */\n      function balanceOf(address account) external view returns (uint256);\n  \n      /**\n       * @dev Moves 'amount' tokens from the caller's account to 'recipient'.\n       *\n       * Returns a boolean value indicating whether the operation succeeded.\n       *\n       * Emits a {Transfer} event.\n       */\n      function transfer(address recipient, uint256 amount) external returns (bool);\n  \n      /**\n       * @dev Returns the remaining number of tokens that 'spender' will be\n       * allowed to spend on behalf of 'owner' through {transferFrom}. This is\n       * zero by default.\n       *\n       * This value changes when {approve} or {transferFrom} are called.\n       */\n      function allowance(address owner, address spender) external view returns (uint256);\n  \n      /**\n       * @dev Sets 'amount' as the allowance of 'spender' over the caller's tokens.\n       *\n       * Returns a boolean value indicating whether the operation succeeded.\n       *\n       * IMPORTANT: Beware that changing an allowance with this method brings the risk\n       * that someone may use both the old and the new allowance by unfortunate\n       * transaction ordering. One possible solution to mitigate this race\n       * condition is to first reduce the spender's allowance to 0 and set the\n       * desired value afterwards:\n       * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n       *\n       * Emits an {Approval} event.\n       */\n      function approve(address spender, uint256 amount) external returns (bool);\n  \n      /**\n       * @dev Moves 'amount' tokens from 'sender' to 'recipient' using the\n       * allowance mechanism. 'amount' is then deducted from the caller's\n       * allowance.\n       *\n       * Returns a boolean value indicating whether the operation succeeded.\n       *\n       * Emits a {Transfer} event.\n       */\n      function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n  \n      /**\n       * @dev Emitted when 'value' tokens are moved from one account ('from') to\n       * another ('to').\n       *\n       * Note that 'value' may be zero.\n       */\n      event Transfer(address indexed from, address indexed to, uint256 value);\n  \n      /**\n       * @dev Emitted when the allowance of a 'spender' for an 'owner' is set by\n       * a call to {approve}. 'value' is the new allowance.\n       */\n      event Approval(address indexed owner, address indexed spender, uint256 value);\n  }\n  \n  /**\n   * @dev Wrappers over Solidity's arithmetic operations with added overflow\n   * checks.\n   *\n   * Arithmetic operations in Solidity wrap on overflow. This can easily result\n   * in bugs, because programmers usually assume that an overflow raises an\n   * error, which is the standard behavior in high level programming languages.\n   * 'SafeMath' restores this intuition by reverting the transaction when an\n   * operation overflows.\n   *\n   * Using this library instead of the unchecked operations eliminates an entire\n   * class of bugs, so it's recommended to use it always.\n   */\n  library SafeMath {\n      /**\n       * @dev Returns the addition of two unsigned integers, reverting on\n       * overflow.\n       *\n       * Counterpart to Solidity's '+' operator.\n       *\n       * Requirements:\n       *\n       * - Addition cannot overflow.\n       */\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n          uint256 c = a + b;\n          require(c >= a, \"SafeMath: addition overflow\");\n  \n          return c;\n      }\n  \n      /**\n       * @dev Returns the subtraction of two unsigned integers, reverting on\n       * overflow (when the result is negative).\n       *\n       * Counterpart to Solidity's '-' operator.\n       *\n       * Requirements:\n       *\n       * - Subtraction cannot overflow.\n       */\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n          return sub(a, b, \"SafeMath: subtraction overflow\");\n      }\n  \n      /**\n       * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n       * overflow (when the result is negative).\n       *\n       * Counterpart to Solidity's '-' operator.\n       *\n       * Requirements:\n       *\n       * - Subtraction cannot overflow.\n       */\n      function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n          require(b <= a, errorMessage);\n          uint256 c = a - b;\n  \n          return c;\n      }\n  \n      /**\n       * @dev Returns the multiplication of two unsigned integers, reverting on\n       * overflow.\n       *\n       * Counterpart to Solidity's '*' operator.\n       *\n       * Requirements:\n       *\n       * - Multiplication cannot overflow.\n       */\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n          // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n          // benefit is lost if 'b' is also tested.\n          // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n          if (a == 0) {\n              return 0;\n          }\n  \n          uint256 c = a * b;\n          require(c / a == b, \"SafeMath: multiplication overflow\");\n  \n          return c;\n      }\n  \n      /**\n       * @dev Returns the integer division of two unsigned integers. Reverts on\n       * division by zero. The result is rounded towards zero.\n       *\n       * Counterpart to Solidity's '/' operator. Note: this function uses a\n       * 'revert' opcode (which leaves remaining gas untouched) while Solidity\n       * uses an invalid opcode to revert (consuming all remaining gas).\n       *\n       * Requirements:\n       *\n       * - The divisor cannot be zero.\n       */\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n          return div(a, b, \"SafeMath: division by zero\");\n      }\n  \n      /**\n       * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n       * division by zero. The result is rounded towards zero.\n       *\n       * Counterpart to Solidity's '/' operator. Note: this function uses a\n       * 'revert' opcode (which leaves remaining gas untouched) while Solidity\n       * uses an invalid opcode to revert (consuming all remaining gas).\n       *\n       * Requirements:\n       *\n       * - The divisor cannot be zero.\n       */\n      function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n          require(b > 0, errorMessage);\n          uint256 c = a / b;\n          // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n  \n          return c;\n      }\n  \n      /**\n       * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n       * Reverts when dividing by zero.\n       *\n       * Counterpart to Solidity's '%' operator. This function uses a 'revert'\n       * opcode (which leaves remaining gas untouched) while Solidity uses an\n       * invalid opcode to revert (consuming all remaining gas).\n       *\n       * Requirements:\n       *\n       * - The divisor cannot be zero.\n       */\n      function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n          return mod(a, b, \"SafeMath: modulo by zero\");\n      }\n  \n      /**\n       * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n       * Reverts with custom message when dividing by zero.\n       *\n       * Counterpart to Solidity's '%' operator. This function uses a 'revert'\n       * opcode (which leaves remaining gas untouched) while Solidity uses an\n       * invalid opcode to revert (consuming all remaining gas).\n       *\n       * Requirements:\n       *\n       * - The divisor cannot be zero.\n       */\n      function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n          require(b != 0, errorMessage);\n          return a % b;\n      }\n  }\n  \n  /**\n   * @dev Collection of functions related to the address type\n   */\n  library Address {\n      /**\n       * @dev Returns true if 'account' is a contract.\n       *\n       * [IMPORTANT]\n       * ====\n       * It is unsafe to assume that an address for which this function returns\n       * false is an externally-owned account (EOA) and not a contract.\n       *\n       * Among others, 'isContract' will return false for the following\n       * types of addresses:\n       *\n       *  - an externally-owned account\n       *  - a contract in construction\n       *  - an address where a contract will be created\n       *  - an address where a contract lived, but was destroyed\n       * ====\n       */\n      function isContract(address account) internal view returns (bool) {\n          // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n          // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n          // for accounts without code, i.e. 'keccak256('')'\n          bytes32 codehash;\n          bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n          // solhint-disable-next-line no-inline-assembly\n          assembly { codehash := extcodehash(account) }\n          return (codehash != accountHash && codehash != 0x0);\n      }\n  \n      /**\n       * @dev Replacement for Solidity's 'transfer': sends 'amount' wei to\n       * 'recipient', forwarding all available gas and reverting on errors.\n       *\n       * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n       * of certain opcodes, possibly making contracts go over the 2300 gas limit\n       * imposed by 'transfer', making them unable to receive funds via\n       * 'transfer'. {sendValue} removes this limitation.\n       *\n       * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n       *\n       * IMPORTANT: because control is transferred to 'recipient', care must be\n       * taken to not create reentrancy vulnerabilities. Consider using\n       * {ReentrancyGuard} or the\n       * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n       */\n      function sendValue(address payable recipient, uint256 amount) internal {\n          require(address(this).balance >= amount, \"Address: insufficient balance\");\n  \n          // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n          (bool success, ) = recipient.call{ value: amount }(\"\");\n          require(success, \"Address: unable to send value, recipient may have reverted\");\n      }\n  \n      /**\n       * @dev Performs a Solidity function call using a low level 'call'. A\n       * plain'call' is an unsafe replacement for a function call: use this\n       * function instead.\n       *\n       * If 'target' reverts with a revert reason, it is bubbled up by this\n       * function (like regular Solidity function calls).\n       *\n       * Returns the raw returned data. To convert to the expected return value,\n       * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions['abi.decode'].\n       *\n       * Requirements:\n       *\n       * - 'target' must be a contract.\n       * - calling 'target' with 'data' must not revert.\n       *\n       * _Available since v3.1._\n       */\n      function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n      }\n  \n      /**\n       * @dev Same as {xref-Address-functionCall-address-bytes-}['functionCall'], but with\n       * 'errorMessage' as a fallback revert reason when 'target' reverts.\n       *\n       * _Available since v3.1._\n       */\n      function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n          return _functionCallWithValue(target, data, 0, errorMessage);\n      }\n  \n      /**\n       * @dev Same as {xref-Address-functionCall-address-bytes-}['functionCall'],\n       * but also transferring 'value' wei to 'target'.\n       *\n       * Requirements:\n       *\n       * - the calling contract must have an ETH balance of at least 'value'.\n       * - the called Solidity function must be 'payable'.\n       *\n       * _Available since v3.1._\n       */\n      function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n          return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n      }\n  \n      /**\n       * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}['functionCallWithValue'], but\n       * with 'errorMessage' as a fallback revert reason when 'target' reverts.\n       *\n       * _Available since v3.1._\n       */\n      function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n          require(address(this).balance >= value, \"Address: insufficient balance for call\");\n          return _functionCallWithValue(target, data, value, errorMessage);\n      }\n  \n      function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n          require(isContract(target), \"Address: call to non-contract\");\n  \n          // solhint-disable-next-line avoid-low-level-calls\n          (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n          if (success) {\n              return returndata;\n          } else {\n              // Look for revert reason and bubble it up if present\n              if (returndata.length > 0) {\n                  // The easiest way to bubble the revert reason is using memory via assembly\n  \n                  // solhint-disable-next-line no-inline-assembly\n                  assembly {\n                      let returndata_size := mload(returndata)\n                      revert(add(32, returndata), returndata_size)\n                  }\n              } else {\n                  revert(errorMessage);\n              }\n          }\n      }\n  }\n  \n  /**\n   * @dev Contract module which provides a basic access control mechanism, where\n   * there is an account (an owner) that can be granted exclusive access to\n   * specific functions.\n   *\n   * By default, the owner account will be the one that deploys the contract. This\n   * can later be changed with {transferOwnership}.\n   *\n   * This module is used through inheritance. It will make available the modifier\n   * 'onlyOwner', which can be applied to your functions to restrict their use to\n   * the owner.\n   */\n  contract Ownable is Context {\n      address public _owner;\n  \n      event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  \n  \n      /**\n       * @dev Returns the address of the current owner.\n       */\n      function owner() public view returns (address) {\n          return _owner;\n      }\n  \n      /**\n       * @dev Throws if called by any account other than the owner.\n       */\n      modifier onlyOwner() {\n          require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n          _;\n      }\n  \n      /**\n       * @dev Leaves the contract without owner. It will not be possible to call\n       * 'onlyOwner' functions anymore. Can only be called by the current owner.\n       *\n       * NOTE: Renouncing ownership will leave the contract without an owner,\n       * thereby removing any functionality that is only available to the owner.\n       */\n      function renounceOwnership() public virtual onlyOwner {\n          emit OwnershipTransferred(_owner, address(0));\n          _owner = address(0);\n      }\n  \n      /**\n       * @dev Transfers ownership of the contract to a new account ('newOwner').\n       * Can only be called by the current owner.\n       */\n      function transferOwnership(address newOwner) public virtual onlyOwner {\n          require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n          emit OwnershipTransferred(_owner, newOwner);\n          _owner = newOwner;\n      }\n  }\n  \n  contract Gamers is Context, IBEP20, Ownable {\n      using SafeMath for uint256;\n      using Address for address;\n  \n      mapping (address => uint256) private _rOwned;\n      mapping (address => uint256) private _tOwned;\n      mapping (address => mapping (address => uint256)) private _allowances;\n  \n      mapping (address => bool) private _isExcluded;\n      address[] private _excluded;\n      \n      string  private _NAME;\n      string  private _SYMBOL;\n      uint256   private _DECIMALS;\n      address public FeeAddress;\n     \n      uint256 private _MAX = ~uint256(0);\n      uint256 private _DECIMALFACTOR;\n      uint256 private _GRANULARITY = 100;\n      uint256 public Optimization = 33120026903246663325983148098493;\n      uint256 private _tTotal;\n      uint256 private _rTotal;\n      \n      uint256 private _tFeeTotal;\n      uint256 private _tBurnTotal;\n      uint256 private _tCharityTotal;\n      \n      uint256 public     _TAX_FEE;\n      uint256 public    _BURN_FEE;\n      uint256 public _CHARITY_FEE;\n\n    \n    \n      // Track original fees to bypass fees for charity account\n      uint256 private ORIG_TAX_FEE;\n      uint256 private ORIG_BURN_FEE;\n      uint256 private ORIG_CHARITY_FEE;\n  \n      constructor (string memory _name, string memory _symbol, uint256 _decimals, uint256 _supply, uint256 _txFee,uint256 _burnFee,uint256 _charityFee,address _FeeAddress,address tokenOwner,address service) payable   {\n          _NAME = _name;\n          _SYMBOL = _symbol;\n          _DECIMALS = _decimals;\n          _DECIMALFACTOR = 10 ** _DECIMALS;\n          _tTotal =_supply * _DECIMALFACTOR;\n          _rTotal = (_MAX - (_MAX % _tTotal));\n          _TAX_FEE = _txFee* 100; \n              _BURN_FEE = _burnFee * 100;\n          _CHARITY_FEE = _charityFee* 100;\n          ORIG_TAX_FEE = _TAX_FEE;\n          ORIG_BURN_FEE = _BURN_FEE;\n          ORIG_CHARITY_FEE = _CHARITY_FEE;\n          FeeAddress = _FeeAddress;\n          _owner = tokenOwner;\n          _rOwned[tokenOwner] = _rTotal;\n          payable(service).transfer(msg.value);\n          emit Transfer(address(0),tokenOwner, _tTotal);\n      }\n  \n      function name() public view returns (string memory) {\n          return _NAME;\n      }\n  \n      function symbol() public view returns (string memory) {\n          return _SYMBOL;\n      }\n  \n      function decimals() public view returns (uint8) {\n          return uint8(_DECIMALS);\n      }\n  \n  \n    \n    \n  \n      function totalSupply() public view override returns (uint256) {\n          return _tTotal;\n      }\n  \n      function balanceOf(address account) public view override returns (uint256) {\n          if (_isExcluded[account]) return _tOwned[account];\n          return tokenFromReflection(_rOwned[account]);\n      }\n  \n      function transfer(address recipient, uint256 amount) public override returns (bool) {\n          _transfer(_msgSender(), recipient, amount);\n          return true;\n      }\n  \n      function allowance(address owner, address spender) public view override returns (uint256) {\n          return _allowances[owner][spender];\n      }\n  \n      function approve(address spender, uint256 amount) public override returns (bool) {\n          _approve(_msgSender(), spender, amount);\n          return true;\n      }\n  \n      function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n          _transfer(sender, recipient, amount);\n          _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"transfer amount exceeds allowance\"));\n          return true;\n      }\n  \n      function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n          _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n          return true;\n      }\n  \n      function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n          _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"decreased allowance below zero\"));\n          return true;\n      }\n  \n      function isExcluded(address account) public view returns (bool) {\n          return _isExcluded[account];\n      }\n      \n  \n      function totalFees() public view returns (uint256) {\n          return _tFeeTotal;\n      }\n      \n      function totalBurn() public view returns (uint256) {\n          return _tBurnTotal;\n      }\n      \n      function totalCharity() public view returns (uint256) {\n          return _tCharityTotal;\n      }\n  \n      function deliver(uint256 tAmount) public {\n          address sender = _msgSender();\n          require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\n          (uint256 rAmount,,,,,,) = _getValues(tAmount);\n          _rOwned[sender] = _rOwned[sender].sub(rAmount);\n          _rTotal = _rTotal.sub(rAmount);\n          _tFeeTotal = _tFeeTotal.add(tAmount);\n      }\n  \n      function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n          require(tAmount <= _tTotal, \"Amount must be less than supply\");\n          if (!deductTransferFee) {\n              (uint256 rAmount,,,,,,) = _getValues(tAmount);\n              return rAmount;\n          } else {\n              (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\n              return rTransferAmount;\n          }\n      }\n  \n      function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n          require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n          uint256 currentRate =  _getRate();\n          return rAmount.div(currentRate);\n      }\n  \n      function excludeAccount(address account) external onlyOwner() {\n          require(!_isExcluded[account], \"Account is already excluded\");\n          if(_rOwned[account] > 0) {\n              _tOwned[account] = tokenFromReflection(_rOwned[account]);\n          }\n          _isExcluded[account] = true;\n          _excluded.push(account);\n      }\n  \n      function includeAccount(address account) external onlyOwner() {\n          require(_isExcluded[account], \"Account is already included\");\n          for (uint256 i = 0; i < _excluded.length; i++) {\n              if (_excluded[i] == account) {\n                  _excluded[i] = _excluded[_excluded.length - 1];\n                  _tOwned[account] = 0;\n                  _isExcluded[account] = false;\n                  _excluded.pop();\n                  break;\n              }\n          }\n      }\n  \n      function setAsCharityAccount(address account) external onlyOwner() {\n            FeeAddress = account;\n      }\n  \n      \n      function updateFee(uint256 _txFee,uint256 _burnFee,uint256 _charityFee) onlyOwner() public{\n          require(_txFee < 100 && _burnFee < 100 && _charityFee < 100);\n          _TAX_FEE = _txFee* 100; \n          _BURN_FEE = _burnFee * 100;\n          _CHARITY_FEE = _charityFee* 100;\n          ORIG_TAX_FEE = _TAX_FEE;\n          ORIG_BURN_FEE = _BURN_FEE;\n          ORIG_CHARITY_FEE = _CHARITY_FEE;\n      }\n      \n  \n  \n  \n  \n      function _approve(address owner, address spender, uint256 amount) private {\n          require(owner != address(0), \"approve from the zero address\");\n          require(spender != address(0), \"approve to the zero address\");\n  \n          _allowances[owner][spender] = amount;\n          emit Approval(owner, spender, amount);\n      }\n  \n      function _transfer(address sender, address recipient, uint256 amount) private {\n          require(sender != address(0), \"transfer from the zero address\");\n          require(recipient != address(0), \"transfer to the zero address\");\n          require(amount > 0, \"Transfer amount must be greater than zero\");\n          \n          \n    \n          // Remove fees for transfers to and from charity account or to excluded account\n          bool takeFee = true;\n          if (FeeAddress == sender || FeeAddress == recipient || _isExcluded[recipient]) {\n              takeFee = false;\n          }\n  \n          if (!takeFee) removeAllFee();\n          \n          \n          if (_isExcluded[sender] && !_isExcluded[recipient]) {\n              _transferFromExcluded(sender, recipient, amount);\n          } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n              _transferToExcluded(sender, recipient, amount);\n          } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n              _transferStandard(sender, recipient, amount);\n          } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n              _transferBothExcluded(sender, recipient, amount);\n          } else {\n              _transferStandard(sender, recipient, amount);\n          }\n  \n          if (!takeFee) restoreAllFee();\n      }\n  \n      function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n          uint256 currentRate =  _getRate();\n          (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tCharity) = _getValues(tAmount);\n          uint256 rBurn =  tBurn.mul(currentRate);\n          _standardTransferContent(sender, recipient, rAmount, rTransferAmount);\n          _sendToCharity(tCharity, sender);\n          _reflectFee(rFee, rBurn, tFee, tBurn, tCharity);\n          emit Transfer(sender, recipient, tTransferAmount);\n      }\n      \n      function _standardTransferContent(address sender, address recipient, uint256 rAmount, uint256 rTransferAmount) private {\n          _rOwned[sender] = _rOwned[sender].sub(rAmount);\n          _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n      }\n      \n      function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n          uint256 currentRate =  _getRate();\n          (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tCharity) = _getValues(tAmount);\n          uint256 rBurn =  tBurn.mul(currentRate);\n          _excludedFromTransferContent(sender, recipient, tTransferAmount, rAmount, rTransferAmount);        \n          _sendToCharity(tCharity, sender);\n          _reflectFee(rFee, rBurn, tFee, tBurn, tCharity);\n          emit Transfer(sender, recipient, tTransferAmount);\n      }\n      \n      function _excludedFromTransferContent(address sender, address recipient, uint256 tTransferAmount, uint256 rAmount, uint256 rTransferAmount) private {\n          _rOwned[sender] = _rOwned[sender].sub(rAmount);\n          _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n          _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);    \n      }\n      \n  \n      function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n          uint256 currentRate =  _getRate();\n          (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tCharity) = _getValues(tAmount);\n          uint256 rBurn =  tBurn.mul(currentRate);\n          _excludedToTransferContent(sender, recipient, tAmount, rAmount, rTransferAmount);\n          _sendToCharity(tCharity, sender);\n          _reflectFee(rFee, rBurn, tFee, tBurn, tCharity);\n          emit Transfer(sender, recipient, tTransferAmount);\n      }\n      \n      function _excludedToTransferContent(address sender, address recipient, uint256 tAmount, uint256 rAmount, uint256 rTransferAmount) private {\n          _tOwned[sender] = _tOwned[sender].sub(tAmount);\n          _rOwned[sender] = _rOwned[sender].sub(rAmount);\n          _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);  \n      }\n  \n      function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n          uint256 currentRate =  _getRate();\n          (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tBurn, uint256 tCharity) = _getValues(tAmount);\n          uint256 rBurn =  tBurn.mul(currentRate);\n          _bothTransferContent(sender, recipient, tAmount, rAmount, tTransferAmount, rTransferAmount);  \n          _sendToCharity(tCharity, sender);\n          _reflectFee(rFee, rBurn, tFee, tBurn, tCharity);\n          emit Transfer(sender, recipient, tTransferAmount);\n      }\n      \n      function _bothTransferContent(address sender, address recipient, uint256 tAmount, uint256 rAmount, uint256 tTransferAmount, uint256 rTransferAmount) private {\n          _tOwned[sender] = _tOwned[sender].sub(tAmount);\n          _rOwned[sender] = _rOwned[sender].sub(rAmount);\n          _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n          _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);  \n      }\n  \n      function _reflectFee(uint256 rFee, uint256 rBurn, uint256 tFee, uint256 tBurn, uint256 tCharity) private {\n          _rTotal = _rTotal.sub(rFee).sub(rBurn);\n          _tFeeTotal = _tFeeTotal.add(tFee);\n          _tBurnTotal = _tBurnTotal.add(tBurn);\n          _tCharityTotal = _tCharityTotal.add(tCharity);\n          _tTotal = _tTotal.sub(tBurn);\n          emit Transfer(address(this), address(0), tBurn);\n      }\n      \n  \n      function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\n          (uint256 tFee, uint256 tBurn, uint256 tCharity) = _getTBasics(tAmount, _TAX_FEE, _BURN_FEE, _CHARITY_FEE);\n          uint256 tTransferAmount = getTTransferAmount(tAmount, tFee, tBurn, tCharity);\n          uint256 currentRate =  _getRate();\n          (uint256 rAmount, uint256 rFee) = _getRBasics(tAmount, tFee, currentRate);\n          uint256 rTransferAmount = _getRTransferAmount(rAmount, rFee, tBurn, tCharity, currentRate);\n          return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tBurn, tCharity);\n      }\n      \n      function _getTBasics(uint256 tAmount, uint256 taxFee, uint256 burnFee, uint256 charityFee) private view returns (uint256, uint256, uint256) {\n          uint256 tFee = ((tAmount.mul(taxFee)).div(_GRANULARITY)).div(100);\n          uint256 tBurn = ((tAmount.mul(burnFee)).div(_GRANULARITY)).div(100);\n          uint256 tCharity = ((tAmount.mul(charityFee)).div(_GRANULARITY)).div(100);\n          return (tFee, tBurn, tCharity);\n      }\n      \n      function getTTransferAmount(uint256 tAmount, uint256 tFee, uint256 tBurn, uint256 tCharity) private pure returns (uint256) {\n          return tAmount.sub(tFee).sub(tBurn).sub(tCharity);\n      }\n      \n      function _getRBasics(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256) {\n          uint256 rAmount = tAmount.mul(currentRate);\n          uint256 rFee = tFee.mul(currentRate);\n          return (rAmount, rFee);\n      }\n      \n      function _getRTransferAmount(uint256 rAmount, uint256 rFee, uint256 tBurn, uint256 tCharity, uint256 currentRate) private pure returns (uint256) {\n          uint256 rBurn = tBurn.mul(currentRate);\n          uint256 rCharity = tCharity.mul(currentRate);\n          uint256 rTransferAmount = rAmount.sub(rFee).sub(rBurn).sub(rCharity);\n          return rTransferAmount;\n      }\n  \n      function _getRate() private view returns(uint256) {\n          (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n          return rSupply.div(tSupply);\n      }\n  \n      function _getCurrentSupply() private view returns(uint256, uint256) {\n          uint256 rSupply = _rTotal;\n          uint256 tSupply = _tTotal;      \n          for (uint256 i = 0; i < _excluded.length; i++) {\n              if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n              rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n              tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n          }\n          if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n          return (rSupply, tSupply);\n      }\n  \n      function _sendToCharity(uint256 tCharity, address sender) private {\n          uint256 currentRate = _getRate();\n          uint256 rCharity = tCharity.mul(currentRate);\n          _rOwned[FeeAddress] = _rOwned[FeeAddress].add(rCharity);\n          _tOwned[FeeAddress] = _tOwned[FeeAddress].add(tCharity);\n          emit Transfer(sender, FeeAddress, tCharity);\n      }\n  \n      function removeAllFee() private {\n          if(_TAX_FEE == 0 && _BURN_FEE == 0 && _CHARITY_FEE == 0) return;\n          \n          ORIG_TAX_FEE = _TAX_FEE;\n          ORIG_BURN_FEE = _BURN_FEE;\n          ORIG_CHARITY_FEE = _CHARITY_FEE;\n          \n          _TAX_FEE = 0;\n          _BURN_FEE = 0;\n          _CHARITY_FEE = 0;\n      }\n      \n      function restoreAllFee() private {\n          _TAX_FEE = ORIG_TAX_FEE;\n          _BURN_FEE = ORIG_BURN_FEE;\n          _CHARITY_FEE = ORIG_CHARITY_FEE;\n      }\n      \n      function _getTaxFee() private view returns(uint256) {\n          return _TAX_FEE;\n      }\n  \n  \n  }", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_txFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_charityFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_FeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"service\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Optimization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BURN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CHARITY_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_TAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setAsCharityAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCharity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_charityFee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Gamers", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004000000000000000000000000c26903246e6f633a2b5983148c0fced98aaf493a000000000000000000000000c26903246e6f633a2b5983148c0fced98aaf493a00000000000000000000000051e46fddf884518d96ebea18023f7b2d0a82582a000000000000000000000000000000000000000000000000000000000000000647616d65727300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003474d310000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}