{"SourceCode": "{\"Context.sol\":{\"content\":\"/**\\r\\n * @title Context\\r\\n * @dev Context contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n * File @openzeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC20.sol\":{\"content\":\"/**\\r\\n * @title ERC20\\r\\n * @dev ERC20 contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation\\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n * File @openzeppelin/contracts/token/ERC20/ERC20.sol\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./Manager.sol\\\";\\r\\n\\r\\ncontract ERC20 is Context, IERC20, Pausable, Manager, MintRole {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint256 private _decimals;\\r\\n\\r\\n    bool public statusCoinWhitelist;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) public {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes:\\r\\n     * it does not affect any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint256) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply} correct tokens.\\r\\n     */\\r\\n    function totalSupplyCoins() public view returns (uint256) {\\r\\n        return _totalSupply.div(10**_decimals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor.\\r\\n     * Most applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 decimals_) internal {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     * Send amount sub fee or without fee.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        whenNotPaused\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        whenNotPaused\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        whenNotPaused\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     * Send amount - fee or without fee.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override whenNotPaused returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Automatically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        whenNotPaused\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Automatically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\\"ERC20: decreased allowance below zero\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the whitelist - true or false.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * bool `_statusCoinWhitelistIs` can be true or false.\\r\\n     */\\r\\n    function statusCoinWhitelistIs(bool _statusCoinWhitelistIs)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        statusCoinWhitelist = _statusCoinWhitelistIs;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient` and `feeReceiver`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and used also for automatic token fees.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address\\r\\n     * - `sender` must have a balance of at least `amount`\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual whenNotPaused {\\r\\n        require(\\r\\n            (whitelist.isWhitelisted(msg.sender) == true \\u0026\\u0026\\r\\n                whitelist.isWhitelisted(recipient) == true) ||\\r\\n                statusCoinWhitelist == false ||\\r\\n                whitelist.statusWhitelist() == false,\\r\\n            \\\"not Whitelisted\\\"\\r\\n        );\\r\\n        require(\\r\\n            blacklist.isBlacklisted(msg.sender) == false ||\\r\\n                blacklist.isBlacklisted(recipient) == false,\\r\\n            \\\"you are Blacklisted\\\"\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            (zeroFee.isZeroFeeSender(msg.sender) == false \\u0026\\u0026 fee \\u003e 0) ||\\r\\n            (zeroFee.isZeroFeeRecipient(recipient) \\u0026\\u0026 fee \\u003e 0)\\r\\n        ) {\\r\\n            uint256 feeamount = amount.mul(fee).div(10000);\\r\\n            uint256 feeamountRefs = feeamount;\\r\\n\\r\\n            _balances[sender] = _balances[sender].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n            );\\r\\n            _balances[recipient] = _balances[recipient].add(\\r\\n                amount.sub(feeamount)\\r\\n            );\\r\\n\\r\\n            emit Transfer(sender, recipient, amount.sub(feeamount));\\r\\n\\r\\n            if (refLevel1Fee \\u003e 0) {\\r\\n                address ref1 = referrals.getSponsor(msg.sender);\\r\\n\\r\\n                if (ref1 != basicRef) {\\r\\n                    uint256 ref1feeamount = feeamountRefs\\r\\n                        .mul(refLevel1Fee)\\r\\n                        .div(100);\\r\\n                    feeamount = feeamount.sub(ref1feeamount);\\r\\n                    _balances[ref1] = _balances[ref1].add(ref1feeamount);\\r\\n                    emit Transfer(sender, ref1, ref1feeamount);\\r\\n                    address ref2 = referrals.getSponsor(ref1);\\r\\n\\r\\n                    if (refLevel2Fee \\u003e 0 \\u0026\\u0026 ref2 != basicRef) {\\r\\n                        uint256 ref2feeamount = feeamountRefs\\r\\n                            .mul(refLevel2Fee)\\r\\n                            .div(100);\\r\\n                        feeamount = feeamount.sub(ref2feeamount);\\r\\n                        _balances[ref2] = _balances[ref2].add(ref2feeamount);\\r\\n                        emit Transfer(sender, ref2, ref2feeamount);\\r\\n                        address ref3 = referrals.getSponsor(ref2);\\r\\n\\r\\n                        if (refLevel3Fee \\u003e 0 \\u0026\\u0026 ref3 != basicRef) {\\r\\n                            uint256 ref3feeamount = feeamountRefs\\r\\n                                .mul(refLevel3Fee)\\r\\n                                .div(100);\\r\\n                            feeamount = feeamount.sub(ref3feeamount);\\r\\n                            _balances[ref3] = _balances[ref3].add(\\r\\n                                ref3feeamount\\r\\n                            );\\r\\n                            emit Transfer(sender, ref3, ref3feeamount);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            _balances[feeReceiver] = _balances[feeReceiver].add(feeamount);\\r\\n            emit Transfer(sender, feeReceiver, feeamount);\\r\\n        } else {\\r\\n            _balances[sender] = _balances[sender].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n            );\\r\\n            _balances[recipient] = _balances[recipient].add(amount);\\r\\n\\r\\n            emit Transfer(sender, recipient, amount);\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            securusProxyTrigger == true \\u0026\\u0026\\r\\n            amount \\u003e proxyTriggerAmount \\u0026\\u0026\\r\\n            nextProxyTriggerBlock \\u003c block.timestamp \\u0026\\u0026\\r\\n            dontTrigger.isDontTrigger(msg.sender) == false\\r\\n        ) {\\r\\n            nextProxyTriggerBlock = block.timestamp.add(nextProxyTrigger);\\r\\n\\r\\n            securusProxy.triggerProxy();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** @dev Emits a {burn} event and set the BlackFund address to 0.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `onlyMinter` can trigger the destroyBlackFunds\\r\\n     * - `_blackListedUser` is on the Blacklisted\\r\\n     *\\r\\n     */\\r\\n    function destroyBlackFunds(address _blackListedUser) public onlyMinter {\\r\\n        require(\\r\\n            blacklist.isBlacklisted(_blackListedUser) == true,\\r\\n            \\\"is not Blacklisted\\\"\\r\\n        );\\r\\n        uint256 dirtyFunds = balanceOf(_blackListedUser);\\r\\n        _balances[_blackListedUser] = 0;\\r\\n        _totalSupply.sub(dirtyFunds);\\r\\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\\r\\n    }\\r\\n\\r\\n    event DestroyedBlackFunds(address _blackListedUser, uint256 _balance);\\r\\n\\r\\n    /** @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * Emits a Admin {Transfer} event on the amount of Black Funds.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `onlyMinter` can trigger the redeemBlackFunds\\r\\n     * - `sender` must be on the blacklist.\\r\\n     *\\r\\n     */\\r\\n    function redeemBlackFunds(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public onlyMinter {\\r\\n        require(blacklist.isBlacklisted(sender) == true, \\\"is not Blacklisted\\\");\\r\\n        _balances[sender] = _balances[sender].sub(amount);\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `freeSupply` must be larger than the amount to be created.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        require(freeMintSupply \\u003e= amount, \\\"ERC20: no more free supply\\\");\\r\\n        freeMintSupply = freeMintSupply.sub(amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Purpose:\\r\\n     * onlyMinter mint tokens on the _to address\\r\\n     *\\r\\n     * @param _amount - amount of newly issued tokens\\r\\n     * @param _to - address for the new issued tokens\\r\\n     */\\r\\n    function mint(address _to, uint256 _amount) public onlyMinter {\\r\\n        _mint(_to, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address\\r\\n     * - `account` must have at least `amount` tokens\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n        _balances[account] = _balances[account].sub(\\r\\n            amount,\\r\\n            \\\"ERC20: burn amount exceeds balance\\\"\\r\\n        );\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address\\r\\n     * - `spender` cannot be the zero address\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual whenNotPaused {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n}\\r\\n\"},\"IBlacklist.sol\":{\"content\":\"/**\\r\\n * @title Interface Blacklist\\r\\n * @dev IBlacklist contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IBlacklist {\\r\\n    function isBlacklisted(address _address) external view returns (bool);\\r\\n}\\r\\n\"},\"IDontTrigger.sol\":{\"content\":\"/**\\r\\n * @title Interface dont Trigger\\r\\n * @dev IDontTrigger contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IDontTrigger {\\r\\n    function isDontTrigger(address _address) external view returns (bool);\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"/**\\r\\n * @title Interface ERC20\\r\\n * @dev IERC20 contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n * File @openzeppelin/contracts/token/ERC20/IERC20.sol\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both: the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\"},\"IReferrals.sol\":{\"content\":\"/**\\r\\n * @title Interface Referrals\\r\\n * @dev IReferrals contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IReferrals {\\r\\n    function getSponsor(address account) external view returns (address);\\r\\n}\"},\"ISecurusProxy.sol\":{\"content\":\"/**\\r\\n * @title Interface Securus Proxy\\r\\n * @dev ISecurusProxy contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface ISecurusProxy {\\r\\n    function triggerProxy() external;\\r\\n}\\r\\n\"},\"IWhitelist.sol\":{\"content\":\"/**\\r\\n * @title Interface Whitelist\\r\\n * @dev IWhitelist contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IWhitelist {\\r\\n    function isWhitelisted(address _user) external view returns (bool);\\r\\n\\r\\n    function statusWhitelist() external view returns (bool);\\r\\n}\\r\\n\"},\"IZeroFee.sol\":{\"content\":\"/**\\r\\n * @title Interface Zero Fee\\r\\n * @dev IZeroFee contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\ninterface IZeroFee {\\r\\n    function isZeroFeeSender(address _address) external view returns (bool);\\r\\n\\r\\n    function isZeroFeeRecipient(address _address) external view returns (bool);\\r\\n}\\r\\n\"},\"Manager.sol\":{\"content\":\"/**\\r\\n * @title Fee Manager\\r\\n * @dev FeeManager contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation\\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./MinterRole.sol\\\";\\r\\nimport \\\"./IDontTrigger.sol\\\";\\r\\nimport \\\"./IWhitelist.sol\\\";\\r\\nimport \\\"./IBlacklist.sol\\\";\\r\\nimport \\\"./ISecurusProxy.sol\\\";\\r\\nimport \\\"./IZeroFee.sol\\\";\\r\\nimport \\\"./IReferrals.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract Manager is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /**\\r\\n     * @dev outputs the external contracts.\\r\\n     */\\r\\n    IWhitelist public whitelist;\\r\\n    IBlacklist public blacklist;\\r\\n    IDontTrigger public dontTrigger;\\r\\n    IZeroFee public zeroFee;\\r\\n    IReferrals public referrals;\\r\\n    ISecurusProxy public securusProxy;\\r\\n    address public newSecurusProxyContract;\\r\\n\\r\\n    /**\\r\\n     * @dev outputs the proxy trigger variables.\\r\\n     */\\r\\n    bool public securusProxyTrigger; // is the proxy active or disabled\\r\\n    uint256 public nextProxyTrigger; // After how many blocks you can trigger the Proxy again\\r\\n    uint256 public nextProxyTriggerBlock; // can trigger Proxy when next block.timestamp is bigger than nextProxyTriggerBlock\\r\\n    uint256 public proxyTriggerAmount; // can trigger Proxy when send Amount is bigger than this proxyTriggerAmount\\r\\n\\r\\n    /**\\r\\n     * @dev outputs the proxy Timelock variables.\\r\\n     */\\r\\n    uint256 public proxyBlockTimelock; // the timelock in blocks you have to wait after updating the proxy to set a new proxy contract on active\\r\\n    uint256 public lastProxyTimelockBlock; // the last timelock block after the new proxy contract can be activated\\r\\n\\r\\n    /**\\r\\n     * @dev outputs the fee variables.\\r\\n     */\\r\\n    uint256 public fee;\\r\\n    uint256 public refLevel1Fee;\\r\\n    uint256 public refLevel2Fee;\\r\\n    uint256 public refLevel3Fee;\\r\\n    address public feeReceiver;\\r\\n    address public basicRef;\\r\\n\\r\\n    /**\\r\\n     * @dev outputs the `freeMintSupply` variable.\\r\\n     */\\r\\n    uint256 public freeMintSupply;\\r\\n\\r\\n    /**\\r\\n     * @dev set the {fee} for transfers.\\r\\n     *\\r\\n     * how many fees should be taken from a transaction.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `owner` can update the `fee`\\r\\n     * - fee can only be lower than 10%\\r\\n     *\\r\\n     */\\r\\n    function setFee(uint256 _fee) public onlyOwner {\\r\\n        require(_fee \\u003c= 1000, \\\"too high\\\");\\r\\n        fee = _fee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the {fee} for ref level 1.\\r\\n     *\\r\\n     * how many ref level 1 fees should be taken from a fee.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `owner` can update the `fee`\\r\\n     * - fee can only be lower than 100%\\r\\n     *\\r\\n     */\\r\\n    function setRefLevel1Fee(uint256 _refLevel1Fee) public onlyOwner {\\r\\n        require(_refLevel1Fee.add(refLevel2Fee).add(refLevel3Fee) \\u003c= 100, \\\"too high\\\");\\r\\n        refLevel1Fee = _refLevel1Fee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the {fee} for ref level 2.\\r\\n     *\\r\\n     * how many ref level 2 fees should be taken from a fee.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `owner` can update the `fee`\\r\\n     * - fee can only be lower than 100%\\r\\n     *\\r\\n     */\\r\\n    function setRefLevel2Fee(uint256 _refLevel2Fee) public onlyOwner {\\r\\n        require(_refLevel2Fee.add(refLevel1Fee).add(refLevel3Fee) \\u003c= 100, \\\"too high\\\");\\r\\n        refLevel2Fee = _refLevel2Fee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the {fee} for ref level 3.\\r\\n     *\\r\\n     * how many ref level 3 fees should be taken from a fee.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `owner` can update the `fee`\\r\\n     * - fee can only be lower than 100%\\r\\n     *\\r\\n     */\\r\\n    function setRefLevel3Fee(uint256 _refLevel3Fee) public onlyOwner {\\r\\n        require(_refLevel3Fee.add(refLevel1Fee).add(refLevel2Fee) \\u003c= 100 , \\\"too high\\\");\\r\\n        refLevel3Fee = _refLevel3Fee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the {fee} for ref level 3.\\r\\n     *\\r\\n     * how many ref level 3 fees should be taken from a fee.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `owner` can update the `fee`\\r\\n     * - fee can only be lower than 10%\\r\\n     *\\r\\n     */\\r\\n    function setBasicRef(address _basicRef) public onlyOwner {\\r\\n        basicRef = _basicRef;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the {feeReceiver} for transfers.\\r\\n     *\\r\\n     * The `owner` decides which address the fee should get.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `owner` can update the `feeReceiver`\\r\\n     */\\r\\n    function setfeeReceiver(address _feeReceiver) public onlyOwner {\\r\\n        feeReceiver = _feeReceiver;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the {securusProxyTrigger} for transfers.\\r\\n     *\\r\\n     * The `owner` decides whether the `securusProxyTrigger` is activated or deactivated.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `owner` can update the `securusProxyTrigger`\\r\\n     */\\r\\n    function setSecurusProxyTrigger(bool _securusProxyTrigger)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        securusProxyTrigger = _securusProxyTrigger;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the {proxyTriggerAmount} for the trigger.\\r\\n     *\\r\\n     * Says from which coin transfer size the trigger should be on.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `owner` can update the `proxyTriggerAmount`\\r\\n     */\\r\\n    function setproxyTriggerAmount(uint256 _proxyTriggerAmount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        proxyTriggerAmount = _proxyTriggerAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the {nextProxyTrigger} for contract trigger.\\r\\n     *\\r\\n     * The owner decides after which blocktime the strategy may be executed again.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `owner` can update the `nextProxyTrigger`\\r\\n     */\\r\\n    function setNextProxyTrigger(uint256 _nextProxyTrigger) public onlyOwner {\\r\\n        nextProxyTrigger = _nextProxyTrigger;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the {freeMintSupply} that the minter can create new coins.\\r\\n     *\\r\\n     * The owner decides how many new coins may be created by the minter.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `owner` can update the `freeMintSupply`\\r\\n     */\\r\\n    function setFreeMintSupply(uint256 _freeMintSupply) public onlyOwner {\\r\\n        freeMintSupply = _freeMintSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the {proxyBlockTimelock} to define block waiting times.\\r\\n     *\\r\\n     * This function ensures that functions cannot be executed immediately\\r\\n     * but have to wait for a defined block time.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `owner` can update the proxyBlockTimelock\\r\\n     * - proxyBlockTimelock can only be bigger than last proxyBlockTimelock\\r\\n     * - proxyBlockTimelock must be lower than 30 days\\r\\n     *\\r\\n     */\\r\\n    function setProxyBlockTimelock(uint256 _setProxyBlockTimelock)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            proxyBlockTimelock \\u003c _setProxyBlockTimelock,\\r\\n            \\\"SAFETY FIRST || proxyBlockTimelock can only be bigger than last blockTimelock\\\"\\r\\n        );\\r\\n        require(\\r\\n            _setProxyBlockTimelock \\u003c= 864000,\\r\\n            \\\"SAFETY FIRST || proxyBlockTimelock greater than 30 days\\\"\\r\\n        );\\r\\n        proxyBlockTimelock = _setProxyBlockTimelock;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Outputs the remaining time of the proxyBlockTimelock.\\r\\n     *\\r\\n     * How many blocks still have to pass to activate the new Proxy.\\r\\n     */\\r\\n    function checkRemainingProxyBlockTimelock() public view returns (uint256) {\\r\\n        uint256 remainingProxyBlockTimelock = lastProxyTimelockBlock.sub(\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        return remainingProxyBlockTimelock;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Outputs the remaining time of the Proxy Trigger.\\r\\n     *\\r\\n     * How many blocks still have to pass until the next proxy trigger possibility.\\r\\n     */\\r\\n    function checkRemainingProxyTriggerBlocktime()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 remainingProxyTriggerBlocktime = nextProxyTriggerBlock.sub(\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        return remainingProxyTriggerBlocktime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `external smart contracts`.\\r\\n     *\\r\\n     * These functions serve to be flexible and to connect further automated systems\\r\\n     * that will require an update in the long term.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `owner` can update the external smart contracts\\r\\n     * - `external smart contracts` must be correct and work\\r\\n     */\\r\\n    function updateZeroFeeContract(address _ZeroFeeContract) public onlyOwner {\\r\\n        zeroFee = IZeroFee(_ZeroFeeContract);\\r\\n    }\\r\\n\\r\\n    function updateDontTriggerContract(address _dontTriggerContract)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        dontTrigger = IDontTrigger(_dontTriggerContract);\\r\\n    }\\r\\n\\r\\n    function updateWhitelistContract(address _whitelistContract)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        whitelist = IWhitelist(_whitelistContract);\\r\\n    }\\r\\n\\r\\n    function updateBlacklistContract(address _blacklistContract)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        blacklist = IBlacklist(_blacklistContract);\\r\\n    }\\r\\n\\r\\n    function updateReferralsContract(address _referralsContract)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        referrals = IReferrals(_referralsContract);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `external securus proxy smart contract`\\r\\n     *\\r\\n     * This function shows that the owner wants to update\\r\\n     * the `securusProxyContract` and activates the `lastProxyTimelockBlock`.\\r\\n     *\\r\\n     * The new `securusProxyContract` is now shown to everyone\\r\\n     * and people can make necessary decisions from it.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `owner` can update the external smart contracts\\r\\n     * - `external smart contracts` must be correct and work\\r\\n     */\\r\\n    function updateSecurusProxyContract(address _securusProxyContract)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        newSecurusProxyContract = _securusProxyContract;\\r\\n        lastProxyTimelockBlock = block.timestamp.add(proxyBlockTimelock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Activate new `external Securus proxy smart contract`\\r\\n     *\\r\\n     * After the `lastProxyTimelockBlock` time has expired\\r\\n     * The owner can now activate his submitted `external Securus proxy smart contract`\\r\\n     * and reset the `proxyBlockTimelock` to 1 day.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - only `owner` can update the external smart contracts\\r\\n     * - `external smart contracts` must be correct and work\\r\\n     */\\r\\n    function activateNewSecurusProxyContract() public onlyOwner {\\r\\n        require(\\r\\n            lastProxyTimelockBlock \\u003c block.timestamp,\\r\\n            \\\"SAFETY FIRST || safetyTimelock smaller than current block\\\"\\r\\n        );\\r\\n        securusProxy = ISecurusProxy(newSecurusProxyContract);\\r\\n        proxyBlockTimelock = 28800; //Set the update time back to 1 day in case there is an error and you need to intervene quickly.\\r\\n    }\\r\\n}\\r\\n\"},\"MinterRole.sol\":{\"content\":\"/**\\r\\n * @title Minter Role\\r\\n * @dev MinterRole contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./Roles.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract MintRole is Ownable {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event MinterAdded(address indexed account);\\r\\n    event MinterRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _minters;\\r\\n\\r\\n    constructor() internal {\\r\\n        _addMinter(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(\\r\\n            isMinter(msg.sender),\\r\\n            \\\"MinterRole: caller does not have the Minter role\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns account address is Minter true or false.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - address `account` cannot be the zero address.\\r\\n     */\\r\\n    function isMinter(address account) public view returns (bool) {\\r\\n        return _minters.has(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev add address to the Minter role.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - address `account` cannot be the zero address.\\r\\n     */\\r\\n    function addMinter(address account) public onlyOwner {\\r\\n        _addMinter(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev remove address from the Minter role.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - address `account` cannot be the zero address.\\r\\n     */\\r\\n    function renounceMinter(address account) public onlyOwner {\\r\\n        _removeMinter(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev add address to the Minter role (internal).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - address `account` cannot be the zero address.\\r\\n     */\\r\\n    function _addMinter(address account) internal {\\r\\n        _minters.add(account);\\r\\n        emit MinterAdded(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev remove address from the Minter role (internal).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - address `account` cannot be the zero address.\\r\\n     */\\r\\n    function _removeMinter(address account) internal {\\r\\n        _minters.remove(account);\\r\\n        emit MinterRemoved(account);\\r\\n    }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"/**\\r\\n * @title Ownable\\r\\n * @dev Ownable contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n * File @openzeppelin/contracts/access/Ownable.sol\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n// import \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\\";\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any other account than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"Pausable.sol\":{\"content\":\"/**\\r\\n * @title Pausable\\r\\n * @dev Pausable contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n * File @openzeppelin/contracts/security/Pausable.sol\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./PauserRole.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused` which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\ncontract Pausable is PauserRole {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\r\\n     * to the deployer.\\r\\n     */\\r\\n    constructor() internal {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!_paused, \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(_paused, \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by a pauser to pause triggers stopped state.\\r\\n     */\\r\\n    function pause() public onlyPauser whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by a pauser to unpause - returns to normal state.\\r\\n     */\\r\\n    function unpause() public onlyPauser whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(msg.sender);\\r\\n    }\\r\\n}\\r\\n\"},\"PauserRole.sol\":{\"content\":\"/**\\r\\n * @title Pauser Role\\r\\n * @dev PauserRole contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./Roles.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract PauserRole is Ownable {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event PauserAdded(address indexed account);\\r\\n    event PauserRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _pausers;\\r\\n\\r\\n    constructor() internal {\\r\\n        _addPauser(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyPauser() {\\r\\n        require(\\r\\n            isPauser(msg.sender),\\r\\n            \\\"PauserRole: caller does not have the Pauser role\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns account address is Pauser true or false.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - address `account` cannot be the zero address.\\r\\n     */\\r\\n    function isPauser(address account) public view returns (bool) {\\r\\n        return _pausers.has(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev add address to the Pauser role.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - address `account` cannot be the zero address.\\r\\n     */\\r\\n    function addPauser(address account) public onlyOwner {\\r\\n        _addPauser(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev remove address from the Pauser role.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - address `account` cannot be the zero address.\\r\\n     */\\r\\n    function renouncePauser(address account) public onlyOwner {\\r\\n        _removePauser(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev add address to the Pauser role (internal).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - address `account` cannot be the zero address.\\r\\n     */\\r\\n    function _addPauser(address account) internal {\\r\\n        _pausers.add(account);\\r\\n        emit PauserAdded(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev remove address from the Pauser role (internal).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - address `account` cannot be the zero address.\\r\\n     */\\r\\n    function _removePauser(address account) internal {\\r\\n        _pausers.remove(account);\\r\\n        emit PauserRemoved(account);\\r\\n    }\\r\\n}\\r\\n\"},\"Roles.sol\":{\"content\":\"/**\\r\\n * @title Roles\\r\\n * @dev Roles contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n/**\\r\\n * @title Roles\\r\\n * @dev Library for managing addresses assigned to a Role.\\r\\n */\\r\\nlibrary Roles {\\r\\n    struct Role {\\r\\n        mapping(address =\\u003e bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an account access to this role.\\r\\n     */\\r\\n    function add(Role storage role, address account) internal {\\r\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an account\\u0027s access to this role.\\r\\n     */\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an account has this role.\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(Role storage role, address account)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"/**\\r\\n * @title Safe Math\\r\\n * @dev SafeMath contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n * File @openzeppelin/contracts/utils/math/SafeMath.sol\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"WXSCR.sol\":{\"content\":\"/**\\r\\n * @title WRAPPED SECURUS\\r\\n * @dev WXSCR contract\\r\\n *\\r\\n * @author - \\u003cAUREUM VICTORIA GROUP\\u003e\\r\\n * for the Securus Foundation \\r\\n *\\r\\n * SPDX-License-Identifier: GNU GPLv2\\r\\n *\\r\\n **/\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\ncontract WXSCR is ERC20 {\\r\\n    constructor() public ERC20(\\\"WRAPPED SECURUS\\\", \\\"WXSCR\\\") {}\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateNewSecurusProxyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basicRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"contract IBlacklist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRemainingProxyBlockTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRemainingProxyTriggerBlocktime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dontTrigger\",\"outputs\":[{\"internalType\":\"contract IDontTrigger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeMintSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProxyTimelockBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newSecurusProxyContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextProxyTrigger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextProxyTriggerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyBlockTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyTriggerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemBlackFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refLevel1Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refLevel2Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refLevel3Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract IReferrals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"securusProxy\",\"outputs\":[{\"internalType\":\"contract ISecurusProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"securusProxyTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_basicRef\",\"type\":\"address\"}],\"name\":\"setBasicRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_freeMintSupply\",\"type\":\"uint256\"}],\"name\":\"setFreeMintSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextProxyTrigger\",\"type\":\"uint256\"}],\"name\":\"setNextProxyTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setProxyBlockTimelock\",\"type\":\"uint256\"}],\"name\":\"setProxyBlockTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refLevel1Fee\",\"type\":\"uint256\"}],\"name\":\"setRefLevel1Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refLevel2Fee\",\"type\":\"uint256\"}],\"name\":\"setRefLevel2Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refLevel3Fee\",\"type\":\"uint256\"}],\"name\":\"setRefLevel3Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_securusProxyTrigger\",\"type\":\"bool\"}],\"name\":\"setSecurusProxyTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setfeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proxyTriggerAmount\",\"type\":\"uint256\"}],\"name\":\"setproxyTriggerAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusCoinWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_statusCoinWhitelistIs\",\"type\":\"bool\"}],\"name\":\"statusCoinWhitelistIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blacklistContract\",\"type\":\"address\"}],\"name\":\"updateBlacklistContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dontTriggerContract\",\"type\":\"address\"}],\"name\":\"updateDontTriggerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralsContract\",\"type\":\"address\"}],\"name\":\"updateReferralsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_securusProxyContract\",\"type\":\"address\"}],\"name\":\"updateSecurusProxyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistContract\",\"type\":\"address\"}],\"name\":\"updateWhitelistContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ZeroFeeContract\",\"type\":\"address\"}],\"name\":\"updateZeroFeeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"contract IWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroFee\",\"outputs\":[{\"internalType\":\"contract IZeroFee\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WXSCR", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e1dce503d40f9abcbe48b6b118bd23623e627760137ca889fd3347cc08c965c"}