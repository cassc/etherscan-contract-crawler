{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ninterface IDapp {\r\n    function getBurnAmount() external view returns(uint256);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\nabstract contract BaseToken is IERC20, Ownable {\r\n    bool public _disableBuyLimit;\r\n    uint8 private _decimals;  \r\n    uint32 public _startTradeBlock;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 public _totalBuyAmount;\r\n    uint256 public _releasedAmount;\r\n    uint256 public _addPriceTokenAmount;   \r\n    uint256 public _dayLimitAmountForPerson;\r\n    uint256 public _daySoldAmount;\r\n\r\n    ISwapRouter private _swapRouter;\r\n    IDapp public _dapp;\r\n    address public _releaseAddress;\r\n    address private _marketAddress;\r\n    address private _usdtAddress;\r\n    address private _mainPairAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    address[] private _dayBuyAddressList;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _feeWhiteList;\r\n    mapping(address => bool) private _swapPairMap;\r\n    \r\n    mapping(uint32 => uint256) private _dayLimitAmount; \r\n    mapping(address => uint256) private _dayBuyAmountMap;\r\n\r\n    constructor (string memory Name, string memory Symbol, uint256 Supply, address RouterAddress, address UsdtAddress, address marketAddress, address issueAddress, address releaseAddress, address dappAddress){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = 18;\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _usdtAddress = UsdtAddress;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][RouterAddress] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        _mainPairAddress = swapFactory.createPair(address(this), UsdtAddress);\r\n        _swapPairMap[_mainPairAddress] = true;\r\n\r\n        uint256 total = Supply * 1e18;\r\n        _totalSupply = total;\r\n        \r\n        _marketAddress = marketAddress;\r\n        _releaseAddress = releaseAddress;\r\n\r\n        _balances[address(0x000000000000000000000000000000000000dEaD)] = total/2; \r\n        emit Transfer(address(0), address(0x000000000000000000000000000000000000dEaD), _balances[address(0x000000000000000000000000000000000000dEaD)]);\r\n        \r\n        _balances[issueAddress] = total/4; \r\n        emit Transfer(address(0), issueAddress, _balances[issueAddress]);\r\n        \r\n        _balances[dappAddress] = total/5; \r\n        emit Transfer(address(0), dappAddress,  _balances[dappAddress]);\r\n        \r\n        _balances[address(this)] = total/20;  \r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n\r\n\r\n        _dapp = IDapp(dappAddress);\r\n\r\n        _marketAddress = marketAddress;\r\n\r\n        _feeWhiteList[marketAddress] = true;\r\n        _feeWhiteList[issueAddress] = true;\r\n        _feeWhiteList[dappAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _addPriceTokenAmount = 1e14;\r\n        _startTradeBlock = 0;\r\n    }\r\n\r\n    function pairAddress() external view returns (address) {\r\n        return _mainPairAddress;\r\n    }\r\n    \r\n    function routerAddress() external view returns (address) {\r\n        return address(_swapRouter);\r\n    }\r\n    \r\n    function usdtAddress() external view returns (address) {\r\n        return _usdtAddress;\r\n    }\r\n    \r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    \r\n    function _isLiquidity(address from,address to) internal view returns(bool isAdd,bool isDel){\r\n        address token0 = IUniswapV2Pair(_mainPairAddress).token0();\r\n        (uint r0,,) = IUniswapV2Pair(_mainPairAddress).getReserves();\r\n        uint bal0 = IERC20(token0).balanceOf(_mainPairAddress);\r\n        if( _swapPairMap[to] ){\r\n            if( token0 != address(this) && bal0 > r0 ){\r\n                isAdd = bal0 - r0 > _addPriceTokenAmount;\r\n            }\r\n        }\r\n        if( _swapPairMap[from] ){\r\n            if( token0 != address(this) && bal0 < r0 ){\r\n                isDel = r0 - bal0 > 0; \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {       \r\n        require(amount > 0, \"UNMS: transfer amount must be >0\");\r\n        if(address(this)==from) {\r\n            _tokenTransfer(from, to, amount); \r\n            return;\r\n        }\r\n        bool isAddLiquidity;\r\n        bool isDelLiquidity;\r\n        ( isAddLiquidity, isDelLiquidity) = _isLiquidity(from,to);\r\n        \r\n        if (_feeWhiteList[from] || _feeWhiteList[to] || isAddLiquidity || isDelLiquidity){\r\n            \r\n            _tokenTransfer(from, to, amount);\r\n\r\n        }else if(_swapPairMap[from] || _swapPairMap[to]){\r\n            \r\n            require(_startTradeBlock > 0, \"UNMS: trade don't start\");  \r\n            if (_swapPairMap[to]) {\r\n                require(amount <= (_balances[from])*99/100, \"UNMS: sell amount exceeds balance 99%\");\r\n            }else{\r\n                \r\n                _totalBuyAmount += amount; \r\n                if(!_disableBuyLimit){ \r\n                    uint32 today = uint32(block.timestamp/86400);   \r\n                    if(_dayLimitAmount[today] == 0) resetDayBuyLimit(); \r\n\r\n                    require(_daySoldAmount + amount <= _dayLimitAmount[today], \"UNMS: exceed day limit amount\");\r\n                    require(_dayBuyAmountMap[to] + amount <= _dayLimitAmountForPerson, \"UNMS: exceed day limit amount for person\");\r\n                    if(_dayBuyAmountMap[to] == 0) _dayBuyAddressList.push(to); \r\n                    _daySoldAmount += amount;\r\n                    _dayBuyAmountMap[to] += amount;\r\n                }\r\n            }\r\n            _tokenTransfer(from, to, amount*93/100);     \r\n            _tokenTransfer(from, _marketAddress, amount*7/100);              \r\n        }\r\n    }\r\n    \r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        _balances[recipient] = _balances[recipient] + tAmount;\r\n        emit Transfer(sender, recipient, tAmount);\r\n        if(!_disableBuyLimit && _dayLimitAmount[uint32(block.timestamp/86400)] == 0) resetDayBuyLimit(); \r\n    }\r\n\r\n    \r\n    function getLockedAmount() external view returns(uint256) {\r\n        return _balances[address(this)];\r\n    }\r\n\r\n    function getUnlockedAmount() public view returns(uint256) {\r\n        \r\n        return (_dapp.getBurnAmount() + _totalBuyAmount)/20;\r\n    }\r\n\r\n    \r\n    function getReleaseableAmount() public view returns(uint256) {\r\n        uint256 unlockdedAmount = getUnlockedAmount();\r\n        if(unlockdedAmount > _releasedAmount) return unlockdedAmount-_releasedAmount; \r\n        return 0;\r\n    }\r\n\r\n    \r\n    function releaseToken(uint256 amount) external{\r\n        uint256 releaseableAmount = getReleaseableAmount();\r\n        require(releaseableAmount > 0, \"UNMS: releaseable amount is zero\");\r\n        require(releaseableAmount >= amount, \"UNMS: releaseable amount is less than amount\");\r\n        _tokenTransfer(address(this), _releaseAddress, amount);\r\n        _releasedAmount += amount;\r\n    }\r\n\r\n    \r\n    function getTodayLimitAmount(address addr) external view returns(uint256 todayLimitAmount, uint256 myLimitAmount) {\r\n        todayLimitAmount =  _dayLimitAmount[uint32(block.timestamp/86400)];\r\n        if(_dayLimitAmountForPerson > _dayBuyAmountMap[addr])  myLimitAmount = _dayLimitAmountForPerson - _dayBuyAmountMap[addr];\r\n    }\r\n\r\n    \r\n    function resetDayBuyLimit() internal {    \r\n        uint32 today = uint32(block.timestamp/86400);   \r\n        \r\n        \r\n        if(_dayLimitAmount[today-4] > 0) delete _dayLimitAmount[today-4];\r\n        if(_dayLimitAmount[today-3] > 0) delete _dayLimitAmount[today-3];\r\n\r\n        address[] memory addressList = _dayBuyAddressList;\r\n        for(uint i=0;i<addressList.length;i++){\r\n            delete _dayBuyAmountMap[addressList[i]];\r\n        }\r\n        delete _dayBuyAddressList;\r\n        delete _daySoldAmount;\r\n        _dayLimitAmount[today] = _dapp.getBurnAmount()/50; \r\n        _dayLimitAmountForPerson = _dayLimitAmount[today]/50; \r\n    }\r\n\r\n    function setReleaseAddress(address addr) external onlyOwner {\r\n        _releaseAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function getReleaseAddress() external view returns(address) {\r\n        return _releaseAddress;\r\n    }\r\n\r\n    function setMarketAddress(address addr) external onlyOwner {\r\n        _marketAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function getMarketAddress() external view returns(address) {\r\n        return _marketAddress;\r\n    }\r\n\r\n    function isFeeWhiteAddress(address addr) external view returns(bool) {\r\n        return _feeWhiteList[addr];\r\n    }\r\n\r\n    function setDappAddress(address addr) external onlyOwner {\r\n        _dapp = IDapp(addr);\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setDisableBuyLimit(bool disable) external onlyOwner {\r\n       _disableBuyLimit = disable;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == _startTradeBlock, \"trading\");\r\n        _startTradeBlock = uint32(block.number);\r\n    }\r\n\r\n    function closeTrade() external onlyOwner {\r\n        _startTradeBlock = 0;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }    \r\n\r\n    function getFeeWhiteList(address addr) external view returns(bool) {\r\n        return _feeWhiteList[addr];\r\n    }  \r\n\r\n    function setSwapPairMap(address addr, bool enable) external onlyOwner {\r\n        _swapPairMap[addr] = enable;\r\n    }\r\n\r\n    function setAddPriceTokenAmount(uint addPriceTokenAmount) external onlyOwner{\r\n        _addPriceTokenAmount = addPriceTokenAmount;\r\n    }\r\n\r\n    function getTodayBuyAddressList() external view returns(address[] memory){\r\n        return _dayBuyAddressList;\r\n    }\r\n\r\n    function getTodayBuyAmount(address userAddress) external view returns(uint256){\r\n        return _dayBuyAmountMap[userAddress];\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\ncontract Unms is BaseToken {\r\n    constructor(address dappAddress) BaseToken(\r\n        \"UNMS\",\r\n        \"UNMS\",\r\n        1000000000,\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E), \r\n        address(0x55d398326f99059fF775485246999027B3197955), \r\n        address(0x993Ef42C3d2b0dFF7e2AdA1B83F211BD2025AaFF), \r\n        address(0x6FEb077fAE31C4ed7788D874ad75Bba22b0ACc60), \r\n        address(0xD63eD86047853035F3880E8095F0c42e562c06A6), \r\n        dappAddress\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dappAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_addPriceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dapp\",\"outputs\":[{\"internalType\":\"contract IDapp\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dayLimitAmountForPerson\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_daySoldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_disableBuyLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releaseAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTradeBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getFeeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleaseAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleaseableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTodayBuyAddressList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTodayBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getTodayLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"todayLimitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myLimitAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isFeeWhiteAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addPriceTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setAddPriceTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDappAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"}],\"name\":\"setDisableBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Unms", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001603e4726a8e2db4634c1ae9302745a1d18678b0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f9d3c42d13cda2db19748c9a24a076652ad9608e7a4550274963dd928374b237"}