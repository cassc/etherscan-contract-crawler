{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICoupons.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface ICoupons{\\n\\n    struct Coupon {\\n        bytes32 couponHash;\\n        uint8 minPct;\\n        uint8 maxPct;\\n        uint16 multiplierPct;\\n        bool isPaid;\\n    }\\n\\n    struct CouponRule {\\n        uint16 minRndPct;\\n        uint16 maxRndPct;\\n        uint16 step;\\n        bool allowExtMultiplier;    // Allow external multiplier\\n    }\\n\\n    struct CouponPrice {\\n        address tokenAddress;       // if address 0x0 - this is base currency\\n        uint couponFee;\\n    }\\n\\n    struct CouponTicket {\\n        address playerAddress;\\n        uint16 multiplierPct;\\n        bool used;\\n    }\\n\\n    function getCoupon(\\n        bytes32 couponHash,\\n        address playerAddress,\\n        address contractAddress,\\n        uint32 raffleId\\n    ) external view returns (Coupon memory);\\n\\n    /*\\n     * @notice Buy a coupon for tokens with predefined multiplier percentage.\\n     * @dev If the sale is for erc20 tokens, then the payment amount in the transaction\\n     * 'msg.value' must be set to zero.\\n     *\\n     * @param contractAddress The address of the drop game contract.\\n     * @param raffleId The draw Id.\\n     * @param tokenAddress The address of the payment token. Use address(0) for native token payments.\\n     * @param amount `amount` of tokens to pay. For the native token must be 0\\n     * @param multiplierPct Multiplier percentage.\\n     *        If set to 0, the value will be generated by the contract based on the rule.\\n     * @return void\\n     */\\n    function buyCoupon(\\n        address contractAddress,\\n        uint32 raffleId,\\n        address tokenAddress,\\n        uint256 amount,\\n        uint16 multiplierPct\\n    ) external payable;\\n\\n    function useCoupon(\\n        bytes32 couponHash,\\n        address playerAddress,\\n        uint32 raffleId\\n    ) external returns (Coupon memory);\\n\\n    function getCouponTicket(\\n        address contractAddress,\\n        uint32 raffleId,\\n        bytes32 couponHash\\n    ) external returns (CouponTicket memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPrizeMatrix.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IPrizeMatrix{\\n    enum PrizeType {\\n        DIRECT,\\n        OFFLINE,\\n        PENDING\\n    }\\n\\n    struct PrizeLevel {\\n        uint32 nWinners;\\n        uint256 prize;\\n        bool directPayment;\\n    }\\n\\n    function getPrizeMatrix(uint32 raffleId) external returns (PrizeLevel[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPrizeStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IPrizeMatrix.sol\\\";\\nimport \\\"./IRaffleResults.sol\\\";\\n\\ninterface IPrizeStorage{\\n        function setPrizes(\\n        IRaffleResults.RaffleResults memory raffleResults,\\n        IPrizeMatrix.PrizeLevel[] memory prizeMatrix\\n    ) external payable;\\n\\n    function checkForPrize(address contractAddress, uint32 raffleId, address playerAddress) external returns (uint);\\n\\n    function getRaffleDrawBalance(address contractAddress, uint32 raffleId) external view returns (uint);\\n\\n    function getRaffleDrawTimestamp(address contractAddress, uint32 raffleId) external view returns (uint);\\n\\n    function prizePayout(address contractAddress, uint32 raffleId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRaffleResults.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IRaffleResults {\\n    struct RaffleResults {\\n        uint32 raffleId;\\n        uint timestamp;\\n        PrizeLevelWinners[] winnersMatrix;\\n    }\\n\\n    struct PrizeLevelWinners {\\n        address payable [] winners;\\n    }\\n\\n    function getRaffleResults(uint32 raffleId) external returns (RaffleResults memory);\\n}\\n\"\r\n    },\r\n    \"contracts/Raffle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"./interfaces/IPrizeMatrix.sol\\\";\\nimport \\\"./interfaces/IRaffleResults.sol\\\";\\nimport \\\"./interfaces/ICoupons.sol\\\";\\nimport \\\"./interfaces/IPrizeStorage.sol\\\";\\n//import \\\"hardhat/console.sol\\\";\\n\\n/* Errors */\\n    error Raffle__UpkeepNotNeeded();\\n    error Raffle__ChangeTransferFailed();\\n    error Raffle__TransferToWinnerFailed();\\n    error Raffle__TransferToSafeFailed();\\n    error Raffle__PartnerIdTooLong();\\n    error Raffle__SendMoreToEnterRaffle();\\n    error Raffle__MaxTicketsLimit();\\n    error Raffle__RaffleNotOpen();\\n    error Raffle__OnlyOwnerAllowed();\\n    error Raffle__OnlyAtMaintenanceAllowed();\\n    error Raffle__MustUpdatePrizeMatrix();\\n    error Raffle__PrizeMatrixWrongBalance();\\n    error Raffle__PrizeMatrixDirectPrizesLimit();\\n    error Raffle__PrizeMatrixTotalPrizesLimit();\\n    error Raffle__PrizeMatrixIsEmpty();\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface, IRaffleResults, IPrizeMatrix {\\n    string private constant VERSION = \\\"0.6.1\\\";\\n\\n    /* Type declarations */\\n    enum RaffleState {\\n        OPEN,\\n        DRAW_PENDING,    // pending the draw. Use this stage for data sync\\n        DRAW,            // CALCULATING a winner\\n        MAINTENANCE      // State to change contract settings, between DRAW and OPEN.\\n    }\\n    /* State variables */\\n    // ChainLink VRF constants\\n    struct ChainLinkConstants {\\n        address vrfCoordinatorAddress;\\n        uint16 requestConfirmations;\\n        bytes32 gasLane;\\n    }\\n    // ChainLink VRF parameters\\n    struct ChainLinkParams {\\n        uint64 subscriptionId;\\n        uint32 callbackGasLimit;\\n    }\\n    // Lottery parameters\\n    struct RaffleParams {\\n        uint256 entranceFee;\\n        uint256 prize;\\n        bool autoStart;\\n        uint8 prizePct;\\n        uint32 maxTickets;\\n        address payable safeAddress;\\n    }\\n    // Coupon manager constants\\n    ICoupons public couponManager;\\n    IPrizeStorage public prizeStorage;\\n    // ChainLink constants\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    address private immutable i_vrfCoordinatorAddress;\\n    uint16 private immutable i_requestConfirmations;\\n    bytes32 private immutable i_gasLane;\\n    // ChainLink parameters\\n    ChainLinkParams private s_chainLinkParams;\\n    // Lottery parameters\\n    RaffleParams private s_raffleParams;\\n    mapping(uint32 => IPrizeMatrix.PrizeLevel[]) private s_prizeMatrix;\\n    // Lottery variables\\n    address private s_owner;\\n    uint32 private s_raffleId;\\n    uint256 private s_targetBalance;\\n    mapping(uint32 => address payable []) private s_tickets;\\n    mapping(uint32 => mapping(address => uint32)) private s_nTickets;\\n    // raffleId => partnerIDs\\n    mapping(uint32 => string[]) private s_partnerIDs;\\n    // raffleId => partnerId => balance\\n    mapping(uint32 => mapping(string => uint256)) private s_partnerBalance;\\n    RaffleState private s_raffleState;\\n    // Lottery results\\n    mapping(uint32 => mapping(uint8 => uint32[])) private s_winnerIndexes;\\n    /* Events */\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event RaffleEnter(\\n        address indexed player,\\n        RaffleState raffleState,\\n        uint32 ticketsSold,\\n        uint32 bonusTickets,\\n        string partnerID\\n    );\\n    event WinnerPicked(uint256[] randomWords, uint256 ownerIncome, RaffleState raffleState);\\n    event CheckUpkeepCall(address indexed keeper, RaffleState raffleState, bool upkeepNeeded);\\n    event ChangeState(RaffleState raffleState);\\n    event ChangeRaffleParams(RaffleParams raffleParams);\\n    event CouponError(string reason);\\n\\n    /* Functions */\\n    constructor(\\n        address couponManagerAddress,\\n        address prizeStorageAddress,\\n        ChainLinkConstants memory _chainLinkConstants,\\n        ChainLinkParams memory _chainLinkParams,\\n        RaffleParams memory _raffleParams\\n    ) VRFConsumerBaseV2(_chainLinkConstants.vrfCoordinatorAddress) {\\n        couponManager = ICoupons(couponManagerAddress);\\n        prizeStorage = IPrizeStorage(prizeStorageAddress);\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(_chainLinkConstants.vrfCoordinatorAddress);\\n        i_vrfCoordinatorAddress = _chainLinkConstants.vrfCoordinatorAddress;\\n        i_requestConfirmations = _chainLinkConstants.requestConfirmations;\\n        i_gasLane = _chainLinkConstants.gasLane;\\n        s_chainLinkParams.subscriptionId = _chainLinkParams.subscriptionId;\\n        s_chainLinkParams.callbackGasLimit = _chainLinkParams.callbackGasLimit;\\n        _setRaffleParams(_raffleParams);\\n        s_owner = msg.sender;\\n        s_raffleId = 1;\\n        s_raffleState = RaffleState.MAINTENANCE;\\n        setTargetBalance();\\n        setPrizeMatrix(new IPrizeMatrix.PrizeLevel[](0));\\n    }\\n\\n    function enterRaffle(string memory couponKey, string memory partnerID) public payable {\\n        if (bytes(partnerID).length > 256) {\\n            revert Raffle__PartnerIdTooLong();\\n        }\\n        if (msg.value < s_raffleParams.entranceFee) {\\n            revert Raffle__SendMoreToEnterRaffle();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__RaffleNotOpen();\\n        }\\n        if (msg.value > s_raffleParams.entranceFee * s_raffleParams.maxTickets) {\\n            revert Raffle__MaxTicketsLimit();\\n        }\\n\\n        // The overbooking must be sent back to the player as change.\\n        uint256 overbooking = 0;\\n        if (address(this).balance >= s_targetBalance) {\\n            s_raffleState = RaffleState.DRAW_PENDING;\\n            overbooking = address(this).balance - s_targetBalance;\\n        }\\n        uint32 realTickets = uint32((msg.value - overbooking) / s_raffleParams.entranceFee);\\n        uint32 bonusTickets;\\n\\n        // Update partner balance\\n        if (bytes(partnerID).length > 0) {\\n            if (s_partnerBalance[s_raffleId][partnerID] == 0) {\\n                s_partnerIDs[s_raffleId].push(partnerID);\\n            }\\n            s_partnerBalance[s_raffleId][partnerID] += msg.value - overbooking;\\n        }\\n\\n        // Check coupons\\n        if (bytes(couponKey).length > 0) {\\n            try couponManager.useCoupon(keccak256(abi.encodePacked(couponKey)), msg.sender, s_raffleId)\\n            returns (ICoupons.Coupon memory coupon) {\\n                uint256 startBalancePct = uint16(100 * (address(this).balance - msg.value) / s_targetBalance);\\n                if (coupon.minPct <= startBalancePct && startBalancePct <= coupon.maxPct) {\\n                    bonusTickets += (realTickets * coupon.multiplierPct) / 100;\\n                }\\n            } catch Error(string memory reason) {\\n                emit CouponError(reason);\\n            }\\n        }\\n\\n        for (uint ticketId = 0; ticketId < realTickets + bonusTickets; ticketId++) {\\n            s_tickets[s_raffleId].push(payable(msg.sender));\\n        }\\n        s_nTickets[s_raffleId][msg.sender] += (realTickets + bonusTickets);\\n        // Try to send change\\n        if (overbooking > 0) {\\n            (bool changeTxSuccess, ) = msg.sender.call{value: overbooking}(\\\"\\\");\\n            if (!changeTxSuccess) {\\n                revert Raffle__ChangeTransferFailed();\\n            }\\n        }\\n        emit RaffleEnter(msg.sender, s_raffleState, realTickets, bonusTickets, partnerID);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for `upkeepNeeded` to return True.\\n     */\\n    function checkUpkeep(\\n        bytes calldata upkeepData\\n    )\\n    public\\n    override\\n    returns (\\n        bool upkeepNeeded,\\n        bytes memory _upkeepData\\n    )\\n    {\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\n        bool isDrawPending = RaffleState.DRAW_PENDING == s_raffleState;\\n        bool hasPlayers = s_tickets[s_raffleId].length > 0;\\n        bool bankCollected = (s_targetBalance > 0 && address(this).balance >= s_targetBalance);\\n        upkeepNeeded = (hasPlayers && (isOpen || isDrawPending) && bankCollected);\\n\\n        if (upkeepNeeded) {\\n            s_raffleState = RaffleState.DRAW_PENDING;\\n        }\\n        _upkeepData = upkeepData;\\n        emit CheckUpkeepCall(msg.sender, s_raffleState, upkeepNeeded);\\n    }\\n\\n    /**\\n     * @dev Once `checkUpkeep` is returning `true`, this function is called\\n     * and it kicks off a Chainlink VRF call to get a random winner.\\n     */\\n    function performUpkeep(\\n        bytes calldata upkeepData\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(upkeepData);\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded();\\n        }\\n        s_raffleState = RaffleState.DRAW;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            s_chainLinkParams.subscriptionId,\\n            i_requestConfirmations,\\n            s_chainLinkParams.callbackGasLimit,\\n            getNumWords()\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    /**\\n     * @dev This is the function that Chainlink VRF node\\n     * calls to send the money to the random winner.\\n     */\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint unpaidPrize = s_raffleParams.prize;\\n        uint winnerId;\\n        uint nLevels = s_prizeMatrix[s_raffleId].length;\\n        uint32 raffleId = s_raffleId;\\n\\n        IRaffleResults.RaffleResults memory raffleResults;\\n        raffleResults.raffleId = raffleId;\\n        raffleResults.timestamp = block.timestamp;\\n        raffleResults.winnersMatrix =\\n            new IRaffleResults.PrizeLevelWinners[](nLevels);\\n\\n        for (uint levelId; levelId < nLevels; levelId++) {\\n            uint nPrizes = s_prizeMatrix[raffleId][levelId].nWinners;\\n            raffleResults.winnersMatrix[levelId].winners = new address payable [](nPrizes);\\n\\n            for (uint prizeId; prizeId < nPrizes; prizeId++) {\\n                uint32 indexOfWinner = uint32(randomWords[winnerId] % s_tickets[raffleId].length);\\n                raffleResults.winnersMatrix[levelId].winners[prizeId] = s_tickets[raffleId][indexOfWinner];\\n                s_winnerIndexes[raffleId][uint8(levelId)].push(indexOfWinner);\\n                address payable winnerAddress = s_tickets[raffleId][indexOfWinner];\\n                uint prize = s_prizeMatrix[raffleId][levelId].prize;\\n                if (s_prizeMatrix[raffleId][levelId].directPayment) {\\n                    (bool winnerTxSuccess, ) = winnerAddress.call{value: prize}(\\\"\\\");\\n                    if (winnerTxSuccess) {\\n                        unpaidPrize -= prize;\\n                    }\\n                }\\n                // console.log('fulfillRandomWords: processed=%s, gas=%s', winnerId, gasleft());\\n                winnerId++;\\n            }\\n        }\\n        prizeStorage.setPrizes{value: unpaidPrize}(raffleResults, s_prizeMatrix[s_raffleId]);\\n\\n        uint256 fee = address(this).balance;\\n        (bool safeTxSuccess, ) = s_raffleParams.safeAddress.call{value: fee}(\\\"\\\");\\n        if (safeTxSuccess) {\\n            // copy matrix to the new draw\\n            for (uint prizeLevel; prizeLevel < s_prizeMatrix[s_raffleId].length; prizeLevel++) {\\n                s_prizeMatrix[s_raffleId + 1].push(s_prizeMatrix[s_raffleId][prizeLevel]);\\n            }\\n            if (s_raffleParams.autoStart) {\\n                s_raffleState = RaffleState.OPEN;\\n            } else {\\n                s_raffleState = RaffleState.MAINTENANCE;\\n            }\\n        } else {\\n            s_raffleState = RaffleState.MAINTENANCE;\\n        }\\n\\n        // Switch to a new lottery session\\n        s_raffleId += 1;\\n\\n        emit WinnerPicked(randomWords, fee, s_raffleState);\\n//        console.log('fulfillRandomWords: total gas left=%s', gasleft());\\n    }\\n\\n    /** Getter Functions */\\n    function getVersion() public pure returns (string memory) {\\n        return VERSION;\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return s_owner;\\n    }\\n\\n    function getRaffleParams() public view returns (RaffleParams memory) {\\n        return s_raffleParams;\\n    }\\n\\n    function getPrizeMatrix(uint32 raffleId) public override view returns (IPrizeMatrix.PrizeLevel[] memory) {\\n        return s_prizeMatrix[raffleId];\\n    }\\n\\n    function getNumWords() public view returns (uint32) {\\n        uint32 numWords;\\n        for (uint i=0; i < s_prizeMatrix[s_raffleId].length; i++) {\\n            numWords += s_prizeMatrix[s_raffleId][i].nWinners;\\n        }\\n        return numWords;\\n    }\\n\\n    function getChainLinkParams() public view returns (ChainLinkParams memory) {\\n        return s_chainLinkParams;\\n    }\\n\\n    function getRaffleId() public view returns(uint32) {\\n        return s_raffleId;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumberOfTicketsByRaffleId(uint32 raffleId) public view returns (uint256) {\\n        return s_tickets[raffleId].length;\\n    }\\n\\n    function getNumberOfPlayerTickets(address playerAddress) public view returns(uint32) {\\n        return s_nTickets[s_raffleId][playerAddress];\\n    }\\n    function getNumberOfPlayerTicketsByRaffleId(address playerAddress, uint32 raffleId) public view returns(uint32) {\\n        return s_nTickets[raffleId][playerAddress];\\n    }\\n\\n    function getPlayerByTicketIdByRaffleId(uint256 ticketIndex, uint32 raffleId) public view returns (address) {\\n        return s_tickets[raffleId][ticketIndex];\\n    }\\n\\n    function getTargetBalance() public view returns (uint256) {\\n        return s_targetBalance;\\n    }\\n\\n    function getBalancePct() public view returns (uint16) {\\n        return uint16(100 * address(this).balance / s_targetBalance);\\n    }\\n\\n    function getPartnerIDs(uint32 raffleId) public view returns (string[] memory) {\\n        return s_partnerIDs[raffleId];\\n    }\\n\\n    function getPartnerBalance(uint32 raffleId, string memory partnerID) public view returns (uint256) {\\n        if (bytes(partnerID).length > 256) {\\n            revert Raffle__PartnerIdTooLong();\\n        }\\n        return s_partnerBalance[raffleId][partnerID];\\n    }\\n\\n    function getRaffleResults(uint32 raffleId) public override view returns (IRaffleResults.RaffleResults memory) {\\n        IRaffleResults.RaffleResults memory raffleResults;\\n        raffleResults.raffleId = raffleId;\\n        raffleResults.timestamp = prizeStorage.getRaffleDrawTimestamp(address(this), raffleId);\\n        raffleResults.winnersMatrix =\\n            new IRaffleResults.PrizeLevelWinners[](s_prizeMatrix[raffleId].length);\\n        for (uint levelId; levelId < s_prizeMatrix[raffleId].length; levelId++) {\\n            uint nPrizes = s_prizeMatrix[raffleId][levelId].nWinners;\\n            raffleResults.winnersMatrix[levelId].winners = new address payable [](nPrizes);\\n            for (uint prizeId; prizeId < nPrizes; prizeId++) {\\n                uint32 indexOfWinner = s_winnerIndexes[raffleId][uint8(levelId)][prizeId];\\n                raffleResults.winnersMatrix[levelId].winners[prizeId] = s_tickets[raffleId][indexOfWinner];\\n            }\\n        }\\n        return raffleResults;\\n    }\\n\\n\\n    /** Setter Functions **/\\n    function setTargetBalance() private {\\n        uint bank = (s_raffleParams.prize / s_raffleParams.prizePct) * 100;\\n        if (bank % s_raffleParams.entranceFee > 0) {\\n            s_targetBalance = (bank / s_raffleParams.entranceFee + 1) * s_raffleParams.entranceFee;\\n        } else {\\n            s_targetBalance = bank;\\n        }\\n    }\\n\\n    function setSubscriptionId(uint32 subscriptionId) public onlyOwner {\\n        s_chainLinkParams.subscriptionId = subscriptionId;\\n    }\\n\\n    function setCallbackGasLimit(uint32 gasLimit) public onlyOwner {\\n        s_chainLinkParams.callbackGasLimit = gasLimit;\\n    }\\n\\n    function setAutoStart(bool isEnabled) public onlyOwner {\\n        s_raffleParams.autoStart = isEnabled;\\n    }\\n\\n    function setRaffleParams(RaffleParams memory raffleParams) public onlyOwner atMaintenance {\\n        _setRaffleParams(raffleParams);\\n        emit ChangeRaffleParams(raffleParams);\\n    }\\n\\n    function _setRaffleParams(RaffleParams memory raffleParams) private {\\n        s_raffleParams.entranceFee = raffleParams.entranceFee;\\n        s_raffleParams.prize = raffleParams.prize;\\n        s_raffleParams.autoStart = raffleParams.autoStart;\\n        s_raffleParams.prizePct = raffleParams.prizePct;\\n        s_raffleParams.maxTickets = raffleParams.maxTickets;\\n        s_raffleParams.safeAddress = raffleParams.safeAddress;\\n        setTargetBalance();\\n    }\\n\\n    function setPrizeMatrix(IPrizeMatrix.PrizeLevel[] memory prizeMatrix) public onlyOwner atMaintenance {\\n        _checkCurrentPrizeMatrix(prizeMatrix);\\n        if (prizeMatrix.length == 0) {\\n            delete s_prizeMatrix[s_raffleId];\\n            s_prizeMatrix[s_raffleId].push(IPrizeMatrix.PrizeLevel(1, s_raffleParams.prize, true));\\n        } else {\\n            delete s_prizeMatrix[s_raffleId];\\n            for (uint levelId=0; levelId < prizeMatrix.length; levelId++) {\\n                s_prizeMatrix[s_raffleId].push(prizeMatrix[levelId]);\\n            }\\n        }\\n    }\\n\\n    function _checkCurrentPrizeMatrix(IPrizeMatrix.PrizeLevel[] memory prizeMatrix) internal view {\\n        if (s_raffleId > 0 && prizeMatrix.length > 0) {\\n            uint directPrizesNumber;\\n            uint prizesTotalNumber;\\n            uint matrixBalance;\\n            for (uint levelId=0; levelId < prizeMatrix.length; levelId++) {\\n                matrixBalance += prizeMatrix[levelId].nWinners * prizeMatrix[levelId].prize;\\n                if (prizeMatrix[levelId].directPayment) {\\n                    directPrizesNumber += prizeMatrix[levelId].nWinners;\\n                }\\n                prizesTotalNumber += prizeMatrix[levelId].nWinners;\\n            }\\n            if (matrixBalance != s_raffleParams.prize) {\\n                revert Raffle__PrizeMatrixWrongBalance();\\n            }\\n            // TODO Make dynamic limits that depend on gas limit\\n//            if (directPrizesNumber > 10) {   // limit for 1.5M callback gas limit\\n//                revert Raffle__PrizeMatrixDirectPrizesLimit();\\n//            }\\n//            if (prizesTotalNumber > 60) {    // limit for 1.5M callback gas limit\\n//                revert Raffle__PrizeMatrixTotalPrizesLimit();\\n//            }\\n        }\\n    }\\n\\n    function setRaffleMaintenance() public onlyOwner {\\n        s_raffleState = RaffleState.MAINTENANCE;\\n        emit ChangeState(s_raffleState);\\n    }\\n\\n    function setRaffleOpen() public onlyOwner atMaintenance {\\n        _checkCurrentPrizeMatrix(s_prizeMatrix[s_raffleId]);\\n        s_raffleState = RaffleState.OPEN;\\n        emit ChangeState(s_raffleState);\\n    }\\n\\n    receive() external payable atMaintenance {\\n        // Set start bonus balance\\n    }\\n\\n    function rawFulfillRandomWinner(uint32 indexOfWinner) public onlyOwner atMaintenance {\\n        uint256[] memory randomWords = new uint256[](1);\\n        randomWords[0] = uint256(indexOfWinner);\\n        fulfillRandomWords(0, randomWords);\\n    }\\n\\n    function setCouponManager(address couponManagerAddress) public onlyOwner atMaintenance {\\n        couponManager = ICoupons(couponManagerAddress);\\n    }\\n\\n    function setPrizeStorage(address prizeStorageAddress) public onlyOwner atMaintenance {\\n        prizeStorage = IPrizeStorage(prizeStorageAddress);\\n    }\\n\\n    function changeOwner(address owner) public onlyOwner {\\n        s_owner = owner;\\n    }\\n\\n    /** Modifiers **/\\n    modifier onlyOwner() {\\n        if (msg.sender != s_owner) {\\n            revert Raffle__OnlyOwnerAllowed();\\n        }\\n        _;\\n    }\\n\\n    modifier atMaintenance() {\\n        if (s_raffleState != RaffleState.MAINTENANCE) {\\n            revert Raffle__OnlyAtMaintenanceAllowed();\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"couponManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prizeStorageAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"}],\"internalType\":\"struct Raffle.ChainLinkConstants\",\"name\":\"_chainLinkConstants\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"internalType\":\"struct Raffle.ChainLinkParams\",\"name\":\"_chainLinkParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoStart\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"prizePct\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"maxTickets\",\"type\":\"uint32\"},{\"internalType\":\"address payable\",\"name\":\"safeAddress\",\"type\":\"address\"}],\"internalType\":\"struct Raffle.RaffleParams\",\"name\":\"_raffleParams\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__ChangeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__MaxTicketsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__OnlyAtMaintenanceAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__OnlyOwnerAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__PartnerIdTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__PrizeMatrixWrongBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendMoreToEnterRaffle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoStart\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"prizePct\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"maxTickets\",\"type\":\"uint32\"},{\"internalType\":\"address payable\",\"name\":\"safeAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Raffle.RaffleParams\",\"name\":\"raffleParams\",\"type\":\"tuple\"}],\"name\":\"ChangeRaffleParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"raffleState\",\"type\":\"uint8\"}],\"name\":\"ChangeState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"raffleState\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"}],\"name\":\"CheckUpkeepCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"CouponError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"raffleState\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ticketsSold\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"bonusTickets\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"partnerID\",\"type\":\"string\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerIncome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"raffleState\",\"type\":\"uint8\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"upkeepData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_upkeepData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"couponManager\",\"outputs\":[{\"internalType\":\"contract ICoupons\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"couponKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"partnerID\",\"type\":\"string\"}],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalancePct\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainLinkParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"internalType\":\"struct Raffle.ChainLinkParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getNumberOfPlayerTickets\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"raffleId\",\"type\":\"uint32\"}],\"name\":\"getNumberOfPlayerTicketsByRaffleId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"raffleId\",\"type\":\"uint32\"}],\"name\":\"getNumberOfTicketsByRaffleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"raffleId\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"partnerID\",\"type\":\"string\"}],\"name\":\"getPartnerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"raffleId\",\"type\":\"uint32\"}],\"name\":\"getPartnerIDs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"raffleId\",\"type\":\"uint32\"}],\"name\":\"getPlayerByTicketIdByRaffleId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"raffleId\",\"type\":\"uint32\"}],\"name\":\"getPrizeMatrix\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"nWinners\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"directPayment\",\"type\":\"bool\"}],\"internalType\":\"struct IPrizeMatrix.PrizeLevel[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoStart\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"prizePct\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"maxTickets\",\"type\":\"uint32\"},{\"internalType\":\"address payable\",\"name\":\"safeAddress\",\"type\":\"address\"}],\"internalType\":\"struct Raffle.RaffleParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"raffleId\",\"type\":\"uint32\"}],\"name\":\"getRaffleResults\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"raffleId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"internalType\":\"struct IRaffleResults.PrizeLevelWinners[]\",\"name\":\"winnersMatrix\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IRaffleResults.RaffleResults\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"upkeepData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeStorage\",\"outputs\":[{\"internalType\":\"contract IPrizeStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"indexOfWinner\",\"type\":\"uint32\"}],\"name\":\"rawFulfillRandomWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"setAutoStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"name\":\"setCallbackGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"couponManagerAddress\",\"type\":\"address\"}],\"name\":\"setCouponManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"nWinners\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"directPayment\",\"type\":\"bool\"}],\"internalType\":\"struct IPrizeMatrix.PrizeLevel[]\",\"name\":\"prizeMatrix\",\"type\":\"tuple[]\"}],\"name\":\"setPrizeMatrix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prizeStorageAddress\",\"type\":\"address\"}],\"name\":\"setPrizeStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRaffleMaintenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRaffleOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoStart\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"prizePct\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"maxTickets\",\"type\":\"uint32\"},{\"internalType\":\"address payable\",\"name\":\"safeAddress\",\"type\":\"address\"}],\"internalType\":\"struct Raffle.RaffleParams\",\"name\":\"raffleParams\",\"type\":\"tuple\"}],\"name\":\"setRaffleParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"subscriptionId\",\"type\":\"uint32\"}],\"name\":\"setSubscriptionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Raffle", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000fd2992bcffe527e06377d45f74f1889e44b4fd7f000000000000000000000000b8526603c5020151b4bba14b6c391da61e51904a000000000000000000000000c587d9053cd1118f25f645f9e08bb98c9712a4ee0000000000000000000000000000000000000000000000000000000000000003ba6e730de88d94a5510ae6613898bfb0c3de5d16e609c5b7da808747125506f7000000000000000000000000000000000000000000000000000000000000031400000000000000000000000000000000000000000000000000000000001e84800000000000000000000000000000000000000000000000000011c37937e0800000000000000000000000000000000000000000000000000014d1120d7b1600000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004b0000000000000000000000000000000000000000000000000000000000000096000000000000000000000000090fa99addb2ea693a215525a3e419cb46d4307a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}