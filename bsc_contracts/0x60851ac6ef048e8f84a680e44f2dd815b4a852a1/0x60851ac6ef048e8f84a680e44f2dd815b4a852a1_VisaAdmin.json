{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IVisaPull {\r\n    function getBuyOpAddr() external returns (address);\r\n}\r\n\r\ncontract VisaAdmin is Ownable, ReentrancyGuard {\r\n    address constant private USDTToken = address(0x55d398326f99059fF775485246999027B3197955);\r\n    address constant private VISAToken = address(0xb0E9D02E3b10Ea1aEDffF203A0F2B794416A54FD);\r\n    address constant private visaSwapPair = address(0x4398e9415bAb56073936Bc800FB68AC0D7F715F4);\r\n\r\n    IUniswapV2Router01 constant private visaV2Router = IUniswapV2Router01(0x4DF006f93700Ed58553e4164121Fa7FD5D2E0c42);\r\n    IUniswapV2Router01 constant private pancakeV2Router = IUniswapV2Router01(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    address public pullAddr = address(0x03e04f011746F21335C8122C5937D58BE74822Af);  \r\n    address public receiveRewardAddr = address(0xBDebfF69855F38439630C6eC56dB459716100218); \r\n    uint256 public pullPercent = 50; \r\n    uint256 public rewardPerTenThousand = 61; \r\n    uint256 public lastRewardTime = 0;\r\n\r\n    address public constant destroyAddr = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    struct ProductInfo {\r\n        uint256 pId;            \r\n        uint8 participateType; \r\n        uint256 usdtPercent;  \r\n        uint256 usdtMinAmt;  \r\n        uint8 isUse;           \r\n    }\r\n    ProductInfo[] public productInfos; \r\n\r\n    struct OrderInfo {\r\n        address user;     \r\n        uint256 time;      \r\n        uint8 participateType;   \r\n        uint256 usdtAmt;       \r\n        uint256 visaAmt;      \r\n        uint256 usdtPercent; \r\n    }\r\n    OrderInfo[] public orderInfos;\r\n    mapping (address => uint256[]) public orderUserIdx;\r\n\r\n    constructor() {\r\n        IERC20(USDTToken).approve(address(visaV2Router), type(uint256).max);\r\n        IERC20(VISAToken).approve(address(visaV2Router), type(uint256).max);\r\n        IERC20(visaSwapPair).approve(address(visaV2Router), type(uint256).max);\r\n    }\r\n\r\n    event AddOrder(address user, uint256 time, uint256 usdtAmt, uint256 visaAmt, uint256 usdtPercent);\r\n\r\n   \r\n    event SellVisa(address user, uint256 time, uint256 visaAmt, uint256 usdtAmt, uint256 usdtInAmt, uint256 usdtOrderAmt, uint256 usdtFeeAmt);\r\n\r\n    function sellVisa(uint256 amountIn, uint256 amountOutMin) external nonReentrant {\r\n        require(_msgSender() == tx.origin, \"Can't From Contract\");\r\n\r\n        uint256 visaAmt = IERC20(VISAToken).balanceOf(address(this));\r\n        TransferHelper.safeTransferFrom(VISAToken, _msgSender(), address(this), amountIn);\r\n        visaAmt = IERC20(VISAToken).balanceOf(address(this)) - visaAmt;\r\n        require(visaAmt + 1e14 >= amountIn, \"Visa Amount Error.\");\r\n\r\n        uint256 usdtAmt = IERC20(USDTToken).balanceOf(address(this));\r\n\t\taddress[] memory path = new address[](2);\r\n        path[0] = VISAToken;\r\n        path[1] = USDTToken;\r\n        visaV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amountIn - 1e14,  // 1e14 is minBalance\r\n            amountOutMin,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        usdtAmt = IERC20(USDTToken).balanceOf(address(this)) - usdtAmt;\r\n        \r\n        TransferHelper.safeTransfer(USDTToken, _msgSender(), usdtAmt * 50 / 100);\r\n        TransferHelper.safeTransfer(USDTToken, pullAddr, usdtAmt * 5 / 100);\r\n\r\n        OrderInfo memory oi = OrderInfo({\r\n            user: _msgSender(), \r\n            time: block.timestamp, \r\n            participateType: 1, \r\n            usdtAmt:  usdtAmt * 45 / 100,\r\n            visaAmt: 0,\r\n            usdtPercent: 100\r\n        });\r\n        orderInfos.push(oi);\r\n        orderUserIdx[_msgSender()].push(orderInfos.length - 1); \r\n\r\n        emit SellVisa(_msgSender(), block.timestamp, amountIn, usdtAmt, usdtAmt * 50 / 100, usdtAmt * 45 / 100, usdtAmt * 5 / 100);\r\n        emit AddOrder(_msgSender(), block.timestamp, usdtAmt * 45 / 100, 0, 100);\r\n    }\r\n\r\n\r\n    \r\n    function addOrder(uint256 _pId, uint256 _usdtAmt, uint256 _visaAmt, uint8 _participateType) external nonReentrant {\r\n        require(_msgSender() == tx.origin, \"Can't From Contract\");\r\n        require(_pId <= productInfos.length, \"Product Not Found.\");\r\n\r\n        ProductInfo memory pi = productInfos[_pId - 1];\r\n\r\n        require(pi.isUse == 1, \"Product Not In Use.\");\r\n        require(pi.participateType == _participateType, \"ParticipateType Error.\");\r\n        require(pi.usdtMinAmt <= _usdtAmt, \"USDT AMT Error.\");\r\n\r\n        if (_participateType == 1) {\r\n            require(_visaAmt == 0, \"VISA AMT Error.\");\r\n        } else {\r\n            uint256 price = getCurPrice();\r\n            uint256 needVisaToUsdtAmt = _usdtAmt * (100 - pi.usdtPercent) / pi.usdtPercent;\r\n            require(price * _visaAmt / 1e18 >= needVisaToUsdtAmt * 99 / 100, \"VISA AMT Error.\");\r\n            require(price * _visaAmt / 1e18 <= needVisaToUsdtAmt * 101 / 100, \"VISA AMT Error.\");\r\n\r\n            TransferHelper.safeTransferFrom(VISAToken, _msgSender(), destroyAddr, _visaAmt);\r\n        }\r\n        \r\n        TransferHelper.safeTransferFrom(USDTToken, _msgSender(), pullAddr, _usdtAmt * pullPercent / 100);\r\n        TransferHelper.safeTransferFrom(USDTToken, _msgSender(), address(this), _usdtAmt * (100 - pullPercent) / 100);\r\n\r\n        OrderInfo memory oi = OrderInfo({\r\n            user: _msgSender(), \r\n            time: block.timestamp, \r\n            participateType: _participateType, \r\n            usdtAmt:  _usdtAmt,\r\n            visaAmt: _visaAmt,\r\n            usdtPercent: pi.usdtPercent\r\n        });\r\n        orderInfos.push(oi);\r\n        orderUserIdx[_msgSender()].push(orderInfos.length - 1); \r\n\r\n        emit AddOrder(_msgSender(), block.timestamp, _usdtAmt, _visaAmt, pi.usdtPercent);\r\n    }\r\n\r\n\r\n    function getOrderInfos(address user) public view returns(OrderInfo[] memory _orderInfos) {\r\n        uint256[] memory idxs = orderUserIdx[user];\r\n\r\n        _orderInfos = new OrderInfo[](idxs.length);\r\n\r\n        for(uint256 i = 0; i < idxs.length; i ++) {\r\n            _orderInfos[i] = orderInfos[idxs[i]];\r\n        }\r\n    }\r\n\r\n    event AddProduct(uint256 pId);\r\n    function addProduct(uint8 _participateType, uint256 _usdtPercent, uint256 _usdtMinAmt) public onlyOwner returns(bool) {\r\n        ProductInfo memory pi = ProductInfo({\r\n            pId: productInfos.length + 1, \r\n            participateType: _participateType, \r\n            usdtPercent: _usdtPercent,\r\n            usdtMinAmt: _usdtMinAmt,\r\n            isUse: 1\r\n        });\r\n        productInfos.push(pi);\r\n\r\n        emit AddProduct(pi.pId);\r\n\r\n        return true;\r\n    }\r\n\r\n    event StopProduct(uint256 pId);\r\n    function stopProduct(uint256 _pId) public onlyOwner returns(bool) {\r\n        ProductInfo storage pi = productInfos[_pId - 1];\r\n\r\n        pi.isUse = 2;\r\n\r\n        emit StopProduct(_pId);\r\n\r\n        return true;\r\n    }\r\n\r\n    event SetPullAddr(address pullAddr);\r\n    function setPullAddr(address _pullAddr) public onlyOwner returns(bool) {\r\n        pullAddr = _pullAddr;\r\n\r\n        emit SetPullAddr(pullAddr);\r\n\r\n        return true;\r\n    }\r\n\r\n    event SetPullPercent(uint256 pullPercent);\r\n    function setPullPercent(uint256 _pullPercent) public onlyOwner returns(bool) {\r\n        pullPercent = _pullPercent;\r\n\r\n        emit SetPullPercent(pullPercent);\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n    event SetRewardPerTenThousand(uint256 rewardPerTenThousand);\r\n    function setRewardPerTenThousand(uint256 _rewardPerTenThousand) public onlyOwner returns(bool) {\r\n        rewardPerTenThousand = _rewardPerTenThousand;\r\n\r\n        emit SetRewardPerTenThousand(rewardPerTenThousand);\r\n\r\n        return true;\r\n    }\r\n\r\n    event SetReceiveRewardAddr(address receiveRewardAddr);\r\n    function setReceiveRewardAddr(address _receiveRewardAddr) public onlyOwner returns(bool) {\r\n        receiveRewardAddr = _receiveRewardAddr;\r\n\r\n        emit SetReceiveRewardAddr(receiveRewardAddr);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getProductInfos() public view returns(ProductInfo[] memory _productInfos, address _usdtToken, address _visaToken) {\r\n        _productInfos = new ProductInfo[](productInfos.length);\r\n\r\n        for(uint256 i = 0; i < productInfos.length; i ++) {\r\n            _productInfos[i] = productInfos[i];\r\n        }\r\n\r\n        return (_productInfos, USDTToken, VISAToken);\r\n    }\r\n\r\n    function getCurPrice() public view returns (uint) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = VISAToken;\r\n        path[1] = USDTToken;\r\n        uint[] memory amounts = pancakeV2Router.getAmountsOut(1e18, path);\r\n        return amounts[1] * 1e18 / amounts[0];\r\n    }\r\n\r\n\r\n    function buyAndAddLiqFromVisaSwap(uint256 _usdtAmt) external returns(bool) {\r\n        require(IVisaPull(pullAddr).getBuyOpAddr() == msg.sender, \"Not Buy Oper.\");\r\n\r\n\t\taddress[] memory path = new address[](2);\r\n        path[0] = USDTToken;\r\n        path[1] = VISAToken;\r\n        visaV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _usdtAmt / 2,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        visaV2Router.addLiquidity (\r\n            USDTToken,\r\n            VISAToken,\r\n            _usdtAmt / 2,\r\n            IERC20(VISAToken).balanceOf(address(this)),\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    event RewardFromVisaSwap(uint256 execTime, uint256 rewardVisaAmt);\r\n    function rewardFromVisaSwap() external returns(uint256 rewardVisaAmt) {\r\n        require(IVisaPull(pullAddr).getBuyOpAddr() == msg.sender, \"Not Buy Oper.\");\r\n\r\n        require(lastRewardTime == 0 || block.timestamp >= 1 days + lastRewardTime, \"Must exceed one day before execution\");\r\n\r\n        uint256 lpAmount = IERC20(visaSwapPair).totalSupply() * rewardPerTenThousand / 10000;\r\n\r\n        visaV2Router.removeLiquidity(\r\n            USDTToken, \r\n            VISAToken, \r\n            lpAmount, \r\n            1, \r\n            1, \r\n            address(this), \r\n            block.timestamp\r\n        );\r\n\r\n        rewardVisaAmt = IERC20(VISAToken).balanceOf(address(this));\r\n\r\n\t\tTransferHelper.safeTransfer(VISAToken, receiveRewardAddr, rewardVisaAmt);\r\n\r\n        lastRewardTime = block.timestamp;\r\n\r\n        emit RewardFromVisaSwap(lastRewardTime, rewardVisaAmt);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"visaAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtPercent\",\"type\":\"uint256\"}],\"name\":\"AddOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"AddProduct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"execTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardVisaAmt\",\"type\":\"uint256\"}],\"name\":\"RewardFromVisaSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"visaAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtInAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtOrderAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtFeeAmt\",\"type\":\"uint256\"}],\"name\":\"SellVisa\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pullAddr\",\"type\":\"address\"}],\"name\":\"SetPullAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pullPercent\",\"type\":\"uint256\"}],\"name\":\"SetPullPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiveRewardAddr\",\"type\":\"address\"}],\"name\":\"SetReceiveRewardAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerTenThousand\",\"type\":\"uint256\"}],\"name\":\"SetRewardPerTenThousand\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"}],\"name\":\"StopProduct\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdtAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_visaAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_participateType\",\"type\":\"uint8\"}],\"name\":\"addOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_participateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_usdtPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdtMinAmt\",\"type\":\"uint256\"}],\"name\":\"addProduct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmt\",\"type\":\"uint256\"}],\"name\":\"buyAndAddLiqFromVisaSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getOrderInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"participateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"visaAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtPercent\",\"type\":\"uint256\"}],\"internalType\":\"struct VisaAdmin.OrderInfo[]\",\"name\":\"_orderInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProductInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"participateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"usdtPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtMinAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"isUse\",\"type\":\"uint8\"}],\"internalType\":\"struct VisaAdmin.ProductInfo[]\",\"name\":\"_productInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_visaToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"participateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"visaAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderUserIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"productInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"participateType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"usdtPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtMinAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"isUse\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveRewardAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFromVisaSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardVisaAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTenThousand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"sellVisa\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pullAddr\",\"type\":\"address\"}],\"name\":\"setPullAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pullPercent\",\"type\":\"uint256\"}],\"name\":\"setPullPercent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiveRewardAddr\",\"type\":\"address\"}],\"name\":\"setReceiveRewardAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerTenThousand\",\"type\":\"uint256\"}],\"name\":\"setRewardPerTenThousand\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pId\",\"type\":\"uint256\"}],\"name\":\"stopProduct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VisaAdmin", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d795d8acf9c9c0af4b91026684db5b9b147e807635506d577237010e79d673f6"}