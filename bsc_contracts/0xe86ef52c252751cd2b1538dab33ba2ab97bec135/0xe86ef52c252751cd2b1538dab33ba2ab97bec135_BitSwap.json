{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BitSwap.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./libraries/TokenHelper.sol\\\";\\nimport \\\"./interfaces/IHandler.sol\\\";\\n\\ncontract BitSwap is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => bool) public isWhiteListed;\\n    mapping(address => bool) public isAcceptToken;\\n    address payable public feeTo;\\n    uint public feeRate;\\n    uint public time = 600;\\n\\n    event SetFeeTo(address feeTo);\\n    event SetFeeRate(uint feeRate);\\n    event TimeChanged(uint time);\\n    event ManageWhiteList(address account, bool isWhiteList);\\n    event Withdrawn(address indexed token, address indexed to, uint amount);\\n    event SwapSuccess(address indexed sender, uint amount);\\n\\n    constructor (address payable _feeTo, uint _feeRate) {\\n        feeTo = _feeTo;\\n        feeRate = _feeRate;\\n    }\\n\\n    /// @dev \u8bbe\u7f6e\u624b\u7eed\u8d39\u63a5\u6536\u5730\u5740\\n    /// @param _feeTo \u624b\u7eed\u8d39\u63a5\u6536\u5730\u5740\\n    function setFeeTo(address payable _feeTo) external onlyOwner {\\n        feeTo = _feeTo;\\n        emit SetFeeTo(feeTo);\\n    }\\n\\n    /// @dev \u8bbe\u7f6e\u624b\u7eed\u8d39\u8d39\u7387\\n    /// @param _feeRate \u624b\u7eed\u8d39\u8d39\u7387\\n    function setFeeRate(uint _feeRate) external onlyOwner {\\n        feeRate = _feeRate;\\n        emit SetFeeRate(feeRate);\\n    }\\n\\n    /// @dev \u8bbe\u7f6e\u4ea4\u6613\u8d85\u65f6\u65f6\u95f4\\n    function setTime(uint _time) external onlyOwner {\\n        time = _time;\\n        emit TimeChanged(time);\\n    }\\n\\n    /// @dev \u7ba1\u7406\u767d\u540d\u5355\u5217\u8868\\n    /// @param _account \u8d26\u6237\u5730\u5740\\n    /// @param _isWhiteList \u662f\u5426\u8bbe\u7f6e\u4e3a\u767d\u540d\u5355\\n    function manageWhiteList(address _account, bool _isWhiteList) external onlyOwner {\\n        isWhiteListed[_account] = _isWhiteList;\\n        emit ManageWhiteList(_account, _isWhiteList);\\n    }\\n\\n    /// @dev \u63d0\u73b0eth\\n    function withdraw(uint _amount) external onlyOwner {\\n        payable(_msgSender()).transfer(_amount); \\n        emit Withdrawn(address(0), _msgSender(), _amount);\\n    }\\n\\n    /// @dev \u63d0\u73b0token\\n    function withdrawToken(address _token, uint _amount) external onlyOwner {\\n        IERC20(_token).safeTransfer(_msgSender(), _amount);   \\n        emit Withdrawn(_token, _msgSender(), _amount);\\n    }\\n\\n    /// @dev \u6279\u91cf\u7ba1\u7406\u53ef\u63a5\u53d7\u4f5c\u4e3a\u624b\u7eed\u8d39\u7684token\\n    function manageAcceptTokens(address[] memory _tokens, bool _accept) external onlyOwner {\\n        for(uint i = 0; i < _tokens.length; i++) {\\n            isAcceptToken[_tokens[i]] = _accept;\\n        }\\n    }\\n\\n    /// @dev \u67e5\u8be2\u7528\u6237\u662f\u5426\u5c06\u67d0token\u6388\u6743\u7ed9bitswap\u5408\u7ea6\\n    function allowance(IERC20 _token, address _account) external view returns (uint) {\\n        return _token.allowance(_account, address(this));\\n    }\\n\\n    /// @dev \u6839\u636e\u8f93\u5165token\u7684\u6570\u91cf\u548c\u5151\u6362\u8def\u5f84\u67e5\u8be2\u6700\u5927\u8f93\u51fatoken\u6570\u91cf\\n    /// @param _handler handler\u5730\u5740\\n    /// @param _router \u4ea4\u6613\u6240\u5730\u5740\\n    /// @param _path \u5151\u6362\u8def\u5f84\\n    /// @param _amountIn \u8f93\u5165token\u7684\u6570\u91cf\\n    function quoteOut(address _handler, address _router, address[] memory _path, uint _amountIn) external view returns (uint) {\\n        IHandler handler = IHandler(_handler);\\n        return handler.quoteOut(_router, _path, _amountIn);\\n    }\\n\\n    /// @dev \u6839\u636e\u8f93\u51fatoken\u7684\u6570\u91cf\u548c\u5151\u6362\u8def\u5f84\u67e5\u8be2\u6700\u5c0f\u8f93\u5165token\u6570\u91cf\\n    /// @param _handler handler\u5730\u5740\\n    /// @param _router \u4ea4\u6613\u6240\u5730\u5740\uff0c\u5728uniswap\u4e2d\u662fUniswapV2Router02\u7684\u5730\u5740 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n    /// @param _path \u5151\u6362\u8def\u5f84\\n    /// @param _amountOut \u8f93\u51fatoken\u7684\u6570\u91cf\\n    function quoteIn(address _handler, address _router, address[] memory _path, uint _amountOut) external view returns (uint) {\\n        IHandler handler = IHandler(_handler);\\n        return handler.quoteIn(_router, _path, _amountOut);\\n    }\\n\\n    /// @dev \u5728\u8fd9\u91cc\u6536\u53d6\u624b\u7eed\u8d39\u548capprove token\uff0c\u5176\u4ed6\u7684\u4ea4\u7ed9handler\u6267\u884c\\n    /// @param _handlerAddress handler\u5408\u7ea6\u5730\u5740\\n    /// @param _router \u4ea4\u6613\u6240\u5408\u7ea6\u5730\u5740\uff0c\u4e00\u822c\u662frouter\u5408\u7ea6\\n    /// @param _path \u4ea4\u6613\u8def\u5f84\\n    /// @param _poolFee uniswapV3\u9700\u8981\\n    /// @param _amountIn \u8f6c\u5165\u7684token\u6570\u91cf\\n    /// @param _minAmountOut \u6700\u5c0f\u8f93\u51fa\u6570\u91cf\\n    /// @return amount \u6700\u7ec8swap\u5230\u7684token\u6570\u91cf\\n    // function swap(\\n    //     address payable _handlerAddress,\\n    //     address _router,\\n    //     address[] memory _path,\\n    //     uint24[] memory _poolFee,\\n    //     uint _amountIn,\\n    //     uint _minAmountOut\\n    // ) external payable returns (uint amount) {\\n    //     require(_path.length > 1);\\n    //     require(_amountIn > 0 && _minAmountOut > 0, \\\"Amount need above zero\\\");\\n\\n    //     uint feeAmount;\\n    //     uint newAmount;\\n    //     uint sendValue;\\n    //     address tokenIn = _path[0];\\n\\n    //     // \u8ba1\u7b97\u624b\u7eed\u8d39\\n    //     if(feeRate > 0 && !isWhiteListed[_msgSender()] && _msgSender() != feeTo) {\\n    //         feeAmount = _amountIn * feeRate / 1e4;\\n    //     }\\n\\n    //     // \u51cf\u53bb\u624b\u7eed\u8d39\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u62ff\u53bbswap\\n    //     newAmount = _amountIn - feeAmount;\\n\\n    //     if(tokenIn == address(0)){\\n    //         require(msg.value >= _amountIn, \\\"ETH balance not enough\\\");\\n    //         if (feeRate > 0) feeTo.transfer(feeAmount);\\n    //         payable(address(this)).transfer(newAmount);\\n    //         sendValue = newAmount;\\n    //     } else {\\n    //         // TODO \u5c71\u5be8->\u4e3b\u94fe\u5e01 \u52a0\u4e2a\u5f00\u5173\\n    //         require(IERC20(tokenIn).balanceOf(_msgSender()) >= _amountIn, \\\"Token balance not enough\\\");\\n    //         require(IERC20(tokenIn).allowance(_msgSender(), address(this)) >= _amountIn, \\\"Token approve not enough\\\");\\n    //         if (feeRate > 0) IERC20(tokenIn).safeTransferFrom(msg.sender, feeTo, feeAmount);\\n    //         // \u8f6c\u8d26\u7ed9handler\u5408\u7ea6\\n    //         IERC20(tokenIn).safeTransferFrom(msg.sender, _handlerAddress, newAmount);\\n    //     }\\n\\n    //     // \u4ea4\u7ed9\u5177\u4f53\u7684Handler\u6267\u884cswap\\n    //     IHandler handler = IHandler(_handlerAddress);\\n    //     amount = handler.swap{value: sendValue}(_router, _path, _poolFee, newAmount, _msgSender(), _minAmountOut, time);\\n    //     emit SwapSuccess(_msgSender(), amount);\\n    // }\\n\\n    /// @dev \u5904\u7406\u624b\u7eed\u8d39\\n    function swap(\\n        address payable _handlerAddress,\\n        address _router,\\n        address[] memory _path,\\n        uint24[] memory _poolFee,\\n        uint _amountIn,\\n        uint _minAmountOut\\n    ) external payable returns(uint amount) {\\n        address tokenIn = _path[0];\\n        address tokenOut = _path[_path.length - 1];\\n\\n        if(tokenIn == address(0)) {\\n            amount = exactETH2Token(_handlerAddress, _router, _path, _poolFee, _amountIn, _minAmountOut);\\n        } else {\\n            require(IERC20(tokenIn).balanceOf(_msgSender()) >= _amountIn, \\\"Token balance not enough\\\");\\n            require(IERC20(tokenIn).allowance(_msgSender(), address(this)) >= _amountIn, \\\"Token approve not enough\\\");\\n\\n            if(tokenOut == address(0)) {\\n                amount = exactToken2ETH(_handlerAddress, _router, _path, _poolFee, _amountIn, _minAmountOut);\\n            } else {\\n                amount = exactToken2Token(_handlerAddress, _router, _path, _poolFee, _amountIn, _minAmountOut);\\n            }\\n        }\\n\\n        emit SwapSuccess(_msgSender(), amount);\\n    }\\n\\n    /// @dev \u4e3b\u94fe\u5e01\u5151\u6362Token\\n    function exactETH2Token(\\n        address payable _handlerAddress,\\n        address _router,\\n        address[] memory _path,\\n        uint24[] memory _poolFee,\\n        uint _amountIn,\\n        uint _minAmountOut\\n    ) internal returns (uint amount) {\\n        uint feeAmount = 0;\\n\\n        IHandler handler = IHandler(_handlerAddress);\\n        // \u5148\u8f6c\u8d70\u624b\u7eed\u8d39\\n        if(feeRate > 0 && !isWhiteListed[_msgSender()] && _msgSender() != feeTo) {\\n            feeAmount = _amountIn * feeRate / 1e4;\\n            // \u6536\u53d6\u4ea4\u6613\u8d39\\n            feeTo.transfer(feeAmount);\\n            // \u5269\u4e0b\u7684\u62ff\u53bbswap\\n            _amountIn -= feeAmount;\\n        }\\n        // swap\uff0c\u7528\u6237\u63a5\u6536\\n        amount = handler.swap{value: _amountIn}(_router, _path, _poolFee, _amountIn, _msgSender(), _minAmountOut, time);\\n    }\\n\\n    /// @dev Token\u5151\u6362\u4e3b\u94fe\u5e01\\n    function exactToken2ETH(\\n        address payable _handlerAddress,\\n        address _router,\\n        address[] memory _path,\\n        uint24[] memory _poolFee,\\n        uint _amountIn,\\n        uint _minAmountOut\\n    ) internal returns (uint amount) {\\n        address tokenIn = _path[0];\\n        uint feeAmount = 0;\\n        IHandler handler = IHandler(_handlerAddress);\\n        // \u8f6c\u8d26\u7ed9handler\u5408\u7ea6\\n        IERC20(tokenIn).safeTransferFrom(msg.sender, _handlerAddress, _amountIn);\\n        // \u76f4\u63a5\u4ea4\u6613\uff0cbitswap\u63a5\u6536\\n        amount = handler.swap{value: 0}(_router, _path, _poolFee, _amountIn, address(this), _minAmountOut, time);\\n        // \u6536\u53d6\u4ea4\u6613\u8d39\\n        if(feeRate > 0 && !isWhiteListed[_msgSender()] && _msgSender() != feeTo) {\\n            feeAmount = amount * feeRate / 1e4;\\n            // \u6536\u53d6\u4ea4\u6613\u8d39\\n            feeTo.transfer(feeAmount);\\n        }\\n        // \u6536\u53d6\u4ea4\u6613\u8d39\u4e4b\u540e\u5176\u4ed6\u7684\u8f6c\u7ed9\u7528\u6237\\n        payable(_msgSender()).transfer(amount - feeAmount);\\n    }\\n\\n    /// @dev Token\u5151\u6362Token\\n    function exactToken2Token(\\n        address payable _handlerAddress,\\n        address _router,\\n        address[] memory _path,\\n        uint24[] memory _poolFee,\\n        uint _amountIn,\\n        uint _minAmountOut\\n    ) internal returns (uint amount) {\\n        address tokenIn = _path[0];\\n        address tokenOut = _path[_path.length - 1];\\n        uint feeAmount = 0;\\n        IHandler handler = IHandler(_handlerAddress);\\n        if(isAcceptToken[tokenIn]) {\\n            // \u5148\u6536\u8d39 \u540e\u4ea4\u6613\\n            if(feeRate > 0 && !isWhiteListed[_msgSender()] && _msgSender() != feeTo) {\\n                feeAmount = _amountIn * feeRate / 1e4;\\n                IERC20(tokenIn).safeTransferFrom(msg.sender, feeTo, feeAmount);\\n                _amountIn -= feeAmount;\\n            }\\n            // \u8f6c\u8d26\u7ed9handler\u5408\u7ea6\\n            IERC20(tokenIn).safeTransferFrom(msg.sender, _handlerAddress, _amountIn);\\n            // \u4ea4\u6613\u5b8c\u6210\uff0c\u7528\u6237\u63a5\u6536\\n            amount = handler.swap{value: 0}(_router, _path, _poolFee, _amountIn, _msgSender(), _minAmountOut, time);\\n        } else if(isAcceptToken[tokenOut]) {\\n            // \u5148\u4ea4\u6613\uff0c\u540e\u6536\u8d39\\n            // \u8f6c\u8d26\u7ed9handler\u5408\u7ea6\\n            IERC20(tokenIn).safeTransferFrom(msg.sender, _handlerAddress, _amountIn);\\n            // \u4ea4\u6613\u5b8c\u6210\uff0cbitswap\u63a5\u6536\\n            amount = handler.swap{value: 0}(_router, _path, _poolFee, _amountIn, address(this), _minAmountOut, time);\\n            if(feeRate > 0 && !isWhiteListed[_msgSender()] && _msgSender() != feeTo) {\\n                feeAmount = amount * feeRate / 1e4;\\n                // \u8f6c\u8d70\u624b\u7eed\u8d39\uff0c\u5269\u4e0b\u7684\u8f6c\u7ed9\u7528\u6237\\n                IERC20(tokenOut).safeTransfer(feeTo, feeAmount);\\n            }\\n            IERC20(tokenOut).safeTransfer(_msgSender(), amount - feeAmount);\\n        } else {\\n            // \u6536\u5c71\u5be8\u5e01\uff0c\u518d\u4ea4\u6613\\n            if(feeRate > 0 && !isWhiteListed[_msgSender()] && _msgSender() != feeTo) {\\n                feeAmount = _amountIn * feeRate / 1e4;\\n                IERC20(tokenIn).safeTransferFrom(msg.sender, feeTo, feeAmount);\\n                _amountIn -= feeAmount;\\n            }\\n            IERC20(tokenIn).safeTransferFrom(msg.sender, _handlerAddress, _amountIn);\\n            // \u4ea4\u6613\u5b8c\u6210\uff0c\u7528\u6237\u63a5\u6536\\n            amount = handler.swap{value: 0}(_router, _path, _poolFee, _amountIn, _msgSender(), _minAmountOut, time);\\n        }\\n    }\\n\\n    receive() external payable{}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TokenHelper.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TokenHelper {\\n\\n    using SafeERC20 for IERC20;\\n\\n    function approveMax(IERC20 _token, address _spender, uint _amount) internal {\\n        require(_token.balanceOf(address(this)) >= _amount, \\\"Token balance not enough\\\");\\n        uint256 allowance = _token.allowance(address(this), address(_spender));\\n        if (allowance < _amount) {\\n            if (allowance > 0) {\\n                _token.safeApprove(address(_spender), 0);\\n            }\\n            _token.safeApprove(address(_spender), type(uint).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHandler.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IWithdraw.sol\\\";\\n\\ninterface IHandler is IWithdraw {\\n    function quoteOut(address router, address[] memory path, uint amountIn) external view returns (uint maximumAmount);\\n    function quoteIn(address router, address[] memory path, uint amountOut) external view returns (uint minimumAmount);\\n\\n    function swap(address router, address[] memory path, uint24[] memory poolFee, uint amountIn, address to, uint minAmountOut, uint time) external payable returns (uint amount);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWithdraw.sol\": {\r\n      \"content\": \"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.8.0;\\n\\ninterface IWithdraw {\\n    event Withdrawn(address indexed token, address indexed payee, uint amount);\\n\\n    function withdrawn(uint _amount) external;\\n    function withdrawnToken(address _token, uint _amount) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhiteList\",\"type\":\"bool\"}],\"name\":\"ManageWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"SetFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"name\":\"SetFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAcceptToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_accept\",\"type\":\"bool\"}],\"name\":\"manageAcceptTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhiteList\",\"type\":\"bool\"}],\"name\":\"manageWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"quoteIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"quoteOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint24[]\",\"name\":\"_poolFee\",\"type\":\"uint24[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BitSwap", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007d16053f9985c42fbaabd3e35ed33f486e256b02000000000000000000000000000000000000000000000000000000000000001e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}