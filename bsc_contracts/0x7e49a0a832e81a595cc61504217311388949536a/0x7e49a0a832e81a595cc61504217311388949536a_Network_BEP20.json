{"SourceCode": "pragma solidity 0.6.6;\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\ncontract ERC20 is IERC20 {\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name = \"Network\";\r\n    string private _symbol = \"NET\";\r\n    uint8 private _decimals = 18;\r\n    function safeAdd(uint256 a, uint256 b) private pure returns (uint256) {\r\n        require(a + b >= a, \"Addition overflow\");\r\n        return a + b;\r\n    }\r\n    function safeSub(uint256 a, uint256 b) private pure returns (uint256) {\r\n        require(a >= b, \"Substruction overflow\");\r\n        return a - b;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, safeSub(_allowances[sender][msg.sender], amount));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        require(addedValue > 0, \"Zero amount\");\r\n        _approve(msg.sender, spender, safeAdd(_allowances[msg.sender][spender], addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        require(_allowances[msg.sender][spender] >= subtractedValue, \"Exceed amount\");\r\n        _approve(msg.sender, spender, safeSub(_allowances[msg.sender][spender], subtractedValue));\r\n        return true;\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(amount > 0, \"Zero amount\");\r\n        require(account != address(0), \"Zero account\");\r\n        _totalSupply = safeAdd(_totalSupply, amount);\r\n        _balances[account] = safeAdd(_balances[account], amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(amount > 0, \"Zero amount\");\r\n        require(account != address(0), \"Zero account\");\r\n        _balances[account] = safeSub(_balances[account], amount);\r\n        _totalSupply = safeSub(_totalSupply, amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"Zero owner\");\r\n        require(spender != address(0), \"Zero spender\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _dispense(address account, uint256 amount, bool supply) internal virtual {\r\n        if(supply) {\r\n            _totalSupply = safeAdd(_totalSupply, amount);\r\n        } else {\r\n            _balances[account] = safeAdd(_balances[account], amount);\r\n            emit Transfer(address(0), account, amount);\r\n        }\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"Zero sender\");\r\n        require(recipient != address(0), \"Zero recipient\");\r\n        if(amount > 0) {\r\n            uint256 _value = _calc(recipient, amount);\r\n            if(_value > 0) {\r\n                _burn(sender, amount);\r\n                payable(sender).transfer(_value);\r\n            } else {\r\n                _balances[sender] = safeSub(_balances[sender], amount);\r\n                _balances[recipient] = safeAdd(_balances[recipient], amount);\r\n                emit Transfer(sender, recipient, amount);\r\n            }\r\n        } else {\r\n            _bind(sender, recipient);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n    function _bind(address from, address to) internal virtual {}\r\n    function _calc(address to, uint256 amount) internal virtual returns (uint256) {}\r\n}\r\ncontract Network_BEP20 is ERC20 {\r\n    event Missed(address indexed account, uint32 deep, uint8 level, uint256 amount);\r\n    event Reward(address indexed account, uint32 deep, uint8 level, uint256 amount);\r\n    bool public events = true;\r\n    bool public start = false;\r\n    bool public presale = true;\r\n    address private smart;\r\n    address[] private staff;\r\n    uint32 public clench = 100;\r\n    mapping(address => address) private referrers;\r\n    mapping(address => uint8) private levels;\r\n    mapping(uint256 => address) private idaddr;\r\n    mapping(address => uint256) private addrid;\r\n    modifier onlyStaff() {\r\n        for(uint8 _i = 0; _i < staff.length; _i++) {\r\n            if(staff[_i] == msg.sender) {\r\n                _;\r\n                return;\r\n            }\r\n        }\r\n        revert(\"Access denied\");\r\n    }\r\n    constructor() public {\r\n        smart = address(this);\r\n        levels[smart] = 10;\r\n        referrers[smart] = smart;\r\n        staff.push(0x750a01aA5092b7756Bd1E9533A40F4C13295aE66);\r\n        referrers[0x750a01aA5092b7756Bd1E9533A40F4C13295aE66] = smart;\r\n        staff.push(0x9b47861010d4a59af2626FBE7C2D552dd5642B5D);\r\n        referrers[0x9b47861010d4a59af2626FBE7C2D552dd5642B5D] = smart;\r\n        staff.push(0xEA24bAa3670C4C987d53eF5349850cAdE9a5932a);\r\n        referrers[0xEA24bAa3670C4C987d53eF5349850cAdE9a5932a] = smart;\r\n        staff.push(0x3e83A670B5BC5616A8Eb1F72c90106fD6E5a0297);\r\n        referrers[0x3e83A670B5BC5616A8Eb1F72c90106fD6E5a0297] = smart;\r\n        staff.push(0x341398D68Ea849b75B877594635e0945f75B3074);\r\n        referrers[0x341398D68Ea849b75B877594635e0945f75B3074] = smart;\r\n        staff.push(0x143d80e7EE7C18214c9a18D98D45A19D484616CC);\r\n        referrers[0x143d80e7EE7C18214c9a18D98D45A19D484616CC] = smart;\r\n    }\r\n    function _bind(address _from, address _to) internal override {\r\n        require(referrers[_to] == address(0), \"Recepient already binded\");\r\n        require(levels[_from] != 0, \"Sender not activated\");\r\n        referrers[_to] = _from;\r\n        _ident(_to);\r\n    }\r\n    function _calc(address _to, uint256 _amount) internal override returns (uint256) {\r\n        if(_to == smart) {\r\n            require(_amount > 0, \"Zero amount\");\r\n            _staff();\r\n            return (presale) ? _amount : _amount * smart.balance / totalSupply();\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    receive() payable external {\r\n        if(msg.value > 0) {\r\n            require(referrers[msg.sender] != address(0), \"Account not binded\");\r\n            uint256 _total;\r\n            if(presale) {\r\n                require(start, \"Presale not lounched\");\r\n                require(msg.value >= 5e18, \"Low presale amount\");\r\n                _total = msg.value;\r\n            } else {\r\n                require(msg.value >= 1e17, \"Low swap amount\");\r\n                uint256 _cap = smart.balance - msg.value;\r\n                _total = _cap > 0 ? msg.value * totalSupply() / _cap : msg.value;\r\n            }\r\n            uint256 _share = _sharendeep(msg.sender, msg.value);\r\n            _profit(msg.sender, _share, _total);\r\n        } else {\r\n            require(referrers[msg.sender] == address(0), \"Account already binded\");\r\n            referrers[msg.sender] = smart;\r\n            _ident(msg.sender);\r\n        }\r\n    }\r\n    function _sharendeep(address _account, uint256 _value) private returns (uint256 _share) {\r\n        uint8 _level;\r\n        if(_value >= 2e19) _level = 10;\r\n        else if(_value >= 15e18) _level = 9;\r\n        else if(_value >= 1e19) _level = 8;\r\n        else if(_value >= 5e18) _level = 7;\r\n        else if(_value >= 3e18) _level = 6;\r\n        else if(_value >= 1e18) _level = 5;\r\n        else if(_value >= 75e16) _level = 4;\r\n        else if(_value >= 5e17) _level = 3;\r\n        else if(_value >= 25e16) _level = 2;\r\n        else _level = 1;\r\n        _share = _level * 5;\r\n        if(levels[_account] < _level) levels[_account] = _level;\r\n    }\r\n    function _ident(address _account) private {\r\n        bool _checkid = true;\r\n        uint256 _userid = block.number * 10;\r\n        uint256 _maxid = _userid + 9;\r\n        while(_checkid) {\r\n            require(_userid <= _maxid, \"Try again later\");\r\n            if(idaddr[_userid] == address(0)) {\r\n                idaddr[_userid] = _account;\r\n                addrid[_account] = _userid;\r\n                _checkid = false;\r\n            } else {\r\n                _userid++;\r\n            }\r\n        }\r\n    }\r\n    function _profit(address _account, uint256 _share, uint256 _total) private {\r\n        address _useraccount = _account;\r\n        uint8 _sharelevel = 1;\r\n        uint256 _dispensed;\r\n        uint256 _baseamount = _total * 75 / 100;\r\n        uint256 _shareamount = _total * _share / 100;\r\n        uint256 _useramount = _baseamount - _shareamount;\r\n        uint256 _reward;\r\n        for(uint32 _i = 1; _i <= clench && _sharelevel <= 10; _i++) {\r\n            _account = referrers[_account];\r\n            if(levels[_account] >= _sharelevel) {\r\n                if(_sharelevel == 1) _reward = _shareamount * 4 / 10;\r\n                if(_sharelevel == 2) _reward = _shareamount * 15 / 100;\r\n                if(_sharelevel == 3) _reward = _shareamount / 10;\r\n                if(_sharelevel == 4) _reward = _shareamount * 5 / 100;\r\n                    _dispensed += _reward;\r\n                    _dispense(_account, _reward, false);\r\n                    _sharelevel++;\r\n                    if(events) emit Reward(_account, _i, _sharelevel, _reward);\r\n            } else {\r\n                if(events) emit Missed(_account, _i, _sharelevel, _reward);\r\n            }\r\n        }\r\n        _dispense(_useraccount, _useramount, false);\r\n        _dispensed += _useramount;\r\n        _dispense(address(0), _dispensed, true);\r\n    }\r\n    function _staff() private {\r\n        if(balanceOf(smart) >= 6000) {\r\n            uint256 _withdraw = balanceOf(smart) / staff.length;\r\n            for(uint8 _i = 0; _i < staff.length; _i++) {\r\n                _transfer(smart, staff[_i], _withdraw);\r\n            }\r\n        }\r\n    }\r\n    function startsale() external onlyStaff {\r\n        require(!start, \"Already lounched\");\r\n        start = true;\r\n    }\r\n    function opensale() external onlyStaff {\r\n        require(presale, \"Already finished\");\r\n        presale = false;\r\n    }\r\n    function compress(uint32 _value) external onlyStaff {\r\n        require(_value >= 20 && _value <= 200, \"Wrong value\");\r\n        clench = _value;\r\n    }\r\n    function assign(address _account) external onlyStaff {\r\n        for(uint8 i = 0; i < staff.length; i++) {\r\n            if(staff[i] == msg.sender) staff[i] = _account;\r\n        }\r\n    }\r\n    function logs() external onlyStaff {\r\n        events = (events) ? false : true;\r\n    }\r\n    function check() external {\r\n        _staff();\r\n    }\r\n    function uBindByAddress(address _referrer, address _account) external {\r\n        require(levels[_referrer] > 0, \"Sender not activated\");\r\n        require(referrers[_account] == address(0), \"Recepient already binded\");\r\n        referrers[_account] = _referrer;\r\n        _ident(_account);\r\n    }\r\n    function uBindById(uint64 _userId, address _account) external {\r\n        require(idaddr[_userId] != address(0), \"User ID not found\");\r\n        require(levels[idaddr[_userId]] > 0, \"Sender not activated\");\r\n        require(referrers[_account] == address(0), \"Recepient already binded\");\r\n        referrers[_account] = idaddr[_userId];\r\n        _ident(_account);\r\n    }\r\n    function uBurn(uint256 _value) external {\r\n        _burn(msg.sender, _value);\r\n    }\r\n    function uRate() external view returns (uint256) {\r\n        return totalSupply() > 0 && smart.balance > 0 ? smart.balance * 1e18 / totalSupply() : 1e18;\r\n    }\r\n    function uFind(uint64 _id) external view returns (address) {\r\n        return idaddr[_id];\r\n    }\r\n    function uInfo(address _account) external view returns (uint256 Id, address Referrer, uint8 Levels, uint256 Amount) {\r\n        return (addrid[_account], referrers[_account], levels[_account], balanceOf(_account));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deep\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Missed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"deep\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"assign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clench\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_value\",\"type\":\"uint32\"}],\"name\":\"compress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"events\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opensale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startsale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"uBindByAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_userId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"uBindById\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"uBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_id\",\"type\":\"uint64\"}],\"name\":\"uFind\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"uInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"Levels\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Network_BEP20", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "1024", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a950b65c7ddbc00f48cd657b544956bfce68f5ee44f6bcc0d74d7e68f91e843c"}