{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/oracle/OracleManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport './IOracle.sol';\\r\\nimport './IOracleOffChain.sol';\\r\\nimport './IOracleManager.sol';\\r\\nimport '../utils/NameVersion.sol';\\r\\nimport '../utils/Admin.sol';\\r\\n\\r\\ncontract OracleManager is IOracleManager, NameVersion, Admin {\\r\\n\\r\\n    // symbolId => oracleAddress\\r\\n    mapping (bytes32 => address) _oracles;\\r\\n\\r\\n    constructor () NameVersion('OracleManager', '3.0.3') {}\\r\\n\\r\\n    function getOracle(bytes32 symbolId) external view returns (address) {\\r\\n        return _oracles[symbolId];\\r\\n    }\\r\\n\\r\\n    function getOracle(string memory symbol) external view returns (address) {\\r\\n        return _oracles[keccak256(abi.encodePacked(symbol))];\\r\\n    }\\r\\n\\r\\n    function setOracle(address oracleAddress) external _onlyAdmin_ {\\r\\n        IOracle oracle = IOracle(oracleAddress);\\r\\n        bytes32 symbolId = oracle.symbolId();\\r\\n        _oracles[symbolId] = oracleAddress;\\r\\n        emit NewOracle(symbolId, oracleAddress);\\r\\n    }\\r\\n\\r\\n    function delOracle(bytes32 symbolId) external _onlyAdmin_ {\\r\\n        delete _oracles[symbolId];\\r\\n        emit NewOracle(symbolId, address(0));\\r\\n    }\\r\\n\\r\\n    function delOracle(string memory symbol) external _onlyAdmin_ {\\r\\n        bytes32 symbolId = keccak256(abi.encodePacked(symbol));\\r\\n        delete _oracles[symbolId];\\r\\n        emit NewOracle(symbolId, address(0));\\r\\n    }\\r\\n\\r\\n    function value(bytes32 symbolId) public view returns (uint256) {\\r\\n        address oracle = _oracles[symbolId];\\r\\n        require(oracle != address(0), 'OracleManager.value: no oracle');\\r\\n        return IOracle(oracle).value();\\r\\n    }\\r\\n\\r\\n    function timestamp(bytes32 symbolId) public view returns (uint256) {\\r\\n        address oracle = _oracles[symbolId];\\r\\n        require(oracle != address(0), 'OracleManager.value: no oracle');\\r\\n        return IOracle(oracle).timestamp();\\r\\n    }\\r\\n\\r\\n    function getValue(bytes32 symbolId) public view returns (uint256) {\\r\\n        address oracle = _oracles[symbolId];\\r\\n        require(oracle != address(0), 'OracleManager.getValue: no oracle');\\r\\n        return IOracle(oracle).getValue();\\r\\n    }\\r\\n\\r\\n    function getValueWithJump(bytes32 symbolId) external returns (uint256 val, int256 jump) {\\r\\n        address oracle = _oracles[symbolId];\\r\\n        require(oracle != address(0), 'OracleManager.getValueWithHistory: no oracle');\\r\\n        return IOracle(oracle).getValueWithJump();\\r\\n    }\\r\\n\\r\\n    function updateValue(\\r\\n        bytes32 symbolId,\\r\\n        uint256 timestamp_,\\r\\n        uint256 value_,\\r\\n        uint8   v_,\\r\\n        bytes32 r_,\\r\\n        bytes32 s_\\r\\n    ) public returns (bool) {\\r\\n        address oracle = _oracles[symbolId];\\r\\n        require(oracle != address(0), 'OracleManager.updateValue: no oracle');\\r\\n        return IOracleOffChain(oracle).updateValue(timestamp_, value_, v_, r_, s_);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oracle/IOracleOffChain.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport './IOracle.sol';\\r\\n\\r\\ninterface IOracleOffChain is IOracle {\\r\\n\\r\\n    event NewValue(uint256 indexed timestamp, uint256 indexed value);\\r\\n\\r\\n    function signer() external view returns (address);\\r\\n\\r\\n    function delayAllowance() external view returns (uint256);\\r\\n\\r\\n    function updateValue(\\r\\n        uint256 timestamp,\\r\\n        uint256 value,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (bool);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oracle/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport '../utils/INameVersion.sol';\\r\\n\\r\\ninterface IOracle is INameVersion {\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function symbolId() external view returns (bytes32);\\r\\n\\r\\n    function timestamp() external view returns (uint256);\\r\\n\\r\\n    function value() external view returns (uint256);\\r\\n\\r\\n    function getValue() external view returns (uint256);\\r\\n\\r\\n    function getValueWithJump() external returns (uint256 val, int256 jump);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oracle/IOracleManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport '../utils/INameVersion.sol';\\r\\nimport '../utils/IAdmin.sol';\\r\\n\\r\\ninterface IOracleManager is INameVersion, IAdmin {\\r\\n\\r\\n    event NewOracle(bytes32 indexed symbolId, address indexed oracle);\\r\\n\\r\\n    function getOracle(bytes32 symbolId) external view returns (address);\\r\\n\\r\\n    function getOracle(string memory symbol) external view returns (address);\\r\\n\\r\\n    function setOracle(address oracleAddress) external;\\r\\n\\r\\n    function delOracle(bytes32 symbolId) external;\\r\\n\\r\\n    function delOracle(string memory symbol) external;\\r\\n\\r\\n    function value(bytes32 symbolId) external view returns (uint256);\\r\\n\\r\\n    function timestamp(bytes32 symbolId) external view returns (uint256);\\r\\n\\r\\n    function getValue(bytes32 symbolId) external view returns (uint256);\\r\\n\\r\\n    function getValueWithJump(bytes32 symbolId) external returns (uint256 val, int256 jump);\\r\\n\\r\\n    function updateValue(\\r\\n        bytes32 symbolId,\\r\\n        uint256 timestamp_,\\r\\n        uint256 value_,\\r\\n        uint8   v_,\\r\\n        bytes32 r_,\\r\\n        bytes32 s_\\r\\n    ) external returns (bool);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/NameVersion.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport './INameVersion.sol';\\r\\n\\r\\n/**\\r\\n * @dev Convenience contract for name and version information\\r\\n */\\r\\nabstract contract NameVersion is INameVersion {\\r\\n\\r\\n    bytes32 public immutable nameId;\\r\\n    bytes32 public immutable versionId;\\r\\n\\r\\n    constructor (string memory name, string memory version) {\\r\\n        nameId = keccak256(abi.encodePacked(name));\\r\\n        versionId = keccak256(abi.encodePacked(version));\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Admin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport './IAdmin.sol';\\r\\n\\r\\nabstract contract Admin is IAdmin {\\r\\n\\r\\n    address public admin;\\r\\n\\r\\n    modifier _onlyAdmin_() {\\r\\n        require(msg.sender == admin, 'Admin: only admin');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor () {\\r\\n        admin = msg.sender;\\r\\n        emit NewAdmin(admin);\\r\\n    }\\r\\n\\r\\n    function setAdmin(address newAdmin) external _onlyAdmin_ {\\r\\n        admin = newAdmin;\\r\\n        emit NewAdmin(newAdmin);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/INameVersion.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface INameVersion {\\r\\n\\r\\n    function nameId() external view returns (bytes32);\\r\\n\\r\\n    function versionId() external view returns (bytes32);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/IAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\ninterface IAdmin {\\r\\n\\r\\n    event NewAdmin(address indexed newAdmin);\\r\\n\\r\\n    function admin() external view returns (address);\\r\\n\\r\\n    function setAdmin(address newAdmin) external;\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"NewOracle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolId\",\"type\":\"bytes32\"}],\"name\":\"delOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"delOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolId\",\"type\":\"bytes32\"}],\"name\":\"getOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolId\",\"type\":\"bytes32\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolId\",\"type\":\"bytes32\"}],\"name\":\"getValueWithJump\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"jump\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolId\",\"type\":\"bytes32\"}],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"updateValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolId\",\"type\":\"bytes32\"}],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OracleManager", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}