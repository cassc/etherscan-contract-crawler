{"SourceCode": "// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Staking/Staking.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract Staking {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n\r\n    address public tokenAddress;\r\n\r\n    uint256 public totalStaked;\r\n\r\n    IERC20 ERC20Interface;\r\n\r\n\r\n\r\n    mapping(address => uint256) private stakedBalance;\r\n\r\n\r\n\r\n    /**\r\n\r\n     *  @dev Struct to store user's withdraw data\r\n\r\n     */\r\n\r\n    struct Withdraw {\r\n\r\n        bool status;\r\n\r\n        uint256 amount;\r\n\r\n        uint256 withdrawTime;\r\n\r\n    }\r\n\r\n    mapping(address => Withdraw) private userWithdraw;\r\n\r\n\r\n\r\n    /**\r\n\r\n     *  @dev Emitted when user stake 'amount' value of tokens\r\n\r\n     */\r\n\r\n    event Staked(address indexed from, uint256 indexed amount);\r\n\r\n\r\n\r\n    /**\r\n\r\n     *  @dev Emitted when user unstake 'amount' value of tokens \r\n\r\n     */\r\n\r\n    event Unstaked(address indexed from, uint256 indexed amount);\r\n\r\n\r\n\r\n    constructor(address _tokenAddress) {\r\n\r\n        require(_tokenAddress != address(0), \"Zero token address\");\r\n\r\n        tokenAddress = _tokenAddress;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     *  @dev Prevent under value in allowance\r\n\r\n     */\r\n\r\n    modifier _hasAllowance(address allower, uint256 amount) {\r\n\r\n        ERC20Interface = IERC20(tokenAddress);\r\n\r\n        uint256 ourAllowance = ERC20Interface.allowance(allower, address(this));\r\n\r\n        require(amount <= ourAllowance, \"Make sure to add enough allowance\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     *  Requirements:\r\n\r\n     *  `_address` User wallet address\r\n\r\n     *  @dev returns user staking data\r\n\r\n     */\r\n\r\n    function balanceOfStake(address _address) \r\n\r\n        public \r\n\r\n        view \r\n\r\n        returns(uint256)\r\n\r\n    {\r\n\r\n        return (stakedBalance[_address]);\r\n\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n\r\n     *  Requirements:\r\n\r\n     *  `_address` User wallet address\r\n\r\n     *  @dev returns user's withdraw data\r\n\r\n     */\r\n\r\n    function checkWithdrawInfo(address _address) \r\n\r\n        public \r\n\r\n        view \r\n\r\n        returns(bool, uint256, uint256)\r\n\r\n    {\r\n\r\n        return (\r\n\r\n            userWithdraw[_address].status, \r\n\r\n            userWithdraw[_address].amount, \r\n\r\n            userWithdraw[_address].withdrawTime\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     *  Requirements:\r\n\r\n     *  `amount` Amount to be staked\r\n\r\n     /**\r\n\r\n     *  @dev to stake 'amount' value of tokens \r\n\r\n     *  once the user has given allowance to the staking contract\r\n\r\n     */\r\n\r\n    function stake(uint256 amount) \r\n\r\n        external \r\n\r\n        _hasAllowance(msg.sender, amount)\r\n\r\n    {\r\n\r\n        require(\r\n\r\n            amount >= 150 * 10 ** 18, \"Please increase your staking value!\"\r\n\r\n        );\r\n\r\n        _stake(msg.sender, amount);\r\n\r\n\r\n\r\n        uint256 totalAmount = stakedBalance[msg.sender].add(amount);\r\n\r\n        stakedBalance[msg.sender] = totalAmount;\r\n\r\n        totalStaked = totalStaked.add(amount);\r\n\r\n\r\n\r\n        emit Staked(msg.sender, amount);\r\n\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n\r\n     *  Requirements:\r\n\r\n     *  `amount` Amount to be unstake\r\n\r\n     /**\r\n\r\n     *  @dev to unstake 'amount' value of tokens \r\n\r\n     */\r\n\r\n    function unstake(uint256 amount) external {\r\n\r\n        require(\r\n\r\n            amount <= stakedBalance[msg.sender],\r\n\r\n            \"Insufficient stake\"\r\n\r\n        );\r\n\r\n        _unstake(amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     *  @dev to claim the withdraw\r\n\r\n     */\r\n\r\n    function claimWithdraw() external {\r\n\r\n        require(\r\n\r\n            userWithdraw[msg.sender].status, \r\n\r\n            \"Not eligible to claim withdraw!\"\r\n\r\n        );\r\n\r\n        require(\r\n\r\n            userWithdraw[msg.sender].withdrawTime < block.timestamp,\r\n\r\n            \"Maturity date is not over!\"\r\n\r\n        );\r\n\r\n\r\n\r\n        _transferToUser(msg.sender, userWithdraw[msg.sender].amount);\r\n\r\n\r\n\r\n        userWithdraw[msg.sender] = Withdraw(false, 0, 0);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _stake(address payer, uint256 amount) private {\r\n\r\n        ERC20Interface = IERC20(tokenAddress);\r\n\r\n        ERC20Interface.transferFrom(payer, address(this), amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _unstake(uint256 amount) private {\r\n\r\n        uint256 totalAmount = stakedBalance[msg.sender].sub(amount);\r\n\r\n        stakedBalance[msg.sender] = totalAmount; \r\n\r\n        totalStaked = totalStaked.sub(amount);\r\n\r\n\r\n\r\n        uint256 prevAmountWithdraw = userWithdraw[msg.sender].amount;\r\n\r\n        uint256 totalWithdrawAmount = prevAmountWithdraw.add(amount);\r\n\r\n\r\n\r\n        userWithdraw[msg.sender] = Withdraw(true, totalWithdrawAmount, block.timestamp + 14 days);\r\n\r\n        emit Unstaked(msg.sender, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transferToUser(address to, uint256 amount) private {\r\n\r\n        ERC20Interface = IERC20(tokenAddress);\r\n\r\n        ERC20Interface.transfer(to, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOfStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkWithdrawInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d8047afecb86e44eff3add991b9f063ed4ca716b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c8dbeae404a7a296274227a74798ebef958533a9369f9a2f939650d84c0d1055"}