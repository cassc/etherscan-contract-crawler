{"SourceCode": "/**\r\n\r\n GemGuardian & GEMG: A fantasy NFT style play to earn card game where fantasy meets reality game play\r\n \r\n * Website: https://www.gemguardian.io\r\n * Twitter: https://twitter.com/GemGuardianNFT\r\n * Medium: https://gemguardian.medium.com/\r\n * Telegram group: https://t.me/GemGuardianOfficialChat\r\n * Telegrm channel: https://t.me/GemguardianOfficial\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.6;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\nabstract contract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) public view virtual returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public virtual returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nabstract contract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint256);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public virtual returns (bool);\r\n\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        virtual\r\n        returns (bool);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n    uint256 public txFee;\r\n    uint256 public burnFee;\r\n    address public FeeAddress;\r\n\r\n    mapping(address => mapping(address => uint256)) internal allowed;\r\n    mapping(address => bool) tokenBlacklist;\r\n    mapping(address => uint256) balances;\r\n\r\n    event Blacklist(address indexed blackListed, bool value);\r\n\r\n    function balanceOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(tokenBlacklist[msg.sender] == false);\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] -= _value;\r\n        uint256 originValue = _value;\r\n\r\n        if (txFee > 0 && msg.sender != FeeAddress) {\r\n            uint256 DenverDeflaionaryDecay = (originValue * txFee) / 100;\r\n            balances[FeeAddress] += DenverDeflaionaryDecay;\r\n            emit Transfer(msg.sender, FeeAddress, DenverDeflaionaryDecay);\r\n            _value -= DenverDeflaionaryDecay;\r\n        }\r\n\r\n        if (burnFee > 0 && msg.sender != FeeAddress) {\r\n            uint256 Burnvalue = (originValue * burnFee) / 100;\r\n            totalSupply -= Burnvalue;\r\n            emit Transfer(msg.sender, address(0), Burnvalue);\r\n            _value -= Burnvalue;\r\n        }\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public virtual override returns (bool) {\r\n        require(tokenBlacklist[msg.sender] == false);\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] -= _value;\r\n        uint256 originValue = _value;\r\n\r\n        if (txFee > 0 && _from != FeeAddress) {\r\n            uint256 DenverDeflaionaryDecay = (originValue * txFee) / 100;\r\n            balances[FeeAddress] += DenverDeflaionaryDecay;\r\n            emit Transfer(_from, FeeAddress, DenverDeflaionaryDecay);\r\n            _value -= DenverDeflaionaryDecay;\r\n        }\r\n\r\n        if (burnFee > 0 && _from != FeeAddress) {\r\n            uint256 Burnvalue = (originValue * burnFee) / 100;\r\n            totalSupply -= Burnvalue;\r\n            emit Transfer(_from, address(0), Burnvalue);\r\n            _value -= Burnvalue;\r\n        }\r\n\r\n        balances[_to] += _value;\r\n        allowed[_from][msg.sender] -= originValue;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] += _addedValue;\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue - _subtractedValue;\r\n        }\r\n\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function _blackList(address _address, bool _isBlackListed)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        require(tokenBlacklist[_address] != _isBlackListed);\r\n        tokenBlacklist[_address] = _isBlackListed;\r\n        emit Blacklist(_address, _isBlackListed);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        virtual\r\n        override\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public virtual override whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        returns (bool success)\r\n    {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n\r\n    function blackListAddress(address listAddress, bool isBlackListed)\r\n        public\r\n        whenNotPaused\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        return super._blackList(listAddress, isBlackListed);\r\n    }\r\n}\r\n\r\ninterface IFactory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n}\r\n\r\ninterface TokenConverter {\r\n    function checkTokensDistance(address _tokenA, address _tokenB)\r\n        external\r\n        view\r\n        returns (uint8);\r\n\r\n    function convertTwo(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amount\r\n    ) external view returns (uint256);\r\n\r\n    function DEFAULT_FACTORY() external view returns (IFactory);\r\n}\r\n\r\ncontract CoinToken is PausableToken {\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals;\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    // ANTI-SNIPE\r\n    address public constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address public constant TOKEN_CONVERTER = 0xe2bf8ef5E2b24441d5B2649A3Dc6D81afC1a9517;\r\n\r\n    uint256 public start = 0;\r\n    uint256 public THRESHOLD = 10 minutes;\r\n    uint256 public MAX_DOLLARS = 1000 * 1e18;\r\n    uint256 public DELAY = 4 seconds;\r\n\r\n    mapping(address => bool) public isWhitelist;\r\n    mapping(address => uint256) public lastBuy;\r\n\r\n    TokenConverter tokenConverter = TokenConverter(TOKEN_CONVERTER);\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _decimals,\r\n        uint256 _supply,\r\n        uint256 _txFee,\r\n        uint256 _burnFee,\r\n        address _FeeAddress,\r\n        address tokenOwner\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _supply * 10**_decimals;\r\n        balances[tokenOwner] = totalSupply;\r\n        owner = tokenOwner;\r\n        txFee = _txFee;\r\n        burnFee = _burnFee;\r\n        FeeAddress = _FeeAddress;\r\n        emit Transfer(address(0), tokenOwner, totalSupply);\r\n    }\r\n\r\n    function burn(uint256 _value) public {\r\n        _burn(msg.sender, _value);\r\n    }\r\n\r\n    function updateFee(\r\n        uint256 _txFee,\r\n        uint256 _burnFee,\r\n        address _FeeAddress\r\n    ) public onlyOwner {\r\n        txFee = _txFee;\r\n        burnFee = _burnFee;\r\n        FeeAddress = _FeeAddress;\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who]);\r\n        balances[_who] -= _value;\r\n        totalSupply -= _value;\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public override whenNotPaused returns (bool) {\r\n        require(\r\n            _canTransfer(_from, _to, _value),\r\n            \"transfer attempt was blocked\"\r\n        );\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        override\r\n        whenNotPaused\r\n        returns (bool)\r\n    {\r\n        require(\r\n            _canTransfer(msg.sender, _to, _value),\r\n            \"transfer attempt was blocked\"\r\n        );\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function _canTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (bool success) {\r\n        if (isWhitelist[_from] || isWhitelist[_to]) {\r\n            if (tokenConverter.checkTokensDistance(address(this), WBNB) == 1) {\r\n                if (start == 0) start = block.timestamp;\r\n            }\r\n            return true;\r\n        }\r\n        if (tokenConverter.checkTokensDistance(address(this), WBNB) == 0)\r\n            return true;\r\n\r\n        if (start == 0) start = block.timestamp;\r\n        if ((block.timestamp - start) >= THRESHOLD) return true;\r\n\r\n        // BUY filter\r\n        address _pair = getPairAddress();\r\n        if (msg.sender == _pair && _from == _pair) {\r\n            if (_amount > dollarsToTokens(MAX_DOLLARS)) return false;\r\n            if ((block.timestamp - lastBuy[_to]) < DELAY) return false;\r\n            lastBuy[_to] = block.timestamp;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function dollarsToTokens(uint256 _dollars) public view returns (uint256) {\r\n        uint256 _inCoin = tokenConverter.convertTwo(BUSD, WBNB, _dollars);\r\n        uint256 _inToken = tokenConverter.convertTwo(\r\n            WBNB,\r\n            address(this),\r\n            _inCoin\r\n        );\r\n        return _inToken;\r\n    }\r\n\r\n    function getPairAddress() public view returns (address) {\r\n        return tokenConverter.DEFAULT_FACTORY().getPair(address(this), WBNB);\r\n    }\r\n\r\n    function setWhitelistRights(address _user, bool _value) external onlyOwner {\r\n        isWhitelist[_user] = _value;\r\n    }\r\n\r\n    function setWhitelistUsers(address[] memory addresses, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            isWhitelist[addresses[i]] = value;\r\n        }\r\n    }\r\n\r\n    function setThreshold(uint256 value_) external onlyOwner {\r\n        THRESHOLD = value_;\r\n    }\r\n\r\n    function setMaxDollars(uint256 value_) external onlyOwner {\r\n        MAX_DOLLARS = value_;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_txFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_FeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blackListed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"Blacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DOLLARS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_CONVERTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlackListed\",\"type\":\"bool\"}],\"name\":\"blackListAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dollars\",\"type\":\"uint256\"}],\"name\":\"dollarsToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"setMaxDollars\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setWhitelistRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setWhitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_FeeAddress\",\"type\":\"address\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoinToken", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019b124e5cc78d82145f7652db93e361dd23af27f00000000000000000000000019b124e5cc78d82145f7652db93e361dd23af27f000000000000000000000000000000000000000000000000000000000000000b47656d477561726469616e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000447454d4700000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bc57bb041b6630a96f816ed01ed140fadfe04c9a140e186ab2b1fa0ab46b37e7"}