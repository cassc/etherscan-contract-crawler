{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n    contract Fxcplus is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) public _balances;\r\n     mapping (address => uint256) public selling;\r\n     mapping (address => uint256) public buying;\r\n     mapping (address=>bool) public  blacklist;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public _isExcluded;\r\n    // transfer conditions mapping\r\n    \r\n    mapping(address => uint256) public _firstTransfer;\r\n    mapping(address => uint256) public _totTransfers;\r\n\r\n    //pancake/uniswap/sunswap selling condition \r\n    mapping(address => uint256) public _firstSelltime;\r\n    mapping(address => uint256) public _totalAmountSell;\r\n\r\n    // pancake/uniswap/sunswap buying condition\r\n    mapping(address => uint256) public _firstBuytime;\r\n    mapping(address => uint256) public _totalAmountBuy;\r\n\r\n    // multisendtoken receiver condition\r\n    mapping(address => uint256) public _firstReceivetime;\r\n    mapping(address => uint256) public _totalAmountreceive;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n      address public burningAddress;\r\n      address public miningownerAddress;\r\n      address public pancakePair;\r\n       uint256 public maxsellamount=100E18;\r\n       uint256 public maxbuyamount=1000E18;\r\n       uint256 public maxTrPerDay = 1000E18;\r\n       uint256 public maxMultisendPday=100000E18;\r\n       address public owner;\r\n       address public multisendaccount;\r\n       uint256 public locktime= 1 days;\r\n       uint256 public feesperc= 10;\r\n       uint256 public minerfeesperc= 10;\r\n    \r\n       uint256 private constant directPercents = 100;\r\n       uint256[4] private refferPercents = [100,100,100,100];\r\n       uint256 private constant baseDivider = 10000;\r\n       uint256 private constant referDepth = 5;\r\n       uint256 private constant directDepth = 1;\r\n       address public defaultRefer;\r\n       bool public isReward;\r\n       uint256 public startTime;\r\n\r\n        address[] public depositors;\r\n        struct UserInfo {\r\n        address referrer;\r\n        uint256 start;      \r\n        uint256 maxDeposit;\r\n        uint256 maxDirectDeposit;\r\n        uint256 teamTotalDeposit;\r\n        uint256 totalDeposit;  \r\n        uint256 teamNum;\r\n        uint256 directnum;    \r\n        uint256 totalRevenue;\r\n        bool isactive;\r\n        }\r\n\r\n        mapping(address=>UserInfo) public userInfo;\r\n        mapping(address => mapping(uint256 => address[])) public teamUsers;\r\n\r\n        struct LevelInfo{   \r\n        uint256 level1;\r\n        uint256 level2;\r\n        uint256 level3;\r\n        uint256 level4;\r\n        uint256 level5;   \r\n        }\r\n\r\n        mapping(address=>LevelInfo) public levelInfo;\r\n\r\n        event Register(address user, address referral);\r\n        event Deposit(address user, uint256 amount);\r\n        event Addpairaddress(address pair);\r\n        event Addburnaddress(address burnaddr); \r\n        event Addminingowneraddress(address mininerowneraddr); \r\n        event Transferownership(address newonwer);\r\n        event Setmultisendaccount(address addr);\r\n        event Setfeesperc(uint256 amount);\r\n        event Setminerfeeperc(uint256 amount);   \r\n        event Setbuylimit(uint256 amount);   \r\n        event Setmaxsell(uint256 amount);   \r\n        event SetTransferperdaylimit(uint256 amount);\r\n        event SetmaxTrPerDaymining(uint256 amount); \r\n        event SetmaxMultisendPday(uint256 amount); \r\n\r\n\r\n\r\n    constructor ()  {\r\n        _name = 'FXCPLUS';\r\n        _symbol = 'FXP';\r\n        _totalSupply =9999999e18;\r\n        _decimals = 18;\r\n       \r\n        burningAddress= msg.sender;\r\n        miningownerAddress= address(0xf259083889e8B2015847848bf5306dd2e44aA788);\r\n           owner=msg.sender;\r\n          _isExcluded[msg.sender]=true; \r\n          _isExcluded[miningownerAddress]=true;  \r\n          _balances[owner] = _totalSupply;\r\n                  _paused = false;\r\n                  isReward = false;    \r\n         \r\n          defaultRefer =msg.sender;\r\n          startTime = block.timestamp;\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n        \r\n    }\r\n\r\n     modifier onlyOwner() {\r\n        require(msg.sender==owner, \"Only Call by Owner\");\r\n        _;\r\n    }\r\n      modifier onlyminerOwner() {\r\n        require(msg.sender==miningownerAddress, \"Only Call by minner Owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n    function pauseContract() public onlyOwner{\r\n        _pause();\r\n\r\n    }\r\n    function unpauseContract() public onlyOwner{\r\n        _unpause();\r\n\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual whenNotPaused override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public whenNotPaused virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual whenNotPaused returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual whenNotPaused returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    function getTeamUsersLength(address _user, uint256 _layer) external view returns(uint256) {\r\n        return teamUsers[_user][_layer].length;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) internal whenNotPaused virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(blacklist[sender]==false,\"you are blacklisted\");\r\n        require(blacklist[recipient]==false,\"you are blacklisted\");\r\n        _beforeTokenTransfer(sender, recipient, amount);  \r\n       \r\n              uint256 fee=devFee(amount,feesperc);    \r\n        \r\n\r\n         if(sender==owner && recipient == pancakePair  ){\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\t\r\n            selling[sender]=selling[sender].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n      \r\n        }    \r\n\r\n          else if(sender==owner){\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n                emit Transfer(sender, recipient, amount);\r\n      \r\n        }\r\n////////////////////////////////////////////////////////////////////////        \r\n                    // Selling limits\r\n// ////////////////////////////////////////////////////////////////////\r\n        else if (recipient == pancakePair ){\r\n        if(_isExcluded[sender]==false ){\r\n        if(block.timestamp < _firstSelltime[sender].add(locktime)){\t\t\t \r\n\t\t\t       \r\n\t\t\t     \trequire(_totalAmountSell[sender]+amount <= maxsellamount, \"You can't sell more than maxsellamount 1\");\r\n\t\t  \t    \t_totalAmountSell[sender]= _totalAmountSell[sender].add(amount);\r\n                    _balances[sender] = _balances[sender].sub(amount, \"ERC20: sell amount exceeds balance 1\");\r\n                     uint256  amountselltr1 = amount-fee;\r\n                   _balances[recipient] = _balances[recipient].add(amountselltr1);\r\n                   _balances[burningAddress] = _balances[burningAddress].add(fee);\r\n                      \r\n                       emit Transfer(sender, recipient, SafeMath.sub(amount,fee));\r\n                       emit Transfer(sender, burningAddress,fee);\r\n            \r\n\r\n\t\t\t}  \r\n\r\n        else if(block.timestamp>_firstSelltime[sender].add(locktime)){\r\n               _totalAmountSell[sender]=0;\r\n                 require(_totalAmountSell[sender].add(amount) <= maxsellamount, \"You can't sell more than maxsellamount 2\");\r\n                  _balances[sender] = _balances[sender].sub(amount, \"ERC20: sell amount exceeds balance 2\");\r\n               \r\n             uint256 amountwithfeessell = SafeMath.sub(amount,fee);\r\n                _balances[recipient] = _balances[recipient].add(amountwithfeessell);\r\n                 _balances[burningAddress] = _balances[burningAddress].add(fee);\r\n                _totalAmountSell[sender] =_totalAmountSell[sender].add(amount);\r\n                _firstSelltime[sender]=block.timestamp;\r\n                   emit Transfer(sender, recipient, SafeMath.sub(amount,fee));\r\n        emit Transfer(sender, burningAddress,fee);\r\n        }\r\n        }\r\n        else{\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: selling amount exceeds balance 3\");\r\n             \r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n          \r\n            _totalAmountSell[sender] =_totalAmountSell[sender].add(amount);\r\n               emit Transfer(sender, recipient, amount);\r\n       \r\n        }\r\n\r\n\t\t\t}\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////// \r\n                              // Buying Condition\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        else if(sender==pancakePair) {\r\n\r\n        if(_isExcluded[recipient]==false ){\r\n        if(block.timestamp < _firstBuytime[recipient].add(locktime)){\t\t\t \r\n\t\t\t\r\n\t\t\t\trequire(_totalAmountBuy[recipient]+amount <= maxbuyamount, \"You can't sell more than maxbuyamount 1\");\r\n\t\t\t\t_totalAmountBuy[recipient]= _totalAmountBuy[recipient].add(amount);\r\n                 _balances[sender] = _balances[sender].sub(amount, \"ERC20: buy amount exceeds balance 1\");     \r\n                  _balances[recipient] = _balances[recipient].add(amount);      \r\n                   emit Transfer(sender, recipient, amount);   \r\n                    if(isReward){\r\n                      _deposit(recipient, amount);\r\n                        emit Deposit(recipient, amount);   \r\n                    }   \r\n\t\t\t}  \r\n\r\n        else if(block.timestamp>_firstBuytime[recipient].add(locktime)){\r\n               _totalAmountBuy[recipient]=0;\r\n                 require(_totalAmountBuy[recipient].add(amount) <= maxbuyamount, \"You can't sell more than maxbuyamount 2\");\r\n                  _balances[sender] = _balances[sender].sub(amount, \"ERC20: buy amount exceeds balance 2\");                  \r\n                _balances[recipient] = _balances[recipient].add(amount);           \r\n                _totalAmountBuy[recipient] =_totalAmountBuy[recipient].add(amount);\r\n                _firstBuytime[recipient]=block.timestamp;\r\n                   emit Transfer(sender, recipient, amount);\r\n                        if(isReward){\r\n                             _deposit(recipient, amount);\r\n                             emit Deposit(recipient, amount);\r\n                        }\r\n        }\r\n        }\r\n        else{\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: buy amount exceeds balance 3\"); \r\n            _balances[recipient] = _balances[recipient].add(amount);    \r\n            _totalAmountBuy[recipient] =_totalAmountBuy[recipient].add(amount);\r\n               emit Transfer(sender, recipient, amount);\r\n                    if(isReward){\r\n                      _deposit(recipient, amount);\r\n                      emit Deposit(recipient, amount);\r\n                    }\r\n     \r\n        }\r\n            \r\n\r\n        }\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            // multisendaccount transfer\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        else if(sender==multisendaccount){\r\n         if(block.timestamp < _firstReceivetime[recipient].add(locktime)){\t\t\t \r\n\t\t\t\r\n\t\t\t\trequire(_totalAmountreceive[recipient]+amount <= maxMultisendPday, \"You can't transfer more than maxMultisendPday to receiver address 1\");\r\n\t\t\t\t_totalAmountreceive[recipient]= _totalAmountreceive[recipient].add(amount);\r\n                 _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance 1\");\r\n                  uint256 amountwithmultr =  SafeMath.sub(amount,fee);\r\n                   _balances[recipient] = _balances[recipient].add(amountwithmultr);\r\n                _balances[burningAddress] = _balances[burningAddress].add(fee);\r\n                   emit Transfer(sender, recipient, SafeMath.sub(amount,fee));\r\n        emit Transfer(sender, burningAddress,fee);\r\n\t\t\t}  \r\n\r\n        else if(block.timestamp>_firstReceivetime[recipient].add(locktime)){\r\n               _totalAmountreceive[recipient]=0;\r\n                 require(_totalAmountreceive[recipient].add(amount) <= maxMultisendPday, \"You can't transfer more than maxMultisendPday to receiver address 2\");\r\n                  _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance 2\");\r\n                  uint256 amountwithmultr1 =  SafeMath.sub(amount,fee);\r\n                _balances[recipient] = _balances[recipient].add(amountwithmultr1);\r\n             \r\n                  _balances[burningAddress] = _balances[burningAddress].add(fee);\r\n                _totalAmountreceive[recipient] =_totalAmountreceive[recipient].add(amount);\r\n                _firstReceivetime[recipient]=block.timestamp;\r\n                   emit Transfer(sender, recipient, SafeMath.sub(amount,fee));\r\n        emit Transfer(sender, burningAddress,fee);\r\n        }\r\n         else{\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: multisendamount amount exceeds balance 3\");\r\n                uint256 amountwithmultr3 =  SafeMath.sub(amount,fee);\r\n            _balances[recipient] = _balances[recipient].add(amountwithmultr3);\r\n               _balances[burningAddress] = _balances[burningAddress].add(fee);\r\n                  emit Transfer(sender, recipient, SafeMath.sub(amount,fee));\r\n        emit Transfer(sender, burningAddress,fee);\r\n        }    \r\n        \r\n\r\n\r\n        }\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n                                // simple transfer\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n       else if(_isExcluded[sender]==false ){\r\n       if(block.timestamp < _firstSelltime[sender].add(locktime)){\t\t\t \r\n\t\t\t\r\n\t\t\t\trequire(_totalAmountSell[sender]+amount <= maxsellamount, \"You can't transfer more than maxTrPerDay 1\");\r\n\t\t\t\t_totalAmountSell[sender]= _totalAmountSell[sender].add(amount);\r\n                 _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance 1\");            \r\n                _balances[recipient] = _balances[recipient].add(amount);              \r\n                    emit Transfer(sender, recipient, amount);\r\n\t\t\t}  \r\n\r\n        else if(block.timestamp>_firstSelltime[sender].add(locktime)){\r\n               _totalAmountSell[sender]=0;\r\n                 require(_totalAmountSell[sender].add(amount) <= maxsellamount, \"You can't transfer more than maxTrPerDay 2\");\r\n                  _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance 2\");                  \r\n                _balances[recipient] = _balances[recipient].add(amount);        \r\n                _totalAmountSell[sender] =_totalAmountSell[sender].add(amount);\r\n                _firstSelltime[sender]=block.timestamp;\r\n                   emit Transfer(sender, recipient, amount);\r\n        }\r\n         else{\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: buy amount exceeds balance 2\");        \r\n            _balances[recipient] = _balances[recipient].add(amount);       \r\n            emit Transfer(sender, recipient, amount);\r\n      \r\n        }\r\n\r\n             \r\n       }\r\n// ///////////////////////////////////////////////////////////////////////////////////\r\n                            // tranfer for excluded accounts\r\n//////////////////////////////////////////////////////////////////////////////////////\r\n       else if(_isExcluded[sender]==true )\r\n       {\r\n           _balances[sender] = _balances[sender].sub(amount, \"ERC20: simple transfer amount exceeds balance 3\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n\r\n              emit Transfer(sender, recipient, amount);\r\n      \r\n       }\r\n      \r\n    }\r\n  function register(address _referral) external {\r\n         require(userInfo[_referral].totalDeposit >= 5e18 || _referral == defaultRefer, \"invalid refer\");\r\n         if(isReward){\r\n             UserInfo storage user = userInfo[msg.sender];\r\n             require(user.referrer == address(0), \"referrer bonded\");\r\n             user.referrer = _referral;\r\n             user.start = block.timestamp;\r\n             emit Register(msg.sender, _referral);\r\n           }\r\n      \r\n    }\r\n\r\n    function _updatedirectNum(address _user) private {\r\n        UserInfo storage user = userInfo[_user];\r\n        address upline = user.referrer;\r\n        for(uint256 i = 0; i < 1; i++){\r\n            if(upline != address(0)){\r\n                userInfo[upline].directnum = userInfo[upline].directnum.add(1);                         \r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n         for(uint256 i = 0; i < referDepth; i++){\r\n            if(upline != address(0)){\r\n                userInfo[upline].teamNum = userInfo[upline].teamNum.add(1);\r\n                teamUsers[upline][i].push(_user);       \r\n                if(upline == defaultRefer) break;\r\n                upline = userInfo[upline].referrer;\r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n    }\r\n   function _updateReferInfo(address _user, uint256 _amount) private {\r\n        UserInfo storage user = userInfo[_user];\r\n        address upline = user.referrer;\r\n        for(uint256 i = 0; i < referDepth; i++){\r\n            if(upline != address(0)){\r\n                userInfo[upline].teamTotalDeposit = userInfo[upline].teamTotalDeposit.add(_amount);\r\n             \r\n                if(upline == defaultRefer) break;\r\n                upline = userInfo[upline].referrer;\r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n    }\r\n   function _updatemaxdirectdepositInfo(address _user, uint256 _amount) private {\r\n        UserInfo storage user = userInfo[_user];\r\n        address upline = user.referrer;\r\n        for(uint256 i = 0; i < directDepth; i++){\r\n            if(upline != address(0)){\r\n                userInfo[upline].maxDirectDeposit = userInfo[upline].maxDirectDeposit.add(_amount);       \r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    function _deposit(address _user, uint256 _amount) private {\r\n       if(isReward){\r\n           UserInfo storage user = userInfo[_user];\r\n         if(user.referrer != address(0)){\r\n              if(user.maxDeposit == 0){\r\n                     user.maxDeposit = _amount;\r\n                    _updatedirectNum(_user);\r\n               }\r\n              user.totalDeposit = user.totalDeposit.add(_amount);\r\n              user.isactive = true;\r\n                depositors.push(_user);\r\n              _updateReferInfo(_user, _amount);\r\n             _updatemaxdirectdepositInfo(_user, _amount);\r\n             _updateReward(_user, _amount);\r\n           }\r\n       }   \r\n    }\r\n\r\n function getActiveUpline(address _user) public view returns(bool) {\r\n        bool currentstatus=false;  \r\n        UserInfo storage user = userInfo[_user];\r\n\r\n        if(user.directnum>4){\r\n           currentstatus =   user.isactive;\r\n        }\r\n       \r\n        return currentstatus;\r\n    }\r\n\r\n    function getUplineBalancestat(address _user) public view returns(bool) {\r\n        bool Balstatus=false;  \r\n        if( _balances[_user]>=5e18){\r\n           Balstatus = true;\r\n        }\r\n        return Balstatus;\r\n    }\r\n\r\n    function _updateReward(address _user, uint256 _amount) private {\r\n        UserInfo storage user = userInfo[_user];\r\n        address upline = user.referrer;\r\n          \r\n        for(uint256 i = 0; i < referDepth; i++){\r\n            if(upline != address(0)){\r\n\r\n                bool idstatus = false;\r\n               bool idbalstatus = false;\r\n                idstatus = getActiveUpline(upline);\r\n                idbalstatus =   getUplineBalancestat(upline);\r\n                uint256 newAmount = _amount;\r\n               \r\n                \r\n                 uint256 reward;\r\n              \r\n\r\n              if(i==0 && idbalstatus ==true ){\r\n                     \r\n                         reward = newAmount.mul(directPercents).div(baseDivider);   \r\n                        _balances[address(this)] = _balances[address(this)].sub(reward);                \r\n                        _balances[upline] = _balances[upline].add(reward);     \r\n                                     \r\n                         userInfo[upline].totalRevenue = userInfo[upline].totalRevenue.add(reward);\r\n                          if(i==0){\r\n                          levelInfo[upline].level1  = levelInfo[upline].level1.add(newAmount);\r\n                     }\r\n                         emit Transfer(address(this), upline,reward);   \r\n           }else if(i>0 && i<5 && idstatus==true && idbalstatus ==true ){ \r\n                           reward = newAmount.mul(refferPercents[i - 1]).div(baseDivider);\r\n                           _balances[address(this)] = _balances[address(this)].sub(reward);  \r\n                           _balances[upline] = _balances[upline].add(reward);   \r\n                            userInfo[upline].totalRevenue = userInfo[upline].totalRevenue.add(reward);\r\n\r\n                if(i==1){\r\n                   levelInfo[upline].level2  = levelInfo[upline].level2.add(newAmount);\r\n                }\r\n                 if(i==2){\r\n                   levelInfo[upline].level3  = levelInfo[upline].level3.add(newAmount);\r\n                }\r\n                 if(i==3){\r\n                   levelInfo[upline].level4  = levelInfo[upline].level4.add(newAmount);\r\n                }\r\n                 if(i==4){\r\n                   levelInfo[upline].level5  = levelInfo[upline].level5.add(newAmount);\r\n                }\r\n                 emit Transfer(address(this), upline,reward);  \r\n            }\r\n\r\n                if(upline == defaultRefer) break;\r\n              \r\n                upline = userInfo[upline].referrer;\r\n            }else{\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(address _owner, address spender, uint256 amount) internal whenNotPaused virtual {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[_owner][spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function Rewardstart() public whenNotPaused onlyOwner{\r\n        isReward =true;\r\n    }\r\n    function Rewardstop() public whenNotPaused onlyOwner{\r\n        isReward =false;\r\n    }\r\n    function addpairaddress(address _pair) public onlyOwner whenNotPaused{\r\n     require(_pair != address(0), \"ERC20: zero address not allowed\");\r\n        pancakePair=_pair;\r\n      emit Addpairaddress(_pair);\r\n    }\r\n   \r\n    function addburnaddress(address _burnaddr) public onlyOwner whenNotPaused{\r\n        require(_burnaddr != address(0), \"ERC20: zero address not allowed\");\r\n        burningAddress=_burnaddr;\r\n      emit Addburnaddress(_burnaddr);\r\n    } \r\n    \r\n    function addminingowneraddress(address _mininerowneraddr) public onlyOwner whenNotPaused{\r\n        require(_mininerowneraddr != address(0), \"ERC20: zero address not allowed\");\r\n        miningownerAddress=_mininerowneraddr;\r\n         emit Addminingowneraddress(_mininerowneraddr);\r\n    } \r\n\r\n    function transferownership(address _newonwer) public whenNotPaused onlyOwner{\r\n        owner=_newonwer;\r\n    }\r\n\r\n    function setbuylimit(uint256 _amount) public onlyOwner whenNotPaused{\r\n    require(_amount >= 0, \"ERC20: less than zero not allowed\");\r\n       maxbuyamount=_amount*1E18;\r\n        emit Setbuylimit(_amount);\r\n    }\r\n\r\n     function setmaxsell(uint256 _amount) public whenNotPaused onlyOwner{\r\n       require(_amount >= 0, \"ERC20: less than zero not allowed\");\r\n        maxsellamount=_amount*1E18;\r\n         emit Setmaxsell(_amount);\r\n    }\r\n\r\n    function Addtokentoowner(uint256 _amount) public whenNotPaused onlyOwner{      \r\n        _totalSupply = _totalSupply.add(_amount);\r\n        _balances[owner] = _balances[owner].add(_amount);\r\n        emit Transfer(address(0), owner, _amount);\r\n    }\r\n\r\n     function mintnew(address account,uint256 amount) public whenNotPaused onlyOwner{  \r\n       require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function burnnew(address account,uint256 value) public whenNotPaused onlyOwner{     \r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n   function mintnewminer(address account,uint256 amount) public whenNotPaused onlyminerOwner{ \r\n\r\n       require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n          uint256 feemineramt=devFee(amount,minerfeesperc);  \r\n\r\n       uint256 amountwithfees1 =  SafeMath.sub(amount,feemineramt);  \r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amountwithfees1);\r\n          _balances[owner] = _balances[owner].add(feemineramt);\r\n         emit Transfer(address(0), account, amountwithfees1);\r\n         emit Transfer(address(0), owner, feemineramt);\r\n    }\r\n  \r\n    function burningnewminer(address account,uint256 value) public whenNotPaused onlyminerOwner{     \r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n    \r\n    function setfeesperc(uint256 _amount) public whenNotPaused onlyOwner{\r\n        require(_amount >= 0, \"ERC20: less than zero not allowed\");\r\n        feesperc=_amount;\r\n       emit Setfeesperc(_amount);\r\n    }\r\n\r\n   function setminerfeeperc(uint256 _amount) public whenNotPaused onlyOwner{\r\n        require(_amount >= 0, \"ERC20: less than zero not allowed\");\r\n        minerfeesperc=_amount;\r\n        emit Setminerfeeperc(_amount);\r\n    }\r\n\r\n     function setTransferperdaylimit(uint256 _amount) public onlyOwner whenNotPaused{\r\n         require(_amount >= 0, \"ERC20: less than zero not allowed\");\r\n        maxTrPerDay=_amount*1E18;\r\n         emit SetTransferperdaylimit(_amount);\r\n    }\r\n\r\n     function setmaxMultisendPday(uint256 _amount) public onlyOwner whenNotPaused{\r\n         require(_amount >= 0, \"ERC20: less than zero not allowed\");\r\n        maxMultisendPday=_amount*1E18;\r\n         emit SetmaxMultisendPday(_amount);\r\n    }\r\n\r\n    function addtoblacklist(address _addr) public onlyOwner whenNotPaused{\r\n        require(blacklist[_addr]==false,\"already blacklisted\");\r\n        blacklist[_addr]=true;\r\n    }\r\n\r\n    function removefromblacklist(address _addr) public onlyOwner whenNotPaused{\r\n        require(blacklist[_addr]==true,\"already removed from blacklist\");\r\n        blacklist[_addr]=false;\r\n    }\r\n\r\n    event Multisended(uint256 total, address tokenAddress);\r\n  \r\n    function multisendToken( address[] calldata _contributors, uint256[] calldata __balances) external whenNotPaused  \r\n        {\r\n            uint8 i = 0;\r\n            for (i; i < _contributors.length; i++) {\r\n            _transfer(msg.sender,_contributors[i], __balances[i]);\r\n            }\r\n        }\r\n\r\n    function sendMultiBnb(address payable[]  memory  _contributors, uint256[] memory __balances) public  payable whenNotPaused\r\n    {\r\n        uint256 total = msg.value;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= __balances[i],\"Invalid Amount\");\r\n            total = total - __balances[i];\r\n            _contributors[i].transfer(__balances[i]);\r\n        }\r\n        emit Multisended(  msg.value , msg.sender);\r\n    }\r\n\r\n    function withDraw (uint256 _amount) onlyOwner public whenNotPaused\r\n    {\r\n        payable(msg.sender).transfer(_amount);\r\n    }\r\n    \r\n     function devFee(uint256 amount,uint256 amountfees) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,amountfees),100);\r\n    }\r\n    \r\n    function getTokens(uint256 _amount) onlyOwner public whenNotPaused\r\n    {\r\n        _transfer(address(this),msg.sender,_amount);\r\n    }\r\n\r\n   function getotherTokens(address _token_ ,uint256 _amount) onlyOwner public whenNotPaused\r\n     {   \r\n             IERC20  OtherToken = IERC20(_token_);\r\n             OtherToken.transfer( msg.sender, _amount);\r\n       \r\n    }\r\n\r\n    function ExcludefromLimits(address _addr,bool _state) public onlyOwner whenNotPaused{\r\n        _isExcluded[_addr]=_state;\r\n    }\r\n    \r\n    function setmultisendaccount(address _addr) public onlyOwner whenNotPaused{\r\n        require(_addr != address(0), \"ERC20:  zero address not allowed\");\r\n        multisendaccount=_addr;\r\n        emit Setmultisendaccount(_addr);\r\n    }\r\n  \r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burnaddr\",\"type\":\"address\"}],\"name\":\"Addburnaddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mininerowneraddr\",\"type\":\"address\"}],\"name\":\"Addminingowneraddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"Addpairaddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetTransferperdaylimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Setbuylimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Setfeesperc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetmaxMultisendPday\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetmaxTrPerDaymining\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Setmaxsell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Setminerfeeperc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Setmultisendaccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newonwer\",\"type\":\"address\"}],\"name\":\"Transferownership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Addtokentoowner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"ExcludefromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Rewardstart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Rewardstop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_firstBuytime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_firstReceivetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_firstSelltime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_firstTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalAmountBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalAmountSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalAmountreceive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnaddr\",\"type\":\"address\"}],\"name\":\"addburnaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mininerowneraddr\",\"type\":\"address\"}],\"name\":\"addminingowneraddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addpairaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addtoblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burningAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burningnewminer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnnew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRefer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountfees\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesperc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getActiveUpline\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_layer\",\"type\":\"uint256\"}],\"name\":\"getTeamUsersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUplineBalancestat\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getotherTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"levelInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level5\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locktime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMultisendPday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTrPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxbuyamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxsellamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minerfeesperc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintnew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintnewminer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"__balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisendaccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removefromblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"selling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"__balances\",\"type\":\"uint256[]\"}],\"name\":\"sendMultiBnb\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTransferperdaylimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setbuylimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setfeesperc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setmaxMultisendPday\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setmaxsell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setminerfeeperc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setmultisendaccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newonwer\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDirectDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamTotalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directnum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRevenue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isactive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Fxcplus", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ea4282fa3d19421c9da4ea4d400ebca646b3feec3d2a8335935d7dd74786790d"}