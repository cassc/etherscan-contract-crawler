{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-09-09\r\n*/\r\n\r\n// SPDX-License-Identifier: NO\r\npragma solidity ^0.8.0;\r\n\r\n// based on https://github.com/OpenZeppelin/openzeppelin-solidity/tree/v1.10.0\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n\t/**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n\t\t// uint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n    * @dev Adds two numbers, throws on overflow.\r\n  */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\nabstract contract ERC20Basic {\r\n\tfunction totalSupply() public virtual view returns (uint256);\r\n\tfunction balanceOf(address who) public virtual view returns (uint256);\r\n\tfunction transfer(address to, uint256 value) public virtual returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\nabstract contract ERC20 is ERC20Basic {\r\n\tfunction allowance(address owner, address spender)\r\n\tpublic virtual view returns (uint256);\r\n\r\n\tfunction transferFrom(address from, address to, uint256 value)\r\n\tpublic virtual returns (bool);\r\n\r\n\tfunction approve(address spender, uint256 value) public virtual returns (bool);\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value\r\n\t);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20 {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) public balances;\r\n\tuint256 public totalSupply_;\r\n\tuint256 public constant MAX_SUPPLY = 210000000 * (10 ** 18);\r\n\r\n\tmapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\t// \u514d\u624b\u7eed\u8d39\u540d\u5355\r\n\tmapping (address => bool) public isExcludedFromFee;\r\n\t// \u5e02\u573a\u4ea4\u6613\u5bf9\r\n\tmapping (address => bool) public isMarketPair;\r\n\r\n\tuint256 public _buyTax = 5;\r\n\tuint256 public _sellTax = 5;\r\n\t// \u8425\u9500\u8d39\u7387\r\n\tuint256 public _marketTax = 1;\r\n\t// \u57fa\u91d1\u8d39\u7387\r\n\tuint256 public _fundTax = 1;\r\n\t// \u8fd4\u4f63\r\n\tuint256 public _buyProfit = 3;\r\n\t// \u5356\u51fa\u9500\u6bc1\r\n\tuint256 public _sellBurn = 3;\r\n\r\n\t// \u8425\u9500\u94b1\u5305\r\n\taddress public walletMarket = 0xE4aFE8CD56759FB1198e511cDC64810Cb3caE931;\r\n\t// \u57fa\u91d1\u94b1\u5305\r\n\taddress public walletFund = 0xDa3c9c121faE7cFBD998145136bAb7235A3b18a6;\r\n\t// LP\u5206\u7ea2\u603b\u8d26\u53f7\r\n\taddress public walletLp = 0x0b9F8b36d0516454c6D9F834C8f5e68fF0c69938;\r\n\r\n\tfunction totalSupply() public override view returns (uint256) {\r\n\t\treturn totalSupply_;\r\n\t}\r\n\r\n\tfunction _takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n\t\tuint256 feeAmount = 0;\r\n\t\tuint256 burnAmount = 0;\r\n\r\n\t\tif (isMarketPair[sender]) {\r\n\t\t\tfeeAmount = amount.mul(_buyTax).div(100);\r\n\t\t}\r\n\t\telse if(isMarketPair[recipient]) {\r\n\t\t\tfeeAmount = amount.mul(_sellTax).div(100);\r\n\t\t\tif(_sellBurn > 0) {\r\n\t\t\t\tburnAmount = amount.mul(_sellBurn).div(100);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tuint256 profit = feeAmount.sub(burnAmount);\r\n\t\tif (profit > 0) {\r\n\t\t\tbalances[address(this)] = balances[address(this)].add(profit);\r\n\t\t\temit Transfer(sender, address(this), profit);\r\n\t\t}\r\n\r\n\t\tif (burnAmount > 0) {\r\n\t\t\ttotalSupply_ -= burnAmount;\r\n\t\t\temit Transfer(sender, address(0), burnAmount);\r\n\t\t}\r\n\r\n\t\treturn amount.sub(feeAmount);\r\n\t}\r\n\r\n\t// \u5b98\u65b9\u8fd4\u4f63\r\n\tfunction _rakeBack(uint256 amount) private {\r\n\t\tif (amount > 0) {\r\n\t\t\tuint256 marketAmount = amount.mul(_marketTax).div(100);\r\n\t\t\tuint256 fundAmount = amount.mul(_fundTax).div(100);\r\n\r\n\t\t\t_basicTransfer(address(this), walletMarket, marketAmount);\r\n\t\t\t_basicTransfer(address(this), walletFund, fundAmount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _buyRakeBack(uint256 amount) private {\r\n\t\tif (amount > 0 && _buyProfit > 0) {\r\n\t\t\tuint256 profit = amount.mul(_buyProfit).div(100);\r\n\r\n\t\t\t_basicTransfer(address(this), walletLp, profit);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\t\trequire(amount <= balances[sender], \"Balance Insufficient\");\r\n\r\n\t\tif (!isMarketPair[sender] && !isMarketPair[recipient]) {\r\n\t\t\treturn _basicTransfer(sender, recipient, amount);\r\n\t\t}\r\n\r\n\t\tif (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) {\r\n\t\t\treturn _basicTransfer(sender, recipient, amount);\r\n\t\t}\r\n\r\n\t\tuint256 finalAmount = _takeFee(sender, recipient, amount);\r\n\r\n\t\t_rakeBack(amount);\r\n\t\tif (isMarketPair[sender]) {\r\n\t\t\t_buyRakeBack(amount);\r\n\t\t}\r\n\r\n\t\tbalances[sender] = balances[sender].sub(amount);\r\n\t\tbalances[recipient] = balances[recipient].add(finalAmount);\r\n\r\n\t\temit Transfer(sender, recipient, finalAmount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\t\tbalances[sender] = balances[sender].sub(amount);\r\n\t\tbalances[recipient] = balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n    * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n\tfunction balanceOf(address _owner) public override view returns (uint256) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\t/**\r\n      * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n\tfunction transfer(address _to, uint256 _value) public override returns (bool) {\r\n\t\t_transfer(msg.sender,_to,_value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n     * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n\tfunction transferFrom(\r\n\t\taddress _from,\r\n\t\taddress _to,\r\n\t\tuint256 _value\r\n\t)\r\n\tpublic\r\n\toverride\r\n\treturns (bool)\r\n\t{\r\n\t\trequire(_value <= allowed[_from][msg.sender]);\r\n\r\n\t\t_transfer(_from,_to,_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _value) public override returns (bool) {\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\temit Approval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n\tfunction allowance(\r\n\t\taddress _owner,\r\n\t\taddress _spender\r\n\t)\r\n\tpublic override\r\n\tview\r\n\treturns (uint256)\r\n\t{\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\r\n\t/**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n\tfunction increaseApproval(\r\n\t\taddress _spender,\r\n\t\tuint _addedValue\r\n\t)\r\n\tpublic\r\n\treturns (bool)\r\n\t{\r\n\t\tallowed[msg.sender][_spender] = (\r\n\t\tallowed[msg.sender][_spender].add(_addedValue));\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n\tfunction decreaseApproval(\r\n\t\taddress _spender,\r\n\t\tuint _subtractedValue\r\n\t)\r\n\tpublic\r\n\treturns (bool)\r\n\t{\r\n\t\tuint oldValue = allowed[msg.sender][_spender];\r\n\t\tif (_subtractedValue > oldValue) {\r\n\t\t\tallowed[msg.sender][_spender] = 0;\r\n\t\t} else {\r\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\t\t}\r\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\taddress public owner;\r\n\r\n\tevent OwnershipRenounced(address indexed previousOwner);\r\n\tevent OwnershipTransferred(\r\n\t\taddress indexed previousOwner,\r\n\t\taddress indexed newOwner\r\n\t);\r\n\r\n\r\n\t/**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n\tconstructor() {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n     * @dev Throws if called by any account other than the owner.\r\n   */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n\t/**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\trequire(newOwner != address(0));\r\n\t\temit OwnershipTransferred(owner, newOwner);\r\n\t\towner = newOwner;\r\n\t}\r\n\r\n\t/**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is BasicToken, Ownable {\r\n\tusing SafeMath for uint256;\r\n\tevent Mint(address indexed to, uint256 amount);\r\n\r\n\tbool public mintingFinished = false;\r\n\tuint public mintTotal = 0;\r\n\r\n\tmodifier canMint() {\r\n\t\trequire(!mintingFinished);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier hasMintPermission() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n     * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n\tfunction mint(\r\n\t\taddress _to,\r\n\t\tuint256 _amount\r\n\t)\r\n\thasMintPermission\r\n\tcanMint\r\n\tpublic\r\n\treturns (bool)\r\n\t{\r\n\t\tuint tmpTotal = mintTotal.add(_amount);\r\n\t\trequire(tmpTotal <= MAX_SUPPLY, \"out of supply\");\r\n\t\tmintTotal = mintTotal.add(_amount);\r\n\t\ttotalSupply_ = totalSupply_.add(_amount);\r\n\t\tbalances[_to] = balances[_to].add(_amount);\r\n\t\temit Mint(_to, _amount);\r\n\t\temit Transfer(address(0), _to, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 amount) internal virtual  {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\t\tuint256 accountBalance = balances[account];\r\n\t\trequire(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n\tunchecked {\r\n\t\tbalances[account] = accountBalance - amount;\r\n\t}\r\n\t\ttotalSupply_ -= amount;\r\n\t\temit Transfer(account, address(0), amount);\r\n\t}\r\n\r\n}\r\n\r\ncontract BEP20Token is MintableToken {\r\n\t// public variables\r\n\tusing SafeMath for uint256;\r\n\r\n\tstring public name = \"Pyramid Management Trading\";\r\n\tstring public symbol = \"PMT\";\r\n\tuint8 public decimals = 18;\r\n\r\n\tconstructor() {\r\n\t\t// allowed[address(this)][address(uniswapV2Router)] = totalSupply_;\r\n\t\t//mint(msg.sender, totalSupply_);\r\n\r\n\t\tisExcludedFromFee[msg.sender] = true;\r\n\t\tisExcludedFromFee[address(this)] = true;\r\n\t}\r\n\r\n\tfunction burn(uint value) public{\r\n\t\tsuper._burn(msg.sender,value);\r\n\t}\r\n\r\n\tfunction setMarketPairStatus(address account, bool status) public onlyOwner {\r\n\t\tisMarketPair[account] = status;\r\n\t}\r\n\r\n\tfunction setIsExcludedFromFee(address account, bool status) public onlyOwner {\r\n\t\tisExcludedFromFee[account] = status;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setMarketPairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BEP20Token", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f9405fadc15ad5cd9473441c26b414d7d574bdae7253dd74de8dd2b139971767"}