{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/INftRewardsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity = 0.8.19;\\r\\n\\r\\ninterface INftRewardsDistributor {\\r\\n    function distributeNFTRewards(address tokenToDistribute, uint256 amountToDistribute) external;\\r\\n}\"\r\n    },\r\n    \"contracts/PraizaToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity =0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Interfaces/INftRewardsDistributor.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author  <a href=\\\"http://https://github.com/R3D4NG3L\\\">R3D4NG3L</a>  \\r\\n * @title   Praiza Token\\r\\n * @notice  Taxes: \\r\\n             - 1,8% Base Reflections shared among all token holders\\r\\n             - 11,2% Total Taxes as distributed\\r\\n                - 5% Buy back and burn\\r\\n                - 4,2% Premium Reflections for NFT holders\\r\\n                - 1% Marketing\\r\\n                - 1% Team Salary\\r\\n */\\r\\n\\r\\ncontract Praiza is Context, ERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    // ----------------------------------------------------------------\\r\\n    // Reflection vars\\r\\n    // ----------------------------------------------------------------\\r\\n    mapping(address => uint256) private _rOwned;\\r\\n    mapping(address => uint256) private _tOwned;\\r\\n    mapping(address => bool) private _isExcludedFromBaseReflections;\\r\\n    address[] private _excluded;\\r\\n\\r\\n    bool private swapping;\\r\\n\\r\\n    IUniswapV2Router02 public router;\\r\\n    address public pair;\\r\\n\\r\\n    uint8 private constant _decimals = 18;\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n\\r\\n    uint256 private _tTotal = 100_000_000 * 10 ** _decimals;\\r\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n\\r\\n    uint256 public swapTokensAtAmount = _tTotal.div(5_000);\\r\\n\\r\\n    // ----------------------------------------------------------------\\r\\n    // ---- Taxes Wallets ----\\r\\n    // ----------------------------------------------------------------\\r\\n    address public deadWallet = address(0x000000000000000000000000000000000000dEaD);\\r\\n    address public marketingWallet = address(0xd602F76088De29e88250C3B0385405b895612746);\\r\\n    address public teamSalaryWallet = address(0x56DDBBDCB8ac77d1585FF65F171E5cB226e10e7f);\\r\\n    address public receiveRewards = address(0xa8C0cAEA5d6E222C885cc5a08B269a95eA1022e4);\\r\\n\\r\\n    // ----------------------------------------------------------------\\r\\n    // --- Events ---\\r\\n    // ----------------------------------------------------------------\\r\\n    event _tradingEnabledEvent(bool value);\\r\\n    event _buyBackAndBurnEvent(uint256 amount);\\r\\n    event _swappedTaxesForWETHEvent(uint256 amount);\\r\\n\\r\\n    bool public isTradingEnabled = false;\\r\\n\\r\\n    struct Taxes {\\r\\n        uint256 baseReflections;\\r\\n        uint256 premiumRfi_Mkt_Salry_Bbb;\\r\\n    }\\r\\n\\r\\n    // Taxes are a total of 13%, which 1,8% are base reflections, \\r\\n    // 11,2% are premium reflections, marketing, team salary and buy back and burn\\r\\n    Taxes private taxes = Taxes(18, 112);\\r\\n\\r\\n    mapping(address => bool) private _isExcludedFromTaxes;\\r\\n\\r\\n    // ----------------------------------------------------------------\\r\\n    // ---- Taxes Allocation ---\\r\\n    // ---- Taxes are a total of 11,2% (excluding 1,8% of base reflections)\\r\\n    // ---- Premium reflections allocation are 4,8% of this 11,2%, this means that is the 42,86% of those fees\\r\\n    // ----------------------------------------------------------------\\r\\n    // Excluding the premium reflections that are paid in tokens, the rest of the taxes are divided as follows\\r\\n    // ---- Buy Back & Burn allocation is 5% of this 6,4%, this means that is the 78,13% of those fees\\r\\n    // ---- Marketing allocation is 1% of this 6,4%, this means that is the 15,63% of those fees\\r\\n    // ---- Salary allocation is 1% of this 6,4%, this means that is the 15,63% of those fees\\r\\n    // ----------------------------------------------------------------\\r\\n    uint256 private constant premiumReflectionsAllocation = 4286;\\r\\n    uint256 private constant buyBackAllocation = 6873;\\r\\n    uint256 private constant marketingAllocation = 1563;\\r\\n    uint256 private constant salaryAllocation = 1563;\\r\\n    uint256 private constant allocation_denominator = 10000;\\r\\n\\r\\n    struct TotFeesPaidStruct {\\r\\n        uint256 baseReflections;\\r\\n        uint256 premiumRfi_Mkt_Salry_Bbb;\\r\\n    }\\r\\n\\r\\n    TotFeesPaidStruct public totFeesPaid;\\r\\n\\r\\n    struct valuesFromGetValues {\\r\\n        uint256 rAmount;\\r\\n        uint256 rTransferAmount;\\r\\n        uint256 rBaseReflections;\\r\\n        uint256 rTaxes;\\r\\n        uint256 tTransferAmount;\\r\\n        uint256 tBaseReflections;\\r\\n        uint256 tTaxes;\\r\\n    }\\r\\n    \\r\\n    constructor(address routerAddress) ERC20(\\\"Praiza\\\", \\\"PRZ\\\") {\\r\\n        IUniswapV2Router02 _router = IUniswapV2Router02(routerAddress);\\r\\n        address _pair = IUniswapV2Factory(_router.factory()).createPair(\\r\\n            address(this),\\r\\n            _router.WETH()\\r\\n        );\\r\\n\\r\\n        router = _router;\\r\\n        pair = _pair;\\r\\n\\r\\n        excludeFromBaseReflections(pair);\\r\\n        excludeFromBaseReflections(deadWallet);\\r\\n\\r\\n        _rOwned[owner()] = _rTotal;\\r\\n        includeExcludeFromTaxes(address(this), true);\\r\\n        includeExcludeFromTaxes(owner(), true);\\r\\n        includeExcludeFromTaxes(marketingWallet, true);\\r\\n        includeExcludeFromTaxes(deadWallet, true);\\r\\n        includeExcludeFromTaxes(teamSalaryWallet, true);\\r\\n        emit Transfer(address(0), owner(), _tTotal);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Given a token amount, returns the reflection amount\\r\\n     * @param   tAmount  Token Amount\\r\\n     * @param   deductTransferRfi  Deduct base reflection fees\\r\\n     * @return  uint256  Reflection amount\\r\\n     */\\r\\n    function reflectionFromToken(\\r\\n        uint256 tAmount,\\r\\n        bool deductTransferRfi\\r\\n    ) public view returns (uint256) {\\r\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        if (!deductTransferRfi) {\\r\\n            valuesFromGetValues memory s = _getValues(tAmount, true);\\r\\n            return s.rAmount;\\r\\n        } else {\\r\\n            valuesFromGetValues memory s = _getValues(tAmount, true);\\r\\n            return s.rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Given a reflection amount, calculate the token amount from it according to current rate\\r\\n     * @param   rAmount  Reflection Amount\\r\\n     * @return  uint256  Token Amount\\r\\n     */\\r\\n    function tokenFromReflection(\\r\\n        uint256 rAmount\\r\\n    ) public view returns (uint256) {\\r\\n        require(\\r\\n            rAmount <= _rTotal,\\r\\n            \\\"Amount must be less than total reflections\\\"\\r\\n        );\\r\\n        uint256 currentRate = _getRate();\\r\\n        return rAmount.div(currentRate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Deduct reflections from total\\r\\n     * @param   rBaseReflections  Reflection - Base Reflection\\r\\n     * @param   tBaseReflections  Supply - Base Reflection\\r\\n     */\\r\\n    function _reflectRfi(uint256 rBaseReflections, uint256 tBaseReflections) private {\\r\\n        _rTotal = _rTotal.sub(rBaseReflections);\\r\\n        totFeesPaid.baseReflections = totFeesPaid.baseReflections.add(tBaseReflections);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Transfer the 9,2% of taxes to current smart contract address\\r\\n     * @dev     Taxes will be liquidated on next transfers when reaching a minimum amount defined in swapTokensAtAmount\\r\\n     * @param   rTaxes  Reflection Taxes\\r\\n     * @param   tTaxes  Transfer Taxes\\r\\n     */\\r\\n    function _takeTaxes(uint256 rTaxes, uint256 tTaxes) private {\\r\\n        totFeesPaid.premiumRfi_Mkt_Salry_Bbb = totFeesPaid.premiumRfi_Mkt_Salry_Bbb.add(tTaxes);\\r\\n\\r\\n        if (_isExcludedFromBaseReflections[address(this)]) {\\r\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tTaxes);\\r\\n        }\\r\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTaxes);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Get transcation values\\r\\n     * @param   tAmount  Token to transfer\\r\\n     * @param   takeTaxes  Take taxes\\r\\n     * @return  values  Transaction values\\r\\n     */\\r\\n    function _getValues(\\r\\n        uint256 tAmount,\\r\\n        bool takeTaxes\\r\\n    ) private view returns (valuesFromGetValues memory values) {\\r\\n        values = _getTValues(tAmount, takeTaxes);\\r\\n        (\\r\\n            values.rAmount,\\r\\n            values.rTransferAmount,\\r\\n            values.rBaseReflections,\\r\\n            values.rTaxes\\r\\n        ) = _getRValues(values, tAmount, takeTaxes, _getRate());\\r\\n\\r\\n        return values;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Get Token Transaction Values\\r\\n     * @param   tAmount  Token amount to transfer\\r\\n     * @param   takeTaxes  Take taxes\\r\\n     * @return  s  Transaction Values\\r\\n     */\\r\\n    function _getTValues(\\r\\n        uint256 tAmount,\\r\\n        bool takeTaxes\\r\\n    ) private view returns (valuesFromGetValues memory s) {\\r\\n        if (!takeTaxes) {\\r\\n            s.tTransferAmount = tAmount;\\r\\n            return s;\\r\\n        }\\r\\n\\r\\n        s.tBaseReflections = tAmount.mul(taxes.baseReflections).div(1000);\\r\\n        s.tTaxes = tAmount.mul(taxes.premiumRfi_Mkt_Salry_Bbb).div(1000);\\r\\n        s.tTransferAmount = tAmount.sub(s.tBaseReflections).sub(s.tTaxes);\\r\\n        return s;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Get Reflection Values\\r\\n     * @param   s  Reflecition and Supply Values\\r\\n     * @param   tAmount  Token Amount to transfer\\r\\n     * @param   takeTaxes  Take Fee\\r\\n     * @param   currentRate  Current Reflection Rate\\r\\n     * @return  rAmount  Reflection Amount\\r\\n     * @return  rTransferAmount  Reflections Transfer Amount\\r\\n     * @return  rBaseReflections  Base Reflections Ammount\\r\\n     * @return  rTaxes  Reflection Taxes\\r\\n     */\\r\\n    function _getRValues(\\r\\n        valuesFromGetValues memory s,\\r\\n        uint256 tAmount,\\r\\n        bool takeTaxes,\\r\\n        uint256 currentRate\\r\\n    )\\r\\n        private\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rBaseReflections,\\r\\n            uint256 rTaxes\\r\\n        )\\r\\n    {\\r\\n        rAmount = tAmount.mul(currentRate);\\r\\n\\r\\n        if (!takeTaxes) {\\r\\n            return (rAmount, rAmount, 0, 0);\\r\\n        }\\r\\n\\r\\n        rBaseReflections = s.tBaseReflections.mul(currentRate);\\r\\n        rTaxes = s.tTaxes.mul(currentRate);\\r\\n        rTransferAmount = rAmount.sub(rBaseReflections).sub(rTaxes);\\r\\n        return (rAmount, rTransferAmount, rBaseReflections, rTaxes);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Get reflection rate\\r\\n     * @return  uint256  Reflection supply divided per total supply\\r\\n     */\\r\\n    function _getRate() private view returns (uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply.div(tSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Get currenct supply\\r\\n     * @return  uint256  Reflection supply\\r\\n     * @return  uint256  Total supply\\r\\n     */\\r\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (\\r\\n                _rOwned[_excluded[i]] > rSupply ||\\r\\n                _tOwned[_excluded[i]] > tSupply\\r\\n            ) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Indicates if the interaction is happening between normal addresses\\r\\n     * @dev     Used to check if the interaction is dealing with special addresses or not\\r\\n     * @param   from  Transfer From Address\\r\\n     * @param   to  Transfer To Address\\r\\n     * @return  bool  true if is a standard interaction, else false if is a special interaction\\r\\n     */\\r\\n    function isStandardInteraction(\\r\\n        address from,\\r\\n        address to\\r\\n    ) internal view returns (bool) {\\r\\n        bool isLimited = from != owner() &&\\r\\n            to != owner() &&\\r\\n            msg.sender != owner() &&\\r\\n            !_isExcludedFromTaxes[from] &&\\r\\n            !_isExcludedFromTaxes[to] &&\\r\\n            to != address(0xdead) &&\\r\\n            to != address(0) &&\\r\\n            to != address(this);\\r\\n        return isLimited;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Transfer function counting reflections and taxes\\r\\n     * @param   from  From Address\\r\\n     * @param   to  Receiving Address\\r\\n     * @param   amount  Amount of tokens to transfer\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 amount) internal override {\\r\\n        require(from != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        require(\\r\\n            amount <= balanceOf(from),\\r\\n            \\\"You are trying to transfer more than your balance\\\"\\r\\n        );\\r\\n\\r\\n        if (isStandardInteraction(from, to)) {\\r\\n            require(isTradingEnabled, \\\"Trading is not enabled\\\");\\r\\n        }\\r\\n\\r\\n        bool canSwap = balanceOf(address(this)) >= swapTokensAtAmount;\\r\\n        if (\\r\\n            !swapping &&\\r\\n            canSwap &&\\r\\n            from != pair &&\\r\\n            !_isExcludedFromTaxes[from] &&\\r\\n            !_isExcludedFromTaxes[to]\\r\\n        ) {\\r\\n            swapAndLiquify();\\r\\n        }\\r\\n        bool takeTaxes = true;\\r\\n        if (swapping || _isExcludedFromTaxes[from] || _isExcludedFromTaxes[to])\\r\\n            takeTaxes = false;\\r\\n\\r\\n        _tokenTransfer(from, to, amount, takeTaxes);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Token transfer\\r\\n     * @param   sender  Sender\\r\\n     * @param   recipient  Receiving recipient\\r\\n     * @param   tAmount  Token Amount to transfer\\r\\n     * @param   takeTaxes  Take Taxes\\r\\n     */\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount,\\r\\n        bool takeTaxes\\r\\n    ) private {\\r\\n        valuesFromGetValues memory s = _getValues(tAmount, takeTaxes);\\r\\n\\r\\n        if (_isExcludedFromBaseReflections[sender]) {\\r\\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        }\\r\\n        if (_isExcludedFromBaseReflections[recipient]) {\\r\\n            _tOwned[recipient] = _tOwned[recipient].add(s.tTransferAmount);\\r\\n        }\\r\\n\\r\\n        _rOwned[sender] = _rOwned[sender].sub(s.rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(s.rTransferAmount);\\r\\n\\r\\n        if (s.rBaseReflections > 0 || s.tBaseReflections > 0) _reflectRfi(s.rBaseReflections, s.tBaseReflections);\\r\\n        if (s.rTaxes > 0 || s.tTaxes > 0)\\r\\n            _takeTaxes(s.rTaxes, s.tTaxes);\\r\\n        emit Transfer(sender, recipient, s.tTransferAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Takes current contract balance and distributes tokens for premium reflections, and swaps the remaining part in BNBs\\r\\n     *          and sends them to marketing, team salary and buy back and burn wallets\\r\\n     */\\r\\n    function swapAndLiquify() private lockTheSwap {\\r\\n        uint256 contractBalance = balanceOf(address(this));\\r\\n        // Send premium reflections to receiveRewards wallet\\r\\n        uint256 rewardsAmount = premiumReflectionsAllocation.mul(contractBalance).div(allocation_denominator);\\r\\n        if (rewardsAmount > 0)\\r\\n        {\\r\\n            _transfer(address(this), receiveRewards, rewardsAmount);\\r\\n            if (_isContract(receiveRewards))\\r\\n            {\\r\\n                INftRewardsDistributor distributor = INftRewardsDistributor(receiveRewards);\\r\\n                try distributor.distributeNFTRewards(address(this), rewardsAmount) { } catch { }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        contractBalance = balanceOf(address(this));\\r\\n        _swapTokensForWETH(contractBalance);\\r\\n\\r\\n        bool success;\\r\\n\\r\\n        uint256 buyBack = buyBackAllocation.mul(address(this).balance).div(allocation_denominator);\\r\\n        uint256 mark = marketingAllocation.mul(address(this).balance).div(allocation_denominator);\\r\\n        uint256 sal = salaryAllocation.mul(address(this).balance).div(allocation_denominator);\\r\\n\\r\\n        if (mark > 0) {\\r\\n            (success, ) = marketingWallet.call{value: mark, gas: 35000}(\\\"\\\");\\r\\n        }\\r\\n        if (sal > 0) {\\r\\n            (success, ) = teamSalaryWallet.call{value: sal, gas: 35000}(\\\"\\\");\\r\\n        }\\r\\n        if (buyBack > 0) {\\r\\n            _buyBackAndBurn(buyBack);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Update taxes receiver wallets\\r\\n     * @param   _newMarketingWallet  New Marketing Wallet\\r\\n     * @param   _teamSalaryWallet  New Team Salary Wallet\\r\\n     */\\r\\n    function updateWallets(\\r\\n        address _newMarketingWallet,\\r\\n        address _teamSalaryWallet\\r\\n    ) external onlyOwner {\\r\\n        require(_newMarketingWallet != address(0), \\\"Zero address\\\");\\r\\n        require(_teamSalaryWallet != address(0), \\\"Zero Address\\\");\\r\\n        marketingWallet = _newMarketingWallet;\\r\\n        teamSalaryWallet = _teamSalaryWallet;\\r\\n        includeExcludeFromTaxes(marketingWallet, true);\\r\\n        includeExcludeFromTaxes(teamSalaryWallet, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     No checks, but not suggested to set values higher than 10_000 (1% of _tTotal supply)\\r\\n     * @param   amount  Minimum amount of tokens to trigger the swapAndLiquify for taxes redistribution\\r\\n     */\\r\\n    function updateSwapTokensAtAmount(uint256 amount) external onlyOwner {        \\r\\n        swapTokensAtAmount = amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev isTradingEnabled can't be disabled otherwise might be flagged as honeypot\\r\\n     */\\r\\n    function enableTrading() external onlyOwner {\\r\\n        require(isTradingEnabled != true, \\\"Same Bool\\\");\\r\\n        isTradingEnabled = true;\\r\\n        emit _tradingEnabledEvent(true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev     Change premium reflections distributor. Set 0 to stop distributing premium reflections.\\r\\n     * @param   distributorAddress Distributor Address\\r\\n     */\\r\\n    function changePremiumReflectionsDistributor(address distributorAddress) external onlyOwner {\\r\\n        receiveRewards = distributorAddress;\\r\\n        if (!_isExcludedFromBaseReflections[distributorAddress]) {\\r\\n            excludeFromBaseReflections(distributorAddress);\\r\\n        }\\r\\n        if (!isExcludedFromTaxes(distributorAddress)) {\\r\\n            includeExcludeFromTaxes(distributorAddress, true);\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n     * @dev     Checks if an address is a smart contract\\r\\n     * @param   addr  Address to check\\r\\n     * @return  bool  true: is a smart contract, else false\\r\\n     */\\r\\n    function _isContract(address addr) internal view returns (bool) {\\r\\n        uint size;\\r\\n        assembly { size := extcodesize(addr) }\\r\\n        return size > 0;\\r\\n    }\\r\\n    \\r\\n    // ----------------------------------------------------------------\\r\\n    // --- ERC20 Custom Implementations ----\\r\\n    // ----------------------------------------------------------------\\r\\n    /**\\r\\n     * @notice  Token Decimals\\r\\n     * @return  uint8  Token Decimals\\r\\n     */\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Total supply excluded dead wallet. This is a deflationatory token.\\r\\n     * @return  uint256  Total supply\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal.sub(balanceOf(deadWallet));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Balance of wallet\\r\\n     * @dev     Special conditions for special wallets excluded from reflections\\r\\n     * @param   account  Account to check the balance\\r\\n     * @return  uint256  Account balance\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcludedFromBaseReflections[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    // ----------------------------------------------------------------\\r\\n    // Include/Exclude from base reflections\\r\\n    // ----------------------------------------------------------------\\r\\n    /**\\r\\n     * @notice  Checks if an address is excluded from base reflections\\r\\n     * @param   account  Account to check\\r\\n     * @return  bool  true if the address is excluded from base reflections, else false\\r\\n     */\\r\\n    function isExcludedFromBaseReflections(\\r\\n        address account\\r\\n    ) public view returns (bool) {\\r\\n        return _isExcludedFromBaseReflections[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Exclude an address from base reflections\\r\\n     * @dev     Usefull for LP pair and Dead Wallet\\r\\n     * @param   account  Account to exclude from base reflections\\r\\n     */\\r\\n    function excludeFromBaseReflections(address account) public onlyOwner {\\r\\n        require(\\r\\n            !_isExcludedFromBaseReflections[account],\\r\\n            \\\"Account is already excluded\\\"\\r\\n        );\\r\\n        if (_rOwned[account] > 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n        _isExcludedFromBaseReflections[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Include an address for base reflections\\r\\n     * @param   account  Account to include for base reflections\\r\\n     */\\r\\n    function includeInBaseReflections(address account) external onlyOwner {\\r\\n        require(\\r\\n            _isExcludedFromBaseReflections[account],\\r\\n            \\\"Account is not excluded\\\"\\r\\n        );\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length.sub(1)];\\r\\n                _tOwned[account] = 0;\\r\\n                _isExcludedFromBaseReflections[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ----------------------------------------------------------------\\r\\n    // Include/Exclude from taxes\\r\\n    // ----------------------------------------------------------------\\r\\n    /**\\r\\n     * @notice  Exclude an address from taxes\\r\\n     * @param   account  Account to exclude from taxes\\r\\n     * @param   exclude true to exclude the account, else false to include it\\r\\n     */\\r\\n    function includeExcludeFromTaxes(address account, bool exclude) public onlyOwner {\\r\\n        _isExcludedFromTaxes[account] = exclude;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Checks if an address is excluded from taxes\\r\\n     * @param   account  Account to check\\r\\n     * @return  bool  true if the address is excluded for taxes, else false\\r\\n     */\\r\\n    function isExcludedFromTaxes(address account) public view returns (bool) {\\r\\n        return _isExcludedFromTaxes[account];\\r\\n    }\\r\\n\\r\\n    // ----------------------------------------------------------------\\r\\n    // --- Liquidity pool interactions ---\\r\\n    // ----------------------------------------------------------------\\r\\n    // Receive function for liquidity pool interactions\\r\\n    receive() external payable {}\\r\\n\\r\\n    /**\\r\\n     * @notice  Used to indicate that an interaction with the Liquidity pool is in progress     \\r\\n     */\\r\\n    modifier lockTheSwap() {\\r\\n        swapping = true;\\r\\n        _;\\r\\n        swapping = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Swap Tokens for WETH\\r\\n     * @dev     Used to swap collected taxes from previous transactions. If deployed on BSC will automatically be WBNB.\\r\\n     * @param   tokenAmount  Tokens to swap to WETH\\r\\n     */\\r\\n    function _swapTokensForWETH(uint256 tokenAmount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n\\r\\n        _approve(address(this), address(router), tokenAmount);\\r\\n\\r\\n        try\\r\\n            // Refer to: https://docs.uniswap.org/contracts/v2/reference/smart-contracts/router-02#swapexacttokensforethsupportingfeeontransfertokens\\r\\n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                tokenAmount,\\r\\n                0,\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            )\\r\\n        { \\r\\n            emit _swappedTaxesForWETHEvent(tokenAmount);\\r\\n        }\\r\\n        catch {\\r\\n            // Suppress exceptions\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Buy back and burn\\r\\n     * @dev     .\\r\\n     * @param   amount  .\\r\\n     */\\r\\n    function _buyBackAndBurn(uint256 amount) internal {\\r\\n        bool failed;\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = router.WETH();\\r\\n        path[1] = address(this);\\r\\n\\r\\n        try\\r\\n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\r\\n                value: amount\\r\\n            }(0, path, address(0xdead), block.timestamp)\\r\\n        {} catch {\\r\\n            failed = false;\\r\\n        }\\r\\n\\r\\n        if (!failed) {\\r\\n            emit _buyBackAndBurnEvent(amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ----------------------------------------------------------------\\r\\n    // Safety Functions\\r\\n    // ----------------------------------------------------------------\\r\\n    /*\\r\\n     * @fn rescueBNB\\r\\n     * @brief Rescue BNBs stuck in the contract and sends them to msg.sender\\r\\n     * @param weiAmount: wei amount to send to msg.sender\\r\\n     */\\r\\n    function rescueBNB(uint256 weiAmount) external onlyOwner {\\r\\n        require(address(this).balance >= weiAmount, \\\"Insufficient BNB balance\\\");\\r\\n        payable(msg.sender).transfer(weiAmount);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @fn rescueAnyIERC20Tokens\\r\\n     * @brief Rescue IERC20 Tokens stuck in the contract and sends them to msg.sender\\r\\n     * @param _tokenAddr: Token Address to rescue\\r\\n     * @param _amount: amount to send to msg.sender\\r\\n     */\\r\\n    function rescueAnyIERC20Tokens(\\r\\n        address _tokenAddr,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            _tokenAddr != address(this),\\r\\n            \\\"Owner can't claim contract's balance of its own tokens\\\"\\r\\n        );\\r\\n        IERC20(_tokenAddr).transfer(msg.sender, _amount);\\r\\n    }\\r\\n    \\r\\n    // ----------------------------------------------------------------\\r\\n    // Ownership Policy\\r\\n    // ----------------------------------------------------------------\\r\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        // Transfer all tokens without fees\\r\\n        transfer(newOwner, balanceOf(owner()));\\r\\n        // Exclude new owner\\r\\n        includeExcludeFromTaxes(newOwner, true);\\r\\n        // Transfer ownership\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_buyBackAndBurnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_swappedTaxesForWETHEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"_tradingEnabledEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributorAddress\",\"type\":\"address\"}],\"name\":\"changePremiumReflectionsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromBaseReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"includeExcludeFromTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInBaseReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromBaseReflections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromTaxes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferRfi\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyIERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSalaryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseReflections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumRfi_Mkt_Salry_Bbb\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMarketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamSalaryWallet\",\"type\":\"address\"}],\"name\":\"updateWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Praiza", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}