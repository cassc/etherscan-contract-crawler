{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity ^0.7.6;\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * BEP20 standard interface.\r\n */\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * Allows for contract ownership along with multi-address authorization\r\n */\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\ncontract NPCTOKEN is IBEP20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n\tstruct FeeSet {\r\n\t\tuint256 reflectionFee;\r\n\t\tuint256 marketingFee;\r\n\t\tuint256 liquidityFee;\r\n\t\tuint256 burnFee;\r\n\t\tuint256 totalFee;\r\n\t}\r\n\r\n\r\n    uint256 _prerrate;\r\n    uint256 _saleTokenTotal;\r\n    uint256 _saleBnbTotal;\r\n    uint256 _softBnbTotal;\r\n    uint256 _hardBnbTotal;\r\n    uint256 _minLimit;\r\n    uint256 _maxLimit;\r\n\r\n    address WBNB;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    string constant _name = \"NPC\";\r\n    string constant _symbol = \"NPC\";\r\n    uint8 constant _decimals = 18;\r\n\r\n    uint256 public _totalSupply = 1000000000 * (10 ** _decimals);\r\n    uint256 public _maxTxAmount = (_totalSupply * 1) / 100; //1% of total supply\r\n    uint256 public _maxSellTxAmountRate =5;\r\n    uint256 public _maxSellTxAmountL = 121 * (10 ** _decimals);\r\n    uint256 public _maxWalletToken = (_totalSupply * 2) / 100; //2% of total supply\r\n\r\n    uint256 timeBeforeFirstBuy = 6 seconds;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    uint256 private finalSupply =100000000 * (10 ** _decimals);\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => bool) isDividendExempt;\r\n    mapping (address => bool) isBlacklisted;\r\n\r\n\r\n    FeeSet buyFees;\r\n\tFeeSet sellFees;\r\n\r\n    uint256 feeDenominator  = 100;\r\n\r\n    address public autoLiquidityReceiver;\r\n    address public marketingFeeReceiver;\r\n\r\n    bool openPreSale = false;\r\n\r\n    IDEXRouter router;\r\n    address pair;\r\n    bool tradingOpen;\r\n    uint256 launchAt;\r\n\r\n    bool private needBurn =true;\r\n\r\n    uint256 private burnTotal;\r\n\r\n    bool inSwap;\r\n\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor (address PmarketingAddress ) Auth(msg.sender) {\r\n\r\n      //  router = IDEXRouter(0xb06ff22422C366788368e0b368a97cE3135dA443);\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        WBNB = router.WETH();\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[address(this)][address(router)] = uint256(-1);\r\n\r\n        autoLiquidityReceiver = msg.sender;\r\n        marketingFeeReceiver =PmarketingAddress;\r\n\r\n        isFeeExempt[autoLiquidityReceiver] = true;\r\n        isFeeExempt[marketingFeeReceiver] = true;\r\n        isFeeExempt[address(this)] = true;\r\n\r\n        isTxLimitExempt[autoLiquidityReceiver] = true;\r\n        isTxLimitExempt[marketingFeeReceiver] = true;\r\n        isTxLimitExempt[address(DEAD)] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(router)] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        isDividendExempt[ZERO] = true;\r\n\r\n\r\n\t\tsetBuyFees(0, 4, 0,6);\r\n\t\tsetSellFees(0, 4, 0,6);\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != uint256(-1)){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(!isBlacklisted[sender], \"Address is blacklisted\");\r\n        uint256 balance = _balances[sender];\r\n        require(balance>amount,\"Insufficient Balance\");\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if(!authorizations[sender] && !authorizations[recipient]){\r\n            if(!tradingOpen){\r\n                if(launchAt > 0 && launchAt <= block.timestamp)\r\n                    tradingOpen = true;\r\n                require(tradingOpen,\"Trading not open yet\");\r\n            }\r\n\r\n\r\n            if(!isTxLimitExempt[recipient]){\r\n                if (sender == pair){\r\n                    uint256 currentBalance = balanceOf(recipient);\r\n                    require((currentBalance + amount) <= _maxWalletToken,\"Total Holding is currently limited, you can not buy that much.\");\r\n                }\r\n                require(amount <= _maxTxAmount, \"TX Limit Exceeded\");\r\n            }\r\n        }\r\n        _distributeFee(sender,recipient,amount);\r\n        return true;\r\n    }\r\n\r\n    function  getBurnTotal () public view  returns(uint256){\r\n\r\n        return burnTotal;\r\n    }\r\n\r\n    function _setPreSaleInfo(\r\n    bool openV,\r\n    uint256 _saleTokenTotalv,\r\n    uint256 _softBnbTotalv,\r\n    uint256 _hardBnbTotalv,\r\n    uint256 _minLimitv,\r\n    uint256 _maxLimitv) public onlyOwner{\r\n\r\n\r\n        uint256 _prerratev = _saleTokenTotalv.div(_hardBnbTotalv).mul(10**_decimals);\r\n\r\n        _minLimitv =_minLimitv.mul(10**18).div(100);\r\n        _maxLimitv =_maxLimitv.mul(10**18).div(100);\r\n        _saleTokenTotalv =_saleTokenTotalv.mul(10**_decimals);\r\n        _softBnbTotalv =_softBnbTotalv.mul(10**18);\r\n        _hardBnbTotalv =_hardBnbTotalv.mul(10**18);\r\n\r\n        openPreSale = openV;\r\n        _prerrate=_prerratev;\r\n        _saleTokenTotal= _saleTokenTotalv;\r\n\r\n        _softBnbTotal=_softBnbTotalv;\r\n        _hardBnbTotal= _hardBnbTotalv;\r\n        _minLimit= _minLimitv;\r\n        _maxLimit=_maxLimitv;\r\n\r\n    }\r\n\r\n    function preSale() public payable returns(uint256 ) {\r\n        require(openPreSale,\" presale not opened yet\");\r\n\t\trequire(msg.value >= _minLimit,\"Minimum  0.3BNB\");\r\n\t\trequire(msg.value <= _maxLimit,\"Maxmum  3BNB\");\r\n\t\trequire((_saleBnbTotal+(msg.value)) < _hardBnbTotal,\"Out of stock\");\r\n\r\n\t\tuint256 getToken =(msg.value * _prerrate).div(10**18) ;\r\n\t\t_balances[owner]=_balances[owner].sub(getToken,\"Insufficient Balance\");\r\n\t\t_balances[msg.sender]=_balances[msg.sender].add(getToken);\r\n\t\t_saleBnbTotal=_saleBnbTotal.add(msg.value);\r\n        return getToken;\r\n    }\r\n\r\n\r\n    function getPreSaleInfo() public view returns (uint256,uint256,uint256,uint256,uint256,uint256,uint256 ){\r\n        return ( _prerrate,\r\n\t\t _saleTokenTotal,\r\n\t\t_saleBnbTotal,\r\n\t\t_softBnbTotal,\r\n\t\t_hardBnbTotal,\r\n\t\t_minLimit,\r\n\t\t_maxLimit);\r\n    }\r\n\r\n\r\n    function toBurn(uint256 realBurnAmount) private{\r\n\r\n        uint256  newTotaoSupply =_totalSupply;\r\n        newTotaoSupply =  newTotaoSupply.sub(realBurnAmount);\r\n        if(newTotaoSupply>finalSupply){\r\n            burnTotal=burnTotal.add(realBurnAmount);\r\n\r\n            _totalSupply=newTotaoSupply;\r\n        }else{\r\n            burnTotal=burnTotal.add(_totalSupply-finalSupply);\r\n            _totalSupply = finalSupply;\r\n            needBurn =false;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function getBuyFees() public view returns( uint256 , uint256 , uint256 ,uint256 ,uint256) {\r\n\r\n        return  (buyFees.reflectionFee,buyFees.marketingFee,buyFees.liquidityFee,buyFees.burnFee,buyFees.totalFee);\r\n    }\r\n    function getSellFees() public view returns( uint256 , uint256 , uint256 ,uint256 ,uint256) {\r\n\r\n        return  (sellFees.reflectionFee,sellFees.marketingFee,sellFees.liquidityFee,sellFees.burnFee,sellFees.totalFee);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        if(isFeeExempt[sender] || isFeeExempt[recipient])\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n\r\n    function _distributeFee(address sender, address recipient, uint256 amount) internal  {\r\n        uint256 finalFee = sender == pair ? buyFees.totalFee : sellFees.totalFee;\r\n\r\n        uint256 _tburn = 0;\r\n        uint256 amountReceived =0;\r\n        FeeSet memory _feeRate = sender == pair ? buyFees : sellFees;\r\n        bool showTf = shouldTakeFee(sender, recipient);\r\n        uint256 cureBalance = _balances[sender];\r\n\r\n        uint256 surplus = cureBalance.sub(amount);\r\n\r\n\r\n        if(surplus < _maxSellTxAmountL){\r\n            require(amount>_maxSellTxAmountL,\"Exceeding or below the minimum sales value\");\r\n            amount =amount.sub(_maxSellTxAmountL);\r\n        }\r\n\r\n        if(sender !=owner){\r\n            _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n            if(\r\n                launchAt + timeBeforeFirstBuy >= block.timestamp\r\n            ){\r\n\r\n                uint256 feeAmount=0;\r\n                finalFee = feeDenominator.sub(1);\r\n                feeAmount =amount.mul(finalFee).div(feeDenominator);\r\n                _tburn = feeAmount.mul(_feeRate.burnFee).div(100);\r\n                _balances[marketingFeeReceiver] = _balances[marketingFeeReceiver].add(feeAmount).sub(_tburn);\r\n                emit Transfer(sender, marketingFeeReceiver, feeAmount-_tburn);\r\n\r\n                _balances[recipient] = _balances[recipient].add(amount.sub(feeAmount));\r\n                emit Transfer(sender, recipient, feeAmount);\r\n\r\n            }\r\n            else{\r\n\r\n                if(showTf){\r\n                    _tburn = amount.mul(_feeRate.burnFee).div(100);\r\n                    uint256 _marketingFee = amount.mul(_feeRate.marketingFee).div(100);\r\n                    _balances[marketingFeeReceiver] = _balances[marketingFeeReceiver].add(_marketingFee);\r\n                    emit Transfer(sender, marketingFeeReceiver,_marketingFee);\r\n                    amountReceived=  amount.sub(_marketingFee).sub(_tburn) ;\r\n                    _balances[recipient] = _balances[recipient].add(amountReceived);\r\n                    emit Transfer(sender, recipient, amountReceived);\r\n                }else{\r\n                      _balances[recipient] = _balances[recipient].add(amount);\r\n                     emit Transfer(sender, recipient, amount);\r\n\r\n                }\r\n            }\r\n        }else{\r\n\r\n            _basicTransfer(sender, recipient, amount);\r\n        }\r\n        if(_tburn > 0 && needBurn && showTf){\r\n            toBurn(_tburn);\r\n        }\r\n\r\n    }\r\n\r\n    function  getGUocheng() public view returns(uint256 ,uint256,bool){}\r\n\r\n\r\n\r\n    function setBuyFees(uint256 _reflectionFee, uint256 _marketingFee, uint256 _liquidityFee,uint256 _burnFee) public authorized {\r\n\t\tbuyFees = FeeSet({\r\n\t\t\treflectionFee: _reflectionFee,\r\n\t\t\tmarketingFee: _marketingFee,\r\n\t\t\tliquidityFee: _liquidityFee,\r\n\t\t\tburnFee: _burnFee,\r\n\t\t\ttotalFee: _reflectionFee + _marketingFee + _liquidityFee+_burnFee\r\n\t\t});\r\n\t\trequire(buyFees.totalFee < feeDenominator / 4);\r\n\t}\r\n\r\n\r\n\tfunction setSellFees(uint256 _reflectionFee, uint256 _marketingFee, uint256 _liquidityFee,uint256 _burnFee) public authorized {\r\n\t\tsellFees = FeeSet({\r\n\t\t\treflectionFee: _reflectionFee,\r\n\t\t\tmarketingFee: _marketingFee,\r\n\t\t\tliquidityFee: _liquidityFee,\r\n\t\t\tburnFee: _burnFee,\r\n\t\t\ttotalFee: _reflectionFee + _marketingFee + _liquidityFee+_burnFee\r\n\t\t});\r\n\t\trequire(sellFees.totalFee < feeDenominator / 4);\r\n\t}\r\n\r\n    function clearStuckBalance(uint256 amountPercentage) external onlyOwner {\r\n        uint256 amountBNB = address(this).balance;\r\n        payable(marketingFeeReceiver).transfer(amountBNB * amountPercentage / 100);\r\n    }\r\n\r\n    function setTxLimit(uint256 amount,uint256 maxSellTx) external authorized {\r\n        _maxTxAmount = amount;\r\n\r\n        if(maxSellTx<=0){\r\n            maxSellTx=100;\r\n        }\r\n        _maxSellTxAmountL = maxSellTx * (10 ** _decimals);\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external authorized {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setFeeReceivers(address _autoLiquidityReceiver, address _marketingFeeReceiver) external onlyOwner {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n    }\r\n\r\n    function updateLaunchTime(uint256 time) external onlyOwner{\r\n        launchAt = time;\r\n    }\r\n\r\n    function setIsBlacklisted(address adr, bool blacklisted) external authorized {\r\n        isBlacklisted[adr] = blacklisted;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"PmarketingAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxSellTxAmountL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSellTxAmountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"openV\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_saleTokenTotalv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softBnbTotalv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardBnbTotalv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLimitv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLimitv\",\"type\":\"uint256\"}],\"name\":\"_setPreSaleInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGUocheng\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreSaleInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"setIsBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSellTx\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"updateLaunchTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NPCTOKEN", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dd1a79e6538dc5c5a361c25eba56a057475a9281", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b35f0bfd149348eecc1f3a64182e33940a70a7b19e397b1a525dce5d034be5c5"}