{"SourceCode": "{\"Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\ncontract Context {\\r\\n  \\r\\n    constructor () internal { }\\r\\n\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport { Context } from \\\"./Context.sol\\\" ;\\r\\n\\r\\ncontract Ownable is Context {\\r\\n\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isOwner() private view returns (bool) {\\r\\n        return _msgSender() == _owner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() private onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.5.8;\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"WIKI.sol\":{\"content\":\"pragma solidity ^0.5.0;\\r\\n\\r\\nimport { Ownable } from \\\"./Ownable.sol\\\" ;\\r\\nimport \\\"./SafeMath.sol\\\" ;\\r\\n\\r\\ncontract WiKi is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // ERC20\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint256 private _decimals;\\r\\n    uint256 private _totalSupply;\\r\\n    mapping (address =\\u003e uint256) private balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private allowances;\\r\\n\\r\\n    // TransferBurn\\r\\n    mapping(address =\\u003e bool)  private pancakePairAddress;\\r\\n    uint256 private tradeFeeTotal;\\r\\n\\r\\n    uint256 public holdTotalCount;\\r\\n    mapping(uint256 =\\u003e address) public holdAddress;\\r\\n\\r\\n    // Events\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\r\\n    event TradeFee(address indexed _fromAddress, uint256 _fee);\\r\\n    event PancakePairAddress(address indexed _sender, address indexed _pancakePairAddress,bool _value);\\r\\n    event HoldTotalCount(address indexed _sender, uint256 _holdTotalCount, address _holdAddress);\\r\\n\\r\\n    // ================= Initial value ===============\\r\\n\\r\\n    constructor (address _initial_account) public {\\r\\n        _name = \\\"WiKi infinity\\\";\\r\\n        _symbol = \\\"WiKi\\\";\\r\\n        _decimals = 18;\\r\\n        _totalSupply = 31000000000000000000000000;// 31000000.mul(10 ** uint256(18));\\r\\n        balances[_initial_account] = _totalSupply;\\r\\n        emit Transfer(address(0), _initial_account, _totalSupply);\\r\\n    }\\r\\n\\r\\n    // ================= Special transfer ===============\\r\\n\\r\\n    function _transfer(address _sender, address _recipient, uint256 _amount) internal {\\r\\n        require(_amount \\u003c= balances[_sender],\\\"Transfer: insufficient balance of from address\\\");\\r\\n\\r\\n        if(pancakePairAddressOf(_recipient)){\\r\\n            require(_amount.add(_amount.mul(15).div(100)) \\u003c= balances[_sender],\\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\r\\n            balances[_sender] -= _amount.add(_amount.mul(15).div(100));// sell ==\\u003e  user 115%\\r\\n            balances[_recipient] += _amount;// pancakePair 100%\\r\\n            emit Transfer(_sender, _recipient, _amount);\\r\\n\\r\\n            balances[address(0)] += _amount.mul(5).div(100);\\r\\n            emit Transfer(_sender,address(0),_amount.mul(5).div(100));\\r\\n\\r\\n            _toHoldList(_sender,_amount.mul(10).div(100));\\r\\n\\r\\n            tradeFeeTotal += _amount.mul(15).div(100);\\r\\n            emit TradeFee(_sender, _amount.mul(15).div(100));// add trade fee log\\r\\n        }else{\\r\\n            balances[_sender] -= _amount;\\r\\n            balances[_recipient] += _amount;\\r\\n            emit Transfer(_sender, _recipient, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _toHoldList(address _sender, uint256 _holdAmount) internal {\\r\\n        for(uint256 i = 1;i\\u003c= holdTotalCount; i++){\\r\\n            balances[holdAddress[i]] += _holdAmount.div(holdTotalCount);\\r\\n            emit Transfer(_sender, holdAddress[i], _holdAmount.div(holdTotalCount));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ================= ERC20 Basic Write ===============\\r\\n\\r\\n    function approve(address _spender, uint256 _amount) public returns (bool) {\\r\\n        _approve(_msgSender(), _spender, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address _owner, address _spender, uint256 _amount) internal {\\r\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(_spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        allowances[_owner][_spender] = _amount;\\r\\n        emit Approval(_owner, _spender, _amount);\\r\\n    }\\r\\n\\r\\n    function transfer(address _recipient, uint256 _amount) public returns (bool) {\\r\\n        _transfer(_msgSender(), _recipient, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public returns (bool) {\\r\\n        _transfer(_sender, _recipient, _amount);\\r\\n        _approve(_sender, _msgSender(), allowances[_sender][_msgSender()].sub(_amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ================= White list ===============\\r\\n\\r\\n    function addHoldAddress(address _holdAddress) public onlyOwner returns (bool) {\\r\\n        require(holdTotalCount \\u003c 21, \\\"-\\u003e holdTotalCount: The maximum number of additions has been reached.\\\");\\r\\n        holdTotalCount += 1;\\r\\n        holdAddress[holdTotalCount] = _holdAddress;\\r\\n        emit HoldTotalCount(msg.sender, holdTotalCount, _holdAddress);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function addPancakePairAddress(address _pancakePairAddress,bool _value) public onlyOwner returns (bool) {\\r\\n        pancakePairAddress[_pancakePairAddress] = _value;\\r\\n        emit PancakePairAddress(msg.sender, _pancakePairAddress, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function pancakePairAddressOf(address _pancakePairAddress) public view returns (bool) {\\r\\n        return pancakePairAddress[_pancakePairAddress];\\r\\n    }\\r\\n\\r\\n    function getTradeFeeTotal() public view returns (uint256) {\\r\\n        return tradeFeeTotal;\\r\\n    }\\r\\n\\r\\n    // ================= ERC20 Basic Query ===============\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint256) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address _owner) public view returns (uint256) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\r\\n        return allowances[_owner][_spender];\\r\\n    }\\r\\n\\r\\n}\\r\\n\"}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdTotalCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTradeFeeTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holdAddress\",\"type\":\"address\"}],\"name\":\"addHoldAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holdAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pancakePairAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"addPancakePairAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pancakePairAddress\",\"type\":\"address\"}],\"name\":\"pancakePairAddressOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initial_account\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"TradeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_pancakePairAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"PancakePairAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_holdTotalCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_holdAddress\",\"type\":\"address\"}],\"name\":\"HoldTotalCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "WiKi", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000017f15ff0d951b9c954e633c3e38cffe3c8c979e6", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://df685f0cddfef17f8209a6e9fc1d27ca5f9bb57bee10899fc04241598197a47e"}