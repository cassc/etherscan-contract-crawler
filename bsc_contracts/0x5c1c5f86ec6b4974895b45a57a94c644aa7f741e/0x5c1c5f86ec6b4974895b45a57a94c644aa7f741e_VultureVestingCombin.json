{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/Controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controller is Ownable {\\n    mapping(address => bool) public adminList;\\n\\n    function setAdmin(address user_, bool status_) public onlyOwner {\\n        adminList[user_] = status_;\\n    }\\n\\n    modifier onlyAdmin(){\\n        require(adminList[msg.sender], \\\"Controller: Msg sender is not the admin\\\");\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ILaunchPad.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface ILaunchPad{\\r\\n    // func getProjectInfo\\r\\n    function projectToLaunchpads(string memory)external  view returns (\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        uint256 entryPrice,\\r\\n        uint256 minAllocation,\\r\\n        uint256 maxAllocation,\\r\\n        uint256 initialPrice,\\r\\n        address depositFundAddress,\\r\\n        uint256 hardcap,\\r\\n        uint256 totalDeposited,\\r\\n        address depositCurrency);\\r\\n    function projectDeposits(string memory,address) external view returns(\\r\\n        uint256 depositedTime,\\r\\n        uint256 depositedAmount,\\r\\n        uint256 claimableAmount\\r\\n    );\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IRefunder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n\\r\\n\\r\\ninterface IRefunder{\\r\\n\\r\\n    function userRefundedAmountsUSD(address,string memory) external view returns(uint256);\\r\\n    function userRefundedAmountsToken(address,string memory) external view returns(uint256);\\r\\n    function ProjectRefundedTotal(string memory) external view returns(uint256);\\r\\n    \\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n\\r\\n\\r\\ninterface IVesting{\\r\\n    function allocations(string memory, address) external view returns(uint256 allocated, uint256 claimed);\\r\\n    function allocate(string memory _pool_id, address wallet,uint256 amount)external;\\r\\n    function projectClaimedTotal(string memory) external view returns(uint256);\\r\\n    function projectClaimedTotalByUser(string memory,address) external view returns(uint256);\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/launchpad/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n\\r\\nimport \\\"../access/Controller.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../interfaces/ILaunchPad.sol\\\";\\r\\nimport \\\"../interfaces/IRefunder.sol\\\";\\r\\nimport \\\"../interfaces/IVesting.sol\\\";\\r\\nenum VESTING_TYPE {\\r\\n    FLEXIBLE,\\r\\n    LINEAR\\r\\n}\\r\\nstruct PoolInfo{\\r\\n    VESTING_TYPE poolType;\\r\\n    address token;\\r\\n    string project_id;\\r\\n    uint256 totalLocked;\\r\\n    uint256 totalClaimed;\\r\\n    address distributionAddress;\\r\\n}\\r\\n\\r\\nstruct LinearPoolDetails{\\r\\n    uint256  firstReleaseRatio;\\r\\n    uint256  unlockTime;\\r\\n    uint256  startReleaseTimestamp;\\r\\n    uint256  endReleaseTimestamp;\\r\\n}\\r\\nstruct FlexiblePoolDetails{\\r\\n    uint256[] claimDates;\\r\\n    uint256[] claimPercents;\\r\\n}\\r\\n\\r\\nstruct Allocation{\\r\\n    uint256 allocated;\\r\\n    uint256 claimed;\\r\\n}\\r\\nerror poolAlreadyExist();\\r\\nerror invalidTokenAddress();\\r\\nerror invalidStartTime();\\r\\nerror invalidEndTime();\\r\\nerror invalidUnlockTime();\\r\\nerror invalidReleaseRatio();\\r\\nerror poolNotFlexible();\\r\\nerror poolNotLinear();\\r\\nerror zeroClaimable();\\r\\nerror refunded();\\r\\nerror PoolNotSafeToDelete();\\r\\nerror notTreasury();\\r\\nerror amountMustBeZeorOrGreaterThanClaimed();\\r\\nerror PoolDoesntExist();\\r\\nerror mismatchClaimLengths();\\r\\ncontract VultureVestingCombined is IVesting,Controller,ReentrancyGuard{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    mapping(string=>PoolInfo)public Pools ;\\r\\n    mapping(string=>LinearPoolDetails)internal linearPoolDetails;\\r\\n    mapping(string=>FlexiblePoolDetails)internal felxiblePoolDetails;\\r\\n    mapping(string=> bool)public NotSafeDelete;\\r\\n    mapping(string=>mapping(address => Allocation))public allocations;\\r\\n    mapping(string => uint256) public projectClaimedTotal;\\r\\n    mapping(string=>mapping(address=>uint256)) public projectClaimedTotalByUser;\\r\\n    uint256 public percision = 1e18;\\r\\n    IRefunder public Refunder;\\r\\n    constructor(address owner){\\r\\n        adminList[msg.sender] = true;\\r\\n        adminList[owner]  = true;\\r\\n        transferOwnership(owner);\\r\\n    }\\r\\n    event PoolCreated(string indexed pool_id);\\r\\n    function createLinearVesting(\\r\\n        string calldata _project_id,\\r\\n        string calldata _pool_id,\\r\\n        address _token,\\r\\n        uint256  _firstReleaseRatio,\\r\\n        uint256  _unlockTime,\\r\\n        uint256  _startReleaseTimestamp,\\r\\n        uint256  _endReleaseTimestamp,\\r\\n        address distributionAddress) external isNewPool(_pool_id) onlyAdmin {\\r\\n            if(_token == address(0)){\\r\\n                revert invalidTokenAddress();\\r\\n            }\\r\\n            if(_unlockTime < block.timestamp){\\r\\n                revert invalidUnlockTime();\\r\\n            }\\r\\n            if(_startReleaseTimestamp < _unlockTime){\\r\\n                revert invalidStartTime();\\r\\n            }\\r\\n            if(_endReleaseTimestamp < _startReleaseTimestamp){\\r\\n                revert invalidEndTime();\\r\\n            }\\r\\n            if(_firstReleaseRatio >= 100 *1e18){\\r\\n                revert invalidReleaseRatio();\\r\\n            }\\r\\n            Pools[_pool_id] = PoolInfo(\\r\\n                VESTING_TYPE.LINEAR,\\r\\n                _token,\\r\\n                _project_id,\\r\\n                0,\\r\\n                0,\\r\\n                distributionAddress\\r\\n            );\\r\\n            linearPoolDetails[_pool_id] = LinearPoolDetails(\\r\\n                _firstReleaseRatio,\\r\\n                _unlockTime,\\r\\n                _startReleaseTimestamp,\\r\\n                _endReleaseTimestamp\\r\\n                \\r\\n            );\\r\\n            emit PoolCreated(_pool_id);\\r\\n    }\\r\\n\\r\\n    function createFlexibleVesting(\\r\\n        string calldata _project_id,\\r\\n        string calldata _pool_id,\\r\\n        address _token, \\r\\n        uint256[] calldata _claimDates,\\r\\n        uint256[] calldata _claimPercents,\\r\\n        address distributionAddress) external isNewPool(_pool_id) onlyAdmin{\\r\\n            if(_token == address(0)){\\r\\n                revert invalidTokenAddress();\\r\\n            }\\r\\n            if(_claimDates.length !=_claimPercents.length){\\r\\n                revert mismatchClaimLengths();\\r\\n            }\\r\\n            Pools[_pool_id] = PoolInfo(\\r\\n                VESTING_TYPE.FLEXIBLE,\\r\\n                _token,\\r\\n                _project_id,\\r\\n                0,\\r\\n                0,\\r\\n                distributionAddress\\r\\n            );\\r\\n            felxiblePoolDetails[_pool_id] = FlexiblePoolDetails(\\r\\n                _claimDates,\\r\\n                _claimPercents\\r\\n            );\\r\\n            emit PoolCreated(_pool_id);\\r\\n    }\\r\\n\\r\\n    function claim(string calldata _pool_id) external poolExist(_pool_id) {\\r\\n        if(!NotSafeDelete[_pool_id]){\\r\\n            NotSafeDelete[_pool_id] = true;\\r\\n        }\\r\\n        PoolInfo storage p =Pools[_pool_id];\\r\\n        Allocation storage a = allocations[_pool_id][msg.sender];\\r\\n        uint256 refundedAmount;\\r\\n        if(address(Refunder) != address(0)){\\r\\n            refundedAmount = Refunder.userRefundedAmountsToken(msg.sender,p.project_id);\\r\\n        }\\r\\n        uint256 amountUnlocked;\\r\\n        uint256 amountClaimed;\\r\\n        if(refundedAmount > 0){\\r\\n            revert refunded();\\r\\n        }\\r\\n        if(a.allocated == a.claimed){\\r\\n            revert zeroClaimable();\\r\\n        }\\r\\n        if(p.poolType ==VESTING_TYPE.FLEXIBLE){\\r\\n            ( amountUnlocked, amountClaimed) = calculateAmountUnlockedAndClaimedFlexible(msg.sender,_pool_id);\\r\\n        }\\r\\n        else{\\r\\n            (amountUnlocked,amountClaimed) = calculateAmountUnlockedAndClaimedLinear(msg.sender,_pool_id);         \\r\\n        }\\r\\n        if(amountUnlocked <= amountClaimed){\\r\\n            revert zeroClaimable();\\r\\n        }\\r\\n        uint256 totalClaimable = amountUnlocked - amountClaimed; \\r\\n        IERC20(p.token).safeTransfer(msg.sender,totalClaimable);\\r\\n        p.totalClaimed +=totalClaimable;\\r\\n        a.claimed  +=totalClaimable;\\r\\n        projectClaimedTotal[p.project_id] +=totalClaimable;\\r\\n        projectClaimedTotalByUser[p.project_id][msg.sender]+=totalClaimable;\\r\\n    }\\r\\n\\r\\n    function allocate(string calldata _pool_id, address wallet,uint256 amount)external  poolExist(_pool_id) onlyAdmin{\\r\\n        Allocation storage a = allocations[_pool_id][wallet];\\r\\n        PoolInfo storage p = Pools[_pool_id];\\r\\n        uint256 refundedAmount;\\r\\n        if(address(Refunder) != address(0)){\\r\\n            refundedAmount = Refunder.userRefundedAmountsToken(wallet,p.project_id);\\r\\n        }\\r\\n        if(refundedAmount > 0){\\r\\n            p.totalLocked -= a.allocated - a.claimed;\\r\\n            IERC20(p.token).safeTransfer(\\r\\n                p.distributionAddress,\\r\\n                a.allocated - a.claimed);\\r\\n                 a.allocated = a.claimed;\\r\\n        }\\r\\n        else if(amount >a.allocated){\\r\\n            p.totalLocked += amount - a.allocated;\\r\\n            IERC20(p.token).safeTransferFrom(\\r\\n                p.distributionAddress,\\r\\n                address(this),\\r\\n                amount - a.allocated);\\r\\n                a.allocated = amount;\\r\\n        }\\r\\n        else if(amount == 0){\\r\\n            p.totalLocked -= a.allocated - a.claimed;\\r\\n            IERC20(p.token).safeTransfer(\\r\\n                p.distributionAddress,\\r\\n                a.allocated - a.claimed);\\r\\n            a.allocated = a.claimed;\\r\\n        }\\r\\n        else{\\r\\n            revert amountMustBeZeorOrGreaterThanClaimed();    \\r\\n        }\\r\\n    }\\r\\n    function allocateBatch(string calldata _pool_id,address[] calldata wallets, uint256[] calldata amounts) external  poolExist(_pool_id)  onlyAdmin{\\r\\n        PoolInfo storage p = Pools[_pool_id];\\r\\n        uint256 transferHere;\\r\\n        uint256 transferToDistribution;\\r\\n        for(uint256 i; i<wallets.length;i++){\\r\\n            Allocation storage a = allocations[_pool_id][wallets[i]];\\r\\n            uint256 refundedAmount;\\r\\n            if(address(Refunder) != address(0)){\\r\\n                refundedAmount = Refunder.userRefundedAmountsToken(wallets[i],p.project_id);\\r\\n            }\\r\\n            if(refundedAmount >0){\\r\\n                p.totalLocked -= a.allocated - a.claimed;\\r\\n                transferToDistribution += a.allocated - a.claimed;\\r\\n                a.allocated = a.claimed;\\r\\n            }\\r\\n            else if(amounts[i] > a.allocated){\\r\\n                p.totalLocked += amounts[i] - a.allocated;\\r\\n                transferHere += amounts[i] - a.allocated;\\r\\n                a.allocated = amounts[i];\\r\\n            }\\r\\n            else if(amounts[i] == 0){\\r\\n                p.totalLocked -= a.allocated - a.claimed;\\r\\n                transferToDistribution += a.allocated - a.claimed;\\r\\n                a.allocated  = a.claimed;\\r\\n            }\\r\\n            else{\\r\\n                revert amountMustBeZeorOrGreaterThanClaimed();    \\r\\n            }\\r\\n        }  \\r\\n        if(transferHere > transferToDistribution){\\r\\n            IERC20(p.token).safeTransferFrom(\\r\\n            p.distributionAddress,\\r\\n            address(this),\\r\\n            transferHere - transferToDistribution);\\r\\n        }\\r\\n        else if(transferToDistribution > transferHere){\\r\\n            IERC20(p.token).safeTransfer(\\r\\n                p.distributionAddress,\\r\\n                transferToDistribution -transferHere\\r\\n            );\\r\\n        } \\r\\n    }\\r\\n    \\r\\n    function calculateAmountUnlockedAndClaimedFlexible(address wallet,string calldata _pool_id)public  poolExist(_pool_id) view returns(uint256,uint256){\\r\\n        // check refunsd status and calculate claimable\\r\\n        PoolInfo storage p =Pools[_pool_id];\\r\\n        Allocation storage a = allocations[_pool_id][wallet];\\r\\n        uint256 refundedAmount;\\r\\n        if(address(Refunder) != address(0)){\\r\\n            refundedAmount = Refunder.userRefundedAmountsToken(wallet,p.project_id);\\r\\n        }      \\r\\n        if(refundedAmount > 0){\\r\\n            return(0,a.claimed);\\r\\n        }\\r\\n        if(p.poolType != VESTING_TYPE.FLEXIBLE){\\r\\n            revert poolNotFlexible();\\r\\n        }\\r\\n        FlexiblePoolDetails storage f = felxiblePoolDetails[_pool_id];\\r\\n            if (block.timestamp < f.claimDates[0]) {\\r\\n                return (0, 0);\\r\\n            }\\r\\n            for (uint256 i = 1; i < f.claimDates.length; i++) {\\r\\n                if (block.timestamp > f.claimDates[i - 1] &&block.timestamp < f.claimDates[i]) {\\r\\n                    uint claimable =  (f.claimPercents[i - 1] * (a.allocated)/(100 * percision));\\r\\n                    return (\\r\\n                        claimable,\\r\\n                        a.claimed\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n            return (a.allocated, a.claimed);\\r\\n    }\\r\\n\\r\\n    function calculateAmountUnlockedAndClaimedLinear(address wallet,string calldata _pool_id)public  poolExist(_pool_id) view returns(uint256,uint256){\\r\\n        PoolInfo storage p =Pools[_pool_id];\\r\\n        Allocation storage a = allocations[_pool_id][wallet];\\r\\n        uint256 refundedAmount;\\r\\n        if(address(Refunder) != address(0)){\\r\\n            refundedAmount = Refunder.userRefundedAmountsToken(wallet,p.project_id);\\r\\n        }\\r\\n        uint256 UnlockedAmount = 0;\\r\\n        if(refundedAmount > 0){\\r\\n            return(0,a.claimed);\\r\\n        }\\r\\n        if(p.poolType != VESTING_TYPE.LINEAR){\\r\\n            revert poolNotLinear();\\r\\n        }\\r\\n        LinearPoolDetails memory l = linearPoolDetails[_pool_id];\\r\\n        if (block.timestamp < l.unlockTime) {\\r\\n           return(0,a.claimed);\\r\\n        } \\r\\n        else if(block.timestamp >= l.unlockTime && block.timestamp < l.startReleaseTimestamp) {\\r\\n            UnlockedAmount = a.allocated * l.firstReleaseRatio /(100 * percision);\\r\\n            return(UnlockedAmount,a.claimed);\\r\\n        } \\r\\n        else if (block.timestamp >= l.endReleaseTimestamp){\\r\\n            UnlockedAmount = a.allocated;\\r\\n            return (UnlockedAmount,a.claimed);\\r\\n        }\\r\\n        else  {\\r\\n            UnlockedAmount = a.allocated;\\r\\n            uint256 releasedTime = block.timestamp - l.startReleaseTimestamp;\\r\\n            uint256 totalVestingTime = l.endReleaseTimestamp - l.startReleaseTimestamp;\\r\\n            uint256 firstUnlockAmount =  a.allocated *l.firstReleaseRatio/(100 * percision);\\r\\n            uint256 totalLinearUnlockAmount =  a.allocated - firstUnlockAmount;\\r\\n            uint256 linearUnlockAmount = totalLinearUnlockAmount *releasedTime / totalVestingTime;\\r\\n            UnlockedAmount = firstUnlockAmount+linearUnlockAmount;\\r\\n            return (UnlockedAmount,a.claimed);\\r\\n        }     \\r\\n    }\\r\\n    function getFlexiblePoolDetails(string calldata pool_id)external poolExist(pool_id) view returns(uint256[] memory claimDates,uint256[] memory claimPercents){\\r\\n        PoolInfo storage p = Pools[pool_id];\\r\\n        if(p.poolType != VESTING_TYPE.FLEXIBLE){\\r\\n            revert poolNotFlexible();\\r\\n        }\\r\\n        FlexiblePoolDetails storage f = felxiblePoolDetails[pool_id];\\r\\n        claimDates = f.claimDates;\\r\\n        claimPercents = f.claimPercents;\\r\\n    }\\r\\n    function getLinearPoolDetails(string calldata pool_id)external poolExist(pool_id) view returns(LinearPoolDetails memory){\\r\\n        PoolInfo storage p = Pools[pool_id];\\r\\n        if(p.poolType != VESTING_TYPE.LINEAR){\\r\\n            revert poolNotLinear();\\r\\n        }\\r\\n        return linearPoolDetails[pool_id];\\r\\n    } \\r\\n    modifier isNewPool(string calldata _poolId){\\r\\n        if(Pools[_poolId].token != address(0)){\\r\\n            revert poolAlreadyExist();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n    modifier poolExist(string memory pool_id){\\r\\n        if(Pools[pool_id].token == address(0)){\\r\\n            revert PoolDoesntExist();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n    function closePool(string calldata _pool_id) external onlyAdmin{\\r\\n        if(NotSafeDelete[_pool_id]){\\r\\n            revert PoolNotSafeToDelete();\\r\\n        }\\r\\n        PoolInfo storage p = Pools[_pool_id];\\r\\n        if(p.poolType == VESTING_TYPE.FLEXIBLE){\\r\\n            delete felxiblePoolDetails[_pool_id];\\r\\n        }\\r\\n        else{\\r\\n            delete linearPoolDetails[_pool_id];\\r\\n        }\\r\\n        IERC20(p.token).safeTransfer(p.distributionAddress,p.totalLocked);\\r\\n        delete Pools[_pool_id];\\r\\n    }\\r\\n    function setRefunder(IRefunder refunder_) external onlyOwner{\\r\\n        Refunder = refunder_;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PoolDoesntExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolNotSafeToDelete\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"amountMustBeZeorOrGreaterThanClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidEndTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidReleaseRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidUnlockTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"mismatchClaimLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"poolAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"poolNotFlexible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"poolNotLinear\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"refunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"zeroClaimable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"pool_id\",\"type\":\"string\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"NotSafeDelete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"Pools\",\"outputs\":[{\"internalType\":\"enum VESTING_TYPE\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"project_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"distributionAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Refunder\",\"outputs\":[{\"internalType\":\"contract IRefunder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pool_id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pool_id\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"allocateBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_pool_id\",\"type\":\"string\"}],\"name\":\"calculateAmountUnlockedAndClaimedFlexible\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_pool_id\",\"type\":\"string\"}],\"name\":\"calculateAmountUnlockedAndClaimedLinear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pool_id\",\"type\":\"string\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pool_id\",\"type\":\"string\"}],\"name\":\"closePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_project_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pool_id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimDates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimPercents\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"distributionAddress\",\"type\":\"address\"}],\"name\":\"createFlexibleVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_project_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_pool_id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_firstReleaseRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startReleaseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endReleaseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"distributionAddress\",\"type\":\"address\"}],\"name\":\"createLinearVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pool_id\",\"type\":\"string\"}],\"name\":\"getFlexiblePoolDetails\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"claimDates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimPercents\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pool_id\",\"type\":\"string\"}],\"name\":\"getLinearPoolDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"firstReleaseRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startReleaseTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endReleaseTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct LinearPoolDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"projectClaimedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectClaimedTotalByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRefunder\",\"name\":\"refunder_\",\"type\":\"address\"}],\"name\":\"setRefunder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VultureVestingCombined", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000fb6440e60a82b91d1204ab0181381be76f54a155", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}