{"SourceCode": "//SPDX-License-Identifier: Unlicensed\r\n/* Interface Declaration */\r\npragma solidity ^0.6.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n*/\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     \r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n\r\n    address internal _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract Initializable {\r\n    bool inited = false;\r\n    modifier initializer() {\r\n        require(!inited, \"tokenomics already inited\");\r\n        _;\r\n        inited = true;\r\n    }\r\n    bool ownerinited = false;\r\n    modifier ownerinitializer() {\r\n        require(!ownerinited, \"manager already inited\");\r\n        _;\r\n        ownerinited = true;\r\n    }\r\n}\r\n\r\n\r\ncontract INDIANCOIN is Context, IERC20, Ownable,Initializable {   \r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => uint) private UserLastSellTimeStamp;\r\n    mapping (address => uint256) private myRewards;\r\n    uint256 public _maxAntiWhaleLimits;\r\n    uint256 public _minAntiWhaleLimits;\r\n    uint256 public _maxTransactionLimits;\r\n    uint256 public _minTransactionLimits;\r\n    address [] public tokenHolder;\r\n    mapping(address => bool) private exist;\r\n    mapping (address => bool) public checkUserBlocked;\r\n\r\n    //No limit\r\n    address payable public marketingwallet;\r\n    IPancakeRouter02 public pancakeRouter;\r\n    address public pancakePair;\r\n    bool inSwapAndLiquify;\r\n\r\n    uint256 private _tTotal;\r\n    uint256 private _tFeeTotal;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\t\r\n\tuint256 public _sellTaxFee;\r\n    uint256 public _buyTaxFee;\r\n\r\n    uint256 private _previousSellTaxFee;\r\n    uint256 private _previousBuyTaxFee;\r\n\r\n    uint256 private _LiquidityBuyPer;\r\n    uint256 private _LiquiditySellPer;\r\n    \r\n    uint256 public _marketingBuyPer;\r\n    uint256 public _marketingSellPer;\r\n\r\n    uint256 private _RewardBuyPer;\r\n    uint256 private _RewardSellPer;\r\n\r\n    uint256 private _autoBurnBuyPer;\r\n    uint256 private _autoBurnSellPer;\r\n\t\r\n\tbool private paused = false;\r\n\t\r\n\tbool public swapAndLiquifyEnabled = false;\r\n    uint256 private minTokensBeforeSwap;\r\n\t\r\n\tuint256 private _totalBurnt;\r\n    uint256 private _totalRewardCollected; \r\n    uint256 private _totalLiquidityCollected;\r\n    uint256 private _totalMarketingCollected;\r\n   \r\n\r\n    struct UserTransferLogDetails {\r\n        uint transferLimits;\r\n        uint transfered;\r\n    }\r\n\r\n    mapping (address => UserTransferLogDetails) public _UserTransferLogDetails;\r\n\r\n    uint256 public numberOfTokenHolders;\r\n\r\n    event UpdateBuyFee();\r\n    event UpdateSellFee();\r\n    event UpdateExcludedFromFee();\r\n    event UpdateIncludeForFee();\r\n    event UpdateLiquidityPer();\r\n    event UpdateBurnPer();\r\n    event UpdateMarketingPer();\r\n    event UpdateRewardPer();\r\n    event BlockWalletAddress();\r\n    event UnblockWalletAddress();\r\n    event Pause();\r\n    event Unpause();\r\n    event UpdateMarketingWalletAddress();\r\n    event UpdateTransactionLimits();\r\n    event SetSellTimeInterval();\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived,uint256 tokensIntoMarketing,uint256 tokensIntoLiquidity);   \r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n         _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    function setContractManager() external ownerinitializer\r\n    {\r\n        address msgSender = _msgSender();\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n\r\n    /* Contarct Owner Can Update The Minimum & Maximum Transaction Limits */\r\n    function update_AntiWhaleLimits(uint256 maxAntiWhaleLimits,uint256 minAntiWhaleLimits) public onlyOwner {\r\n       _maxAntiWhaleLimits=maxAntiWhaleLimits;\r\n       _minAntiWhaleLimits=minAntiWhaleLimits;\r\n       emit UpdateTransactionLimits();\r\n    }\r\n\r\n      function _verifyMaxTransactionLimits(uint256 maxTransactionLimits) public onlyOwner {\r\n        _maxTransactionLimits=maxTransactionLimits;\r\n    }\r\n\r\n    function _verifyMinTransactionLimits(uint256 minTransactionLimits) public onlyOwner {\r\n        _minTransactionLimits=minTransactionLimits;\r\n    }\r\n\r\n    function getCurrentTimeStamp() private view returns(uint _timestamp){\r\n       return (block.timestamp);\r\n    }\r\n\r\n    function getHour(uint _startDate,uint _endDate) internal pure returns(uint256){\r\n        return ((_endDate - _startDate) / 60 / 60);\r\n    }\r\n\r\n    /* Smart Contract Owner Need To Initialze The Contract */\r\n    function Initialize(address _marketingwallet,address router) onlyOwner external initializer {\r\n        \r\n        _tTotal = 50000000 * 10**18;\r\n        _name = \"INDIAN COIN\";\r\n        _symbol = \"INDIANCOIN\";\r\n        _decimals = 18;\r\n        \r\n        _sellTaxFee = 5;\r\n        _buyTaxFee = 5;\r\n\r\n        _previousSellTaxFee=0;\r\n        _previousBuyTaxFee=0;\r\n        \r\n        _marketingBuyPer = 5;\r\n        _marketingSellPer = 5;\r\n\r\n        \r\n        paused = false;\r\n        \r\n        swapAndLiquifyEnabled = false;\r\n        minTokensBeforeSwap = 0;\r\n        \r\n        _totalMarketingCollected = 0;\r\n        \r\n        numberOfTokenHolders = 0;\r\n\r\n        _rOwned[_msgSender()] = _tTotal;\r\n        marketingwallet = payable(_marketingwallet);\r\n        IPancakeRouter02 _pancakeRouter = IPancakeRouter02(router);\r\n        //CREATE A PANCAKE PAIR FOR THIS NEW TOKEN\r\n        pancakePair = IPancakeFactory(_pancakeRouter.factory()).createPair(address(this), _pancakeRouter.WETH());\r\n        //SET THE REST OF THE CONTRACT VARIABLES\r\n        pancakeRouter = _pancakeRouter;       \r\n        //EXCLUDE OWNER AND THIS CONTRACT FROM FEE\r\n        _isExcludedFromFee[marketingwallet] = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;     \r\n        tokenHolder.push(_msgSender());\r\n        numberOfTokenHolders++;\r\n        exist[_msgSender()] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n\r\n    }\r\n\r\n   /* Smart Contract Owner Can Pause The Token Transaction if And Only If canPause is true */\r\n   function pauseTransaction() onlyOwner public {\r\n        paused = true;\r\n        emit Pause();\r\n   }\r\n\r\n    /* Smart Contract Owner Can Unpause The Token Transaction if token previously paused */\r\n    function unpauseTransaction() onlyOwner public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to block wallet address in case any needed\r\n    */\r\n    function blockWalletAddress(address WalletAddress) onlyOwner public {\r\n        checkUserBlocked[WalletAddress] = true;\r\n        emit BlockWalletAddress();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to Unblock Wallet Address that earlier blocked\r\n    */\r\n    function unblockWalletAddress(address WalletAddress) onlyOwner public {\r\n        checkUserBlocked[WalletAddress] = false;\r\n        emit UnblockWalletAddress();\r\n    }\r\n\r\n    /* Smart Contract Owner Can Update Buy Fee */\r\n    function updateBuyFee(uint buyTaxFee,uint marketingBuyPer) onlyOwner public {\r\n        _buyTaxFee=buyTaxFee;\r\n        _marketingBuyPer=marketingBuyPer;\r\n    \r\n        emit UpdateBuyFee();\r\n    }\r\n\r\n    /* Smart Contract Owner Can Update Sell Fee */\r\n    function updateSellFee(uint sellTaxFee,uint marketingSellPer) onlyOwner public {\r\n        _sellTaxFee=sellTaxFee;\r\n        _marketingSellPer=marketingSellPer;\r\n        emit UpdateSellFee();\r\n    }\r\n\r\n    function update_MarketingWalletAddress(address _marketingWalletAddress) onlyOwner public {\r\n        marketingwallet = payable(_marketingWalletAddress);\r\n        emit UpdateMarketingWalletAddress();\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _rOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n  \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n \r\n    function _transfer(address from,address to,uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(amount<=_maxTransactionLimits,\"Maximum Transaction Limit Exceed.\");\r\n        require(amount>=_minTransactionLimits,\"Minimum Transaction Limit Exceed.\");\r\n        require(paused != true, \"BEP20: Transaction Is Paused now\");  \r\n        require(checkUserBlocked[from] != true , \"BEP20: Sender Is Blocked\");\r\n        require(checkUserBlocked[to] != true , \"BEP20: Receiver Is Blocked\");\r\n      \r\n        if(to == pancakePair && from!=address(this)) {\r\n            require(amount <= _maxAntiWhaleLimits, \"BEP20: Sell Qty Exceed !\");\r\n            require(amount >= _minAntiWhaleLimits, \"BEP20: Sell Qty Does Not Match !\"); \r\n        }\r\n        \r\n        // IS THE TOKEN BALANCE OF THIS CONTRACT ADDRESS OVER THE MIN NUMBER OF\r\n        // TOKENS THAT WE NEED TO INITIATE A SWAP + LIQUIDITY LOCK?\r\n        // ALSO, DON'T GET CAUGHT IN A CIRCULAR LIQUIDITY EVENT.\r\n        // ALSO, DON'T SWAP & LIQUIFY IF SENDER IS PANCAKE PAIR.\r\n        if(!exist[to]){\r\n            tokenHolder.push(to);\r\n            numberOfTokenHolders++;\r\n            exist[to] = true;\r\n        }\r\n\r\n        //INDICATES IF FEE SHOULD BE DEDUCTED FROM TRANSFER\r\n        bool takeFee = false;\r\n\r\n        uint TaxType=0;\r\n        //IF ANY ACCOUNT BELONGS TO _isExcludedFromFee ACCOUNT THEN REMOVE THE FEE\r\n        if(from == pancakePair){\r\n            takeFee = true;\r\n            TaxType=1;\r\n        }  \r\n        else if(to == pancakePair){\r\n           takeFee = true;\r\n           TaxType=2;\r\n        }  \r\n        else if(from != pancakePair && to != pancakePair){\r\n            takeFee = false;\r\n            TaxType=0;            \r\n            //Manage Transfer Limits\r\n            _UserTransferLogDetails[from].transfered+=amount;\r\n        } \r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n            TaxType=0;\r\n        }   \r\n        \r\n        //Liquify Collected Token For Fee\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinTokenBalance = contractTokenBalance > minTokensBeforeSwap;\r\n        if (overMinTokenBalance && !inSwapAndLiquify && from != pancakePair && swapAndLiquifyEnabled && TaxType != 0 && takeFee) {\r\n            //LIQUIFY TOKEN TO GET BNB \r\n            swapAndLiquify(contractTokenBalance,TaxType);\r\n        }\r\n      \r\n        //TRANSFER AMOUNT, IT WILL TAKE TAX, BURN, LIQUIDITY FEE\r\n        _tokenTransfer(from,to,amount,takeFee,TaxType);\r\n\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance,uint TaxType) private lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 forLiquidity = _totalLiquidityCollected;\r\n        uint256 forMarketing = _totalMarketingCollected;\r\n        uint256 forReward = contractTokenBalance.sub(forLiquidity.add(forMarketing));\r\n        // split the liquidity\r\n        uint256 liquidityHalf = forLiquidity.div(2);\r\n        uint256 liquidityToken = forLiquidity.sub(liquidityHalf);\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n        //swap tokens for ETH\r\n        if(liquidityHalf.add(forMarketing).add(forReward)>0)\r\n        swapTokensForEth(liquidityHalf.add(forMarketing).add(forReward)); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n        //How much ETH did we just swap into ?\r\n        uint256 Balance = address(this).balance.sub(initialBalance);\r\n        uint EachPer=0;\r\n        uint MarketingPer=0;\r\n        uint RewardPer=0;\r\n        if(TaxType==1){\r\n            EachPer=100/(_LiquidityBuyPer.add(_marketingBuyPer).add(_RewardBuyPer));\r\n            MarketingPer=EachPer*_marketingBuyPer;\r\n            RewardPer=EachPer*_RewardBuyPer;\r\n        }\r\n        else{\r\n            EachPer=100/(_LiquiditySellPer.add(_marketingSellPer).add(_RewardSellPer));\r\n            MarketingPer=EachPer*_marketingSellPer;\r\n            RewardPer=EachPer*_RewardSellPer;\r\n        }\r\n        uint256 LiquidityBNB = Balance.div(3);\r\n        uint256 MarketingBNB = Balance.mul(MarketingPer).div(10**2);\r\n        uint256 RewardBNB = Balance.mul(RewardPer).div(10**2);\r\n        if(MarketingBNB>0)\r\n        marketingwallet.transfer(MarketingBNB);\r\n        if(liquidityToken>0 && LiquidityBNB>0)\r\n        addLiquidity(liquidityToken, LiquidityBNB);\r\n        if(RewardBNB>0){\r\n            for(uint256 i = 0; i < numberOfTokenHolders; i++) {\r\n                uint256 share = (balanceOf(tokenHolder[i]).mul(RewardBNB)).div(totalSupply());\r\n                myRewards[tokenHolder[i]] = myRewards[tokenHolder[i]].add(share);\r\n            }\r\n        }\r\n        if(liquidityToken>0 && LiquidityBNB>0)\r\n        _totalLiquidityCollected=0;\r\n        if(MarketingBNB>0)\r\n        _totalMarketingCollected=0;\r\n        if(RewardBNB>0)\r\n        _totalRewardCollected=0;\r\n        emit SwapAndLiquify(liquidityHalf.add(forMarketing), Balance, forMarketing,liquidityHalf);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(pancakeRouter), tokenAmount);\r\n        // add the liquidity\r\n        pancakeRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n         \r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        //GENERATE THE PANCAKE PAIR PATH OF TOKEN -> WETH\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeRouter.WETH();\r\n        _approve(address(this), address(pancakeRouter), tokenAmount);\r\n        //MAKE THE SWAP\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, //ACCEPT ANY AMOUNT OF ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //THIS METHOD IS RESPONSIBLE FOR TAKING ALL FEE, IF TAKEFEE IS TRUE\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee,uint TaxType) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n             _transferStandard(sender, recipient, amount,TaxType);     \r\n        if(!takeFee)\r\n            restoreAllFee();\r\n        if(TaxType==2 && recipient == pancakePair) {\r\n            UserLastSellTimeStamp[sender]=block.timestamp;\r\n        }\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount,uint TaxType) private {\r\n        (uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount,TaxType);\r\n        _rOwned[sender] = _rOwned[sender].sub(tAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(tTransferAmount);\r\n        if(tFee>0){\r\n          _takeMarketingFee(tAmount,tFee,TaxType);\r\n          _reflectFee(tFee);\r\n        }\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if(tFee>0) {\r\n           emit Transfer(sender,address(this),tFee);\r\n        }\r\n    }\r\n\r\n    function _reflectFee(uint256 tFee) private {\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount,uint TaxType) private view returns (uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount,TaxType);\r\n        return (tTransferAmount,tFee);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount,uint TaxType) private view returns (uint256, uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount,TaxType);\r\n        uint256 tTransferAmount = tAmount.sub(tFee);\r\n        return (tTransferAmount, tFee);\r\n    }\r\n\r\n    function _takeMarketingFee(uint256 tAmount,uint256 tFee,uint TaxType) private {\r\n        uint256 MarketingShare=0;\r\n        uint256 BurningShare=0;\r\n        uint256 RewardShare=0;\r\n        uint256 LiquidityShare=0;\r\n        if(TaxType==1){\r\n            MarketingShare=tAmount.mul(_marketingBuyPer).div(10**2);\r\n            RewardShare=tAmount.mul(_RewardBuyPer).div(10**2);\r\n            BurningShare=tAmount.mul(_autoBurnBuyPer).div(10**2);\r\n            LiquidityShare=tAmount.mul(_LiquidityBuyPer).div(10**2);\r\n        }\r\n        else if(TaxType==2){\r\n            MarketingShare=tAmount.mul(_marketingSellPer).div(10**2);\r\n            RewardShare=tAmount.mul(_RewardSellPer).div(10**2);\r\n            BurningShare=tAmount.mul(_autoBurnSellPer).div(10**2);\r\n            LiquidityShare=tAmount.mul(_LiquiditySellPer).div(10**2);\r\n        }\r\n        if(tFee<(MarketingShare.add(RewardShare).add(BurningShare).add(LiquidityShare))){\r\n            RewardShare=RewardShare.sub((MarketingShare.add(RewardShare).add(BurningShare).add(LiquidityShare)).sub(tFee));\r\n        }\r\n        uint256 FeeMarkRewLiqu=MarketingShare+LiquidityShare+RewardShare;\r\n        uint256 contractTransferBalance = FeeMarkRewLiqu;\r\n        uint256 Burn=BurningShare;\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(contractTransferBalance);\r\n        _totalBurnt=_totalBurnt.add(Burn);\r\n        _totalRewardCollected=_totalRewardCollected.add(RewardShare);\r\n        _totalLiquidityCollected=_totalLiquidityCollected.add(LiquidityShare);\r\n        _totalMarketingCollected=_totalMarketingCollected.add(MarketingShare);\r\n        _takeAutoBurn();\r\n    }\r\n\r\n    function _takeAutoBurn() private {\r\n        _tTotal = _tTotal.sub(_totalBurnt);\r\n        _totalBurnt=0;\r\n    }\r\n\r\n    function calculateTaxFee(uint256 _amount,uint TaxType) private view returns (uint256) {\r\n       if(TaxType==1){\r\n         return _amount.mul(_buyTaxFee).div(10**2);\r\n       }\r\n       if(TaxType==2){\r\n         return _amount.mul(_sellTaxFee).div(10**2);\r\n       }\r\n       else{\r\n         return 0;\r\n       }\r\n    }\r\n \r\n    function removeAllFee() private {\r\n        _previousSellTaxFee = _sellTaxFee;\r\n        _previousBuyTaxFee = _buyTaxFee;\r\n        _sellTaxFee = 0;\r\n        _buyTaxFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _sellTaxFee = _previousSellTaxFee;\r\n        _buyTaxFee=_previousBuyTaxFee;\r\n        _previousSellTaxFee=0;\r\n        _previousBuyTaxFee=0;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled,uint256 _minTokensBeforeSwap) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        minTokensBeforeSwap=_minTokensBeforeSwap;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    receive() external payable {}\r\n    function verifyBNB() public onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BlockWalletAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SetSellTimeInterval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoMarketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnblockWalletAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdateBurnPer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdateBuyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdateExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdateIncludeForFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdateLiquidityPer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdateMarketingPer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdateMarketingWalletAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdateRewardPer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdateSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdateTransactionLimits\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingwallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"Initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_UserTransferLogDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transferLimits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfered\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingBuyPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingSellPer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxAntiWhaleLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTransactionLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minAntiWhaleLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minTransactionLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransactionLimits\",\"type\":\"uint256\"}],\"name\":\"_verifyMaxTransactionLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTransactionLimits\",\"type\":\"uint256\"}],\"name\":\"_verifyMinTransactionLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"WalletAddress\",\"type\":\"address\"}],\"name\":\"blockWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkUserBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingwallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setContractManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"WalletAddress\",\"type\":\"address\"}],\"name\":\"unblockWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingBuyPer\",\"type\":\"uint256\"}],\"name\":\"updateBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTaxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingSellPer\",\"type\":\"uint256\"}],\"name\":\"updateSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAntiWhaleLimits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAntiWhaleLimits\",\"type\":\"uint256\"}],\"name\":\"update_AntiWhaleLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWalletAddress\",\"type\":\"address\"}],\"name\":\"update_MarketingWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "INDIANCOIN", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c31318dbbb5f7c247c3c48826ec3a49d4c4d302ff7eebbb5e9f7e8a20efe78c0"}