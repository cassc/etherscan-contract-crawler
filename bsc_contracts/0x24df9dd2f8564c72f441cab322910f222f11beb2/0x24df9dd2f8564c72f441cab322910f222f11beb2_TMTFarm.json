{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface Token{\r\n    function transferFrom(address,address,uint) external;\r\n    function transfer(address,uint) external;\r\n    function approve(address,uint) external;\r\n    function balanceOf(address) external view returns(uint);\r\n}\r\ninterface IUniswapV2Router {\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface DonaLike {\r\n    function getUpline(address) external view returns(address);\r\n    function getUnderline(address) external view returns(address[] memory);\r\n    function setRecommend(address,address) external;\r\n    function geStartTime(address usr) external view returns(uint);\r\n    function getUnlock(address usr) external view returns(uint256);\r\n    function gebeRelease(address usr) external view returns(uint);\r\n    function getHasten(address usr) external view returns(uint);\r\n    function release(address usr) external;\r\n}\r\ninterface TMTFarmLike {\r\n    function startTime(address,uint) external view returns(uint);\r\n}\r\n\r\ncontract TMTFarm  {\r\n\r\n    mapping (address => uint) public wards;\r\n    function rely(address usr) external  auth { wards[usr] = 1; }\r\n    function deny(address usr) external  auth { wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"TMTFarm/not-authorized\");\r\n        _;\r\n    }\r\n    // 0xDD72Ce06ACe805f6faD94Ee3305f4a89fE368f32\r\n    address                                           public  foundaddress = 0xfA7FeCdA96f04044A866ab80DF76B8Cff81cA77B;\r\n    Token                                             public  usdt = Token(0x55d398326f99059fF775485246999027B3197955);\r\n    Token                                             public  tmd = Token(0x0f27d12182f7f4D879d267B31BD02dd27086e7Ce);\r\n    Token                                             public  tmt = Token(0x0C3bE46AF643AE51c42dD67A4a8CcA0722B54f39);\r\n    DonaLike                                          public  dona = DonaLike(0xaCAF10215128ad48622D22B42b3d20Fc4dFdB5f2);\r\n    TMTFarmLike                                       public  TMTFarm1 = TMTFarmLike(0xDA204Ab881db92274307c6Bb88d0bEa9DC8D5041);\r\n    TMTFarmLike                                       public  TMTFarm2 = TMTFarmLike(0xDD72Ce06ACe805f6faD94Ee3305f4a89fE368f32);\r\n    TMTFarmLike                                       public  TMTFarm3 = TMTFarmLike(0x55E076097aa41eE3C1Dd8c2346901DD643c17568);\r\n    mapping (address => UserInfo)                     public  userInfo;\r\n    uint256[]                                         public  poolAmount = [0,100*1e18,150*1e18,225*1e18,330*1e18,500*1e18,750*1e18,1125*1e18,1680*1e18,2500*1e18];\r\n    uint256[]                                         public  rates = [0,200,400,600,800,1000,1200,1400,1600,1800];\r\n    uint256[]                                         public  scale = [2,10,15,20,25,30];\r\n    mapping (address => mapping (uint => uint))       public  startTime;\r\n    mapping (address => mapping (uint => uint))       public  lastTime;\r\n    mapping (address => mapping (uint => uint))       public  beRelease;\r\n    mapping (address => mapping (uint => uint))       public  releaseed;\r\n    mapping (address => bool)                         public  black;\r\n    uint256                                           public  recast = 7600;\r\n    IUniswapV2Router                                  public  Router = IUniswapV2Router(0x94a5D1b7646b07d6FD6CD6fC6A074ADDDA6477ad);\r\n                                                                     //(0x10ED43C718714eb63d5aA57B78B54704E256024E)\r\n    struct UserInfo { \r\n        uint256    vip;\r\n        uint256    unlockAmount;\r\n        uint256    rateHasten;\r\n        uint256    hastenPool;\r\n        uint256    releaseed;\r\n        HastenInfo[] hastenList;\r\n        EarnInfo[]   earnlist;\r\n    }\r\n    struct UnderInfo { \r\n        address    under;\r\n        uint256    farmAmount;\r\n    }\r\n    struct HastenInfo { \r\n        address    under;\r\n        uint256    rate;\r\n        uint256    time;\r\n    }\r\n    struct EarnInfo { \r\n        address    under;\r\n        uint256    amount;\r\n        uint256    time;\r\n    }\r\n    struct PoolInfo { \r\n        uint256    id;\r\n        uint256    startTime;\r\n        uint256    rate;\r\n        uint256    canRelease;\r\n        uint256    releaseed;\r\n    }\r\n\r\n    constructor() {\r\n        wards[msg.sender] = 1;\r\n    }\r\n    function global(uint256 what,address usr,uint data) external auth {                                               \r\n        if (what == 1) foundaddress = usr; \r\n        else if (what == 2) Router = IUniswapV2Router(usr);\r\n        else if (what == 3) recast= data;                \r\n        else revert(\"TMTFarm/setdata-unrecognized-param\");\r\n    }\r\n    function setArry(uint what, uint[] memory data) external auth {\r\n        if (what == 1) poolAmount = data;                           \r\n        else if (what == 2) rates = data;                      \r\n        else if (what == 3) scale = data;                     \r\n        else revert(\"TMTFarm/10\");\r\n    }\r\n    function setBlack(address[] memory guy) external auth {\r\n        uint length = guy.length;\r\n        for(uint i=0;i<length;++i) {\r\n           black[guy[i]] = !black[guy[i]];\r\n        }\r\n    }\r\n    function recasting(uint amount) internal  {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        dona.release(msg.sender);\r\n        uint wad = dona.gebeRelease(msg.sender) - user.releaseed;\r\n        uint tmtamount = getPrice(amount,address(usdt),address(tmt));\r\n        require(wad >=tmtamount*10000/recast,\"TMTFarm/09\");\r\n        user.releaseed += tmtamount*10000/recast;\r\n    }\r\n    function withdrawForDona(uint amount) public{\r\n        require(!black[msg.sender],\"TMTFarm/06\");\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        dona.release(msg.sender);\r\n        uint wad = dona.gebeRelease(msg.sender) - user.releaseed;\r\n        require(wad >=amount,\"TMTFarm/08\");\r\n        user.releaseed += amount;\r\n        tmt.transfer(msg.sender,amount);\r\n        uint usdtamount = getPrice(amount*(10000-recast)/10000,address(tmt),address(usdt));\r\n        uint tmdamount = getPrice(usdtamount,address(usdt),address(tmd));\r\n        tmd.transferFrom(msg.sender, address(this), tmdamount);\r\n        assignment(msg.sender,tmdamount);\r\n    }\r\n    function depositRecasting(address usr) public auth{\r\n        UserInfo storage user = userInfo[usr];\r\n        require(startTime[usr][2] == 0,\"TMTFarm/21\");\r\n        require((dona.getUnlock(usr) +  dona.gebeRelease(usr)) >10000 *1E18,\"TMTFarm/22\");\r\n        user.hastenPool = 2;\r\n        uint amount = poolAmount[2];\r\n        dona.release(usr);\r\n        uint wad = dona.gebeRelease(usr) - user.releaseed;\r\n        uint tmtamount = getPrice(amount,address(usdt),address(tmt));\r\n        require(wad >=tmtamount*10000/recast,\"TMTFarm/09\");\r\n        user.releaseed += tmtamount*10000/recast;\r\n        uint time = TMTFarm3.startTime(usr,2);\r\n        startTime[usr][2] = time;\r\n        lastTime[usr][2] = time;\r\n        address upAddress = dona.getUpline(usr);\r\n        for(uint i=0;i<10;++i) {\r\n            if(upAddress == address(0)) break;\r\n            uint length = dona.getUnderline(upAddress).length;\r\n            if(length > i) {\r\n               uint _rate;\r\n               if(i==0) _rate = 100;\r\n               else if(i==1) _rate = 50;\r\n               else _rate = 10;\r\n               UserInfo storage user1 = userInfo[upAddress];\r\n               user1.rateHasten += _rate;\r\n               HastenInfo memory ratelist;\r\n               ratelist.under = usr;\r\n               ratelist.rate = _rate;\r\n               ratelist.time = time;\r\n               user1.hastenList.push(ratelist);\r\n            } \r\n            upAddress = dona.getUpline(upAddress);\r\n        }\r\n    }\r\n     function deposit(bool isRecast,address recommender,uint256 pool) public{\r\n        if(isRecast)  require(!black[msg.sender],\"TMTFarm/07\");\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        if(dona.getUpline(msg.sender) == address(0) && dona.getUpline(recommender) != address(0)){\r\n           dona.setRecommend(msg.sender,recommender);\r\n        }\r\n        require(pool >=1 && pool <=9,\"TMTFarm/1\");\r\n        if(pool == 1) {\r\n            require(dona.geStartTime(msg.sender)  == 0 && TMTFarm1.startTime(msg.sender,1) == 0,\"TMTFarm/2\");\r\n            user.hastenPool = 1;\r\n        }\r\n        require(startTime[msg.sender][pool] == 0,\"TMTFarm/21\");\r\n        if(pool > 1){\r\n            if(pool == 2 && (dona.getUnlock(msg.sender) +  dona.gebeRelease(msg.sender)) >10000 *1E18) user.hastenPool = 2;\r\n            else {\r\n                uint256 canRelease = getCanRelease(msg.sender,pool-1);\r\n                require(canRelease >= poolAmount[pool-1],\"TMTFarm/3\");\r\n            }\r\n        }\r\n        uint amount = poolAmount[pool];\r\n        if(!isRecast) { \r\n            if(amount > user.unlockAmount) {\r\n                uint256 donaAmount = amount - user.unlockAmount;\r\n                usdt.transferFrom(msg.sender, foundaddress, donaAmount);\r\n                user.unlockAmount = 0;\r\n            }else user.unlockAmount -= amount;\r\n        }\r\n        else recasting(amount);\r\n        startTime[msg.sender][pool] = block.timestamp;\r\n        lastTime[msg.sender][pool] = block.timestamp;\r\n        address upAddress = dona.getUpline(msg.sender);\r\n        for(uint i=0;i<10;++i) {\r\n            if(upAddress == address(0)) break;\r\n            uint length = dona.getUnderline(upAddress).length;\r\n            if(length > i) {\r\n               uint _rate;\r\n               if(i==0) _rate = 100;\r\n               else if(i==1) _rate = 50;\r\n               else _rate = 10;\r\n               UserInfo storage user1 = userInfo[upAddress];\r\n               release(upAddress,user1.hastenPool);\r\n               user1.rateHasten += _rate;\r\n               HastenInfo memory ratelist;\r\n               ratelist.under = msg.sender;\r\n               ratelist.rate = _rate;\r\n               ratelist.time = block.timestamp;\r\n               user1.hastenList.push(ratelist);\r\n            } \r\n            upAddress = dona.getUpline(upAddress);\r\n        }\r\n    }\r\n    function deposit2(address[] memory usr,uint what) public auth{\r\n        uint length = usr.length;\r\n        for(uint i=0;i<length;++i) {\r\n           deposit1(usr[i],what);\r\n        }\r\n    }\r\n    function deposit1(address usr,uint what) public auth{\r\n        require(dona.geStartTime(usr) == 0,\"TMTFarm/071\");\r\n        UserInfo storage user = userInfo[usr];\r\n        user.hastenPool = 1;\r\n        uint time;\r\n        if(what == 1) time = TMTFarm1.startTime(usr,1);\r\n        else if(what == 2) time = TMTFarm2.startTime(usr,1);\r\n        else if(what == 3) time = TMTFarm3.startTime(usr,1);\r\n        startTime[usr][1] = time;\r\n        lastTime[usr][1] = time;\r\n        address upAddress = dona.getUpline(usr);\r\n        for(uint i=0;i<10;++i) {\r\n            if(upAddress == address(0)) break;\r\n            uint length = dona.getUnderline(upAddress).length;\r\n            if(length > i) {\r\n               uint _rate;\r\n               if(i==0) _rate = 100;\r\n               else if(i==1) _rate = 50;\r\n               else _rate = 10;\r\n               UserInfo storage user1 = userInfo[upAddress];\r\n               user1.rateHasten += _rate;\r\n               HastenInfo memory ratelist;\r\n               ratelist.under = usr;\r\n               ratelist.rate = _rate;\r\n               ratelist.time = time;\r\n               user1.hastenList.push(ratelist);\r\n            } \r\n            upAddress = dona.getUpline(upAddress);\r\n        }\r\n    }  \r\n    function setHastenPool(uint pool) public {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint _pool=user.hastenPool;\r\n        for(uint i=_pool;i<pool;++i){\r\n            uint releaseAmount =  getCanRelease(msg.sender,i);\r\n            require(releaseAmount >=  poolAmount[i]*3 ,\"TMTFarm/1\");\r\n        }\r\n        release(msg.sender,_pool);\r\n        release(msg.sender,pool);\r\n        user.hastenPool = pool;\r\n    }\r\n    function getPrice(uint inAmount,address token0,address token1) public view returns(uint256 wad){\r\n        address[] memory path = new address[](2);\r\n        path[0] = token0;\r\n        path[1] = token1;\r\n        uint256[] memory amounts = Router.getAmountsOut(inAmount,path);\r\n        wad = amounts[1];\r\n    }\r\n    function imputation(uint256 pool) public {\r\n        uint256 canRelease = beunlock(msg.sender,pool);\r\n        releaseed[msg.sender][pool] += canRelease;\r\n        userInfo[msg.sender].unlockAmount += canRelease;\r\n    }\r\n    function withdrawForUser(uint wad) public {\r\n        require(wad <= userInfo[msg.sender].unlockAmount,\"TMTFarm/1\"); \r\n        require(!black[msg.sender],\"TMTFarm/06\");\r\n        userInfo[msg.sender].unlockAmount -= wad;\r\n        uint tmdamount = getPrice(wad*24/100,address(usdt),address(tmd));\r\n        uint tmtamount = getPrice(wad,address(usdt),address(tmt));\r\n        tmt.transfer(msg.sender,tmtamount);\r\n        tmd.transferFrom(msg.sender, address(this), tmdamount);\r\n        assignment(msg.sender,tmdamount);\r\n    }\r\n    function withdrawInfo(address usr,uint wad) public view returns(uint max,uint tmdamount,uint tmtamount){\r\n        max = userInfo[usr].unlockAmount;\r\n        tmdamount = getPrice(wad*24/100,address(usdt),address(tmd));\r\n        tmtamount = getPrice(wad,address(usdt),address(tmt));\r\n    }\r\n    function assignment(address usr,uint amount) internal{\r\n        address referrer = dona.getUpline(usr);\r\n        uint levelForLower = userInfo[usr].vip;\r\n        bool lateral;\r\n        uint lastRate;\r\n        while(referrer !=address(0)) {\r\n            uint level = userInfo[referrer].vip;\r\n            if(level != 0) {\r\n                uint wad;\r\n                if(level > levelForLower) {\r\n                    wad = amount*(scale[level]-lastRate)/100;\r\n                    if(lateral) lateral = false;\r\n                }\r\n                else if(level == levelForLower && !lateral) {\r\n                    wad = amount*scale[0]/100;\r\n                    lateral = true;\r\n                }\r\n                if(wad !=0 && !black[referrer]) {\r\n                    tmd.transfer(referrer,wad);\r\n                    EarnInfo memory earn;\r\n                    earn.under = usr;\r\n                    earn.amount = wad;\r\n                    earn.time = block.timestamp;\r\n                    userInfo[referrer].earnlist.push(earn);\r\n                }\r\n                if(level == 5 && lateral) break;\r\n            }\r\n            if(level >= levelForLower) {\r\n                levelForLower = level;\r\n                lastRate = scale[level];\r\n            }\r\n            referrer = dona.getUpline(referrer);\r\n        }\r\n    }\r\n    function  setLevel(address usr,uint newvip) public auth{\r\n        userInfo[usr].vip = newvip;\r\n    }\r\n\r\n    function beunlock(address usr, uint256 pool) public view returns(uint){\r\n        uint256 canRelease = beRelease[usr][pool] + getUnlock(usr,pool) - releaseed[usr][pool];\r\n        uint256 unRelease = poolAmount[pool]*3 - releaseed[usr][pool];\r\n        if(unRelease <= canRelease) return unRelease;\r\n        else return canRelease;\r\n    }\r\n    function release(address usr, uint256 pool) public {\r\n        uint wad =  getUnlock(usr,pool);\r\n        beRelease[usr][pool] += wad;\r\n        lastTime[usr][pool] = block.timestamp;\r\n    }\r\n    function getHasten(address usr) public view returns(uint256 rate){\r\n        rate = dona.getHasten(usr) + userInfo[usr].rateHasten;\r\n    }\r\n    function getUnlock(address usr, uint256 pool) public view returns(uint256){\r\n        uint256 rate = 0;\r\n        if(pool == userInfo[usr].hastenPool) rate = getHasten(usr);\r\n        uint time = lastTime[usr][pool];\r\n        if(time == 0) return 0;\r\n        uint256 amount = poolAmount[pool];\r\n        uint256 day = block.timestamp - time;\r\n        uint256 unlockAmount = amount*(rate+rates[pool])*day/10000/86400;\r\n        return unlockAmount;\r\n    }\r\n    function getUnderInfo(address usr) public view returns(UnderInfo[] memory underline,uint totalAmount){\r\n        address[] memory unders = dona.getUnderline(usr);\r\n        uint length = unders.length;\r\n        if(length ==0) return (underline,totalAmount);\r\n        underline = new UnderInfo[](length);\r\n        for(uint i=0;i<length;++i) {\r\n            address unline = unders[i];\r\n            underline[i].under = unline;\r\n            underline[i].farmAmount = poolAmount[1];\r\n            for(uint j =2; j<=9;++j){\r\n                if(startTime[unline][j] != 0)  underline[i].farmAmount += poolAmount[j];\r\n            }\r\n            totalAmount += underline[i].farmAmount;\r\n        }\r\n    }\r\n    function getUnderInfos(address usr) public view returns(uint totalAmount){\r\n        (,totalAmount) = getUnderInfo(usr);\r\n        address[] memory unders = dona.getUnderline(usr);\r\n        uint length = unders.length;\r\n        if(length ==0) return totalAmount;\r\n        for(uint i=0;i<length;++i) {\r\n            address unline = unders[i];\r\n            uint amount = getUnderInfos(unline);\r\n            totalAmount += amount;\r\n        }\r\n    }\r\n    function getUnderVips(address usr) public view returns(uint[6] memory vips){\r\n        address[] memory unders = dona.getUnderline(usr);\r\n        uint length = unders.length;\r\n        if(length ==0) return vips;\r\n        for(uint i=0;i<length;++i) {\r\n            address unline = unders[i];\r\n            vips = getUnderVips(unline);\r\n            UserInfo memory user = userInfo[unline];\r\n            uint vip = user.vip;\r\n            vips[vip] +=1;\r\n        }\r\n    }\r\n    function getUserInfo(address usr) public view returns(UserInfo memory user,PoolInfo[9]  memory pools){\r\n        user = userInfo[usr];\r\n        user.rateHasten = getHasten(usr);\r\n        for(uint i=0;i<9;++i){\r\n           uint pool = i+1;\r\n           pools[i] = getUserPoolInfo(usr,pool);\r\n        }\r\n    }\r\n    function getCanRelease(address usr,uint pool) public view returns(uint){\r\n           return beRelease[usr][pool] + getUnlock(usr,pool);\r\n    }\r\n    function getUserPoolInfo(address usr,uint pool) public view returns(PoolInfo  memory pools){\r\n           uint256 rate = 0;\r\n           if(pool == userInfo[usr].hastenPool) rate = getHasten(usr);\r\n           pools.id = pool;\r\n           pools.startTime = startTime[usr][pool];\r\n           pools.rate =  rate +  rates[pool];\r\n           pools.canRelease = getCanRelease(usr,pool);\r\n           pools.releaseed = releaseed[usr][pool];\r\n    }\r\n    function withdraw(address asses, uint256 amount, address ust) public auth {\r\n        Token(asses).transfer(ust, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TMTFarm1\",\"outputs\":[{\"internalType\":\"contract TMTFarmLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TMTFarm2\",\"outputs\":[{\"internalType\":\"contract TMTFarmLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TMTFarm3\",\"outputs\":[{\"internalType\":\"contract TMTFarmLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"beunlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"black\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isRecast\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"recommender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"}],\"name\":\"deposit1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"usr\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"}],\"name\":\"deposit2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"depositRecasting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dona\",\"outputs\":[{\"internalType\":\"contract DonaLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"getCanRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getHasten\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getUnderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"under\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"farmAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct TMTFarm.UnderInfo[]\",\"name\":\"underline\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getUnderInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getUnderVips\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"vips\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"getUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateHasten\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hastenPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"under\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct TMTFarm.HastenInfo[]\",\"name\":\"hastenList\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"under\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct TMTFarm.EarnInfo[]\",\"name\":\"earnlist\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TMTFarm.UserInfo\",\"name\":\"user\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseed\",\"type\":\"uint256\"}],\"internalType\":\"struct TMTFarm.PoolInfo[9]\",\"name\":\"pools\",\"type\":\"tuple[9]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"getUserPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseed\",\"type\":\"uint256\"}],\"internalType\":\"struct TMTFarm.PoolInfo\",\"name\":\"pools\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"global\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"imputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"releaseed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"what\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"setArry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"guy\",\"type\":\"address[]\"}],\"name\":\"setBlack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"setHastenPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newvip\",\"type\":\"uint256\"}],\"name\":\"setLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tmd\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tmt\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateHasten\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hastenPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ust\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForDona\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdrawForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdrawInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tmdamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tmtamount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TMTFarm", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://38512dce6c9a201fa7d3a4e97c6f9723d710e651484076a1b4dcc085a5316301"}