{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Billboost_status.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Billboost_status is ReentrancyGuard {\\r\\n\\t// using SafeMath for uint;\\r\\n\\tIERC20 public token; //0xFBc7460d6644192c483d0F291241928b60F09C08 - BILLS\\r\\n\\taddress public devAddress;\\r\\n\\taddress constant public ownerAddress = 0x103f80FDfCE3966651C4c2327a249B7096258BB3;\\r\\n\\t// Dev 2%\\r\\n\\tuint constant public DEV_FEE = 300;\\r\\n\\t// owner 2%\\r\\n\\tuint constant public OWNER_FEE = 700;\\r\\n\\r\\n\\tuint constant public WITHDRAW_FEE_BASE = 500;\\r\\n\\tuint constant public MAX_PROFIT = 20000;\\r\\n\\t// 10000 = 100%, 1000 = 10%, 100 = 1%, 10 = 0.1%, 1 = 0.01%\\r\\n\\tuint constant public PERCENTS_DIVIDER = 10000;\\r\\n\\tuint constant public ROI_BASE = 30;\\r\\n\\tuint constant public MACHINE_ROI = 15;\\r\\n\\r\\n\\tuint constant public MACHINEBONUS_LENGTH = 20;\\r\\n\\tuint[MACHINEBONUS_LENGTH] internal REFERRAL_PERCENTS = [4000, 2400, 1600, 600, 400, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 400, 600, 1600, 2400, 4000];\\r\\n\\tuint constant public INVEST_MIN_AMOUNT = 21 ether;\\r\\n\\tuint constant public MINIMAL_REINVEST_AMOUNT = 0.01 ether;\\r\\n\\r\\n\\tuint constant public MIN_WITHDRAW = 1;\\r\\n\\t// uint constant internal WITHDRAW_FEE_PERCENT = 50;\\r\\n\\tuint constant public WITHDRAW_FEE_PERCENT_DAY = 1000;\\r\\n\\tuint constant public WITHDRAW_FEE_PERCENT_WEEK = 700;\\r\\n\\tuint constant public WITHDRAW_FEE_PERCENT_TWO_WEEK = 300;\\r\\n\\tuint constant public WITHDRAW_FEE_PERCENT_MONTH = 0;\\r\\n\\r\\n\\tuint constant public TIME_STEP = 1 days;\\r\\n\\tuint constant public WEEK_TO_DAY = 7;\\r\\n\\tuint constant public TIME_STEP_WEEK = TIME_STEP * WEEK_TO_DAY;\\r\\n\\r\\n\\tuint constant public FORCE_BONUS_PERCENT = 5000;\\r\\n\\r\\n\\tuint public initDate;\\r\\n\\r\\n\\tuint public totalUsers;\\r\\n\\tuint public totalInvested;\\r\\n\\tuint public totalWithdrawn;\\r\\n\\tuint public totalDeposits;\\r\\n\\tuint public totalReinvested;\\r\\n\\r\\n\\r\\n\\tuint public constant MAX_WITHDRAW_PER_USER = 160_000 ether;\\r\\n\\tuint public constant MAX_WEEKLY_WITHDRAW_PER_USER = 40_000 ether;\\r\\n\\r\\n\\tstruct Deposit {\\r\\n\\t\\tuint amount;\\r\\n\\t\\tuint initAmount;\\r\\n\\t\\tuint withdrawn;\\r\\n\\t\\tuint start;\\r\\n\\t\\tbool isForceWithdraw;\\r\\n\\t}\\r\\n\\r\\n\\tstruct MachineBonus {\\r\\n\\t\\tuint initAmount;\\r\\n\\t\\tuint withdrawn;\\r\\n\\t\\tuint start;\\r\\n\\t\\tuint level;\\r\\n\\t\\tuint bonus;\\r\\n\\t\\tuint lastPayBonus;\\r\\n\\t}\\r\\n\\r\\n\\tstruct User {\\r\\n\\t\\taddress userAddress;\\r\\n\\t\\tmapping (uint => Deposit) deposits;\\r\\n\\t\\tuint depositsLength;\\r\\n\\t\\tMachineBonus[MACHINEBONUS_LENGTH] machineDeposits;\\r\\n\\t\\tuint totalInvest;\\r\\n\\t\\tuint primeInvest;\\r\\n\\t\\tuint totalWithdraw;\\r\\n\\t\\tuint bonusWithdraw_c;\\r\\n\\t\\tuint reinvested;\\r\\n\\t\\tuint checkpoint;\\r\\n\\t\\tuint[MACHINEBONUS_LENGTH] referrerCount;\\r\\n\\t\\tuint totalBonus;\\r\\n\\t\\taddress referrer;\\r\\n\\t\\tbool hasWithdraw_f;\\r\\n\\t\\tbool machineAllow;\\r\\n\\t}\\r\\n\\r\\n\\tmapping(address => User) public users;\\r\\n\\tmapping (address => uint) public lastBlock;\\r\\n\\r\\n\\tevent Paused(address account);\\r\\n\\tevent Unpaused(address account);\\r\\n\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\trequire(devAddress == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier whenNotPaused() {\\r\\n\\t\\trequire(initDate > 0, \\\"Pausable: paused\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tmodifier whenPaused() {\\r\\n\\t\\trequire(initDate == 0, \\\"Pausable: not paused\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\tfunction unpause() external whenPaused onlyOwner{\\r\\n\\t\\tinitDate = block.timestamp;\\r\\n\\t\\temit Unpaused(msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isPaused() external view returns(bool) {\\r\\n\\t\\treturn (initDate == 0);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMaxprofit(Deposit memory ndeposit) internal pure returns(uint) {\\r\\n\\t\\t// return (ndeposit.amount.mul(MAX_PROFIT)).div(PERCENTS_DIVIDER);\\r\\n\\t\\treturn (ndeposit.amount * MAX_PROFIT) / PERCENTS_DIVIDER;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserMaxProfit(address user) public view returns(uint) {\\r\\n\\t\\t// return users[user].primeInvest.mul(MAX_PROFIT).div(PERCENTS_DIVIDER);\\r\\n\\t\\treturn (users[user].primeInvest * MAX_PROFIT) / PERCENTS_DIVIDER;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUserTotalInvested(address user) public view returns(uint) {\\r\\n\\t\\treturn users[user].primeInvest;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getDate() external view  returns(uint) {\\r\\n\\t\\treturn block.timestamp;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMachineDeposit(address user, uint index) external view returns(uint _initAmount, uint _withdrawn, uint _start) {\\r\\n\\t\\t_initAmount = users[user].machineDeposits[index].initAmount;\\r\\n\\t\\t_withdrawn = users[user].machineDeposits[index].withdrawn;\\r\\n\\t\\t_start = users[user].machineDeposits[index].start;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTotalMachineBonus(address _user) external view returns(uint) {\\r\\n\\t\\tuint totalMachineBonus;\\r\\n\\t\\tfor(uint i; i < MACHINEBONUS_LENGTH; i++) {\\r\\n\\t\\t\\ttotalMachineBonus += users[_user].machineDeposits[i].initAmount;\\r\\n\\t\\t}\\r\\n\\t\\treturn totalMachineBonus;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getAlldeposits(address _user) external view returns(Deposit[] memory) {\\r\\n\\t\\tDeposit[] memory _deposits = new Deposit[](users[_user].depositsLength);\\r\\n\\t\\tfor(uint i; i < users[_user].depositsLength; i++) {\\r\\n\\t\\t\\t_deposits[i] = users[_user].deposits[i];\\r\\n\\t\\t}\\r\\n\\t\\treturn _deposits;\\r\\n\\t}\\r\\n\\r\\n\\tfunction totalMachineWithdraw(address _user) external view returns(uint) {\\r\\n\\t\\tuint _totalMachineWithdraw;\\r\\n\\t\\tfor(uint i; i < MACHINEBONUS_LENGTH; i++) {\\r\\n\\t\\t\\t_totalMachineWithdraw += users[_user].machineDeposits[i].withdrawn;\\r\\n\\t\\t}\\r\\n\\t\\treturn _totalMachineWithdraw;\\r\\n\\t}\\r\\n\\r\\n    function getlastActionDate(User storage user)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        uint checkpoint = user.checkpoint;\\r\\n\\r\\n        if (initDate > checkpoint) checkpoint = initDate;\\r\\n\\r\\n        return checkpoint;\\r\\n    }\\r\\n\\r\\n\\tfunction getMaxTimeWithdraw(uint userTimeStamp) public view returns(uint) {\\r\\n\\t\\t// uint maxWithdraw = (MAX_WEEKLY_WITHDRAW_PER_USER * (block.timestamp.sub(userTimeStamp))) / (WEEK_TO_DAY * TIME_STEP);\\r\\n\\t\\tuint maxWithdraw = (MAX_WEEKLY_WITHDRAW_PER_USER * (block.timestamp - userTimeStamp)) / (WEEK_TO_DAY * TIME_STEP);\\r\\n\\t\\tif(maxWithdraw > MAX_WITHDRAW_PER_USER) {\\r\\n\\t\\t\\tmaxWithdraw = MAX_WITHDRAW_PER_USER;\\r\\n\\t\\t}\\r\\n\\t\\treturn maxWithdraw;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getMaxTimeWithdrawByUser(address user) external view returns(uint _maxWithdraw, uint _maxWeek, uint _delta, uint _weekTime, uint _timeStep) {\\r\\n\\t\\t// return (getMaxTimeWithdraw(getlastActionDate(users[user])), MAX_WEEKLY_WITHDRAW_PER_USER, block.timestamp.sub(getlastActionDate(users[user])), WEEK_TO_DAY, TIME_STEP);\\r\\n\\t\\treturn (getMaxTimeWithdraw(getlastActionDate(users[user])), MAX_WEEKLY_WITHDRAW_PER_USER, block.timestamp - getlastActionDate(users[user]), WEEK_TO_DAY, TIME_STEP);\\r\\n\\t}\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Billboost.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\nimport \\\"./Billboost_status.sol\\\";\\r\\n\\r\\ncontract Billboost is Billboost_status {\\r\\n    // using SafeMath for uint;\\r\\n    event Newbie(address user);\\r\\n    event NewDeposit(address indexed user, uint amount);\\r\\n    event Withdrawn(address indexed user, uint amount);\\r\\n    event RefBonus(\\r\\n        address indexed referrer,\\r\\n        address indexed referral,\\r\\n        uint indexed level,\\r\\n        uint amount\\r\\n    );\\r\\n    event FeePayed(address indexed user, uint totalAmount);\\r\\n    event Reinvestment(address indexed user, uint amount);\\r\\n\\r\\n    constructor(address _devAddr, address _token) {\\r\\n        devAddress = _devAddr;\\r\\n        token = IERC20(_token);\\r\\n\\r\\n        emit Paused(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier isNotContract() {\\r\\n        require(!isContract(msg.sender), \\\"contract not allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkUser_() {\\r\\n        bool check = checkUser(msg.sender);\\r\\n        require(check, \\\"try again later\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function checkUser(address _user) public view returns (bool) {\\r\\n        uint check = block.timestamp - getlastActionDate(users[_user]);\\r\\n        if (check > TIME_STEP) return true;\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function useHasMaxWithDraw(address _user) public view returns (bool) {\\r\\n        if(users[_user].totalWithdraw >= getUserMaxProfit(_user)) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    modifier whenNotMaxWithDraw() {\\r\\n        require(!useHasMaxWithDraw(msg.sender), \\\"you have max withdraw\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier tenBlocks() {\\r\\n        require(block.number - lastBlock[msg.sender] > 10, \\\"wait 10 blocks\\\");\\r\\n        _;\\r\\n    }\\r\\n \\r\\n    function invest(address referrer, uint investAmt) external whenNotPaused nonReentrant isNotContract tenBlocks {\\r\\n        // uint investAmt = msg.value;\\r\\n        lastBlock[msg.sender] = block.number;\\r\\n        token.transferFrom(msg.sender, address(this), investAmt);\\r\\n        require(investAmt >= INVEST_MIN_AMOUNT, \\\"insufficient deposit\\\");\\r\\n\\r\\n        User storage user = users[msg.sender];\\r\\n\\r\\n        if (user.depositsLength == 0) {\\r\\n            user.checkpoint = block.timestamp;\\r\\n            user.userAddress = msg.sender;\\r\\n            totalUsers++;\\r\\n            if (\\r\\n                user.referrer == address(0) &&\\r\\n                users[referrer].depositsLength > 0 &&\\r\\n                referrer != msg.sender &&\\r\\n                users[referrer].referrer != msg.sender\\r\\n            ) {\\r\\n                user.referrer = referrer;\\r\\n            }\\r\\n            emit Newbie(msg.sender);\\r\\n        }\\r\\n\\r\\n\\r\\n        if (user.referrer != address(0)) {\\r\\n            address upline = user.referrer;\\r\\n            for (uint i; i < MACHINEBONUS_LENGTH; i++) {\\r\\n                if (upline != address(0)) {\\r\\n                    if (user.depositsLength == 0) {\\r\\n                        users[upline].referrerCount[i] += 1;\\r\\n                    }\\r\\n                    // uint amount = (investAmt.mul(REFERRAL_PERCENTS[i])).div(PERCENTS_DIVIDER);\\r\\n                    uint amount = (investAmt * REFERRAL_PERCENTS[i]) / PERCENTS_DIVIDER;\\r\\n                    if (users[upline].machineDeposits[i].start == 0) {\\r\\n                        users[upline].machineDeposits[i].start = block\\r\\n                            .timestamp;\\r\\n                        users[upline].machineDeposits[i].level = i + 1;\\r\\n                    } else {\\r\\n                        updateDeposit(upline, i);\\r\\n                    }\\r\\n                    users[upline].machineDeposits[i].initAmount += amount;\\r\\n                    users[upline].totalBonus += amount;\\r\\n                    emit RefBonus(upline, msg.sender, i, amount);\\r\\n                    upline = users[upline].referrer;\\r\\n                } else break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        Deposit memory newDeposit;\\r\\n        newDeposit.amount = investAmt;\\r\\n        newDeposit.initAmount = investAmt;\\r\\n        newDeposit.start = block.timestamp;\\r\\n        user.deposits[user.depositsLength] = newDeposit;\\r\\n        user.depositsLength++;\\r\\n        user.totalInvest += investAmt;\\r\\n        user.primeInvest += investAmt;\\r\\n        user.machineAllow = true;\\r\\n\\r\\n        totalInvested += investAmt;\\r\\n        totalDeposits++;\\r\\n\\r\\n        payInvestFee(investAmt);\\r\\n        emit NewDeposit(msg.sender, investAmt);\\r\\n    }\\r\\n\\r\\n    function withdraw_f() external whenNotPaused checkUser_ whenNotMaxWithDraw nonReentrant isNotContract tenBlocks returns (bool) {\\r\\n        lastBlock[msg.sender] = block.number;\\r\\n        User storage user = users[msg.sender];\\r\\n\\r\\n        uint totalAmount;\\r\\n\\r\\n        for (uint i; i < user.depositsLength; i++) {\\r\\n            uint dividends;\\r\\n            Deposit memory deposit = user.deposits[i];\\r\\n\\r\\n            if (\\r\\n                deposit.withdrawn < getMaxprofit(deposit) &&\\r\\n                deposit.isForceWithdraw == false\\r\\n            ) {\\r\\n                dividends = calculateDividents(deposit, user, totalAmount);\\r\\n\\r\\n                if (dividends > 0) {\\r\\n                    user.deposits[i].withdrawn += dividends; /// changing of storage data\\r\\n                    totalAmount += dividends;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint i; i < MACHINEBONUS_LENGTH; i++) {\\r\\n            uint dividends;\\r\\n            MachineBonus memory machineBonus = user.machineDeposits[i];\\r\\n            if (\\r\\n                machineBonus.withdrawn < machineBonus.initAmount &&\\r\\n                user.machineAllow == true\\r\\n            ) {\\r\\n                dividends = calculateMachineDividents(\\r\\n                    machineBonus,\\r\\n                    user,\\r\\n                    totalAmount\\r\\n                );\\r\\n                if (dividends > 0) {\\r\\n                    // user.machineDeposits[i].withdrawn = machineBonus.withdrawn.add(dividends); /// changing of storage data\\r\\n                    user.machineDeposits[i].withdrawn += dividends;\\r\\n                    delete user.machineDeposits[i].bonus;\\r\\n                    totalAmount += dividends;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(totalAmount >= MIN_WITHDRAW, \\\"User has no dividends\\\");\\r\\n        uint maxWithdraw = getMaxTimeWithdraw(getlastActionDate(user));\\r\\n        if(maxWithdraw < MAX_WITHDRAW_PER_USER) {\\r\\n            require(totalAmount <= maxWithdraw, \\\"User balance exceeded\\\");\\r\\n        }\\r\\n\\r\\n        // if(user.totalWithdraw.add(totalAmount) > MAX_WITHDRAW_PER_USER) {\\r\\n        if(user.totalWithdraw + totalAmount > MAX_WITHDRAW_PER_USER) {\\r\\n            // totalAmount = MAX_WITHDRAW_PER_USER.sub(user.totalWithdraw);\\r\\n            totalAmount = MAX_WITHDRAW_PER_USER - user.totalWithdraw;\\r\\n        }\\r\\n\\r\\n        uint totalFee = withdrawFee(totalAmount, getlastActionDate(user));\\r\\n\\r\\n        // uint toTransfer = totalAmount.sub(totalFee);\\r\\n        uint toTransfer = totalAmount - totalFee;\\r\\n\\r\\n        totalWithdrawn += totalAmount;\\r\\n\\r\\n        user.checkpoint = block.timestamp;\\r\\n\\r\\n        user.totalWithdraw += totalAmount;\\r\\n\\r\\n        if (!user.hasWithdraw_f) {\\r\\n            user.hasWithdraw_f = true;\\r\\n        }\\r\\n\\r\\n        transferHandler(msg.sender, toTransfer);\\r\\n\\r\\n        emit FeePayed(msg.sender, totalFee);\\r\\n        emit Withdrawn(msg.sender, totalAmount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdraw_C() external whenNotPaused checkUser_ whenNotMaxWithDraw nonReentrant isNotContract tenBlocks returns (bool) {\\r\\n        lastBlock[msg.sender] = block.number;\\r\\n        User storage user = users[msg.sender];\\r\\n        require(!user.hasWithdraw_f, \\\"User has withdraw_f\\\");\\r\\n\\r\\n        uint totalAmount;\\r\\n        uint _bonus;\\r\\n\\r\\n        for (uint i; i < user.depositsLength; i++) {\\r\\n            uint dividends;\\r\\n            Deposit memory deposit = user.deposits[i];\\r\\n\\r\\n            if (\\r\\n                deposit.withdrawn < getMaxprofit(deposit) &&\\r\\n                deposit.isForceWithdraw == false\\r\\n            ) {\\r\\n                dividends = calculateDividents(deposit, user, totalAmount);\\r\\n                _bonus += (deposit.initAmount * FORCE_BONUS_PERCENT) / PERCENTS_DIVIDER;\\r\\n                if (dividends > 0) {\\r\\n                    user.deposits[i].withdrawn += dividends; /// changing of storage data\\r\\n                    totalAmount += dividends;\\r\\n                }\\r\\n                user.deposits[i].isForceWithdraw = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint i; i < MACHINEBONUS_LENGTH; i++) {\\r\\n            uint dividends;\\r\\n            MachineBonus memory machineBonus = user.machineDeposits[i];\\r\\n            if (\\r\\n                machineBonus.withdrawn < machineBonus.initAmount &&\\r\\n                user.machineAllow == true\\r\\n            ) {\\r\\n                dividends = calculateMachineDividents(\\r\\n                    machineBonus,\\r\\n                    user,\\r\\n                    totalAmount\\r\\n                );\\r\\n                if (dividends > 0) {\\r\\n                    user.machineDeposits[i].withdrawn += dividends;\\r\\n                    delete user.machineDeposits[i].bonus;\\r\\n                    totalAmount += dividends;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        uint _depositsWithdrawn = totalAmount;\\r\\n        totalAmount += _bonus;\\r\\n        require(totalAmount >= MIN_WITHDRAW, \\\"User has no dividends\\\");\\r\\n        uint maxWithdraw = getMaxTimeWithdraw(getlastActionDate(user));\\r\\n        if(maxWithdraw < MAX_WITHDRAW_PER_USER) {\\r\\n            require(totalAmount <= maxWithdraw, \\\"User balance exceeded\\\");\\r\\n        }\\r\\n\\r\\n        if(user.totalWithdraw + totalAmount > MAX_WITHDRAW_PER_USER) {\\r\\n            totalAmount = MAX_WITHDRAW_PER_USER - user.totalWithdraw;\\r\\n        }\\r\\n\\r\\n        user.machineAllow = false;\\r\\n\\r\\n        uint totalFee = withdrawFee(totalAmount, getlastActionDate(user));\\r\\n\\r\\n        uint toTransfer = totalAmount - totalFee;\\r\\n\\r\\n        totalWithdrawn += totalAmount;\\r\\n\\r\\n        user.checkpoint = block.timestamp;\\r\\n\\r\\n        user.totalWithdraw += _depositsWithdrawn;\\r\\n        user.bonusWithdraw_c += _bonus;\\r\\n\\r\\n        transferHandler(msg.sender, toTransfer);\\r\\n\\r\\n        emit FeePayed(msg.sender, totalFee);\\r\\n        emit Withdrawn(msg.sender, totalAmount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function reinvestment() external whenNotPaused checkUser_ whenNotMaxWithDraw nonReentrant isNotContract tenBlocks returns (bool) {\\r\\n        lastBlock[msg.sender] = block.number;\\r\\n        User storage user = users[msg.sender];\\r\\n\\r\\n        uint totalDividends;\\r\\n\\r\\n        for (uint i; i < user.depositsLength; i++) {\\r\\n            uint dividends;\\r\\n            Deposit memory deposit = user.deposits[i];\\r\\n\\r\\n            if (deposit.withdrawn < getMaxprofit(deposit)) {\\r\\n                dividends = calculateDividents(deposit, user, totalDividends);\\r\\n\\r\\n                if (dividends > 0) {\\r\\n                    user.deposits[i].amount += dividends;\\r\\n                    totalDividends += dividends;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint i; i < MACHINEBONUS_LENGTH; i++) {\\r\\n            MachineBonus memory machineBonus = user.machineDeposits[i];\\r\\n            if (\\r\\n                machineBonus.withdrawn < machineBonus.initAmount &&\\r\\n                user.machineAllow == true\\r\\n            ) {\\r\\n                uint dividends = calculateMachineDividents(\\r\\n                    machineBonus,\\r\\n                    user,\\r\\n                    totalDividends\\r\\n                );\\r\\n                if (dividends > 0) {\\r\\n                    user.machineDeposits[i].initAmount += dividends;\\r\\n                    delete user.machineDeposits[i].bonus;\\r\\n                    totalDividends += dividends;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(totalDividends > MINIMAL_REINVEST_AMOUNT, \\\"User has no dividends\\\");\\r\\n        user.checkpoint = block.timestamp;\\r\\n\\r\\n        user.reinvested += totalDividends;\\r\\n        user.totalInvest += totalDividends;\\r\\n        totalReinvested += totalDividends;\\r\\n\\r\\n        if (user.referrer != address(0)) {\\r\\n            address upline = user.referrer;\\r\\n            for (uint i; i < MACHINEBONUS_LENGTH; i++) {\\r\\n                if (upline != address(0)) {\\r\\n                    if (user.depositsLength == 0) {\\r\\n                        users[upline].referrerCount[i] += 1;\\r\\n                    }\\r\\n                    uint amount = (totalDividends * REFERRAL_PERCENTS[i]) / PERCENTS_DIVIDER;\\r\\n                    if (users[upline].machineDeposits[i].start == 0) {\\r\\n                        users[upline].machineDeposits[i].start = block\\r\\n                            .timestamp;\\r\\n                        users[upline].machineDeposits[i].level = i + 1;\\r\\n                    } else {\\r\\n                        updateDeposit(upline, i);\\r\\n                    }\\r\\n                    users[upline].machineDeposits[i].initAmount += amount;\\r\\n                    users[upline].totalBonus += amount;\\r\\n                    emit RefBonus(upline, msg.sender, i, amount);\\r\\n                    upline = users[upline].referrer;\\r\\n                } else break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Reinvestment(msg.sender, totalDividends);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getNextUserAssignment(address userAddress)\\r\\n        public\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        uint checkpoint = getlastActionDate(users[userAddress]);\\r\\n        if (initDate > checkpoint) checkpoint = initDate;\\r\\n        return checkpoint + TIME_STEP;\\r\\n    }\\r\\n\\r\\n    function getPublicData()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint totalUsers_,\\r\\n            uint totalInvested_,\\r\\n            uint totalReinvested_,\\r\\n            uint totalWithdrawn_,\\r\\n            uint totalDeposits_,\\r\\n            uint balance_,\\r\\n            uint roiBase,\\r\\n            uint maxProfit,\\r\\n            uint minDeposit,\\r\\n            uint daysFormdeploy\\r\\n        )\\r\\n    {\\r\\n        totalUsers_ = totalUsers;\\r\\n        totalInvested_ = totalInvested;\\r\\n        totalReinvested_ = totalReinvested;\\r\\n        totalWithdrawn_ = totalWithdrawn;\\r\\n        totalDeposits_ = totalDeposits;\\r\\n        balance_ = getContractBalance();\\r\\n        roiBase = ROI_BASE;\\r\\n        maxProfit = MAX_PROFIT;\\r\\n        minDeposit = INVEST_MIN_AMOUNT;\\r\\n        daysFormdeploy = (block.timestamp - initDate) / TIME_STEP;\\r\\n    }\\r\\n\\r\\n    function getUserData(address userAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint totalWithdrawn_,\\r\\n            uint depositBalance,\\r\\n            uint machineBalance,\\r\\n            uint totalDeposits_,\\r\\n            uint totalreinvest_,\\r\\n            uint balance_,\\r\\n            uint nextAssignment_,\\r\\n            uint amountOfDeposits,\\r\\n            uint checkpoint,\\r\\n            uint maxWithdraw,\\r\\n            address referrer_,\\r\\n            uint[MACHINEBONUS_LENGTH] memory referrerCount_\\r\\n        )\\r\\n    {\\r\\n        totalWithdrawn_ = users[userAddress].totalWithdraw + users[userAddress]\\r\\n            .bonusWithdraw_c;\\r\\n        totalDeposits_ = getUserTotalDeposits(userAddress);\\r\\n        nextAssignment_ = getNextUserAssignment(userAddress);\\r\\n        depositBalance = getUserDepositBalance(userAddress);\\r\\n        machineBalance = getUserMachineBalance(userAddress);\\r\\n        balance_ = getAvatibleDividens(userAddress);\\r\\n        totalreinvest_ = users[userAddress].reinvested;\\r\\n        amountOfDeposits = users[userAddress].depositsLength;\\r\\n        checkpoint = getlastActionDate(users[userAddress]);\\r\\n        referrer_ = users[userAddress].referrer;\\r\\n        referrerCount_ = users[userAddress].referrerCount;\\r\\n        maxWithdraw = getUserMaxProfit(userAddress);\\r\\n    }\\r\\n\\r\\n    function getContractBalance() public view returns (uint) {\\r\\n        return token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getUserDepositBalance(address userAddress)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        uint totalDividends;\\r\\n\\r\\n        for (uint i; i < user.depositsLength; i++) {\\r\\n            Deposit memory deposit = users[userAddress].deposits[i];\\r\\n\\r\\n            if (deposit.withdrawn < getMaxprofit(deposit)) {\\r\\n                uint dividends = calculateDividents(deposit, user, totalDividends);\\r\\n                totalDividends += dividends;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return totalDividends;\\r\\n    }\\r\\n\\r\\n    function getUserMachineBalance(address userAddress) public view returns(uint) {\\r\\n        User storage user = users[userAddress];\\r\\n        uint fromDeposits = getUserDepositBalance(userAddress);\\r\\n        uint totalDividends;\\r\\n        for (uint i; i < MACHINEBONUS_LENGTH; i++) {\\r\\n            MachineBonus memory machineBonus = user.machineDeposits[i];\\r\\n            if (\\r\\n                machineBonus.withdrawn < machineBonus.initAmount &&\\r\\n                user.machineAllow == true\\r\\n            ) {\\r\\n                uint dividends = calculateMachineDividents(\\r\\n                    machineBonus,\\r\\n                    user,\\r\\n                    fromDeposits + totalDividends\\r\\n                );\\r\\n                if (dividends > 0) {\\r\\n                    totalDividends += dividends;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return totalDividends;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getAvatibleDividens(address _user) internal view returns(uint) {\\r\\n        return getUserDepositBalance(_user) + getUserMachineBalance(_user);\\r\\n    }\\r\\n\\r\\n    function calculateDividents(Deposit memory deposit, User storage user, uint _currentDividends)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint)\\r\\n        {\\r\\n        if(deposit.isForceWithdraw == true) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint dividends;\\r\\n        uint depositPercentRate = getDepositRoi();\\r\\n\\r\\n        uint checkDate = getDepsitStartDate(deposit);\\r\\n\\r\\n        if (checkDate < getlastActionDate(user)) {\\r\\n            checkDate = getlastActionDate(user);\\r\\n        }\\r\\n\\r\\n        dividends = (deposit.amount * depositPercentRate * (block.timestamp - checkDate)) / (PERCENTS_DIVIDER * TIME_STEP);\\r\\n\\r\\n        uint _userMaxDividends = getUserMaxProfit(user.userAddress);\\r\\n        if (\\r\\n            user.totalWithdraw + dividends + _currentDividends >\\r\\n            _userMaxDividends\\r\\n        ) {\\r\\n            if (user.totalWithdraw + _currentDividends < _userMaxDividends) {\\r\\n                dividends =\\r\\n                    _userMaxDividends -\\r\\n                    user.totalWithdraw -\\r\\n                    _currentDividends;\\r\\n            } else {\\r\\n                dividends = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (deposit.withdrawn + dividends > getMaxprofit(deposit)) {\\r\\n            dividends = getMaxprofit(deposit) - deposit.withdrawn;\\r\\n        }\\r\\n\\r\\n        return dividends;\\r\\n    }\\r\\n\\r\\n    function calculateMachineDividents(\\r\\n        MachineBonus memory deposit,\\r\\n        User storage user,\\r\\n        uint _currentDividends\\r\\n    ) internal view returns (uint) {\\r\\n        if (!user.machineAllow) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        if (user.referrerCount[0] < deposit.level) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint dividends;\\r\\n\\r\\n        uint checkDate = deposit.start;\\r\\n\\r\\n        if (checkDate < getlastActionDate(user)) {\\r\\n            checkDate = getlastActionDate(user);\\r\\n        }\\r\\n\\r\\n        if (checkDate < deposit.lastPayBonus) {\\r\\n            checkDate = deposit.lastPayBonus;\\r\\n        }\\r\\n\\r\\n        dividends = (deposit.initAmount * MACHINE_ROI * (block.timestamp - checkDate)) / (PERCENTS_DIVIDER * TIME_STEP);\\r\\n\\r\\n        dividends += deposit.bonus;\\r\\n\\r\\n        uint _userMaxDividends = getUserMaxProfit(user.userAddress);\\r\\n        if (\\r\\n            user.totalWithdraw + dividends + _currentDividends >\\r\\n            _userMaxDividends\\r\\n        ) {\\r\\n            if (user.totalWithdraw + _currentDividends < _userMaxDividends) {\\r\\n                dividends =\\r\\n                    _userMaxDividends -\\r\\n                    user.totalWithdraw -\\r\\n                    _currentDividends;\\r\\n            } else {\\r\\n                dividends = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (deposit.withdrawn + dividends > deposit.initAmount) {\\r\\n            dividends = deposit.initAmount - deposit.withdrawn;\\r\\n        }\\r\\n\\r\\n        return dividends;\\r\\n    }\\r\\n\\r\\n    function getUserDepositInfo(address userAddress, uint index)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint amount_,\\r\\n            uint withdrawn_,\\r\\n            uint timeStart_,\\r\\n            uint reinvested_,\\r\\n            uint maxProfit\\r\\n        )\\r\\n    {\\r\\n        Deposit memory deposit = users[userAddress].deposits[index];\\r\\n        amount_ = deposit.amount;\\r\\n        withdrawn_ = deposit.withdrawn;\\r\\n        timeStart_ = getDepsitStartDate(deposit);\\r\\n        reinvested_ = users[userAddress].reinvested;\\r\\n        maxProfit = getMaxprofit(deposit);\\r\\n    }\\r\\n\\r\\n    function getUserTotalDeposits(address userAddress)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        return users[userAddress].totalInvest;\\r\\n    }\\r\\n\\r\\n    function getUserDeposittotalWithdrawn(address userAddress)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        uint amount;\\r\\n\\r\\n        for (uint i; i < user.depositsLength; i++) {\\r\\n            amount += users[userAddress].deposits[i].withdrawn;\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function isContract(address addr) internal view returns (bool) {\\r\\n        uint size;\\r\\n        assembly {\\r\\n            size := extcodesize(addr)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function getDepositRoi() private pure returns (uint) {\\r\\n        return ROI_BASE;\\r\\n    }\\r\\n\\r\\n    function getDepsitStartDate(Deposit memory ndeposit)\\r\\n        private\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        if (initDate > ndeposit.start) {\\r\\n            return initDate;\\r\\n        } else {\\r\\n            return ndeposit.start;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function WITHDRAW_FEE_PERCENT(uint lastWithDraw)\\r\\n        public\\r\\n        view\\r\\n        returns (uint)\\r\\n    {\\r\\n        if (initDate > lastWithDraw) {\\r\\n            lastWithDraw = initDate;\\r\\n        }\\r\\n        uint delta = block.timestamp - lastWithDraw;\\r\\n        if (delta < TIME_STEP * 7) {\\r\\n            return WITHDRAW_FEE_PERCENT_DAY;\\r\\n        } else if (delta < TIME_STEP * 15) {\\r\\n            return WITHDRAW_FEE_PERCENT_WEEK;\\r\\n        } else if (delta < TIME_STEP * 30) {\\r\\n            return WITHDRAW_FEE_PERCENT_TWO_WEEK;\\r\\n        }\\r\\n        return WITHDRAW_FEE_PERCENT_MONTH;\\r\\n    }\\r\\n\\r\\n    function updateDeposit(address _user, uint _machineDeposit) internal {\\r\\n        uint dividends = calculateMachineDividents(\\r\\n            users[_user].machineDeposits[_machineDeposit],\\r\\n            users[_user],\\r\\n            0\\r\\n        );\\r\\n        if (dividends > 0) {\\r\\n            users[_user].machineDeposits[_machineDeposit].bonus = dividends;\\r\\n            users[_user].machineDeposits[_machineDeposit].lastPayBonus = block\\r\\n                .timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawFee(uint _totalAmount, uint checkExtraFee) internal returns(uint) {\\r\\n        uint fee = WITHDRAW_FEE_BASE;\\r\\n        if(checkExtraFee > 0) {\\r\\n            fee += WITHDRAW_FEE_PERCENT(checkExtraFee);\\r\\n        }\\r\\n        uint feeAmout = (_totalAmount * fee) / PERCENTS_DIVIDER;\\r\\n        uint feeToWAllet = feeAmout / 3;\\r\\n        transferHandler(devAddress, feeToWAllet);\\r\\n        transferHandler(ownerAddress, feeAmout - feeToWAllet);\\r\\n        return feeAmout;\\r\\n    }\\r\\n\\r\\n    function payInvestFee(uint investAmount) internal {\\r\\n        uint feeDev = (investAmount * DEV_FEE) / PERCENTS_DIVIDER;\\r\\n        uint feeOwner = (investAmount * OWNER_FEE) / PERCENTS_DIVIDER;\\r\\n\\r\\n        transferHandler(devAddress, feeDev);\\r\\n        transferHandler(ownerAddress, feeOwner);\\r\\n    }\\r\\n\\r\\n    function transferHandler(address _address, uint _amount) internal {\\r\\n        uint balance = token.balanceOf(address(this));\\r\\n        if(balance < _amount) {\\r\\n            _amount = balance;\\r\\n        }\\r\\n        token.transfer(_address, _amount);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEV_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FORCE_BONUS_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MACHINEBONUS_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MACHINE_ROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROFIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WEEKLY_WITHDRAW_PER_USER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_PER_USER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMAL_REINVEST_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WITHDRAW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROI_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK_TO_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lastWithDraw\",\"type\":\"uint256\"}],\"name\":\"WITHDRAW_FEE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE_PERCENT_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE_PERCENT_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE_PERCENT_TWO_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE_PERCENT_WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAlldeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isForceWithdraw\",\"type\":\"bool\"}],\"internalType\":\"struct Billboost_status.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMachineDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_initAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userTimeStamp\",\"type\":\"uint256\"}],\"name\":\"getMaxTimeWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMaxTimeWithdrawByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWeek\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weekTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeStep\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getNextUserAssignment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUsers_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReinvested_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysFormdeploy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalMachineBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"machineBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalreinvest_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextAssignment_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer_\",\"type\":\"address\"},{\"internalType\":\"uint256[20]\",\"name\":\"referrerCount_\",\"type\":\"uint256[20]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStart_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvested_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxProfit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMachineBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserMaxProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTotalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investAmt\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"totalMachineWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReinvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"useHasMaxWithDraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"primeInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusWithdraw_c\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasWithdraw_f\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"machineAllow\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_C\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_f\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Billboost", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000987d466d0774f387a1c658d0b313622328c754f7000000000000000000000000fbc7460d6644192c483d0f291241928b60f09c08", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}