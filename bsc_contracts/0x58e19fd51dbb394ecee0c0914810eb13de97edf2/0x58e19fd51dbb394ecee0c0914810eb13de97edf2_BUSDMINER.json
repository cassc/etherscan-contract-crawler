{"SourceCode": "/**\r\n\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557\r\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551    \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\r\n\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551    \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d    \u2588\u2588\u2551     \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\r\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d     \u255a\u2550\u255d     \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u255d\r\n                                                                        \r\n\r\nTG: https://t.me/BUSDFARMBSC\r\nWebsite: https://busdfarm.dev/\r\nMiner: https://miner.busdfarm.dev/\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.13;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface ITOKEN {\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\ncontract BUSDMINER is Ownable {\r\n    struct DISCOUNT_INFO {\r\n        address tokenAddress;\r\n        uint256 fee;\r\n        uint256 minimumHolding;\r\n        uint256 tokenType;\r\n    }\r\n\r\n    uint256 private BUSD_TO_HATCH_1Battery = 1080000;\r\n    uint256 private PSN = 10000;\r\n    uint256 private PSNH = 5000;\r\n    uint256 private devFeeVal = 10;\r\n    bool private initialized = false;\r\n    bool public withdrawCooldownEnabled = true;\r\n    address payable private devWallet;\r\n    mapping(address => uint256) private ChargingBattery;\r\n    mapping(address => uint256) private claimedBUSD;\r\n    mapping(address => uint256) private lastCharge;\r\n    mapping(address => address) private referrals;\r\n    uint256 private marketBUSD;\r\n    IERC20 private miningToken =\r\n        IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n    mapping(address => uint256) private lastSell;\r\n    uint256 public WITHDRAW_COOLDOWN = 6 days;\r\n    DISCOUNT_INFO[] private discountTokens;\r\n    mapping(address => uint256) discountTokenIndex;\r\n    uint256 private batterCount;\r\n\r\n    event Charge(address indexed user, uint256 VoltBought, uint256 BUSDAmount);\r\n\r\n    constructor(address _token) {\r\n        devWallet = payable(msg.sender);\r\n        miningToken = IERC20(_token);\r\n    }\r\n\r\n    function reCharge(address ref) public {\r\n        require(initialized);\r\n\r\n        if (ref == msg.sender) {\r\n            ref = address(0);\r\n        }\r\n\r\n        if (\r\n            referrals[msg.sender] == address(0) &&\r\n            referrals[msg.sender] != msg.sender\r\n        ) {\r\n            referrals[msg.sender] = ref;\r\n        }\r\n\r\n        uint256 VoltCharged = getMyBUSD(msg.sender);\r\n        uint256 newBattery = VoltCharged / BUSD_TO_HATCH_1Battery;\r\n        ChargingBattery[msg.sender] = ChargingBattery[msg.sender] + newBattery;\r\n        claimedBUSD[msg.sender] = 0;\r\n        lastCharge[msg.sender] = block.timestamp;\r\n\r\n        claimedBUSD[referrals[msg.sender]] =\r\n            claimedBUSD[referrals[msg.sender]] +\r\n            VoltCharged /\r\n            10;\r\n\r\n        marketBUSD = marketBUSD + VoltCharged / 5;\r\n    }\r\n\r\n    function ClaimBUSD() public {\r\n        require(initialized);\r\n        if (withdrawCooldownEnabled) {\r\n            require(\r\n                lastSell[msg.sender] + WITHDRAW_COOLDOWN <= block.timestamp,\r\n                \"You can't withdraw for a while\"\r\n            );\r\n        }\r\n\r\n        uint256 hasVolt = getMyBUSD(msg.sender);\r\n        uint256 VoltValue = calculateBUSDSell(hasVolt);\r\n        uint256 fee = devFee(VoltValue);\r\n        claimedBUSD[msg.sender] = 0;\r\n        lastCharge[msg.sender] = block.timestamp;\r\n        marketBUSD = marketBUSD + hasVolt;\r\n        miningToken.transfer(devWallet, fee);\r\n        miningToken.transfer(msg.sender, VoltValue - fee);\r\n        lastSell[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    function BUSDRewards(address adr) public view returns (uint256) {\r\n        uint256 hasVolt = getMyBUSD(adr);\r\n        uint256 VoltValue = calculateBUSDSell(hasVolt);\r\n        return VoltValue;\r\n    }\r\n\r\n    function isWithdrawCooldownEnabled() external view returns (bool) {\r\n        return withdrawCooldownEnabled;\r\n    }\r\n\r\n    function ChargeBUSD(address ref, uint256 amount) public {\r\n        require(initialized);\r\n        uint256 contractBalance = miningToken.balanceOf(address(this));\r\n        miningToken.transferFrom(msg.sender, address(this), amount);\r\n        uint256 VoltBought = calculateBUSDBuy(amount, contractBalance);\r\n        VoltBought = VoltBought - devFee(VoltBought);\r\n        uint256 fee = devFee(amount);\r\n        miningToken.transfer(devWallet, fee);\r\n        claimedBUSD[msg.sender] = claimedBUSD[msg.sender] + VoltBought;\r\n        if (ChargingBattery[msg.sender] == 0) {\r\n            batterCount += 1;\r\n        }\r\n        reCharge(ref);\r\n\r\n        uint256 BUSDAmount = calculateTrade(\r\n            VoltBought,\r\n            marketBUSD,\r\n            miningToken.balanceOf(address(this))\r\n        );\r\n\r\n        emit Charge(msg.sender, VoltBought, BUSDAmount);\r\n\r\n        lastSell[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    function calculateTrade(\r\n        uint256 rt,\r\n        uint256 rs,\r\n        uint256 bs\r\n    ) private view returns (uint256) {\r\n        return (PSN * bs) / (PSNH + (((PSN * rs) + (PSNH * rt)) / rt));\r\n    }\r\n\r\n    function calculateBUSDSell(uint256 Volts) public view returns (uint256) {\r\n        return\r\n            calculateTrade(\r\n                Volts,\r\n                marketBUSD,\r\n                miningToken.balanceOf(address(this))\r\n            );\r\n    }\r\n\r\n    function calculateBUSDBuy(\r\n        uint256 eth,\r\n        uint256 contractBalance\r\n    ) public view returns (uint256) {\r\n        return calculateTrade(eth, contractBalance, marketBUSD);\r\n    }\r\n\r\n    function calculateBUSDBuySimple(\r\n        uint256 eth\r\n    ) public view returns (uint256) {\r\n        return calculateBUSDBuy(eth, miningToken.balanceOf(address(this)));\r\n    }\r\n\r\n    function devFee(uint256 amount) private view returns (uint256) {\r\n        uint256 discountFee = getDevFee();\r\n\r\n        return (amount * discountFee) / 100;\r\n    }\r\n\r\n    function setWithdrawCooldown(uint256 newCooldown) public onlyOwner {\r\n        require(newCooldown <= 6 days, \"Cooldown cannot be longer than 6 days\");\r\n        WITHDRAW_COOLDOWN = newCooldown;\r\n    }\r\n\r\n    function getDevFee() public view returns (uint256) {\r\n        uint256 discountFee = devFeeVal;\r\n        for (uint256 i = 0; i < discountTokens.length; i++) {\r\n            DISCOUNT_INFO storage info = discountTokens[i];\r\n            ITOKEN token = ITOKEN(info.tokenAddress);\r\n            if (token.balanceOf(msg.sender) >= info.minimumHolding) {\r\n                if (info.fee < discountFee) discountFee = info.fee;\r\n            }\r\n        }\r\n        return discountFee;\r\n    }\r\n\r\n    function setWithdrawCooldownEnabled(bool _enabled) external onlyOwner {\r\n        withdrawCooldownEnabled = _enabled;\r\n    }\r\n\r\n    function seedMarket(uint256 amount) public onlyOwner {\r\n        require(marketBUSD == 0);\r\n        if (amount > 0) {\r\n            miningToken.transferFrom(msg.sender, address(this), amount);\r\n        }\r\n        initialized = true;\r\n        marketBUSD = 108000000000;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return miningToken.balanceOf(address(this));\r\n    }\r\n\r\n    function getMyMiners(address adr) public view returns (uint256) {\r\n        return ChargingBattery[adr];\r\n    }\r\n\r\n    function getMyBUSD(address adr) public view returns (uint256) {\r\n        return claimedBUSD[adr] + getBUSDSinceLastHatch(adr);\r\n    }\r\n\r\n    function getBUSDSinceLastHatch(address adr) public view returns (uint256) {\r\n        uint256 secondsPassed = min(\r\n            BUSD_TO_HATCH_1Battery,\r\n            block.timestamp - lastCharge[adr]\r\n        );\r\n        return secondsPassed * ChargingBattery[adr];\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function addOrUpdateDiscountToken(\r\n        address _address,\r\n        uint256 _fee,\r\n        uint256 _minimum,\r\n        uint256 _type\r\n    ) external onlyOwner {\r\n        if (discountTokenIndex[_address] == 0) {\r\n            discountTokens.push(DISCOUNT_INFO(_address, _fee, _minimum, _type));\r\n            discountTokenIndex[_address] = discountTokens.length;\r\n        } else {\r\n            uint256 tokenIndex = discountTokenIndex[_address] - 1;\r\n            discountTokens[tokenIndex] = DISCOUNT_INFO(\r\n                _address,\r\n                _fee,\r\n                _minimum,\r\n                _type\r\n            );\r\n        }\r\n    }\r\n\r\n    function removeDiscountToken(address _address) external onlyOwner {\r\n        require(discountTokenIndex[_address] > 0, \"Invalid Address\");\r\n        uint256 tokenIndex = discountTokenIndex[_address] - 1;\r\n        uint256 lastIndex = discountTokens.length - 1;\r\n        discountTokens[tokenIndex] = discountTokens[lastIndex];\r\n        discountTokens.pop();\r\n        delete discountTokenIndex[_address];\r\n    }\r\n\r\n    function getInvestorCount() external view returns (uint256) {\r\n        return batterCount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"VoltBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BUSDAmount\",\"type\":\"uint256\"}],\"name\":\"Charge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"BUSDRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ChargeBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"addOrUpdateDiscountToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateBUSDBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateBUSDBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Volts\",\"type\":\"uint256\"}],\"name\":\"calculateBUSDSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getBUSDSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithdrawCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"reCharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeDiscountToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCooldown\",\"type\":\"uint256\"}],\"name\":\"setWithdrawCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setWithdrawCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BUSDMINER", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://11bd9cf2f761e3bea4c1b03c318721fc4e9bdaff0b9694aaf60149b7c07e4be8"}