{"SourceCode": "{\"Libraries.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IBEP20 {\\r\\n  function totalSupply() external view returns (uint256);\\r\\n  function decimals() external view returns (uint8);\\r\\n  function symbol() external view returns (string memory);\\r\\n  function name() external view returns (string memory);\\r\\n  function getOwner() external view returns (address);\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n  function allowance(address _owner, address spender) external view returns (uint256);\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IPancakeERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\\r\\n\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getamountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getamountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getamountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getamountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = msg.sender;\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue\\u0027s index to valueIndex\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\"},\"Moonx.sol\":{\"content\":\"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n//MoonX Contract ////////////////////////////////////////////////////////////////////////////////\\r\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"./Libraries.sol\\\";\\r\\n\\r\\n\\r\\ncontract MoonX is IBEP20, Ownable\\r\\n{\\r\\n    using Address for address;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    \\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    EnumerableSet.AddressSet private _excluded;\\r\\n    //Token Info\\r\\n    string private constant _name = \\u0027MoonX\\u0027;\\r\\n    string private constant _symbol = \\u0027MoonX\\u0027;\\r\\n    uint8 private constant _decimals = 18;\\r\\n    uint256 public immutable InitialSupply;\\r\\n\\r\\n    //Divider for the MaxBalance based on circulating Supply (2.5%)\\r\\n    uint8 public constant MaxBalanceDivider=100;\\r\\n    //The time Liquidity gets locked at start and prolonged once it gets released\\r\\n    uint256 private constant DefaultLiquidityLockTime=7 days;\\r\\n\\r\\n    //TestNet\\r\\n    //address private constant PancakeRouter=0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\\r\\n    //MainNet\\r\\n    address private constant PancakeRouter=0x10ED43C718714eb63d5aA57B78B54704E256024E;\\r\\n\\r\\n    //variables that track balanceLimit and sellLimit,\\r\\n    //can be updated based on circulating supply and Sell- and BalanceLimitDividers\\r\\n    uint256 private _circulatingSupply;\\r\\n    uint256 public  balanceLimit = _circulatingSupply;\\r\\n    \\r\\n    //Tracks the current Taxes, different Taxes can be applied for buy/sell/transfer\\r\\n    uint256 private _buyTax =1900;\\r\\n    uint256 private _sellTax =2500;\\r\\n    uint256 private _transferTax=0;\\r\\n\\r\\n    uint256 private BurnTax=0;\\r\\n    uint256 private LiquidityTax=6000;\\r\\n    uint256 private MarketingTax=4000;\\r\\n    uint256 private constant _TaxDivider=10000;\\r\\n    \\r\\n    address public marketingWallet=0xcF9F96213Ef763F311714AbAE29ff2A258101092;\\r\\n    \\r\\n    address private _pancakePairAddress; \\r\\n    IPancakeRouter02 private  _pancakeRouter;\\r\\n    uint256 BotProtectionDuration=60 seconds;\\r\\n\\r\\n    //modifier for functions only the team can call\\r\\n    modifier onlyTeam() {\\r\\n        require(isTeam(msg.sender), \\\"Caller not Team\\\");\\r\\n        _;\\r\\n    }\\r\\n    //Checks if address is in Team, is needed to give Team access even if contract is renounced\\r\\n    //Team doesn\\u0027t have access to critical Functions that could turn this into a Rugpull(Exept liquidity unlocks)\\r\\n    function isTeam(address addr) private view returns (bool){\\r\\n        return addr==owner()||addr==marketingWallet;\\r\\n    }\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //Constructor///////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    constructor () {\\r\\n        //contract creator gets 90% of the token to create LP-Pair\\r\\n        uint ContractToken=TokenForPresale+TokenInLiquidity;\\r\\n        uint BurnToken=5000000*10**_decimals;\\r\\n        uint TeamToken=2000000*10**_decimals;\\r\\n        _balances[address(this)] = ContractToken;\\r\\n        _balances[address(0xdead)]=BurnToken;\\r\\n        _balances[msg.sender]=TeamToken;\\r\\n\\r\\n        emit Transfer(address(0), address(this), ContractToken);\\r\\n        emit Transfer(address(0), address(0xdead), BurnToken);\\r\\n        emit Transfer(address(0), msg.sender, TeamToken);\\r\\n\\r\\n        _circulatingSupply=ContractToken+BurnToken+TeamToken;\\r\\n        InitialSupply=_circulatingSupply;\\r\\n\\r\\n\\r\\n        // Pancake Router\\r\\n        _pancakeRouter = IPancakeRouter02(PancakeRouter);\\r\\n        //Creates a Pancake Pair\\r\\n        _pancakePairAddress = IPancakeFactory(_pancakeRouter.factory()).createPair(address(this), _pancakeRouter.WETH());\\r\\n        \\r\\n        //Sets Buy/Sell limits\\r\\n        balanceLimit=_circulatingSupply/MaxBalanceDivider;\\r\\n        \\r\\n        //owner is excluded from Taxes\\r\\n        _excluded.add(msg.sender);\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //Transfer functionality////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    //transfer function, every transfer runs through this function\\r\\n    function _transfer(address sender, address recipient, uint256 amount) private{\\r\\n        require(sender != address(0), \\\"Transfer from zero\\\");\\r\\n        require(recipient != address(0), \\\"Transfer to zero\\\");\\r\\n        \\r\\n        //Manually Excluded adresses are transfering tax and lock free\\r\\n        bool isExcluded = (_excluded.contains(sender) || _excluded.contains(recipient));\\r\\n        \\r\\n        //Transactions from and to the contract are always tax and lock free\\r\\n        bool isContractTransfer=(sender==address(this) || recipient==address(this));\\r\\n        \\r\\n        //transfers between PancakeRouter and PancakePair are tax free\\r\\n        address pancakeRouter=address(_pancakeRouter);\\r\\n        bool isLiquidityTransfer = ((sender == _pancakePairAddress \\u0026\\u0026 recipient == pancakeRouter) \\r\\n        || (recipient == _pancakePairAddress \\u0026\\u0026 sender == pancakeRouter));\\r\\n\\r\\n        //differentiate between buy/sell/transfer to apply different taxes/restrictions\\r\\n        bool isBuy=sender==_pancakePairAddress;\\r\\n        bool isSell=recipient==_pancakePairAddress;\\r\\n\\r\\n        //Pick transfer\\r\\n        if(isContractTransfer || isLiquidityTransfer || isExcluded)\\r\\n            _feelessTransfer(sender, recipient, amount);\\r\\n        else{ \\r\\n            _taxedTransfer(sender,recipient,amount,isBuy,isSell);                  \\r\\n        }\\r\\n    }\\r\\n    //applies taxes, checks for limits, locks generates autoLP and stakingBNB, and autostakes\\r\\n    function _taxedTransfer(address sender, address recipient, uint256 amount,bool isBuy,bool isSell) private{\\r\\n        uint256 recipientBalance = _balances[recipient];\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"Transfer exceeds balance\\\");\\r\\n        //once trading is enabled, it can\\u0027t be turned off again\\r\\n        require(LaunchTimestamp!=0\\u0026\\u0026block.timestamp\\u003eLaunchTimestamp,\\\"Trading not yet enabled\\\");\\r\\n        uint256 tax;\\r\\n        if(isSell){\\r\\n            if(block.timestamp\\u003cLaunchTimestamp+1 minutes)\\r\\n                tax=_TaxDivider*75/100;\\r\\n            else tax=_sellTax;\\r\\n        }else if(isBuy){\\r\\n            require(recipientBalance+amount\\u003c=balanceLimit,\\\"whale protection\\\");\\r\\n            if(LaunchWhitelist[recipient]) tax=_buyTax;\\r\\n            else tax=_getBuyTax();\\r\\n\\r\\n        } else {//Transfer\\r\\n            require(recipientBalance+amount\\u003c=balanceLimit,\\\"whale protection\\\");\\r\\n            tax=_transferTax;\\r\\n        }     \\r\\n\\r\\n        if((sender!=_pancakePairAddress)\\u0026\\u0026(!manualConversion)\\u0026\\u0026(!_isSwappingContractModifier)\\u0026\\u0026isSell)\\r\\n            _swapContractToken();\\r\\n\\r\\n        //Calculates the exact token amount for each tax\\r\\n        uint256 tokensToBeBurnt=_calculateFee(amount, tax, BurnTax);\\r\\n        //staking and liquidity Tax get treated the same, only during conversion they get split\\r\\n        uint256 contractToken=_calculateFee(amount, tax, MarketingTax+LiquidityTax);\\r\\n        //Subtract the Taxed Tokens from the amount\\r\\n        uint256 taxedAmount=amount-(tokensToBeBurnt + contractToken);\\r\\n\\r\\n        _balances[sender]-=amount;\\r\\n        //Adds the taxed tokens to the contract wallet\\r\\n        _balances[address(this)] += contractToken;\\r\\n        //Burns tokens\\r\\n        _circulatingSupply-=tokensToBeBurnt;\\r\\n        _balances[recipient]+=taxedAmount;\\r\\n        \\r\\n        emit Transfer(sender,recipient,taxedAmount);\\r\\n    }\\r\\n    //Feeless transfer only transfers and autostakes\\r\\n    function _feelessTransfer(address sender, address recipient, uint256 amount) private{\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"Transfer exceeds balance\\\");\\r\\n        _balances[sender]-=amount;\\r\\n        _balances[recipient]+=amount;      \\r\\n        emit Transfer(sender,recipient,amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _getBuyTax() private view returns(uint256){\\r\\n        if(block.timestamp\\u003e=LaunchTimestamp+BotProtectionDuration) return _buyTax;\\r\\n        uint256 timeSinceLaunch=block.timestamp-LaunchTimestamp;\\r\\n        return _TaxDivider-((_TaxDivider-_buyTax)*timeSinceLaunch/BotProtectionDuration);\\r\\n    }\\r\\n\\r\\n\\r\\n    //Calculates the token that should be taxed\\r\\n    function _calculateFee(uint256 amount, uint256 tax, uint256 taxPercent) private pure returns (uint256) {\\r\\n        return (amount*tax*taxPercent) / (_TaxDivider*_TaxDivider);\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //Swap Contract Tokens//////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    \\r\\n    //Locks the swap if already swapping\\r\\n    bool private _isSwappingContractModifier;\\r\\n    modifier lockTheSwap {\\r\\n        _isSwappingContractModifier = true;\\r\\n        _;\\r\\n        _isSwappingContractModifier = false;\\r\\n    }\\r\\n\\r\\n    //swaps the token on the contract for Marketing BNB and LP Token.\\r\\n    //always swaps the sellLimit of token to avoid a large price impact\\r\\n    function _swapContractToken() private lockTheSwap{\\r\\n        uint256 contractBalance=_balances[address(this)];\\r\\n        uint256 totalTax=LiquidityTax+MarketingTax;\\r\\n        //swaps each time it reaches 0.2% of pancake pair to avoid large prize impact\\r\\n        uint256 tokenToSwap=_balances[_pancakePairAddress]*2/1000;\\r\\n        //only swap if contractBalance is larger than tokenToSwap, and totalTax is unequal to 0\\r\\n        if(contractBalance\\u003ctokenToSwap||totalTax==0)\\r\\n            return;\\r\\n\\r\\n        //splits the token in TokenForLiquidity and tokenForMarketing\\r\\n        uint256 tokenForLiquidity=(tokenToSwap*LiquidityTax)/totalTax;\\r\\n        uint256 tokenForMarketing= tokenToSwap-tokenForLiquidity;\\r\\n\\r\\n        //splits tokenForLiquidity in 2 halves\\r\\n        uint256 liqToken=tokenForLiquidity/2;\\r\\n        uint256 liqBNBToken=tokenForLiquidity-liqToken;\\r\\n\\r\\n        //swaps marktetingToken and the liquidity token half for BNB\\r\\n        uint256 swapToken=liqBNBToken+tokenForMarketing;\\r\\n        //Gets the initial BNB balance, so swap won\\u0027t touch any contract BNB\\r\\n        uint256 initialBNBBalance = address(this).balance;\\r\\n        _swapTokenForBNB(swapToken);\\r\\n        uint256 newBNB=(address(this).balance - initialBNBBalance);\\r\\n        //calculates the amount of BNB belonging to the LP-Pair and converts them to LP\\r\\n        if(liqToken!=0\\u0026\\u0026swapToken!=0){\\r\\n            uint256 liqBNB = (newBNB*liqBNBToken)/swapToken;\\r\\n            _addLiquidity(liqToken, liqBNB);\\r\\n        }\\r\\n\\r\\n    }\\r\\n    //swaps tokens on the contract for BNB\\r\\n    function _swapTokenForBNB(uint256 amount) private {\\r\\n        _approve(address(this), address(_pancakeRouter), amount);\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = _pancakeRouter.WETH();\\r\\n\\r\\n        _pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n    //Adds Liquidity directly to the contract where LP are locked(unlike safemoon forks, that transfer it to the owner)\\r\\n    function _addLiquidity(uint256 tokenamount, uint256 bnbamount) private {\\r\\n        _approve(address(this), address(_pancakeRouter), tokenamount);\\r\\n        _pancakeRouter.addLiquidityETH{value: bnbamount}(\\r\\n            address(this),\\r\\n            tokenamount,\\r\\n            0,\\r\\n            0,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //public functions /////////////////////////////////////////////////////////////////////////////////////\\r\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////// \\r\\n    function getLiquidityReleaseTimeInSeconds() public view returns (uint256){\\r\\n        if(block.timestamp\\u003c_liquidityUnlockTime)\\r\\n            return _liquidityUnlockTime-block.timestamp;\\r\\n        return 0;\\r\\n    }\\r\\n    function getLaunchSeconds() public view returns (uint256){\\r\\n        if(LaunchTimestamp==0) return 10**30;\\r\\n        if(block.timestamp\\u003e=LaunchTimestamp) return 0;\\r\\n        return LaunchTimestamp-block.timestamp;\\r\\n    }\\r\\n    function getBurnedTokens() public view returns(uint256){\\r\\n        return (InitialSupply-_circulatingSupply)+_balances[address(0xdead)];\\r\\n    }\\r\\n    \\r\\n    function getTaxes() public view returns(uint256 buy_, uint256 sell_, uint256 transfer_, uint256 burn_, uint256 liquidity_, uint256 marketing_){\\r\\n        require(block.timestamp\\u003e=LaunchTimestamp\\u0026\\u0026LaunchTimestamp!=0,\\\"not yet Launched\\\");\\r\\n        buy_=_getBuyTax();\\r\\n        if(block.timestamp\\u003cLaunchTimestamp+1 minutes)\\r\\n            sell_=_TaxDivider*75/100;\\r\\n        else sell_=_sellTax;\\r\\n        \\r\\n        transfer_=_transferTax;\\r\\n        burn_=BurnTax;\\r\\n        liquidity_=LiquidityTax;\\r\\n        marketing_=MarketingTax;\\r\\n    }\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //Settings//////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    bool public manualConversion;\\r\\n    function ClaimMarketingBNB() public onlyTeam{\\r\\n        uint256 amount;\\r\\n        if(LaunchTimestamp==0)\\r\\n            amount=address(this).balance-BNBInLiquidity; \\r\\n        else amount=address(this).balance;\\r\\n            \\r\\n        require(amount\\u003e0,\\\"Nothing to claim\\\");\\r\\n        (bool sent,) =marketingWallet.call{value: (amount)}(\\\"\\\");\\r\\n        require(sent,\\\"withdraw failed\\\");  \\r\\n    } \\r\\n    function ClaimMarketingBUSD() public onlyTeam{\\r\\n        uint256 amount;\\r\\n        if(LaunchTimestamp==0)\\r\\n            amount=address(this).balance-BNBInLiquidity; \\r\\n        else amount=address(this).balance;\\r\\n            \\r\\n        require(amount\\u003e0,\\\"Nothing to claim\\\");\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = _pancakeRouter.WETH(); //BNB\\r\\n        path[1] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;  //Binance-Peg BUSD Token\\r\\n\\r\\n        _pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\\r\\n        0,\\r\\n        path,\\r\\n        marketingWallet,\\r\\n        block.timestamp);\\r\\n    }\\r\\n\\r\\n    function SetTaxes(\\r\\n        uint Buy, \\r\\n        uint Sell, \\r\\n        uint Transfer, \\r\\n        uint Marketing, \\r\\n        uint LP, \\r\\n        uint Burn) public onlyTeam\\r\\n    {\\r\\n        uint256 Limit=_TaxDivider/4;\\r\\n        require(Buy\\u003cLimit\\u0026\\u0026Sell\\u003cLimit\\u0026\\u0026Transfer\\u003cLimit);\\r\\n        require(Marketing+LP+Burn==_TaxDivider);\\r\\n        _buyTax=Buy;\\r\\n        _sellTax=Sell;\\r\\n        _transferTax=Transfer;\\r\\n        MarketingTax=Marketing;\\r\\n        LiquidityTax=LP;\\r\\n        BurnTax=Burn;\\r\\n    }\\r\\n    //switches autoLiquidity and marketing BNB generation during transfers\\r\\n    function SwitchManualBNBConversion(bool manual) public onlyTeam{\\r\\n        manualConversion=manual;\\r\\n    }\\r\\n    //manually converts contract token to LP and staking BNB\\r\\n    function SwapContractToken() public onlyTeam{\\r\\n    require(isLaunched());\\r\\n    _swapContractToken();\\r\\n    }\\r\\n    function isLaunched() public view returns(bool){\\r\\n        return LaunchTimestamp!=0\\u0026\\u0026block.timestamp\\u003eLaunchTimestamp;\\r\\n    } \\r\\n    //Exclude/Include account from fees (eg. CEX)\\r\\n    function ExcludeAccountFromFees(address account, bool exclude) public onlyTeam {\\r\\n        if(exclude)_excluded.add(account);\\r\\n        else _excluded.remove(account);\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //Liquidity Lock////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //the timestamp when Liquidity unlocks\\r\\n    uint256 private _liquidityUnlockTime;\\r\\n    bool public LPReleaseLimitedTo20Percent;\\r\\n    //Sets Liquidity Release to 20% at a time and prolongs liquidity Lock for a Week after Release. \\r\\n    //Should be called once start was successful.\\r\\n\\r\\n    function limitLiquidityReleaseTo20Percent() public onlyTeam{\\r\\n        LPReleaseLimitedTo20Percent=true;\\r\\n    }\\r\\n\\r\\n    function LockLiquidityForSeconds(uint256 secondsUntilUnlock) public onlyTeam{\\r\\n        _prolongLiquidityLock(secondsUntilUnlock+block.timestamp);\\r\\n    }\\r\\n    function _prolongLiquidityLock(uint256 newUnlockTime) private{\\r\\n        // require new unlock time to be longer than old one\\r\\n        require(newUnlockTime\\u003e_liquidityUnlockTime);\\r\\n        _liquidityUnlockTime=newUnlockTime;\\r\\n    }\\r\\n\\r\\n    //Release Liquidity Tokens once unlock time is over\\r\\n    function LiquidityRelease() public onlyTeam {\\r\\n        //Only callable if liquidity Unlock time is over\\r\\n        require(block.timestamp \\u003e= _liquidityUnlockTime, \\\"Not yet unlocked\\\");\\r\\n        _liquidityUnlockTime=block.timestamp+DefaultLiquidityLockTime;\\r\\n        IPancakeERC20 liquidityToken = IPancakeERC20(_pancakePairAddress);\\r\\n        uint256 amount = liquidityToken.balanceOf(address(this));\\r\\n        if(LPReleaseLimitedTo20Percent) amount=amount*2/10;\\r\\n        \\r\\n        liquidityToken.transfer(marketingWallet, amount);\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //external//////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    bool public PresaleActive;\\r\\n    bool public PresaleFailed;\\r\\n    uint256 public HardCap=250*10**18;\\r\\n    uint256 public BNBInLiquidity=150*10**18;\\r\\n    uint256 public MinContribution=10**17;\\r\\n    uint256 public MaxContribution=10**18;\\r\\n\\r\\n    uint256 public TokenInLiquidity=1500000*10**_decimals;\\r\\n    uint256 public TokenForPresale= 1500000*10**_decimals;\\r\\n    uint256 public TotalRaised;\\r\\n    mapping(address=\\u003euint256) public contributions;\\r\\n    mapping(address=\\u003ebool) public presaleWhitelist;\\r\\n    bool public PresaleWhitelistDisabled;\\r\\n    mapping(address=\\u003ebool) public LaunchWhitelist;\\r\\n    uint256 public LaunchTimestamp;\\r\\n    function Finalize(uint LaunchInSeconds) public onlyTeam{\\r\\n        require(LaunchInSeconds\\u003c7 days);\\r\\n        require(TotalRaised\\u003e=BNBInLiquidity);\\r\\n        require(LaunchTimestamp==0\\u0026\\u0026!PresaleFailed);\\r\\n        _liquidityUnlockTime=block.timestamp+DefaultLiquidityLockTime;\\r\\n        PresaleActive=false;\\r\\n        LaunchTimestamp=block.timestamp+LaunchInSeconds;\\r\\n        _addLiquidity(TokenInLiquidity, BNBInLiquidity);\\r\\n        require(IBEP20(_pancakePairAddress).totalSupply()\\u003e0);\\r\\n        uint256 remainingBalance=_balances[address(this)];\\r\\n        _balances[address(this)]=0;\\r\\n        _balances[address(0xdead)]+=remainingBalance;\\r\\n        emit Transfer(address(this),address(0xdead),remainingBalance);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    \\r\\n    function SetupWhitelist(address[] memory addresses, bool Add, bool Presale) public onlyTeam{\\r\\n        for(uint i=0;i\\u003caddresses.length;i++){\\r\\n            if(Presale)\\r\\n                presaleWhitelist[addresses[i]]=Add;\\r\\n            else LaunchWhitelist[addresses[i]]=Add;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function EnablePresale() public onlyTeam{\\r\\n        require(LaunchTimestamp==0\\u0026\\u0026!PresaleFailed);\\r\\n        PresaleActive=true;\\r\\n    }\\r\\n    function DisablePresaleWhitelist(bool Disable) public onlyTeam{\\r\\n        PresaleWhitelistDisabled=Disable;\\r\\n    }\\r\\n    receive() external payable {\\r\\n        if(msg.sender==address(_pancakeRouter)) return; \\r\\n        require(LaunchTimestamp==0);\\r\\n        PresalePurchase();\\r\\n    }\\r\\n\\r\\n\\r\\n    function getTokenForAmount(uint256 amount) public view returns(uint256){\\r\\n        return TokenForPresale*amount/HardCap;\\r\\n    }\\r\\n    bool inPresale;\\r\\n    modifier inPresalePurchase{\\r\\n        require(!inPresale);\\r\\n        inPresale=true;\\r\\n        _;\\r\\n        inPresale=false;\\r\\n    }\\r\\n    function PresalePurchase() public payable inPresalePurchase{\\r\\n        require(PresaleWhitelistDisabled||presaleWhitelist[msg.sender]);\\r\\n        require(PresaleActive\\u0026\\u0026!PresaleFailed);\\r\\n        require(msg.value\\u003e=MinContribution,\\\"\\u003cMinContribution\\\");\\r\\n        require(TotalRaised\\u003cHardCap,\\\"HardCap reached\\\");\\r\\n        \\r\\n        uint256 value=msg.value;\\r\\n        if(msg.value+TotalRaised\\u003eHardCap)\\r\\n            value=HardCap-TotalRaised;\\r\\n    \\r\\n        uint256 alreadyContributed=contributions[msg.sender];\\r\\n        if(alreadyContributed+value\\u003eMaxContribution)\\r\\n            value=(MaxContribution-alreadyContributed);\\r\\n        require(value\\u003e0,\\\"MaxContribution reached\\\");\\r\\n        contributions[msg.sender]+=value;\\r\\n        TotalRaised+=value;\\r\\n        _feelessTransfer(address(this),msg.sender,getTokenForAmount(value));\\r\\n        if(value\\u003cmsg.value){\\r\\n            (bool sent,)=msg.sender.call{value:msg.value-value}(\\\"\\\");\\r\\n            require(sent);\\r\\n        }\\r\\n        require(_balances[address(this)]\\u003eTokenInLiquidity);\\r\\n    }\\r\\n    function SetPresaleFailed() public onlyOwner{\\r\\n        PresaleFailed=true;\\r\\n        PresaleActive=false;\\r\\n    }\\r\\n    function WithdrawFailedPresale() public inPresalePurchase {\\r\\n        require(PresaleFailed);\\r\\n        uint256 contributon=contributions[msg.sender];\\r\\n        contributions[msg.sender]=0;\\r\\n        TotalRaised-=contributon;\\r\\n        (bool sent,)=msg.sender.call{value:contributon}(\\\"\\\");\\r\\n        require(sent);\\r\\n    }\\r\\n\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //external//////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    function getOwner() external view override returns (address) {\\r\\n        return owner();\\r\\n    }\\r\\n\\r\\n    function name() external pure override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() external pure override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() external pure override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _circulatingSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) external view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address _owner, address spender) external view override returns (uint256) {\\r\\n        return _allowances[_owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"Approve from zero\\\");\\r\\n        require(spender != address(0), \\\"Approve to zero\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\r\\n        require(currentAllowance \\u003e= amount, \\\"Transfer \\u003e allowance\\\");\\r\\n\\r\\n        _approve(sender, msg.sender, currentAllowance - amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // IBEP20 - Helpers\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"\\u003c0 allowance\\\");\\r\\n\\r\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNBInLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimMarketingBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimMarketingBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"Disable\",\"type\":\"bool\"}],\"name\":\"DisablePresaleWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnablePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"ExcludeAccountFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"LaunchInSeconds\",\"type\":\"uint256\"}],\"name\":\"Finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"InitialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPReleaseLimitedTo20Percent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LaunchTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LaunchWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidityRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsUntilUnlock\",\"type\":\"uint256\"}],\"name\":\"LockLiquidityForSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxBalanceDivider\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PresaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PresaleFailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PresalePurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PresaleWhitelistDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetPresaleFailed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Burn\",\"type\":\"uint256\"}],\"name\":\"SetTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"Add\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"Presale\",\"type\":\"bool\"}],\"name\":\"SetupWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SwapContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"manual\",\"type\":\"bool\"}],\"name\":\"SwitchManualBNBConversion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenForPresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenInLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawFailedPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLaunchSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityReleaseTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buy_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenForAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLiquidityReleaseTo20Percent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualConversion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MoonX", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a8af5126a3f1687ccb07dad5a7ef604a578c3771f2fedb39e945b14903813913"}