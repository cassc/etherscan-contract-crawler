{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ScoutHUBVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IScoutHUBVesting.sol\\\";\\n\\n/**\\n * @title Vesting Contract for ScoutHUB\\n * @author 0xVeliUysal, 0xfunTalia, dozcan, ScoutHUB team and Deneth firm\\n */\\ncontract ScoutHUBVesting is\\n    IScoutHUBVesting,\\n    Ownable,\\n    Pausable,\\n    ReentrancyGuard\\n{\\n    // The HUB token\\n    IERC20 public immutable hub;\\n\\n    // The status of each vesting member (Vester)\\n    mapping(address => Vester[]) public vest;\\n    // Informations about Vester Types\\n    mapping(VesterType => VesterTypeInfo) public vesterTypeInfos;\\n\\n    function getVest(address account)\\n        external\\n        view\\n        returns (Vester[] memory vesters)\\n    {\\n        return vest[account];\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    /**\\n     * @dev Initializes the contract's vesters and vesting amounts as well as sets\\n     * the HUB token address.\\n     *\\n     * It conducts a sanity check to ensure that the total vesting amounts specified match\\n     * the team allocation to ensure that the contract is deployed correctly.\\n     *\\n     * Additionally, it transfers ownership to the Vader contract that needs to consequently\\n     * initiate the vesting period via {begin} after it mints the necessary amount to the contract.\\n     */\\n    constructor(\\n        address hubAddress,\\n        VesterType[] memory vesterTypes,\\n        VesterTypeInfo[] memory vesterTypeInformations\\n    ) {\\n        require(\\n            hubAddress != address(0),\\n            \\\"ScoutHUBVesting::constructor: Misconfiguration\\\"\\n        );\\n        require(\\n            vesterTypes.length == vesterTypeInformations.length,\\n            \\\"ScoutHUBVesting::constructor: Misconfiguration\\\"\\n        );\\n        hub = IERC20(hubAddress);\\n        for (uint256 index = 0; index < vesterTypes.length; index++) {\\n            require(vesterTypeInformations[index].monthsCount != 0, \\\"\\\");\\n            vesterTypeInfos[vesterTypes[index]] = vesterTypeInformations[index];\\n        }\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyAccounts() {\\n        require(msg.sender == tx.origin, \\\"Not allowed origin\\\");\\n        _;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /**\\n     * @dev Returns the amount a user can claim at a given point in time.\\n     *\\n     * Requirements:\\n     * - the vesting period has started\\n     */\\n    function getClaim(address account)\\n        external\\n        view\\n        whenNotPaused\\n        onlyAccounts\\n        returns (uint256 totalVestedAmount)\\n    {\\n        uint256 vestedAmount;\\n        for (uint256 index = 0; index < vest[account].length; index++) {\\n            Vester memory vester = vest[account][index];\\n            (vestedAmount, , ) = getClaimInternal(vester);\\n            totalVestedAmount += vestedAmount;\\n        }\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @dev Allows a user to claim their pending vesting the vested claim\\n     *\\n     * Emits a {Vested} event indicating the user who claimed their vested tokens\\n     * as well as the amount that was vested.\\n     *\\n     * Requirements:\\n     *\\n     * - the vesting period has started\\n     * - the caller must have a non-zero vested amount\\n     */\\n    function claim()\\n        external\\n        whenNotPaused\\n        nonReentrant\\n        onlyAccounts\\n        returns (uint256 totalVestedAmount)\\n    {\\n        address account = msg.sender;\\n        uint256 vestedAmount;\\n        for (uint256 index = 0; index < vest[account].length; index++) {\\n            Vester memory vester = vest[account][index];\\n            if (vester.start != 0 && vester.start <= block.timestamp) {\\n                bool tgeClaimed;\\n                uint256 claimCount;\\n\\n                (vestedAmount, tgeClaimed, claimCount) = getClaimInternal(\\n                    vester\\n                );\\n\\n                if (vestedAmount != 0) {\\n                    vester.claimedAmount += vestedAmount;\\n                    vester.claimedCount += uint64(claimCount);\\n                    if (tgeClaimed) vester.tgeClaimed = tgeClaimed;\\n\\n                    vest[account][index] = vester;\\n\\n                    emit Vested(msg.sender, vester);\\n\\n                    totalVestedAmount += vestedAmount;\\n                }\\n            }\\n        }\\n        require(\\n            totalVestedAmount != 0,\\n            \\\"ScoutHUBVesting::claim: No Claimable Amount\\\"\\n        );\\n        bool success = hub.transfer(msg.sender, totalVestedAmount);\\n        require(success, \\\"ScoutHUBVesting::claim: Transfer failed\\\");\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /**\\n     * @dev Allows the vesting period to be initiated.\\n     *\\n     * Emits a {VestingInitializedIn} event from which the start and\\n     * end can be calculated via it's attached timestamp.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the owner (HUB token)\\n     */\\n    function batchVestFor(\\n        address[] calldata accounts,\\n        Vester[] calldata vesters\\n    ) external whenNotPaused onlyOwner {\\n        require(\\n            accounts.length == vesters.length,\\n            \\\"ScoutHUBVesting::begin: Vesters and Amounts lengths do not match\\\"\\n        );\\n\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            vestForInternal(accounts[i], vesters[i]);\\n        }\\n\\n        emit BatchVestingCreated(block.timestamp, accounts, vesters);\\n    }\\n\\n    /**\\n     * @dev Adds a new vesting schedule to the contract.\\n     *\\n     * Requirements:\\n     * - Only {owner} can call.\\n     */\\n    function vestFor(address account, Vester memory vester)\\n        external\\n        whenNotPaused\\n        onlyOwner\\n    {\\n        vestForInternal(account, vester);\\n\\n        emit VestingCreated(block.timestamp, account, vester);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========== */\\n\\n    function vestForInternal(address account, Vester memory vester) private {\\n        require(\\n            vester.totalAmount != 0,\\n            \\\"ScoutHUBVesting::begin: Incorrect Amount Specified\\\"\\n        );\\n        require(\\n            account != address(0),\\n            \\\"ScoutHUBVesting::begin: Zero Vester Address Specified\\\"\\n        );\\n        require(\\n            vester.start != 0,\\n            \\\"ScoutHUBVesting::begin: Zero Vester Start Specified\\\"\\n        );\\n        require(\\n            vester.start < vester.end,\\n            \\\"ScoutHUBVesting::begin: Wrong Vester Start - End Times\\\"\\n        );\\n        bool beforeAddedToVester = false;\\n        for (uint256 index = 0; index < vest[account].length; index++) {\\n            if (vest[account][index].vesterType == vester.vesterType)\\n                beforeAddedToVester = true;\\n        }\\n        require(\\n            !beforeAddedToVester,\\n            \\\"ScoutHUBVesting::begin: Duplicate Vester Entry Specified\\\"\\n        );\\n        vest[account].push(vester);\\n    }\\n\\n    function getClaimInternal(Vester memory vester)\\n        private\\n        view\\n        returns (\\n            uint256 vestedAmount,\\n            bool tgeClaimed,\\n            uint256 claimableCount\\n        )\\n    {\\n        uint256 blockTime = block.timestamp;\\n        if (blockTime >= vester.end) {\\n            if (vester.claimedCount == 0) {\\n                VesterTypeInfo memory vesterTypeInfo = vesterTypeInfos[\\n                    vester.vesterType\\n                ];\\n                if (!vester.tgeClaimed) {\\n                    vestedAmount = vester.totalAmount;\\n                    tgeClaimed = true;\\n                    claimableCount = vesterTypeInfo.monthsCount;\\n                } else {\\n                    vestedAmount =\\n                        (vester.totalAmount * (1000 - vesterTypeInfo.tgeRate)) /\\n                        1000;\\n                }\\n                claimableCount = vesterTypeInfo.monthsCount;\\n            } else {\\n                VesterTypeInfo memory vesterTypeInfo = vesterTypeInfos[\\n                    vester.vesterType\\n                ];\\n                if (vester.claimedCount == vesterTypeInfo.monthsCount)\\n                    return (vestedAmount, tgeClaimed, claimableCount);\\n                (vestedAmount, claimableCount) = getClaimableCountAndAmount(\\n                    vester.end,\\n                    vester.start,\\n                    vesterTypeInfo.cliff,\\n                    vester.totalAmount,\\n                    vesterTypeInfo.tgeRate,\\n                    vesterTypeInfo.monthsCount,\\n                    vester.vesterType,\\n                    vester.claimedCount\\n                );\\n            }\\n        } else {\\n            VesterTypeInfo memory vesterTypeInfo = vesterTypeInfos[\\n                vester.vesterType\\n            ];\\n            if (vester.claimedCount == vesterTypeInfo.monthsCount)\\n                return (vestedAmount, tgeClaimed, claimableCount);\\n            uint256 cliffTime = vester.start + vesterTypeInfo.cliff;\\n            if (blockTime >= cliffTime) {\\n                if (vester.tgeClaimed) {\\n                    (vestedAmount, claimableCount) = getClaimableCountAndAmount(\\n                        blockTime,\\n                        vester.start,\\n                        vesterTypeInfo.cliff,\\n                        vester.totalAmount,\\n                        vesterTypeInfo.tgeRate,\\n                        vesterTypeInfo.monthsCount,\\n                        vester.vesterType,\\n                        vester.claimedCount\\n                    );\\n                } else {\\n                    tgeClaimed = true;\\n                    vestedAmount =\\n                        (vester.totalAmount * vesterTypeInfo.tgeRate) /\\n                        1000;\\n                    uint256 claimableAmount;\\n                    (\\n                        claimableAmount,\\n                        claimableCount\\n                    ) = getClaimableCountAndAmount(\\n                        blockTime,\\n                        vester.start,\\n                        vesterTypeInfo.cliff,\\n                        vester.totalAmount,\\n                        vesterTypeInfo.tgeRate,\\n                        vesterTypeInfo.monthsCount,\\n                        vester.vesterType,\\n                        vester.claimedCount\\n                    );\\n                    vestedAmount += claimableAmount;\\n                }\\n            } else if (!vester.tgeClaimed) {\\n                vestedAmount =\\n                    (vester.totalAmount * vesterTypeInfo.tgeRate) /\\n                    1000;\\n                tgeClaimed = true;\\n            }\\n        }\\n    }\\n\\n    function getClaimableCountAndAmount(\\n        uint256 blockTime,\\n        uint256 start,\\n        uint256 cliff,\\n        uint256 amount,\\n        uint256 tgeRate,\\n        uint256 monthsCount,\\n        VesterType vesterType,\\n        uint256 claimedCount\\n    ) private view returns (uint256 claimableAmount, uint256 claimableCount) {\\n        if (vesterType == VesterType.CLUBS_CONTENT) {\\n             claimableCount =\\n                (((blockTime - start - cliff) / (3 * 30 days)) + 1) -\\n                claimedCount;\\n        } else {\\n            claimableCount =\\n                (((blockTime - start - cliff) / 30 days) + 1) -\\n                claimedCount;\\n\\n            if (\\n                vesterType == VesterType.PUBLIC ||\\n                vesterType == VesterType.MARKETING ||\\n                vesterType == VesterType.TREASURY\\n            ) claimableCount -= 1;\\n        }\\n\\n        if (claimableCount != 0) {\\n            if (vesterType == VesterType.CLUBS_CONTENT) {\\n                if (claimedCount + claimableCount < 5) {\\n                    claimableAmount = (amount * claimableCount * 10) / 100;\\n                } else {\\n                    if (claimedCount > 4) {\\n                        claimableAmount += (amount * claimableCount * 15) / 100;\\n                    } else {\\n                        claimableAmount =\\n                            (amount *\\n                                (((4 - claimedCount) * 10) +\\n                                    ((claimedCount + claimableCount - 4) *\\n                                        15))) /\\n                            100;\\n                    }\\n                }\\n            } else {\\n                claimableCount = claimableCount > monthsCount\\n                    ? monthsCount\\n                    : claimableCount;\\n                claimableAmount =\\n                    (amount * (claimableCount * (1000 - tgeRate))) /\\n                    (monthsCount * 1000);\\n            }\\n        }\\n    }\\n\\n    fallback() external {\\n        revert(\\\"Something bad happened\\\");\\n    }\\n\\n    /**\\n     *\\n     * @notice toggle pause\\n     * This method using for toggling pause for contract\\n     */\\n    function togglePause() external onlyOwner {\\n        paused() ? _unpause() : _pause();\\n    }\\n\\n    /**\\n     * @notice transfer ownership for vesting rights\\n     * This method using for transfer ownership from old owner to new owner. This can start only by vesting owner\\n     */\\n    function transferVestingOwnership(address newOwner) external {\\n        address oldOwner = msg.sender;\\n        require(\\n            vest[oldOwner].length > 0,\\n            \\\"ScoutHUBVesting::change:No has vesting\\\"\\n        );\\n        for (uint256 index = 0; index < vest[oldOwner].length; index++) {\\n            vest[newOwner][index] = vest[oldOwner][index];\\n        }\\n        delete vest[oldOwner];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IScoutHUBVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IScoutHUBVesting {\\n    enum VesterType {\\n        SEED,\\n        PRIVATE,\\n        PUBLIC,\\n        CLUBS_CONTENT,\\n        TEAM,\\n        ADVISORS,\\n        GAME_STAKING,\\n        MARKETING,\\n        TREASURY\\n    }\\n\\n    /***\\n     * TGE Rate/1000\\n     * For example TGE Rate is %2.5; you set tgeRate '25'\\n     *\\n     */\\n    struct VesterTypeInfo {\\n        uint128 cliff;\\n        uint32 tgeRate;\\n        uint32 monthsCount;\\n    }\\n\\n    /**\\n     * 1 month equals 2592000\\n     *\\n     */\\n    struct Vester {\\n        uint256 totalAmount;\\n        uint256 claimedAmount;\\n        uint64 claimedCount;\\n        uint128 start;\\n        uint128 end;\\n        VesterType vesterType;\\n        bool tgeClaimed;\\n    }\\n\\n    /* ========== FUNCTIONS ========== */\\n\\n    function getClaim(address account)\\n        external\\n        view\\n        returns (uint256 vestedAmount);\\n\\n    // function getTotalClaimCountFor(\\n    //     uint256 start,\\n    //     uint256 end,\\n    //     VesterType vesterType\\n    // ) external view returns (uint256 totalClaimCount);\\n\\n    function claim() external returns (uint256 vestedAmount);\\n\\n    function batchVestFor(\\n        address[] calldata vesterAccounts,\\n        Vester[] calldata vesters\\n    ) external;\\n\\n    function vestFor(address user, Vester memory vester) external;\\n\\n    function transferVestingOwnership(address newOwner) external;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event BatchVestingCreated(\\n        uint256 timeOfBatchInitialization,\\n        address[] accounts,\\n        Vester[] vesters\\n    );\\n\\n    event VestingCreated(\\n        uint256 timeOfVestingInitialization,\\n        address user,\\n        Vester vester\\n    );\\n\\n    event Vested(address indexed from, Vester vester);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hubAddress\",\"type\":\"address\"},{\"internalType\":\"enum IScoutHUBVesting.VesterType[]\",\"name\":\"vesterTypes\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"cliff\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"tgeRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"monthsCount\",\"type\":\"uint32\"}],\"internalType\":\"struct IScoutHUBVesting.VesterTypeInfo[]\",\"name\":\"vesterTypeInformations\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeOfBatchInitialization\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"claimedCount\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"start\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"end\",\"type\":\"uint128\"},{\"internalType\":\"enum IScoutHUBVesting.VesterType\",\"name\":\"vesterType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"tgeClaimed\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IScoutHUBVesting.Vester[]\",\"name\":\"vesters\",\"type\":\"tuple[]\"}],\"name\":\"BatchVestingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"claimedCount\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"start\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"end\",\"type\":\"uint128\"},{\"internalType\":\"enum IScoutHUBVesting.VesterType\",\"name\":\"vesterType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"tgeClaimed\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IScoutHUBVesting.Vester\",\"name\":\"vester\",\"type\":\"tuple\"}],\"name\":\"Vested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeOfVestingInitialization\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"claimedCount\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"start\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"end\",\"type\":\"uint128\"},{\"internalType\":\"enum IScoutHUBVesting.VesterType\",\"name\":\"vesterType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"tgeClaimed\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IScoutHUBVesting.Vester\",\"name\":\"vester\",\"type\":\"tuple\"}],\"name\":\"VestingCreated\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"claimedCount\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"start\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"end\",\"type\":\"uint128\"},{\"internalType\":\"enum IScoutHUBVesting.VesterType\",\"name\":\"vesterType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"tgeClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct IScoutHUBVesting.Vester[]\",\"name\":\"vesters\",\"type\":\"tuple[]\"}],\"name\":\"batchVestFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVestedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVestedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"claimedCount\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"start\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"end\",\"type\":\"uint128\"},{\"internalType\":\"enum IScoutHUBVesting.VesterType\",\"name\":\"vesterType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"tgeClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct IScoutHUBVesting.Vester[]\",\"name\":\"vesters\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferVestingOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"claimedCount\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"start\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"end\",\"type\":\"uint128\"},{\"internalType\":\"enum IScoutHUBVesting.VesterType\",\"name\":\"vesterType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"tgeClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"claimedCount\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"start\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"end\",\"type\":\"uint128\"},{\"internalType\":\"enum IScoutHUBVesting.VesterType\",\"name\":\"vesterType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"tgeClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct IScoutHUBVesting.Vester\",\"name\":\"vester\",\"type\":\"tuple\"}],\"name\":\"vestFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IScoutHUBVesting.VesterType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"vesterTypeInfos\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"cliff\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"tgeRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"monthsCount\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ScoutHUBVesting", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005e3a73b9a4efc5a9b0f7129b0888fd72b5c112bf000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001ae34000000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000004f1a000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000ed4e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000001da9c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000ed4e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000278dersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}