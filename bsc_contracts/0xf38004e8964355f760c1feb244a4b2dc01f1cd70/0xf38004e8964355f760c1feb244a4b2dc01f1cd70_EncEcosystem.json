{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c; \r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n */\r\ncontract Ownable { \r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n  \r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\n/*\r\n* @title  ENC ECO System, build in Biance Network\r\n* @dev    A financial system built on smart contract technology. Open to all, transparent to all.\r\n*         The worlds first decentralized, community support fund\r\n*/\r\ncontract EncEcosystem is Ownable {\r\n    \r\n    IERC20 public invest1ccToken;\r\n    IERC20 public investEncToken;\r\n    using SafeMath for uint256;\r\n\r\n    struct PlayerDeposit {\r\n        uint256 id;\r\n        uint256 amount;\r\n        uint256 total_withdraw;\r\n        uint256 time;\r\n        uint256 period;\r\n        uint256 month;\r\n        uint256 expire;\r\n        uint8 status;\r\n        uint8 is_crowd;\r\n    }\r\n    struct Player {\r\n        address referral;\r\n        uint8 is_supernode;\r\n        uint256 level_id;\r\n        uint256 dividends;\r\n        uint256 referral_bonus;\r\n        uint256 match_bonus;\r\n        uint256 supernode_bonus;\r\n        uint256 total_invested;\r\n        uint256 total_redeem;\r\n        uint256 total_withdrawn;\r\n        uint256 last_payout;\r\n        PlayerDeposit[] deposits;\r\n        address[] referrals;\r\n    }\r\n    \r\n    struct PlayerTotal {\r\n        uint256 total_match_invested;\r\n        uint256 total_dividends;\r\n        uint256 total_referral_bonus;\r\n        uint256 total_match_bonus;\r\n        uint256 total_supernode_bonus;\r\n        uint256 total_period1_invested;\r\n        uint256 total_period2_invested;\r\n        uint256 total_period3_invested;\r\n        uint256 total_period4_invested;\r\n        uint256 total_period1_devidends;\r\n        uint256 total_period2_devidends;\r\n        uint256 total_period3_devidends;\r\n        uint256 total_period4_devidends;\r\n    }\r\n    \r\n    /* Deposit smart contract address */\r\n    address public invest_1cc_token_address = 0x3DEe913068de010443A94f3b376C83850C299FFb;\r\n    uint256 public invest_1cc_token_decimal = 4;\r\n    address public invest_enc_token_address = 0x13b80d52aBf247284b0A0cB1F7Cd5f8997de9B21;\r\n    uint256 public invest_enc_token_decimal = 8;\r\n    \r\n    /* Token (1CC) burning address */\r\n    address public burning_address = address(0x0000000000000000000000000000000000000001);\r\n\r\n    /* Platform bonus address */\r\n    address public platform_bonus_address = 0x6Fc447828B90d7D7f6C84d5fa688FF3E4ED3763C;\r\n    /* Platform bonus rate percent(%) */\r\n    uint256 constant public platform_bonus_rate = 3;\r\n    \r\n    uint256 public total_investors;\r\n    uint256 public total_invested;\r\n    uint256 public total_withdrawn;\r\n    uint256 public total_redeem;\r\n    uint256 public total_dividends;\r\n    uint256 public total_referral_bonus;\r\n    uint256 public total_match_bonus;\r\n    uint256 public total_supernode_bonus;\r\n    uint256 public total_platform_bonus;\r\n    \r\n    /* Current joined supernode count */\r\n    uint256 public total_supernode_num; \r\n    \r\n    /* Total supernode join limit number */\r\n    uint256 constant public SUPERNODE_LIMIT_NUM = 100;\r\n    uint256[] public supernode_period_ids =         [1,2,3,4,5,6];     //period ids\r\n    uint256[] public supernode_period_pays =        [1,1,1,2,2,2];     //period pays\r\n    uint256[] public supernode_period_amounts =     [5000,6000,7000,500,600,700];  //period amount\r\n    uint256[] public supernode_period_limits =      [20,30,50,10,20,30];    //period limit\r\n    //supernode total numer in which period\r\n    uint256[] public total_supernode_num_periods =  [20,30,50,0,0,0];\r\n    \r\n    /* Super Node bonus rate */\r\n    uint256 constant public supernode_bonus_rate = 20;\r\n    \r\n    /* Referral bonuses data  define*/\r\n    uint8[] public referral_bonuses = [10,5];\r\n    \r\n    /* Invest period and profit parameter definition */\r\n    uint256 constant public invest_early_redeem_feerate = 15;       //invest early redeem fee rate(%)\r\n    uint256[] public invest_period_ids =         [1,   2,   3,   4];   //period ids\r\n    uint256[] public invest_period_months =      [3,   6,   12,  24];   //period months\r\n    uint256[] public invest_period_rates =       [600, 700, 800, 900];   //Ten thousand of month' rate\r\n    uint256[] public invest_period_totals =      [0,   0,   0,   0];         //period total invested\r\n    uint256[] public invest_period_devidends =   [0,   0,   0,   0];         //period total devidends\r\n    \r\n    /* withdraw fee amount (0.8 1CC)) */\r\n    uint256 constant public withdraw_fee_amount = 8000;\r\n    \r\n    /* yield reduce project section config, item1: total yield, item2: reduce rate */\r\n    uint256[] public yield_reduce_section1 = [30000, 30];\r\n    uint256[] public yield_reduce_section2 = [60000, 30];\r\n    uint256[] public yield_reduce_section3 = [90000, 30];\r\n    uint256[] public yield_reduce_section4 = [290000, 30];\r\n    uint256[] public yield_reduce_section5 = [600000, 30];\r\n    uint256[] public yield_reduce_section6 = [900000, 30];\r\n    uint256[] public yield_reduce_section7 = [1400000, 30];\r\n    uint256[] public yield_reduce_section8 = [2000000, 30];\r\n    \r\n    /* Team level data definition */\r\n    uint256[] public team_level_ids =     [1,2,3,4,5,6];\r\n    uint256[] public team_level_amounts = [1000,3000,5000,10000,20000,50000];\r\n    uint256[] public team_level_bonuses = [2,4,6,8,10,12];\r\n    \r\n    /* Crowd period data definition */\r\n    uint256[] public crowd_period_ids =    [1,2,3,4,5,6,7];\r\n    uint256[] public crowd_period_rates =  [4,5,6,20,30,40,50];\r\n    uint256[] public crowd_period_limits = [50000,30000,20000,10000,20000,30000,40000];\r\n    \r\n    /* Total (period) crowd number*/\r\n    uint256[] public total_crowd_num_periods = [50000,30000,20000,0,0,0,0];\r\n\r\n    /* user invest min amount */\r\n    uint256 constant public INVEST_MIN_AMOUNT = 10000000;\r\n    /* user invest max amount */\r\n    uint256 constant public INVEST_MAX_AMOUNT = 100000000000000;\r\n    /* user crowd limit amount */\r\n    uint256 constant public SUPERNODE_LIMIT_AMOUNT = 5000;\r\n    /* user crowd period(month) */\r\n    uint256 constant public crowd_period_month = 24;\r\n    uint256 constant public crowd_period_start = 1634313600;\r\n    \r\n    /* Mapping data list define */\r\n    mapping(address => Player) public players;\r\n    mapping(address => PlayerTotal) public playerTotals;\r\n    mapping(uint256 => address) public addrMap;\r\n    address[] public supernodes;\r\n    \r\n    event Deposit(address indexed addr, uint256 amount, uint256 month);\r\n    event Withdraw(address indexed addr, uint256 amount);\r\n    event Crowd(address indexed addr, uint256 period,uint256 amount);\r\n    event SuperNode(address indexed addr, uint256 _period, uint256 amount);\r\n    event DepositRedeem(uint256 invest_id);\r\n    event ReferralPayout(address indexed addr, uint256 amount, uint8 level);\r\n    event SetReferral(address indexed addr,address refferal);\r\n\t\r\n    /* Migration action deadLine status*/\r\n    uint256 public MIGRATION_DEADLINE = 0;\r\n\r\n    /* Migrate contract data event defined */\r\n    event MigrateContract(uint256 _total_invested, uint256 _total_investors, uint256 _total_withdrawn, uint256 _total_dividends, uint256 _total_referral_bonus, uint256 _total_platform_bonus, uint256 _total_supernode_num, uint256 _total_holder_bonus, uint256 _total_match_bonus);\r\n    event MigratePlayer(address _addr, address _referral, uint8 _is_supernode, uint256 _dividends, uint256 _referral_bonus, uint256 _match_bonus, uint256 _supernode_bonus,uint256 _last_payout, uint256 _total_invested, uint256 _total_withdrawn);\r\n    event MigratePlayerTotal(address _addr, uint256 _total_match_invested, uint256 _total_dividends, uint256 _total_referral_bonus, uint256 _total_match_bonus, uint256 _total_supernode_bonus);\r\n    event MigratePlayerTotalPeriod(address _addr,uint256 _total_period1_invested,uint256 _total_period2_invested,uint256 _total_period3_invested,uint256 _total_period4_invested,uint256 _total_period1_devidends,uint256 _total_period2_devidends,uint256 _total_period3_devidends,uint256 _total_period4_devidends);\r\n    event MigrateDeposit(address _addr, uint256 _time, uint256 _amount, uint256 _total_withdraw,uint256 _month,uint8 _is_crowd, uint8 _status);\r\n    event MigrateDepositPeriod(uint256 _period_total1, uint256 _period_total2, uint256 _period_total3,uint256 _period_total4,uint256 _period_devidend1, uint256 _period_devidend2, uint256 _period_devidend3,uint256 _period_devidend4);\r\n    event MigrateStakeAddress(address stakeAddress);\r\n    event MigrateEncAddress(address encAddress);\r\n    event MigrateDeadline();\r\n\r\n    constructor() public {\r\n        \r\n        /* Create invest token instace  */\r\n        invest1ccToken = IERC20(invest_1cc_token_address);\r\n        investEncToken = IERC20(invest_enc_token_address);\r\n    }\r\n    \r\n    /* Function to receive Ether. msg.data must be empty */\r\n    receive() external payable {}\r\n\r\n    /* Fallback function is called when msg.data is not empty */ \r\n    fallback() external payable {}\r\n\r\n    function getBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n\t    /*\r\n    * @dev user do set refferal action\r\n    */\r\n    function setReferral(address _referral)\r\n        payable\r\n        external \r\n    {\r\n        Player storage player = players[msg.sender];\r\n        require(player.referral == address(0), \"Referral has been set\");\r\n        \r\n        require(_referral != address(0), \"Invalid Referral address\");\r\n        \r\n        Player storage ref_player = players[_referral];\r\n        require(ref_player.referral != address(0) || _referral == platform_bonus_address, \"Referral address not activated yet\");\r\n        \r\n        _setReferral(msg.sender,_referral);\r\n        \r\n        emit SetReferral(msg.sender,_referral);\r\n    }\r\n    \r\n    /*\r\n    * @dev user do join shareholder action, to join SUPERNODE\r\n    */ \r\n    function superNode(address _referral, uint256 _period, uint256 _amount) \r\n        payable\r\n        external \r\n    {\r\n        Player storage player = players[msg.sender];\r\n        require(player.is_supernode == 0, \"Already a supernode\");\r\n        \r\n        require(_period >= 1 && _period <= 6 , \"Invalid Period Id\");\r\n        \r\n        if(_period > 1){\r\n            uint256 _lastPeriodLimit = supernode_period_limits[_period-2];\r\n            require(total_supernode_num_periods[_period-2] >= _lastPeriodLimit, \"Current round not started yet \");\r\n        }\r\n        \r\n        uint256 _periodAmount = supernode_period_amounts[_period-1];\r\n        require(_amount == _periodAmount, \"Not match the current round limit\");\r\n        \r\n        //valid period remain\r\n        uint256 _periodRemain = supernode_period_limits[_period-1] - total_supernode_num_periods[_period-1];\r\n        require(_periodRemain > 0, \"Out of current period limit\");\r\n\r\n        uint256 supernode_period_pay = supernode_period_pays[_period-1];\r\n\r\n        /* Transfer user address token to 1cc contract address*/\r\n        if(supernode_period_pay==1){\r\n            /* format token amount */\r\n            uint256 token_amount = _getTokenAmount(_amount,invest_1cc_token_decimal);\r\n            require(invest1ccToken.transferFrom(msg.sender, burning_address, token_amount), \"transferFrom failed\");\r\n        }\r\n\r\n        /* Transfer user address token to enc contract address*/\r\n        if(supernode_period_pay==2){\r\n            /* format token amount */\r\n            uint256 token_amount = _getTokenAmount(_amount,invest_enc_token_decimal);\r\n            require(investEncToken.transferFrom(msg.sender, burning_address, token_amount), \"transferFrom failed\");\r\n        }\r\n        \r\n        _setReferral(msg.sender, _referral);\r\n        \r\n        /* set the player of supernodes roles */\r\n        player.is_supernode = 1;\r\n        total_supernode_num += 1;\r\n        total_supernode_num_periods[_period-1] += 1;\r\n    \r\n        /* push user to shareholder list*/\r\n        supernodes.push(msg.sender);\r\n\r\n        emit SuperNode(msg.sender, _period, _amount);\r\n    }\r\n    \r\n    /*\r\n    * @dev user do crowd action, to get enc\r\n    */\r\n    function crowd(address _referral, uint256 _period, uint256 _amount)\r\n        payable\r\n        external \r\n    {\r\n        require(_period >= 1 && _period <= 7 , \"Invalid Period Id\");\r\n        \r\n        if(_period > 1){\r\n            uint256 _lastPeriodLimit = crowd_period_limits[_period-2];\r\n            require(total_crowd_num_periods[_period-2] >= _lastPeriodLimit, \"Current round not started yet \");\r\n        }\r\n        \r\n        //valid period remain\r\n        uint256 _periodRemain = crowd_period_limits[_period-1] - total_crowd_num_periods[_period-1];\r\n        require(_periodRemain > 0, \"Out of current period limit\");\r\n\r\n        uint256 _periodRate = crowd_period_rates[_period-1];\r\n        \r\n        uint256 token_enc_amount = _getTokenAmount(_amount,invest_enc_token_decimal);\r\n        uint256 token_1cc_amount = _getTokenAmount(_amount.mul(_periodRate),invest_1cc_token_decimal);\r\n        \r\n        /* Transfer user address token to burning address*/\r\n        require(invest1ccToken.transferFrom(msg.sender, burning_address, token_1cc_amount), \"transferFrom failed\");\r\n\r\n        _setReferral(msg.sender, _referral);\r\n        \r\n        /* get the period total time (total seconds) */\r\n        uint256 _period_ = 4;\r\n        uint256 _month = crowd_period_month;\r\n        uint256 period_time = _month.mul(30).mul(86400);\r\n        \r\n        //updater period total number\r\n        total_crowd_num_periods[_period-1] += _amount;\r\n        \r\n        Player storage player = players[msg.sender];\r\n        \r\n        /* update total investor count */\r\n        if(player.deposits.length == 0){\r\n            total_investors += 1;\r\n            addrMap[total_investors] = msg.sender;\r\n        }\r\n        \r\n        uint256 _id = player.deposits.length + 1;\r\n        player.deposits.push(PlayerDeposit({\r\n            id: _id,\r\n            amount: token_enc_amount,\r\n            total_withdraw: 0,\r\n            time: uint256(block.timestamp),\r\n            period: _period_,\r\n            month: _month,\r\n            expire: uint256(block.timestamp).add(period_time),\r\n            status: 0,\r\n            is_crowd: 1\r\n        }));\r\n        \r\n        //update total invested\r\n        player.total_invested += token_enc_amount;\r\n        total_invested += token_enc_amount;\r\n        \r\n        invest_period_totals[_period_-1] += token_enc_amount;\r\n        \r\n        //update player period total invest data\r\n        _updatePlayerPeriodTotalInvestedData(msg.sender, _period_, token_enc_amount, 1);\r\n        \r\n        /* update user referral and match invested amount*/\r\n        _updateReferralMatchInvestedAmount(msg.sender, token_enc_amount, 1);\r\n\r\n        emit Crowd(msg.sender, _period, _amount);\r\n    }\r\n    \r\n    \r\n    /*\r\n    * @dev user do deposit action,grant the referrs bonus,grant the shareholder bonus,grant the match bonus\r\n    */\r\n    function deposit(address _referral, uint256 _amount, uint256 _period) \r\n        external\r\n        payable\r\n    {\r\n        require(_period >= 1 && _period <= 4 , \"Invalid Period Id\");\r\n        \r\n        uint256 _month = invest_period_months[_period-1];\r\n        \r\n        /* format token amount  */\r\n        uint256 _decimal = invest_enc_token_decimal - invest_1cc_token_decimal;\r\n        uint256 token_enc_amount = _amount;\r\n        uint256 token_1cc_amount = _amount.div(10**_decimal);\r\n        \r\n        require(token_enc_amount >= INVEST_MIN_AMOUNT, \"Minimal deposit: 0.1 enc\");\r\n        require(token_enc_amount <= INVEST_MAX_AMOUNT, \"Maxinum deposit: 1000000 enc\");\r\n\r\n        Player storage player = players[msg.sender];\r\n        require(player.deposits.length < 2000, \"Max 2000 deposits per address\");\r\n        \r\n        /* Transfer user address token to contract address*/\r\n        require(investEncToken.transferFrom(msg.sender, address(this), token_enc_amount), \"transferFrom failed\");\r\n        require(invest1ccToken.transferFrom(msg.sender, burning_address, token_1cc_amount), \"transferFrom failed\");\r\n\r\n        _setReferral(msg.sender, _referral);\r\n        \r\n        /* update total investor count */\r\n        if(player.deposits.length == 0){\r\n            total_investors += 1;\r\n            addrMap[total_investors] = msg.sender;\r\n        }\r\n        \r\n        /* get the period total time (total secones) */\r\n        uint256 period_time = _month.mul(30).mul(86400);\r\n        \r\n        uint256 _id = player.deposits.length + 1;\r\n        player.deposits.push(PlayerDeposit({\r\n            id: _id,\r\n            amount: token_enc_amount,\r\n            total_withdraw: 0,\r\n            time: uint256(block.timestamp),\r\n            period: _period,\r\n            month: _month,\r\n            expire:uint256(block.timestamp).add(period_time),\r\n            status: 0,\r\n            is_crowd: 0\r\n        }));\r\n\r\n        player.total_invested += token_enc_amount;\r\n        total_invested += token_enc_amount;\r\n        \r\n        invest_period_totals[_period-1] += token_enc_amount;\r\n        \r\n        //update player period total invest data\r\n        _updatePlayerPeriodTotalInvestedData(msg.sender, _period, token_enc_amount, 1);\r\n        \r\n        /* update user referral and match invested amount*/\r\n        _updateReferralMatchInvestedAmount(msg.sender, token_enc_amount, 1);\r\n\r\n        emit Deposit(msg.sender, _amount, _month);\r\n    }\r\n    \r\n    \r\n    /*\r\n    * @dev user do withdraw action, tranfer the total profit to user account, grant rereferral bonus, grant match bonus, grant shareholder bonus\r\n    */\r\n    function withdraw() \r\n        payable \r\n        external \r\n    {\r\n        /* get contract pool balance*/\r\n        uint256 _contract_balance = investEncToken.balanceOf(address(this));\r\n        require(_contract_balance >= total_invested, \"Insufficient Pool Balance\");\r\n        uint256 _contract_pool_balance = _contract_balance - total_invested;\r\n\r\n        /* update user dividend data */\r\n        _payout(msg.sender);\r\n        \r\n        Player storage player = players[msg.sender];\r\n\r\n        uint256 _amount = player.dividends + player.referral_bonus + player.match_bonus + player.supernode_bonus;\r\n        /* verify contract pool balance is enough or not*/\r\n        require(_contract_pool_balance >= _amount, \"Insufficient Pool Balance\");\r\n        require(_amount >= 1000000, \"Minimal payout: 0.01 ENC\");\r\n        \r\n        /* format deposit token amount  */\r\n        uint256 token_enc_amount = _amount;\r\n    \r\n        /* process token transfer action */\r\n        require(investEncToken.approve(address(this), token_enc_amount), \"approve failed\");\r\n        require(investEncToken.transferFrom(address(this), msg.sender, token_enc_amount), \"transferFrom failed\");\r\n\r\n        /*transfer service fee to contract*/\r\n        uint256 token_1cc_fee_amount = withdraw_fee_amount;\r\n        require(invest1ccToken.transferFrom(msg.sender, burning_address, token_1cc_fee_amount), \"transferFrom failed\");\r\n        \r\n        uint256 _dividends = player.dividends;\r\n                \r\n        /* Update user total payout data */\r\n        _updatePlayerTotalPayout(msg.sender, token_enc_amount);\r\n\r\n        /* Grant referral bonus */\r\n        _referralPayout(msg.sender, _dividends);\r\n        \r\n        /* Grant super node bonus */\r\n        _superNodesPayout(_dividends);\r\n        \r\n        /* Grant team match bonus*/\r\n        _matchPayout(msg.sender, _dividends);\r\n\r\n        emit Withdraw(msg.sender, token_enc_amount);\r\n    }\r\n    \r\n    /*\r\n    * @dev user do deposit redeem action,transfer the expire deposit's amount to user account\r\n    */\r\n    function depositRedeem(uint256 _invest_id)\r\n        payable \r\n        external \r\n    {\r\n        Player storage player = players[msg.sender];\r\n        \r\n        require(player.deposits.length >= _invest_id && _invest_id > 0, \"Valid deposit id\");\r\n        uint256 _index = _invest_id - 1;\r\n        \r\n        require(player.deposits[_index].status == 0, \"Invest is redeemed\");\r\n        \r\n        //crowded deposit can't do early redeem action\r\n        //if(player.deposits[_index].is_crowd == 1) {\r\n        require(player.deposits[_index].expire < block.timestamp, \"Invest not expired\");\r\n        //}\r\n        \r\n        /* formt deposit token amount */\r\n        uint256 token_enc_amount = player.deposits[_index].amount;\r\n        \r\n        //deposit is not expired, deduct the fee (10%)\r\n        if(player.deposits[_index].expire > block.timestamp){\r\n            //token_enc_amount = token_enc_amount * (100 - invest_early_redeem_feerate) / 100;\r\n        }\r\n        \r\n        /* process token transfer action*/\r\n        require(investEncToken.approve(address(this), token_enc_amount), \"approve failed\");\r\n        require(investEncToken.transferFrom(address(this), msg.sender, token_enc_amount), \"transferFrom failed\");\r\n        \r\n        /* update deposit status in redeem */\r\n        player.deposits[_index].status = 1;\r\n        \r\n        uint256 _amount = player.deposits[_index].amount;\r\n        \r\n        /* update user token balance*/\r\n        player.total_invested -= _amount;\r\n        \r\n        /* update total invested/redeem amount */\r\n        total_invested -= _amount;\r\n        total_redeem += _amount;\r\n        \r\n        /* update invest period total invested amount*/\r\n        uint256 _period = player.deposits[_index].period;\r\n        invest_period_totals[_period-1] -= _amount;\r\n        \r\n        //update player period total invest data\r\n        _updatePlayerPeriodTotalInvestedData(msg.sender, _period, _amount, -1);\r\n        \r\n        /* update user referral and match invested amount*/\r\n        _updateReferralMatchInvestedAmount(msg.sender, _amount, -1);\r\n\r\n        emit DepositRedeem(_invest_id);\r\n    }\r\n     \r\n    /*\r\n    * @dev Update Referral Match invest amount, total investor number, map investor address index\r\n    */\r\n    function _updateReferralMatchInvestedAmount(address _addr,uint256 _amount,int8 _opType) \r\n        private\r\n    {\r\n        if(_opType > 0) {\r\n            playerTotals[_addr].total_match_invested += _amount;\r\n            \r\n            address ref = players[_addr].referral;\r\n            while(true){\r\n                if(ref == address(0)) break;\r\n                \r\n                playerTotals[ref].total_match_invested += _amount;\r\n                ref = players[ref].referral;\r\n            }\r\n        }else{\r\n            playerTotals[_addr].total_match_invested -= _amount;\r\n            \r\n            address ref = players[_addr].referral;\r\n            while(true){\r\n                if(ref == address(0)) break;\r\n                \r\n                playerTotals[ref].total_match_invested -= _amount;\r\n                ref = players[ref].referral;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * @dev Update user total payout data\r\n    */\r\n    function _updatePlayerTotalPayout(address _addr,uint256 token_amount) \r\n        private\r\n    {\r\n        \r\n        Player storage player = players[_addr];\r\n        PlayerTotal storage playerTotal = playerTotals[_addr];\r\n        \r\n        /* update user Withdraw total amount*/\r\n        player.total_withdrawn += token_amount;\r\n        \r\n        playerTotal.total_dividends += player.dividends;\r\n        playerTotal.total_referral_bonus += player.referral_bonus;\r\n        playerTotal.total_match_bonus += player.match_bonus;\r\n        playerTotal.total_supernode_bonus += player.supernode_bonus;\r\n        \r\n        /* update platform total data*/\r\n        total_withdrawn += token_amount;\r\n        total_dividends += player.dividends;\r\n        total_referral_bonus += player.referral_bonus;\r\n        total_match_bonus += player.match_bonus;\r\n        total_supernode_bonus += player.supernode_bonus;\r\n        uint256 _platform_bonus = (token_amount * platform_bonus_rate / 100);\r\n        total_platform_bonus += _platform_bonus;\r\n        \r\n        /* update platform address bonus*/\r\n        players[platform_bonus_address].match_bonus += _platform_bonus;\r\n        \r\n        /* reset user bonus data */\r\n        player.dividends = 0;\r\n        player.referral_bonus = 0;\r\n        player.match_bonus = 0;\r\n        player.supernode_bonus = 0;\r\n    }\r\n    \r\n    \r\n    /*\r\n    * @dev get user deposit expire status\r\n    */\r\n    function _getExpireStatus(address _addr)\r\n        view\r\n        private\r\n        returns(uint256 value)\r\n    {\r\n        Player storage player = players[_addr];\r\n        uint256 _status = 1;\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            \r\n            PlayerDeposit storage dep = player.deposits[i];\r\n\r\n            uint256 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n            uint256 to = block.timestamp > dep.expire ? dep.expire : uint256(block.timestamp);\r\n\r\n            if(from < to && dep.status == 0) {\r\n                _status = 0;\r\n                break;\r\n            }\r\n        }\r\n        return _status;\r\n    }\r\n    \r\n    /*\r\n    * @dev update user referral data\r\n    */\r\n    function _setReferral(address _addr, address _referral) \r\n        private \r\n    {\r\n        /* if user referral is not set */\r\n        if(players[_addr].referral == address(0) && _referral != _addr && _referral != address(0)) {\r\n            \r\n            Player storage ref_player = players[_referral];\r\n            \r\n            if(ref_player.referral != address(0) || _referral == platform_bonus_address){\r\n                \r\n                players[_addr].referral = _referral;\r\n\r\n                /* update user referral address list*/\r\n                players[_referral].referrals.push(_addr);\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /*\r\n    * @dev Grant user referral bonus in user withdraw\r\n    */\r\n    function _referralPayout(address _addr, uint256 _amount) \r\n        private\r\n    {\r\n        address ref = players[_addr].referral;\r\n        uint256 _day_payout = _payoutOfDay(_addr);\r\n        if(_day_payout == 0) return;\r\n        \r\n        for(uint8 i = 0; i < referral_bonuses.length; i++) {\r\n        \r\n            if(ref == address(0)) break;\r\n\r\n            uint256 _ref_day_payout = _payoutOfDay(ref);\r\n            uint256 _token_amount = _amount;\r\n            \r\n            /* user bonus double burn */\r\n            if(_ref_day_payout * 2 < _day_payout){\r\n                _token_amount = _token_amount * (_ref_day_payout * 2) / _day_payout;\r\n            }\r\n            \r\n             //validate account deposit is all expired or not\r\n            uint256 _is_expire = _getExpireStatus(ref);\r\n            if(_is_expire == 0) {\r\n                uint256 bonus = _token_amount * referral_bonuses[i] / 100;\r\n                players[ref].referral_bonus += bonus;\r\n            }\r\n            ref = players[ref].referral;\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * @dev  Grant shareholder full node bonus in user withdraw\r\n    */\r\n    function _superNodesPayout(uint256 _amount)\r\n        private\r\n    {\r\n        uint256 _supernode_num = supernodes.length;\r\n        if(_supernode_num == 0) return;\r\n        \r\n        uint256 bonus = _amount * supernode_bonus_rate / 100 / _supernode_num;\r\n        for(uint256 i = 0; i < _supernode_num; i++) {\r\n            address _addr = supernodes[i];\r\n            players[_addr].supernode_bonus += bonus;\r\n        }\r\n    }\r\n    \r\n\r\n    /*\r\n    * @dev Grant Match bonus in user withdraw\r\n    */\r\n    function _matchPayout(address _addr,uint256 _amount) \r\n        private\r\n    {\r\n        /* update player team level */\r\n        _upgradePlayerTeamLevel(_addr);\r\n        uint256 last_level_id = players[_addr].level_id;\r\n        \r\n        /* player is max team level, quit */\r\n        if(last_level_id == team_level_ids[team_level_ids.length-1]) return;\r\n        \r\n        address ref = players[_addr].referral;\r\n        \r\n        while(true){\r\n            \r\n            if(ref == address(0)) break;\r\n            \r\n            //validate account deposit is all expired or not\r\n            uint256 _is_expire = _getExpireStatus(ref);\r\n            \r\n            /* upgrade player team level id*/\r\n            _upgradePlayerTeamLevel(ref);\r\n            \r\n            if(players[ref].level_id > last_level_id){\r\n                \r\n                uint256 last_level_bonus = 0;\r\n                if(last_level_id > 0){\r\n                    last_level_bonus = team_level_bonuses[last_level_id-1];\r\n                }\r\n                uint256 cur_level_bonus = team_level_bonuses[players[ref].level_id-1];\r\n                uint256 bonus_amount = _amount * (cur_level_bonus - last_level_bonus) / 100;\r\n                \r\n                if(_is_expire==0){\r\n                    players[ref].match_bonus += bonus_amount;\r\n                }\r\n                \r\n                last_level_id = players[ref].level_id;\r\n                \r\n                /* referral is max team level, quit */\r\n                if(last_level_id == team_level_ids[team_level_ids.length-1]) \r\n                    break;\r\n            }\r\n            ref = players[ref].referral;\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * @dev upgrade player team level id\r\n    */    \r\n    function _upgradePlayerTeamLevel(address _addr) \r\n        private\r\n    {\r\n        /* get community total invested*/\r\n        uint256 community_total_invested = _getCommunityTotalInvested(_addr);\r\n        \r\n        uint256 level_id = 0;\r\n        for(uint8 i=0; i < team_level_ids.length; i++){\r\n            \r\n            uint256 _team_level_amount = _getTokenAmount(team_level_amounts[i], invest_enc_token_decimal);\r\n            if(community_total_invested >= _team_level_amount){\r\n                level_id = team_level_ids[i];\r\n            }\r\n        }\r\n        players[_addr].level_id = level_id;\r\n    }\r\n    \r\n    /*\r\n    * @dev Get community total invested\r\n    */\r\n    function _getCommunityTotalInvested(address _addr) \r\n        view\r\n        private\r\n        returns(uint256 value)\r\n    {\r\n        address[] memory referrals = players[_addr].referrals;\r\n        \r\n        uint256 nodes_max_invested = 0;\r\n        uint256 nodes_total_invested = 0;\r\n        for(uint256 i=0;i<referrals.length;i++){\r\n            address ref = referrals[i];\r\n            nodes_total_invested += playerTotals[ref].total_match_invested;\r\n            if(playerTotals[ref].total_match_invested > nodes_max_invested){\r\n                nodes_max_invested = playerTotals[ref].total_match_invested;\r\n            }\r\n        }\r\n        return (nodes_total_invested - nodes_max_invested);\r\n    }\r\n\r\n    /*\r\n    * @dev Get player referral is contains\r\n    */\r\n    function _isReferralContains(address _refAddr,address _addr) \r\n        view\r\n        private\r\n        returns(uint256 value)\r\n    {\r\n        address[] memory referrals = players[_refAddr].referrals;\r\n        uint256 is_included = 0;\r\n        for(uint256 i=0;i<referrals.length;i++){\r\n            address childAddr = referrals[i];\r\n            if(childAddr==_addr){\r\n                is_included=1;\r\n            }\r\n        }\r\n        return is_included;\r\n    }\r\n\r\n    /*\r\n    * @dev user withdraw, user devidends data update\r\n    */\r\n    function _payout(address _addr) \r\n        private \r\n    {\r\n        uint256 payout = this.payoutOf(_addr);\r\n        if(payout > 0) {\r\n            \r\n            _updateTotalPayout(_addr);\r\n            \r\n            players[_addr].last_payout = uint256(block.timestamp);\r\n            players[_addr].dividends += payout;\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * @dev format token amount with token decimal\r\n    */\r\n    function _getTokenAmount(uint256 _amount,uint256 _token_decimal) \r\n        pure\r\n        private\r\n        returns(uint256 token_amount)\r\n    {\r\n        uint256 token_decimals = 10 ** _token_decimal;\r\n        token_amount = _amount * token_decimals;   \r\n        return token_amount;\r\n    }\r\n    \r\n    /*\r\n    * @dev update user total withdraw data\r\n    */\r\n    function _updateTotalPayout(address _addr)\r\n        private\r\n    {\r\n        Player storage player = players[_addr];\r\n\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            \r\n            PlayerDeposit storage dep = player.deposits[i];\r\n\r\n            uint256 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n            uint256 to = block.timestamp > dep.expire ? dep.expire : uint256(block.timestamp);\r\n\r\n            if(from < to && dep.status == 0) { \r\n                \r\n                uint256 _day_payout = _getInvestDayPayoutOf(dep.amount,dep.period);\r\n                uint256 _dep_payout = _day_payout * (to - from) / 86400;\r\n                uint256 _period = player.deposits[i].period;\r\n                player.deposits[i].total_withdraw += _dep_payout;\r\n                invest_period_devidends[_period-1]+= _dep_payout;\r\n                \r\n                //update player period total devidend data\r\n                _updatePlayerPeriodTotalDevidendsData(msg.sender,_period,_dep_payout);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * @dev update player period total invest data\r\n    */\r\n    function _updatePlayerPeriodTotalInvestedData(address _addr,uint256 _period,uint256 _token_amount,int8 _opType)\r\n        private\r\n    {\r\n        if(_opType==-1){\r\n            if(_period==1){\r\n                playerTotals[_addr].total_period1_invested -= _token_amount;\r\n                return;\r\n            }\r\n            if(_period==2){\r\n                playerTotals[_addr].total_period2_invested -= _token_amount;\r\n                return;\r\n            }\r\n            if(_period==3){\r\n                playerTotals[_addr].total_period3_invested -= _token_amount;\r\n                return;\r\n            }\r\n            if(_period==4){\r\n                playerTotals[_addr].total_period4_invested -= _token_amount;\r\n                return;\r\n            }\r\n        }else{\r\n            if(_period==1){\r\n                playerTotals[_addr].total_period1_invested += _token_amount;\r\n                return;\r\n            }\r\n            if(_period==2){\r\n                playerTotals[_addr].total_period2_invested += _token_amount;\r\n                return;\r\n            }\r\n            if(_period==3){\r\n                playerTotals[_addr].total_period3_invested += _token_amount;\r\n                return;\r\n            }\r\n            if(_period==4){\r\n                playerTotals[_addr].total_period4_invested += _token_amount;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /*\r\n    * @dev update player period total devidend data\r\n    */\r\n    function _updatePlayerPeriodTotalDevidendsData(address _addr,uint256 _period,uint256 _dep_payout)\r\n        private\r\n    {\r\n        if(_period==1){\r\n            playerTotals[_addr].total_period1_devidends += _dep_payout;\r\n            return;\r\n        }\r\n        if(_period==2){\r\n            playerTotals[_addr].total_period2_devidends += _dep_payout;\r\n            return;\r\n        }\r\n        if(_period==3){\r\n            playerTotals[_addr].total_period3_devidends += _dep_payout;\r\n            return;\r\n        }\r\n        if(_period==4){\r\n            playerTotals[_addr].total_period4_devidends += _dep_payout;\r\n            return;\r\n        }\r\n    }\r\n    \r\n    \r\n    /*\r\n    * @dev get the invest period rate, if total yield reached reduce limit, invest day rate will be reduce\r\n    */\r\n    function _getInvestDayPayoutOf(uint256 _amount, uint256 _period) \r\n        view \r\n        private \r\n        returns(uint256 value)\r\n    {\r\n        /* get invest period base rate*/\r\n        uint256 period_month_rate = invest_period_rates[_period-1];\r\n        \r\n        /* format amount with token decimal */\r\n        uint256 token_amount = _amount;\r\n        value = token_amount * period_month_rate / 30 / 10000;\r\n        \r\n        if(value > 0){\r\n            \r\n            /* total yield reached 30,000,start section1 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section1[0], invest_enc_token_decimal)){\r\n                value = value * (100 - yield_reduce_section1[1]) / 100;\r\n            }\r\n            /* total yield reached 60,000,start section2 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section2[0], invest_enc_token_decimal)){\r\n                value = value * (100 - yield_reduce_section2[1]) / 100;\r\n            }\r\n            /* total yield reached 90,000,start section3 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section3[0], invest_enc_token_decimal)){\r\n                value = value * (100 - yield_reduce_section3[1]) / 100;\r\n            }\r\n            /* total yield reached 290,000,start section4 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section4[0], invest_enc_token_decimal)){\r\n                value = value * (100 - yield_reduce_section4[1]) / 100;\r\n            }\r\n            /* total yield reached 600,000,start section5 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section5[0], invest_enc_token_decimal)){\r\n                value = value * (100 - yield_reduce_section5[1]) / 100;\r\n            }\r\n            /* total yield reached 900,000,start section6 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section6[0], invest_enc_token_decimal)){\r\n                value = value * (100 - yield_reduce_section6[1]) / 100;\r\n            }\r\n            /* total yield reached 1400,000,start section7 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section7[0], invest_enc_token_decimal)){\r\n                value = value * (100 - yield_reduce_section7[1]) / 100;\r\n            }\r\n            /* total yield reached 2000,000,start section8 reduce */\r\n            if(total_withdrawn >= _getTokenAmount(yield_reduce_section8[0], invest_enc_token_decimal)){\r\n                value = value * (100 - yield_reduce_section8[1]) / 100;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    \r\n    /*\r\n    * @dev get user deposit day total pending profit\r\n    * @return user pending payout amount\r\n    */\r\n    function payoutOf(address _addr) \r\n        view \r\n        external \r\n        returns(uint256 value)\r\n    {\r\n        Player storage player = players[_addr];\r\n\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            PlayerDeposit storage dep = player.deposits[i];\r\n            \r\n            uint256 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n            uint256 to = block.timestamp > dep.expire ? dep.expire : uint256(block.timestamp);\r\n            \r\n            if(from < to && dep.status == 0) {\r\n                uint256 _day_payout = _getInvestDayPayoutOf(dep.amount,dep.period);\r\n                value += _day_payout * (to - from) / 86400;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /*\r\n    * @dev get user deposit day total pending profit\r\n    * @return user pending payout amount\r\n    */\r\n    function _payoutOfDay(address _addr) \r\n        view\r\n        private \r\n        returns(uint256 value)\r\n    {\r\n        Player storage player = players[_addr];\r\n\r\n        for(uint256 i = 0; i < player.deposits.length; i++) {\r\n            PlayerDeposit storage dep = player.deposits[i];\r\n            \r\n            //uint256 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n            //uint256 to = block.timestamp > dep.expire ? dep.expire : uint256(block.timestamp);\r\n            \r\n            if(dep.status == 0) {\r\n                uint256 _day_payout = _getInvestDayPayoutOf(dep.amount, dep.period);\r\n                value += _day_payout;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    \r\n  \r\n    /*\r\n    * @dev Remove supernodes of the special address\r\n    */\r\n    function _removeSuperNodes(address _addr) private {\r\n        for (uint index = 0; index < supernodes.length; index++) {\r\n            if(supernodes[index] == _addr){\r\n                for (uint i = index; i < supernodes.length-1; i++) {\r\n                    supernodes[i] = supernodes[i+1];\r\n                }\r\n                delete supernodes[supernodes.length-1];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    /*\r\n    * @dev get contract data info \r\n    * @return total invested,total investor number,total withdraw,total referral bonus\r\n    */\r\n    function contractInfo() \r\n        view \r\n        external \r\n        returns(\r\n            uint256 _total_invested, uint256 _total_investors, uint256 _total_withdrawn, \r\n            uint256 _total_dividends, uint256 _total_referral_bonus, uint256 _total_platform_bonus, \r\n            uint256 _total_supernode_num, uint256 _crowd_period_month,\r\n            uint256 _crowd_period_start, uint256 _total_holder_bonus, uint256 _total_match_bonus) \r\n    {\r\n        return (\r\n            total_invested, \r\n            total_investors, \r\n            total_withdrawn, \r\n            total_dividends, \r\n            total_referral_bonus, \r\n            total_platform_bonus, \r\n            total_supernode_num, \r\n            crowd_period_month,\r\n            crowd_period_start,\r\n            total_supernode_bonus,\r\n            total_match_bonus\r\n        );\r\n    }\r\n    \r\n    /*\r\n    * @dev get user info\r\n    * @return pending withdraw amount,referral,rreferral num etc.\r\n    */\r\n    function userInfo(address _addr)\r\n        view \r\n        external \r\n        returns\r\n        (\r\n            address _referral, uint256 _referral_num, uint256 _is_supernode, \r\n            uint256 _dividends, uint256 _referral_bonus, uint256 _match_bonus, \r\n            uint256 _supernode_bonus,uint256 _last_payout\r\n        )\r\n    {\r\n        Player storage player = players[_addr];\r\n        return (\r\n            player.referral,\r\n            player.referrals.length,\r\n            player.is_supernode,\r\n            player.dividends,\r\n            player.referral_bonus,\r\n            player.match_bonus,\r\n            player.supernode_bonus,\r\n            player.last_payout\r\n        );\r\n    }\r\n    \r\n    /*\r\n    * @dev get user info\r\n    * @return pending withdraw amount,referral bonus, total deposited, total withdrawn etc.\r\n    */\r\n    function userInfoTotals(address _addr) \r\n        view \r\n        external \r\n        returns(\r\n            uint256 _total_invested, uint256 _total_withdrawn, uint256 _total_community_invested, \r\n            uint256 _total_match_invested, uint256 _total_dividends, uint256 _total_referral_bonus, \r\n            uint256 _total_match_bonus, uint256 _total_supernode_bonus\r\n            )\r\n    {\r\n        Player storage player = players[_addr];\r\n        PlayerTotal storage playerTotal = playerTotals[_addr];\r\n        \r\n        /* get community total invested*/\r\n        uint256 total_community_invested = _getCommunityTotalInvested(_addr);\r\n        \r\n        return (\r\n            player.total_invested,\r\n            player.total_withdrawn,\r\n            total_community_invested,\r\n            playerTotal.total_match_invested,\r\n            playerTotal.total_dividends,\r\n            playerTotal.total_referral_bonus,\r\n            playerTotal.total_match_bonus,\r\n            playerTotal.total_supernode_bonus\r\n        );\r\n    }\r\n    \r\n    /*\r\n    * @dev get user investment list\r\n    */\r\n    function getInvestList(address _addr)\r\n        view \r\n        external \r\n        returns(\r\n            uint256[] memory ids,uint256[] memory times, uint256[] memory months, \r\n            uint256[] memory amounts,uint256[] memory withdraws,\r\n            uint256[] memory statuses,uint256[] memory payouts)\r\n    {\r\n        Player storage player = players[_addr];\r\n        \r\n        PlayerDeposit[] memory deposits = _getValidInvestList(_addr);\r\n        \r\n        uint256[] memory _ids = new uint256[](deposits.length);\r\n        uint256[] memory _times = new uint256[](deposits.length);\r\n        uint256[] memory _months = new uint256[](deposits.length);\r\n        uint256[] memory _amounts = new uint256[](deposits.length);\r\n        uint256[] memory _withdraws = new uint256[](deposits.length);\r\n        uint256[] memory _statuses = new uint256[](deposits.length);\r\n        uint256[] memory _payouts = new uint256[](deposits.length);\r\n        \r\n        for(uint256 i = 0; i < deposits.length; i++) {\r\n            PlayerDeposit memory dep = deposits[i];\r\n            _ids[i] = dep.id;\r\n            _amounts[i] = dep.amount;\r\n            _withdraws[i] = dep.total_withdraw;\r\n            _times[i] = dep.time;\r\n            _months[i] = dep.month;\r\n            _statuses[i] = dep.is_crowd;\r\n            \r\n            //get deposit current payout\r\n            uint256 from = player.last_payout > dep.time ? player.last_payout : dep.time;\r\n            uint256 to = block.timestamp > dep.expire ? dep.expire : uint256(block.timestamp);\r\n            if(from < to && dep.status == 0) {\r\n                uint256 _day_payout = _getInvestDayPayoutOf(dep.amount,dep.period);\r\n                uint256 _value = _day_payout * (to - from) / 86400;\r\n                _payouts[i] = _value;\r\n            }\r\n        }\r\n        return (\r\n            _ids,\r\n            _times,\r\n            _months,\r\n            _amounts,\r\n            _withdraws,\r\n            _statuses,\r\n            _payouts\r\n        );\r\n    }\r\n    \r\n    /*\r\n    * @dev get deposit valid count\r\n    */\r\n    function _getValidInvestList(address _addr)\r\n        view\r\n        private\r\n        returns(PlayerDeposit[] memory)\r\n    {\r\n        \r\n        Player storage player = players[_addr];\r\n        uint256 resultCount;\r\n        for (uint i = 0; i < player.deposits.length; i++) {\r\n            if ( player.deposits[i].status == 0) {\r\n                resultCount++;\r\n            }\r\n        }\r\n        PlayerDeposit[] memory deposits = new PlayerDeposit[](resultCount);  \r\n        uint256 j;\r\n        for(uint256 i = 0; i < player.deposits.length; i++){\r\n            if(player.deposits[i].status==0){\r\n                deposits[j] = player.deposits[i];\r\n                j++;\r\n            }\r\n        }\r\n        return deposits;\r\n    }\r\n    \r\n    /*\r\n    * @dev get crowd period list\r\n    */\r\n    function getCrowdPeriodList()\r\n        view \r\n        external \r\n        returns(uint256[] memory ids,uint256[] memory rates, uint256[] memory limits, uint256[] memory totals) \r\n    {\r\n        return (\r\n            crowd_period_ids,\r\n            crowd_period_rates,\r\n            crowd_period_limits,\r\n            total_crowd_num_periods\r\n        );\r\n    }\r\n    \r\n    /*\r\n    * @dev get invest period list\r\n    */\r\n    function getInvestPeriodList(address _addr)\r\n        view \r\n        external \r\n        returns(\r\n            uint256[] memory ids,\r\n            uint256[] memory months, \r\n            uint256[] memory rates,\r\n            uint256[] memory totals,\r\n            uint256[] memory devidends,\r\n            uint256[] memory user_investeds,\r\n            uint256[] memory user_devidends) \r\n    {\r\n        \r\n        PlayerTotal storage playerTotal = playerTotals[_addr];\r\n        uint256[] memory _user_period_investeds = new uint256[](4);\r\n        uint256[] memory _user_period_devidends = new uint256[](4);\r\n        _user_period_investeds[0] = playerTotal.total_period1_invested;\r\n        _user_period_investeds[1] = playerTotal.total_period2_invested;\r\n        _user_period_investeds[2] = playerTotal.total_period3_invested;\r\n        _user_period_investeds[3] = playerTotal.total_period4_invested;\r\n        _user_period_devidends[0] = playerTotal.total_period1_devidends;\r\n        _user_period_devidends[1] = playerTotal.total_period2_devidends;\r\n        _user_period_devidends[2] = playerTotal.total_period3_devidends;\r\n        _user_period_devidends[3] = playerTotal.total_period4_devidends;\r\n        \r\n        return (\r\n            invest_period_ids,\r\n            invest_period_months,\r\n            invest_period_rates,\r\n            invest_period_totals,\r\n            invest_period_devidends,\r\n            _user_period_investeds,\r\n            _user_period_devidends\r\n        );\r\n    }\r\n    \r\n    /*\r\n    * @dev get supernode period list\r\n    */\r\n    function getSuperNodePeriodList()\r\n        view \r\n        external \r\n        returns(uint256[] memory ids,uint256[] memory pays,uint256[] memory amounts, uint256[] memory limits,uint256[] memory totals) \r\n    {\r\n        return (\r\n            supernode_period_ids,\r\n            supernode_period_pays,\r\n            supernode_period_amounts,\r\n            supernode_period_limits,\r\n            total_supernode_num_periods\r\n        );\r\n    }\r\n\r\n    /*\r\n    * @dev Migrate contract data (migration from heco chain to biance smart chain)\r\n    */\r\n    function migrateContract(uint256 _total_invested, uint256 _total_investors, uint256 _total_withdrawn, uint256 _total_dividends, uint256 _total_referral_bonus, uint256 _total_platform_bonus, uint256 _total_supernode_num, uint256 _total_holder_bonus, uint256 _total_match_bonus) \r\n        external onlyOwner\r\n        payable  \r\n    {\r\n        total_invested = _total_invested;\r\n        total_withdrawn = _total_withdrawn;\r\n        total_dividends = _total_dividends;\r\n        total_referral_bonus = _total_referral_bonus;\r\n        total_platform_bonus = _total_platform_bonus; \r\n        total_supernode_num = _total_supernode_num; \r\n        total_supernode_bonus = _total_holder_bonus;\r\n        total_match_bonus = _total_match_bonus;\r\n        total_investors = 0;\r\n\r\n        emit MigrateContract(_total_invested, _total_investors, _total_withdrawn, _total_dividends, _total_referral_bonus, _total_platform_bonus, _total_supernode_num, _total_holder_bonus, _total_match_bonus);\r\n    }\r\n\r\n\r\n    /*\r\n    * @dev Migrate player data (migration from heco chain to biance smart chain)\r\n    */\r\n    function migratePlayer(address _addr, address _referral, uint8 _is_supernode, uint256 _dividends, uint256 _referral_bonus, uint256 _match_bonus, uint256 _supernode_bonus,uint256 _last_payout,uint256 _total_invested, uint256 _total_withdrawn) \r\n        external onlyOwner\r\n        payable \r\n    {\r\n        /* verify migration deadline is pending */\r\n        require(MIGRATION_DEADLINE==0,\"Migration is deadline\");\r\n\r\n        Player storage player = players[_addr];\r\n        player.is_supernode = _is_supernode;\r\n        player.dividends = _dividends;\r\n        player.referral_bonus = _referral_bonus;\r\n        player.supernode_bonus = _supernode_bonus;\r\n        player.match_bonus = _match_bonus;\r\n        player.last_payout = _last_payout;\r\n        player.total_invested = _total_invested;\r\n        player.total_withdrawn = _total_withdrawn;\r\n\r\n        /* update user referral address list*/\r\n        player.referral = _referral;\r\n        if(_isReferralContains(_referral,_addr)==0){\r\n            players[_referral].referrals.push(_addr);\r\n        }\r\n        \r\n        /* update total investor count */\r\n        total_investors += 1;\r\n        addrMap[total_investors] = _addr;\r\n\r\n        /* push user to shareholder list*/\r\n        if (_is_supernode == 1) {\r\n            supernodes.push(_addr);\r\n        }\r\n\r\n        emit MigratePlayer(_addr,  _referral, _is_supernode, _dividends, _referral_bonus, _match_bonus, _supernode_bonus, _last_payout,_total_invested, _total_withdrawn);\r\n    }\r\n\r\n\r\n    /*\r\n    * @dev Migrate player total data (migration from heco chain to biance smart chain)\r\n    */\r\n    function migratePlayerTotal(address _addr,uint256 _total_match_invested, uint256 _total_dividends, uint256 _total_referral_bonus, uint256 _total_match_bonus, uint256 _total_supernode_bonus)\r\n        external onlyOwner \r\n        payable \r\n    {\r\n        /* verify migration deadline is pending */\r\n        require(MIGRATION_DEADLINE==0,\"Migration is deadline\");\r\n\r\n        PlayerTotal storage playerTotal = playerTotals[_addr];\r\n        playerTotal.total_match_invested = _total_match_invested;\r\n        playerTotal.total_dividends = _total_dividends;\r\n        playerTotal.total_referral_bonus = _total_referral_bonus;\r\n        playerTotal.total_match_bonus = _total_match_bonus;\r\n        playerTotal.total_supernode_bonus = _total_supernode_bonus;\r\n\r\n        emit MigratePlayerTotal(_addr, _total_match_invested, _total_dividends, _total_referral_bonus, _total_match_bonus, _total_supernode_bonus);\r\n    }\r\n\r\n/*\r\n    * @dev Migrate player total period data (migration from heco chain to biance smart chain)\r\n    */\r\n    function migratePlayerTotalPeriod(address _addr,uint256 _total_period1_invested,uint256 _total_period2_invested,uint256 _total_period3_invested,uint256 _total_period4_invested,uint256 _total_period1_devidends,uint256 _total_period2_devidends,uint256 _total_period3_devidends,uint256 _total_period4_devidends)\r\n        external onlyOwner \r\n        payable \r\n    {\r\n        /* verify migration deadline is pending */\r\n        require(MIGRATION_DEADLINE==0,\"Migration is deadline\");\r\n\r\n        PlayerTotal storage playerTotal = playerTotals[_addr];\r\n\r\n        playerTotal.total_period1_invested = _total_period1_invested;\r\n        playerTotal.total_period2_invested = _total_period2_invested;\r\n        playerTotal.total_period3_invested = _total_period3_invested;\r\n        playerTotal.total_period4_invested = _total_period4_invested;\r\n        playerTotal.total_period1_devidends = _total_period1_devidends;\r\n        playerTotal.total_period2_devidends = _total_period2_devidends;\r\n        playerTotal.total_period3_devidends = _total_period3_devidends;\r\n        playerTotal.total_period4_devidends = _total_period4_devidends;\r\n\r\n        emit MigratePlayerTotalPeriod(_addr, _total_period1_invested, _total_period2_invested, _total_period3_invested, _total_period4_invested, _total_period1_devidends, _total_period2_devidends, _total_period3_devidends, _total_period4_devidends);\r\n    }\r\n\r\n    /*\r\n    * @dev Migrate player deposit data (migration from heco chain to biance smart chain)\r\n    */\r\n    function migrateDeposit(address _addr, uint256 _time, uint256 _amount, uint256 _total_withdraw,uint256 _month, uint8 _is_crowd, uint8 _status) \r\n        external onlyOwner \r\n        payable \r\n    {\r\n        /* verify migration deadline is pending */\r\n        require(MIGRATION_DEADLINE==0,\"Migration is deadline\");\r\n\r\n        uint256 period_time = _month.mul(30).mul(86400);\r\n        Player storage player = players[_addr];\r\n\r\n        uint256 _id = player.deposits.length + 1;\r\n        uint256 _period = 4;\r\n        if(_month == 3) _period = 1;\r\n        if(_month == 6) _period = 2; \r\n        if(_month == 12) _period = 3;\r\n        if(_month == 24) _period = 4;\r\n        player.deposits.push(PlayerDeposit({\r\n            id: _id,\r\n            amount: _amount,\r\n            total_withdraw: _total_withdraw,\r\n            time: _time,\r\n            month: _month,\r\n            expire: _time.add(period_time),\r\n            period: _period,\r\n            status: _status,\r\n            is_crowd: _is_crowd\r\n        }));\r\n\r\n        emit MigrateDeposit(_addr, _time, _amount, _total_withdraw, _month, _is_crowd, _status);\r\n    }\r\n\r\n    /*\r\n    * @dev Migrate player deposit period data (migration from heco chain to biance smart chain)\r\n    */\r\n    function migrateDepositPeriod(uint256 _period_total1, uint256 _period_total2, uint256 _period_total3,uint256 _period_total4,uint256 _period_devidend1, uint256 _period_devidend2, uint256 _period_devidend3,uint256 _period_devidend4) \r\n        external onlyOwner \r\n        payable \r\n    {\r\n        /* verify migration deadline is pending */\r\n        require(MIGRATION_DEADLINE==0,\"Migration is deadline\");\r\n\r\n        invest_period_totals[0] = _period_total1;\r\n        invest_period_totals[1] = _period_total2;\r\n        invest_period_totals[2] = _period_total3;\r\n        invest_period_totals[3] = _period_total4;\r\n        invest_period_devidends[0] = _period_devidend1;\r\n        invest_period_devidends[1] = _period_devidend2;\r\n        invest_period_devidends[2] = _period_devidend3;\r\n        invest_period_devidends[3] = _period_devidend4;\r\n\r\n        emit MigrateDepositPeriod(_period_total1, _period_total2,  _period_total3, _period_total4, _period_devidend1, _period_devidend2, _period_devidend3, _period_devidend4);\r\n    }\r\n\r\n    /*\r\n    * @dev Migrate Set Contract statke address\r\n    */\r\n    function migrateStakeAddress(address stakeAddress) \r\n        external onlyOwner \r\n        payable \r\n    {\r\n        /* verify migration deadline is pending */\r\n        require(MIGRATION_DEADLINE==0,\"Migration is deadline\");\r\n\r\n        invest_1cc_token_address = stakeAddress;\r\n        invest1ccToken = IERC20(invest_1cc_token_address);\r\n\r\n        emit MigrateStakeAddress(stakeAddress);\r\n    }\r\n\r\n    /*\r\n    * @dev Migrate Set Contract enc address\r\n    */\r\n    function migrateEncAddress(address encAddress) \r\n        external onlyOwner \r\n        payable \r\n    {\r\n        /* verify migration deadline is pending */\r\n        require(MIGRATION_DEADLINE==0,\"Migration is deadline\");\r\n\r\n        invest_enc_token_address = encAddress;\r\n        investEncToken = IERC20(invest_enc_token_address);\r\n\r\n        emit MigrateEncAddress(encAddress);\r\n    }\r\n    \r\n    /*\r\n    * @dev Set Contract Migrate deadline status\r\n    */\r\n    function migrateDeadline() \r\n        external onlyOwner \r\n        payable \r\n    {\r\n        /* verify migration deadline is pending */\r\n        require(MIGRATION_DEADLINE==0,\"Migration is deadline\");\r\n\r\n        MIGRATION_DEADLINE = 1;\r\n\r\n        emit MigrateDeadline();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Crowd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invest_id\",\"type\":\"uint256\"}],\"name\":\"DepositRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_invested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_investors\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_referral_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_platform_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_supernode_num\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_holder_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_match_bonus\",\"type\":\"uint256\"}],\"name\":\"MigrateContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MigrateDeadline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_withdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_is_crowd\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"MigrateDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_period_total1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_period_total2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_period_total3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_period_total4\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_period_devidend1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_period_devidend2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_period_devidend3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_period_devidend4\",\"type\":\"uint256\"}],\"name\":\"MigrateDepositPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"encAddress\",\"type\":\"address\"}],\"name\":\"MigrateEncAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_is_supernode\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referral_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_match_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_supernode_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_last_payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_invested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"}],\"name\":\"MigratePlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_match_invested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_referral_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_match_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_supernode_bonus\",\"type\":\"uint256\"}],\"name\":\"MigratePlayerTotal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_period1_invested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_period2_invested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_period3_invested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_period4_invested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_period1_devidends\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_period2_devidends\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_period3_devidends\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_total_period4_devidends\",\"type\":\"uint256\"}],\"name\":\"MigratePlayerTotalPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeAddress\",\"type\":\"address\"}],\"name\":\"MigrateStakeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"ReferralPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refferal\",\"type\":\"address\"}],\"name\":\"SetReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SuperNode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"INVEST_MAX_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIGRATION_DEADLINE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPERNODE_LIMIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPERNODE_LIMIT_NUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addrMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burning_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_investors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_platform_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_supernode_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_crowd_period_month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_crowd_period_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_holder_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_match_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"crowd\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crowd_period_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crowd_period_limits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowd_period_month\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crowd_period_rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowd_period_start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_invest_id\",\"type\":\"uint256\"}],\"name\":\"depositRedeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCrowdPeriodList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"limits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getInvestList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"times\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"months\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdraws\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"statuses\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payouts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getInvestPeriodList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"months\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"devidends\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"user_investeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"user_devidends\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuperNodePeriodList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pays\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"limits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest1ccToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investEncToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest_1cc_token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest_1cc_token_decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest_early_redeem_feerate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest_enc_token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest_enc_token_decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invest_period_devidends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invest_period_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invest_period_months\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invest_period_rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invest_period_totals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_investors\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_platform_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_supernode_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_holder_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_match_bonus\",\"type\":\"uint256\"}],\"name\":\"migrateContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrateDeadline\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_is_crowd\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"migrateDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period_total1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period_total2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period_total3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period_total4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period_devidend1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period_devidend2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period_devidend3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period_devidend4\",\"type\":\"uint256\"}],\"name\":\"migrateDepositPeriod\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"encAddress\",\"type\":\"address\"}],\"name\":\"migrateEncAddress\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_is_supernode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supernode_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_last_payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"}],\"name\":\"migratePlayer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total_match_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_supernode_bonus\",\"type\":\"uint256\"}],\"name\":\"migratePlayerTotal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total_period1_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_period2_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_period3_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_period4_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_period1_devidends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_period2_devidends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_period3_devidends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_period4_devidends\",\"type\":\"uint256\"}],\"name\":\"migratePlayerTotalPeriod\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeAddress\",\"type\":\"address\"}],\"name\":\"migrateStakeAddress\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform_bonus_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform_bonus_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_match_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_supernode_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_period1_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_period2_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_period3_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_period4_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_period1_devidends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_period2_devidends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_period3_devidends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_period4_devidends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"is_supernode\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"level_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supernode_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_redeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referral_bonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"setReferral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"superNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supernode_bonus_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supernode_period_amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supernode_period_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supernode_period_limits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supernode_period_pays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supernodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"team_level_amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"team_level_bonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"team_level_ids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"total_crowd_num_periods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_dividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_invested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_investors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_match_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_platform_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_referral_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_supernode_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_supernode_num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"total_supernode_num_periods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referral_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_is_supernode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supernode_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_last_payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfoTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_community_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_match_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_match_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_supernode_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw_fee_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yield_reduce_section8\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EncEcosystem", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://76f7b6e759b164b65b267eb827eb8a706dcb0b8176eb1c751c68e034f946d79f"}