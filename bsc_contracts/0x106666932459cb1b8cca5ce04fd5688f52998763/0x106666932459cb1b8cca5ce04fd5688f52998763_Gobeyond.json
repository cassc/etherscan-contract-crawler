{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Gobeyond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ncontract Gobeyond {\\n    IERC20 public usdt;\\n    address addressGobeyond;\\n    address addressRemaining;\\n    address addressFive;\\n    address addressFees;\\n    address addressPool5;\\n    address addressP1;\\n    address addressP2;\\n    address addressP3;\\n    address addressP4;\\n    address addressP5;\\n    address addressP6;\\n\\n    uint256 percentageGobeyond = 50;\\n    uint256 percentageFive = 5;\\n    uint256 percentagePool5 = 0;\\n    uint256 percentageP1 = 0;\\n    uint256 percentageP2 = 0;\\n    uint256 percentageP3 = 0;\\n    uint256 percentageP4 = 0;\\n    uint256 percentageP5 = 0;\\n    uint256 percentageP6 = 0;\\n\\n    uint256[] basic_plan = [15, 5, 4, 3, 5, 1, 2, 3, 1, 1, 2];\\n    uint256[] intermediate_plan = [15, 5, 4, 3, 5, 1, 2, 3, 1, 1, 2];\\n    uint256[] medium_plan = [15, 5, 4, 3, 5, 1, 2, 3, 1, 1, 2];\\n    uint256[] advanced_plan = [20, 5, 4, 3, 5, 1, 2, 3, 1, 1, 2];\\n\\n    event TokensTransfered(address from, address to, uint256 amount);\\n\\n    constructor(address _usdt, address addressgobeyond, address addressremaining, address addressfive, address addressfees) {\\n        usdt = IERC20(_usdt);\\n        addressGobeyond = addressgobeyond;\\n        addressRemaining = addressremaining;\\n        addressFive = addressfive;\\n        addressFees = addressfees;\\n    }\\n\\n    function dispersion(address[] memory wallets, uint256 total_amount, string memory plan, uint256 fees) external {\\n        require(usdt.balanceOf(msg.sender) >= total_amount + fees, 'Insufficient balance');\\n        require(usdt.allowance(msg.sender, address(this)) >= total_amount + fees, \\\"Not enough amount has been approved\\\");\\n        usdt.transferFrom(msg.sender, address(this), total_amount + fees);\\n        if (this.getUSDTBalance(address(this)) >= total_amount + fees) {\\n            if(fees > 0){\\n                this.transferUSDT(addressFees, fees);\\n            }\\n            uint256 remaining = total_amount;\\n            uint256[] memory current_plan;\\n\\n            if (this.stringCompare(plan, \\\"basic\\\")) {\\n                current_plan = basic_plan;\\n            } else if (this.stringCompare(plan, \\\"intermediate\\\")) {\\n                current_plan = intermediate_plan;\\n            } else if (this.stringCompare(plan, \\\"medium\\\")) {\\n                current_plan = medium_plan;\\n            } else if (this.stringCompare(plan, \\\"advance\\\")) {\\n                current_plan = advanced_plan;\\n            }\\n\\n            for (uint256 i = 0; i < wallets.length; i++) {\\n                if (i < current_plan.length){\\n                    uint256 to_send = (total_amount / 100) * current_plan[i];\\n                    this.transferUSDT(wallets[i], to_send);\\n                    remaining = remaining - to_send;\\n                }\\n            }\\n\\n            if(percentageFive > 0){\\n                uint256 to_send_five = (total_amount / 100) * percentageFive;\\n                this.transferUSDT(addressFive, to_send_five);\\n                remaining = remaining - to_send_five;\\n            }\\n\\n            if(percentageGobeyond > 0){\\n                uint256 to_send_master = (total_amount / 100) * percentageGobeyond;\\n                this.transferUSDT(addressGobeyond, to_send_master);\\n                remaining = remaining - to_send_master;\\n            }\\n\\n            if(percentagePool5 > 0){\\n                uint256 to_send_pool5 = (total_amount / 100) * percentagePool5;\\n                this.transferUSDT(addressPool5, to_send_pool5);\\n                remaining = remaining - to_send_pool5;\\n            }\\n\\n            if(percentageP1 > 0){\\n                uint256 to_send_p1 = (total_amount / 100) * percentageP1;\\n                this.transferUSDT(addressP1, to_send_p1);\\n                remaining = remaining - to_send_p1;\\n            }\\n\\n            if(percentageP2 > 0){\\n                uint256 to_send_p2 = (total_amount / 100) * percentageP2;\\n                this.transferUSDT(addressP2, to_send_p2);\\n                remaining = remaining - to_send_p2;\\n            }\\n            if(percentageP3 > 0){\\n                uint256 to_send_p3 = (total_amount / 100) * percentageP3;\\n                this.transferUSDT(addressP3, to_send_p3);\\n                remaining = remaining - to_send_p3;\\n            }\\n            if(percentageP4 > 0){\\n                uint256 to_send_p4 = (total_amount / 100) * percentageP4;\\n                this.transferUSDT(addressP4, to_send_p4);\\n                remaining = remaining - to_send_p4;\\n            }\\n            if(percentageP5 > 0){\\n                uint256 to_send_p5 = (total_amount / 100) * percentageP5;\\n                this.transferUSDT(addressP5, to_send_p5);\\n                remaining = remaining - to_send_p5;\\n            }\\n            if(percentageP6 > 0){\\n                uint256 to_send_p6 = (total_amount / 100) * percentageP6;\\n                this.transferUSDT(addressP6, to_send_p6);\\n                remaining = remaining - to_send_p6;\\n            }\\n            this.transferUSDT(addressRemaining, remaining);\\n        }\\n        emit TokensTransfered(msg.sender, address(this), total_amount + fees);\\n\\n    }\\n\\n    function getUSDTBalance(address account) public view returns(uint256) {\\n        return usdt.balanceOf(account);\\n    }\\n\\n    function transferUSDT(address recipient, uint256 amount) public returns(bool) {\\n        require(usdt.transfer(recipient, amount), \\\"Transfer failed\\\");\\n        return true;\\n    }\\n\\n    function setNewWallet(string memory wallet, address new_address) public canModifier {\\n        if (this.stringCompare(wallet, \\\"master\\\")) {\\n            addressGobeyond = new_address;\\n        } else if (this.stringCompare(wallet, \\\"remaining\\\")) {\\n            addressRemaining = new_address;\\n        } else if (this.stringCompare(wallet, \\\"five\\\")) {\\n            addressFive = new_address;\\n        } else if (this.stringCompare(wallet, \\\"p1\\\")) {\\n            addressP1 = new_address;\\n        } else if (this.stringCompare(wallet, \\\"p2\\\")) {\\n            addressP2 = new_address;\\n        } else if (this.stringCompare(wallet, \\\"p3\\\")) {\\n            addressP3 = new_address;\\n        } else if (this.stringCompare(wallet, \\\"p4\\\")) {\\n            addressP4 = new_address;\\n        } else if (this.stringCompare(wallet, \\\"p5\\\")) {\\n            addressP5 = new_address;\\n        } else if (this.stringCompare(wallet, \\\"p6\\\")) {\\n            addressP6 = new_address;\\n        } else if (this.stringCompare(wallet, \\\"fees\\\")) {\\n            addressFees = new_address;\\n        } else if (this.stringCompare(wallet, \\\"pool5\\\")) {\\n            addressPool5 = new_address;\\n        }\\n    }\\n\\n    function getAddress(string memory wallet) public view returns(address) {\\n        if (this.stringCompare(wallet, \\\"master\\\")) {\\n            return addressGobeyond;\\n        } else if (this.stringCompare(wallet, \\\"remaining\\\")) {\\n            return addressRemaining;\\n        } else if (this.stringCompare(wallet, \\\"five\\\")) {\\n            return addressFive;\\n        } else if (this.stringCompare(wallet, \\\"p1\\\")) {\\n            return addressP1;\\n        } else if (this.stringCompare(wallet, \\\"p2\\\")) {\\n            return addressP2;\\n        } else if (this.stringCompare(wallet, \\\"p3\\\")) {\\n            return addressP3;\\n        } else if (this.stringCompare(wallet, \\\"p4\\\")) {\\n            return addressP4;\\n        } else if (this.stringCompare(wallet, \\\"p5\\\")) {\\n            return addressP5;\\n        } else if (this.stringCompare(wallet, \\\"p6\\\")) {\\n            return addressP6;\\n        } else if (this.stringCompare(wallet, \\\"fees\\\")) {\\n            return addressFees;\\n        } else if (this.stringCompare(wallet, \\\"pool5\\\")) {\\n            return addressPool5;\\n        } else {\\n            return address(0x0000000000000000000000000000000000000000);\\n        }\\n    }\\n\\n    function getPercentage(string memory wallet) public view returns(uint256) {\\n        if (this.stringCompare(wallet, \\\"master\\\")) {\\n            return percentageGobeyond;\\n        } else if (this.stringCompare(wallet, \\\"five\\\")) {\\n            return percentageFive;\\n        } else if (this.stringCompare(wallet, \\\"p1\\\")) {\\n            return percentageP1;\\n        } else if (this.stringCompare(wallet, \\\"p2\\\")) {\\n            return percentageP2;\\n        } else if (this.stringCompare(wallet, \\\"p3\\\")) {\\n            return percentageP3;\\n        } else if (this.stringCompare(wallet, \\\"p4\\\")) {\\n            return percentageP4;\\n        } else if (this.stringCompare(wallet, \\\"p5\\\")) {\\n            return percentageP5;\\n        } else if (this.stringCompare(wallet, \\\"p6\\\")) {\\n            return percentageP6;\\n        } else if (this.stringCompare(wallet, \\\"pool5\\\")) {\\n            return percentagePool5;\\n        } else {\\n            return 404;\\n        }\\n    }\\n\\n    function getContractBalance() public view returns(uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function stringCompare(string memory str1, string memory str2) public pure returns(bool) {\\n        if (bytes(str1).length != bytes(str2).length) {\\n            return false;\\n        }\\n        return\\n        keccak256(abi.encodePacked(str1)) == keccak256(abi.encodePacked(str2));\\n    }\\n\\n    function getPlan(string memory plan) public view returns(uint256[] memory) {\\n        uint256[] memory current_plan;\\n\\n        if (this.stringCompare(plan, \\\"basic\\\")) {\\n            current_plan = basic_plan;\\n        } else if (this.stringCompare(plan, \\\"intermediate\\\")) {\\n            current_plan = intermediate_plan;\\n        } else if (this.stringCompare(plan, \\\"medium\\\")) {\\n            current_plan = medium_plan;\\n        } else if (this.stringCompare(plan, \\\"advance\\\")) {\\n            current_plan = advanced_plan;\\n        }\\n\\n        return current_plan;\\n    }\\n\\n    function setNewPorcentage(string memory wallet, uint256 percentage) public canModifier {\\n        if (this.stringCompare(wallet, \\\"master\\\")) {\\n            percentageGobeyond = percentage;\\n        } else if (this.stringCompare(wallet, \\\"five\\\")) {\\n            percentageFive = percentage;\\n        } else if (this.stringCompare(wallet, \\\"p1\\\")) {\\n            percentageP1 = percentage;\\n        } else if (this.stringCompare(wallet, \\\"p2\\\")) {\\n            percentageP2 = percentage;\\n        } else if (this.stringCompare(wallet, \\\"p3\\\")) {\\n            percentageP3 = percentage;\\n        } else if (this.stringCompare(wallet, \\\"p4\\\")) {\\n            percentageP4 = percentage;\\n        } else if (this.stringCompare(wallet, \\\"p5\\\")) {\\n            percentageP5 = percentage;\\n        } else if (this.stringCompare(wallet, \\\"p6\\\")) {\\n            percentageP6 = percentage;\\n        } else if (this.stringCompare(wallet, \\\"pool5\\\")) {\\n            percentagePool5 = percentage;\\n        }\\n    }\\n\\n    function setPlan(string memory plan, uint256[] memory new_plan) public canModifier {\\n        if (this.stringCompare(plan, \\\"basic\\\")) {\\n            basic_plan = new_plan;\\n        } else if (this.stringCompare(plan, \\\"intermediate\\\")) {\\n            intermediate_plan = new_plan;\\n        } else if (this.stringCompare(plan, \\\"medium\\\")) {\\n            medium_plan = new_plan;\\n        } else if (this.stringCompare(plan, \\\"advance\\\")) {\\n            advanced_plan = new_plan;\\n        }\\n    }\\n\\n    function setPorcentages(uint256 gobeyond, uint256 five, uint256 pool5, uint256 p1, uint256 p2, uint256 p3, uint256 p4, uint256 p5, uint256 p6) public canModifier {\\n        percentageGobeyond = gobeyond;\\n        percentageFive = five;\\n        percentagePool5 = pool5;\\n        percentageP1 = p1;\\n        percentageP2 = p2;\\n        percentageP3 = p3;\\n        percentageP4 = p4;\\n        percentageP5 = p5;\\n        percentageP6 = p6;\\n    }\\n\\n    function setWallets(address gobeyond, address remaining, address five, address pool5, address p1, address p2, address p3, address p4, address p5, address p6) public canModifier {\\n        addressGobeyond = gobeyond;\\n        addressRemaining = remaining;\\n        addressFive = five;\\n        addressPool5 = pool5;\\n        addressP1 = p1;\\n        addressP2 = p2;\\n        addressP3 = p3;\\n        addressP4 = p4;\\n        addressP5 = p5;\\n        addressP6 = p6;\\n    }\\n\\n    function whitdrawal() public canModifier {\\n        if (this.getUSDTBalance(address(this)) > 0) {\\n            uint256 total = this.getUSDTBalance(address(this));\\n            this.transferUSDT(addressGobeyond, total);\\n        }\\n    }\\n\\n    modifier canModifier() {\\n        require(msg.sender == addressGobeyond, \\\"Only the creator can perform this action\\\");\\n        _;\\n    }\\n\\n\\n    function getTotalPercentage() public view returns(uint256) {\\n        return percentageGobeyond + percentageFive + percentageP1 + percentageP2 + percentageP3 + percentageP4 + percentageP5 + percentageP6 + percentagePool5;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressgobeyond\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressremaining\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressfive\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressfees\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensTransfered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"plan\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"dispersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"}],\"name\":\"getPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"plan\",\"type\":\"string\"}],\"name\":\"getPlan\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUSDTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setNewPorcentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"wallet\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"new_address\",\"type\":\"address\"}],\"name\":\"setNewWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"plan\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"new_plan\",\"type\":\"uint256[]\"}],\"name\":\"setPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gobeyond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"five\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"p6\",\"type\":\"uint256\"}],\"name\":\"setPorcentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gobeyond\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remaining\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"five\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool5\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p5\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"p6\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"str2\",\"type\":\"string\"}],\"name\":\"stringCompare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Gobeyond", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000121cca30ede54a294432aef60792c135f5955882000000000000000000000000fae268b1df3e0dba3b36c5c302e3c9e10659a6bd000000000000000000000000a84929525d0d8add963cc386fdddb0185732ac270000000000000000000000006de5db12561e36b8ddcb3e482f639f7d9843edec", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}