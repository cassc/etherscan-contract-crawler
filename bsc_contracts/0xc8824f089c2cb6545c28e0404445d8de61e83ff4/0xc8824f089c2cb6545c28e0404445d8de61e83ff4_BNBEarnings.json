{"SourceCode": "pragma solidity 0.5.8;\r\n\r\ncontract BNBEarnings {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 constant public MIN_INVEST = 0.02 ether;\r\n\tuint256[] public REFERRAL_PERCENTS = [40, 20, 20];\r\n\tuint256 constant public ADV_FEE = 40;\r\n\tuint256 constant public PERCENT_STEP = 3; \r\n\tuint256 constant public PERCENTS_DIVIDER = 1000;\r\n\tuint256 constant public HOLD_BONUS = 5;\r\n\tuint256 constant public TIME_STEP = 1 days;\r\n\r\n\tuint256 public totalStaked;\r\n\tuint256 public totalUsers;\r\n\tuint256 public totalRefBonus;\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n    }\r\n\r\n    Plan[] internal plans;\r\n\r\n\tstruct Deposit {\r\n        uint8 plan;\r\n\t\tuint256 percent;\r\n\t\tuint256 amount;\r\n\t\tuint256 profit;\r\n\t\tuint256 start;\r\n\t\tuint256 finish;\r\n\t}\r\n\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\tuint256 checkpoint;\r\n\t\tuint256 checkpointHold;\r\n\t\taddress referrer;\r\n\t\tuint256[3] levels;\r\n\t\tuint256 bonus;\r\n\t\tuint256 totalBonus;\r\n\t\tuint256 totalPlanWithdrawn;\r\n\t\tuint256 totalHoldWithdrawn;\r\n\t\tuint256 holdBonus;\r\n\t\tbool wFlag;\r\n\t}\r\n\r\n\tmapping (address => User) internal users;\r\n\r\n\tuint256 public startTime = 1637596800; \r\n\r\n\taddress payable private owner;\r\n\taddress payable private prj_1;\r\n\taddress payable private adv_1;\r\n\taddress payable private adv_2;\r\n\t\r\n\r\n\tevent Newbie(address user);\r\n\tevent NewDeposit(address indexed user, uint8 plan, uint256 percent, uint256 amount, uint256 profit, uint256 start, uint256 finish);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n\r\n\tconstructor(address payable _adv1, address payable _adv2,  address payable _prj1) public {\r\n\t\trequire(!isContract(msg.sender));\r\n\t\towner = msg.sender;\r\n\t\tprj_1 = _prj1;\r\n\t\tadv_1 = _adv1;\r\n\t\tadv_2 = _adv2;\r\n\t\t\r\n        plans.push(Plan(50, 40));\r\n        plans.push(Plan(90, 30));\r\n        plans.push(Plan(150, 20));\r\n        plans.push(Plan(50, 40));\r\n        plans.push(Plan(90, 30));\r\n        plans.push(Plan(150, 20));\r\n\t}\r\n\r\n\tfunction invest(address referrer, uint8 plan) public payable {\r\n\t\trequire(block.timestamp > startTime, \"Contract not start yet\");\t\r\n\t\trequire(plan < 6, \"Invalid plan\");\r\n\t\t\r\n\t\tUser storage user = users[msg.sender];\r\n\t\r\n\t\tuint investAmount;\r\n\t\t\r\n\t\tif (plan < 3) {\r\n\t\t    investAmount = msg.value;\r\n\t\t} else {\r\n\t\t    require(msg.value == 0, \"Amount must be 0\");\r\n\t\t    investAmount = getUserDividends(msg.sender);\r\n\t\t    user.checkpoint = block.timestamp;\r\n\t\t}\t\t\r\n\t\t\r\n\t\trequire(investAmount >= MIN_INVEST);\r\n\r\n\t\tuint256 fee = investAmount.mul(ADV_FEE).div(PERCENTS_DIVIDER);\r\n\t\tadv_1.transfer(fee);\r\n\t\tadv_2.transfer(fee);\r\n\t\tprj_1.transfer(fee);\r\n\t\t\r\n\t\tif (user.referrer == address(0) && msg.sender != owner) {\r\n\t\t\tif (users[referrer].deposits.length == 0) {\r\n\t\t\t\treferrer = owner;\r\n\t\t\t}\r\n\t\t\tuser.referrer = referrer;\r\n\t\t\t\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < REFERRAL_PERCENTS.length; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tusers[upline].levels[i] = users[upline].levels[i].add(1);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (user.referrer != address(0)) {\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < REFERRAL_PERCENTS.length; i++) {\r\n\t\t\t\tif (upline == address(0)) {\r\n\t\t\t\t    upline = owner;\r\n\t\t\t\t}\r\n\t\t\t\tuint256 amount = investAmount.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\tusers[upline].bonus = users[upline].bonus.add(amount);\r\n\t\t\t\tusers[upline].totalBonus = users[upline].totalBonus.add(amount);\r\n\t\t\t\temit RefBonus(upline, msg.sender, i, amount);\r\n\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t\tuser.checkpointHold = block.timestamp;\r\n\t\t\ttotalUsers = totalUsers.add(1);\r\n\t\t\temit Newbie(msg.sender);\r\n\t\t}\r\n\r\n\t\t(uint256 percent, uint256 profit, uint256 finish) = getResult(plan, investAmount);\r\n\t\tuser.deposits.push(Deposit(plan, percent, investAmount, profit, block.timestamp, finish));\r\n\r\n\t\ttotalStaked = totalStaked.add(investAmount);\r\n\t\temit NewDeposit(msg.sender, plan, percent, investAmount, profit, block.timestamp, finish);\r\n\t}\r\n\r\n\tfunction withdraw() public {\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tuint256 totalAmount = getUserDividends(msg.sender);\r\n\t\trequire(totalAmount > 0, \"User has no dividends\");\r\n\t\t\r\n\t\tuser.checkpoint = block.timestamp;\r\n\t\t\r\n\t\tif (user.wFlag == false) {\r\n\t\t    user.holdBonus = getUserHoldBonus(msg.sender);\r\n\t\t    user.wFlag = true;\r\n\t\t}\r\n\t\t\r\n\t\tuser.totalPlanWithdrawn = user.totalPlanWithdrawn.add(totalAmount);\r\n\t\tmsg.sender.transfer(totalAmount);\r\n\t\temit Withdrawn(msg.sender, totalAmount);\r\n\t}\r\n\t\r\n\tfunction withdrawRef() public {\r\n\t\tUser storage user = users[msg.sender];\r\n\t\t\r\n\t\tuint totalAmount = getUserReferralBonus(msg.sender);\r\n\t\trequire(totalAmount > 0, \"User has no dividends\");\r\n        \r\n        user.bonus = 0;\r\n        \r\n\t\tif (user.wFlag == false) {\r\n\t\t    user.holdBonus = getUserHoldBonus(msg.sender);\r\n\t\t    user.wFlag = true;\r\n\t\t}        \r\n\r\n\t\tmsg.sender.transfer(totalAmount);\r\n\t\temit Withdrawn(msg.sender, totalAmount);\r\n\t}\t\r\n\t\r\n\tfunction withdrawHold() public {\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tuint256 totalAmount = getUserHoldBonus(msg.sender);\r\n\t\trequire(totalAmount > 0, \"User has no dividends\");\r\n\r\n        user.holdBonus = 0;\r\n\t\tuser.checkpointHold = block.timestamp;\r\n\t\t\r\n\t\tuser.totalHoldWithdrawn = user.totalHoldWithdrawn.add(totalAmount);\r\n\t\tmsg.sender.transfer(totalAmount);\r\n\t\temit Withdrawn(msg.sender, totalAmount);\r\n\t}\t\r\n\r\n\tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\t\r\n\tfunction getUserBalance(address userAddress) public view returns (uint256) {\r\n\t\treturn address(userAddress).balance;\r\n\t}\t\r\n\r\n\tfunction getPlanInfo(uint8 plan) public view returns(uint256 time, uint256 percent) {\r\n\t\ttime = plans[plan].time;\r\n\t\tpercent = plans[plan].percent;\r\n\t}\r\n\r\n\tfunction getPercent(uint8 plan) public view returns (uint256) {\r\n\t\tif (block.timestamp > startTime && plan > 2) {\r\n\t\t    uint pAdd = minVal(60, PERCENT_STEP.mul(block.timestamp.sub(startTime)).div(TIME_STEP));\r\n\t\t\treturn plans[plan].percent.add(pAdd);\r\n\t\t} else {\r\n\t\t\treturn plans[plan].percent;\r\n\t\t}\r\n    }\r\n\r\n\tfunction getResult(uint8 plan, uint256 deposit) public view returns (uint256 percent, uint256 profit, uint256 finish) {\r\n\t\tpercent = getPercent(plan);\r\n\t\tprofit = deposit.mul(percent).div(PERCENTS_DIVIDER).mul(plans[plan].time);\r\n\t\tfinish = block.timestamp.add(plans[plan].time.mul(TIME_STEP));\r\n\t}\r\n\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 totalAmount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tif (user.checkpoint < user.deposits[i].finish) {\r\n\t\t\t\tuint256 share = user.deposits[i].amount.mul(user.deposits[i].percent).div(PERCENTS_DIVIDER);\r\n\t\t\t\tuint256 from = user.deposits[i].start > user.checkpoint ? user.deposits[i].start : user.checkpoint;\r\n\t\t\t\tuint256 to = user.deposits[i].finish < block.timestamp ? user.deposits[i].finish : block.timestamp;\r\n\t\t\t\tif (from < to) {\r\n\t\t\t\t\ttotalAmount = totalAmount.add(share.mul(to.sub(from)).div(TIME_STEP));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn totalAmount;\r\n\t}\r\n\t\r\n\tfunction getUserHoldBonus(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 totalAmount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t\tif (user.wFlag == false) { \r\n\t\t\t    if (user.checkpointHold < user.deposits[i].finish) {\r\n\t\t\t\t    uint256 share = user.deposits[i].amount.mul(HOLD_BONUS).div(PERCENTS_DIVIDER);\r\n\t\t\t\t    uint256 from = user.deposits[i].start > user.checkpointHold ? user.deposits[i].start : user.checkpointHold;\r\n\t\t\t\t    uint256 to = user.deposits[i].finish < block.timestamp ? user.deposits[i].finish : block.timestamp;\r\n\t\t\t\t    if (from < to) {\r\n\t\t\t\t\t    totalAmount = totalAmount.add(share.mul(to.sub(from)).div(TIME_STEP));\r\n\t\t\t\t    }\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn user.holdBonus.add(totalAmount);\r\n\t}\t\r\n\t\r\n    function minZero(uint a, uint b) private pure returns(uint) {\r\n        if (a > b) {\r\n           return a.sub(b); \r\n        } else {\r\n           return 0;    \r\n        }    \r\n    }  \r\n    \r\n    function maxVal(uint256 a, uint256 b) private pure returns(uint) {\r\n        if (a > b) {\r\n           return a; \r\n        } else {\r\n           return b;    \r\n        }    \r\n    }\r\n    \r\n    function minVal(uint256 a, uint256 b) private pure returns(uint) {\r\n        if (a > b) {\r\n           return b; \r\n        } else {\r\n           return a;    \r\n        }    \r\n    }     \r\n\r\n\tfunction getUserCheckpoint(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].checkpoint;\r\n\t}\r\n\t\r\n\tfunction getUserCheckpointHold(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].checkpointHold;\r\n\t}\t\r\n\r\n\tfunction getUserWFlag(address userAddress) public view returns(bool) {\r\n\t\treturn users[userAddress].wFlag;\r\n\t}\r\n\r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t}\r\n\r\n\tfunction getUserDownlineCount(address userAddress) public view returns(uint256, uint256, uint256) {\r\n\t\treturn (users[userAddress].levels[0], users[userAddress].levels[1], users[userAddress].levels[2]);\r\n\t}\r\n\r\n\tfunction getUserReferralBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].bonus;\r\n\t}\r\n\r\n\tfunction getUserReferralTotalBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus;\r\n\t}\r\n\r\n\tfunction getUserReferralWithdrawn(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus.sub(users[userAddress].bonus);\r\n\t}\r\n\t\r\n\tfunction getUserHoldWithdrawn(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalHoldWithdrawn;\r\n\t}\t\r\n\t\r\n\tfunction getUserPlanWithdrawn(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalPlanWithdrawn;\r\n\t}\t\r\n\r\n\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\r\n\t\treturn getUserDividends(userAddress);\r\n\t}\r\n\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {\r\n\t\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n\t\t\tamount = amount.add(users[userAddress].deposits[i].amount);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getContractLaunchTime() public view returns(uint256) {\r\n\t\treturn minZero(startTime, block.timestamp);\r\n\t}\t\r\n\r\n\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint8 plan, uint256 percent, uint256 amount, uint256 profit, uint256 start, uint256 finish) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tplan = user.deposits[index].plan;\r\n\t\tpercent = user.deposits[index].percent;\r\n\t\tamount = user.deposits[index].amount;\r\n\t\tprofit = user.deposits[index].profit;\r\n\t\tstart = user.deposits[index].start;\r\n\t\tfinish = user.deposits[index].finish;\r\n\t}\r\n\t\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    } \t\r\n\t\r\n    function changeDA(address payable _a1, address payable _a2,  address payable _p1) public onlyOwner {\r\n\t\tprj_1 = _p1;\r\n\t\tadv_1 = _a1;\r\n\t\tadv_2 = _a2;         \r\n    }   \t\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPlanWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpointHold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserHoldBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"},{\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"profit\",\"type\":\"uint256\"},{\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADV_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserWFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserHoldWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawHold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a1\",\"type\":\"address\"},{\"name\":\"_a2\",\"type\":\"address\"},{\"name\":\"_p1\",\"type\":\"address\"}],\"name\":\"changeDA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOLD_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"name\":\"plan\",\"type\":\"uint8\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"profit\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractLaunchTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_adv1\",\"type\":\"address\"},{\"name\":\"_adv2\",\"type\":\"address\"},{\"name\":\"_prj1\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finish\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"}]", "ContractName": "BNBEarnings", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009c6675084a9c73a18014a2f2d6d6e6470fd66ea1000000000000000000000000c5c846899d6afad37b1a01bceb867968eb1bafd4000000000000000000000000e3e250d58181881b90d53dfe768b1bdb5a4fc904", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5fe63f8978a5c1c91c03c4a5e9bdde5cc33dc891b61adbb3d8d0d671d467add9"}