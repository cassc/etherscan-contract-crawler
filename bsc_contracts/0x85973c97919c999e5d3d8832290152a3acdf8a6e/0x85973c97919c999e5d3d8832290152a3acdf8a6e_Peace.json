{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {// Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n      * account.\r\n      */\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n      * @dev Throws if called by any account other than the owner.\r\n      */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20Ext is IERC20 {\r\n    function isBlackListed(address owner) external view returns (bool);\r\n    function inviter(address owner) external view returns (address);\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ncontract Recv {\r\n    IERC20 public tokenPCE;\r\n    IERC20 public usdt;\r\n\r\n    constructor (IERC20 _tokenPCE) {\r\n        tokenPCE = _tokenPCE;\r\n        usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint256 usdtBalance = usdt.balanceOf(address(this));\r\n        if (usdtBalance > 0) {\r\n            usdt.transfer(address(tokenPCE), usdtBalance);\r\n        }\r\n        uint256 tokenPCEBalance = tokenPCE.balanceOf(address(this));\r\n        if (tokenPCEBalance > 0) {\r\n            tokenPCE.transfer(address(tokenPCE), tokenPCEBalance);\r\n        }\r\n    }\r\n}\r\n\r\ncontract PeacePool is Ownable {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public pancakeswapV2Pair;\r\n    address public pancakeswapV2Router = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);  \r\n    address public swapToken = address(0x55d398326f99059fF775485246999027B3197955);        \r\n\r\n    address internal CPTToken = address(0xD66734e3663D3Eb36F1e7819bc20bfb9c5B5ba62);        \r\n    address public baseAddr;             \r\n\r\n    event StartPool(address indexed user, uint256 amount);\r\n    event StopPool(address indexed user, uint256 amount);\r\n\r\n    struct UserInfo {\r\n        uint256 amount;     \r\n        uint256 rewardDebt; \r\n        bool isStart;       \r\n    }\r\n\r\n    struct PoolInfo {\r\n        uint256 lastRewardBlock;  \r\n        uint256 accPerShare; \r\n        uint256 totalAmount;    \r\n    }\r\n\r\n    uint public totalReward;    \r\n    uint256 public perBlock;   \r\n    PoolInfo public poolInfo;   \r\n    mapping(address => UserInfo) public userInfos;  \r\n    \r\n\r\n    bool public paused = false;  \r\n    uint256 public startBlock;   \r\n    uint256 public halvingPeriod = 0;  \r\n\r\n    uint private poolUserIndex;     \r\n    address[] private userLists;    \r\n    bool islocked;\r\n\r\n    uint private checkPoolUserMax = 50;  \r\n\r\n    modifier notPause() {\r\n        require(paused == false, \"Mining has been suspended\");\r\n        _;\r\n    }\r\n    modifier lock() {\r\n        islocked = true;\r\n        _;\r\n        islocked = false;\r\n    }\r\n    constructor()  {\r\n        pancakeswapV2Pair = IPancakeFactory(IPancakeRouter02(pancakeswapV2Router).factory())\r\n            .createPair(address(this), swapToken);\r\n        baseAddr = owner;\r\n    }\r\n    function initPool(uint _totalReward, uint256 _perBlock, uint256 _startBlock)  internal {\r\n        totalReward = _totalReward;\r\n        perBlock = _perBlock;\r\n        startBlock = _startBlock;\r\n        poolInfo = PoolInfo({\r\n            lastRewardBlock : _startBlock,\r\n            accPerShare : 0,\r\n            totalAmount : 0\r\n        });\r\n    }\r\n    function totalSupplyLP() public view returns (uint256) {\r\n        return poolInfo.totalAmount;\r\n    }\r\n    function totalBlockReward() public view returns (uint256) {\r\n        if(perBlock==0 || startBlock ==0) return 0;\r\n        return getBlockReward(startBlock);\r\n    }\r\n    function balanceOfProfit(address _user) public view returns (uint256) {\r\n        return pending(_user);\r\n    }\r\n    function balanceOfLP(address _user) public view returns (uint256) {\r\n        return userInfos[_user].amount;\r\n    }\r\n    function setHalvingPeriod(uint256 _blockCount) public onlyOwner {\r\n        halvingPeriod = _blockCount;\r\n    }\r\n    function setPerBlock(uint256 _newPerBlock) public onlyOwner {\r\n        require((perBlock==0 || startBlock ==0), \"Mining started\");\r\n        perBlock = _newPerBlock;\r\n    }\r\n    function setStartBlock(uint256 _startBlock) public onlyOwner {\r\n        require((perBlock==0 || startBlock ==0), \"Mining started\");\r\n        startBlock = _startBlock;\r\n        poolInfo.lastRewardBlock = _startBlock;\r\n    }\r\n\r\n    function setPause() public onlyOwner {\r\n        paused = !paused;\r\n    }\r\n    function phase(uint256 blockNumber) public view returns (uint256) {\r\n        if (halvingPeriod == 0) {\r\n            return 0;\r\n        }\r\n        if (blockNumber > startBlock) {\r\n            return (blockNumber.sub(startBlock).sub(1)).div(halvingPeriod);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function reward(uint256 blockNumber) public view returns (uint256) {\r\n        uint256 _phase = phase(blockNumber);\r\n        return perBlock.div(2 ** _phase);\r\n    }\r\n    function getBlockReward(uint256 _lastRewardBlock) public view returns (uint256) {\r\n        uint256 blockReward = 0;\r\n        uint256 n = phase(_lastRewardBlock);\r\n        uint256 m = phase(block.number);\r\n        while (n < m) {\r\n            n++;\r\n            uint256 r = n.mul(halvingPeriod).add(startBlock);\r\n            blockReward = blockReward.add((r.sub(_lastRewardBlock)).mul(reward(r)));\r\n            _lastRewardBlock = r;\r\n        }\r\n        blockReward = blockReward.add((block.number.sub(_lastRewardBlock)).mul(reward(block.number)));\r\n        return blockReward;\r\n    }\r\n\r\n    function updatePool() public {\r\n        PoolInfo storage pool = poolInfo;\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.totalAmount;\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 _totalBlockReward = getBlockReward(startBlock);\r\n        if(_totalBlockReward>= totalReward) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 blockReward = getBlockReward(pool.lastRewardBlock);\r\n        if (blockReward <= 0) {\r\n            return;\r\n        }\r\n        if(blockReward <= totalReward) {\r\n            pool.accPerShare = pool.accPerShare.add(blockReward.mul(1e12).div(lpSupply));\r\n        }\r\n        \r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    function pending(address _user) internal view returns (uint256){\r\n        PoolInfo storage pool = poolInfo;\r\n        UserInfo storage user = userInfos[_user];\r\n        uint256 accPerShare = pool.accPerShare;\r\n        uint256 lpSupply = pool.totalAmount;  \r\n        if (user.amount > 0 && user.isStart) {\r\n            if (block.number > pool.lastRewardBlock) {\r\n                uint256 blockReward = getBlockReward(pool.lastRewardBlock);\r\n                accPerShare = accPerShare.add(blockReward.mul(1e12).div(lpSupply));\r\n                return user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\r\n            }\r\n            if (block.number == pool.lastRewardBlock) {\r\n                return user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function removeUserList(address _user) private {\r\n        for(uint i=0;i<userLists.length;i++){\r\n            if(userLists[i] == _user) {\r\n                if(i < userLists.length -1)\r\n                    userLists[i] = userLists[userLists.length -1];\r\n                userLists.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _checkPoolUser() internal lock {\r\n        if(startBlock ==0 || perBlock==0 ||  block.number<startBlock) return;\r\n        PoolInfo storage pool = poolInfo;\r\n        uint _len = userLists.length;\r\n        if(poolUserIndex>= _len) poolUserIndex=0;\r\n        uint i= poolUserIndex;\r\n        uint k;\r\n        IPancakePair _ipp = IPancakePair(pancakeswapV2Pair);\r\n        while(i< _len) {\r\n            address _u = userLists[i];\r\n            if(_u == baseAddr && userInfos[_u].isStart) {\r\n                i++;\r\n            } else {\r\n                uint liquidity = _ipp.balanceOf(_u);\r\n                uint _amount = userInfos[_u].amount;\r\n                if(liquidity==0 || liquidity < _amount) {\r\n                    uint _totalAmount = pool.totalAmount;\r\n                    pool.totalAmount = _totalAmount.sub(_amount);\r\n                    userInfos[_u].amount = 0;\r\n                    userInfos[_u].isStart = false;\r\n                    userInfos[_u].rewardDebt = 0;\r\n                    if(i < userLists.length -1) \r\n                        userLists[i] = userLists[userLists.length -1];\r\n                    userLists.pop();\r\n                    _len = userLists.length;\r\n                }\r\n                else {\r\n                    i++;\r\n                }\r\n                k++;\r\n            }\r\n            if(k>=checkPoolUserMax) break;\r\n        }\r\n        if(i>=userLists.length){\r\n            poolUserIndex=0;\r\n        }else {\r\n            poolUserIndex=i;\r\n        }\r\n        \r\n    }\r\n    function deposit(uint _amount, address _user) internal returns(uint){\r\n        if(startBlock ==0 || perBlock==0 ||  block.number<startBlock) return 0;\r\n        PoolInfo storage pool = poolInfo;\r\n        UserInfo storage user = userInfos[_user];\r\n        \r\n        uint amount = user.amount;\r\n        uint256 pendingAmount;\r\n        updatePool();\r\n        if(amount>0 && (_user == baseAddr || _amount>=amount)) {\r\n            pendingAmount = amount.mul(pool.accPerShare).div(1e12).sub(user.rewardDebt);\r\n        }\r\n\r\n        if(_user != baseAddr || (_user == baseAddr && amount==0)) {\r\n            user.amount = _amount;\r\n            uint _totalAmount = pool.totalAmount;\r\n            pool.totalAmount = _totalAmount.sub(amount).add(_amount);\r\n            if(user.amount == 0) {\r\n                if(user.isStart) {\r\n                    user.isStart = false;\r\n                    removeUserList(_user);\r\n                }\r\n                emit StopPool(_user, _amount);\r\n            }else {\r\n                if(!user.isStart) {\r\n                    userLists.push(_user);\r\n                    user.isStart = true;\r\n                    emit StartPool(_user, _amount);\r\n                }\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accPerShare).div(1e12);\r\n        return pendingAmount;\r\n    }\r\n\r\n    function setCheckPoolUserMax(uint _count) public onlyOwner {\r\n        require(_count > 1, \"Check pool user max must be 1\");\r\n\r\n        checkPoolUserMax = _count;\r\n    }\r\n}\r\n\r\ncontract Peace is PeacePool {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    string public name = \"peace\";\r\n    string public symbol = \"peace\";\r\n    uint8  public decimals = 18;\r\n\r\n    uint private _totalSupply;\r\n    bool private inSwapAndLiquify;\r\n    uint private _inviterLayersMax = 12;                  \r\n    uint private _inviterRate = 80;          \r\n    uint[] private _layerRate = [20,5,5,5,5,5,5,5,5,5,5,10];               \r\n    address private _inviterRemainderAddr= address(0xd59Aa5e045bF19Db22eF77De032BE33F71dE5469);       \r\n\r\n    uint private _technologyRate = 10;       \r\n    address private _technologyAddr= address(0xa5Be3b59C0af3caBf9b2e12130266B11ac35f520);       \r\n    uint private _operationRate = 10;       \r\n    address private _operationAddr= address(0xCeE0dD76E97f50E6e81F9D07A7E55130332A0d72);       \r\n    uint private _daoRate = 20;            \r\n    address private _daoAddr= address(0x70Ab97693D32e4ba7eB2691BD830FCBbe8594e77);             \r\n    uint private _destoryRate = 0;            \r\n    \r\n    Recv public RECV ;\r\n\r\n    uint public minAddLiquidityNumber = 1 * 10 ** 18;  \r\n    uint public _liquidityRate = 20;        \r\n    address private _fundAddr =  address(0xdF0Ec77Ed91819AB0cd4fA323124C45985Fa1E52);\r\n    uint private _fundRate = 10;        \r\n\r\n    address public _destoryAddr = address(0x000000000000000000000000000000000000dEaD);             \r\n\r\n    \r\n    uint public mintRemainderRaward;              \r\n    uint public mintRawardAmount;                \r\n    \r\n    uint public inviterProfitMinAmount = 0;  \r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event AddedBlackList(address _user);\r\n    event RemovedBlackList(address _user);\r\n    event AddedWhiteList(address _user);\r\n    event RemovedWhiteList(address _user);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 swapAmount,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    mapping (address => uint)                       private  _balances;\r\n    mapping (address => mapping (address => uint))  private  _allowances;\r\n    mapping (address => bool) public isBlackListed;   \r\n    mapping (address => bool) public isWhiteListed;   \r\n    mapping (address => bool) public isProfitWhiteListed;   \r\n    \r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    constructor(uint256 _perBlock, uint256 _startBlock) \r\n    {\r\n        _approve(address(this), pancakeswapV2Router, type(uint).max);\r\n\r\n        RECV = new Recv(IERC20(address(this)));\r\n        mintRemainderRaward = 20000000 * 10**18;\r\n        _totalSupply = mintRemainderRaward;\r\n\r\n        _mint(owner, 1000000 * 10**18);\r\n\r\n        \r\n        isWhiteListed[owner] = true;\r\n        isWhiteListed[address(this)] = true;\r\n        initPool(mintRemainderRaward, _perBlock, _startBlock);\r\n        \r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address _user) public view returns (uint256) {\r\n        return _balances[_user];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address sender, address spender, uint256 amount) private {\r\n        require(!isBlackListed[sender], \"ERC20: approve from black list\");\r\n        require(sender != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function transfer(address to, uint amount) public returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\r\n        return true;\r\n    }\r\n    function getSwapTokenAmount(address account) private view returns(uint) {\r\n        uint balance1 = IERC20(swapToken).balanceOf(pancakeswapV2Pair);  \r\n        uint _totalSupplyLP = IPancakePair(pancakeswapV2Pair).totalSupply();  \r\n        uint liquidity = IPancakePair(pancakeswapV2Pair).balanceOf(account); \r\n        uint amount1 = liquidity.mul(balance1).div(_totalSupplyLP);\r\n        return amount1;\r\n    }\r\n    function _checkProfitUser(address[] memory _pUsers, address curr) private pure returns(bool) {\r\n        for(uint i=0;i<_pUsers.length;i++) {\r\n            if(_pUsers[i] == curr) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function _takeInviterFee(address src, uint256 tAmount) internal returns(uint){\r\n        if(_inviterRate == 0) return 0;\r\n        address cur = src;\r\n        if (cur == address(0)) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 allocatedAmount;\r\n        address[] memory _profitUsers = new address[](_inviterLayersMax);\r\n        IERC20Ext _iee = IERC20Ext(CPTToken);\r\n        for (uint i = 0; i < _inviterLayersMax; i++) {\r\n            cur = _iee.inviter(cur);\r\n            if (cur == address(0)) {\r\n                break;\r\n            }\r\n            if(_iee.isBlackListed(cur)) {\r\n                continue;\r\n            }\r\n            if (_checkProfitUser(_profitUsers, cur)) break;\r\n            _profitUsers[i] = cur;\r\n            uint _stAmount = getSwapTokenAmount(cur);\r\n            if(!isProfitWhiteListed[cur] && inviterProfitMinAmount>_stAmount) continue;\r\n\r\n            uint rate = _layerRate[i];\r\n            uint256 curTAmount = tAmount.div(1000).mul(rate);\r\n            _balances[cur] = _balances[cur].add(curTAmount);\r\n            allocatedAmount = allocatedAmount.add(curTAmount);   \r\n        }\r\n        uint tiAmount = tAmount.div(1000).mul(_inviterRate); \r\n        uint256 curRAmount = tiAmount.sub(allocatedAmount);\r\n        if(curRAmount>0) {\r\n            _balances[_inviterRemainderAddr] = _balances[_inviterRemainderAddr].add(curRAmount);\r\n        }\r\n\r\n        return tiAmount;\r\n    }\r\n    function _takeOtherFee(uint256 tAmount) internal returns(uint allocatedAmount){\r\n        uint curTAmount = 0;\r\n        if(_technologyRate>0) {\r\n            curTAmount = tAmount.div(1000).mul(_technologyRate); \r\n            _balances[_technologyAddr] = _balances[_technologyAddr].add(curTAmount);\r\n            allocatedAmount = allocatedAmount.add(curTAmount);   \r\n        }\r\n        \r\n        if(_operationRate>0) {\r\n            curTAmount = tAmount.div(1000).mul(_operationRate); \r\n            _balances[_operationAddr] = _balances[_operationAddr].add(curTAmount);\r\n            allocatedAmount = allocatedAmount.add(curTAmount);   \r\n        }\r\n        \r\n        if(_daoRate>0) {\r\n            curTAmount = tAmount.div(1000).mul(_daoRate); \r\n            _balances[_daoAddr] = _balances[_daoAddr].add(curTAmount);\r\n            allocatedAmount = allocatedAmount.add(curTAmount);   \r\n        }\r\n\r\n        if(_destoryRate>0) {\r\n            curTAmount = tAmount.div(1000).mul(_destoryRate); \r\n            _totalSupply = _totalSupply.sub(curTAmount, \"ERC20: destory amount exceeds totalSupply\");\r\n            _balances[_destoryAddr] = _balances[_destoryAddr].add(curTAmount);\r\n            allocatedAmount = allocatedAmount.add(curTAmount);   \r\n        }\r\n    }\r\n    function _takeLiquidityFee(uint256 tAmount) internal returns(uint allocatedAmount){\r\n        if(_liquidityRate>0) {\r\n            uint curTAmount = tAmount.div(1000).mul(_liquidityRate); \r\n            _balances[address(this)] = _balances[address(this)].add(curTAmount);\r\n            allocatedAmount = allocatedAmount.add(curTAmount);   \r\n        }   \r\n        if(_fundRate>0) {\r\n            uint curTAmount = tAmount.div(1000).mul(_fundRate); \r\n            _balances[_fundAddr] = _balances[_fundAddr].add(curTAmount);\r\n            allocatedAmount = allocatedAmount.add(curTAmount);   \r\n        }\r\n    }\r\n    function _checkPool(address src, bool _isHarvest) internal {\r\n        if(!paused && perBlock>0 && startBlock>0  && mintRemainderRaward>0 && !src.isContract()){\r\n            uint _lpAmount = IPancakePair(pancakeswapV2Pair).balanceOf(src);\r\n            if(_isHarvest || _lpAmount != balanceOfLP(src))\r\n            {\r\n                uint _amount = deposit(_lpAmount, src);\r\n                if(_amount>0 && mintRemainderRaward>0) {\r\n                    if(_amount>mintRemainderRaward) {\r\n                        _amount = mintRemainderRaward;\r\n                    }\r\n                    mintRemainderRaward = mintRemainderRaward.sub(_amount, \"ERC20: transfer amount exceeds balance\");\r\n                    mintRawardAmount = mintRawardAmount.add(_amount);\r\n                    if(src == baseAddr) {\r\n                        _totalSupply = _totalSupply.sub(_amount, \"ERC20: destory amount exceeds totalSupply\");\r\n                        _balances[_destoryAddr] = _balances[_destoryAddr].add(_amount);\r\n                        emit Transfer(src, _destoryAddr, _amount);\r\n                    }else {\r\n                        uint bal =_amount;\r\n                        if(!isWhiteListed[src]) {\r\n                            uint tiAmount = _takeInviterFee(src, bal);\r\n                            uint otherAmount = bal.div(1000).mul(_daoRate); \r\n                            _balances[_daoAddr] = _balances[_daoAddr].add(otherAmount);\r\n                            bal = bal.sub(tiAmount).sub(otherAmount);\r\n                        }\r\n                        _balances[src] = _balances[src].add(bal);\r\n                        emit Transfer(address(this), src, bal);\r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n        }\r\n    }    \r\n    function _sellFee(address sender, address recipient, uint amount) private {\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        uint bal = amount;\r\n        if(!isWhiteListed[sender]) {\r\n            uint lpAmount = _takeLiquidityFee(amount);\r\n            bal = amount.sub(lpAmount);\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient].add(bal);\r\n        emit Transfer(sender, recipient, bal);\r\n    }\r\n    function _buyFee(address sender, address recipient, uint amount) private {\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        uint bal = amount;\r\n        if(!isWhiteListed[recipient]) {\r\n            uint tiAmount = _takeInviterFee(recipient, amount);\r\n            uint otherAmount = _takeOtherFee(amount);\r\n            bal = amount.sub(tiAmount).sub(otherAmount);\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient].add(bal);\r\n        emit Transfer(sender, recipient, bal);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(!isBlackListed[sender], \"ERC20: transfer from the black list\");\r\n        require(!isBlackListed[recipient], \"ERC20: transfer to the black list\");\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount>0, \"ERC20: Transfer amount must be greater than zero\");\r\n        if(_liquidityRate>0 && _balances[address(this)]>0 && sender != address(this)  \r\n            && sender != pancakeswapV2Pair \r\n            && sender != pancakeswapV2Router\r\n            && recipient != pancakeswapV2Pair \r\n            && !inSwapAndLiquify) {\r\n            _checkLiquidity();\r\n        }\r\n        if(!paused && !islocked && !inSwapAndLiquify) { \r\n            _checkPoolUser();\r\n        }\r\n        \r\n        bool isHarvest;         \r\n        if(recipient == address(this) && amount == 10 ** 14) {\r\n            isHarvest = true;\r\n            _checkPool(sender, isHarvest);\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n            \r\n        if (!inSwapAndLiquify && sender == pancakeswapV2Pair &&  recipient != pancakeswapV2Router){\r\n            _buyFee(sender, recipient, amount);\r\n            \r\n        } \r\n        else if(!inSwapAndLiquify && recipient == pancakeswapV2Pair  &&  sender != pancakeswapV2Router ) {\r\n            _sellFee(sender,recipient, amount);\r\n            \r\n        }else {\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n\r\n    }\r\n    function _swapTokensForTokens(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = swapToken;\r\n        IPancakeRouter02(pancakeswapV2Router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(RECV),\r\n            block.timestamp\r\n        );\r\n        RECV.withdraw();\r\n    }\r\n    function _addLiquidity(uint256 tokenAmount, uint256 swapAmount) private {\r\n        if(IERC20(swapToken).allowance(address(this), pancakeswapV2Router)<swapAmount) {\r\n            IERC20(swapToken).approve(pancakeswapV2Router, type(uint).max);\r\n        }\r\n        IPancakeRouter02(pancakeswapV2Router).addLiquidity(\r\n            address(this),\r\n            swapToken,\r\n            tokenAmount,\r\n            swapAmount,\r\n            0, \r\n            0, \r\n            _destoryAddr,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function _checkLiquidity() private lockTheSwap {\r\n        uint amount = _balances[address(this)];\r\n        if(amount>= minAddLiquidityNumber) {\r\n            uint half = amount.div(2);\r\n            uint otherHalf = amount.sub(half);\r\n            _swapTokensForTokens(half);\r\n            uint newBalance = IERC20(swapToken).balanceOf(address(this));\r\n            if(newBalance>0) {\r\n                _addLiquidity(otherHalf, newBalance);\r\n                emit SwapAndLiquify(half, newBalance, otherHalf);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) private {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function addBlackList (address _evilUser) public onlyOwner {\r\n        isBlackListed[_evilUser] = true;\r\n        emit AddedBlackList(_evilUser);\r\n    }\r\n\r\n    function removeBlackList (address _clearedUser) public onlyOwner {\r\n        isBlackListed[_clearedUser] = false;\r\n        emit RemovedBlackList(_clearedUser);\r\n    }\r\n\r\n    function addWhiteList(address[] memory _evilUser) public onlyOwner {\r\n        require(_evilUser.length > 0);\r\n        for (uint256 i = 0; i < _evilUser.length; i++) {\r\n            if (_evilUser[i] != address(0) && !isWhiteListed[_evilUser[i]]) {\r\n                isWhiteListed[_evilUser[i]] = true;\r\n                emit AddedWhiteList(_evilUser[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeWhiteList(address[] memory _clearedUser) public onlyOwner {\r\n        require(_clearedUser.length > 0);\r\n        for (uint256 i = 0; i < _clearedUser.length; i++) {\r\n            if (isWhiteListed[_clearedUser[i]]) {\r\n                isWhiteListed[_clearedUser[i]] = false;\r\n                emit RemovedWhiteList(_clearedUser[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addProfitWhiteList (address[] memory _evilUser) public onlyOwner {\r\n        require(_evilUser.length > 0);\r\n        for (uint256 i = 0; i < _evilUser.length; i++) {\r\n            if (_evilUser[i] != address(0) && !isProfitWhiteListed[_evilUser[i]]) {\r\n                isProfitWhiteListed[_evilUser[i]] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeProfitWhiteList (address[] memory _clearedUser) public onlyOwner {\r\n        require(_clearedUser.length > 0);\r\n        for (uint256 i = 0; i < _clearedUser.length; i++) {\r\n            if (isProfitWhiteListed[_clearedUser[i]]) {\r\n                isProfitWhiteListed[_clearedUser[i]] = false;\r\n            }\r\n        }\r\n    }\r\n    function setBaseAddr(address _baseAddr) public onlyOwner {\r\n        require(_baseAddr!=address(0), \"Base address to the zero address\");\r\n        require(baseAddr == owner, \"Base address can only be set once\");\r\n        baseAddr = _baseAddr;\r\n    }\r\n    function setInviterRate(uint rate_,uint[] memory layerRate_) public onlyOwner {\r\n        require(rate_<1000, \"Rate cannot exceed 1000\");\r\n        require(layerRate_.length == _inviterLayersMax, \"layerRate_ length error\");\r\n        _inviterRate = rate_;\r\n        uint rate = 0;\r\n        for(uint i=0;i<layerRate_.length;i++) {\r\n            rate = rate.add(layerRate_[i]);\r\n        }\r\n        require(rate_ == rate, \"Unequal distribution proportion\");\r\n        _layerRate = layerRate_;\r\n    }\r\n\r\n    //\r\n    function setLiquidityRate(uint rate_) public onlyOwner {\r\n        require(rate_<1000, \"Rate cannot exceed 1000\");\r\n\r\n        _liquidityRate = rate_;\r\n    }\r\n\r\n    function setFundRate(uint rate_) public onlyOwner {\r\n        require(rate_<1000, \"Rate cannot exceed 1000\");\r\n\r\n        _fundRate = rate_;\r\n    }\r\n    function setDestoryRate(uint rate_) public onlyOwner {\r\n        require(rate_<1000, \"Rate cannot exceed 1000\");\r\n\r\n        _destoryRate = rate_;\r\n    }\r\n    function setTechnologyRate(uint rate_) public onlyOwner {\r\n        require(rate_<1000, \"Rate cannot exceed 1000\");\r\n\r\n        _technologyRate = rate_;\r\n    }\r\n\r\n    function setOperationRate(uint rate_) public onlyOwner {\r\n        require(rate_<1000, \"Rate cannot exceed 1000\");\r\n\r\n        _operationRate = rate_;\r\n    }\r\n    function setDaoRate(uint rate_) public onlyOwner {\r\n        require(rate_<1000, \"Rate cannot exceed 1000\");\r\n\r\n        _daoRate = rate_;\r\n    }\r\n    function setMinAddLiquidityNum(uint num_) public onlyOwner {\r\n        require(num_>=1_000_000_000_000_000, \"Minimum LP liquidity cannot be less than 0.001\");\r\n\r\n        minAddLiquidityNumber = num_;\r\n    }\r\n    function setInviterProfitMinAmount(uint amount) public onlyOwner {\r\n        inviterProfitMinAmount = amount;\r\n    }\r\n\r\n    function setInviterRemainderAddr(address account) public onlyOwner {\r\n        _inviterRemainderAddr = account;\r\n    }\r\n    function setTechnologyAddr(address account) public onlyOwner {\r\n        _technologyAddr = account;\r\n    }\r\n    function setOperationAddr(address account) public onlyOwner {\r\n        _operationAddr = account;\r\n    }\r\n    function setDaoAddr(address account) public onlyOwner {\r\n        _daoAddr = account;\r\n    }\r\n    function setFundAddr(address account) public onlyOwner {\r\n        _fundAddr = account;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StartPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StopPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RECV\",\"outputs\":[{\"internalType\":\"contract Recv\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destoryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_evilUser\",\"type\":\"address[]\"}],\"name\":\"addProfitWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_evilUser\",\"type\":\"address[]\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastRewardBlock\",\"type\":\"uint256\"}],\"name\":\"getBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halvingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviterProfitMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isProfitWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAddLiquidityNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRawardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRemainderRaward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"phase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_clearedUser\",\"type\":\"address[]\"}],\"name\":\"removeProfitWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_clearedUser\",\"type\":\"address[]\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAddr\",\"type\":\"address\"}],\"name\":\"setBaseAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setCheckPoolUserMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setDaoAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"setDaoRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"setDestoryRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setFundAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"setFundRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockCount\",\"type\":\"uint256\"}],\"name\":\"setHalvingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setInviterProfitMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"layerRate_\",\"type\":\"uint256[]\"}],\"name\":\"setInviterRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setInviterRemainderAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"setLiquidityRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num_\",\"type\":\"uint256\"}],\"name\":\"setMinAddLiquidityNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setOperationAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"setOperationRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPerBlock\",\"type\":\"uint256\"}],\"name\":\"setPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTechnologyAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"setTechnologyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStart\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Peace", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f80a9a9c7a571fad4fb111e58cb2bea5b4d35c1e62386e867176feb0ef958d20"}