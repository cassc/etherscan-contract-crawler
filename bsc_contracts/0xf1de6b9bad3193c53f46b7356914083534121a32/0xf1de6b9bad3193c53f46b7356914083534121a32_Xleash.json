{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor(\r\n        address token,\r\n        address receiver\r\n    ) {\r\n        _owner = receiver;\r\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!owner\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function sync() external;\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _isExcludedFromFees;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public immutable _swapRouter;\r\n    mapping(address => bool) public _swapPairList;\r\n    mapping(address => bool) public _swapRouters;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    TokenDistributor public _tokenDistributor; //\r\n\r\n    NFTReward public xleashNftReward;\r\n    NFTReward public shibNftRewrad;\r\n    LPRewardProcessor public lpRewardProcessor;\r\n\r\n    uint256 public _buyDestroyFee = 100;\r\n    uint256 public _buyLPDividendFee = 150;\r\n    uint256 public _buyNFTFee = 200;\r\n    uint256 public _buyXshibNFTFee = 50;\r\n\r\n    uint256 public _sellDestroyFee = 200;\r\n    uint256 public _sellLPDividendFee = 100;\r\n    uint256 public _sellNFTFee = 150;\r\n    uint256 public _sellXshibNFTFee = 50;   \r\n\r\n    uint256 public _walletLimitAMount = 50000000*1e18;\r\n\r\n    address public immutable _mainPair;\r\n    address public  immutable _usdt;\r\n\r\n    uint256 public _startTradeTime;\r\n\r\n    address public Xshib;\r\n\r\n    uint256 public _numToSell;\r\n\r\n    uint256 public _xleashNftRewardCount;\r\n\r\n    uint256 public _shibNftRewradCount;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, \r\n        address UsdtAddress,\r\n        address ReceiveAddress\r\n    ){\r\n        require(address(UsdtAddress) < address(this),\"usdt must be token0\");\r\n\r\n        _name = \"Xleash\";\r\n        _symbol = \"Xleash\";\r\n        _decimals = 18;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        _swapRouters[address(swapRouter)] = true;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        _usdt = UsdtAddress;\r\n        IERC20(_usdt).approve(address(swapRouter), MAX);\r\n        address pair = swapFactory.createPair(address(this), _usdt);\r\n        _swapPairList[pair] = true;\r\n        _mainPair = pair;\r\n\r\n        uint256 tokenUnit = 10 ** _decimals;\r\n        uint256 total = 100000000 * tokenUnit;\r\n        _tTotal = total;\r\n\r\n        uint256 receiveTotal = total;\r\n        _balances[ReceiveAddress] = receiveTotal;\r\n        emit Transfer(address(0), ReceiveAddress, receiveTotal);\r\n\r\n        xleashNftReward = new NFTReward(0x2cc5451EfcBFA9e5AcFFC7298034e67AA7C4aD8f, msg.sender);\r\n        shibNftRewrad =  new NFTReward(0xA04Be0083E16c1baAB65532cAEb18F2b1D5bC880, msg.sender);\r\n        lpRewardProcessor =  new LPRewardProcessor(_usdt,_mainPair);\r\n\r\n        Xshib = 0x64771885Fa0f6A49ae0e1B925242c3935Dbf6F34;\r\n\r\n        _tokenDistributor = new TokenDistributor(_usdt,ReceiveAddress);\r\n\r\n        fundAddress = 0x356D4083f05C44967dA51E16a7e1D7408E935b63;\r\n\r\n        _isExcludedFromFees[ReceiveAddress] = true;\r\n        _isExcludedFromFees[fundAddress] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[address(swapRouter)] = true;\r\n        _isExcludedFromFees[msg.sender] = true;\r\n        _isExcludedFromFees[address(0)] = true;\r\n        _isExcludedFromFees[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        _isExcludedFromFees[address(_tokenDistributor)] = true;\r\n\r\n        _numToSell = 10 * tokenUnit;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"BNE\");\r\n\r\n        bool takeFee;\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            _tokenTransfer(from, to, amount, false);\r\n            return;\r\n        }\r\n\r\n        bool isAddLP;\r\n\r\n        if (to == _mainPair) {\r\n            isAddLP = _isAddLiquidity(amount);\r\n            if(isAddLP){\r\n                lpRewardProcessor.addHolder(from);\r\n                _tokenTransfer(from, to, amount, false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if ((_swapPairList[from] || _swapPairList[to])) {\r\n            require(0 < _startTradeTime,\"not open\");\r\n            takeFee = true;\r\n\r\n            if (block.timestamp < _startTradeTime + 15) {\r\n                _funTransfer(from, to, amount);\r\n                return;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n        if(!_swapPairList[to] &&  _startTradeTime + 1800 > block.timestamp){\r\n            require(balanceOf(to) <= _walletLimitAMount,\"exceed wallet limit!\");\r\n        }\r\n\r\n        if(_swapPairList[from]){\r\n            lpRewardProcessor.processReward(200000);\r\n        }else if(_swapPairList[to]){\r\n            shibNftRewrad.distribute(_xleashNftRewardCount);\r\n        }else {\r\n            xleashNftReward.distribute(_shibNftRewradCount);\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (bool isAdd){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        uint256 rToken;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n            rToken = r1;\r\n        } else {\r\n            r = r1;\r\n            rToken = r0;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(_mainPair));\r\n        if (rToken == 0) {\r\n            isAdd = bal > r;\r\n        } else {\r\n            isAdd = bal > r + r * amount / rToken / 2;\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(_mainPair));\r\n        isRemove = r > bal;\r\n    }\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 99 / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            fundAddress,\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        uint256 senderBalance = _balances[sender];\r\n        senderBalance -= tAmount;\r\n        _balances[sender] = senderBalance;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            bool isSell;\r\n            uint256 swapFeeAmount;\r\n            uint256 funFeeAmount;\r\n            if (_swapPairList[sender]) {//Buy\r\n                swapFeeAmount = tAmount * (_buyLPDividendFee + _buyDestroyFee + _buyNFTFee + _buyXshibNFTFee) / 10000;\r\n            } else if (_swapPairList[recipient]) {//Sell\r\n                isSell = true;\r\n                if(_startTradeTime + 1800 > block.timestamp){\r\n                    funFeeAmount = tAmount * 3000 / 10000;\r\n                }else {\r\n                    swapFeeAmount = tAmount * (_sellLPDividendFee + _sellDestroyFee + _sellNFTFee + _sellXshibNFTFee) / 10000;\r\n                }\r\n            }\r\n\r\n            if (swapFeeAmount > 0) {\r\n                feeAmount += swapFeeAmount;\r\n                _takeTransfer(sender, address(this), swapFeeAmount);\r\n            }\r\n\r\n            if (funFeeAmount > 0) {\r\n                feeAmount += funFeeAmount;\r\n                _takeTransfer(sender, fundAddress, funFeeAmount);\r\n            }\r\n\r\n            if (isSell && !inSwap) {\r\n                uint256 contractTokenBalance = _balances[address(this)];\r\n                uint256 numToSell = _numToSell;\r\n                if (contractTokenBalance >= numToSell) {\r\n                    swapTokenForFund(numToSell);\r\n                }\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n     function swapTokenForFund(uint256 tokenAmount) public lockTheSwap {\r\n        uint256 totalFee = _buyLPDividendFee + _buyDestroyFee + _buyNFTFee + _buyXshibNFTFee \r\n                           + _sellDestroyFee + _sellLPDividendFee + _sellNFTFee + _sellXshibNFTFee;\r\n\r\n        uint256 swapAmount4XSHI = (tokenAmount *(_buyDestroyFee + _sellDestroyFee)) / totalFee;\r\n\r\n        if (swapAmount4XSHI > 0) {\r\n            address[] memory _path = new address[](3);\r\n            _path[0] = address(this);\r\n            _path[1] = _usdt;\r\n            _path[2] = Xshib;\r\n            try\r\n                _swapRouter\r\n                    .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                        swapAmount4XSHI,\r\n                        0,\r\n                        _path,\r\n                        0x000000000000000000000000000000000000dEaD,\r\n                        block.timestamp\r\n                    )\r\n            {} catch {\r\n                emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    0\r\n                );\r\n            }\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        try\r\n            _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount - swapAmount4XSHI,\r\n                0,\r\n                path,\r\n                address(_tokenDistributor),\r\n                block.timestamp\r\n            )\r\n        {} catch {\r\n            emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                0\r\n            );\r\n        }\r\n\r\n        uint256 usdtFee = _buyLPDividendFee + _buyNFTFee + _buyXshibNFTFee \r\n                            + _sellLPDividendFee + _sellNFTFee + _sellXshibNFTFee;\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n\r\n        uint256 usdtBanlance = USDT.balanceOf(address(_tokenDistributor));\r\n\r\n        uint256 gouyingNftRewardAmount = (usdtBanlance *(_buyNFTFee + _sellNFTFee)) / usdtFee;\r\n\r\n        if(gouyingNftRewardAmount > 0){\r\n            USDT.transferFrom(address(_tokenDistributor), address(xleashNftReward), gouyingNftRewardAmount);\r\n        }\r\n\r\n        uint256 shibNftRewardAmount = (usdtBanlance *(_buyXshibNFTFee + _sellXshibNFTFee)) / usdtFee;\r\n\r\n        if(shibNftRewardAmount > 0){\r\n            USDT.transferFrom(address(_tokenDistributor), address(shibNftRewrad), shibNftRewardAmount);\r\n        }\r\n\r\n        uint256 leftAmout =usdtBanlance - gouyingNftRewardAmount - shibNftRewardAmount;\r\n\r\n        if(leftAmout > 0){\r\n            USDT.transferFrom(address(_tokenDistributor), address(lpRewardProcessor), leftAmout);\r\n        }\r\n\r\n    }\r\n\r\n    event Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 value\r\n    );\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _isExcludedFromFees[addr] = true;\r\n    }\r\n\r\n    function setExcludedFromFees(address addr, bool enable) external onlyOwner {\r\n        _isExcludedFromFees[addr] = enable;\r\n    }\r\n\r\n    function batchSetExcludedFromFees(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _isExcludedFromFees[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function setSwapRouter(address addr, bool enable) external onlyOwner {\r\n        _swapRouters[addr] = enable;\r\n    }\r\n\r\n    function setWalletLimitAMount(uint256 _newVal)external onlyOwner{\r\n        _walletLimitAMount = _newVal;\r\n    }\r\n\r\n    function setXShibNftDistributor(address _addr)external onlyOwner{\r\n        shibNftRewrad = NFTReward(_addr);\r\n    }\r\n\r\n    function setXleashNftDistributor(address _addr)external onlyOwner{\r\n        xleashNftReward = NFTReward(_addr);\r\n    }\r\n\r\n    function setLpReward(address _addr) external onlyOwner{\r\n        lpRewardProcessor = LPRewardProcessor(_addr);\r\n    }\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(\r\n        address token,\r\n        uint256 amount,\r\n        address to\r\n    ) external onlyFunder {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    modifier onlyFunder() {\r\n        require(_owner == msg.sender || fundAddress == msg.sender, \"!Funder\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == _startTradeTime, \"T\");\r\n        _startTradeTime = block.timestamp;\r\n    }\r\n\r\n    function setNumToSell(uint256 amount) external onlyOwner {\r\n        _numToSell = amount;\r\n    }\r\n\r\n    function addHolderBatch(address[] memory addList) external onlyOwner{\r\n        for(uint256 i = 0; i < addList.length; i++){\r\n            lpRewardProcessor.addHolder(addList[i]);\r\n        }\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        lpRewardProcessor.setHolderRewardCondition(amount);\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        lpRewardProcessor.setExcludeHolder(addr, enable);\r\n    }\r\n\r\n    function withdrawTo(address destination, uint256 amount) external onlyOwner {\r\n        lpRewardProcessor.withdrawTo(destination,  amount);\r\n    }\r\n\r\n    function setLpManager(address _addr) external onlyOwner{\r\n        lpRewardProcessor.setLpManager(_addr);\r\n    }\r\n\r\n    function setxleashNftRewardCount(uint256 _count) external onlyOwner {\r\n        _xleashNftRewardCount = _count;\r\n    }\r\n\r\n    function setShibNftRewradCount(uint256 _count) external onlyOwner {\r\n        _shibNftRewradCount = _count;\r\n    }\r\n\r\n}\r\n\r\ncontract Xleash is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //USDT\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n    //Receive\r\n        address(0xf27845e3223C4f8A93B454e4CcF3713F2ADA0000)\r\n    ){\r\n\r\n    }\r\n}\r\n\r\n\r\ninterface IERC721 {\r\n    function totalSupply() external view returns (uint256);\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n}\r\n\r\ncontract NFTReward is Ownable {\r\n    IERC20 public USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    IERC721 public nftToken;\r\n\r\n    uint256 public lastProcessedTokenIndex = 0;\r\n    uint256 public rewardPerOwner;\r\n    uint256 public minDistributeAmount = 1e18;\r\n    uint256 public startTokenId = 1;\r\n\r\n    mapping(uint256 => bool) public isExcluded;\r\n    uint256[] public excludedNftIds;\r\n\r\n    constructor(address _nftAddress,address _owner) {\r\n        nftToken = IERC721(_nftAddress);\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    function addExcludedNftId(uint256 _tokenId) external onlyOwner {\r\n        require(!isExcluded[_tokenId], \"Token ID already excluded\");\r\n        isExcluded[_tokenId] = true;\r\n        excludedNftIds.push(_tokenId);\r\n    }\r\n\r\n    function removeExcludedNftId(uint256 _tokenId) external onlyOwner {\r\n        require(isExcluded[_tokenId], \"Token ID is not excluded\");\r\n        isExcluded[_tokenId] = false;\r\n\r\n        // Remove the tokenId from excludedNftIds array\r\n        for (uint256 i = 0; i < excludedNftIds.length; i++) {\r\n            if (excludedNftIds[i] == _tokenId) {\r\n                excludedNftIds[i] = excludedNftIds[excludedNftIds.length - 1];\r\n                excludedNftIds.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function distribute(uint256 numberOfTokens) external {\r\n        if (rewardPerOwner == 0) {\r\n            uint256 totalNFT = nftToken.totalSupply() - excludedNftIds.length;\r\n            if(totalNFT == 0) {\r\n                return;\r\n            }\r\n\r\n            uint256 totalUSDT = USDT.balanceOf(address(this));\r\n            if(totalUSDT < minDistributeAmount){\r\n                return;\r\n            }\r\n            rewardPerOwner = totalUSDT / totalNFT;\r\n            lastProcessedTokenIndex = 0;\r\n        }\r\n\r\n        for (uint256 i = 0; i < numberOfTokens && lastProcessedTokenIndex < nftToken.totalSupply(); i++) {\r\n            if (!isExcluded[lastProcessedTokenIndex]) {\r\n                address nftOwner = nftToken.ownerOf(lastProcessedTokenIndex + startTokenId);\r\n                if(nftOwner==address(0))continue ;\r\n                USDT.transfer(nftOwner, rewardPerOwner);\r\n            }\r\n            lastProcessedTokenIndex++;\r\n        }\r\n\r\n        // Reset if finished\r\n        if (lastProcessedTokenIndex >= nftToken.totalSupply()) {\r\n            rewardPerOwner = 0;\r\n        }\r\n    }\r\n\r\n    function setMinDistributeAmount(uint256 newValue) external  onlyOwner{\r\n        minDistributeAmount = newValue;\r\n    }\r\n\r\n    function withdrawUSDT(address _to) external onlyOwner {\r\n        uint256 totalUSDT = USDT.balanceOf(address(this));\r\n        require(USDT.transfer(_to, totalUSDT), \"Withdrawal failed\");\r\n    }\r\n\r\n    // Optional: Change NFT address if needed\r\n    function changeNFTAddress(address _newAddress) external onlyOwner {\r\n        nftToken = IERC721(_newAddress);\r\n    }\r\n}\r\n\r\ninterface ILpManager{\r\n    function userBalances(address user) external returns (uint256);\r\n}\r\n\r\ncontract LPRewardProcessor is Ownable {\r\n    address[] public holders;\r\n    mapping(address => uint256) holderIndex;\r\n    mapping(address => bool) excludeHolder;\r\n\r\n    uint256 private currentIndex;\r\n    uint256 private holderRewardCondition = 1e18;\r\n    uint256 private progressRewardBlock;\r\n    address private _usdt;\r\n    address private _mainPair;\r\n\r\n    ILpManager public lpManager = ILpManager(0xb22ECC060b5c9780226314e284449DA8660fAd31); \r\n\r\n    constructor(address usdt, address mainPair) {\r\n        _usdt = usdt;\r\n        _mainPair = mainPair;\r\n    }\r\n\r\n    function getHolderLength() public view returns(uint256){\r\n        return holders.length;\r\n    }\r\n\r\n    function addHolder(address adr) external  onlyOwner{\r\n        uint256 size;\r\n        assembly {size := extcodesize(adr)}\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function processReward(uint256 gas) external {\r\n        if (progressRewardBlock + 200 > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 balance = USDT.balanceOf(address(this));\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        _distributeReward(USDT, balance, gas);\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function processRewardWithoutCondition(uint256 gas) public {\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 balance = USDT.balanceOf(address(this));\r\n        if (balance == 0) {\r\n            return;\r\n        }\r\n        _distributeReward(USDT, balance, gas);\r\n    }\r\n\r\n    function _distributeReward(IERC20 USDT, uint256 balance, uint256 gas) private {\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder) + lpManager.userBalances(shareHolder);\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                amount = balance * tokenBalance / holdTokenTotal;\r\n                if (amount > 0) {\r\n                    USDT.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setLpManager(address _addr) external onlyOwner{\r\n        lpManager = ILpManager(_addr);\r\n    }\r\n\r\n    function withdrawTo(address destination, uint256 amount) external onlyOwner {\r\n        require(IERC20(_usdt).transfer(destination, amount), \"Transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Xshib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyXshibNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_numToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellXshibNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_shibNftRewradCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletLimitAMount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_xleashNftRewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addList\",\"type\":\"address[]\"}],\"name\":\"addHolderBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardProcessor\",\"outputs\":[{\"internalType\":\"contract LPRewardProcessor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setLpManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setLpReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNumToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setShibNftRewradCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setWalletLimitAMount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setXShibNftDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setXleashNftDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setxleashNftRewardCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shibNftRewrad\",\"outputs\":[{\"internalType\":\"contract NFTReward\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapTokenForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xleashNftReward\",\"outputs\":[{\"internalType\":\"contract NFTReward\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Xleash", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0de339ec6d150d1da98fd1327c9b2c234d6139ace4c33116b861ed2a49b80ac6"}