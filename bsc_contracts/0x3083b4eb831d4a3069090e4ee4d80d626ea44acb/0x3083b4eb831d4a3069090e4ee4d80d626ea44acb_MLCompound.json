{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n  interface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IPCS{\r\n        function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n            function WETH() external pure returns (address);\r\n                function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\ninterface IML is IBEP20{\r\n    function totalPayout(address account) external view returns(uint);\r\n    function getDividents(address account) external view returns(uint);\r\n}\r\n\r\ncontract MLCompound is Ownable{\r\n    mapping(address=>uint) alreadyCompounded;\r\n    IML ML=IML(0xc4fB957e3F1c04C8Dc4000525e55920861F25bFc);\r\n    IPCS PCS=IPCS(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    function Compound() external payable{\r\n        uint maxCompound=GetMaxCompound(msg.sender);\r\n        require(msg.value<=maxCompound, \"more than max\");\r\n        alreadyCompounded[msg.sender]+=msg.value;\r\n        ML.transfer(msg.sender, SwapForToken(msg.value,address(ML)));\r\n    }\r\n\r\n    function CompoundBM() external payable{\r\n        uint maxCompound=GetMaxCompound(msg.sender);\r\n        require(msg.value<=maxCompound, \"more than max\");\r\n        alreadyCompounded[msg.sender]+=msg.value;\r\n        IBEP20 BM=IBEP20(0x97c6825e6911578A515B11e25B552Ecd5fE58dbA);\r\n        BM.transfer(msg.sender, SwapForToken(msg.value,address(BM)));\r\n    }\r\n    function CompoundPartnerToken(address token,address router,bool viaContract) external payable{\r\n        uint maxCompound=GetMaxCompound(msg.sender);\r\n        require(msg.value<=maxCompound, \"more than max\");\r\n        alreadyCompounded[msg.sender]+=msg.value;\r\n        IBEP20 Token=IBEP20(token);\r\n        IPCS Router=IPCS(router);\r\n        address[] memory path = new address[](2);\r\n        path[1] = token;\r\n        path[0] = Router.WETH();\r\n        if(viaContract)\r\n        {\r\n        uint256 initialBalance=Token.balanceOf(address(this));\r\n        Router.swapExactETHForTokens{value:msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n        Token.transfer(msg.sender, Token.balanceOf(address(this))-initialBalance);\r\n        }\r\n        else{\r\n        Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value:msg.value}(\r\n            0,\r\n            path,\r\n            msg.sender,\r\n            block.timestamp);\r\n        }\r\n    }\r\n\r\n\r\n    function SwapForToken(uint BNBAmount,address token) private returns(uint256){\r\n        address[] memory path = new address[](2);\r\n        IBEP20 Token=IBEP20(token);\r\n        path[1] = token;\r\n        path[0] = PCS.WETH();\r\n        uint256 initialBalance=Token.balanceOf(address(this));\r\n\r\n        PCS.swapExactETHForTokens{value:BNBAmount}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n        return Token.balanceOf(address(this))-initialBalance;\r\n    }\r\n    function GetMaxCompound(address account) public view returns(uint){\r\n        uint TotalDividents=ML.totalPayout(account)+ML.getDividents(account);\r\n        return TotalDividents-alreadyCompounded[account];\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Compound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CompoundBM\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"viaContract\",\"type\":\"bool\"}],\"name\":\"CompoundPartnerToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GetMaxCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MLCompound", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a2c56cae463e6e94ecb12050c49e35ebf4b7229fd4cfc7dea204ce7dcf2151cd"}