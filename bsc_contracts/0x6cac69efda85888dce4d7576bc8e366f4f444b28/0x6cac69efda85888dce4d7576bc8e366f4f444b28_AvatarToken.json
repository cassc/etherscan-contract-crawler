{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n    @dev Context, Owner, Pausable\r\n    \r\n*/\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    \r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// \r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    //function owner() public view returns (address) {\r\n    //    return _owner;\r\n    //}\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"not owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n       emit OwnershipTransferred(_owner, address(0));\r\n       _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n       require(newOwner != address(0), \"zero address\");\r\n       emit OwnershipTransferred(_owner, newOwner);\r\n       _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    \r\n    //\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused, \"not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n* @title IBEP20 interface\r\n*/\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Avatar Token\r\ncontract AvatarToken is Context, IBEP20, Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    // for tech\r\n    struct TechInfo {\r\n        uint launchTs;\r\n        uint unlockPerYear;\r\n        uint totalBal;\r\n        uint unlockBal;\r\n        address addr;\r\n    }\r\n\r\n    // events\r\n    event AdjustBurnFeeRate(uint feeBasisPoints);\r\n    event SetTechAddress(address indexed newAddr);\r\n    event ExcludedFee(address account, bool bYes);\r\n\r\n    uint256 private constant MAX_BURN_FEE_RATE_PER_TX = 500;  // The maximum fee cannot exceed 5%\r\n    uint256 private constant MAX_UINT = 2**256 - 1;\r\n    int private constant MAX_TECH_LOCK_YEARS = 8;\r\n    uint256 private constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    uint256 private _totalSupply;\r\n    uint256 private _baseSupply;\r\n    uint256 private _burnFeeRatePerTx = 20;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    mapping (address => bool) private _excludedFees;\r\n\r\n    // tech stake\r\n    TechInfo public techInfo;\r\n\r\n    //\r\n    constructor() public {\r\n\r\n        uint decimals_ = 18;\r\n        _totalSupply = 3 * 10 ** 8 * 10 ** decimals_;                                   // 3 * 10**8\r\n        _baseSupply = 3 * 10 ** 7 * 10 ** decimals_;                                    // 3 * 10**7\r\n\r\n        // for tech\r\n        techInfo.totalBal = _totalSupply.mul(12).div(100);                              // 12% shares for tech\r\n        techInfo.unlockPerYear = techInfo.totalBal.mul(12).div(100);                    // 12% per year before the eighth year\r\n\r\n        _name = \"Avatar Token\";\r\n        _symbol = \"ATAR\";\r\n        _decimals = uint8(decimals_);\r\n        techInfo.launchTs = now;\r\n\r\n        //exclude owner and this contract from fee\r\n        _excludedFees[_msgSender()] = true;\r\n        _excludedFees[address(this)] = true;\r\n\r\n        // mint total Supply\r\n        _balances[_owner] = _totalSupply;\r\n        emit Transfer(address(0), _owner, _totalSupply);\r\n\r\n        // 12% assigned to technology\r\n        _balances[_owner] = _balances[_owner].sub(techInfo.totalBal);\r\n\r\n        // The tech part is temporarily held by contract\r\n        _balances[address(this)] = _balances[address(this)].add(techInfo.totalBal);\r\n        emit Transfer(_owner, address(this), techInfo.totalBal);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param user_ The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address user_) public override view returns (uint256) {\r\n        return _balances[user_];\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function baseSupply() public view returns (uint) {\r\n        return _baseSupply;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the bep token owner.\r\n    */\r\n    function getOwner() public override view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the token _decimals.\r\n    */\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the token _symbol.\r\n    */\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the token _name.\r\n    */\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    //\r\n    function setTechAddress(address addr_) public onlyOwner {\r\n        require(addr_ != address(0));\r\n        techInfo.addr = addr_;\r\n        emit SetTechAddress(addr_);\r\n    }\r\n\r\n    // extract part of the tech\r\n    function extractTech() public returns (bool) {\r\n\r\n        require(techInfo.addr != address(0), \"et1\");\r\n        require(techInfo.totalBal > techInfo.unlockBal, \"et2\");\r\n        require(_balances[address(this)] > 0, \"et3\");\r\n\r\n        uint _elapsed = 0;\r\n        int _days = int((now - techInfo.launchTs) / SECONDS_PER_DAY);\r\n        int _years = int(_days / 365);\r\n        if ( _years < MAX_TECH_LOCK_YEARS ) {\r\n            _elapsed = uint(_years) * techInfo.unlockPerYear;\r\n        }\r\n        else {\r\n            _elapsed = techInfo.totalBal;\r\n        }\r\n\r\n        require(techInfo.unlockBal < _elapsed, \"et5\");\r\n\r\n        uint _expect = _elapsed.sub(techInfo.unlockBal);\r\n        techInfo.unlockBal = techInfo.unlockBal.add(_expect);\r\n\r\n        _transferFrom(address(this), techInfo.addr, _expect, _expect);\r\n        return true;\r\n    }\r\n\r\n    // transfer\r\n    function transfer(address to_, uint value_) public override whenNotPaused returns (bool) {\r\n        return _transferFromByBurnVer(_msgSender(), to_, value_);\r\n    }\r\n\r\n    // transferFrom\r\n    function transferFrom(address from_, address to_, uint256 value_) public override whenNotPaused returns (bool) {\r\n        require(value_ <= _allowed[from_][_msgSender()], \"tf1\");\r\n        _transferFromByBurnVer(from_, to_, value_);\r\n        if (_allowed[from_][_msgSender()] < MAX_UINT) {\r\n            _allowed[from_][_msgSender()] = _allowed[from_][_msgSender()].sub(value_);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //\r\n    function _transferFromByBurnVer(address from_, address to_, uint value_) internal returns (bool) {\r\n        uint netArrived_ = value_;\r\n        if ( !_excludedFees[from_] ) {\r\n            uint fee_ = _calcFee(value_);\r\n            if (fee_ > 0) {\r\n                fee_ = _burnFee(from_, fee_);\r\n            }\r\n            netArrived_ = value_.sub(fee_);\r\n        }\r\n        _transferFrom(from_, to_, value_, netArrived_);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of _msgSender().\r\n    *\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * @param spender_ The address which will spend the funds.\r\n    * @param value_ The amount of tokens to be spent.\r\n    */\r\n    function approve(address spender_, uint256 value_) public override returns (bool) {\r\n        require(spender_ != address(0), \"a1\");\r\n        _allowed[_msgSender()][spender_] = value_;\r\n        emit Approval(_msgSender(), spender_, value_);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an own _allowed to a spender.\r\n    * @param own_ address The address which owns the funds.\r\n    * @param spender_ address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address own_, address spender_) public override view returns (uint256) {\r\n        return _allowed[own_][spender_];\r\n    }\r\n\r\n    /**\r\n    * approve should be called when _allowed[spender_] == 0. To increment\r\n    * _allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    */\r\n    function increaseApproval(address spender_, uint addedValue_) public returns (bool) {\r\n        _allowed[_msgSender()][spender_] = _allowed[_msgSender()][spender_].add(addedValue_);\r\n        emit Approval(_msgSender(), spender_, _allowed[_msgSender()][spender_]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address spender_, uint subtractedValue_) public returns (bool) {\r\n        uint oldValue = _allowed[_msgSender()][spender_];\r\n        if (subtractedValue_ > oldValue) {\r\n            _allowed[_msgSender()][spender_] = 0;\r\n        } else {\r\n            _allowed[_msgSender()][spender_] = oldValue.sub(subtractedValue_);\r\n        }\r\n        emit Approval(_msgSender(), spender_, _allowed[_msgSender()][spender_]);\r\n        return true;\r\n    }\r\n\r\n    // Mint a new amount_ of tokens\r\n    // these tokens are deposited into the owner address\r\n    //\r\n    // @param _amount Number of tokens to be minted\r\n    function mint(uint amount_) public onlyOwner {\r\n        _balances[_owner] = _balances[_owner].add(amount_);\r\n        _totalSupply = _totalSupply.add(amount_);\r\n        emit Transfer(address(0), _owner, amount_);\r\n    }\r\n\r\n    // Burn tokens.\r\n    // These tokens are burned from this contract\r\n    // if the balance must be enough to cover the burn\r\n    // or the call will fail.\r\n    // @param _amount Number of tokens to be burned\r\n    function burn(uint amount_) public onlyOwner {\r\n        require(_totalSupply >= _baseSupply, \"b1\");\r\n        require(amount_ < _totalSupply, \"b2\");\r\n        require(amount_ < _balances[_owner], \"b3\");\r\n        uint burned_ = amount_;\r\n        if ( amount_ >= _balances[_owner] ) {\r\n            burned_ = _balances[_owner];\r\n        }\r\n        if ((_totalSupply-burned_) < _baseSupply){\r\n            burned_ = _totalSupply - _baseSupply;\r\n        }\r\n        _totalSupply = _totalSupply.sub(burned_);\r\n        _balances[_owner] = _balances[_owner].sub(burned_);\r\n        emit Transfer(_owner, address(0), burned_);\r\n    }\r\n\r\n    // 20, 10000\r\n    function setBurnFeeRatePerTx(uint newRate_) public onlyOwner {\r\n        require(newRate_ < MAX_BURN_FEE_RATE_PER_TX);\r\n        _burnFeeRatePerTx = newRate_;\r\n        emit AdjustBurnFeeRate(_burnFeeRatePerTx);\r\n    }\r\n\r\n    function getBurnFeeRatePerTx() public view returns (uint) {\r\n        return _burnFeeRatePerTx;\r\n    }\r\n\r\n    function _calcFee(uint value_) private view returns (uint) {\r\n        uint fee_ = (value_.mul(_burnFeeRatePerTx)).div(10000);\r\n        return fee_;\r\n    }\r\n\r\n    function excludeFee(address account) external onlyOwner {\r\n        _excludedFees[account] = true;\r\n        emit ExcludedFee(account, true);\r\n    }\r\n    \r\n    function includeFee(address account) external onlyOwner {\r\n        _excludedFees[account] = false;\r\n        emit ExcludedFee(account, false);\r\n    }\r\n\r\n    function isExcludedFee(address account) external view returns(bool) {\r\n        return _excludedFees[account];\r\n    }\r\n\r\n    function _burnFee(address from_, uint fee_) private returns (uint) {\r\n\r\n        if (_totalSupply <= _baseSupply)\r\n            return 0;\r\n\r\n        // total supply\r\n        uint burnedFee_ = fee_;\r\n        uint _newSupply = _totalSupply.sub(fee_);\r\n        if (_newSupply < _baseSupply) {\r\n            _newSupply = _baseSupply;\r\n            burnedFee_ = _totalSupply.sub(_baseSupply);\r\n        }\r\n        _totalSupply = _newSupply;\r\n\r\n        emit Transfer(from_, address(0), burnedFee_);\r\n        return burnedFee_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param from_ The address to transfer from.\r\n    * @param to_ The address to transfer to.\r\n    * @param amount_ The amount to be transferred.\r\n    * @param netArrived_ The amount to be net arrived for to_.\r\n    */\r\n    function _transferFrom(address from_, address to_, uint256 amount_, uint256 netArrived_) private returns (bool) {\r\n\r\n        require(to_ != address(0), \"_t1\");\r\n        require(amount_ <= _balances[from_], \"_t2\");\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        _balances[from_] = _balances[from_].sub(amount_);\r\n        _balances[to_] = _balances[to_].add(netArrived_);\r\n\r\n        emit Transfer(from_, to_, netArrived_);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"AdjustBurnFeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bYes\",\"type\":\"bool\"}],\"name\":\"ExcludedFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"SetTechAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"own_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue_\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractTech\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnFeeRatePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue_\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate_\",\"type\":\"uint256\"}],\"name\":\"setBurnFeeRatePerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"setTechAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"techInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"launchTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockBal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AvatarToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c15401e3cc0f35d3030b850f1a97c9736cf85517e222556c11328f5584535d0d"}