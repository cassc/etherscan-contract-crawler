{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n     modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external ;\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ncontract TokenReceiver {\r\n    address public token;\r\n}\r\n\r\ncontract Token is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n\r\n    address private _deadAddress =\r\n        address(0x000000000000000000000000000000000000dEaD);\r\n\r\n\r\n    address private _nodePoolAddr;\r\n    address private ffAddress;\r\n\r\n    mapping(address => bool) public ammPairs;\r\n    address public usdtAddr;\r\n    ISwapRouter private _swapRouter;\r\n    address public uniswapV2Pair;\r\n\r\n    mapping (address => bool) public _isEFA; //\u8bbe\u7f6e\u514d\u7a0e\r\n\r\n    TokenReceiver public _tokenReceiver;\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    constructor(address npa, address ffa,address USDTAddress, address RouterAddress) {\r\n        _name = \"Number One\";\r\n        _symbol = \"NBO\";\r\n        _decimals = 18;\r\n\r\n        _tTotal = 10000000 * 10**_decimals;\r\n        _tOwned[tx.origin] = _tTotal;\r\n\r\n        _owner = tx.origin;\r\n\r\n        _nodePoolAddr = npa;\r\n        ffAddress = ffa;\r\n\r\n        _tokenReceiver = new TokenReceiver();\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        usdtAddr = USDTAddress;\r\n    \r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = ~uint256(0);\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address usdtPair = swapFactory.createPair(address(this),usdtAddr);\r\n        require(IUniswapV2Pair(usdtPair).token1() == address(this), \"invalid token address\");\r\n        uniswapV2Pair = usdtPair; //\u6d4b\u8bd5\u7f51\u5148\u6ce8\u91ca\r\n        ammPairs[usdtPair] = true;\r\n        address mainPair = swapFactory.createPair(address(this), swapRouter.WETH());\r\n        ammPairs[mainPair] = true;\r\n\r\n        _isEFA[address(this)] = true;\r\n        _isEFA[address(_swapRouter)] = true;\r\n        _isEFA[address(_tokenReceiver)] = true;\r\n        _isEFA[address(_tokenReceiver)] = true;\r\n\r\n        emit Transfer(address(0), tx.origin, _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function setEFA( address _eAddress) external onlyOwner{\r\n        _isEFA[_eAddress] = true;\r\n    }\r\n\r\n    function setNoEFA( address _eAddress) external onlyOwner{\r\n        _isEFA[_eAddress] = false;\r\n    }\r\n\r\n    function setAmmPairs(address _addr) external onlyOwner{\r\n        ammPairs[_addr] = true;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        if (_isEFA[from] || _isEFA[to]) {\r\n            _tokenTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        bool isAdd = false;\r\n        bool isDel = false;\r\n\r\n        if (ammPairs[to]) {\r\n            (isAdd,) = getLPStatus(from,to);\r\n        }else if(ammPairs[from]){\r\n            (,isDel) = getLPStatus(from,to);\r\n        }else{\r\n        }\r\n\r\n        if (ammPairs[to]) {\r\n            if (isAdd){\r\n                 _tokenTransfer(from, to, amount);\r\n            }else{\r\n                require(amount <= 8*10**_decimals); //\u5355\u6b21\u5356\u51fa\u6700\u5927\u4e3a8\u4e2a\r\n                _tokenTransfer(from, _deadAddress, amount.mul(5).div(100));\r\n                _tokenTransfer(from, ffAddress, amount.mul(35).div(1000));\r\n                _tokenTransfer(from, _nodePoolAddr, amount.mul(15).div(1000));\r\n                _tokenTransfer(from, to, amount.mul(90).div(100));\r\n            }\r\n        } else if (ammPairs[from]) {\r\n            if (isDel){\r\n                _tokenTransfer(from, to, amount);\r\n            }else{\r\n                _tokenTransfer(from, _nodePoolAddr, amount.mul(2).div(100));\r\n                _tokenTransfer(from, _deadAddress, amount.mul(3).div(100));\r\n                _tokenTransfer(from, to, amount.mul(95).div(100));\r\n            }\r\n        } else{\r\n            _tokenTransfer(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tAmount);\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n    \r\n    function getLPStatus(address from,address to) internal view  returns (bool isAdd,bool isDel){\r\n        IUniswapV2Pair pair;\r\n        address token = address(this);\r\n        if(ammPairs[to]){\r\n            pair = IUniswapV2Pair(to);\r\n        }else{\r\n            pair = IUniswapV2Pair(from);\r\n        }\r\n        isAdd = false;\r\n        isDel = false;\r\n        address token0 = pair.token0();\r\n        address token1 = pair.token1();\r\n        (uint r0,uint r1,) = pair.getReserves();\r\n        uint bal1 = IERC20(token1).balanceOf(address(pair));\r\n        uint bal0 = IERC20(token0).balanceOf(address(pair));\r\n        if (ammPairs[to]) {\r\n            if (token0 == token) {\r\n                if (bal1 > r1) {\r\n                    uint change1 = bal1 - r1;\r\n                    isAdd = change1 > 1000;\r\n                }\r\n            } else {\r\n                if (bal0 > r0) {\r\n                    uint change0 = bal0 - r0;\r\n                    isAdd = change0 > 1000;\r\n                }\r\n            }\r\n        }else {\r\n            if (token0 == token) {\r\n                if (bal1 < r1 && r1 > 0) {\r\n                    uint change1 = r1 - bal1;\r\n                    isDel = change1 > 0;\r\n                }\r\n            } else {\r\n                if (bal0 < r0 && r0 > 0) {\r\n                    uint change0 = r0 - bal0;\r\n                    isDel = change0 > 0;\r\n                }\r\n            }\r\n        }\r\n        return (isAdd,isDel);\r\n    }\r\n\r\n    function swapUsdtForToken(uint256 usdtAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = usdtAddr;\r\n        path[1] = address(this);\r\n        IERC20(usdtAddr).approve(address(_swapRouter), usdtAmount);\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            usdtAmount,\r\n            0,\r\n            path,\r\n            address(_tokenReceiver),\r\n            block.timestamp\r\n        );\r\n        uint256 amount = balanceOf(address(_tokenReceiver));\r\n        _transfer(address(_tokenReceiver), address(this), amount);\r\n    }\r\n\r\n    function swapAndLiquify() public { //\u624b\u52a8\u5c06\u8be5\u5408\u7ea6\u7684usdt\u548cnbo\u52a0\u6c60\u5b50\r\n        uint256 usdts = IERC20(usdtAddr).balanceOf(address(this));\r\n        require(usdts > 1e17, \"liquify fail\");\r\n        uint256 half = usdts.mul(53).div(100);\r\n        uint256 otherHalf = usdts.sub(half);\r\n\r\n        uint256 initialBalance = balanceOf(address(this));\r\n\r\n        swapUsdtForToken(otherHalf);\r\n\r\n        uint256 newBalance = balanceOf(address(this)).sub(initialBalance);\r\n\r\n        addLiquidityUSDT(newBalance, half);\r\n        emit SwapAndLiquify(newBalance, half, otherHalf);\r\n    }\r\n\r\n    function addLiquidityUSDT(uint256 tokenAmount, uint256 USDTAmount) private {\r\n        _approve(address(this), address(_swapRouter), tokenAmount);\r\n        IERC20(usdtAddr).approve(address(_swapRouter),USDTAmount);\r\n        _swapRouter.addLiquidity(\r\n            address(this),\r\n            usdtAddr,\r\n            tokenAmount,\r\n            USDTAmount,\r\n            0,\r\n            0,\r\n            address(0),\r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n\r\ncontract NBO is Token {\r\n\r\n    constructor() Token(\r\n        address(0xa20Ef83e1ABaF43ED1c4AA7e85F25553866AC057) ,// node address\r\n        address(0x3366eE0314faCB98aad33703CDE89e586b7677c1) ,// f1_f5 address\r\n        address(0x55d398326f99059fF775485246999027B3197955),// usdt address\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E) // PancakeSwap: Router v2\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isEFA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenReceiver\",\"outputs\":[{\"internalType\":\"contract TokenReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAmmPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eAddress\",\"type\":\"address\"}],\"name\":\"setEFA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eAddress\",\"type\":\"address\"}],\"name\":\"setNoEFA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NBO", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://34066efc8f95753c15735405bd87ba7e478b7bd85f50235d5b75f9a4a055a129"}