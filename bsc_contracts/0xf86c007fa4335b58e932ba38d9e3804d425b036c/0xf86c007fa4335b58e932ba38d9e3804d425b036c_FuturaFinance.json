{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FuturaFinance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n *  ______     _                     ______ _                            \\n * |  ____|   | |                   |  ____(_)                           \\n * | |__ _   _| |_ _   _ _ __ __ _  | |__   _ _ __   __ _ _ __   ___ ___ \\n * |  __| | | | __| | | | '__/ _` | |  __| | | '_ \\\\ / _` | '_ \\\\ / __/ _ \\\\\\n * | |  | |_| | |_| |_| | | | (_| | | |    | | | | | (_| | | | | (_|  __/\\n * |_|   \\\\__,_|\\\\__|\\\\__,_|_|  \\\\__,_| |_|    |_|_| |_|\\\\__,_|_| |_|\\\\___\\\\___| v.2.0\\n *                                                                     \\n *  - Added support for contracts to claim\\n * \\n *  Site: http://futurafinance.io/\\n *  Telegram: https://t.me/FuturaBSC\\n *  Twitter: http://twitter.com/FuturaBSC\\n *  \\n *  dev - @MonanRise (Twitter)\\n */\\n\\npragma solidity ^0.8.5;\\n\\nimport \\\"./FinanceBase.sol\\\";\\n\\n// Implements rewards & burns\\ncontract FuturaFinance is FinanceBase {\\n\\t// REWARD CYCLE\\n\\tuint256 private _rewardCyclePeriod = 12 hours; // The duration of the reward cycle (e.g. can claim rewards once a day)\\n\\tuint256 private _rewardCycleExtensionThreshold; // If someone sends or receives more than a % of their balance in a transaction, their reward cycle date will increase accordingly\\n\\tmapping(address => uint256) private _nextAvailableClaimDate; // The next available reward claim date for each address\\n\\n\\tuint256 private _totalBNBLiquidityAddedFromFees; // The total number of BNB added to the pool through fees\\n\\tuint256 private _totalBNBClaimed; // The total number of BNB claimed by all addresses\\n\\tmapping(address => uint256) private _totalTokenClaimed; // The amount of token T claimed by each address\\n\\tmapping(address => uint256) private _bnbRewardClaimed; // The amount of BNB claimed by each address\\n\\t\\n\\tmapping(address => uint8) private _claimDivision; //Allows users to optionally use a % of the reward pool to receive the second token option automatically\\n\\tmapping(address => mapping(address => uint256)) private _tokenRewardClaimed; // The amount of BNB claimed by each holder as tokens (holder -> token address)\\n\\t\\n\\tmapping (address => address) private _firstRewardToken; //stores users first token option\\n\\tmapping (address => address) private _secondRewardToken; //stores users second token option\\n\\tmapping (string => address) private _tokensList; //hold the token addresses\\n\\tmapping (address => bool) private _tokensAllowance; //check if a token distribution is allowed or not\\n\\t\\n\\tmapping(address => bool) private _addressesExcludedFromRewards; // The list of addresses excluded from rewards\\n\\tmapping(address => mapping(address => bool)) private _rewardClaimApprovals; //Used to allow an address to claim rewards on behalf of someone else\\n\\t\\n\\tuint256 private _minRewardBalance; //The minimum balance required to be eligible for rewards\\n\\tuint256 private _maxClaimAllowed = 10 ether; // Can only claim up to 10 bnb at a time.\\n\\tuint256 private _globalRewardDampeningPercentage = 3; // Rewards are reduced by 3% at the start to fill the main BNB pool faster and ensure consistency in rewards\\n\\tuint256 private _mainBnbPoolSize = 100 ether; // Any excess BNB after the main pool will be used as reserves to ensure consistency in rewards\\n\\tuint256 private _gradualBurnMagnitude; // The contract can optionally burn tokens (By buying them from reward pool).  This is the magnitude of the burn (1 = 0.01%).\\n\\tuint256 private _gradualBurnTimespan = 1 days; //Burn every 1 day by default\\n\\tuint256 private _lastBurnDate; //The last burn date\\n\\tuint256 private _minBnbPoolSizeBeforeBurn = 20 ether; //The minimum amount of BNB that need to be in the pool before initiating gradual burns\\n\\n\\t// AUTO-CLAIM\\n\\tbool private _autoClaimEnabled = true;\\n\\tuint256 private _maxGasForAutoClaim = 800000; // The maximum gas to consume for processing the auto-claim queue\\n\\taddress[] _rewardClaimQueue;\\n\\tmapping(address => uint) _rewardClaimQueueIndices;\\n\\tuint256 private _rewardClaimQueueIndex;\\n\\tmapping(address => bool) _addressesInRewardClaimQueue; // Mapping between addresses and false/true depending on whether they are queued up for auto-claim or not\\n\\tbool private _reimburseAfterTokenClaimFailure; // If true, and FFT reward claim portion fails, the portion will be given as BNB instead\\n\\tbool private _processingQueue; //Flag that indicates whether the queue is currently being processed and sending out rewards\\n\\tmapping(address => bool) private _whitelistedExternalProcessors; //Contains a list of addresses that are whitelisted for low-gas queue processing \\n\\tuint256 private _sendWeiGasLimit;\\n\\tbool private _excludeNonHumansFromRewards = true;\\n\\n\\tevent RewardClaimed(address recipient, uint256 amountFirst, uint256 amountSecond, uint256 amountBnb, uint256 nextAvailableClaimDate); \\n\\tevent Burned(uint256 bnbAmount);\\n\\n    //Router MAINNET: 0x10ED43C718714eb63d5aA57B78B54704E256024E TESTNET: 0xD99D1c33F9fC3444f8101754aBC46c52416550D1 KIENTI360 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\\n\\tconstructor (address routerAddress) FinanceBase(routerAddress) {\\n\\t\\t// Exclude addresses from rewards\\n\\t\\t_addressesExcludedFromRewards[BURN_WALLET] = true;\\n\\t\\t_addressesExcludedFromRewards[owner()] = true;\\n\\t\\t_addressesExcludedFromRewards[address(this)] = true;\\n\\t\\t_addressesExcludedFromRewards[address(0)] = true;\\n\\t\\t\\n\\t\\t_tokensList[\\\"FFT\\\"] = address(this);\\n\\t\\t_tokensList[\\\"BNB\\\"] = _pancakeswapV2Router.WETH();\\n\\t\\t\\n\\t\\t_tokensList[\\\"ADA\\\"] = 0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47; //mainnet 0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47 | 0xaC2A889dEfE2205AA18BD46c0A24e8cAE7084DBB testnet\\n\\t\\t_tokensList[\\\"BUSD\\\"] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; //mainnet 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56 | 0x8301F2213c0eeD49a7E28Ae4c3e91722919B8B47 testnet \\n\\t\\t_tokensList[\\\"CAKE\\\"] = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82; //mainnet 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82 | 0xF9f93cF501BFaDB6494589Cb4b4C15dE49E85D0e testnet\\n\\t\\t_tokensList[\\\"DOT\\\"] = 0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402; //mainnet 0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402 | 0xE2EEEaa527f78eE845EB46355210FbeD77e92C47 testnet\\n\\t\\t_tokensList[\\\"ETH\\\"] = 0x2170Ed0880ac9A755fd29B2688956BD959F933F8; //mainnet 0x2170Ed0880ac9A755fd29B2688956BD959F933F8 | 0x8BaBbB98678facC7342735486C851ABD7A0d17Ca testnet\\n\\t\\t\\n\\t\\tenableToken(\\\"ADA\\\");\\n\\t\\tenableToken(\\\"BNB\\\");\\n\\t\\tenableToken(\\\"BUSD\\\");\\n\\t\\tenableToken(\\\"CAKE\\\");\\n\\t\\tenableToken(\\\"DOT\\\");\\n\\t\\tenableToken(\\\"ETH\\\");\\n\\t\\tenableToken(\\\"FFT\\\");\\n        \\n\\t\\t// If someone sends or receives more than 75% of their balance in a transaction, their reward cycle date will increase accordingly\\n\\t\\tsetRewardCycleExtensionThreshold(75);\\n\\t}\\n\\n\\n\\t// This function is used to enable all functions of the contract, after the setup of the token sale (e.g. Liquidity) is completed\\n\\tfunction onActivated() internal override {\\n\\t\\tsuper.onActivated();\\n\\t\\tsetAutoClaimEnabled(true);\\n\\t\\tsetReimburseAfterTokenClaimFailure(true);\\n\\t\\tsetMinRewardBalance(1000000 * 10**decimals());  //At least 10,000,000 tokens are required to be eligible for rewards\\n\\t\\tsetGradualBurnMagnitude(1); //Buy tokens using 0.01% of reward pool and burn them\\n\\t\\t_lastBurnDate = block.timestamp;\\n\\t\\tsetBotFeeMode();\\n\\t}\\n\\n\\tfunction onBeforeTransfer(address sender, address recipient, uint256 amount) internal override {\\n        super.onBeforeTransfer(sender, recipient, amount);\\n\\n\\t\\tif (!isMarketTransfer(sender, recipient)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n        // Extend the reward cycle according to the amount transferred.  This is done so that users do not abuse the cycle (buy before it ends & sell after they claim the reward)\\n\\t\\tuint256 recipientExtension = _nextAvailableClaimDate[recipient] + calculateRewardCycleExtension(balanceOf(recipient), amount);\\n        uint256 senderExtension = _nextAvailableClaimDate[sender] + calculateRewardCycleExtension(balanceOf(sender), amount);\\n        \\n\\t\\tif (!_addressesExcludedFromFees[recipient]) {\\n\\t\\t\\t_nextAvailableClaimDate[recipient] = recipientExtension;\\n\\t\\t}\\n\\n\\t\\tif (!_addressesExcludedFromFees[sender]) {\\n\\t\\t\\t_nextAvailableClaimDate[sender] = senderExtension;\\n\\t\\t}\\n\\t\\t\\n\\t\\tbool isSelling = isPancakeswapPair(recipient);\\n\\t\\tif (!isSelling) {\\n\\t\\t\\t// Wait for a dip xd\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Process gradual burns\\n\\t\\tbool burnTriggered = processGradualBurn();\\n\\n\\t\\t// Do not burn & process queue in the same transaction\\n\\t\\tif (!burnTriggered && isAutoClaimEnabled()) {\\n\\t\\t\\t// Trigger auto-claim\\n\\t\\t\\ttry this.processRewardClaimQueue(_maxGasForAutoClaim) { } catch { }\\n\\t\\t}\\n    }\\n\\n\\n\\tfunction onTransfer(address sender, address recipient, uint256 amount) internal override {\\n        super.onTransfer(sender, recipient, amount);\\n\\n\\t\\tif (!isMarketTransfer(sender, recipient)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Update auto-claim queue after balances have been updated\\n\\t\\tupdateAutoClaimQueue(sender);\\n\\t\\tupdateAutoClaimQueue(recipient);\\n    }\\n\\t\\n\\t\\n\\tfunction processGradualBurn() private returns(bool) {\\n\\t\\tif (!shouldBurn()) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tuint256 burnAmount = address(this).balance * _gradualBurnMagnitude / 10000;\\n\\t\\tdoBuyAndBurn(burnAmount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\n\\tfunction updateAutoClaimQueue(address user) private {\\n\\t\\tbool isQueued = _addressesInRewardClaimQueue[user];\\n\\n\\t\\tif (!isIncludedInRewards(user)) {\\n\\t\\t\\tif (isQueued) {\\n\\t\\t\\t\\t// Need to dequeue\\n\\t\\t\\t\\tuint index = _rewardClaimQueueIndices[user];\\n\\t\\t\\t\\taddress lastUser = _rewardClaimQueue[_rewardClaimQueue.length - 1];\\n\\n\\t\\t\\t\\t// Move the last one to this index, and pop it\\n\\t\\t\\t\\t_rewardClaimQueueIndices[lastUser] = index;\\n\\t\\t\\t\\t_rewardClaimQueue[index] = lastUser;\\n\\t\\t\\t\\t_rewardClaimQueue.pop();\\n\\n\\t\\t\\t\\t// Clean-up\\n\\t\\t\\t\\tdelete _rewardClaimQueueIndices[user];\\n\\t\\t\\t\\tdelete _addressesInRewardClaimQueue[user];\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tif (!isQueued) {\\n\\t\\t\\t\\t// Need to enqueue\\n\\t\\t\\t\\t_rewardClaimQueue.push(user);\\n\\t\\t\\t\\t_rewardClaimQueueIndices[user] = _rewardClaimQueue.length - 1;\\n\\t\\t\\t\\t_addressesInRewardClaimQueue[user] = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\n    function claimReward() nonReentrant public {\\n\\t\\tclaimReward(msg.sender);\\n\\t}\\n        \\n\\tfunction claimReward(address user) public {\\n\\t\\trequire(msg.sender == user || isClaimApproved(user, msg.sender), \\\"You are not allowed to claim rewards on behalf of this user\\\");\\n\\t\\trequire(isRewardReady(user), \\\"Claim date for this address has not passed yet\\\");\\n\\t\\trequire(isIncludedInRewards(user), \\\"Address is excluded from rewards, make sure there is enough FFT balance\\\");\\n        \\n\\t\\tbool success = doClaimReward(user);\\n\\t\\trequire(success, \\\"Reward claim failed\\\");\\n\\t}\\n    \\n\\n\\tfunction doClaimReward(address user) private returns (bool) {\\n\\t\\t// Update the next claim date & the total amount claimed\\n\\t\\t_nextAvailableClaimDate[user] = block.timestamp + rewardCyclePeriod();\\n        \\n\\t\\taddress firstTokenAddress = _firstRewardToken[user];\\n\\t\\taddress secondTokenAddress = _secondRewardToken[user];\\n\\t\\taddress bnbAddress = _pancakeswapV2Router.WETH();\\n        uint8 divisionPercentage;\\n\\t\\t\\n        //user didn't set any token\\n\\t\\tif (firstTokenAddress == address(0) && secondTokenAddress == address(0) \\n\\t\\t|| (!_tokensAllowance[firstTokenAddress] && !_tokensAllowance[secondTokenAddress])) { \\n\\t\\t    firstTokenAddress = bnbAddress;\\n\\t\\t    secondTokenAddress = address(this);\\n\\t\\t    divisionPercentage = 50;\\n\\t\\t} else {\\n\\t\\t    divisionPercentage = _claimDivision[user];\\n\\t\\t}\\n\\t\\t\\n\\t\\tuint256 reward = calculateBNBReward(user);\\n        uint256 firstTokenRewards = (reward * divisionPercentage) / 100;\\n\\t\\tuint256 secondTokenRewards = reward - firstTokenRewards;\\n\\t\\tuint256 optionalBnbRewards = 0;\\n\\t\\t\\n\\t\\tbool firstTokenClaimSuccess = true;\\n\\t\\tbool secondTokenClaimSuccess = true;\\n\\t\\tbool optionalBnbClaim = true;\\n\\t\\t\\n        // Claim FFT tokens\\n        if (firstTokenAddress != address(0) && firstTokenRewards > 0 || !_tokensAllowance[firstTokenAddress]) {\\n            if (firstTokenAddress == bnbAddress) {\\n                optionalBnbRewards += firstTokenRewards;\\n            } else {\\n                if (!claimTokens(user, firstTokenAddress, firstTokenRewards)) {\\n        \\t\\t\\t// If token claim fails for any reason, award whole portion as BNB\\n        \\t\\t\\tif (_reimburseAfterTokenClaimFailure) {\\n        \\t\\t\\t\\toptionalBnbRewards += firstTokenRewards;\\n        \\t\\t\\t} else {\\n        \\t\\t\\t\\tfirstTokenClaimSuccess = false;\\n        \\t\\t\\t}\\n        \\n        \\t\\t\\tfirstTokenRewards = 0;\\n    \\t\\t    }\\n            }\\n        } else {\\n            optionalBnbRewards += firstTokenRewards;\\n        }\\n\\t\\t\\n\\t\\tif (secondTokenAddress != address(0) && secondTokenRewards > 0 || !_tokensAllowance[secondTokenAddress]) {\\n    \\t\\tif (secondTokenAddress == bnbAddress) {\\n    \\t\\t    optionalBnbRewards += secondTokenRewards;\\n            } else {\\n                if (!claimTokens(user, secondTokenAddress, secondTokenRewards)) {\\n        \\t\\t\\t// If token claim fails for any reason, award whole portion as BNB\\n        \\t\\t\\tif (_reimburseAfterTokenClaimFailure) {\\n        \\t\\t\\t\\toptionalBnbRewards += secondTokenRewards;\\n        \\t\\t\\t} else {\\n        \\t\\t\\t\\tsecondTokenClaimSuccess = false;\\n        \\t\\t\\t}\\n        \\n        \\t\\t\\tsecondTokenRewards = 0;\\n    \\t\\t    }\\n            }\\n\\t\\t} else {\\n\\t\\t    optionalBnbRewards += secondTokenRewards;\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (optionalBnbRewards > 0) {\\n\\t\\t    optionalBnbClaim = claimBNB(user, optionalBnbRewards);\\n\\t\\t}\\n\\t\\t\\n\\t\\t// Fire the event in case something was claimed\\n\\t\\tif (firstTokenClaimSuccess || secondTokenClaimSuccess || optionalBnbClaim) {\\n            uint256 nextDate = _nextAvailableClaimDate[user];\\t\\t    \\n\\t\\t\\temit RewardClaimed(user, firstTokenRewards, secondTokenRewards, optionalBnbRewards, nextDate);\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn firstTokenClaimSuccess && secondTokenClaimSuccess && optionalBnbClaim;\\n\\t}\\n\\n\\n\\tfunction claimBNB(address user, uint256 bnbAmount) private returns (bool) {\\n\\t\\tif (bnbAmount == 0) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\t// Send the reward to the caller\\n\\t\\tif (_sendWeiGasLimit > 0) {\\n\\t\\t\\t(bool sent,) = user.call{value : bnbAmount, gas: _sendWeiGasLimit}(\\\"\\\");\\n\\t\\t\\tif (!sent) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t(bool sent,) = user.call{value : bnbAmount}(\\\"\\\");\\n\\t\\t\\tif (!sent) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n        \\n\\t    uint256 bnbRewardClaimedByUser = _bnbRewardClaimed[user];\\n\\t    uint256 totalBnbClaimedByAll = _totalBNBClaimed;\\n\\t    \\n\\t    bnbRewardClaimedByUser += bnbAmount;\\n\\t    totalBnbClaimedByAll += bnbAmount;\\n\\t    \\n\\t    _bnbRewardClaimed[user] = bnbRewardClaimedByUser;\\n\\t\\t_totalBNBClaimed = totalBnbClaimedByAll;\\n\\t\\treturn true;\\n\\t}\\n\\n\\n\\tfunction claimTokens(address user, address token, uint256 bnbAmount) private returns (bool) {\\n\\t\\tif (bnbAmount == 0) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tbool success = swapBNBForTokens(user, token, bnbAmount);\\n\\t\\tif (!success) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n        \\n        uint256 bnbRewardClaimedAsTokenT = _tokenRewardClaimed[user][token];\\n        uint256 bnbRewardClaimedByUser = _bnbRewardClaimed[user];\\n    \\tuint256 totalBnbClaimedByAll = _totalBNBClaimed;\\n        uint256 totalTokenClaimedByAll = _totalTokenClaimed[token];\\n\\t    \\n\\t    bnbRewardClaimedAsTokenT += bnbAmount;\\n\\t    bnbRewardClaimedByUser += bnbAmount;\\n\\t    totalBnbClaimedByAll += bnbAmount;\\n\\t    totalTokenClaimedByAll += bnbAmount;\\n\\t    \\n\\t\\t_tokenRewardClaimed[user][token] = bnbRewardClaimedAsTokenT;\\n\\t    _bnbRewardClaimed[user] = bnbRewardClaimedByUser;\\n\\t\\t_totalBNBClaimed = totalBnbClaimedByAll;\\n\\t\\t_totalTokenClaimed[token] = totalBnbClaimedByAll;\\n\\t\\t\\n\\t\\treturn true;\\n\\t}\\n\\n\\n\\t// Processes users in the claim queue and sends out rewards when applicable. The amount of users processed depends on the gas provided, up to 1 cycle through the whole queue. \\n\\t// Note: Any external processor can process the claim queue (e.g. even if auto claim is disabled from the contract, an external contract/user/service can process the queue for it \\n\\t// and pay the gas cost). \\\"gas\\\" parameter is the maximum amount of gas allowed to be consumed\\n\\tfunction processRewardClaimQueue(uint256 gas) public {\\n\\t\\trequire(gas > 0, \\\"Gas limit is required\\\");\\n\\n\\t\\tuint256 queueLength = _rewardClaimQueue.length;\\n\\t\\tuint256 rewardQueueIndex = _rewardClaimQueueIndex;\\n\\t\\t\\n\\t\\tif (queueLength == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tuint256 gasUsed = 0;\\n\\t\\tuint256 gasLeft = gasleft();\\n\\t\\tuint256 iteration = 0;\\n\\t\\t_processingQueue = true;\\n\\n\\t\\t// Keep claiming rewards from the list until we either consume all available gas or we finish one cycle\\n\\t\\twhile (gasUsed < gas && iteration < queueLength) {\\n\\t\\t\\tif (rewardQueueIndex >= queueLength) {\\n\\t\\t\\t\\trewardQueueIndex = 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\taddress user = _rewardClaimQueue[rewardQueueIndex];\\n\\t\\t\\tif (isRewardReady(user) && isIncludedInRewards(user)) {\\n\\t\\t\\t\\tdoClaimReward(user);\\n\\t\\t\\t}\\n\\n\\t\\t\\tuint256 newGasLeft = gasleft();\\n\\t\\t\\t\\n\\t\\t\\tif (gasLeft > newGasLeft) {\\n\\t\\t\\t\\tuint256 consumedGas = gasLeft - newGasLeft;\\n\\t\\t\\t\\tgasUsed += consumedGas;\\n\\t\\t\\t\\tgasLeft = newGasLeft;\\n\\t\\t\\t}\\n\\n\\t\\t\\titeration++;\\n\\t\\t\\trewardQueueIndex++;\\n\\t\\t}\\n        \\n        _rewardClaimQueueIndex = rewardQueueIndex;\\n\\t\\t_processingQueue = false;\\n\\t}\\n\\n\\t// Allows a whitelisted external contract/user/service to process the queue and have a portion of the gas costs refunded.\\n\\t// This can be used to help with transaction fees and payout response time when/if the queue grows too big for the contract.\\n\\t// \\\"gas\\\" parameter is the maximum amount of gas allowed to be used.\\n\\tfunction processRewardClaimQueueAndRefundGas(uint256 gas) external {\\n\\t\\trequire(_whitelistedExternalProcessors[msg.sender], \\\"Not whitelisted - use processRewardClaimQueue instead\\\");\\n\\n\\t\\tuint256 startGas = gasleft();\\n\\t\\tprocessRewardClaimQueue(gas);\\n\\t\\tuint256 gasUsed = startGas - gasleft();\\n\\n\\t\\tpayable(msg.sender).transfer(gasUsed);\\n\\t}\\n\\n\\n\\tfunction isRewardReady(address user) public view returns(bool) {\\n\\t\\treturn _nextAvailableClaimDate[user] <= block.timestamp;\\n\\t}\\n\\n\\n\\tfunction isIncludedInRewards(address user) public view returns(bool) {\\n\\t\\tif (!_addressesExcludedFromFees[user]) {\\n\\t\\t\\tif (_excludeNonHumansFromRewards) {\\n\\t\\t\\t\\tif (isContract(user)) {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn balanceOf(user) >= _minRewardBalance && !_addressesExcludedFromRewards[user];\\n\\t}\\n\\n\\n\\t// This function calculates how much (and if) the reward cycle of an address should increase based on its current balance and the amount transferred in a transaction\\n\\tfunction calculateRewardCycleExtension(uint256 balance, uint256 amount) public view returns (uint256) {\\n\\t\\tuint256 basePeriod = rewardCyclePeriod();\\n\\n\\t\\tif (balance == 0) {\\n\\t\\t\\t// Receiving $FFT on a zero balance address:\\n\\t\\t\\t// This means that either the address has never received tokens before (So its current reward date is 0) in which case we need to set its initial value\\n\\t\\t\\t// Or the address has transferred all of its tokens in the past and has now received some again, in which case we will set the reward date to a date very far in the future\\n\\t\\t\\treturn block.timestamp + basePeriod;\\n\\t\\t}\\n\\n\\t\\tuint256 rate = amount * 100 / balance;\\n\\n\\t\\t// Depending on the % of $FFT tokens transferred, relative to the balance, we might need to extend the period\\n\\t\\tif (rate >= _rewardCycleExtensionThreshold) {\\n\\n\\t\\t\\t// If new balance is X percent higher, then we will extend the reward date by X percent\\n\\t\\t\\tuint256 extension = basePeriod * rate / 100;\\n\\n\\t\\t\\t// Cap to the base period\\n\\t\\t\\tif (extension >= basePeriod) {\\n\\t\\t\\t\\textension = basePeriod;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn extension;\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\n\\n\\tfunction calculateBNBReward(address ofAddress) public view returns (uint256) {\\n\\t\\tuint256 holdersAmount = totalAmountOfTokensHeld();\\n\\n\\t\\tuint256 balance = balanceOf(ofAddress);\\n\\t\\tuint256 bnbPool =  address(this).balance * (100 - _globalRewardDampeningPercentage) / 100;\\n\\t\\tuint256 bnbPoolSize = _mainBnbPoolSize;\\n\\t\\tuint256 maxClaim = _maxClaimAllowed;\\n\\n\\t\\t// Limit to main pool size.  The rest of the pool is used as a reserve to improve consistency\\n\\t\\tif (bnbPool > bnbPoolSize) {\\n\\t\\t\\tbnbPool = bnbPoolSize;\\n\\t\\t}\\n\\n\\t\\t// If an address is holding X percent of the supply, then it can claim up to X percent of the reward pool\\n\\t\\tuint256 reward = bnbPool * balance / holdersAmount;\\n\\n\\t\\tif (reward > maxClaim) {\\n\\t\\t\\treward = maxClaim;\\n\\t\\t}\\n\\n\\t\\treturn reward;\\n\\t}\\n\\n\\tfunction onPancakeswapRouterUpdated() internal override { \\n\\t\\t_addressesExcludedFromRewards[address(_pancakeswapV2Router)] = true;\\n\\t\\t_addressesExcludedFromRewards[pancakeswapPairAddress()] = true;\\n\\t}\\n\\t\\n    function setFirstToken(string memory token) nonReentrant external {\\n        setFirstToken(msg.sender, token);\\n        \\n        if (_secondRewardToken[msg.sender] == address(0)) {\\n            _claimDivision[msg.sender] = 100;\\n        } else {\\n            _claimDivision[msg.sender] = 50;\\n        }\\n\\t}\\n\\t\\t\\n\\tfunction setFirstToken(address user, string memory token) private {\\n\\t    require(msg.sender == user, \\\"You are not allowed first token on this user behalf\\\");\\n\\t    address selectedToken = _tokensList[token];\\n    \\trequire(selectedToken != address(0) && selectedToken != BURN_WALLET, \\\"The selected token does not exist.\\\");\\n    \\trequire(_tokensAllowance[selectedToken], \\\"The selected token is not allowed\\\");\\n    \\t\\n    \\t_firstRewardToken[user] = selectedToken;\\n\\t}\\n\\t\\n\\tfunction setSecondToken(string memory token) nonReentrant external {\\n        setSecondToken(msg.sender, token);\\n        \\n        if (_firstRewardToken[msg.sender] == address(0)) {\\n            _claimDivision[msg.sender] = 0;\\n        } else {\\n            _claimDivision[msg.sender] = 50;\\n        }\\n\\t}\\n\\t\\n\\tfunction setSecondToken(address user, string memory token) private {\\n\\t    require(msg.sender == user, \\\"You are not allowed to set second token on this user behalf\\\");\\n\\t    address selectedToken = _tokensList[token];\\n    \\trequire(selectedToken != address(0) && selectedToken != BURN_WALLET, \\\"The selected token does not exist.\\\");\\n    \\trequire(_tokensAllowance[selectedToken], \\\"The selected token is not allowed\\\");\\n    \\t\\n    \\t_secondRewardToken[msg.sender] = selectedToken;\\n\\t}\\n\\t\\n\\tfunction getFirstToken(address user) public view returns (address) {\\n\\t    return _firstRewardToken[user];\\n\\t}\\n\\t\\n\\tfunction getSecondToken(address user) public view returns (address) {\\n\\t    return _secondRewardToken[user];\\n\\t}\\n\\t\\n\\tfunction addNewToken(string memory symbol, address tokenAddress) public onlyOwner {\\n\\t    require(tokenAddress != address(0) && tokenAddress != BURN_WALLET, \\\"Token address is invalid.\\\");\\n\\t    require(_tokensList[symbol] != tokenAddress, \\\"This token is already added.\\\");\\n\\t    \\n\\t    _tokensList[symbol] = tokenAddress;\\n\\t    _tokensAllowance[tokenAddress] = true;\\n\\t}\\n\\t\\n\\tfunction enableToken(string memory symbol) public onlyOwner {\\n\\t   address tokenAddress = _tokensList[symbol];\\n\\t   require(tokenAddress != address(0) && tokenAddress != BURN_WALLET, \\\"Token symbol is not added.\\\");\\n\\t    \\n\\t   _tokensAllowance[tokenAddress] = true;\\n\\t}\\n\\t\\n\\tfunction disableToken(string memory symbol) public onlyOwner {\\n\\t    address tokenAddress = _tokensList[symbol];\\n\\t    require(tokenAddress != address(0) && tokenAddress != BURN_WALLET, \\\"Token symbol is not added.\\\");\\n\\t    \\n\\t    _tokensAllowance[tokenAddress] = false;\\n\\t}\\n\\t\\n\\tfunction removeToken(string memory symbol) public onlyOwner {\\n\\t    address tokenAddress = _tokensList[symbol];\\n\\t    require(tokenAddress != address(0) && tokenAddress != BURN_WALLET, \\\"Token symbol is not added.\\\");\\n\\t    \\n\\t    _tokensList[symbol] = address(0);\\n\\t    _tokensAllowance[tokenAddress] = false;\\n\\t}\\n\\t\\n\\tfunction getTokenAddress(string memory symbol) public view returns (address) {\\n\\t    return _tokensList[symbol];\\n\\t}\\n\\t\\n\\tfunction isTokenAllowed(string memory symbol) public view returns (bool) {\\n\\t    return _tokensAllowance[_tokensList[symbol]];\\n\\t}\\n\\n\\tfunction isMarketTransfer(address sender, address recipient) internal override view returns(bool) {\\n\\t\\t// Not a market transfer when we are burning or sending out rewards\\n\\t\\treturn super.isMarketTransfer(sender, recipient) && !isBurnTransfer(sender, recipient) && !_processingQueue;\\n\\t}\\n\\n\\n\\tfunction isBurnTransfer(address sender, address recipient) private view returns (bool) {\\n\\t\\treturn isPancakeswapPair(sender) && recipient == BURN_WALLET;\\n\\t}\\n\\n\\n\\tfunction shouldBurn() public view returns(bool) {\\n\\t\\treturn _gradualBurnMagnitude > 0 && address(this).balance >= _minBnbPoolSizeBeforeBurn && block.timestamp - _lastBurnDate > _gradualBurnTimespan;\\n\\t}\\n\\n\\n\\t// Up to 1% manual buyback & burn\\n\\tfunction buyAndBurn(uint256 bnbAmount) external onlyOwner {\\n\\t\\trequire(bnbAmount <= address(this).balance / 100, \\\"Manual burn amount is too high!\\\");\\n\\t\\trequire(bnbAmount > 0, \\\"Amount must be greater than zero\\\");\\n\\n\\t\\tdoBuyAndBurn(bnbAmount);\\n\\t}\\n\\n\\n\\tfunction doBuyAndBurn(uint256 bnbAmount) private {\\n\\t\\tif (bnbAmount > address(this).balance) {\\n\\t\\t\\tbnbAmount = address(this).balance;\\n\\t\\t}\\n\\n\\t\\tif (bnbAmount == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (swapBNBForTokens(BURN_WALLET, address(this), bnbAmount)) {\\n\\t\\t\\temit Burned(bnbAmount);\\n\\t\\t}\\n\\n\\t\\t_lastBurnDate = block.timestamp;\\n\\t}\\n\\n\\n\\tfunction isContract(address account) public view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n\\t}\\n\\n\\n\\tfunction totalAmountOfTokensHeld() public view returns (uint256) {\\n\\t\\treturn totalSupply() - balanceOf(address(0)) - balanceOf(BURN_WALLET) - balanceOf(pancakeswapPairAddress());\\n\\t}\\n\\n\\n    function bnbRewardClaimed(address byAddress) public view returns (uint256) {\\n\\t\\treturn _bnbRewardClaimed[byAddress];\\n\\t}\\n\\n    function totalBNBClaimed() public view returns (uint256) {\\n\\t\\treturn _totalBNBClaimed;\\n\\t}\\n\\n\\n    function totalBNBClaimedAsToken(address tokenAddress) public view returns (uint256) {\\n\\t\\treturn _totalTokenClaimed[tokenAddress];\\n\\t}\\n\\n\\n    function rewardCyclePeriod() public view returns (uint256) {\\n\\t\\treturn _rewardCyclePeriod;\\n\\t}\\n\\n\\n\\tfunction setRewardCyclePeriod(uint256 period) public onlyOwner {\\n\\t\\trequire(period > 0 && period <= 7 days, \\\"Value out of range\\\");\\n\\t\\t_rewardCyclePeriod = period;\\n\\t}\\n\\n\\n\\tfunction setRewardCycleExtensionThreshold(uint256 threshold) public onlyOwner {\\n\\t\\t_rewardCycleExtensionThreshold = threshold;\\n\\t}\\n\\n\\n\\tfunction nextAvailableClaimDate(address ofAddress) public view returns (uint256) {\\n\\t\\treturn _nextAvailableClaimDate[ofAddress];\\n\\t}\\n\\n\\n\\tfunction maxClaimAllowed() public view returns (uint256) {\\n\\t\\treturn _maxClaimAllowed;\\n\\t}\\n\\n\\n\\tfunction setMaxClaimAllowed(uint256 value) public onlyOwner {\\n\\t\\trequire(value > 0, \\\"Value must be greater than zero\\\");\\n\\t\\t_maxClaimAllowed = value;\\n\\t}\\n\\n\\n\\tfunction minRewardBalance() public view returns (uint256) {\\n\\t\\treturn _minRewardBalance;\\n\\t}\\n\\n\\n\\tfunction setMinRewardBalance(uint256 balance) public onlyOwner {\\n\\t\\t_minRewardBalance = balance;\\n\\t}\\n\\n\\n\\tfunction maxGasForAutoClaim() public view returns (uint256) {\\n\\t\\treturn _maxGasForAutoClaim;\\n\\t}\\n\\n\\n\\tfunction setMaxGasForAutoClaim(uint256 gas) public onlyOwner {\\n\\t\\t_maxGasForAutoClaim = gas;\\n\\t}\\n\\n\\n\\tfunction isAutoClaimEnabled() public view returns (bool) {\\n\\t\\treturn _autoClaimEnabled;\\n\\t}\\n\\n\\n\\tfunction setAutoClaimEnabled(bool isEnabled) public onlyOwner {\\n\\t\\t_autoClaimEnabled = isEnabled;\\n\\t}\\n\\n\\n\\tfunction isExcludedFromRewards(address addr) public view returns (bool) {\\n\\t\\treturn _addressesExcludedFromRewards[addr];\\n\\t}\\n\\n\\n\\t// Will be used to exclude unicrypt fees/token vesting addresses from rewards\\n\\tfunction setExcludedFromRewards(address addr, bool isExcluded) public onlyOwner {\\n\\t\\t_addressesExcludedFromRewards[addr] = isExcluded;\\n\\t\\tupdateAutoClaimQueue(addr);\\n\\t}\\n\\n\\n\\tfunction globalRewardDampeningPercentage() public view returns(uint256) {\\n\\t\\treturn _globalRewardDampeningPercentage;\\n\\t}\\n\\n\\n\\tfunction setGlobalRewardDampeningPercentage(uint256 value) public onlyOwner {\\n\\t\\trequire(value <= 90, \\\"Cannot be greater than 90%\\\");\\n\\t\\t_globalRewardDampeningPercentage = value;\\n\\t}\\n\\n\\n\\tfunction approveClaim(address byAddress, bool isApproved) public {\\n\\t\\trequire(byAddress != address(0), \\\"Invalid address\\\");\\n\\t\\t_rewardClaimApprovals[msg.sender][byAddress] = isApproved;\\n\\t}\\n\\n\\n\\tfunction isClaimApproved(address ofAddress, address byAddress) public view returns(bool) {\\n\\t\\treturn _rewardClaimApprovals[ofAddress][byAddress];\\n\\t}\\n\\n\\n\\tfunction gradualBurnMagnitude() public view returns (uint256) {\\n\\t\\treturn _gradualBurnMagnitude;\\n\\t}\\n\\n\\n\\tfunction setGradualBurnMagnitude(uint256 magnitude) public onlyOwner {\\n\\t\\trequire(magnitude <= 100, \\\"Must be equal or less to 100\\\");\\n\\t\\t_gradualBurnMagnitude = magnitude;\\n\\t}\\n\\n\\n\\tfunction gradualBurnTimespan() public view returns (uint256) {\\n\\t\\treturn _gradualBurnTimespan;\\n\\t}\\n\\n\\n\\tfunction setGradualBurnTimespan(uint256 timespan) public onlyOwner {\\n\\t\\trequire(timespan >= 5 minutes, \\\"Cannot be less than 5 minutes\\\");\\n\\t\\t_gradualBurnTimespan = timespan;\\n\\t}\\n\\n\\n\\tfunction minBnbPoolSizeBeforeBurn() public view returns(uint256) {\\n\\t\\treturn _minBnbPoolSizeBeforeBurn;\\n\\t}\\n\\n\\n\\tfunction setMinBnbPoolSizeBeforeBurn(uint256 amount) public onlyOwner {\\n\\t\\trequire(amount > 0, \\\"Amount must be greater than zero\\\");\\n\\t\\t_minBnbPoolSizeBeforeBurn = amount;\\n\\t}\\n\\t\\n\\tfunction getClaimDivision(address ofAddress) public view returns(uint256) {\\n\\t\\treturn _claimDivision[ofAddress];\\n\\t}\\n\\n\\n\\tfunction setClaimDivision(uint8 claimDivision) public {\\n\\t\\trequire(claimDivision >= 0 && claimDivision <= 100, \\\"Your claim division needs to be between 0 and 100\\\");\\n\\t\\t_claimDivision[msg.sender] = claimDivision;\\n\\t}\\n\\n\\n\\tfunction mainBnbPoolSize() public view returns (uint256) {\\n\\t\\treturn _mainBnbPoolSize;\\n\\t}\\n\\n\\n\\tfunction setMainBnbPoolSize(uint256 size) public onlyOwner {\\n\\t\\trequire(size >= 10 ether, \\\"Size is too small\\\");\\n\\t\\t_mainBnbPoolSize = size;\\n\\t}\\n\\n\\n\\tfunction isInRewardClaimQueue(address addr) public view returns(bool) {\\n\\t\\treturn _addressesInRewardClaimQueue[addr];\\n\\t}\\n\\n\\t\\n\\tfunction reimburseAfterTokenClaimFailure() public view returns(bool) {\\n\\t\\treturn _reimburseAfterTokenClaimFailure;\\n\\t}\\n\\n\\n\\tfunction setReimburseAfterTokenClaimFailure(bool value) public onlyOwner {\\n\\t\\t_reimburseAfterTokenClaimFailure = value;\\n\\t}\\n\\n\\n\\tfunction lastBurnDate() public view returns(uint256) {\\n\\t\\treturn _lastBurnDate;\\n\\t}\\n\\n\\n\\tfunction rewardClaimQueueLength() public view returns(uint256) {\\n\\t\\treturn _rewardClaimQueue.length;\\n\\t}\\n\\n\\n\\tfunction rewardClaimQueueIndex() public view returns(uint256) {\\n\\t\\treturn _rewardClaimQueueIndex;\\n\\t}\\n\\n\\n\\tfunction isWhitelistedExternalProcessor(address addr) public view returns(bool) {\\n\\t\\treturn _whitelistedExternalProcessors[addr];\\n\\t}\\n\\n\\n\\tfunction setWhitelistedExternalProcessor(address addr, bool isWhitelisted) public onlyOwner {\\n\\t\\t require(addr != address(0), \\\"Invalid address\\\");\\n\\t\\t_whitelistedExternalProcessors[addr] = isWhitelisted;\\n\\t}\\n\\n\\tfunction setSendWeiGasLimit(uint256 amount) public onlyOwner {\\n\\t\\t_sendWeiGasLimit = amount;\\n\\t}\\n\\n\\tfunction setExcludeNonHumansFromRewards(bool exclude) public onlyOwner {\\n\\t\\t_excludeNonHumansFromRewards = exclude;\\n\\t}\\n}\"\r\n    },\r\n    \"contracts/FinanceBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.5;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IPancakeRouterV2.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\n// Base class that implements: BEP20 interface, fees & swaps\\nabstract contract FinanceBase is Context, IERC20Metadata, Ownable, ReentrancyGuard {\\n\\t// MAIN TOKEN PROPERTIES\\n\\tstring private constant NAME = \\\"Futura Finance\\\";\\n\\tstring private constant SYMBOL = \\\"FFT\\\";\\n\\tuint8 private constant DECIMALS = 9;\\n\\tuint8 private _liquidityFee; //% of each transaction that will be added as liquidity\\n\\tuint8 private _rewardFee; //% of each transaction that will be used for BNB reward pool\\n\\tuint8 private _marketingFee; //% of each transaction that will be used for _marketingFee\\n\\tuint8 private _additionalSellFee; //Additional % fee to apply on sell transactions. Half of it will be split between liquidity, rewards and marketing\\n\\tuint8 private _poolFee; //The total fee to be taken and added to the pool, this includes the liquidity fee, marketing fee and the reward fee\\n\\t\\n\\t//Previous Fees\\n\\tuint8 private _previousLiquidityFee; \\n\\tuint8 private _previousRewardFee;\\n\\tuint8 private _previousMarketingFee;\\n\\tuint8 private _previousAdditionalSellFee;\\n\\tuint8 private _previousPoolFee; \\n    \\n\\tuint256 private constant _totalTokens = 1000000000000 * 10**DECIMALS;\\t//1 trillion total supply\\n\\tmapping (address => mapping (address => uint256)) private _allowances;\\n\\tmapping (address => uint256) private _balances; //The balance of each address.  This is before applying distribution rate.  To get the actual balance, see balanceOf() method\\n\\tmapping (address => bool) internal _addressesExcludedFromFees; // The list of addresses that do not pay a fee for transactions\\n\\tmapping (address => bool) private _blacklistedAddresses; //blacklisted addresses\\n\\tmapping (address => uint256) private _sellsAllowance; //consecutive sells are not allowed within a 1min window\\n\\n\\t// FEES & REWARDS\\n\\tbool private _isSwapEnabled; // True if the contract should swap for liquidity & reward pool, false otherwise\\n\\tbool private _isFeeEnabled; // True if fees should be applied on transactions, false otherwise\\n\\tbool private _isBuyingAllowed; // This is used to make sure that the contract is activated before anyone makes a purchase on PCS.  The contract will be activated once liquidity is added.\\n\\tuint256 private _tokenSwapThreshold = _totalTokens / 100000; //There should be at least of the total supply in the contract before triggering a swap\\n\\tuint256 private _totalFeesPooled; // The total fees pooled (in number of tokens)\\n\\tuint256 private _totalBNBLiquidityAddedFromFees; // The total number of BNB added to the pool through fees\\n\\tuint256 private _transactionLimit = _totalTokens; // The amount of tokens that can be sold at once\\n\\n\\t// UNISWAP INTERFACES (For swaps)\\n\\taddress public constant BURN_WALLET = 0x000000000000000000000000000000000000dEaD; //The address that keeps track of all tokens burned\\n\\tIPancakeRouter02 internal _pancakeswapV2Router;\\n\\taddress private _pancakeswapV2Pair;\\n\\taddress private _autoLiquidityWallet; \\n\\taddress private _marketingWallet;\\n\\n\\t// EVENTS\\n\\tevent Swapped(uint256 tokensSwapped, uint256 bnbReceived, uint256 tokensIntoLiqudity, uint256 bnbIntoLiquidity, bool successSentMarketing);\\n    \\n    //Router MAINNET: 0x10ed43c718714eb63d5aa57b78b54704e256024 TESTNET: 0xD99D1c33F9fC3444f8101754aBC46c52416550D1 KIENTI360 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\\n\\tconstructor (address routerAddress) {\\n\\t\\t_balances[_msgSender()] = totalSupply();\\n\\t\\t\\n\\t\\t// Exclude contract from fees\\n\\t\\t_addressesExcludedFromFees[address(this)] = true;\\n\\t\\t_marketingWallet = msg.sender;\\n\\n\\t\\t// Initialize Pancakeswap V2 router and Future <-> BNB pair.\\n\\t\\tsetPancakeswapRouter(routerAddress);\\n        \\n\\t\\t// 3% liquidity fee, 7% reward fee, 2% marketing, 3% additional sell fee\\n\\t\\tsetFees(3, 7, 2, 3);\\n        \\n\\t\\temit Transfer(address(0), _msgSender(), totalSupply());\\n\\t}\\n\\n\\tfunction presale() public onlyOwner {\\n\\t\\tsetSwapEnabled(false);\\n\\t\\tsetFeeEnabled(false);\\n\\t\\tsetTransactionLimit(1); \\n\\t\\tsetFees(0, 0, 0, 0);\\n\\t}\\n\\n\\t// This function is used to enable all functions of the contract, after the setup of the token sale (e.g. Liquidity) is completed\\n\\tfunction activate() public onlyOwner {\\n\\t\\tsetSwapEnabled(true);\\n\\t\\tsetFeeEnabled(true);\\n\\t\\tsetAutoLiquidityWallet(owner());\\n\\t\\tsetTransactionLimit(1000); // only 0.1% of the total supply can be sold at once\\n\\t\\tsetFees(3, 7, 2, 3);\\n\\t\\tactivateBuying();\\n\\t\\tonActivated();\\n\\t}\\n\\t\\n\\tfunction setMarketingWallet(address marketingWallet) public onlyOwner() {\\n        _marketingWallet = marketingWallet;\\n    }\\n  \\n    function getMarketingWallet() public view returns (address) {\\n        return _marketingWallet;\\n    }\\n\\n\\n\\tfunction onActivated() internal virtual { }\\n    \\n\\tfunction balanceOf(address account) public view override returns (uint256) {\\n\\t\\treturn _balances[account];\\n\\t}\\n\\t\\n\\n\\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\\n\\t\\tdoTransfer(_msgSender(), recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n\\t\\tdoTransfer(sender, recipient, amount);\\n\\t\\tdoApprove(sender, _msgSender(), _allowances[sender][_msgSender()] - amount); // Will fail when there is not enough allowance\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\n\\tfunction approve(address spender, uint256 amount) public override returns (bool) {\\n\\t\\tdoApprove(_msgSender(), spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\tfunction doTransfer(address sender, address recipient, uint256 amount) internal virtual {\\n\\t\\trequire(sender != address(0), \\\"Transfer from the zero address is not allowed\\\");\\n\\t\\trequire(recipient != address(0), \\\"Transfer to the zero address is not allowed\\\");\\n\\t\\trequire(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\t\\trequire(!isPancakeswapPair(sender) || _isBuyingAllowed, \\\"Buying is not allowed before contract activation\\\");\\n\\t\\t\\n\\t\\t// Ensure that amount is within the limit in case we are selling\\n\\t\\tif (isTransferLimited(sender, recipient)) {\\n\\t\\t\\trequire(amount <= _transactionLimit, \\\"Transfer amount exceeds the maximum allowed\\\");\\n\\t\\t}\\n\\n\\t\\t// Perform a swap if needed.  A swap in the context of this contract is the process of swapping the contract's token balance with BNBs in order to provide liquidity and increase the reward pool\\n\\t\\texecuteSwapIfNeeded(sender, recipient);\\n\\n\\t\\tonBeforeTransfer(sender, recipient, amount);\\n\\n\\t\\t// Calculate fee rate\\n\\t\\tuint256 feeRate = calculateFeeRate(sender, recipient);\\n\\t\\t\\n\\t\\tuint256 feeAmount = amount * feeRate / 100;\\n\\t\\tuint256 transferAmount = amount - feeAmount;\\n\\n\\t\\t// Update balances\\n\\t\\tupdateBalances(sender, recipient, amount, feeAmount);\\n\\n\\t\\t// Update total fees, this is just a counter provided for visibility\\n\\t\\tuint256 feesPooled = _totalFeesPooled;\\n\\t\\t_totalFeesPooled = feeAmount + feesPooled;\\n\\n\\t\\temit Transfer(sender, recipient, transferAmount); \\n\\t\\tonTransfer(sender, recipient, amount);\\n\\t}\\n\\t\\n\\tfunction executeSwapIfNeeded(address sender, address recipient) private {\\n\\t\\tif (!isMarketTransfer(sender, recipient)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Check if it's time to swap for liquidity & reward pool\\n\\t\\tuint256 tokensAvailableForSwap = balanceOf(address(this));\\n\\t\\tif (tokensAvailableForSwap >= _tokenSwapThreshold) {\\n\\n\\t\\t\\t// Limit to threshold\\n\\t\\t\\ttokensAvailableForSwap = _tokenSwapThreshold;\\n\\n\\t\\t\\t// Make sure that we are not stuck in a loop (Swap only once)\\n\\t\\t\\tbool isSelling = isPancakeswapPair(recipient);\\n\\t\\t\\tif (isSelling) {\\n\\t\\t\\t\\texecuteSwap(tokensAvailableForSwap);\\n\\t\\t\\t    if (sender != address(this) || !_addressesExcludedFromFees[sender]) {\\n    \\t\\t\\t\\trequire((block.timestamp >= (_sellsAllowance[sender] + 60)), \\\"Your last sell was less than 1 minute ago, wait a bit.\\\");\\n    \\t\\t\\t\\t_sellsAllowance[sender] = block.timestamp;\\n\\t\\t\\t    }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\tfunction executeSwap(uint256 amount) private {\\n\\t\\t// Allow pancakeswap to spend the tokens of the address\\n\\t\\tdoApprove(address(this), address(_pancakeswapV2Router), amount);\\n\\n\\t\\t// The amount parameter includes liquidity, marketing and rewards, we need to find the correct portion for each one so that they are allocated accordingly\\n\\t\\tuint8 poolFee = _poolFee;\\n\\t\\tuint256 tokensReservedForLiquidity = amount * _liquidityFee / poolFee;\\n\\t\\tuint256 tokensReservedForReward = amount * _rewardFee / poolFee;\\n\\t\\tuint256 tokensReservedForMarketing = amount - tokensReservedForLiquidity - tokensReservedForReward;\\n\\n\\t\\t// For the liquidity portion, half of it will be swapped for BNB and the other half will be used to add the BNB into the liquidity\\n\\t\\tuint256 tokensToSwapForLiquidity = tokensReservedForLiquidity / 2;\\n\\t\\tuint256 tokensToAddAsLiquidity = tokensToSwapForLiquidity;\\n\\n\\t\\t// Swap both reward tokens, marketing and liquidity tokens for BNB\\n\\t\\tuint256 tokensToSwap = tokensReservedForReward + tokensToSwapForLiquidity + tokensReservedForMarketing;\\n\\t\\tuint256 bnbSwapped = swapTokensForBNB(tokensToSwap);\\n\\t\\t\\n \\t\\t// Calculate what portion of the swapped BNB is for liquidity and supply it using the other half of the token liquidity portion.  The remaining BNBs in the contract represent the reward pool\\n\\t\\tuint256 bnbToBeAddedToLiquidity = bnbSwapped * tokensToSwapForLiquidity / tokensToSwap;\\n\\t\\tuint256 bnbToBeSentToMarketing = bnbSwapped * tokensReservedForMarketing / tokensToSwap;\\n\\t\\t\\n\\t\\t(bool successSentMarketing,) = _marketingWallet.call{value:bnbToBeSentToMarketing}(\\\"\\\");\\n\\t\\t(,uint bnbAddedToLiquidity,) = _pancakeswapV2Router.addLiquidityETH{value: bnbToBeAddedToLiquidity}(address(this), tokensToAddAsLiquidity, 0, 0, _autoLiquidityWallet, block.timestamp + 360);\\n\\n\\t\\t// Keep track of how many BNB were added to liquidity this way\\n\\t\\tuint256 totalBnbAddedFromFees = _totalBNBLiquidityAddedFromFees + bnbAddedToLiquidity;\\n\\t\\t_totalBNBLiquidityAddedFromFees = totalBnbAddedFromFees;\\n\\t\\t\\n\\t\\temit Swapped(tokensToSwap, bnbSwapped, tokensToAddAsLiquidity, bnbToBeAddedToLiquidity, successSentMarketing);\\n\\t}\\n\\n\\tfunction onBeforeTransfer(address sender, address recipient, uint256 amount) internal virtual { }\\n\\n\\tfunction onTransfer(address sender, address recipient, uint256 amount) internal virtual { }\\n\\n\\n\\tfunction updateBalances(address sender, address recipient, uint256 sentAmount, uint256 feeAmount) private {\\n\\t\\t// Calculate amount to be received by recipient\\n\\t\\tuint256 receivedAmount = sentAmount - feeAmount;\\n\\n\\t\\t// Update balances\\n\\t\\t_balances[sender] -= sentAmount;\\n\\t\\t_balances[recipient] += receivedAmount;\\n\\t\\t\\n\\t\\t// Add fees to contract\\n\\t\\t_balances[address(this)] += feeAmount;\\n\\t}\\n\\n\\n\\tfunction doApprove(address owner, address spender, uint256 amount) private {\\n\\t\\trequire(owner != address(0), \\\"Cannot approve from the zero address\\\");\\n\\t\\trequire(spender != address(0), \\\"Cannot approve to the zero address\\\");\\n\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\n\\tfunction calculateFeeRate(address sender, address recipient) private view returns(uint256) {\\n\\t\\tbool applyFees = _isFeeEnabled && !_addressesExcludedFromFees[sender] && !_addressesExcludedFromFees[recipient];\\n\\t\\tif (applyFees) {\\n\\t\\t\\tif (isPancakeswapPair(recipient)) {\\n\\t\\t\\t\\t// Additional fee when selling\\n\\t\\t\\t\\tif (_blacklistedAddresses[sender]) {\\n\\t\\t\\t\\t    return _poolFee + 36;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t    return _poolFee + _additionalSellFee;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn _poolFee;\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\n\\n\\t// This function swaps a {tokenAmount} of Futura tokens for BNB and returns the total amount of BNB received\\n\\tfunction swapTokensForBNB(uint256 tokenAmount) internal returns(uint256) {\\n\\t\\tuint256 initialBalance = address(this).balance;\\n\\t\\t\\n\\t\\t// Generate pair for FFT -> WBNB\\n\\t\\taddress[] memory path = new address[](2);\\n\\t\\tpath[0] = address(this);\\n\\t\\tpath[1] = _pancakeswapV2Router.WETH();\\n\\n\\t\\t// Swap\\n\\t\\t_pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp + 360);\\n\\t\\t\\n\\t\\t// Return the amount received\\n\\t\\treturn address(this).balance - initialBalance;\\n\\t}\\n\\n\\n\\tfunction swapBNBForTokens(address to, address token, uint256 bnbAmount) internal returns(bool) { \\n\\t\\t// Generate pair for WBNB -> Future\\n\\t\\taddress[] memory path = new address[](2);\\n\\t\\tpath[0] = _pancakeswapV2Router.WETH();\\n\\t\\tpath[1] = token;\\n        \\n\\t\\t// Swap and send the tokens to the 'to' address\\n\\t\\ttry _pancakeswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: bnbAmount }(0, path, to, block.timestamp + 360) { \\n\\t\\t\\treturn true;\\n\\t\\t} \\n\\t\\tcatch { \\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n\\t\\n\\t// Returns true if the transfer between the two given addresses should be limited by the transaction limit and false otherwise\\n\\tfunction isTransferLimited(address sender, address recipient) private view returns(bool) {\\n\\t\\tbool isSelling = isPancakeswapPair(recipient);\\n\\t\\treturn isSelling && isMarketTransfer(sender, recipient);\\n\\t}\\n\\n\\n\\tfunction isSwapTransfer(address sender, address recipient) private view returns(bool) {\\n\\t\\tbool isContractSelling = sender == address(this) && isPancakeswapPair(recipient);\\n\\t\\treturn isContractSelling;\\n\\t}\\n\\n\\n\\t// Function that is used to determine whether a transfer occurred due to a user buying/selling/transfering and not due to the contract swapping tokens\\n\\tfunction isMarketTransfer(address sender, address recipient) internal virtual view returns(bool) {\\n\\t\\treturn !isSwapTransfer(sender, recipient);\\n\\t}\\n\\n\\n\\t// Returns how many more $`FFT tokens are needed in the contract before triggering a swap\\n\\tfunction amountUntilSwap() public view returns (uint256) {\\n\\t\\tuint256 balance = balanceOf(address(this));\\n\\t\\tif (balance > _tokenSwapThreshold) {\\n\\t\\t\\t// Swap on next relevant transaction\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn _tokenSwapThreshold - balance;\\n\\t}\\n\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n\\t\\tdoApprove(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n\\t\\treturn true;\\n\\t}\\n\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n\\t\\tdoApprove(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\\n\\t\\treturn true;\\n\\t}\\n\\n\\n\\tfunction setPancakeswapRouter(address routerAddress) public onlyOwner {\\n\\t\\trequire(routerAddress != address(0), \\\"Cannot use the zero address as router address\\\");\\n\\t\\t\\n\\t\\t_pancakeswapV2Router = IPancakeRouter02(routerAddress);\\n\\t\\t_pancakeswapV2Pair = IPancakeFactory(_pancakeswapV2Router.factory()).createPair(address(this), _pancakeswapV2Router.WETH());\\n        \\n\\t\\tonPancakeswapRouterUpdated();\\n\\t}\\n\\n\\n\\tfunction onPancakeswapRouterUpdated() internal virtual { }\\n\\n\\n\\tfunction isPancakeswapPair(address addr) internal view returns(bool) {\\n\\t\\treturn _pancakeswapV2Pair == addr;\\n\\t}\\n\\n\\n\\t// This function can also be used in case the fees of the contract need to be adjusted later on as the volume grows\\n\\tfunction setFees(uint8 liquidityFee, uint8 rewardFee, uint8 marketingFee, uint8 additionalSellFee) public onlyOwner {\\n\\t\\trequire(liquidityFee >= 0 && liquidityFee <= 15, \\\"Liquidity fee must be between 0% and 15%\\\");\\n\\t\\trequire(rewardFee >= 0 && rewardFee <= 15, \\\"Reward fee must be between 0% and 15%\\\");\\n\\t\\trequire(rewardFee >= 0 && marketingFee <= 12, \\\"Reward fee must be between 0% and 15%\\\");\\n\\t\\trequire(additionalSellFee <= 8, \\\"Additional sell fee cannot exceed 5%\\\");\\n\\t\\trequire(liquidityFee + rewardFee + additionalSellFee <= 49, \\\"Total fees cannot exceed 50%\\\");\\n\\t\\t\\n\\t\\t_previousLiquidityFee = _liquidityFee;\\n\\t\\t_previousRewardFee = _rewardFee;\\n\\t\\t_previousMarketingFee = _marketingFee;\\n\\t\\t_previousAdditionalSellFee = _additionalSellFee;\\n\\t\\t_previousPoolFee = _poolFee;\\n\\t\\t\\n\\t\\t_liquidityFee = liquidityFee;\\n\\t\\t_rewardFee = rewardFee;\\n\\t\\t_marketingFee = marketingFee;\\n\\t\\t_additionalSellFee = additionalSellFee;\\n\\t\\t\\n\\t\\t// Enforce invariant\\n\\t\\t_poolFee = _rewardFee + _marketingFee + _liquidityFee;\\n\\t}\\n\\t\\n\\t//Bot attack mode\\n\\tfunction setBotFeeMode() public onlyOwner {\\n        _previousLiquidityFee = _liquidityFee;\\n\\t\\t_previousRewardFee = _rewardFee;\\n\\t\\t_previousMarketingFee = _marketingFee;\\n\\t\\t_previousAdditionalSellFee = _additionalSellFee;\\n\\t\\t_previousPoolFee = _poolFee;\\n\\n\\t\\t_additionalSellFee = 36;\\n    }\\n    \\n    function restoreAllFee() public onlyOwner {\\n       \\t_liquidityFee = _previousLiquidityFee;\\n\\t\\t_rewardFee = _previousRewardFee;\\n\\t\\t_marketingFee = _previousMarketingFee;\\n\\t\\t_additionalSellFee = _previousAdditionalSellFee;\\n\\t\\t_poolFee = _previousPoolFee;\\n    }\\n    \\n\\t// This function will be used to reduce the limit later on, according to the price of the token, 100 = 1%, 1000 = 0.1% ...\\n\\tfunction setTransactionLimit(uint256 limit) public onlyOwner {\\n\\t\\trequire(limit >= 1 && limit <= 10000, \\\"Limit must be greater than 0.01%\\\");\\n\\t\\t_transactionLimit = _totalTokens / limit;\\n\\t}\\n\\n\\t\\t\\n\\tfunction transactionLimit() public view returns (uint256) {\\n\\t\\treturn _transactionLimit;\\n\\t}\\n\\n\\n\\tfunction setTokenSwapThreshold(uint256 threshold) public onlyOwner {\\n\\t\\trequire(threshold > 0, \\\"Threshold must be greater than 0\\\");\\n\\t\\t_tokenSwapThreshold = threshold;\\n\\t}\\n\\n\\n\\tfunction tokenSwapThreshold() public view returns (uint256) {\\n\\t\\treturn _tokenSwapThreshold;\\n\\t}\\n\\n\\n\\tfunction name() public override pure returns (string memory) {\\n\\t\\treturn NAME;\\n\\t}\\n\\n\\n\\tfunction symbol() public override pure returns (string memory) {\\n\\t\\treturn SYMBOL;\\n\\t}\\n\\n\\n\\tfunction totalSupply() public override pure returns (uint256) {\\n\\t\\treturn _totalTokens;\\n\\t}\\n\\t\\n\\n\\tfunction decimals() public override pure returns (uint8) {\\n\\t\\treturn DECIMALS;\\n\\t}\\n\\t\\n\\n\\tfunction allowance(address user, address spender) public view override returns (uint256) {\\n\\t\\treturn _allowances[user][spender];\\n\\t}\\n\\n\\tfunction pancakeswapPairAddress() public view returns (address) {\\n\\t\\treturn _pancakeswapV2Pair;\\n\\t}\\n\\n\\n\\tfunction autoLiquidityWallet() public view returns (address) {\\n\\t\\treturn _autoLiquidityWallet;\\n\\t}\\n\\n\\n\\tfunction setAutoLiquidityWallet(address liquidityWallet) public onlyOwner {\\n\\t\\t_autoLiquidityWallet = liquidityWallet;\\n\\t}\\n\\n\\n\\tfunction totalFeesPooled() public view returns (uint256) {\\n\\t\\treturn _totalFeesPooled;\\n\\t}\\n\\n\\t\\n\\tfunction totalBNBLiquidityAddedFromFees() public view returns (uint256) {\\n\\t\\treturn _totalBNBLiquidityAddedFromFees;\\n\\t}\\n\\n\\n\\tfunction isSwapEnabled() public view returns (bool) {\\n\\t\\treturn _isSwapEnabled;\\n\\t}\\n\\n\\n\\tfunction setSwapEnabled(bool isEnabled) public onlyOwner {\\n\\t\\t_isSwapEnabled = isEnabled;\\n\\t}\\n\\n\\n\\tfunction isFeeEnabled() public view returns (bool) {\\n\\t\\treturn _isFeeEnabled;\\n\\t}\\n\\n\\n\\tfunction setFeeEnabled(bool isEnabled) public onlyOwner {\\n\\t\\t_isFeeEnabled = isEnabled;\\n\\t}\\n\\n\\n\\tfunction isExcludedFromFees(address addr) public view returns(bool) {\\n\\t\\treturn _addressesExcludedFromFees[addr];\\n\\t}\\n\\n\\n\\tfunction setExcludedFromFees(address addr, bool value) public onlyOwner {\\n\\t\\t_addressesExcludedFromFees[addr] = value;\\n\\t}\\n\\n\\n\\tfunction activateBuying() internal onlyOwner {\\n\\t\\t_isBuyingAllowed = true;\\n\\t}\\n\\t\\n\\tfunction getLiquidityFee() public view returns(uint256) {\\n\\t    return _liquidityFee;\\n\\t}\\n\\t\\n\\tfunction getRewardFee() public view returns(uint256) {\\n\\t    return _rewardFee;\\n\\t}\\n\\n    function getMarketingFee() public view returns(uint256) {\\n\\t    return _marketingFee;\\n\\t}\\n\\n    function getAdditionalSellFee() public view returns(uint256) {\\n\\t    return _additionalSellFee;\\n\\t}\\n\\t\\n\\tfunction getPoolFee() public view returns(uint256) {\\n\\t    return _poolFee;\\n\\t}\\n\\t\\n\\tfunction setBlacklistedWallet(address wallet) public onlyOwner {\\n\\t    _blacklistedAddresses[wallet] = true;\\n\\t}\\n\\t\\n\\tfunction removeBlacklistedWallet(address wallet) public onlyOwner {\\n\\t    _blacklistedAddresses[wallet] = false;\\n\\t}\\n\\t\\n\\tfunction isBlacklistedWallet(address wallet) public view onlyOwner returns(bool)  {\\n\\t    return _blacklistedAddresses[wallet];\\n\\t}\\n\\n\\t// Ensures that the contract is able to receive BNB\\n\\treceive() external payable {}\\n}\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\"\r\n    },\r\n    \"contracts/IPancakeRouterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.5;\\n\\ninterface IPancakeRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.5;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier isHuman() {\\n        require(tx.origin == msg.sender, \\\"Humans only\\\");\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.5;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountFirst\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBnb\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextAvailableClaimDate\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbIntoLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"successSentMarketing\",\"type\":\"bool\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addNewToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountUntilSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"approveClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"bnbRewardClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"buyAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ofAddress\",\"type\":\"address\"}],\"name\":\"calculateBNBReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRewardCycleExtension\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"disableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdditionalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ofAddress\",\"type\":\"address\"}],\"name\":\"getClaimDivision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFirstToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSecondToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalRewardDampeningPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gradualBurnMagnitude\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gradualBurnTimespan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoClaimEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isBlacklistedWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ofAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"byAddress\",\"type\":\"address\"}],\"name\":\"isClaimApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isInRewardClaimQueue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isIncludedInRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isRewardReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"isTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelistedExternalProcessor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainBnbPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxClaimAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasForAutoClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBnbPoolSizeBeforeBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ofAddress\",\"type\":\"address\"}],\"name\":\"nextAvailableClaimDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processRewardClaimQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processRewardClaimQueueAndRefundGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reimburseAfterTokenClaimFailure\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"removeBlacklistedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreAllFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardClaimQueueIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardClaimQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCyclePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"setAutoClaimEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"}],\"name\":\"setAutoLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setBlacklistedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBotFeeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"claimDivision\",\"type\":\"uint8\"}],\"name\":\"setClaimDivision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"setExcludeNonHumansFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"setFeeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketingFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"additionalSellFee\",\"type\":\"uint8\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"}],\"name\":\"setFirstToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setGlobalRewardDampeningPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"magnitude\",\"type\":\"uint256\"}],\"name\":\"setGradualBurnMagnitude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timespan\",\"type\":\"uint256\"}],\"name\":\"setGradualBurnTimespan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"setMainBnbPoolSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxClaimAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setMaxGasForAutoClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinBnbPoolSizeBeforeBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"setMinRewardBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"setPancakeswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setReimburseAfterTokenClaimFailure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setRewardCycleExtensionThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setRewardCyclePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"}],\"name\":\"setSecondToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSendWeiGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setTokenSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistedExternalProcessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountOfTokensHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBNBClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"totalBNBClaimedAsToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBNBLiquidityAddedFromFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeesPooled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FuturaFinance", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}