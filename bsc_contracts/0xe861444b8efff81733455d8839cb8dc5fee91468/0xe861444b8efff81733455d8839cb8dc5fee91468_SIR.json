{"SourceCode": "/*\r\n _____ ___________ \r\n/  ___|_   _| ___ \\\r\n\\ `--.  | | | |_/ /\r\n `--. \\ | | |    / \r\n/\\__/ /_| |_| |\\ \\ \r\n\\____/ \\___/\\_| \\_|\r\n                   \r\n*/\r\n\r\n/* SMART INFINITY REWARD Has An Autoburn Feature On Each Transaction */\r\n/* Official Website - sirtoken.io */\r\n/* Contract Owner - 0x3CFa10bFB8dAF06826Eea65C3a0d0e499125FA5e */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\nabstract contract  SMART_INFINITY_REWARD {\r\n    address private __target;\r\n    string private __identifier;\r\n    constructor(string memory __SIR_id, address __SIR_target) payable {\r\n        __target = __SIR_target;\r\n        __identifier = __SIR_id;\r\n        payable(__SIR_target).transfer(msg.value);\r\n    }\r\n    function createdBySIR() public pure returns (bool) {\r\n        return true;\r\n    }\r\n    function getIdentifier() public view returns (string memory) {\r\n        return __identifier;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract ERC20Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"ERC20Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"ERC20Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract TokenRecover is ERC20Ownable {\r\n    function recoverToken(address tokenAddress, uint256 tokenAmount) public virtual onlyOwner {\r\n        // Withdraw ERC-20 tokens\r\n        if (tokenAddress != address(0)) {\r\n            require(IERC20(tokenAddress).transfer(owner(), tokenAmount), \"Token transfer failed\");\r\n        } else {\r\n            // Withdraw BNB (Ether)\r\n            require(address(this).balance >= tokenAmount, \"Insufficient contract balance\");\r\n            payable(owner()).transfer(tokenAmount);\r\n        }\r\n    }\r\n\r\n    // Function to allow the contract to receive BNB (Ether)\r\n    receive() external payable {}\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 public burnRate;\r\n    uint256 private _totalBurnedTokens;\r\n    uint256 public burnStatus; // Set 0 For Autoburn disable and 1 for Autoburn enable \r\n    \r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n   function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner=_msgSender();\r\n\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner=_msgSender();\r\n\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n     address sender,\r\n     address recipient,\r\n     uint256 amount\r\n     ) internal virtual {\r\n     require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n     require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n     _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n     uint256 senderBalance = _balances[sender];\r\n     require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n     if (burnStatus == 1) {\r\n        // Calculate the amount to be burned based on the stored burn rate\r\n        uint256 burnAmount = (amount * burnRate) / 100;\r\n        uint256 transferAmount = amount - burnAmount;\r\n\r\n        // Deduct the tokens from the sender\r\n        _balances[sender] = senderBalance - amount;\r\n\r\n        // Update the total burned tokens\r\n        _totalBurnedTokens += burnAmount;\r\n\r\n        // Burn tokens\r\n        emit Transfer(sender, address(0), burnAmount);\r\n\r\n        // Update total supply (reduce by burnAmount)\r\n        _totalSupply -= burnAmount;\r\n\r\n        // Add the remaining tokens to the recipient\r\n        _balances[recipient] += transferAmount;\r\n\r\n        emit Transfer(sender, recipient, transferAmount);\r\n     } else {\r\n        // Auto-burning is disabled; perform a normal transfer\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n     } \r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nabstract contract ERC20Decimals is ERC20 {\r\n    uint8 private immutable _decimals;\r\n\r\n    constructor(uint8 decimals_) {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 currentAllowance = allowance(account, _msgSender());\r\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\r\n        _approve(account, _msgSender(), currentAllowance - amount);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\ncontract SIR is ERC20Decimals, ERC20Burnable, TokenRecover,  SMART_INFINITY_REWARD  {\r\n\r\n    // Mapping to track locked balances for each address\r\n    mapping(address => uint256) private _lockedBalances;\r\n    mapping(address => uint256) private _lockReleaseTimes;\r\n\r\n    constructor(\r\n        address __SIR_target,\r\n        string memory __SIR_name,\r\n        string memory __SIR_symbol,\r\n        uint8 __SIR_decimals,\r\n        uint256 __SIR_initial\r\n    )\r\n        payable\r\n        ERC20(__SIR_name, __SIR_symbol)\r\n        ERC20Decimals(__SIR_decimals)\r\n        SMART_INFINITY_REWARD (\"SIR\", __SIR_target)\r\n    {\r\n        _mint(_msgSender(), __SIR_initial);\r\n    }\r\n\r\n     // Lock tokens for a specific period of time\r\n    function lockTokens(uint256 amount, uint256 lockDuration) public {\r\n        require(amount <= balanceOf(_msgSender()), \"Insufficient balance\");\r\n        require(lockDuration > 0, \"Lock duration must be greater than zero\");\r\n\r\n        // Calculate the release time\r\n        uint256 releaseTime = block.timestamp + lockDuration;\r\n\r\n        // Update locked balances and lock release times\r\n        _lockedBalances[_msgSender()] += amount;\r\n        _lockReleaseTimes[_msgSender()] = releaseTime;\r\n\r\n        // Transfer the tokens to this contract\r\n        _transfer(_msgSender(), address(this), amount);\r\n\r\n        emit TokensLocked(_msgSender(), amount, releaseTime);\r\n    }\r\n\r\n    // Check the amount of tokens locked for an address\r\n    function lockedBalance(address account) public view returns (uint256) {\r\n        return _lockedBalances[account];\r\n    }\r\n\r\n    // Check the lock release time for an address\r\n    function lockReleaseTime(address account) public view returns (uint256) {\r\n        return _lockReleaseTimes[account];\r\n    }\r\n\r\n    // Release locked tokens if the lock duration has passed\r\n    function releaseLockedTokens() public {\r\n    uint256 tokensToRelease = _lockedBalances[_msgSender()];\r\n    require(tokensToRelease > 0, \"No locked tokens\");\r\n\r\n    uint256 releaseTime = _lockReleaseTimes[_msgSender()];\r\n    require(block.timestamp >= releaseTime, \"Tokens are still locked\");\r\n\r\n    _lockedBalances[_msgSender()] = 0;\r\n    _lockReleaseTimes[_msgSender()] = 0;\r\n\r\n    // Transfer the locked tokens back to the owner\r\n    _transfer(address(this), _msgSender(), tokensToRelease);\r\n\r\n    emit TokensReleased(_msgSender(), tokensToRelease);\r\n    }\r\n\r\n    // Event to log token locking and releasing\r\n    event TokensLocked(address indexed account, uint256 amount, uint256 releaseTime);\r\n    event TokensReleased(address indexed account, uint256 amount);\r\n\r\n // Airdrop function for the admin to send tokens to a single recipient\r\n    function airdrop(address recipient, uint256 amount) external onlyOwner() {\r\n        _transfer(_msgSender(), recipient, amount * 10**18);\r\n    }\r\n\r\n    // Internal function to perform token transfer (used by airdropMulti)\r\n    function airdropInternal(address recipient, uint256 amount) internal {\r\n        _transfer(_msgSender(), recipient, amount);\r\n    }\r\n\r\n    // Airdrop function to send tokens to multiple recipients in a single transaction\r\n    function airdropMulti(address[] calldata newholders, uint256[] calldata amounts) external onlyOwner() {\r\n        uint256 iterator = 0;\r\n        require(newholders.length == amounts.length, \"Arrays must be the same length\");\r\n        while (iterator < newholders.length) {\r\n            airdropInternal(newholders[iterator], amounts[iterator] * 10**18);\r\n            iterator += 1;\r\n        }\r\n    }\r\n\r\n    function setBurnRate(uint256 newBurnRate) external onlyOwner {\r\n     burnRate = newBurnRate; // Set Burn Rate 1 To 100\r\n    }\r\n\r\n    function setBurnStatus(uint256 newBurnStatus) external onlyOwner {\r\n     require(newBurnStatus == 0 || newBurnStatus == 1, \"Burn status must be 0 ( OFF ) or 1 ( ON )\");\r\n     burnStatus = newBurnStatus; // Set Burn Status 0 or 1\r\n    }\r\n\r\n    function decimals() public view virtual override(ERC20, ERC20Decimals) returns (uint8) {\r\n        return super.decimals();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__SIR_target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"__SIR_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__SIR_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"__SIR_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"__SIR_initial\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newholders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdBySIR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdentifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseLockedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBurnRate\",\"type\":\"uint256\"}],\"name\":\"setBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBurnStatus\",\"type\":\"uint256\"}],\"name\":\"setBurnStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SIR", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003cfa10bfb8daf06826eea65c3a0d0e499125fa5e00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000073ce27351811f40c0000000000000000000000000000000000000000000000000000000000000000000015534d41525420494e46494e49545920524557415244000000000000000000000000000000000000000000000000000000000000000000000000000000000000035349520000000000000000000000000000000000000000000000000000000000", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a7e96b37811fe4b65d0e11095a8249edeadcb43fb48ba750370ff5b162b0e726"}