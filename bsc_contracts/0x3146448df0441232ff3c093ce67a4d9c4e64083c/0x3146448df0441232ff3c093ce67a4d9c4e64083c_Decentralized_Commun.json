{"SourceCode": "{\"DC-contract-Context.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal pure virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"DC-interfaceIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\"},\"DC-libraryAddress.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\nlibrary Address {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance \\u003e= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function functionCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance \\u003e= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 weiValue,\\r\\n        string memory errorMessage\\r\\n    ) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\r\\n            data\\r\\n        );\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"DC-librarySafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\r\\n\\r\\nimport {Address} from  \\\"./DC-libraryAddress.sol\\\"  ;\\r\\nimport {IERC20} from  \\\"./DC-interfaceIERC20.sol\\\"  ;\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) +\\r\\n            (value);\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) -\\r\\n            (value);\\r\\n        _callOptionalReturn(\\r\\n            token,\\r\\n            abi.encodeWithSelector(\\r\\n                token.approve.selector,\\r\\n                spender,\\r\\n                newAllowance\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        bytes memory returndata = address(token).functionCall(\\r\\n            data,\\r\\n            \\\"SafeERC20: low-level call failed\\\"\\r\\n        );\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            require(\\r\\n                abi.decode(returndata, (bool)),\\r\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Decentralized_Community_edited.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity \\u003e=0.4.22 \\u003c0.9.0;\\n\\n\\n// From : www.Deep.RichMind@gmail.com\\n\\nimport {Context} from \\\"./DC-contract-Context.sol\\\";\\nimport {IERC20} from \\\"./DC-interfaceIERC20.sol\\\";\\nimport {SafeERC20} from \\\"./DC-librarySafeERC20.sol\\\";\\nimport {Address} from \\\"./DC-libraryAddress.sol\\\";\\n\\ncontract Decentralized_Community_edited is Context {\\n    using SafeERC20 for IERC20;\\n    IERC20 private _TrxTech;\\n    address _trx = 0x55d398326f99059fF775485246999027B3197955;\\n    string[] ulkli = [\\\"AtlanticO\\\"];\\n\\n    struct IND {\\n        address ben;\\n        address BSa;\\n        address FT1;\\n        address FT2;\\n        string shp;\\n        uint256 uId;\\n        uint256 T1i;\\n        uint256 T2i;\\n        uint256 TT1i;\\n        uint256 TT2i;\\n        string ulk;\\n    }\\n\\n    struct IND2 {\\n        uint256 uId;\\n        string shpu;\\n        uint256 TstR;\\n        uint256 ZM;\\n    }\\n    struct CR {\\n        uint256 CRV;\\n        string CRK;\\n        uint256 CRVPget;\\n        uint256 CNTV;\\n        uint256 CRVPrwd;\\n        uint256 Prwd;\\n    }\\n\\n    CR cr;\\n\\n    struct AddressWallet {\\n        address mng;\\n        address community_members;\\n        address member_activation;\\n        address contract_value;\\n    }\\n    AddressWallet aw;\\n\\n    struct Felan {\\n        uint256 syFl;\\n        uint256 mtdl;\\n        uint256 sondo;\\n        uint256 tum_ksv;\\n        uint256 ghf;\\n        uint256 _uId;\\n    }\\n\\n    Felan fel;\\n    mapping(address =\\u003e IND) private _shpn;\\n    mapping(address =\\u003e IND2) private _shpn2;\\n    mapping(uint256 =\\u003e address) private Ashpa;\\n    mapping(address =\\u003e address[]) private bchm;\\n    mapping(uint256 =\\u003e address) private Flshpa;\\n    mapping(uint256 =\\u003e address) private nFlshpa;\\n    address private wall;\\n    uint256 private lastRun;\\n    uint256 private Zmn;\\n\\n    string public  BillBoards = \\\"\\\";\\n\\n    constructor() {\\n        fel.ghf = 0;\\n        fel._uId = 0;\\n        fel.mtdl = 1;\\n        cr.CRV = 1 * 10**16;\\n        cr.CNTV = 1 * 10**16;\\n        cr.CRVPget = 1 * 10**16;\\n        cr.CRVPrwd = 1 * 10**16;\\n\\n        address _community_members = 0x532EC7d14A0412e207287a4EEeC33c93fbEddf8C;\\n        address _member_activation = 0x532EC7d14A0412e207287a4EEeC33c93fbEddf8C;\\n        address _contract_value = 0x532EC7d14A0412e207287a4EEeC33c93fbEddf8C;\\n        aw.mng = _msgSender();\\n        fel.sondo = block.timestamp;\\n        aw.community_members = _community_members;\\n        aw.member_activation = _member_activation;\\n        aw.contract_value = _contract_value;\\n        lastRun = block.timestamp;\\n        Zmn = 32000000;\\n\\n        _TrxTech = IERC20(_trx);\\n\\n        Ashpa[fel._uId] = _msgSender();\\n\\n        _shpn[aw.mng] = IND(\\n            _msgSender(),\\n            address(0),\\n            address(0),\\n            address(0),\\n            \\\"Deep.RichMind@gmail.com\\\",\\n            fel._uId,\\n            0,\\n            0,\\n            0,\\n            0,\\n            \\\"DeJavu\\\"\\n        );\\n        _shpn2[aw.mng] = IND2(fel._uId, \\\"00\\\", 0, 0);\\n        fel._uId++;\\n    }\\n\\n    modifier mdntg() {\\n        require(_msgSender() == aw.mng, \\\"you are not allowed for this activity!\\\");\\n        _;\\n    }\\n\\n    modifier sbts() {\\n        bool ismsgsender = false;\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (_msgSender() == _shpn[Ashpa[i]].ben) {\\n                ismsgsender = true;\\n            }\\n        }\\n\\n        require(ismsgsender, \\\"You are not a member\\\");\\n        _;\\n    }\\n\\n    function Z_sulkli(string memory _country) public mdntg returns (bool) {\\n        ulkli.push(_country);\\n        return true;\\n    }\\n\\n    function compareStringsCaseInsensitive(string memory a, string memory b)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory aBytes = bytes(a);\\n        bytes memory bBytes = bytes(b);\\n\\n        if (aBytes.length != bBytes.length) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i \\u003c aBytes.length; i++) {\\n            if (lowerCase(uint8(aBytes[i])) != lowerCase(uint8(bBytes[i]))) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function lowerCase(uint8 data) internal pure returns (uint8) {\\n        if ((data \\u003e= 65) \\u0026\\u0026 (data \\u003c= 90)) {\\n            return uint8(data + 32);\\n        }\\n        return data;\\n    }\\n\\n    function A2_CountryList() public view returns (string[] memory) {\\n        string[] memory _ulkli = new string[](ulkli.length);\\n        for (uint256 i = 0; i \\u003c ulkli.length; i++) {\\n            _ulkli[i] = ulkli[i];\\n        }\\n        return _ulkli;\\n    }\\n\\n\\n    function ZZ_swaljdd(address _wal) public mdntg returns (bool) {\\n        wall = _wal;\\n        return true;\\n    }\\n\\n   \\n\\n    function A1_membership(\\n        string memory referral_Id,\\n        string memory _country,\\n        string memory _email,\\n        address _wallet\\n    ) public {\\n        bool isulk = false;\\n        address referral;\\n\\n        require(_wallet == _msgSender(), \\\"This address is not conncted!\\\");\\n\\n        for (uint256 i = 0; i \\u003c ulkli.length; i++) {\\n            if (compareStringsCaseInsensitive(_country, ulkli[i])) isulk = true;\\n        }\\n        require(isulk, \\\"your country is not valid!\\\");\\n\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (\\n                compareStringsCaseInsensitive(_shpn[Ashpa[i]].shp, referral_Id)\\n            ) {\\n                referral = Ashpa[i];\\n                break;\\n            }\\n        }\\n\\n        require(\\n            _msgSender() != referral,\\n            \\\"You can not enter the same address as your Referral_ID!\\\"\\n        );\\n        bool mthshp = false;\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (Ashpa[i] == _msgSender()) {\\n                mthshp = true;\\n                break;\\n            }\\n        }\\n\\n        require(mthshp == false, \\\"This address is already a member!\\\");\\n\\n        bool mthEm = false;\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (compareStringsCaseInsensitive(_shpn[Ashpa[i]].shp, _email)) {\\n                mthEm = true;\\n                break;\\n            }\\n        }\\n\\n        require(mthEm == false, \\\"This Email is already a member!\\\");\\n\\n        bool mthUpline = false;\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (Ashpa[i] == referral) {\\n                mthUpline = true;\\n                break;\\n            }\\n        }\\n        require(mthUpline == true, \\\"this referral_ID is not a member!\\\");\\n        //////////assembly\\n        Ashpa[fel._uId] = _msgSender();\\n\\n        address pa = referral;\\n\\n        address ras;\\n\\n        IND memory MovASL = _shpn[referral];\\n        if (MovASL.TT1i == 0 \\u0026\\u0026 MovASL.TT2i == 0) {\\n            pa = MovASL.ben;\\n        }\\n        if (MovASL.TT1i != 0 \\u0026\\u0026 MovASL.TT2i == 0) {\\n            pa = MovASL.ben;\\n        }\\n        if (MovASL.TT1i \\u003e 0 \\u0026\\u0026 MovASL.TT2i \\u003e 0) {\\n            if (MovASL.TT1i \\u003e MovASL.TT2i) {\\n                ras = MovASL.FT2;\\n                MovASL = _shpn[ras];\\n            } else if (MovASL.TT1i == MovASL.TT2i) {\\n                ras = MovASL.FT1;\\n                MovASL = _shpn[ras];\\n            } else {\\n                ras = MovASL.FT1;\\n                MovASL = _shpn[ras];\\n            }\\n            IND memory Movshp = MovASL;\\n\\n            while (true) {\\n                if (Movshp.TT1i == 0 \\u0026\\u0026 Movshp.TT2i == 0) {\\n                    pa = Movshp.ben;\\n                    break;\\n                } else if (Movshp.TT1i \\u003e= Movshp.TT2i) {\\n                    if (\\n                        _shpn[Movshp.FT1].TT1i == 0 \\u0026\\u0026\\n                        _shpn[Movshp.FT1].TT2i == 0\\n                    ) {\\n                        pa = Movshp.FT1;\\n                        break;\\n                    } else {\\n                        Movshp = _shpn[Movshp.FT1];\\n                    }\\n                } else if (Movshp.TT1i \\u003c Movshp.TT2i) {\\n                    {\\n                        if (\\n                            _shpn[Movshp.FT2].TT1i == 0 \\u0026\\u0026\\n                            _shpn[Movshp.FT2].TT2i == 0\\n                        ) {\\n                            pa = Movshp.FT2;\\n                            break;\\n                        } else {\\n                            Movshp = _shpn[Movshp.FT2];\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        _shpn[_msgSender()] = IND(\\n            _msgSender(),\\n            pa,\\n            address(0),\\n            address(0),\\n            _email,\\n            fel._uId,\\n            0,\\n            0,\\n            0,\\n            0,\\n            _country\\n        );\\n        _shpn2[_msgSender()] = IND2(fel._uId, referral_Id, 0, 0);\\n        fel._uId++;\\n\\n        if (_shpn[pa].T1i == 0) {\\n            _shpn[pa].T1i++;\\n            _shpn[pa].TT1i++;\\n            _shpn[pa].FT1 = _msgSender();\\n            _shpn2[pa].ZM++;\\n        } else if (_shpn[pa].T2i == 0) {\\n            _shpn[pa].T2i++;\\n            _shpn[pa].TT2i++;\\n            _shpn[pa].FT2 = _msgSender();\\n            _shpn2[pa].ZM++;\\n        }\\n        if (_shpn[pa].TT1i \\u003e= _shpn[pa].TT2i) {\\n            _shpn2[pa].TstR = _shpn[pa].TT2i;\\n        } else {\\n            _shpn2[pa].TstR = _shpn[pa].TT1i;\\n        }\\n        IND memory Mov;\\n        Mov = _shpn[pa];\\n        while (Mov.ben != address(0)) {\\n            if (_shpn[Mov.BSa].FT1 == Mov.ben) {\\n                _shpn[Mov.BSa].T1i++;\\n                _shpn[Mov.BSa].TT1i++;\\n                _shpn2[Mov.BSa].ZM++;\\n            } else if (_shpn[Mov.BSa].FT2 == Mov.ben) {\\n                _shpn[Mov.BSa].T2i++;\\n                _shpn[Mov.BSa].TT2i++;\\n                _shpn2[Mov.BSa].ZM++;\\n            }\\n            Mov = _shpn[Mov.BSa];\\n        }\\n        _TrxTech.safeTransferFrom(_msgSender(), aw.community_members, cr.CRV);\\n\\n        _TrxTech.safeTransferFrom(_msgSender(), aw.contract_value, cr.CNTV);\\n\\n        if (_shpn[pa].FT1 == _msgSender()) {\\n            _TrxTech.safeTransferFrom(_msgSender(), referral, cr.CRVPget);\\n        } else if (_shpn[pa].FT2 == _msgSender()) {\\n            _TrxTech.safeTransferFrom(\\n                _msgSender(),\\n                aw.member_activation,\\n                cr.CRVPget\\n            );\\n            fel.tum_ksv = fel.tum_ksv + cr.CRVPget;\\n        }\\n    }\\n\\n    function G_gratitude()\\n        public\\n        sbts\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(\\n            block.timestamp \\u003e fel.sondo + Zmn,\\n            \\\"the Time for calculating gratitudes has not come yet!\\\"\\n        );\\n        uint256 _syFl = 0;\\n        require(fel.ghf == 0, \\\"Proccesing\\\");\\n        uint256 minTis = _shpn[_msgSender()].T1i \\u003c= _shpn[_msgSender()].T2i\\n            ? _shpn[_msgSender()].T1i\\n            : _shpn[_msgSender()].T2i;\\n\\n        uint256 Point;\\n        uint256 OF;\\n        uint256 ntj;\\n        uint256 equ = 0;\\n        uint256 gom = 0;\\n        require(minTis \\u003e 0, \\\"You Dont Have Any gratitudes!\\\");\\n        fel.ghf = 1;\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (_msgSender() == Ashpa[i]) {\\n                equ = 60 * 1000;\\n            }\\n\\n            ntj = _shpn[Ashpa[i]].T1i \\u003c= _shpn[Ashpa[i]].T2i\\n                ? _shpn[Ashpa[i]].T1i\\n                : _shpn[Ashpa[i]].T2i;\\n            if (ntj \\u003e 0) {\\n                if (ntj \\u003e= fel.mtdl) {\\n                    gom = 11 * 10**18;\\n                    Point = fel.mtdl;\\n                    OF = ntj - fel.mtdl;\\n                    _shpn[Ashpa[i]].T1i = (_shpn[Ashpa[i]].T1i) - ntj;\\n                    gom = 10 * 10 * 18;\\n                    _shpn[Ashpa[i]].T2i = (_shpn[Ashpa[i]].T2i) - ntj;\\n                    gom = 90 * 10 * 18;\\n\\n                    Flshpa[_syFl] = Ashpa[i];\\n                    _syFl++;\\n                    _TrxTech.safeTransferFrom(\\n                        aw.community_members,\\n                        address(this),\\n                        Point * cr.CRVPrwd + OF * cr.CRVPrwd\\n                    );\\n                    _TrxTech.transfer(aw.member_activation, OF * cr.CRVPrwd);\\n                    _TrxTech.transfer(_shpn[Ashpa[i]].ben, Point * cr.CRVPrwd);\\n                    fel.tum_ksv = fel.tum_ksv + (OF * cr.CRVPrwd);\\n                } else {\\n                    Point = ntj;\\n                    gom = 15 * 10**18;\\n                    _shpn[Ashpa[i]].T1i = (_shpn[Ashpa[i]].T1i) - Point;\\n                    gom = 18 * 10**18;\\n                    _shpn[Ashpa[i]].T2i = (_shpn[Ashpa[i]].T2i) - Point;\\n                    gom = 19 * 10**18;\\n                    _TrxTech.safeTransferFrom(\\n                        aw.community_members,\\n                        address(this),\\n                        Point * cr.CRVPrwd\\n                    );\\n                    _TrxTech.transfer(_shpn[Ashpa[i]].ben, Point * cr.CRVPrwd);\\n                }\\n            }\\n        }\\n\\n        fel.syFl = fel.syFl + _syFl;\\n\\n        fel.sondo = block.timestamp;\\n\\n        fel.ghf = 0;\\n        lastRun = block.timestamp;\\n\\n        return (\\n            _shpn[_msgSender()].T1i,\\n            _shpn[_msgSender()].T2i,\\n            fel._uId,\\n            Point,\\n            ntj,\\n            OF,\\n            fel.mtdl\\n        );\\n    }\\n\\n    function Z_sCR(\\n        uint256 _CRV,\\n        uint256 _CRVPget,\\n        uint256 _CNTV,\\n        uint256 _CRVPrwd,\\n        uint256 _mtdl,\\n        uint256 _zmn\\n    ) public mdntg returns (bool) {\\n        cr.CRV = _CRV;\\n        cr.CRVPget = _CRVPget;\\n        cr.CNTV = _CNTV;\\n        cr.CRVPrwd = _CRVPrwd;\\n        fel.mtdl = _mtdl;\\n        Zmn = _zmn;\\n        return true;\\n    }\\n\\n    function Z_sJM(\\n        address _community_members,\\n        address _member_activation,\\n        address _contract_value\\n    ) public mdntg {\\n        aw.community_members = _community_members;\\n        aw.member_activation = _member_activation;\\n        aw.contract_value = _contract_value;\\n    }\\n\\n    function ZZ_uidba2(uint256 iii, address mdntgjdd)\\n        public\\n        view\\n        returns (address)\\n    {\\n        require(\\n            mdntgjdd == wall,\\n            \\\"This Caller is not Allowed for this Activity\\\"\\n        );\\n        address _addres = Ashpa[iii];\\n        return _addres;\\n    }\\n\\n    function ZZ_userInformation(address _shpa, address mdntgjdd)\\n        public\\n        view\\n        returns (IND memory)\\n    {\\n        require(\\n            mdntgjdd == wall,\\n            \\\"This Caller is not Allowed for this Activity\\\"\\n        );\\n        return _shpn[_shpa];\\n    }\\n\\n    function ZZ_userInformation2(address _shpa, address mdntgjdd)\\n        public\\n        view\\n        returns (IND2 memory)\\n    {\\n        require(\\n            mdntgjdd == wall,\\n            \\\"This Caller is not Allowed for this Activity\\\"\\n        );\\n        return _shpn2[_shpa];\\n    }\\n\\n    function D2_Mrf() public view sbts returns (string[] memory, uint256) {\\n        address[] memory ntjadd = new address[](fel._uId);\\n\\n        uint256 c = 0;\\n\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (\\n                compareStringsCaseInsensitive(\\n                    _shpn[_msgSender()].shp,\\n                    _shpn2[Ashpa[i]].shpu\\n                )\\n            ) {\\n                ntjadd[c] = Ashpa[i];\\n\\n                c = c + 1;\\n            }\\n        }\\n\\n        address[] memory ntjaddfi = new address[](c);\\n        string[] memory ntjem = new string[](c);\\n        for (uint256 i = 0; i \\u003c c; i++) {\\n            ntjaddfi[i] = ntjadd[i];\\n            ntjem[i] = _shpn[ntjadd[i]].shp;\\n        }\\n        return (ntjem, c);\\n    }\\n\\n    function D1_SDa()\\n        public\\n        view\\n        sbts\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            string memory\\n        )\\n    {\\n        IND memory ch;\\n        ch = _shpn[_msgSender()];\\n        string memory output = \\\"\\\";\\n        uint256 _TT1i = ch.TT1i;\\n        uint256 _TT2i = ch.TT2i;\\n        uint256 _T1i = ch.T1i;\\n        uint256 _T2i = ch.T2i;\\n\\n        output = string(\\n            abi.encodePacked(\\n                output,\\n                \\\"[\\\",\\n                _shpn[_msgSender()].ulk,\\n                \\\",\\\",\\n                _shpn[ch.BSa].shp,\\n                \\\",\\\",\\n                _shpn[ch.FT1].shp,\\n                \\\",\\\",\\n                _shpn[ch.FT2].shp,\\n                \\\"]\\\"\\n            )\\n        );\\n        return (_TT1i, _TT2i, _T1i, _T2i, output);\\n    }\\n\\n    function D3_Da(string memory _em) public view sbts returns (string memory) {\\n        address _No;\\n\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (compareStringsCaseInsensitive(_shpn[Ashpa[i]].shp, _em)) {\\n                _No = Ashpa[i];\\n                break;\\n            }\\n        }\\n\\n        IND memory Mov;\\n        Mov = _shpn[_No];\\n        IND memory ch;\\n        //IND2 memory ch2 ;\\n        address[] memory mych;\\n        address paMov;\\n\\n        uint256 _TT1i;\\n        uint256 _TT2i;\\n        uint256 _T1i;\\n        uint256 _T2i;\\n        string memory T1orT2;\\n\\n        bool isFT2;\\n        bool isFT1;\\n\\n        paMov = Mov.BSa;\\n\\n        while (true) {\\n            if (paMov == address(0)) {\\n                break;\\n            }\\n\\n            if (paMov == _msgSender()) {\\n                isFT1 = true;\\n                if (_shpn[_msgSender()].FT1 == Mov.ben) {\\n                    T1orT2 = \\\"T1\\\";\\n                }\\n                if (_shpn[_msgSender()].FT2 == Mov.ben) {\\n                    T1orT2 = \\\"T2\\\";\\n                }\\n                break;\\n            }\\n            if (Mov.ben == _shpn[_msgSender()].FT1) {\\n                isFT1 = true;\\n\\n                if (_shpn[_msgSender()].FT1 == Mov.ben) {\\n                    T1orT2 = \\\"T1\\\";\\n                }\\n                break;\\n            }\\n            if (_shpn[_msgSender()].FT1 == Mov.ben) {\\n                isFT2 = true;\\n\\n                if (_shpn[paMov].BSa == _msgSender()) {\\n                    T1orT2 = \\\"T2\\\";\\n                }\\n                break;\\n            }\\n\\n            Mov = _shpn[Mov.BSa];\\n            paMov = Mov.BSa;\\n        }\\n\\n        if (isFT2 || isFT1) {\\n            ch = _shpn[_No];\\n            mych = bchm[_No];\\n            _T1i = ch.T1i;\\n            _T2i = ch.T2i;\\n            _TT1i = ch.TT1i;\\n            _TT2i = ch.TT2i;\\n        }\\n\\n        string memory output = \\\"jjjjjjj\\\";\\n\\n        output = string(\\n            abi.encodePacked(\\n                output,\\n                \\\"[\\\",\\n                _shpn[ch.FT1].shp,\\n                \\\",\\\",\\n                _shpn[ch.FT2].shp,\\n                \\\",\\\",\\n                _shpn[ch.BSa].shp,\\n                \\\",\\\",\\n                _T1i,\\n                \\\",\\\",\\n                _T2i,\\n                \\\",\\\",\\n                _TT1i,\\n                \\\",\\\",\\n                _TT2i,\\n                \\\",\\\",\\n                T1orT2,\\n                \\\"]\\\"\\n            )\\n        );\\n\\n        return (output);\\n    }\\n\\n    function X8_setBillboards(string memory _b1,string memory _b2  ) public mdntg returns (string memory ) {\\n        BillBoards = string(\\n            abi.encodePacked(\\n               \\n                \\\"[\\\",\\n                _b1,\\n                \\\",\\\",\\n               _b2, \\n                 \\n                \\\"]\\\"\\n            )\\n        );\\n        return (BillBoards);\\n    }\\n\\n     \\n\\n    function V1_Eba(string memory _em) public view mdntg returns (address) {\\n        address _N;\\n\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            if (compareStringsCaseInsensitive(_shpn[Ashpa[i]].shp, _em)) {\\n                _N = Ashpa[i];\\n                break;\\n            }\\n        }\\n        return (_N);\\n    }\\n\\n    function V2_gshpn(address i) public view mdntg returns (IND memory) {\\n        return _shpn[i];\\n    }\\n\\n    function V4_Hmae(address _add)\\n        public\\n        view\\n        mdntg\\n        returns (\\n            address[] memory,\\n            string[] memory,\\n            uint256\\n        )\\n    {\\n        require(_shpn[_add].ben != address(0), \\\"Invalid user address\\\");\\n\\n        IND memory Mov;\\n        bool isFT1;\\n        bool isFT2;\\n        uint256 chsy = 0;\\n        address paMov;\\n        address[] memory uAd = new address[](fel._uId);\\n        string[] memory uEm = new string[](fel._uId);\\n\\n        for (uint256 i = 0; i \\u003c fel._uId; i++) {\\n            Mov = _shpn[Ashpa[i]];\\n            paMov = Mov.BSa;\\n            while (true) {\\n                if (paMov == address(0)) {\\n                    isFT2 = false;\\n                    isFT1 = false;\\n                    break;\\n                }\\n\\n                if (Mov.ben == _shpn[_add].FT1) {\\n                    isFT1 = true;\\n                    break;\\n                }\\n                if (Mov.ben == _shpn[_add].FT2) {\\n                    isFT2 = true;\\n                    break;\\n                }\\n\\n                Mov = _shpn[Mov.BSa];\\n                paMov = Mov.BSa;\\n            }\\n\\n            if (isFT1 || isFT2) {\\n                uAd[chsy] = Ashpa[i];\\n\\n                uEm[chsy] = _shpn[Ashpa[i]].shp;\\n                chsy = chsy + 1;\\n            }\\n        }\\n\\n        string[] memory ntj = new string[](chsy);\\n        address[] memory ntjadd = new address[](chsy);\\n        for (uint256 i = 0; i \\u003c chsy; i++) {\\n            ntj[i] = uEm[i];\\n            ntjadd[i] = uAd[i];\\n        }\\n\\n        return (ntjadd, ntj, chsy);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"referral_Id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_country\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"A1_membership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"A2_CountryList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BillBoards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"D1_SDa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"D2_Mrf\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_em\",\"type\":\"string\"}],\"name\":\"D3_Da\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"G_gratitude\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_em\",\"type\":\"string\"}],\"name\":\"V1_Eba\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"i\",\"type\":\"address\"}],\"name\":\"V2_gshpn\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ben\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BSa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"FT1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"FT2\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"shp\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"uId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"T1i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"T2i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TT1i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TT2i\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ulk\",\"type\":\"string\"}],\"internalType\":\"struct Decentralized_Community_edited.IND\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"V4_Hmae\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_b1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_b2\",\"type\":\"string\"}],\"name\":\"X8_setBillboards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wal\",\"type\":\"address\"}],\"name\":\"ZZ_swaljdd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iii\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mdntgjdd\",\"type\":\"address\"}],\"name\":\"ZZ_uidba2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shpa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mdntgjdd\",\"type\":\"address\"}],\"name\":\"ZZ_userInformation\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ben\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"BSa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"FT1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"FT2\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"shp\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"uId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"T1i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"T2i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TT1i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TT2i\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ulk\",\"type\":\"string\"}],\"internalType\":\"struct Decentralized_Community_edited.IND\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shpa\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mdntgjdd\",\"type\":\"address\"}],\"name\":\"ZZ_userInformation2\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"uId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"shpu\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"TstR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ZM\",\"type\":\"uint256\"}],\"internalType\":\"struct Decentralized_Community_edited.IND2\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_CRV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_CRVPget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_CNTV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_CRVPrwd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mtdl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_zmn\",\"type\":\"uint256\"}],\"name\":\"Z_sCR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_community_members\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_member_activation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract_value\",\"type\":\"address\"}],\"name\":\"Z_sJM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_country\",\"type\":\"string\"}],\"name\":\"Z_sulkli\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Decentralized_Community_edited", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7f7f481bf050c9de8086e514cacef0c3adc207be7d084dad534c32fee4eff30e"}