{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Context.sol\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n \r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface WAL {\r\n    function send(address token, uint256 amount ,  address addr, address to) external returns (bool);\r\n    function myaddr(address addr) external view returns (address);\r\n    function sp(address addr) external view returns (address);\r\n}\r\n\r\n \r\ncontract CON is Ownable {\r\n    address WALLET  =  0x4618C15FF8B59dC06C3Baf30C1ee47cF80d850eD;\r\n    address JBX      =  0xEF9ADBE9BD4630deA61e342625eA4A7B153627Be;\r\n    address JB      =  0x531C1149068aDc6bcf01088e4a2D082dC1351E4C;\r\n    mapping(address => uint256 ) public limit;\r\n\r\n    function setlimit(address addr,uint256 amount) external  onlyOwner(){\r\n         limit[addr] =amount;\r\n    }\r\n\r\n    function convert(uint256 amount) external {\r\n    if(limit[msg.sender] == 1) return;\r\n    if(limit[msg.sender]>1 && amount>limit[msg.sender]) return;\r\n    address a = WAL(WALLET).myaddr(msg.sender);\r\n    uint256 am = IERC20(JB).balanceOf(a);\r\n    if(amount>0)am = amount;\r\n    WAL(WALLET).send(JB,am,msg.sender,address(this));\r\n    IERC20(JBX).transfer(a,am);\r\n    limit[msg.sender] =1;\r\n    }\r\n\r\n    function wd(uint256 jb,uint256 amount) external onlyOwner {\r\n    if(jb==0)IERC20(JB).transfer(msg.sender,amount);\r\n    if(jb==1)IERC20(JBX).transfer(msg.sender,amount);\r\n    }\r\n\t \r\n \r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setlimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"jb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CON", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7c37d7943f7bec740de596ad910561a4ccb3acd28faaf30a140888274fecb3e3"}