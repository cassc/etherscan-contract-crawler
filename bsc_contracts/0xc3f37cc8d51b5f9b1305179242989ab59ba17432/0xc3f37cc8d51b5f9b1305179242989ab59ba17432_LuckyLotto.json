{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LotteryToken.sol\": {\r\n      \"content\": \"// https://t.me/LLPortal\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LuckyLotto is ERC20, Ownable {\\n    uint256 maxSupply = 777_777_777 * 10 ** 18;\\n    uint256 tax = 10;\\n    uint public counter;\\n\\n    mapping(address => bool) public isExcludedFromLimits;\\n\\n    // Staking\\n    address public stakingContract;\\n    address public nftContract;\\n\\n    //Jackpot distribution\\n    uint256 jackpotTokensPercentage = 20;\\n    uint256 tokensToOtherPoolPercentage = 40;\\n    uint256 stakingPercent = 20;\\n\\n    // Lottery pools\\n    struct RewardPools {\\n        uint256 rewardZoneOnePool;\\n        uint256 rewardZoneTwoPool;\\n        uint256 rewardZoneThreePool;\\n        uint256 rewardZoneFourPool;\\n    }\\n\\n    // Taxes\\n    struct TaxDistribution {\\n        uint256 rewardZoneOneTax;\\n        uint256 rewardZoneTwoTax;\\n        uint256 rewardZoneThreeTax;\\n        uint256 rewardZoneFourTax;\\n    }\\n\\n    // Odds\\n    struct Odds {\\n        uint256 maxLotteryNumber;\\n        uint256 zoneOneRange;\\n        uint256 zoneTwoRange;\\n        uint256 zoneThreeRange;\\n        uint256 zoneFourRange;\\n    }\\n\\n    // Multipliers\\n    struct Multipliers {\\n        uint256 zoneOneMultiplier;\\n        uint256 zoneTwoMultiplier;\\n        uint256 zoneThreeMultiplier;\\n        uint256 zoneFourMultiplier;\\n    }\\n    struct MultiplierThreshhold {\\n        uint256 zoneMultiplierMinimum;\\n        uint256 zoneOneMultiplierThreshhold;\\n        uint256 zoneTwoMultiplierThreshhold;\\n        uint256 zoneThreeMultiplierThreshhold;\\n    }\\n\\n    struct Lottery {\\n        address[] participants;\\n        mapping(address => uint[]) numbers;\\n        mapping(address => uint) taxed;\\n        mapping(address => uint) playerLuckyNumber;\\n        mapping(address => uint) amountWon;\\n        uint256 totalFeesAccumulated;\\n        address[] zoneOne;\\n        address[] zoneTwo;\\n        address[] zoneThree;\\n        address[] zoneFour;\\n        uint256 winningNumber;\\n    }\\n\\n    Multipliers public multipliers;\\n    RewardPools public rewardPools;\\n    MultiplierThreshhold public multiplierThreshhold;\\n    Odds public odds;\\n    TaxDistribution public taxes;\\n\\n    mapping(uint => Lottery) public interval;\\n    mapping(address => uint256) private balances;\\n    mapping(address => bool) private authorized;\\n\\n    IUniswapV2Router02 public uniswapV2Router;\\n    address public uniswapV2Pair;\\n\\n    event WinningNumber(uint256 _winningNumber);\\n    event NewBuy(uint256 interval, address buyer, uint256[] luckyNumbers);\\n    event RewardsDistributed(\\n        uint256 interval,\\n        uint256 zone,\\n        uint256 amount,\\n        uint256 amountOfWinners\\n    );\\n    event NoJackpotWinner(\\n        uint256 jackpotTaxThisInterval,\\n        uint256 tokensStayingInJackpot,\\n        uint256 stakingTokens,\\n        uint256 tokensToOtherPool,\\n        uint256 tokensToBurn\\n    );\\n    event JackpotWinner(address[] winners, uint256 amount);\\n\\n    modifier onlyAuth() {\\n        require(authorized[msg.sender], \\\"Not authorized to do this\\\");\\n        _;\\n    }\\n\\n    constructor() ERC20(\\\"LuckyLottoBSC\\\", \\\"L0TT0\\\") {\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\\n        );\\n\\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        uniswapV2Router = _uniswapV2Router;\\n        uniswapV2Pair = _uniswapV2Pair;\\n\\n        balances[msg.sender] = maxSupply;\\n\\n        taxes.rewardZoneOneTax = 10;\\n        taxes.rewardZoneTwoTax = 20;\\n        taxes.rewardZoneThreeTax = 30;\\n        taxes.rewardZoneFourTax = 40;\\n\\n        multipliers.zoneOneMultiplier = 1;\\n        multipliers.zoneTwoMultiplier = 3;\\n        multipliers.zoneThreeMultiplier = 6;\\n        multipliers.zoneFourMultiplier = 12;\\n\\n        odds.maxLotteryNumber = 5000;\\n        odds.zoneOneRange = 1;\\n        odds.zoneTwoRange = 50;\\n        odds.zoneThreeRange = 100;\\n        odds.zoneFourRange = 2500;\\n\\n        multiplierThreshhold.zoneMultiplierMinimum = 0.01 ether;\\n        multiplierThreshhold.zoneOneMultiplierThreshhold = 0.02 ether;\\n        multiplierThreshhold.zoneTwoMultiplierThreshhold = 0.05 ether;\\n        multiplierThreshhold.zoneThreeMultiplierThreshhold = 0.1 ether;\\n\\n        authorized[msg.sender] = true;\\n        authorized[0xaEf327143b17489A01D1f9928Ca052B87C3eF324] = true;\\n        isExcludedFromLimits[owner()] = true;\\n        isExcludedFromLimits[address(this)] = true;\\n        isExcludedFromLimits[uniswapV2Pair] = true;\\n        isExcludedFromLimits[stakingContract] = true;\\n        isExcludedFromLimits[nftContract] = true;\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"ERC20: transfer must be greater than 0\\\");\\n        require(\\n            balances[from] >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n\\n        uint256 fees;\\n        Lottery storage lottery = interval[counter];\\n\\n        if (\\n            from == owner() ||\\n            from == address(this) ||\\n            from == nftContract ||\\n            from == stakingContract ||\\n            to == owner() ||\\n            to == nftContract ||\\n            to == stakingContract\\n        ) {\\n            transferNormal(from, to, amount);\\n        } else if (to == uniswapV2Pair || from == uniswapV2Pair) {\\n            fees = (amount * tax) / 100;\\n\\n            uint newAmount = amount - fees;\\n            transferNormal(from, address(this), fees);\\n            transferNormal(from, to, newAmount);\\n            lottery.totalFeesAccumulated += fees;\\n            lottery.taxed[to] += fees;\\n\\n            rewardPools.rewardZoneOnePool += ((fees * taxes.rewardZoneOneTax) /\\n                100);\\n            rewardPools.rewardZoneTwoPool += ((fees * taxes.rewardZoneTwoTax) /\\n                100);\\n            rewardPools.rewardZoneThreePool += ((fees *\\n                taxes.rewardZoneThreeTax) / 100);\\n            rewardPools.rewardZoneFourPool += ((fees *\\n                taxes.rewardZoneFourTax) / 100);\\n        } else {\\n            transferNormal(from, to, amount);\\n        }\\n        if (from == uniswapV2Pair) {\\n            bool alreadyPurchased = checkIfAlreadyPurchased(counter, to);\\n            if (!alreadyPurchased) lottery.participants.push(to);\\n\\n            amount = getAmountInBnb(amount);\\n\\n            if (amount >= multiplierThreshhold.zoneMultiplierMinimum) {\\n                if (\\n                    amount <= multiplierThreshhold.zoneOneMultiplierThreshhold\\n                ) {\\n                    for (uint i; i < multipliers.zoneOneMultiplier; i++) {\\n                        lottery.numbers[to].push(\\n                            getPseudoRandomNumber(to, amount, i)\\n                        );\\n                    }\\n                    emit NewBuy(counter, to, lottery.numbers[to]);\\n                } else if (\\n                    amount > multiplierThreshhold.zoneOneMultiplierThreshhold &&\\n                    amount <= multiplierThreshhold.zoneTwoMultiplierThreshhold\\n                ) {\\n                    for (uint i; i < multipliers.zoneTwoMultiplier; i++) {\\n                        lottery.numbers[to].push(\\n                            getPseudoRandomNumber(to, amount, i)\\n                        );\\n                    }\\n                    emit NewBuy(counter, to, lottery.numbers[to]);\\n                } else if (\\n                    amount > multiplierThreshhold.zoneTwoMultiplierThreshhold &&\\n                    amount <= multiplierThreshhold.zoneThreeMultiplierThreshhold\\n                ) {\\n                    for (uint i; i < multipliers.zoneThreeMultiplier; i++) {\\n                        lottery.numbers[to].push(\\n                            getPseudoRandomNumber(to, amount, i)\\n                        );\\n                    }\\n                    emit NewBuy(counter, to, lottery.numbers[to]);\\n                } else {\\n                    for (uint i; i < multipliers.zoneFourMultiplier; i++) {\\n                        lottery.numbers[to].push(\\n                            getPseudoRandomNumber(to, amount, i)\\n                        );\\n                    }\\n                    emit NewBuy(counter, to, lottery.numbers[to]);\\n                }\\n            }\\n        }\\n    }\\n\\n    function transferNormal(address from, address to, uint256 amount) internal {\\n        unchecked {\\n            balances[from] -= amount;\\n            balances[to] += amount;\\n        }\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    function endInterval(uint256 _winningNumber) external onlyAuth {\\n        uint256 winningNumber = _winningNumber % odds.maxLotteryNumber;\\n        pushWinners(winningNumber);\\n        handlePayments();\\n        emit WinningNumber(winningNumber);\\n    }\\n\\n    function pushWinners(uint256 _winningNumber) internal {\\n        Lottery storage lottery = interval[counter];\\n        uint len = lottery.participants.length;\\n        lottery.winningNumber = _winningNumber;\\n        for (uint i; i < len; i++) {\\n            uint256[] memory playerNumbers = lottery.numbers[\\n                lottery.participants[i]\\n            ];\\n            getIntervalPrize(lottery.participants[i], playerNumbers, counter);\\n        }\\n    }\\n\\n    function getIntervalPrize(\\n        address _player,\\n        uint[] memory _playerNumbers,\\n        uint _interval\\n    ) internal {\\n        Lottery storage lottery = interval[_interval];\\n        uint256 winningNumber = lottery.winningNumber;\\n\\n        uint playersClosestNumber = odds.maxLotteryNumber;\\n        for (uint i; i < _playerNumbers.length; i++) {\\n            uint range = getRange(_playerNumbers[i], winningNumber);\\n            if (range < playersClosestNumber) {\\n                playersClosestNumber = range;\\n                lottery.playerLuckyNumber[_player] = _playerNumbers[i];\\n            }\\n        }\\n\\n        if (playersClosestNumber < odds.zoneOneRange) {\\n            lottery.zoneOne.push(_player);\\n        } else if (playersClosestNumber < odds.zoneTwoRange) {\\n            lottery.zoneTwo.push(_player);\\n        } else if (playersClosestNumber < odds.zoneThreeRange) {\\n            lottery.zoneThree.push(_player);\\n        } else if (playersClosestNumber < odds.zoneFourRange) {\\n            lottery.zoneFour.push(_player);\\n        }\\n    }\\n\\n    function getRange(\\n        uint _betNumber,\\n        uint _winningNumber\\n    ) public pure returns (uint256) {\\n        uint256 range = _winningNumber >= _betNumber\\n            ? _winningNumber - _betNumber\\n            : _betNumber - _winningNumber;\\n        return range;\\n    }\\n\\n    function handlePayments() internal {\\n        payZoneOne();\\n        payZoneTwo();\\n        payZoneThree();\\n        payZoneFour();\\n        counter++;\\n    }\\n\\n    function payZoneOne() internal {\\n        Lottery storage lottery = interval[counter];\\n\\n        uint jackpotTaxThisInterval = (lottery.totalFeesAccumulated *\\n            taxes.rewardZoneOneTax) / 100;\\n\\n        address[] memory zoneOneWinners = getZoneOne(counter);\\n\\n        if (zoneOneWinners.length > 0) {\\n            uint256 zoneOnePot = jackpotTaxThisInterval / zoneOneWinners.length;\\n            for (uint i; i < zoneOneWinners.length; i++) {\\n                balances[zoneOneWinners[i]] += zoneOnePot;\\n                lottery.amountWon[zoneOneWinners[i]] = zoneOnePot;\\n            }\\n            rewardPools.rewardZoneOnePool = 0;\\n            emit JackpotWinner(zoneOneWinners, zoneOnePot);\\n        } else {\\n            uint tokensStayingInJackpot = (jackpotTaxThisInterval *\\n                jackpotTokensPercentage) / 100;\\n            uint stakingTokens = (jackpotTaxThisInterval * stakingPercent) /\\n                100;\\n            uint tokensToOtherPool = (jackpotTaxThisInterval *\\n                tokensToOtherPoolPercentage) / 100;\\n\\n            uint tokensToBurn = jackpotTaxThisInterval -\\n                tokensStayingInJackpot -\\n                stakingTokens -\\n                tokensToOtherPool;\\n\\n            balances[address(this)] -= stakingTokens;\\n            balances[stakingContract] += stakingTokens;\\n\\n            rewardPools.rewardZoneFourPool += tokensToOtherPool;\\n            balances[address(this)] -= tokensToBurn;\\n            balances[address(0)] += tokensToBurn;\\n            rewardPools.rewardZoneOnePool -= (stakingTokens +\\n                tokensToOtherPool +\\n                tokensToBurn);\\n            emit NoJackpotWinner(\\n                jackpotTaxThisInterval,\\n                tokensStayingInJackpot,\\n                stakingTokens,\\n                tokensToOtherPool,\\n                tokensToBurn\\n            );\\n        }\\n    }\\n\\n    function payZoneTwo() internal {\\n        Lottery storage lottery = interval[counter];\\n\\n        address[] memory zoneTwoWinners = getZoneTwo(counter);\\n        if (zoneTwoWinners.length > 0) {\\n            uint256 zoneTwoPot = rewardPools.rewardZoneTwoPool /\\n                zoneTwoWinners.length;\\n            for (uint i; i < zoneTwoWinners.length; i++) {\\n                balances[zoneTwoWinners[i]] += zoneTwoPot;\\n                lottery.amountWon[zoneTwoWinners[i]] = zoneTwoPot;\\n            }\\n            emit RewardsDistributed(\\n                counter,\\n                2,\\n                rewardPools.rewardZoneTwoPool,\\n                zoneTwoWinners.length\\n            );\\n            rewardPools.rewardZoneTwoPool = 0;\\n        }\\n    }\\n\\n    function payZoneThree() internal {\\n        Lottery storage lottery = interval[counter];\\n\\n        address[] memory zoneThreeWinners = getZoneThree(counter);\\n        if (zoneThreeWinners.length > 0) {\\n            uint256 zoneThreePot = rewardPools.rewardZoneThreePool /\\n                zoneThreeWinners.length;\\n            for (uint i; i < zoneThreeWinners.length; i++) {\\n                balances[zoneThreeWinners[i]] += zoneThreePot;\\n                lottery.amountWon[zoneThreeWinners[i]] = zoneThreePot;\\n            }\\n            emit RewardsDistributed(\\n                counter,\\n                3,\\n                rewardPools.rewardZoneThreePool,\\n                zoneThreeWinners.length\\n            );\\n            rewardPools.rewardZoneThreePool = 0;\\n        }\\n    }\\n\\n    function payZoneFour() internal {\\n        Lottery storage lottery = interval[counter];\\n        uint256 totalFeesThisInterval = getTotalFeesAccumulatedByInterval(\\n            counter\\n        );\\n\\n        address[] memory zoneFourWinners = getZoneFour(counter);\\n        if (zoneFourWinners.length > 0) {\\n            for (uint i; i < zoneFourWinners.length; i++) {\\n                uint shareInPool = (getPlayerTaxByInterval(\\n                    counter,\\n                    zoneFourWinners[i]\\n                ) * 100) / totalFeesThisInterval;\\n\\n                uint256 amountToPay = (rewardPools.rewardZoneFourPool / 100) *\\n                    shareInPool;\\n\\n                balances[zoneFourWinners[i]] += (amountToPay);\\n                lottery.amountWon[zoneFourWinners[i]] = amountToPay;\\n            }\\n            emit RewardsDistributed(\\n                counter,\\n                4,\\n                rewardPools.rewardZoneFourPool,\\n                zoneFourWinners.length\\n            );\\n            rewardPools.rewardZoneFourPool = 0;\\n        }\\n    }\\n\\n    // Helper Functions\\n    function getPseudoRandomNumber(\\n        address _buyer,\\n        uint256 _amount,\\n        uint256 _index\\n    ) public view returns (uint) {\\n        uint randomHash = uint(\\n            keccak256(\\n                abi.encodePacked(\\n                    block.prevrandao,\\n                    block.timestamp,\\n                    uint256(uint160(_buyer)),\\n                    _amount,\\n                    _index\\n                )\\n            )\\n        );\\n        return randomHash % odds.maxLotteryNumber;\\n    }\\n\\n    // Getter Functions\\n    function setNewTaxes(uint256[4] memory _newTaxes) external onlyOwner {\\n        uint256 total;\\n        for (uint256 i; i < _newTaxes.length; i++) {\\n            total += _newTaxes[i];\\n        }\\n        require(total == 100, \\\"Total needs to add up to 100\\\");\\n        taxes.rewardZoneOneTax = _newTaxes[0];\\n        taxes.rewardZoneTwoTax = _newTaxes[1];\\n        taxes.rewardZoneThreeTax = _newTaxes[2];\\n        taxes.rewardZoneFourTax = _newTaxes[3];\\n    }\\n\\n    function getZoneOne(\\n        uint256 _interval\\n    ) public view returns (address[] memory) {\\n        Lottery storage lottery = interval[_interval];\\n        return lottery.zoneOne;\\n    }\\n\\n    function getZoneTwo(\\n        uint256 _interval\\n    ) public view returns (address[] memory) {\\n        Lottery storage lottery = interval[_interval];\\n        return lottery.zoneTwo;\\n    }\\n\\n    function getZoneThree(\\n        uint256 _interval\\n    ) public view returns (address[] memory) {\\n        Lottery storage lottery = interval[_interval];\\n        return lottery.zoneThree;\\n    }\\n\\n    function getZoneFour(\\n        uint256 _interval\\n    ) public view returns (address[] memory) {\\n        Lottery storage lottery = interval[_interval];\\n        return lottery.zoneFour;\\n    }\\n\\n    function getPlayerNumbersByInterval(\\n        uint _index,\\n        address _player\\n    ) public view returns (uint[] memory) {\\n        return interval[_index].numbers[_player];\\n    }\\n\\n    function getIntervalParticipants(\\n        uint _index\\n    ) public view returns (address[] memory) {\\n        return interval[_index].participants;\\n    }\\n\\n    function getIntervalLuckyNumber(\\n        uint256 _index,\\n        address _player\\n    ) public view returns (uint256) {\\n        return interval[_index].playerLuckyNumber[_player];\\n    }\\n\\n    function getPlayerTaxByInterval(\\n        uint256 _interval,\\n        address _player\\n    ) public view returns (uint256) {\\n        return interval[_interval].taxed[_player];\\n    }\\n\\n    function getTotalFeesAccumulatedByInterval(\\n        uint256 _interval\\n    ) public view returns (uint256) {\\n        return interval[_interval].totalFeesAccumulated;\\n    }\\n\\n    function checkIfAlreadyPurchased(\\n        uint256 _interval,\\n        address _player\\n    ) public view returns (bool) {\\n        Lottery storage lottery = interval[_interval];\\n        uint len = lottery.participants.length;\\n        bool exists;\\n        for (uint i; i < len; i++) {\\n            if (lottery.participants[i] == _player) exists = true;\\n        }\\n        return exists;\\n    }\\n\\n    function balanceOf(\\n        address _address\\n    ) public view override returns (uint256) {\\n        return balances[_address];\\n    }\\n\\n    function getAmountInBnb(uint256 _amount) public view returns (uint256) {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        uint[] memory result = uniswapV2Router.getAmountsOut(_amount, path);\\n        return ((result[1] / (100 - tax)) * 100);\\n    }\\n\\n    function getAmountWon(\\n        uint256 _interval,\\n        address _player\\n    ) public view returns (uint256) {\\n        return interval[_interval].amountWon[_player];\\n    }\\n\\n    function getJackpotPool() external view returns (uint256) {\\n        return rewardPools.rewardZoneOnePool;\\n    }\\n\\n    // Setter Functions\\n    function setOdds(Odds memory _odds) public onlyAuth {\\n        odds.maxLotteryNumber = _odds.maxLotteryNumber;\\n        odds.zoneOneRange = _odds.zoneOneRange;\\n        odds.zoneTwoRange = _odds.zoneTwoRange;\\n        odds.zoneThreeRange = _odds.zoneThreeRange;\\n        odds.zoneFourRange = _odds.zoneFourRange;\\n    }\\n\\n    function addToRewardPool(\\n        uint256 _amountToZoneOne,\\n        uint256 _amountToZoneTwo\\n    ) external {\\n        this.transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amountToZoneTwo + _amountToZoneOne\\n        );\\n        rewardPools.rewardZoneOnePool += _amountToZoneOne;\\n        rewardPools.rewardZoneTwoPool += _amountToZoneTwo;\\n    }\\n\\n    function updateStakingPercent(uint256 _newPercent) external onlyAuth {\\n        stakingPercent = _newPercent;\\n    }\\n\\n    function updateNFTContract(address _newAddress) external onlyOwner {\\n        nftContract = _newAddress;\\n        isExcludedFromLimits[_newAddress] = true;\\n    }\\n\\n    function burnTokens(uint256 _amountToBurn) external {\\n        super._burn(msg.sender, _amountToBurn);\\n    }\\n\\n    function setStakingContract(address _address) external onlyOwner {\\n        stakingContract = _address;\\n        isExcludedFromLimits[_address] = true;\\n    }\\n\\n    function setAuthorized(address _address, bool _isAuth) external onlyOwner {\\n        authorized[_address] = _isAuth;\\n    }\\n\\n    function setMultipliers(Multipliers memory _multipliers) public onlyAuth {\\n        multipliers.zoneOneMultiplier = _multipliers.zoneOneMultiplier;\\n        multipliers.zoneTwoMultiplier = _multipliers.zoneTwoMultiplier;\\n        multipliers.zoneThreeMultiplier = _multipliers.zoneThreeMultiplier;\\n        multipliers.zoneFourMultiplier = _multipliers.zoneFourMultiplier;\\n    }\\n\\n    function setMultiplierThreshhold(\\n        MultiplierThreshhold memory _multiplierThreshhold\\n    ) public onlyAuth {\\n        multiplierThreshhold.zoneMultiplierMinimum = _multiplierThreshhold\\n            .zoneMultiplierMinimum;\\n        multiplierThreshhold.zoneOneMultiplierThreshhold = _multiplierThreshhold\\n            .zoneOneMultiplierThreshhold;\\n        multiplierThreshhold.zoneTwoMultiplierThreshhold = _multiplierThreshhold\\n            .zoneTwoMultiplierThreshhold;\\n        multiplierThreshhold\\n            .zoneThreeMultiplierThreshhold = _multiplierThreshhold\\n            .zoneThreeMultiplierThreshhold;\\n    }\\n\\n    function updateLPPair(address _address) external onlyAuth {\\n        uniswapV2Pair = _address;\\n    }\\n\\n    function updateTax(uint256 _newTax) external onlyAuth {\\n        tax = _newTax;\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint amount0,\\n        uint amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint);\\n\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountOut);\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"JackpotWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"luckyNumbers\",\"type\":\"uint256[]\"}],\"name\":\"NewBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jackpotTaxThisInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensStayingInJackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensToOtherPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensToBurn\",\"type\":\"uint256\"}],\"name\":\"NoJackpotWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"zone\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfWinners\",\"type\":\"uint256\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_winningNumber\",\"type\":\"uint256\"}],\"name\":\"WinningNumber\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToZoneOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToZoneTwo\",\"type\":\"uint256\"}],\"name\":\"addToRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToBurn\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"checkIfAlreadyPurchased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winningNumber\",\"type\":\"uint256\"}],\"name\":\"endInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getAmountInBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getAmountWon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getIntervalLuckyNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getIntervalParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJackpotPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerNumbersByInterval\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerTaxByInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPseudoRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winningNumber\",\"type\":\"uint256\"}],\"name\":\"getRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"getTotalFeesAccumulatedByInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"getZoneFour\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"getZoneOne\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"getZoneThree\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"getZoneTwo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFeesAccumulated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierThreshhold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"zoneMultiplierMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneOneMultiplierThreshhold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneTwoMultiplierThreshhold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneThreeMultiplierThreshhold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"zoneOneMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneTwoMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneThreeMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneFourMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"odds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLotteryNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneOneRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneTwoRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneThreeRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneFourRange\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardZoneOnePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardZoneTwoPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardZoneThreePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardZoneFourPool\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAuth\",\"type\":\"bool\"}],\"name\":\"setAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"zoneMultiplierMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneOneMultiplierThreshhold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneTwoMultiplierThreshhold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneThreeMultiplierThreshhold\",\"type\":\"uint256\"}],\"internalType\":\"struct LuckyLotto.MultiplierThreshhold\",\"name\":\"_multiplierThreshhold\",\"type\":\"tuple\"}],\"name\":\"setMultiplierThreshhold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"zoneOneMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneTwoMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneThreeMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneFourMultiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct LuckyLotto.Multipliers\",\"name\":\"_multipliers\",\"type\":\"tuple\"}],\"name\":\"setMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_newTaxes\",\"type\":\"uint256[4]\"}],\"name\":\"setNewTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxLotteryNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneOneRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneTwoRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneThreeRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zoneFourRange\",\"type\":\"uint256\"}],\"internalType\":\"struct LuckyLotto.Odds\",\"name\":\"_odds\",\"type\":\"tuple\"}],\"name\":\"setOdds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardZoneOneTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardZoneTwoTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardZoneThreeTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardZoneFourTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateLPPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercent\",\"type\":\"uint256\"}],\"name\":\"updateStakingPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTax\",\"type\":\"uint256\"}],\"name\":\"updateTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LuckyLotto", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}