{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/TradeHubICO.sol\r\n\r\n\r\n// dev: @OxWeb3Crypto\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract PresaleContract is ReentrancyGuard, Ownable, Pausable {\r\n    struct User {\r\n        //token colectionati\r\n        uint256 tokens_amount;\r\n        //usdt depozitat\r\n        uint256 usdt_deposited;\r\n        //daca a dat claim sau nu\r\n        bool has_claimed;\r\n    }\r\n\r\n    struct Round {\r\n        //adresa portofel in care sa ajunga bani\r\n        address payable wallet;\r\n        //cati token cumperi cu 1 usdt\r\n        uint256 usdt_to_token_rate;\r\n        //usdt + bnb in usdt\r\n        uint256 usdt_round_raised;\r\n        //usdt + bnb in usdt\r\n        uint256 usdt_round_cap;\r\n    }\r\n\r\n    IERC20Metadata public usdt_interface;\r\n    IERC20Metadata public busd_interface;\r\n    IERC20Metadata public token_interface;\r\n    AggregatorV3Interface internal price_feed;\r\n\r\n    mapping(address => User) public users_list;\r\n    Round[] public round_list;\r\n\r\n    uint8 public current_round_index;\r\n    bool public presale_ended;\r\n\r\n    event Deposit(address indexed _user_wallet, uint indexed _pay_method, uint _user_usdt_trans, uint _user_tokens_trans);\r\n    //  _pay_method = ( 1:bnb, 2:bnb_card, 3:usdt )\r\n\r\n    constructor(\r\n        address oracle_, \r\n        address usdt_, \r\n        address busd_, \r\n        address token_,\r\n        address payable wallet_,\r\n        uint256 usdt_to_token_rate_,\r\n        uint256 usdt_round_cap_\r\n    ) {\r\n        usdt_interface = IERC20Metadata(usdt_);\r\n        busd_interface = IERC20Metadata(busd_);\r\n        token_interface = IERC20Metadata(token_);\r\n        price_feed = AggregatorV3Interface(oracle_);\r\n\r\n        current_round_index = 0;\r\n        presale_ended = false;\r\n\r\n        round_list.push(\r\n            Round(wallet_, usdt_to_token_rate_, 0, usdt_round_cap_ * (10**6))\r\n        );\r\n    }\r\n\r\n    modifier canPurchase(address user, uint256 amount) {\r\n        require(user != address(0), \"PURCHASE ERROR: User address is null!\");\r\n        require(amount > 0, \"PURCHASE ERROR: Amount is 0!\");\r\n        require(presale_ended == false, \"PURCHASE ERROR: Presale has ended!\");\r\n        _;\r\n    }\r\n\r\n    function get_bnb_in_usd() internal view returns (uint256) {\r\n        (, int256 price, , , ) = price_feed.latestRoundData();\r\n        price = price * 1e10;\r\n        return uint256(price);\r\n    }\r\n\r\n    function buy_with_usdt(uint256 amount_) external nonReentrant whenNotPaused canPurchase(_msgSender(), amount_) returns (bool) {\r\n        uint256 amount_in_usdt = amount_;\r\n        require(round_list[current_round_index].usdt_round_raised + amount_in_usdt < round_list[current_round_index].usdt_round_cap,\r\n            \"BUY ERROR : Too much money already deposited.\"\r\n        );\r\n\r\n        uint256 allowance = usdt_interface.allowance(msg.sender, address(this));\r\n\r\n        require(amount_ <= allowance, \"BUY ERROR: Allowance is too small!\");\r\n\r\n        (bool success_receive, ) = address(usdt_interface).call(\r\n            abi.encodeWithSignature(\r\n                \"transferFrom(address,address,uint256)\",\r\n                msg.sender,\r\n                round_list[current_round_index].wallet,\r\n                amount_in_usdt\r\n            )\r\n        );\r\n\r\n        require(success_receive, \"BUY ERROR: Transaction has failed!\");\r\n\r\n        uint256 amount_in_tokens = (amount_in_usdt * round_list[current_round_index].usdt_to_token_rate) * (10 ** token_interface.decimals()) / (10 ** usdt_interface.decimals());\r\n\r\n        users_list[_msgSender()].usdt_deposited += amount_in_usdt;\r\n        users_list[_msgSender()].tokens_amount += amount_in_tokens;\r\n\r\n        round_list[current_round_index].usdt_round_raised += amount_in_usdt;\r\n\r\n        emit Deposit(_msgSender(), 3, amount_in_usdt, amount_in_tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function buy_with_busd(uint256 amount_) external nonReentrant whenNotPaused canPurchase(_msgSender(), amount_) returns (bool) {\r\n        uint256 amount_in_usdt = amount_;\r\n        require(round_list[current_round_index].usdt_round_raised + amount_in_usdt < round_list[current_round_index].usdt_round_cap,\r\n            \"BUY ERROR : Too much money already deposited.\"\r\n        );\r\n\r\n        uint256 allowance = busd_interface.allowance(msg.sender, address(this));\r\n\r\n        require(amount_ <= allowance, \"BUY ERROR: Allowance is too small!\");\r\n\r\n        (bool success_receive, ) = address(busd_interface).call(\r\n            abi.encodeWithSignature(\r\n                \"transferFrom(address,address,uint256)\",\r\n                msg.sender,\r\n                round_list[current_round_index].wallet,\r\n                amount_in_usdt\r\n            )\r\n        );\r\n\r\n        require(success_receive, \"BUY ERROR: Transaction has failed!\");\r\n\r\n        uint256 amount_in_tokens = (amount_in_usdt * round_list[current_round_index].usdt_to_token_rate) * (10 ** token_interface.decimals()) / (10 ** busd_interface.decimals());\r\n\r\n        users_list[_msgSender()].usdt_deposited += amount_in_usdt;\r\n        users_list[_msgSender()].tokens_amount += amount_in_tokens;\r\n\r\n        round_list[current_round_index].usdt_round_raised += amount_in_usdt;\r\n\r\n        emit Deposit(_msgSender(), 3, amount_in_usdt, amount_in_tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function buy_with_bnb() external payable nonReentrant whenNotPaused canPurchase(_msgSender(), msg.value) returns (bool) {\r\n\r\n        uint256 amount_in_usdt = (msg.value * get_bnb_in_usd()) / 1e30;\r\n        require(round_list[current_round_index].usdt_round_raised + amount_in_usdt < round_list[current_round_index].usdt_round_cap,\r\n            \"BUY ERROR : Too much money already deposited.\"\r\n        );\r\n\r\n        uint256 amount_in_tokens = (amount_in_usdt * round_list[current_round_index].usdt_to_token_rate) * (10 ** token_interface.decimals()) / (10 ** 6);\r\n\r\n        users_list[_msgSender()].usdt_deposited += amount_in_usdt;\r\n        users_list[_msgSender()].tokens_amount += amount_in_tokens;\r\n\r\n        round_list[current_round_index].usdt_round_raised += amount_in_usdt;\r\n\r\n        (bool sent,) = round_list[current_round_index].wallet.call{value: msg.value}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n\r\n        emit Deposit(_msgSender(), 1, amount_in_usdt, amount_in_tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function buy_with_bnb_wert(address user) external payable nonReentrant whenNotPaused canPurchase(user, msg.value) returns (bool) {\r\n\r\n        uint256 amount_in_usdt = (msg.value * get_bnb_in_usd()) / 1e30;\r\n        require( round_list[current_round_index].usdt_round_raised + amount_in_usdt < round_list[current_round_index].usdt_round_cap,\r\n            \"BUY ERROR : Too much money already deposited.\"\r\n        );\r\n\r\n        uint256 amount_in_tokens = (amount_in_usdt * round_list[current_round_index].usdt_to_token_rate) * (10 ** token_interface.decimals()) / (10 ** 6);\r\n\r\n        users_list[user].usdt_deposited += amount_in_usdt;\r\n        users_list[user].tokens_amount += amount_in_tokens;\r\n\r\n        round_list[current_round_index].usdt_round_raised += amount_in_usdt;\r\n\r\n        (bool sent,) = round_list[current_round_index].wallet.call{value: msg.value}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n\r\n        emit Deposit(user, 2, amount_in_usdt, amount_in_tokens);\r\n\r\n        return true;\r\n    }\r\n\r\n    function claim_tokens() external returns (bool) {\r\n        require(presale_ended, \"CLAIM ERROR : Presale has not ended!\");\r\n        require(users_list[_msgSender()].tokens_amount != 0, \"CLAIM ERROR : User already claimed tokens!\");\r\n        require(!users_list[_msgSender()].has_claimed, \"CLAIM ERROR : User already claimed tokens\");\r\n\r\n        uint256 tokens_to_claim = users_list[_msgSender()].tokens_amount;\r\n        users_list[_msgSender()].tokens_amount = 0;\r\n        users_list[_msgSender()].has_claimed = true;\r\n\r\n        (bool success, ) = address(token_interface).call(\r\n            abi.encodeWithSignature(\r\n                \"transfer(address,uint256)\",\r\n                msg.sender,\r\n                tokens_to_claim\r\n            )\r\n        );\r\n        require(success, \"CLAIM ERROR : Couldn't transfer tokens to client!\");\r\n\r\n        return true;\r\n    }\r\n\r\n    function start_next_round(address payable wallet_, uint256 usdt_to_token_rate_, uint256 usdt_round_cap_) external onlyOwner {\r\n        current_round_index = current_round_index + 1;\r\n\r\n        round_list.push(\r\n            Round(wallet_, usdt_to_token_rate_, 0, usdt_round_cap_ * (10**6))\r\n        );\r\n    }\r\n\r\n    function set_current_round(address payable wallet_, uint256 usdt_to_token_rate_, uint256 usdt_round_cap_) external onlyOwner {\r\n        round_list[current_round_index].wallet = wallet_;\r\n        round_list[current_round_index].usdt_to_token_rate = usdt_to_token_rate_;\r\n        round_list[current_round_index].usdt_round_cap = usdt_round_cap_ * (10**6);\r\n    }\r\n\r\n    function get_current_round() external view returns (address, uint256, uint256, uint256){\r\n        return (\r\n            round_list[current_round_index].wallet,\r\n            round_list[current_round_index].usdt_to_token_rate,\r\n            round_list[current_round_index].usdt_round_raised,\r\n            round_list[current_round_index].usdt_round_cap\r\n        );\r\n    }\r\n\r\n    function get_current_raised() external view returns (uint256) {\r\n        return round_list[current_round_index].usdt_round_raised;\r\n    }\r\n\r\n    function end_presale() external onlyOwner {\r\n        presale_ended = true;\r\n    }\r\n\r\n    function withdrawToken(address tokenContract, uint256 amount) external onlyOwner {\r\n        (bool success, ) = address(tokenContract).call(\r\n            abi.encodeWithSignature(\r\n                \"transfer(address,uint256)\",\r\n                msg.sender,\r\n                amount\r\n            )\r\n        );\r\n        require(success, \"TOKEN WITHDRAW ERROR : Couldn't transfer tokens!\");\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"busd_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"wallet_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdt_to_token_rate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt_round_cap_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user_wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_pay_method\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_user_usdt_trans\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_user_tokens_trans\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"busd_interface\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy_with_bnb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"buy_with_bnb_wert\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"buy_with_busd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"buy_with_usdt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim_tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current_round_index\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end_presale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_current_raised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_current_round\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale_ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round_list\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdt_to_token_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt_round_raised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt_round_cap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdt_to_token_rate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt_round_cap_\",\"type\":\"uint256\"}],\"name\":\"set_current_round\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdt_to_token_rate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt_round_cap_\",\"type\":\"uint256\"}],\"name\":\"start_next_round\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_interface\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt_interface\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt_deposited\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"has_claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PresaleContract", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000257c153071208318521aa4b29b19d42ca167afd1000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000001c9c380", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://490f7d457c645c79792f4ca84d87ad8be7459857ccede60ec16d0daca1e3ee50"}