{"SourceCode": "pragma solidity >=0.7.0 <0.9.0;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract DLegends is IERC20, Ownable {\r\n\r\n    string private constant _name = \"My Defi Legends\";\r\n    string private constant _symbol = \"DLegends\";\r\n    uint8 private constant _decimals = 9;  \r\n    uint256 private _totalSupply = 300 * 10**6 * 10**9;\r\n    \r\n    address public seedAndPresale;\r\n\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping (address => uint256)) private allowed;\r\n    mapping(address => address) private boosterBuyingAllowed;\r\n    \r\n    // listing restrictions\r\n    uint256 private restrictionLiftTime;\r\n    uint256 private maxRestrictionAmount = 300 * 10**6 * 10**9;\r\n    mapping (address => bool) private isWhitelisted;\r\n    mapping (address => uint256) private lastTx;\r\n    // end restrictions\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    enum State {\r\n        Locked,\r\n        Restricted, // Bot protection for liquidity pool\r\n        Unlocked\r\n    }\r\n    State public state;\r\n    \r\n    constructor() {  \r\n        state = State.Locked;\r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }  \r\n    \r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public override view returns (uint256) {\r\n\t    return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address receiver, uint256 numTokens) public override launchRestrict(msg.sender, receiver, numTokens) returns (bool) {\r\n        require(numTokens > 0, \"Transfer amount must be greater than zero\");\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate) public override view returns (uint256) {\r\n        return allowed[owner][delegate];\r\n    }\r\n\r\n    function transferFrom(address owner, address receiver, uint256 numTokens) public override launchRestrict(owner, receiver, numTokens) returns (bool) {\r\n        require(numTokens <= balances[owner]);    \r\n        require(boosterBuyingAllowed[owner] == msg.sender || numTokens <= allowed[owner][msg.sender]);\r\n    \r\n        balances[owner] = balances[owner].sub(numTokens);\r\n        if (boosterBuyingAllowed[owner] != msg.sender) {\r\n            allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n            balances[receiver] = balances[receiver].add(numTokens);\r\n            emit Transfer(owner, receiver, numTokens);\r\n        } else {\r\n            _totalSupply = _totalSupply.sub(numTokens);\r\n            emit Transfer(owner, address(0), numTokens);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function boosterBuyingAllowance(address owner) public view returns (bool) {\r\n        return boosterBuyingAllowance(owner, msg.sender);\r\n    }\r\n    \r\n    function boosterBuyingAllowance(address owner, address delegate) public view returns (bool) {\r\n        if (boosterBuyingAllowed[owner] == delegate) return true;\r\n        else return false;\r\n    }\r\n    \r\n    function allowBuyingBoosters(address dlegends) public returns (bool) {\r\n        boosterBuyingAllowed[msg.sender] = dlegends;\r\n        return true;\r\n    }\r\n    \r\n    function setSeedAndPresale(address seedAndPresale_) public onlyOwner() {\r\n        seedAndPresale = seedAndPresale_;\r\n    }\r\n    \r\n    modifier ownerOrPresale {\r\n        require(owner() == msg.sender || seedAndPresale == msg.sender, \"Cannot burn tokens\");\r\n        _;\r\n    }\r\n    \r\n    function burn(uint256 numTokens) public ownerOrPresale() returns(bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        _totalSupply = _totalSupply.sub(numTokens);\r\n        emit Transfer(msg.sender, address(0), numTokens);\r\n        return true;\r\n    }\r\n    \r\n    // Security from bots\r\n\r\n    // enable/disable works only once, token never returns to Locked\r\n    function setBotProtection(bool enable) public onlyOwner() {\r\n        if (enable && state == State.Locked) state = State.Restricted;\r\n        if (!enable) state = State.Unlocked;\r\n    }\r\n\r\n    function setRestrictionAmount(uint256 amount) public onlyOwner() {\r\n        maxRestrictionAmount = amount;\r\n    }\r\n\r\n    function whitelistAccount(address account) public onlyOwner() {\r\n        isWhitelisted[account] = true;\r\n    }\r\n\r\n    modifier launchRestrict(address sender, address recipient, uint256 amount) {\r\n        if (state == State.Locked) {\r\n            require(sender == owner() || sender == seedAndPresale || isWhitelisted[sender], \"Tokens are locked\");\r\n        }\r\n        if (state == State.Restricted) {\r\n            require(amount <= maxRestrictionAmount, \"DLegends: amount greater than max limit in restricted mode\");\r\n            if (!isWhitelisted[sender] && !isWhitelisted[recipient]) {\r\n                require(lastTx[sender].add(60) <= block.timestamp && lastTx[recipient].add(60) <= block.timestamp, \"DLegends: only one tx/min in restricted mode\");\r\n                lastTx[sender] = block.timestamp;\r\n                lastTx[recipient] = block.timestamp;\r\n            } else if (!isWhitelisted[recipient]) {\r\n                require(lastTx[recipient].add(60) <= block.timestamp, \"DLegends: only one tx/min in restricted mode\");\r\n                lastTx[recipient] = block.timestamp;\r\n            } else if (!isWhitelisted[sender]) {\r\n                require(lastTx[sender].add(60) <= block.timestamp, \"DLegends: only one tx/min in restricted mode\");\r\n                lastTx[sender] = block.timestamp;\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Bot security end\r\n}\r\n\r\ncontract DLegendsSeedAndPreSale is Ownable {\r\n\r\n    uint256 constant public SEED_MAX_BUY = 5 ether;\r\n    uint256 constant public SEED_MIN_BUY = 1 ether;\r\n    uint256 constant public SEED_PRICE = 0.0000283 ether;\r\n    uint256 constant public SEED_TOKENS = 53 * 10**6 * 10**9;\r\n    \r\n    uint256 constant public PRESALE_MAX_BUY = 5 ether;\r\n    uint256 constant public PRESALE_MIN_BUY = 1 ether;\r\n    uint256 constant public PRESALE_PRICE = 0.00003846 ether;\r\n    uint256 constant public PRESALE_TOKENS = 65 * 10**6 * 10**9;\r\n    \r\n    uint256 constant public SEED_DURATION = 24 hours;\r\n    uint256 constant public DELAY_BEFORE_PRESALE = 21 hours;\r\n    uint256 constant public PRESALE_DURATION = 24 hours;\r\n\r\n    DLegends public token;\r\n    address public benificiary;\r\n    uint256 public startTime;\r\n    \r\n    // Sales\r\n    mapping (address => uint256) public salesAtSeed;\r\n    mapping (address => uint256) public salesAtPresale;\r\n    uint256 public totalSeedTokensSold;\r\n    uint256 public totalPresaleTokensSold;\r\n    uint256 public totalSeedBnbCollected;\r\n    uint256 public totalPresaleBnbCollected;\r\n\r\n    enum State {\r\n        Pending,\r\n        Seed,\r\n        Delay,\r\n        Presale,\r\n        Completed\r\n    }\r\n    \r\n    constructor(address token_, address beneficiary_) {\r\n        token = DLegends(token_);\r\n        benificiary = beneficiary_;\r\n    }\r\n    \r\n    function setStartTime(uint256 time) public onlyOwner() {\r\n        startTime = time;\r\n    }\r\n    \r\n    receive() external payable {\r\n        buyTokens();\r\n    }\r\n    \r\n    function getState() public view returns(State) {\r\n        if (block.timestamp < startTime) return State.Pending;\r\n        else if (block.timestamp >= startTime && block.timestamp < startTime + SEED_DURATION) {\r\n            if (totalSeedTokensSold * 100 >= 99 * SEED_TOKENS) return State.Delay;\r\n            else return State.Seed;\r\n        }\r\n        else if (block.timestamp >= startTime + SEED_DURATION && block.timestamp < startTime + SEED_DURATION + DELAY_BEFORE_PRESALE) return State.Delay;\r\n        else if (block.timestamp >= startTime + SEED_DURATION + DELAY_BEFORE_PRESALE &&\r\n                block.timestamp < startTime + SEED_DURATION + DELAY_BEFORE_PRESALE + PRESALE_DURATION) {\r\n            if (totalPresaleTokensSold * 100 >= 99 * PRESALE_TOKENS) return State.Completed;\r\n            else return State.Presale;\r\n        } \r\n        else if (block.timestamp >= startTime + SEED_DURATION + DELAY_BEFORE_PRESALE + PRESALE_DURATION) return State.Completed;\r\n        else return State.Completed;\r\n    }\r\n    \r\n    function getSalesAtSeed(address account) public view returns(uint256) {\r\n        return salesAtSeed[account];\r\n    }\r\n    \r\n    function getSalesAtPresale(address account) public view returns(uint256) {\r\n        return salesAtPresale[account];\r\n    }\r\n\r\n    function buyTokens() public payable {\r\n        State state = getState();\r\n        require(state == State.Seed || state == State.Presale, \"Presale is not active\");\r\n        \r\n        uint256 tokenAmount;\r\n        if (state == State.Seed) {\r\n            require(msg.value >= SEED_MIN_BUY && msg.value <= SEED_MAX_BUY, \"Incorrect transaction amount\");\r\n\t\t\ttokenAmount = (msg.value * 10**9) / SEED_PRICE;\r\n            totalSeedTokensSold += tokenAmount;\r\n            totalSeedBnbCollected += msg.value;\r\n            salesAtSeed[msg.sender] += msg.value;\r\n            require(salesAtSeed[msg.sender] <= SEED_MAX_BUY, \"Buy limit exceeded for account\");\r\n            \r\n            token.transfer(msg.sender, tokenAmount);\r\n            payable(benificiary).transfer(msg.value);\r\n        }\r\n        if (state == State.Presale) {\r\n            require(msg.value >= PRESALE_MIN_BUY && msg.value <= PRESALE_MAX_BUY, \"Incorrect transaction amount\");\r\n\t\t\ttokenAmount = (msg.value * 10**9) / PRESALE_PRICE;\r\n            totalPresaleTokensSold += tokenAmount;\r\n            totalPresaleBnbCollected += msg.value;\r\n            salesAtPresale[msg.sender] += msg.value;\r\n            require(salesAtPresale[msg.sender] <= PRESALE_MAX_BUY, \"Buy limit exceeded for account\");\r\n            \r\n            token.transfer(msg.sender, tokenAmount);\r\n            payable(benificiary).transfer(msg.value);\r\n        }\r\n\r\n        require(totalSeedTokensSold <= SEED_TOKENS && totalPresaleTokensSold <= PRESALE_TOKENS, \"Out of tokens\");\r\n    }\r\n    \r\n    function closePreSale() public onlyOwner() {\r\n        State state = getState();\r\n        require(state == State.Completed, \"Presale is not yet finished\");\r\n        \r\n        token.burn(token.balanceOf(address(this)));\r\n        if (address(this).balance > 0) payable(benificiary).transfer(address(this).balance);\r\n    }\r\n}\r\n\r\nlibrary SafeMath { \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dlegends\",\"type\":\"address\"}],\"name\":\"allowBuyingBoosters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"boosterBuyingAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"boosterBuyingAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedAndPresale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBotProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRestrictionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seedAndPresale_\",\"type\":\"address\"}],\"name\":\"setSeedAndPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum DLegends.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"whitelistAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DLegends", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://15fa5759e101113ce3c757384d081ff49691c7a79ee7e9e6137c8ca35bacac72"}