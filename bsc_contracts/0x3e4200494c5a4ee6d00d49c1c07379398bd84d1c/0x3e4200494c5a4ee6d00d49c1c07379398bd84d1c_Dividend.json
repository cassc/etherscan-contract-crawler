{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ybf/devidend.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function balanceOf(address owner) external view returns(uint256);\\r\\n}\\r\\n\\r\\ninterface IERC721 {\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ncontract Dividend{\\r\\n    address public owner;\\r\\n    address public ybfToken; // YBF Token address\\r\\n    address public nft1Token;\\r\\n    address public nft2Token;\\r\\n\\r\\n    mapping(address => uint256) public userDividend;\\r\\n\\r\\n    constructor(address _owner, address _ybfToken, address _nft1Token, address _nft2Token){\\r\\n        ybfToken = _ybfToken;\\r\\n        nft1Token = _nft1Token;\\r\\n        nft2Token = _nft2Token;\\r\\n\\r\\n        owner = _owner; \\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function recharge(uint256 amount) public { \\r\\n        IERC20(ybfToken).transferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        uint256 nft1Dividend = (amount * 80) / (100 * 30); \\r\\n\\r\\n        uint256 nft2Dividend = (amount * 20) / (100 * 150);\\r\\n\\r\\n        for(uint256 i=0; i< 30; i++){\\r\\n            try IERC721(nft1Token).ownerOf(i) {\\r\\n                userDividend[IERC721(nft1Token).ownerOf(i)] += nft1Dividend;\\r\\n            }catch{}\\r\\n            \\r\\n        }\\r\\n\\r\\n        for(uint256 i=0; i< 150; i++){\\r\\n            try IERC721(nft2Token).ownerOf(i){\\r\\n                userDividend[IERC721(nft2Token).ownerOf(i)] += nft2Dividend;\\r\\n            }catch {}\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function withdraw() public {\\r\\n        require(userDividend[msg.sender] >0, \\\"You don't have award\\\");\\r\\n\\r\\n        IERC20(ybfToken).transfer(msg.sender, userDividend[msg.sender]);\\r\\n\\r\\n        userDividend[msg.sender] = 0;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw() external onlyOwner { \\r\\n        // In case of emergency, the owner can withdraw the remaining ybf tokens\\r\\n        IERC20(ybfToken).transfer(owner, IERC20(ybfToken).balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": [],\r\n    \"evmVersion\": \"paris\"\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ybfToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft2Token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft1Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft2Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ybfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Dividend", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000045601d7fd9979bf66cf92445afe4a6a8e88acdcd00000000000000000000000017e01cc3b80e6e18667e11d585327b3b854981880000000000000000000000003f47a5b99d0b49d2d456381319a0d48ed25e46f4000000000000000000000000b1ff4d5344ec66a3e9610d826b9b24f3ab6e1219", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://04761e1edec3f9484a9cdb5273ed34f05600322b4771f2d5bf7e161d6b74ed5e"}