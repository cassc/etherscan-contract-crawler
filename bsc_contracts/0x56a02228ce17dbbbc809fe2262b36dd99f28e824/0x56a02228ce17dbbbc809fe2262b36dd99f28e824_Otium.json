{"SourceCode": "{\"Address.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance \\u003e= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance \\u003e= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\\n            data\\n        );\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"IUniswap.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\\n// pragma solidity \\u003e=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\n// pragma solidity \\u003e=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\n// pragma solidity \\u003e=0.6.2;\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"},\"Otium.sol\":{\"content\":\"/**\\r\\n                                                                                                                                                                                                        \\r\\n                         .*##############.                                                                                                                                                              \\r\\n                    (%#%#####################*                                                                                                                                                          \\r\\n                (%%%%##%%#######################.                                                                                                                                                       \\r\\n            .#%%%%%%%%%%%#%###(.                 *                                                                                                                                                   \\r\\n          /%%%%%%%%%%%%%%/                         %\\u0026.                                                               .\\u0026\\u0026\\u0026\\u0026\\u0026#        \\r\\n        #%%%%%%%%%%%%(                              \\u0026\\u0026\\u0026/                                                            *\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026       \\r\\n      (%%%%%%%%%%%(                                 #\\u0026\\u0026\\u0026%                                          %\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026           /\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026       \\r\\n    .%%%%%%%%%%%,                                   *\\u0026\\u0026\\u0026\\u0026\\u0026                                         %\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026                                                                                         \\r\\n   /%%%%%%%%%%,           ./(%#(*                   #%%%\\u0026\\u0026#                 ,/#\\u0026\\u0026\\u0026\\u0026#/,             %\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026           *((((((      ,((((((          *((((((      .(((((/   ,(%\\u0026\\u0026\\u0026#/        ,(%\\u0026\\u0026\\u0026%/,     \\r\\n  (%%%%%%%%%/          (%%%%%%%%%%%%,               %%%%\\u0026\\u0026\\u0026             (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026(     .\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%     (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      /\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026          #\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      *\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026. \\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026#  \\r\\n *%%%%%%%%%          ,#%%%%%%%%%%%%%%#             #%%%%%%%           %\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026(//(\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%   .\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%     (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      /\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026          #\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      *\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026.\\r\\n %%%%%%%%#           ###%%%%%%%%%%%%%%/           ,%%%%%%%%          \\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026         .\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026.     %\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026           (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      /\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026          #\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      *\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026.       %\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026(       ,\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\r\\n*\\u0026%%%%%%#            ######%%%%%%%%%%%*          /%%%%%%%%(         #\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026            \\u0026\\u0026\\u0026\\u0026\\u0026\\u0026#     %\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026           (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      /\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026          #\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      *\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026,         \\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%         (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\r\\n%\\u0026%%%%%%              #######%%%%%%%%/          #%%%%%%%%#          #\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026            \\u0026\\u0026\\u0026\\u0026\\u0026\\u0026#     %\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026           (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      /\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026          #\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      *\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026.         \\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%         (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\r\\n/\\u0026\\u0026%\\u0026\\u0026%*               .##########%(          ,%%%%%%%%%%           *\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%          (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026*     %\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026           (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      ,\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026(        .\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      *\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026.         \\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%         (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\r\\n \\u0026\\u0026\\u0026\\u0026\\u0026%                     ....             %%%%%%%%%%#             ,\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%     .\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026*      /\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%          (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026       \\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026#   .#\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      *\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026.         \\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%         (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\r\\n ,\\u0026\\u0026\\u0026\\u0026%                                   ,%%%%%%%%%%%/                /\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026/         #\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026(    (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026        #\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      *\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026.         \\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%         (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\r\\n  .\\u0026\\u0026\\u0026\\u0026.                                #%%%%%%%%%%%%                      %\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%                \\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026    (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026           %\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026. .\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026      ,\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026.         \\u0026\\u0026\\u0026\\u0026\\u0026\\u0026%         (\\u0026\\u0026\\u0026\\u0026\\u0026\\u0026\\r\\n    /\\u0026\\u0026#                             #%%%%%%%%%%%%%                                                                                                                                                     \\r\\n       %/                       .#%%%%%%%%%%%%%%(                                                                                                                                                       \\r\\n          (.              .*###%%%%%%%%%%%%%%#                                                                                                                                                          \\r\\n           .######################%%%%%%%%/                                                                                                                                                             \\r\\n              ,#######################*                                                                                                                                                                 \\r\\n                   ./(#######((/.                                                                                                                                                                       \\r\\n\\r\\n\\r\\n======================================================\\r\\n    Deployed by Otium Technologies on 08/09/2021\\r\\n    https://otiumtechnologies.com/\\r\\n======================================================\\r\\n*/\\r\\n\\r\\n\\r\\n// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./Address.sol\\u0027;\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\nimport \\u0027./IUniswap.sol\\u0027;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\tfunction totalSupply() external view returns (uint256);\\r\\n\\tfunction balanceOf(address account) external view returns (uint256);\\r\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\r\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\r\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\ncontract Otium is Context, IERC20, Ownable {\\r\\n    \\r\\n\\tusing SafeMath for uint256;\\r\\n\\tusing Address for address;\\r\\n\\r\\n\\tmapping (address =\\u003e uint256) private _rOwned;\\r\\n\\tmapping (address =\\u003e uint256) private _tOwned;\\r\\n\\tmapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n\\tmapping (address =\\u003e bool) private _isExcludedFromFee;\\r\\n\\tmapping (address =\\u003e bool) private _isExcludedFromReward;\\r\\n\\t\\r\\n\\taddress[] private _excludedFromReward;\\r\\n\\r\\n\\taddress BURN_ADDRESS = 0x0000000000000000000000000000000000000001;\\r\\n\\taddress public _projectAddress;\\r\\n\\taddress public _charityAddress;\\r\\n\\taddress public _marketingAddress;\\r\\n\\r\\n\\tuint256 private constant MAX = ~uint256(0);\\r\\n\\tuint256 private _tTotal = 1000000000 * 10**18;\\r\\n\\tuint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n\\tuint256 private _tHODLrRewardsTotal;\\r\\n\\r\\n\\tstring private _name = \\\"Otium\\\";\\r\\n\\tstring private _symbol = \\\"OTIUM\\\";\\r\\n\\tuint8 private _decimals = 18;\\r\\n\\t\\r\\n\\tuint256 public _rewardFee = 1;\\r\\n\\tuint256 private _previousRewardFee = _rewardFee;\\r\\n\\t\\r\\n\\tuint256 public _charityFee = 1;\\r\\n\\tuint256 private _previousCharityFee = _charityFee;\\r\\n\\t\\r\\n\\tuint256 public _burnFee = 1;\\r\\n\\tuint256 private _previousBurnFee = _burnFee;\\r\\n\\t\\r\\n\\tuint256 public _marketingFee = 1;\\r\\n\\tuint256 private _previousMarketingFee = _marketingFee;\\r\\n\\t\\r\\n\\tuint256 public _projectFee = 4; \\r\\n\\tuint256 private _previousProjectFee = _projectFee;\\r\\n\\t\\r\\n\\r\\n\\r\\n\\tIUniswapV2Router02 public immutable uniswapV2Router;\\r\\n\\taddress public immutable uniswapV2Pair;\\r\\n\\tuint256 public _maxTxAmount = 10000000 * 10**18;\\r\\n\\r\\n\\tconstructor ( address initialProjectAddress, address initialCharityAddress, address initialMarketingAddress ) {\\r\\n\\t    require(\\r\\n            initialProjectAddress != address(0),\\r\\n            \\\"Address should not be 0x00\\\"\\r\\n        );\\r\\n        require(\\r\\n            initialMarketingAddress != address(0),\\r\\n            \\\"Address should not be 0x00\\\"\\r\\n        );\\r\\n        require(\\r\\n            initialCharityAddress != address(0),\\r\\n            \\\"Address should not be 0x00\\\"\\r\\n        );\\r\\n        \\r\\n\\t\\t_rOwned[_msgSender()] = _rTotal;\\r\\n\\t\\t\\r\\n\\t\\t_projectAddress = initialProjectAddress;\\r\\n\\t\\t_charityAddress = initialCharityAddress;\\r\\n\\t\\t_marketingAddress = initialMarketingAddress;\\r\\n\\t\\t\\r\\n\\t\\r\\n\\t\\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\t\\t// BSC PANCAKE Router V2\\r\\n\\t\\t\\r\\n        // Create a uniswap pair for this new token\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(address(this), _uniswapV2Router.WETH());\\r\\n            \\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n            \\r\\n\\t\\t_isExcludedFromReward[address(this)] = true;\\r\\n\\t\\t_isExcludedFromReward[BURN_ADDRESS] = true;\\r\\n\\t\\t\\r\\n\\t\\t_isExcludedFromFee[owner()] = true;\\r\\n\\t\\t_isExcludedFromFee[address(this)] = true;\\r\\n\\t\\t_isExcludedFromFee[BURN_ADDRESS] = true;\\r\\n\\t\\t_isExcludedFromFee[_charityAddress] = true;\\r\\n\\t\\t_isExcludedFromFee[_marketingAddress] = true;\\r\\n\\t\\t_isExcludedFromFee[_projectAddress] = true;\\r\\n\\r\\n\\r\\n\\t\\temit Transfer(address(0), _msgSender(), _tTotal);\\r\\n\\t}\\r\\n\\r\\n\\tfunction name() public view returns (string memory) {return _name;}\\r\\n\\tfunction symbol() public view returns (string memory) {return _symbol;}\\r\\n\\tfunction decimals() public view returns (uint8) {return _decimals;}\\r\\n\\tfunction totalSupply() public view override returns (uint256) {return _tTotal;}\\r\\n\\r\\n\\tfunction balanceOf(address account) public view override returns (uint256) {\\r\\n\\t\\tif (_isExcludedFromReward[account]) return _tOwned[account];\\r\\n\\t\\treturn tokenFromReflection(_rOwned[account]);\\r\\n\\t}\\r\\n\\r\\n\\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction allowance(address owner, address spender) public view override returns (uint256) {\\r\\n\\t\\treturn _allowances[owner][spender];\\r\\n\\t}\\r\\n\\r\\n\\tfunction approve(address spender, uint256 amount) public override returns (bool) {\\r\\n\\t\\t_approve(_msgSender(), spender, amount);\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n\\t\\t_transfer(sender, recipient, amount);\\r\\n\\t\\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n\\t\\treturn true;\\r\\n\\t}\\r\\n\\r\\n\\tfunction totalHODLrRewards() public view returns (uint256) {\\r\\n\\t\\treturn _tHODLrRewardsTotal;\\r\\n\\t}\\r\\n\\r\\n\\tfunction totalBurned() public view returns (uint256) {\\r\\n\\t\\treturn balanceOf(BURN_ADDRESS);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction totalProject() public view returns (uint256) {\\r\\n\\t\\treturn balanceOf(_projectAddress);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction totalCharity() public view returns (uint256) {\\r\\n\\t\\treturn balanceOf(_charityAddress);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction totalMarketing() public view returns (uint256) {\\r\\n\\t    return balanceOf(_marketingAddress);\\r\\n\\t}\\r\\n\\r\\n\\tfunction deliver(uint256 tAmount) public {\\r\\n\\t\\taddress sender = _msgSender();\\r\\n\\t\\trequire(!_isExcludedFromReward[sender], \\\"Excluded addresses cannot call this function\\\");\\r\\n\\t\\t(uint256 rAmount,,,,,,,,) = _getValues(tAmount);\\r\\n\\t\\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n\\t\\t_rTotal = _rTotal.sub(rAmount);\\r\\n\\t\\t_tHODLrRewardsTotal = _tHODLrRewardsTotal.add(tAmount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\r\\n\\t\\trequire(tAmount \\u003c= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n\\t\\tif (!deductTransferFee) {\\r\\n\\t\\t\\t(uint256 rAmount,,,,,,,,) = _getValues(tAmount);\\r\\n\\t\\t\\treturn rAmount;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t(,uint256 rTransferAmount,,,,,,,) = _getValues(tAmount);\\r\\n\\t\\t\\treturn rTransferAmount;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\r\\n\\t\\trequire(rAmount \\u003c= _rTotal, \\\"Amount must be less than total reflections\\\");\\r\\n\\t\\tuint256 currentRate =  _getRate();\\r\\n\\t\\treturn rAmount.div(currentRate);\\r\\n\\t}\\r\\n\\r\\n\\tfunction isExcludedFromReward(address account) public view returns (bool) {\\r\\n\\t\\treturn _isExcludedFromReward[account];\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeFromReward(address account) public onlyOwner {\\r\\n\\t\\trequire(!_isExcludedFromReward[account], \\\"Account is already excluded\\\");\\r\\n\\t\\tif(_rOwned[account] \\u003e 0) {\\r\\n\\t\\t\\t_tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n\\t\\t}\\r\\n\\t\\t_isExcludedFromReward[account] = true;\\r\\n\\t\\t_excludedFromReward.push(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction includeInReward(address account) external onlyOwner {\\r\\n\\t\\trequire(_isExcludedFromReward[account], \\\"Account is already excluded\\\");\\r\\n\\t\\tfor (uint256 i = 0; i \\u003c _excludedFromReward.length; i++) {\\r\\n\\t\\t\\tif (_excludedFromReward[i] == account) {\\r\\n\\t\\t\\t\\t_excludedFromReward[i] = _excludedFromReward[_excludedFromReward.length - 1];\\r\\n\\t\\t\\t\\t_tOwned[account] = 0;\\r\\n\\t\\t\\t\\t_isExcludedFromReward[account] = false;\\r\\n\\t\\t\\t\\t_excludedFromReward.pop();\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeFromFee(address account) public onlyOwner {\\r\\n\\t\\t_isExcludedFromFee[account] = true;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction includeInFee(address account) public onlyOwner {\\r\\n\\t\\t_isExcludedFromFee[account] = false;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setRewardFeePercent(uint256 rewardFee) external onlyOwner {\\r\\n\\t\\t_rewardFee = rewardFee;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setBurnFeePercent(uint256 burnFee) external onlyOwner {\\r\\n\\t\\t_burnFee = burnFee;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setProjectFeePercent(uint256 projectFee) external onlyOwner {\\r\\n\\t\\t_projectFee = projectFee;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setMarketingFeePercent(uint256 marketingFee) external onlyOwner {\\r\\n\\t\\t_marketingFee = marketingFee;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setCharityFeePercent(uint256 charitytFee) external onlyOwner {\\r\\n\\t\\t_charityFee = charitytFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {\\r\\n\\t\\t_maxTxAmount = _tTotal.mul(maxTxPercent).div(\\r\\n\\t\\t\\t10**2\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setMaxTx(uint256 _maxTx) external onlyOwner {\\r\\n\\t\\t_maxTxAmount = _maxTx * 10**18;\\r\\n\\t}\\r\\n\\r\\n\\treceive() external payable {}\\r\\n\\r\\n\\tfunction _HODLrFee(uint256 rHODLrFee, uint256 tHODLrFee) private {\\r\\n\\t\\t_rTotal = _rTotal.sub(rHODLrFee);\\r\\n\\t\\t_tHODLrRewardsTotal = _tHODLrRewardsTotal.add(tHODLrFee);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getValues(uint256 tAmount) \\r\\n\\tprivate view returns (\\r\\n\\t\\r\\n\\t    uint256 rAmount, \\r\\n\\t    uint256 rTransferAmount, \\r\\n\\t    uint256 rReward, \\r\\n\\t    uint256 tTransferAmount, \\r\\n\\t    uint256 tReward, \\r\\n\\t    uint256 tProject, \\r\\n\\t    uint256 tBurn, \\r\\n\\t    uint256 tCharity,\\r\\n\\t    uint256 tMarketing\\r\\n\\t    \\r\\n\\t    ) \\r\\n\\t{\\r\\n\\t\\t( tTransferAmount, tReward, tProject, tCharity, tBurn, tMarketing\\r\\n\\t\\t) = _getTValues(tAmount, tTransferAmount, tReward, tProject, tCharity, tBurn, tMarketing);\\r\\n\\t\\t\\r\\n\\t\\t( rAmount, rTransferAmount, rReward, tReward\\r\\n\\t\\t) =  _getRValues(tAmount, tReward, tProject, tBurn, tCharity, tMarketing,  _getRate());\\r\\n\\t\\t\\r\\n\\t\\treturn (\\r\\n\\t\\trAmount, \\r\\n\\t\\trTransferAmount, \\r\\n\\t\\trReward, \\r\\n\\t\\ttTransferAmount, \\r\\n\\t\\ttReward, \\r\\n\\t\\ttProject,\\r\\n\\t\\ttBurn,\\r\\n\\t\\ttCharity,\\r\\n\\t\\ttMarketing);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getTValues(\\r\\n\\tuint256 tAmount, \\r\\n\\tuint256 tTransferAmount,\\r\\n\\tuint256 tReward, \\r\\n\\tuint256 tProject, \\r\\n\\tuint256 tBurn, \\r\\n\\tuint256 tCharity,\\r\\n\\tuint256 tMarketing\\r\\n\\t) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\\r\\n\\t    \\r\\n\\t\\ttReward = calculateRewardFee(tAmount); \\r\\n\\t\\ttProject = calculateProjectFee(tAmount);\\r\\n\\t\\ttBurn = calculateBurnFee(tAmount);\\r\\n\\t\\ttCharity = calculateCharityFee(tAmount);\\r\\n\\t\\ttMarketing = calculateMarketingFee(tAmount);\\r\\n\\t\\ttTransferAmount = tAmount.sub(tReward);\\r\\n\\t\\ttTransferAmount = tTransferAmount.sub(tBurn);\\r\\n\\t\\ttTransferAmount = tTransferAmount.sub(tCharity);\\r\\n\\t\\ttTransferAmount = tTransferAmount.sub(tProject);\\r\\n\\t\\ttTransferAmount = tTransferAmount.sub(tMarketing);\\r\\n\\t\\t\\r\\n\\t\\treturn (tTransferAmount, tReward, tProject, tCharity, tBurn, tMarketing);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _getRValues(\\r\\n\\tuint256 tAmount, \\r\\n\\tuint256 tReward, \\r\\n\\tuint256 tProject, \\r\\n\\tuint256 tBurn, \\r\\n\\tuint256 tCharity,\\r\\n\\tuint256 tMarketing,\\r\\n\\tuint256 currentRate\\r\\n\\t) private pure returns (\\r\\n\\t    uint256 rAmount, \\r\\n\\t    uint256 rTransferAmount, \\r\\n\\t    uint256 rReward, uint256) {\\r\\n\\t    \\r\\n\\t\\trAmount = tAmount.mul(currentRate);\\r\\n        rReward = tReward.mul(currentRate);\\r\\n        rTransferAmount = rAmount.sub(rReward);\\r\\n\\t\\trTransferAmount = rTransferAmount.sub(tBurn.mul(currentRate));\\r\\n\\t\\trTransferAmount = rTransferAmount.sub(tCharity.mul(currentRate));\\r\\n\\t\\trTransferAmount = rTransferAmount.sub(tProject.mul(currentRate));\\r\\n\\t\\trTransferAmount = rTransferAmount.sub(tMarketing.mul(currentRate));\\r\\n\\t\\t\\r\\n\\t\\treturn (rAmount, rTransferAmount, rReward, tReward);\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction _getRate() private view returns(uint256) {\\r\\n\\t\\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n\\t\\treturn rSupply.div(tSupply);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _getCurrentSupply() private view returns(uint256, uint256) {\\r\\n\\t\\tuint256 rSupply = _rTotal;\\r\\n\\t\\tuint256 tSupply = _tTotal;\\r\\n\\t\\tfor (uint256 i = 0; i \\u003c _excludedFromReward.length; i++) {\\r\\n\\t\\t\\tif (_rOwned[_excludedFromReward[i]] \\u003e rSupply || _tOwned[_excludedFromReward[i]] \\u003e tSupply) \\r\\n\\t\\t\\treturn (_rTotal, _tTotal);\\r\\n\\t\\t\\trSupply = rSupply.sub(_rOwned[_excludedFromReward[i]]);\\r\\n\\t\\t\\ttSupply = tSupply.sub(_tOwned[_excludedFromReward[i]]);\\r\\n\\t\\t}\\r\\n\\t\\tif (rSupply \\u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n\\t\\treturn (rSupply, tSupply);\\r\\n\\t}\\r\\n\\r\\n\\tfunction calculateRewardFee(uint256 _amount) private view returns (uint256) {\\r\\n\\t\\treturn _amount.mul(_rewardFee).div(\\r\\n\\t\\t\\t10**2\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction calculateBurnFee(uint256 _amount) private view returns (uint256) {\\r\\n\\t\\treturn _amount.mul(_burnFee).div(\\r\\n\\t\\t\\t10**2\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction calculateCharityFee(uint256 _amount) private view returns (uint256) {\\r\\n\\t\\treturn _amount.mul(_charityFee).div(\\r\\n\\t\\t\\t10**2\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction calculateMarketingFee(uint256 _amount) private view returns (uint256) {\\r\\n\\t\\treturn _amount.mul(_marketingFee).div(\\r\\n\\t\\t\\t10**2\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction calculateProjectFee(uint256 _amount) private view returns (uint256) {\\r\\n\\t\\treturn _amount.mul(_projectFee).div(\\r\\n\\t\\t\\t10**2\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction removeAllFee() private {\\r\\n\\t\\tif(_rewardFee == 0 \\u0026\\u0026 _burnFee == 0 \\u0026\\u0026 _projectFee == 0 \\u0026\\u0026 _charityFee == 0 \\u0026\\u0026 _marketingFee == 0) return;\\t\\t\\r\\n\\t\\t_previousRewardFee = _rewardFee;\\r\\n\\t\\t_previousBurnFee = _burnFee;\\r\\n\\t\\t_previousProjectFee = _projectFee;\\r\\n\\t\\t_previousCharityFee = _charityFee;\\r\\n\\t\\t_previousMarketingFee = _marketingFee;\\r\\n\\t\\t_rewardFee = 0;\\r\\n\\t\\t_burnFee = 0;\\r\\n\\t\\t_projectFee = 0;\\r\\n\\t\\t_charityFee = 0;\\r\\n\\t\\t_marketingFee = 0;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction restoreAllFee() private {\\r\\n\\t\\t_rewardFee = _previousRewardFee;\\r\\n\\t\\t_burnFee = _previousBurnFee;\\r\\n\\t\\t_projectFee = _previousProjectFee;\\r\\n\\t\\t_charityFee = _previousCharityFee;\\r\\n\\t\\t_marketingFee = _previousMarketingFee;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction isExcludedFromFee(address account) public view returns(bool) {\\r\\n\\t\\treturn _isExcludedFromFee[account];\\r\\n\\t}\\r\\n\\r\\n\\tfunction _approve(address owner, address spender, uint256 amount) private {\\r\\n\\t\\trequire(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\t\\t_allowances[owner][spender] = amount;\\r\\n\\t\\temit Approval(owner, spender, amount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transfer(\\r\\n\\t\\taddress from,\\r\\n\\t\\taddress to,\\r\\n\\t\\tuint256 amount\\r\\n\\t) private {\\r\\n\\t\\trequire(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n\\t\\trequire(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\t\\trequire(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\t\\tif(from != owner() \\u0026\\u0026 to != owner())\\r\\n\\t\\t\\trequire(amount \\u003c= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\r\\n\\t\\tbool takeFee = true;\\r\\n\\t\\tif(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\\r\\n\\t\\t\\ttakeFee = false;\\r\\n\\t\\t}\\r\\n\\t\\t_tokenTransfer(from,to,amount,takeFee);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\\r\\n\\t\\tif(!takeFee)\\r\\n\\t\\t\\tremoveAllFee();\\t\\t\\r\\n\\t\\tif (_isExcludedFromReward[sender] \\u0026\\u0026 !_isExcludedFromReward[recipient]) {\\r\\n\\t\\t\\t_transferFromExcluded(sender, recipient, amount);\\r\\n\\t\\t} else if (!_isExcludedFromReward[sender] \\u0026\\u0026 _isExcludedFromReward[recipient]) {\\r\\n\\t\\t\\t_transferToExcluded(sender, recipient, amount);\\r\\n\\t\\t} else if (!_isExcludedFromReward[sender] \\u0026\\u0026 !_isExcludedFromReward[recipient]) {\\r\\n\\t\\t\\t_transferStandard(sender, recipient, amount);\\r\\n\\t\\t} else if (_isExcludedFromReward[sender] \\u0026\\u0026 _isExcludedFromReward[recipient]) {\\r\\n\\t\\t\\t_transferBothExcluded(sender, recipient, amount);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\t_transferStandard(sender, recipient, amount);\\r\\n\\t\\t}\\t\\t\\r\\n\\t\\tif(!takeFee)\\r\\n\\t\\t\\trestoreAllFee();\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transferBurn(address sender, uint256 tBurn) private {\\r\\n\\t\\tuint256 currentRate = _getRate();\\r\\n\\t\\tuint256 rBurn = tBurn.mul(currentRate);\\t\\t\\r\\n\\t\\t_rOwned[BURN_ADDRESS] = _rOwned[BURN_ADDRESS].add(rBurn);\\r\\n\\t\\tif(_isExcludedFromReward[BURN_ADDRESS])\\r\\n\\t\\t\\t_tOwned[BURN_ADDRESS] = _tOwned[BURN_ADDRESS].add(tBurn);\\r\\n\\t\\temit Transfer(sender, BURN_ADDRESS, tBurn);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _transferProject(address sender, uint256 tProject) private {\\r\\n\\t\\tuint256 currentRate = _getRate();\\r\\n\\t\\tuint256 rProject = tProject.mul(currentRate);\\t\\t\\r\\n\\t\\t_rOwned[_projectAddress] = _rOwned[_projectAddress].add(rProject);\\r\\n\\t\\tif(_isExcludedFromReward[_projectAddress])\\r\\n\\t\\t\\t_tOwned[_projectAddress] = _tOwned[_projectAddress].add(tProject);\\r\\n\\t\\t\\r\\n\\t\\temit Transfer(sender, _projectAddress, tProject);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _transferMarketing(address sender, uint256 tMarketing) private {\\r\\n\\t\\tuint256 currentRate = _getRate();\\r\\n\\t\\tuint256 rMarketing = tMarketing.mul(currentRate);\\t\\t\\r\\n\\t\\t_rOwned[_marketingAddress] = _rOwned[_marketingAddress].add(rMarketing);\\r\\n\\t\\tif(_isExcludedFromReward[_marketingAddress])\\r\\n\\t\\t\\t_tOwned[_marketingAddress] = _tOwned[_marketingAddress].add(tMarketing);\\r\\n\\t\\t\\r\\n\\t\\temit Transfer(sender, _marketingAddress, tMarketing);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _transferCharity(address sender, uint256 tCharity) private {\\r\\n\\t\\tuint256 currentRate = _getRate();\\r\\n\\t\\tuint256 rCharity = tCharity.mul(currentRate);\\t\\t\\r\\n\\t\\t_rOwned[_charityAddress] = _rOwned[_charityAddress].add(rCharity);\\r\\n\\t\\tif(_isExcludedFromReward[_charityAddress])\\r\\n\\t\\t\\t_tOwned[_charityAddress] = _tOwned[_charityAddress].add(tCharity);\\r\\n\\t\\t\\r\\n\\t\\temit Transfer(sender, _charityAddress, tCharity);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n\\t\\t(\\r\\n\\t\\t\\tuint256 rAmount,\\r\\n\\t\\t\\tuint256 rTransferAmount,\\r\\n\\t\\t\\tuint256 rReward,\\r\\n\\t\\t\\tuint256 tTransferAmount,\\r\\n\\t\\t\\tuint256 tReward,\\r\\n\\t\\t\\tuint256 tProject,\\r\\n\\t\\t\\tuint256 tBurn,\\r\\n\\t\\t\\tuint256 tCharity,\\r\\n\\t\\t\\tuint256 tMarketing) = _getValues(tAmount);\\r\\n\\t\\t\\t\\r\\n\\t    _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \\r\\n    \\r\\n\\t\\t_transferBurn(sender, tBurn);\\r\\n        _transferProject(sender, tProject);\\r\\n        _transferCharity(sender, tCharity);\\r\\n        _transferMarketing(sender, tMarketing);\\r\\n\\t\\t_HODLrFee(rReward, tReward);\\r\\n\\t\\temit Transfer(sender, recipient, tTransferAmount);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n\\t\\t(\\r\\n\\t \\t    uint256 rAmount,\\r\\n\\t\\t\\tuint256 rTransferAmount,\\r\\n\\t\\t\\tuint256 rReward,\\r\\n\\t\\t\\tuint256 tTransferAmount,\\r\\n\\t\\t\\tuint256 tReward,\\r\\n\\t\\t\\tuint256 tProject,\\r\\n\\t\\t\\tuint256 tBurn,\\r\\n\\t\\t\\tuint256 tCharity,\\r\\n\\t\\t\\tuint256 tMarketing) = _getValues(tAmount);\\r\\n\\t\\t\\t\\r\\n\\t    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);  \\r\\n    \\r\\n\\t\\t_transferBurn(sender, tBurn);\\r\\n        _transferProject(sender, tProject);\\r\\n        _transferCharity(sender, tCharity);\\r\\n        _transferMarketing(sender, tMarketing);\\r\\n\\t\\t_HODLrFee(rReward, tReward);\\r\\n\\t\\temit Transfer(sender, recipient, tTransferAmount);\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction _transferStandard(address sender, address recipient, uint256 tAmount) \\tprivate {\\r\\n\\t\\t(\\r\\n\\t        uint256 rAmount,\\r\\n\\t\\t\\tuint256 rTransferAmount,\\r\\n\\t\\t\\tuint256 rReward,\\r\\n\\t\\t\\tuint256 tTransferAmount,\\r\\n\\t\\t\\tuint256 tReward,\\r\\n\\t\\t\\tuint256 tProject,\\r\\n\\t\\t\\tuint256 tBurn,\\r\\n\\t\\t\\tuint256 tCharity,\\r\\n\\t\\t\\tuint256 tMarketing) = _getValues(tAmount);\\r\\n\\t\\t\\t\\r\\n\\t    _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        \\r\\n\\t\\t_transferBurn(sender, tBurn);\\r\\n        _transferProject(sender, tProject);\\r\\n        _transferCharity(sender, tCharity);\\r\\n        _transferMarketing(sender, tMarketing);\\r\\n\\t\\t_HODLrFee(rReward, tReward);\\r\\n\\t\\temit Transfer(sender, recipient, tTransferAmount);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\r\\n\\t\\t(\\r\\n\\t\\t   \\tuint256 rAmount,\\r\\n\\t\\t\\tuint256 rTransferAmount,\\r\\n\\t\\t\\tuint256 rReward,\\r\\n\\t\\t\\tuint256 tTransferAmount,\\r\\n\\t\\t\\tuint256 tReward,\\r\\n\\t\\t\\tuint256 tProject,\\r\\n\\t\\t\\tuint256 tBurn,\\r\\n\\t\\t\\tuint256 tCharity,\\r\\n\\t\\t\\tuint256 tMarketing) = _getValues(tAmount);\\r\\n\\t\\t\\t\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);     \\r\\n        \\r\\n\\t\\t_transferBurn(sender, tBurn);\\r\\n        _transferProject(sender, tProject);\\r\\n        _transferCharity(sender, tCharity);\\r\\n        _transferMarketing(sender, tMarketing);\\r\\n\\t\\t_HODLrFee(rReward, tReward);\\r\\n\\t\\temit Transfer(sender, recipient, tTransferAmount);\\r\\n\\t}\\r\\n\\r\\n}\"},\"Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current owner.\\r\\n     */\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return _msgSender() == _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).EDDY\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialProjectAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialCharityAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialMarketingAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_charityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_charityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_projectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_projectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"charitytFee\",\"type\":\"uint256\"}],\"name\":\"setCharityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"setMarketingFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTx\",\"type\":\"uint256\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectFee\",\"type\":\"uint256\"}],\"name\":\"setProjectFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardFee\",\"type\":\"uint256\"}],\"name\":\"setRewardFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCharity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHODLrRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Otium", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001714976bbd838bb785a4141bd36b603c795f42b3000000000000000000000000eeeb158344fe8b57e29779a7be61ee5bcd7b849f0000000000000000000000003769120c01f41ed3310bbaadd8f6f6b34c137a2b", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1914c5bebaa48933b1f3ab8d42d23c511106724cfb3aed3de72c47140b019b49"}