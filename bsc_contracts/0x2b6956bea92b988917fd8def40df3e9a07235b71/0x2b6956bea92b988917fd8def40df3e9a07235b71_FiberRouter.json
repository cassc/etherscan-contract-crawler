{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC5267.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\\n\\nimport \\\"./EIP712.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ShortStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n    function approve(address guy, uint wad) external returns (bool);\\n\\n}\"\r\n    },\r\n    \"contracts/common/oneInch/IOneInchSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOneInchSwap {\\n    struct SwapDescription {\\n        IERC20 srcToken;\\n        IERC20 dstToken;\\n        address payable srcReceiver;\\n        address payable dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n    }\\n    // Define external functions that will be available for interaction\\n\\n    // uniswapV3SwapTo function\\n    function uniswapV3SwapTo(\\n        address payable recipient,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata pools\\n    ) external payable returns(uint256 returnAmount);\\n\\n    // unoswapTo function\\n    function unoswapTo(\\n        address payable recipient,\\n        address srcToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata pools\\n    ) external payable returns(uint256 returnAmount);\\n\\n    // swap function\\n    function swap(\\n        address executor,\\n        SwapDescription calldata desc,\\n        bytes calldata permit,\\n        bytes calldata data\\n    ) external payable returns (uint256 returnAmount, uint256 spentAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/common/oneInch/OneInchDecoder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nlibrary OneInchDecoder {\\n    struct SwapDescription {\\n        address srcToken;\\n        address dstToken;\\n        address payable srcReceiver;\\n        address payable dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n    }\\n    // Define the function signatures\\n    bytes4 public constant selectorUnoswap =\\n        bytes4(\\n            keccak256(\\\"unoswapTo(address,address,uint256,uint256,uint256[])\\\")\\n        );\\n    bytes4 public constant selectorUniswapV3Swap =\\n        bytes4(keccak256(\\\"uniswapV3SwapTo(address,uint256,uint256,uint256[])\\\"));\\n    bytes4 public constant selectorSwap =\\n        bytes4(\\n            keccak256(\\n                \\\"swap(address,(address,address,address,address,uint256,uint256,uint256),bytes,bytes)\\\"\\n            )\\n        );\\n                \\n    function decodeUnoswap(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            address payable recipient,\\n            address srcToken,\\n            uint256 amount,\\n            uint256 minReturn,\\n            uint256[] memory pools\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Skip the first 4 bytes (function signature)\\n        bytes memory params = slice(data, 4, data.length - 4);\\n\\n        // Decode the parameters\\n        (recipient, srcToken, amount, minReturn, pools) = abi.decode(\\n            params,\\n            (address, address, uint256, uint256, uint256[])\\n        );\\n    }\\n\\n    function decodeUniswapV3Swap(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            address payable recipient,\\n            uint256 amount,\\n            uint256 minReturn,\\n            uint256[] memory pools\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Skip the first 4 bytes (function signature)\\n        bytes memory params = slice(data, 4, data.length - 4);\\n\\n        // Decode the parameters\\n        (recipient, amount, minReturn, pools) = abi.decode(\\n            params,\\n            (address, uint256, uint256, uint256[])\\n        );\\n    }\\n\\n    function decodeSwap(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            address executor,\\n            SwapDescription memory desc,\\n            bytes memory permit,\\n            bytes memory swapData\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Skip the first 4 bytes (function signature)\\n        bytes memory params = slice(data, 4, data.length - 4);\\n\\n        // Decode the parameters\\n        (executor, desc, permit, swapData) = abi.decode(\\n            params,\\n            (address, SwapDescription, bytes, bytes)\\n        );\\n    }\\n\\n    function decodeSwap2(bytes memory data)\\n        public\\n        pure\\n        returns (\\n            address payable recipient,\\n            uint256 amount,\\n            uint256 minReturn\\n        )\\n    {\\n        require(data.length >= 4, \\\"Data too short\\\");\\n\\n        // Decode the parameters, skipping the first 4 bytes\\n        (, SwapDescription memory desc, , ) = decodeSwap(data);\\n\\n        // Return only the values of the SwapDescription\\n        return (desc.dstReceiver, desc.amount, desc.minReturnAmount);\\n    }\\n\\n    // Helper function to slice bytes array\\n    function slice(\\n        bytes memory data,\\n        uint256 start,\\n        uint256 length\\n    ) internal pure returns (bytes memory) {\\n        bytes memory part = new bytes(length);\\n        for (uint256 i = 0; i < length; i++) {\\n            part[i] = data[i + start];\\n        }\\n        return part;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/SafeAmount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n// import \\\"@openzeppelin//contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary SafeAmount {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     @notice transfer tokens from. Incorporate fee on transfer tokens\\n     @param token The token\\n     @param from From address\\n     @param to To address\\n     @param amount The amount\\n     @return result The actual amount transferred\\n     */\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount) internal returns (uint256 result) {\\n        uint256 preBalance = IERC20(token).balanceOf(to);\\n        IERC20(token).safeTransferFrom(from, to, amount);\\n        uint256 postBalance = IERC20(token).balanceOf(to);\\n        result = postBalance - preBalance;\\n        require(result <= amount, \\\"SA: actual amount larger than transfer amount\\\");\\n    }\\n\\n    /**\\n     @notice Sends ETH\\n     @param to The to address\\n     @param value The amount\\n     */\\n\\tfunction safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\"\r\n    },\r\n    \"contracts/common/signature/SigCheckable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n @dev Make sure to define method signatures\\n */\\nabstract contract SigCheckable is EIP712 {\\n\\n    function signerUnique(\\n        bytes32 message,\\n        bytes memory signature) internal view returns (address _signer) {\\n        bytes32 digest;\\n        (digest, _signer) = signer(message, signature);\\n    }\\n\\n    /*\\n        @dev example message;\\n\\n        bytes32 constant METHOD_SIG =\\n            keccak256(\\\"WithdrawSigned(address token,address payee,uint256 amount,bytes32 salt)\\\");\\n        bytes32 message = keccak256(abi.encode(\\n          METHOD_SIG,\\n          token,\\n          payee,\\n          amount,\\n          salt\\n    */\\n    function signer(\\n        bytes32 message,\\n        bytes memory signature) internal view returns (bytes32 digest, address _signer) {\\n        digest = _hashTypedDataV4(message);\\n        _signer = ECDSA.recover(digest, signature);\\n    }\\n}\"\r\n    },\r\n    \"contracts/common/tokenReceiveable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @notice Library for handling safe token transactions including fee per transaction tokens.\\n */\\nabstract contract TokenReceivable is ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  mapping(address => uint256) public inventory; // Amount of received tokens that are accounted for\\n\\n  /**\\n   @notice Sync the inventory of a token based on amount changed\\n   @param token The token address\\n   @return amount The changed amount\\n   */\\n  function sync(address token) internal nonReentrant returns (uint256 amount) {\\n    uint256 inv = inventory[token];\\n    uint256 balance = IERC20(token).balanceOf(address(this));\\n    amount = balance - inv;\\n    inventory[token] = balance;\\n  }\\n\\n  /**\\n   @notice Safely sends a token out and updates the inventory\\n   @param token The token address\\n   @param payee The payee\\n   @param amount The amount\\n   */\\n  function sendToken(address token, address payee, uint256 amount) internal nonReentrant {\\n    inventory[token] = inventory[token] - amount;\\n    IERC20(token).safeTransfer(payee, amount);\\n  }\\n}\"\r\n    },\r\n    \"contracts/common/WithAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract WithAdmin is Ownable {\\n\\taddress public admin;\\n\\tevent AdminSet(address admin);\\n\\n\\tfunction setAdmin(address _admin) external onlyOwner {\\n\\t\\tadmin = _admin;\\n\\t\\temit AdminSet(_admin);\\n\\t}\\n\\n\\tmodifier onlyAdmin() {\\n\\t\\trequire(msg.sender == admin || msg.sender == owner(), \\\"WA: not admin\\\");\\n\\t\\t_;\\n\\t}\\n}\"\r\n    },\r\n    \"contracts/upgradeable-Bridge/FiberRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport \\\"./FundManager.sol\\\";\\nimport \\\"../common/tokenReceiveable.sol\\\";\\nimport \\\"../common/SafeAmount.sol\\\";\\nimport \\\"../common/oneInch/OneInchDecoder.sol\\\";\\nimport \\\"../common/oneInch/IOneInchSwap.sol\\\";\\nimport \\\"../common/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n @author The ferrum network.\\n @title This is a routing contract named as FiberRouter.\\n*/\\ncontract FiberRouter is Ownable, TokenReceivable {\\n    using SafeERC20 for IERC20;\\n    address public pool;\\n    address public oneInchAggregatorRouter;\\n    address public WETH;\\n\\n    event Swap(\\n        address sourceToken,\\n        address targetToken,\\n        uint256 sourceChainId,\\n        uint256 targetChainId,\\n        uint256 sourceAmount,\\n        address sourceAddress,\\n        address targetAddress,\\n        uint256 settledAmount,\\n        bytes32 withdrawalData\\n    );\\n\\n    event Withdraw(\\n        address token,\\n        address receiver,\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes signature\\n    );\\n\\n    event WithdrawOneInch(\\n        address,\\n        uint256,\\n        uint256,\\n        address,\\n        address,\\n        bytes,\\n        bytes32,\\n        bytes\\n    );\\n\\n    event NonEvmSwap(\\n        address sourceToken,\\n        string targetToken,\\n        uint256 sourceChainId,\\n        string targetChainId,\\n        uint256 sourceAmount,\\n        address sourceAddress,\\n        string targetAddress,\\n        uint256 settledAmount,\\n        bytes32 withdrawalData\\n    );\\n    event UnoSwapHandled(\\n        address indexed swapRouter,\\n        address indexed to,\\n        address indexed fromToken,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n    event UniswapV3SwapHandled(\\n        address indexed swapRouter,\\n        address indexed to,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n    event SwapHandled(\\n        address indexed swapRouter,\\n        address indexed to,\\n        address indexed fromToken,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n\\n    /**\\n     * @dev Constructor that sets the WETH address, oneInchAggregator address, and the pool address.\\n     * @param _wethAddress Address of the WETH token contract.\\n     * @param _oneInchAggregator Address of the oneInchAggregator.\\n     * @param _poolAddress Address of the pool.\\n     */\\n    constructor(address _wethAddress, address _oneInchAggregator, address _poolAddress) {\\n        require(_wethAddress != address(0), \\\"WETH address cannot be the zero address\\\");\\n        require(_oneInchAggregator != address(0), \\\"oneInchAggregator address cannot be the zero address\\\");\\n        require(_poolAddress != address(0), \\\"Pool address cannot be the zero address\\\");\\n\\n        WETH = _wethAddress;\\n        oneInchAggregatorRouter = _oneInchAggregator;\\n        pool = _poolAddress;\\n    }\\n\\n    /**\\n     @notice Sets the fund manager contract.\\n     @param _pool The fund manager\\n     */\\n    function setPool(address _pool) external onlyOwner {\\n        require(\\n            _pool != address(0),\\n            \\\"Swap router address cannot be zero\\\"\\n        );\\n        pool = _pool;\\n    }\\n\\n    // Function to set the 1inch Aggregator Router address\\n    function setOneInchAggregatorRouter(address _newRouterAddress)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _newRouterAddress != address(0),\\n            \\\"Swap router address cannot be zero\\\"\\n        );\\n        oneInchAggregatorRouter = _newRouterAddress;\\n    }\\n\\n    /*\\n     @notice Initiate an x-chain swap.\\n     @param token The source token to be swaped\\n     @param amount The source amount\\n     @param targetNetwork The chain ID for the target network\\n     @param targetToken The target token address\\n     @param swapTargetTokenTo Swap the target token to a new token\\n     @param targetAddress Final destination on target\\n     @note asset is direclty transfering from user to our fundManager through fiberRouter\\n     */\\n    function swap(\\n        address token,\\n        uint256 amount,\\n        uint256 targetNetwork,\\n        address targetToken,\\n        address targetAddress,\\n        bytes32 withdrawalData\\n    ) external nonReentrant {\\n        // Validation checks\\n        require(token != address(0), \\\"FR: Token address cannot be zero\\\");\\n        require(\\n            targetToken != address(0),\\n            \\\"FR: Target token address cannot be zero\\\"\\n        );\\n        require(targetNetwork != 0, \\\"FR: targetNetwork is requried\\\");\\n        require(\\n            targetAddress != address(0),\\n            \\\"FR: Target address cannot be zero\\\"\\n        );\\n        require(amount != 0, \\\"FR: Amount must be greater than zero\\\");\\n        require(\\n            withdrawalData != 0,\\n            \\\"FR: withdraw data cannot be empty\\\"\\n        );\\n\\n        amount = SafeAmount.safeTransferFrom(token, _msgSender(), pool, amount);\\n        amount = FundManager(pool).swapToAddress(\\n            token,\\n            amount,\\n            targetNetwork,\\n            targetAddress\\n        );\\n        emit Swap(\\n            token,\\n            targetToken,\\n            block.chainid,\\n            targetNetwork,\\n            amount,\\n            _msgSender(),\\n            targetAddress,\\n            amount,\\n            withdrawalData\\n        );\\n    }\\n\\n    /*\\n     @notice Initiate an x-chain swap.\\n     @param token The source token to be swaped\\n     @param amount The source amount\\n     @param targetNetwork The chain ID for the target network\\n     @param targetToken The target token address\\n     @param swapTargetTokenTo Swap the target token to a new token\\n     @param targetAddress Final destination on target\\n     */\\n    function nonEvmSwap(\\n        address token,\\n        uint256 amount,\\n        string memory targetNetwork,\\n        string memory targetToken,\\n        string memory targetAddress,\\n        bytes32 withdrawalData\\n    ) external nonReentrant {\\n        // Validation checks\\n        require(token != address(0), \\\"FR: Token address cannot be zero\\\");\\n        require(amount != 0, \\\"Amount must be greater than zero\\\");\\n        require(\\n            bytes(targetNetwork).length != 0,\\n            \\\"FR: Target network cannot be empty\\\"\\n        );\\n        require(\\n            bytes(targetToken).length != 0,\\n            \\\"FR: Target token cannot be empty\\\"\\n        );\\n        require(\\n            bytes(targetAddress).length != 0,\\n            \\\"FR: Target address cannot be empty\\\"\\n        );\\n        require(\\n            withdrawalData != 0,\\n            \\\"FR: withdraw data cannot be empty\\\"\\n        );\\n        amount = SafeAmount.safeTransferFrom(token, _msgSender(), pool, amount);\\n        amount = FundManager(pool).nonEvmSwapToAddress(\\n            token,\\n            amount,\\n            targetNetwork,\\n            targetToken,\\n            targetAddress\\n        );\\n        emit NonEvmSwap(\\n            token,\\n            targetToken,\\n            block.chainid,\\n            targetNetwork,\\n            amount,\\n            _msgSender(),\\n            targetAddress,\\n            amount,\\n            withdrawalData\\n        );\\n    }\\n\\n    /*s\\n     @notice Do a local swap and generate a cross-chain swap\\n     @param swapRouter The local swap router\\n     @param amountIn The amount in\\n     @param amountOut Equivalent to amountOut on oneInch\\n     @param path The swap path\\n     @param deadline The swap dealine\\n     @param crossTargetNetwork The target network for the swap\\n     @param crossSwapTargetTokenTo If different than crossTargetToken, a swap\\n       will also be required on the other end\\n     @param crossTargetAddress The target address for the swap\\n     */\\n    function swapAndCrossOneInch(\\n        uint256 amountIn,\\n        uint256 amountOut, // amountOut on oneInch\\n        uint256 crossTargetNetwork,\\n        address crossTargetToken,\\n        address crossTargetAddress,\\n        bytes memory oneInchData,\\n        address fromToken,\\n        address foundryToken,\\n        bytes32 withdrawalData\\n    ) external nonReentrant {\\n        // Validation checks\\n        require(\\n            fromToken != address(0),\\n            \\\"FR: From token address cannot be zero\\\"\\n        );\\n        require(\\n            foundryToken != address(0),\\n            \\\"FR: Foundry token address cannot be zero\\\"\\n        );\\n        require(\\n            crossTargetToken != address(0),\\n            \\\"FR: Cross target token address cannot be zero\\\"\\n        );\\n        require(amountIn != 0, \\\"FR: Amount in must be greater than zero\\\");\\n        require(amountOut != 0, \\\"FR: Amount out must be greater than zero\\\");\\n        require(\\n            bytes(oneInchData).length != 0,\\n            \\\"FR: 1inch data cannot be empty\\\"\\n        );\\n        require(\\n            withdrawalData != 0,\\n            \\\"FR: withdraw data cannot be empty\\\"\\n        );\\n        amountIn = SafeAmount.safeTransferFrom(\\n            fromToken,\\n            _msgSender(),\\n            address(this),\\n            amountIn\\n        );\\n        uint256 settledAmount = _swapAndCrossOneInch(\\n            amountIn,\\n            amountOut,\\n            crossTargetNetwork,\\n            crossTargetAddress,\\n            oneInchData,\\n            fromToken,\\n            foundryToken\\n        );\\n        emit Swap(\\n            fromToken,\\n            crossTargetToken,\\n            block.chainid,\\n            crossTargetNetwork,\\n            amountIn,\\n            _msgSender(),\\n            crossTargetAddress,\\n            settledAmount,\\n            withdrawalData\\n        );\\n    }\\n\\n    /*\\n     @notice Do a local swap and generate a cross-chain swap\\n     @param swapRouter The local swap router\\n     @param amountIn The amount in\\n     @param amountOut Equivalent to amountOut on oneInch\\n     @param path The swap path\\n     @param deadline The swap dealine\\n     @param crossTargetNetwork The target network for the swap\\n     @param crossSwapTargetTokenTo If different than crossTargetToken, a swap\\n       will also be required on the other end\\n     @param crossTargetAddress The target address for the swap\\n     */\\n    function nonEvmSwapAndCrossOneInch(\\n        uint256 amountIn,\\n        uint256 amountOut, // amountOut on oneInch\\n        string memory crossTargetNetwork, //cudos-1\\n        string memory crossTargetToken, //acudos\\n        string memory crossTargetAddress, //acudosXYZ\\n        bytes memory oneInchData,\\n        address fromToken,\\n        address foundryToken,\\n        bytes32 withdrawalData\\n    ) external nonReentrant {\\n        // Validation checks\\n        require(fromToken != address(0), \\\"From token address cannot be zero\\\");\\n        require(\\n            foundryToken != address(0),\\n            \\\"Foundry token address cannot be zero\\\"\\n        );\\n        require(amountIn != 0, \\\"Amount in must be greater than zero\\\");\\n        require(\\n            amountOut != 0,\\n            \\\"Amount cross minimum must be greater than zero\\\"\\n        );\\n        require(bytes(oneInchData).length != 0, \\\"1inch data cannot be empty\\\");\\n        require(\\n            bytes(crossTargetNetwork).length != 0,\\n            \\\"Cross target network cannot be empty\\\"\\n        );\\n        require(\\n            bytes(crossTargetToken).length != 0,\\n            \\\"Cross target token cannot be empty\\\"\\n        );\\n        require(\\n            bytes(crossTargetAddress).length != 0,\\n            \\\"Cross target address cannot be empty\\\"\\n        );\\n        require(\\n            withdrawalData != 0,\\n            \\\"FR: withdraw data cannot be empty\\\"\\n        );\\n        amountIn = SafeAmount.safeTransferFrom(\\n            fromToken,\\n            _msgSender(),\\n            address(this),\\n            amountIn\\n        );\\n        uint256 settledAmount = _nonEvmSwapAndCrossOneInch(\\n            amountIn,\\n            amountOut,\\n            crossTargetNetwork,\\n            crossTargetToken,\\n            crossTargetAddress,\\n            oneInchData,\\n            fromToken,\\n            foundryToken\\n        );\\n        emit NonEvmSwap(\\n            fromToken,\\n            crossTargetToken,\\n            block.chainid,\\n            crossTargetNetwork,\\n            amountIn,\\n            _msgSender(),\\n            crossTargetAddress,\\n            settledAmount,\\n            withdrawalData\\n        );\\n    }\\n\\n        /**\\n     @notice Performs a local ETH swap and generates a cross-chain swap\\n     @param amountOut Expected output amount on oneInch\\n     @param crossTargetNetwork Target network for the cross-chain swap\\n     @param crossTargetToken Token address on the target network\\n     @param crossTargetAddress Address receiving the tokens on the target network\\n     @param oneInchData Encoded data for oneInch swap\\n     @param foundryToken Foundry token address involved in the swap\\n     @param withdrawalData Data related to withdrawal in the swap process\\n     */\\n    function swapAndCrossOneInchETH(\\n        uint256 amountOut, // amountOut on oneInch\\n        uint256 crossTargetNetwork,\\n        address crossTargetToken,\\n        address crossTargetAddress,\\n        bytes memory oneInchData,\\n        address foundryToken,\\n        bytes32 withdrawalData\\n    ) external payable {\\n        uint256 amountIn = msg.value;\\n\\n        // Validation checks\\n        require(amountIn != 0, \\\"FR: Amount in must be greater than zero\\\");\\n        require(amountOut != 0, \\\"FR: Amount out must be greater than zero\\\");\\n        require(crossTargetToken != address(0), \\\"FR: Cross target token address cannot be zero\\\");\\n        require(bytes(oneInchData).length != 0, \\\"FR: 1inch data cannot be empty\\\");\\n        require(foundryToken != address(0), \\\"FR: Foundry token address cannot be zero\\\");\\n        require(withdrawalData != 0, \\\"FR: Withdraw data cannot be empty\\\");\\n\\n        // Deposit ETH and get WETH\\n        IWETH(WETH).deposit{value: amountIn}();\\n\\n        // Execute swap and cross-chain operation\\n        uint256 settledAmount = _swapAndCrossOneInch(\\n            amountIn,\\n            amountOut,\\n            crossTargetNetwork,\\n            crossTargetAddress,\\n            oneInchData,\\n            WETH,\\n            foundryToken\\n        );\\n\\n        // Emit Swap event\\n        emit Swap(\\n            WETH,\\n            crossTargetToken,\\n            block.chainid,\\n            crossTargetNetwork,\\n            amountIn,\\n            _msgSender(),\\n            crossTargetAddress,\\n            settledAmount,\\n            withdrawalData\\n        );\\n    }\\n\\n    /*\\n     @notice Withdraws funds based on a multisig\\n     @dev For signature swapToToken must be the same as token\\n     @param token The token to withdraw\\n     @param payee Address for where to send the tokens to\\n     @param amount The mount\\n     @param sourceChainId The source chain initiating the tx\\n     @param swapTxId The txId for the swap from the source chain\\n     @param multiSignature The multisig validator signature\\n     */\\n    function withdrawSigned(\\n        address token,\\n        address payee,\\n        uint256 amount,\\n        bytes32 salt,\\n        uint256 expiry,\\n        bytes memory multiSignature\\n    ) external nonReentrant {\\n        // Validation checks\\n        require(token != address(0), \\\"FR: Token address cannot be zero\\\");\\n        require(payee != address(0), \\\"Payee address cannot be zero\\\");\\n        require(amount != 0, \\\"Amount must be greater than zero\\\");\\n        require(salt > bytes32(0), \\\"salt must be greater than zero bytes\\\");\\n        // need to add restrictions\\n        amount = FundManager(pool).withdrawSigned(\\n            token,\\n            payee,\\n            amount,\\n            salt,\\n            expiry,\\n            multiSignature\\n        );\\n        emit Withdraw(token, payee, amount, salt, multiSignature);\\n    }\\n\\n    /*\\n     @notice Withdraws funds and swaps to a new token\\n     @param to Address for where to send the tokens to\\n     @param swapRouter The swap router address\\n     @param amountIn The amount to swap\\n     @param sourceChainId The source chain Id. Used for signature\\n     @param swapTxId The source tx Id. Used for signature\\n     @param amountOut Same as amountOut on oneInch\\n     @param path The swap path\\n     @param deadline The swap deadline\\n     @param multiSignature The multisig validator signature\\n     */\\n    function withdrawSignedAndSwapOneInch(\\n        address payable to,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address foundryToken,\\n        address targetToken,\\n        bytes memory oneInchData,\\n        bytes32 salt,\\n        uint256 expiry,\\n        bytes memory multiSignature\\n    ) external nonReentrant {\\n        require(foundryToken != address(0), \\\"Bad Token Address\\\");\\n        require(\\n            targetToken != address(0),\\n            \\\"FR: Target token address cannot be zero\\\"\\n        );\\n        require(amountIn != 0, \\\"Amount in must be greater than zero\\\");\\n        require(amountOut != 0, \\\"Amount out minimum must be greater than zero\\\");\\n        require(foundryToken != address(0), \\\"Bad Token Address\\\");\\n        FundManager(pool).withdrawSignedOneInch(\\n            to,\\n            amountIn,\\n            amountOut,\\n            foundryToken,\\n            targetToken,\\n            oneInchData,\\n            salt,\\n            expiry,\\n            multiSignature\\n        );\\n        amountIn = IERC20(foundryToken).balanceOf(address(this));\\n        IERC20(foundryToken).safeApprove(oneInchAggregatorRouter, amountIn);\\n        uint256 amountOutOneInch = swapHelperForOneInch(\\n            to,\\n            foundryToken,\\n            amountIn,\\n            amountOut,\\n            oneInchData\\n        );\\n        require(amountOutOneInch != 0, \\\"FR: Bad amount out from oneInch\\\");\\n        emit WithdrawOneInch(\\n            to,\\n            amountIn,\\n            amountOutOneInch,\\n            foundryToken,\\n            targetToken,\\n            oneInchData,\\n            salt,\\n            multiSignature\\n        );\\n    }\\n\\n\\n    function swapHelperForOneInch(\\n        address payable to,\\n        address srcToken,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        bytes memory oneInchData\\n    ) internal returns (uint256 returnAmount) {\\n        // Extract the first 4 bytes from data\\n        bytes4 receivedSelector;\\n        assembly {\\n            // Extract the first 4 bytes directly from the data\\n            // Assuming 'data' starts with the 4-byte function selector\\n            receivedSelector := mload(add(oneInchData, 32))\\n        }\\n\\n        // checking the function signature accoridng to oneInchData\\n        if (receivedSelector == OneInchDecoder.selectorUnoswap) {\\n            returnAmount = handleUnoSwap(to, srcToken, amountIn, amountOut, oneInchData);\\n        } else if (receivedSelector == OneInchDecoder.selectorUniswapV3Swap) {\\n            returnAmount = handleUniswapV3Swap(to, amountIn, amountOut, oneInchData);\\n        } else if (receivedSelector == OneInchDecoder.selectorSwap) {\\n            returnAmount = handleSwap(to, srcToken, amountIn, amountOut, oneInchData);\\n        } else {\\n            revert(\\\"FR: incorrect oneInchData\\\");\\n        }\\n    }\\n\\n    function handleUnoSwap(\\n        address payable to,\\n        address fromToken,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        bytes memory oneInchData\\n    ) internal returns (uint256 returnAmount) {\\n        (\\n            address payable recipient,\\n            address srcToken,\\n            uint256 amount,\\n            uint256 minReturn,\\n            uint256[] memory poolsOneInch\\n        ) = OneInchDecoder.decodeUnoswap(oneInchData);\\n        require(to == recipient, \\\"FR: recipient address bad oneInch Data\\\");\\n        require(fromToken == srcToken, \\\"FR: srcToken bad oneInch Data\\\");\\n        require(amountIn == amount, \\\"FR: inputAmount bad oneInch Data\\\");\\n        require(amountOut == minReturn, \\\"FR: outAmount bad oneInch Data\\\");\\n        require(oneInchData.length >= 4, \\\"Data too short for valid call\\\");\\n        returnAmount = IOneInchSwap(oneInchAggregatorRouter).unoswapTo(\\n            recipient,\\n            srcToken,\\n            amount,\\n            minReturn,\\n            poolsOneInch\\n        );\\n        emit UnoSwapHandled(\\n            oneInchAggregatorRouter,\\n            to,\\n            fromToken,\\n            amountIn,\\n            returnAmount //should return by the unoSwap\\n        );\\n    }\\n\\n    function handleUniswapV3Swap(\\n        address payable to,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        bytes memory oneInchData\\n    ) internal returns (uint256 returnAmount) {\\n        (\\n            address payable recipient,\\n            uint256 amount,\\n            uint256 minReturn,\\n            uint256[] memory poolsOneInch\\n        ) = OneInchDecoder.decodeUniswapV3Swap(oneInchData);\\n        require(to == recipient, \\\"FR: recipient address bad oneInch Data\\\");\\n        require(amountIn == amount, \\\"FR: inputAmount bad oneInch Data\\\");\\n        require(amountOut == minReturn, \\\"FR: outAmount bad oneInch Data\\\");\\n        require(oneInchData.length >= 4, \\\"Data too short for valid call\\\");\\n        returnAmount = IOneInchSwap(oneInchAggregatorRouter).uniswapV3SwapTo(\\n            recipient,\\n            amount,\\n            minReturn,\\n            poolsOneInch\\n        );\\n        emit UniswapV3SwapHandled(\\n            oneInchAggregatorRouter,\\n            to,\\n            amountIn,\\n            returnAmount //should be returned by uniswapV3SwapTo\\n        );\\n    }\\n\\n    function handleSwap(\\n        address payable to,\\n        address fromToken,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        bytes memory oneInchData\\n    ) internal returns (uint256 returnAmount) {\\n        // Decoding oneInchData to get the required parameters\\n        (\\n            address executor,\\n            OneInchDecoder.SwapDescription memory desc,\\n            bytes memory permit,\\n            bytes memory swapData\\n        ) = OneInchDecoder.decodeSwap(oneInchData);\\n        // Manually create a new SwapDescription for IOneInchSwap\\n        IOneInchSwap.SwapDescription memory oneInchDesc = IOneInchSwap\\n            .SwapDescription({\\n                srcToken: IERC20(desc.srcToken),\\n                dstToken: IERC20(desc.dstToken),\\n                srcReceiver: desc.srcReceiver,\\n                dstReceiver: desc.dstReceiver,\\n                amount: desc.amount,\\n                minReturnAmount: desc.minReturnAmount,\\n                flags: desc.flags\\n            });\\n\\n        // Accessing fields of the desc instance of SwapDescription struct\\n        require(\\n            to == desc.dstReceiver,\\n            \\\"FR: recipient address bad oneInch Data\\\"\\n        );\\n        require(amountIn == desc.amount, \\\"FR: inputAmount bad oneInch Data\\\");\\n        require(\\n            amountOut == desc.minReturnAmount,\\n            \\\"FR: outAmount bad oneInch Data\\\"\\n        );\\n        require(fromToken == desc.srcToken, \\\"FR: srcToken bad oneInch Data\\\");\\n\\n        // Additional safety check\\n        require(oneInchData.length >= 4, \\\"Data too short for valid call\\\");\\n\\n        // Performing the swap\\n        ( returnAmount,) = IOneInchSwap(oneInchAggregatorRouter).swap(\\n            executor,\\n            oneInchDesc,\\n            permit,\\n            swapData\\n        );\\n        emit SwapHandled(\\n            oneInchAggregatorRouter,\\n            to,\\n            fromToken,\\n            amountIn,\\n            returnAmount // should be returned \\n        );\\n    }\\n\\n    function _swapAndCrossOneInch(\\n        uint256 amountIn,\\n        uint256 amountOut, // amountOut on oneInch\\n        uint256 crossTargetNetwork,\\n        address crossTargetAddress,\\n        bytes memory oneInchData,\\n        address fromToken,\\n        address foundryToken\\n    ) internal returns (uint256 FMAmountOut){\\n        IERC20(fromToken).safeApprove(oneInchAggregatorRouter, amountIn);\\n        uint256 oneInchAmountOut = swapHelperForOneInch(\\n            payable(pool),\\n            fromToken,\\n            amountIn,\\n            amountOut,\\n            oneInchData\\n        );\\n        FMAmountOut = FundManager(pool).swapToAddress(\\n            foundryToken,\\n            amountOut,\\n            crossTargetNetwork,\\n            crossTargetAddress\\n        );\\n        require(\\n            FMAmountOut >= oneInchAmountOut,\\n            \\\"FR: Bad FM or OneInch Amount Out\\\"\\n        );\\n    }\\n\\n    function _nonEvmSwapAndCrossOneInch(\\n        uint256 amountIn,\\n        uint256 amountOut, // amountOut on oneInch\\n        string memory crossTargetNetwork, //cudos-1\\n        string memory crossTargetToken, //acudos\\n        string memory crossTargetAddress, //acudosXYZ\\n        bytes memory oneInchData,\\n        address fromToken,\\n        address foundryToken\\n    ) internal returns (uint256 FMAmountOut){\\n        IERC20(fromToken).safeApprove(oneInchAggregatorRouter, amountIn);\\n        uint256 oneInchAmountOut = swapHelperForOneInch(\\n            payable(pool),\\n            fromToken,\\n            amountIn,\\n            amountOut,\\n            oneInchData\\n        );\\n        FMAmountOut = FundManager(pool).nonEvmSwapToAddress(\\n            foundryToken,\\n            amountOut,\\n            crossTargetNetwork,\\n            crossTargetToken,\\n            crossTargetAddress\\n        );\\n        require(\\n            FMAmountOut >= oneInchAmountOut,\\n            \\\"FR: Bad FM or OneInch Amount Out\\\"\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/upgradeable-Bridge/FundManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../common/signature/SigCheckable.sol\\\";\\nimport \\\"../common/WithAdmin.sol\\\";\\nimport \\\"../common/SafeAmount.sol\\\";\\nimport \\\"../common/tokenReceiveable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract FundManager is SigCheckable, WithAdmin, TokenReceivable {\\n    using SafeERC20 for IERC20;\\n\\n    address public router;\\n    uint32 constant WEEK = 3600 * 24 * 7;\\n    string public constant NAME = \\\"FUND_MANAGER\\\";\\n    string public constant VERSION = \\\"000.004\\\";\\n    bytes32 constant WITHDRAW_SIGNED_METHOD =\\n        keccak256(\\n            \\\"WithdrawSigned(address token,address payee,uint256 amount,bytes32 salt,uint256 expiry)\\\"\\n        );\\n    bytes32 constant WITHDRAW_SIGNED_ONEINCH__METHOD =\\n        keccak256(\\n            \\\"WithdrawSignedOneInch(address to,uint256 amountIn,uint256 amountOut,address foundryToken,address targetToken,bytes oneInchData,bytes32 salt,uint256 expiry)\\\"\\n        );\\n\\n    event TransferBySignature(\\n        address signer,\\n        address receiver,\\n        address token,\\n        uint256 amount\\n    );\\n    event BridgeLiquidityAdded(address actor, address token, uint256 amount);\\n    event BridgeLiquidityRemoved(address actor, address token, uint256 amount);\\n    event BridgeSwap(\\n        address from,\\n        address indexed token,\\n        uint256 targetNetwork,\\n        address targetToken,\\n        address targetAddrdess,\\n        uint256 amount\\n    );\\n    event nonEvmBridgeSwap(\\n        address from,\\n        address indexed token,\\n        string targetNetwork,\\n        string targetToken,\\n        string targetAddrdess,\\n        uint256 amount\\n    );\\n\\n    mapping(address => bool) public signers;\\n    mapping(address => mapping(address => uint256)) private liquidities;\\n    mapping(address => mapping(uint256 => address)) public allowedTargets;\\n    mapping(address => mapping(string => string)) public nonEvmAllowedTargets;\\n    mapping(address => bool) public isFoundryAsset;\\n    mapping(bytes32=>bool) public usedSalt;\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"FM: Only router method\\\");\\n        _;\\n    }\\n\\n    //initialize function is constructor for upgradeable smart contract\\n    constructor() EIP712(NAME, VERSION) {}\\n\\n    /**\\n     *************** Owner only operations ***************\\n     */\\n\\n    /*\\n     @notice sets the router\\n     */\\n    function setRouter(address _router) external onlyOwner {\\n        require(_router != address(0), \\\"FM: router requried\\\");\\n        router = _router;\\n    }\\n\\n    function addSigner(address _signer) external onlyOwner {\\n        require(_signer != address(0), \\\"Bad signer\\\");\\n        signers[_signer] = true;\\n    }\\n\\n    function removeSigner(address _signer) external onlyOwner {\\n        require(_signer != address(0), \\\"Bad signer\\\");\\n        delete signers[_signer];\\n    }\\n\\n    function allowTarget(\\n        address token,\\n        uint256 chainId,\\n        address targetToken\\n    ) external onlyAdmin {\\n        require(token != address(0), \\\"Bad token\\\");\\n        require(targetToken != address(0), \\\"Bad targetToken\\\");\\n        require(chainId != 0, \\\"Bad chainId\\\");\\n        allowedTargets[token][chainId] = targetToken;\\n    }\\n\\n    function nonEvmAllowTarget(\\n        address token,\\n        string memory chainId,\\n        string memory targetToken\\n    ) external onlyAdmin {\\n        require(token != address(0), \\\"Bad token\\\");\\n        require(bytes(chainId).length != 0, \\\"Chain ID cannot be empty\\\");\\n        require(bytes(targetToken).length != 0, \\\"Target token cannot be empty\\\");\\n\\n        nonEvmAllowedTargets[token][chainId] = targetToken;\\n    }\\n\\n    function disallowTarget(address token, uint256 chainId) external onlyAdmin {\\n        require(token != address(0), \\\"Bad token\\\");\\n        require(chainId != 0, \\\"Bad chainId\\\");\\n        delete allowedTargets[token][chainId];\\n    }\\n\\n    function nonEvmDisallowTarget(address token, string memory chainId)\\n        external\\n        onlyAdmin\\n    {\\n        require(token != address(0), \\\"Bad token\\\");\\n        require(bytes(chainId).length != 0, \\\"Chain ID cannot be empty\\\");\\n        delete nonEvmAllowedTargets[token][chainId];\\n    }\\n\\n    function addFoundryAsset(address token) external onlyAdmin {\\n        require(token != address(0), \\\"Bad token\\\");\\n        isFoundryAsset[token] = true;\\n    }\\n\\n    function removeFoundryAsset(address token) external onlyAdmin {\\n        require(token != address(0), \\\"Bad token\\\");\\n        isFoundryAsset[token] = false;\\n    }\\n\\n    function swapToAddress(\\n        address token,\\n        uint256 amount,\\n        uint256 targetNetwork,\\n        address targetAddress\\n    ) external onlyRouter returns(uint256) {\\n        address targetToken = allowedTargets[token][targetNetwork];\\n        require(msg.sender != address(0), \\\"FM: bad from\\\");\\n        require(token != address(0), \\\"FM: bad token\\\");\\n        require(targetNetwork != 0, \\\"FM: targetNetwork is requried\\\");\\n        require(targetToken != address(0), \\\"FM: bad target token\\\");\\n        require(targetAddress != address(0), \\\"FM: targetAddress is required\\\");\\n        require(amount != 0, \\\"FM: bad amount\\\");\\n        amount = TokenReceivable.sync(token);\\n        emit BridgeSwap(\\n            msg.sender,\\n            token,\\n            targetNetwork,\\n            targetToken,\\n            targetAddress,\\n            amount\\n        );\\n        return amount;\\n    }\\n\\n    function nonEvmSwapToAddress(\\n        address token,\\n        uint256 amount,\\n        string memory targetNetwork,\\n        string memory targetToken,\\n        string memory targetAddress\\n    ) external onlyRouter returns (uint256) {\\n        require(msg.sender != address(0), \\\"FM: bad from\\\");\\n        require(token != address(0), \\\"FM: bad token\\\");\\n        require(amount != 0, \\\"FM: bad amount\\\");\\n        require(bytes(targetNetwork).length != 0, \\\"FM: empty target network\\\");\\n        require(bytes(targetToken).length != 0, \\\"FM: empty target token\\\");\\n        require(bytes(targetAddress).length != 0, \\\"FM: empty target address\\\");\\n        require(\\n            keccak256(\\n                abi.encodePacked(nonEvmAllowedTargets[token][targetNetwork])\\n            ) == keccak256(abi.encodePacked(targetToken)),\\n            \\\"FM: target not allowed\\\"\\n        );\\n        amount = TokenReceivable.sync(token);\\n        emit nonEvmBridgeSwap(\\n            msg.sender,\\n            token,\\n            targetNetwork,\\n            targetToken,\\n            targetAddress,\\n            amount\\n        );\\n        return amount;\\n    }\\n\\n    function withdrawSigned(\\n        address token,\\n        address payee,\\n        uint256 amount,\\n        bytes32 salt,\\n        uint256 expiry,\\n        bytes memory signature\\n    ) external onlyRouter returns (uint256) {\\n        require(token != address(0), \\\"FM: bad token\\\");\\n        require(payee != address(0), \\\"FM: bad payee\\\");\\n        require(salt != 0, \\\"FM: bad salt\\\");\\n        require(amount != 0, \\\"FM: bad amount\\\");\\n        require(block.timestamp < expiry, \\\"FM: signature timed out\\\");\\n        require(expiry < block.timestamp + WEEK, \\\"FM: expiry too far\\\");\\n        bytes32 message =  keccak256(\\n                abi.encode(WITHDRAW_SIGNED_METHOD, token, payee, amount, salt, expiry)\\n            );\\n        address _signer = signerUnique(message, signature);\\n        require(signers[_signer], \\\"FM: Invalid signer\\\");\\n        require(!usedSalt[salt], \\\"FM: salt already used\\\");\\n        usedSalt[salt] = true;\\n        TokenReceivable.sendToken(token, payee, amount);\\n        emit TransferBySignature(_signer, payee, token, amount);\\n        return amount;\\n    }\\n\\n    function withdrawSignedOneInch(\\n        address to,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address foundryToken,\\n        address targetToken,\\n        bytes memory oneInchData,\\n        bytes32 salt,\\n        uint256 expiry,\\n        bytes memory signature\\n    ) external onlyRouter returns (uint256) {\\n        require(targetToken != address(0), \\\"FM: bad token\\\");\\n        require(foundryToken != address(0), \\\"FM: bad token\\\");\\n        require(to != address(0), \\\"FM: bad payee\\\");\\n        require(salt != 0, \\\"FM: bad salt\\\");\\n        require(amountIn != 0, \\\"FM: bad amount\\\");\\n        require(amountOut != 0, \\\"FM: bad amount\\\");\\n        require(block.timestamp < expiry, \\\"FM: signature timed out\\\");\\n        require(expiry < block.timestamp + WEEK, \\\"FM: expiry too far\\\");\\n\\n        bytes32 message =  keccak256(\\n                abi.encode(\\n                    WITHDRAW_SIGNED_ONEINCH__METHOD,\\n                    to,\\n                    amountIn,\\n                    amountOut,\\n                    foundryToken,\\n                    targetToken,\\n                    oneInchData,\\n                    salt,\\n                    expiry\\n                )\\n            );\\n        address _signer = signerUnique(message, signature);\\n        require(signers[_signer], \\\"FM: Invalid signer\\\");\\n        require(!usedSalt[salt], \\\"FM: Salt already used\\\");\\n        usedSalt[salt] = true;\\n        TokenReceivable.sendToken(foundryToken, router, amountIn);\\n        emit TransferBySignature(_signer, router, foundryToken, amountIn);\\n        return amountIn;\\n    }\\n\\n    function withdrawSignedVerify(\\n        address token,\\n        address payee,\\n        uint256 amount,\\n        bytes32 salt,\\n        uint256 expiry,\\n        bytes calldata signature\\n    ) external view returns (bytes32, address) {\\n        bytes32 message = keccak256(\\n                abi.encode(WITHDRAW_SIGNED_METHOD, token, payee, amount, salt, expiry)\\n            );\\n        (bytes32 digest, address _signer) = signer(message, signature);\\n        return (digest, _signer);\\n    }\\n\\n    function withdrawSignedOneInchVerify(\\n        address to,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address foundryToken,\\n        address targetToken,\\n        bytes memory oneInchData,\\n        bytes32 salt,\\n        uint256 expiry,\\n        bytes calldata signature\\n    ) external view returns (bytes32, address) {\\n        bytes32 message =  keccak256(\\n                abi.encode(\\n                    WITHDRAW_SIGNED_ONEINCH__METHOD,\\n                    to,\\n                    amountIn,\\n                    amountOut,\\n                    foundryToken,\\n                    targetToken,\\n                    oneInchData,\\n                    salt,\\n                    expiry\\n                )\\n            );\\n        (bytes32 digest, address _signer) = signer(message, signature);\\n        return (digest, _signer);\\n    }\\n\\n    function addLiquidity(address token, uint256 amount) external {\\n        require(amount != 0, \\\"Amount must be positive\\\");\\n        require(token != address(0), \\\"Bad token\\\");\\n        require(\\n            isFoundryAsset[token] == true,\\n            \\\"Only foundry assets can be added\\\"\\n        );\\n        liquidities[token][msg.sender] += amount;\\n        amount = SafeAmount.safeTransferFrom(\\n            token,\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n        amount = TokenReceivable.sync(token);\\n        emit BridgeLiquidityAdded(msg.sender, token, amount);\\n    }\\n\\n    function removeLiquidityIfPossible(address token, uint256 amount)\\n        external\\n        returns (uint256)\\n    {\\n        require(amount != 0, \\\"Amount must be positive\\\");\\n        require(token != address(0), \\\"Bad token\\\");\\n        require(\\n            isFoundryAsset[token] == true,\\n            \\\"Only foundry assets can be removed\\\"\\n        );\\n        uint256 liq = liquidities[token][msg.sender];\\n        require(liq >= amount, \\\"Not enough liquidity\\\");\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        uint256 actualLiq = balance > amount ? amount : balance;\\n\\n        if (actualLiq != 0) {\\n            liquidities[token][msg.sender] -= actualLiq;\\n            TokenReceivable.sendToken(token, msg.sender, actualLiq);\\n            emit BridgeLiquidityRemoved(msg.sender, token, amount);\\n        }\\n        return actualLiq;\\n    }\\n\\n    function liquidity(address token, address liquidityAdder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return liquidities[token][liquidityAdder];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/common/oneInch/OneInchDecoder.sol\": {\r\n        \"OneInchDecoder\": \"0xc9c1c8c1b6b01756fae85a170d1d52f26d0d23a6\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oneInchAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetToken\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetChainId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settledAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalData\",\"type\":\"bytes32\"}],\"name\":\"NonEvmSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settledAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalData\",\"type\":\"bytes32\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwapHandled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"UniswapV3SwapHandled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"UnoSwapHandled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"WithdrawOneInch\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inventory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"targetNetwork\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"targetToken\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawalData\",\"type\":\"bytes32\"}],\"name\":\"nonEvmSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"crossTargetNetwork\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"crossTargetToken\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"crossTargetAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"oneInchData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"foundryToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawalData\",\"type\":\"bytes32\"}],\"name\":\"nonEvmSwapAndCrossOneInch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneInchAggregatorRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRouterAddress\",\"type\":\"address\"}],\"name\":\"setOneInchAggregatorRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetNetwork\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawalData\",\"type\":\"bytes32\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crossTargetNetwork\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"crossTargetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crossTargetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"oneInchData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"foundryToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawalData\",\"type\":\"bytes32\"}],\"name\":\"swapAndCrossOneInch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"crossTargetNetwork\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"crossTargetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crossTargetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"oneInchData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"foundryToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawalData\",\"type\":\"bytes32\"}],\"name\":\"swapAndCrossOneInchETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"multiSignature\",\"type\":\"bytes\"}],\"name\":\"withdrawSigned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"foundryToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"oneInchData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"multiSignature\",\"type\":\"bytes\"}],\"name\":\"withdrawSignedAndSwapOneInch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FiberRouter", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000001111111254eeb25477b68fb85ed929f73a960582000000000000000000000000b14fc4078c4c3b1d9ccade2a0ab70f3e5f209f58", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}