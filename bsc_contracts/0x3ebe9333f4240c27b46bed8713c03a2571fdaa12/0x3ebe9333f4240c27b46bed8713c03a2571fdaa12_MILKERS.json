{"SourceCode": "// File: contracts/MILKERS.sol\r\n\r\n// MOMMY MILKERS\r\n// t.me/milkersBSC\r\n//\r\n//\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary SafeMath {\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    } \r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function symbol() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address public owner;\r\n    constructor(address owner_) {\r\n        owner = owner_;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Ownership required.\"); _;\r\n    }\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        address oldOwner = owner;\r\n        owner = adr;\r\n        emit OwnershipTransferred(oldOwner, owner);\r\n    }\r\n\tfunction renouceOwnership() public onlyOwner {\r\n\t\temit OwnershipTransferred(owner, address(0));\r\n\t\towner = address(0);\r\n\t}\r\n    event OwnershipTransferred(address from, address to);\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function process(uint256 gas) external;\r\n    function claimDividend() external;\r\n    function deposit() external payable;\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n    address _token;\r\n\t\r\n    IBEP20 BUSD = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56); // Mainnet\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // Mainnet\r\n//    IBEP20 BUSD = IBEP20(0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee); // Testnet\r\n//    address WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd; // Testnet\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n    IDEXRouter router;\r\n    mapping (address => Share) public shares;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    uint256 public totalShares;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderClaims;\r\n    uint256 public minPeriod = 1 hours; // min 1 hour delay\r\n    uint256 public minDistribution = 1 * (10 ** 18); // 1 BUSD minimum auto send\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 currentIndex;\r\n    bool initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n    constructor (address _router) {\r\n        router = _router != address(0)\r\n            ? IDEXRouter(_router)\r\n            : IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // Mainnet\r\n//  \t\t: IDEXRouter(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); // Testnet\r\n        _token = msg.sender;\r\n    }\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = BUSD.balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(BUSD);\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 amount = BUSD.balanceOf(address(this)).sub(balanceBefore);\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if(shareholderCount == 0) { return; }\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            BUSD.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n    function claimDividend() external override {\r\n        distributeDividend(msg.sender);\r\n    }\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n}\r\n\r\ncontract MILKERS is IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string constant _name = \"MOMMY\";\r\n    string constant _symbol = \"MILKERS\";\r\n    uint8 constant _decimals = 9;\r\n    uint256 _totalSupply = 10 ** 12 * (10 ** _decimals);\r\n    uint256 public liquidityFee = 30;\r\n    uint256 public burnFee = 0;\r\n    uint256 public reflectionFee = 50;\r\n    uint256 public marketingFee = 40;\r\n    uint256 public buybackFee = 0;\r\n    uint256 public _maxTxAmount = _totalSupply / 10;\r\n    uint256 public _maxHold = _totalSupply / 100;\r\n    address public marketingFeeReceiver = 0x4353b463b8F08b5A7496c08A5c4016e09Dad5B8b;\r\n    address public buybackFeeReceiver = 0x4353b463b8F08b5A7496c08A5c4016e09Dad5B8b;\r\n\r\n    address BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Mainnet\r\n\taddress WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // Mainnet\r\n//\taddress BUSD = 0xeD24FC36d5Ee211Ea25A80239Fb8C4Cfd80f12Ee; // Testnet\r\n//  address WBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd; // Testnet\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    mapping (address => bool) isMaxHoldExempt;\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isDividendExempt;\r\n    uint256 public feeDenominator = 1000;\r\n    uint256 totalFee = liquidityFee + reflectionFee + marketingFee + buybackFee + burnFee;\r\n    address public autoLiquidityReceiver;\r\n    address[] public pairs;\r\n    IDEXRouter public router;\r\n    address pancakeV2BNBPair;\r\n    DividendDistributor distributor;\r\n    uint256 distributorGas = 600000;\r\n    uint256 public launchedAt;\r\n    bool public liquifyEnabled = true;\r\n    bool public feesOnNormalTransfers = false;\r\n    bool public swapEnabled = true;\r\n    bool inSwap;\r\n    uint256 public swapThreshold = _totalSupply / 5000; // 0.02%\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n    event SwapBackSuccess(uint256 amount);\r\n    event Launched(uint256 blockNumber, uint256 timestamp);\r\n    event BuybackTransfer(bool status);\r\n    event SwapBackFailed(string message);\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n    event MarketTransfer(bool status);\r\n    constructor () Ownable(msg.sender) {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // Mainnet\r\n//\t\trouter = IDEXRouter(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); // Testnet\r\n        \r\n\t\tautoLiquidityReceiver = DEAD;\r\n        pancakeV2BNBPair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[address(this)][address(router)] = ~uint256(0);\r\n        pairs.push(pancakeV2BNBPair);\r\n        distributor = new DividendDistributor(address(router));\r\n        address owner_ = msg.sender;\r\n        isDividendExempt[DEAD] = true;\r\n        isMaxHoldExempt[DEAD] = true;\r\n        isMaxHoldExempt[pancakeV2BNBPair] = true;\r\n        isDividendExempt[pancakeV2BNBPair] = true;\r\n        isMaxHoldExempt[address(this)] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n        isFeeExempt[owner_] = true;\r\n        isTxLimitExempt[owner_] = true;\r\n        isMaxHoldExempt[owner_] = true;\r\n        _balances[owner_] = _totalSupply;\r\n        emit Transfer(address(0), owner_, _totalSupply);\r\n    }\r\n    receive() external payable { }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != ~uint256(0)){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n        checkTxLimit(sender, amount);\r\n        if(shouldSwapBack()){ swapBack(); }\r\n        if(!launched() && recipient == pancakeV2BNBPair){ require(_balances[sender] > 0); launch(); }\r\n        if(!isMaxHoldExempt[recipient]){\r\n            require((_balances[recipient] + (amount - amount * totalFee / feeDenominator))<= _maxHold, \"Wallet cannot hold more than 1%\");\r\n        }\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        if(!isDividendExempt[sender]){ try distributor.setShare(sender, _balances[sender]) {} catch {} }\r\n        if(!isDividendExempt[recipient]){ try distributor.setShare(recipient, _balances[recipient]) {} catch {} }\r\n        try distributor.process(distributorGas) {} catch {}\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, ~uint256(0));\r\n    }\r\n\r\n    function getTotalFee() public view returns (uint256) {\r\n        if(launchedAt + 1 >= block.number){ return feeDenominator.sub(1); }\r\n        return totalFee;\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        if (isFeeExempt[sender] || isFeeExempt[recipient] || !launched()) return false;\r\n        address[] memory liqPairs = pairs;\r\n        for (uint256 i = 0; i < liqPairs.length; i++) {\r\n            if (sender == liqPairs[i] || recipient == liqPairs[i]) return true;\r\n        }\r\n        return feesOnNormalTransfers;\r\n    }\r\n\r\n    function isSell(address recipient) internal view returns (bool) {\r\n        address[] memory liqPairs = pairs;\r\n        for (uint256 i = 0; i < liqPairs.length; i++) {\r\n            if (recipient == liqPairs[i]) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = amount.mul(getTotalFee()).div(feeDenominator);\r\n        uint256 burnAmount = feeAmount.mul(burnFee).div(totalFee);\r\n        uint256 finalFee = feeAmount.sub(burnAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(finalFee);\r\n        _balances[DEAD] = _balances[DEAD].add(burnAmount);\r\n        emit Transfer(sender, DEAD, burnAmount);\r\n        emit Transfer(sender, address(this), finalFee);\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function setIsMaxHoldExempt(address holder, bool exempt) public onlyOwner() {\r\n        isMaxHoldExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) public onlyOwner() {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pancakeV2BNBPair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function setTxLimit(uint256 amount, bool _withCSupply) public onlyOwner() {\r\n        if (_withCSupply) {\r\n            require(amount >= getCirculatingSupply() / 2000);\r\n            _maxTxAmount = amount;\r\n        } else {\r\n            require(amount >= _totalSupply / 2000);\r\n            _maxTxAmount = amount;\r\n        }\r\n    }\r\n\r\n    function launch() internal {\r\n        launchedAt = block.number;\r\n        emit Launched(block.number, block.timestamp);\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt) public onlyOwner() {\r\n        require(holder != address(this) && holder != pancakeV2BNBPair);\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){\r\n            distributor.setShare(holder, 0);\r\n        }else{\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) public onlyOwner() {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) public onlyOwner() {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) public onlyOwner() {\r\n        require(gas <= 1000000);\r\n        distributorGas = gas;\r\n    }\r\n\r\n    function setFeesOnNormalTransfers(bool _enabled) public onlyOwner() {\r\n        feesOnNormalTransfers = _enabled;\r\n    }\r\n\r\n    function setFees(uint256 _liquidityFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _buybackFee, uint256 _burnFee, uint256 _feeDenominator) public onlyOwner() {\r\n        liquidityFee = _liquidityFee;\r\n        reflectionFee = _reflectionFee;\r\n        marketingFee = _marketingFee;\r\n        buybackFee = _buybackFee;\r\n        burnFee = _burnFee;\r\n        totalFee = _liquidityFee.add(_reflectionFee).add(_marketingFee).add(_buybackFee).add(_burnFee);\r\n        feeDenominator = _feeDenominator;\r\n    }\r\n\r\n    function setFeeReceivers(address _buybackFeeReciever, address _autoLiquidityReceiver, address _marketingFeeReceiver) public onlyOwner() {\r\n        buybackFeeReceiver = _buybackFeeReciever;\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) public onlyOwner() {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n\r\n    function setLiquifyEnabled(bool _enabled) public onlyOwner() {\r\n        liquifyEnabled = _enabled;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function addPair(address pair) public onlyOwner() {\r\n        pairs.push(pair);\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributor.claimDividend();\r\n    }\r\n\r\n    function clearStuckBNB() external {\r\n        payable(marketingFeeReceiver).transfer(address(this).balance);\r\n    }\r\n\r\n    function setMaxHoldPercentage(uint256 percent) public onlyOwner() {\r\n         _maxHold = (_totalSupply / 100) * percent;\r\n    }    \r\n\r\n    function setLaunchedAt(uint256 launched_) public onlyOwner() {\r\n        launchedAt = launched_;\r\n    }\r\n    \r\n    function removeLastPair() public onlyOwner() {\r\n        pairs.pop();\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 swapLiquidityFee = liquifyEnabled ? liquidityFee : 0;\r\n        uint256 amountToLiquify = swapThreshold.mul(swapLiquidityFee).div(totalFee).div(2);\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n        uint256 balanceBefore = address(this).balance;\r\n        try router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ) {\r\n            uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n            uint256 totalBNBFee = totalFee.sub(swapLiquidityFee.div(2));\r\n            uint256 amountBNBLiquidity = amountBNB.mul(swapLiquidityFee).div(totalBNBFee).div(2);\r\n            uint256 amountBNBReflection = amountBNB.mul(reflectionFee).div(totalBNBFee);\r\n            uint256 amountBNBMarketing = amountBNB.mul(marketingFee).div(totalBNBFee);\r\n            uint256 amountBNBBuyback = amountBNB.mul(buybackFee).div(totalBNBFee);\r\n            try distributor.deposit{value: amountBNBReflection}() {} catch {}\r\n            (bool marketSuccess, ) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 30000}(\"\");\r\n            (bool buybackSuccess, ) = payable(buybackFeeReceiver).call{value: amountBNBBuyback, gas: 30000}(\"\");\r\n            emit MarketTransfer(marketSuccess);\r\n            emit BuybackTransfer(buybackSuccess);\r\n            if(amountToLiquify > 0){\r\n                try router.addLiquidityETH{ value: amountBNBLiquidity }(\r\n                    address(this),\r\n                    amountToLiquify,\r\n                    0,\r\n                    0,\r\n                    autoLiquidityReceiver,\r\n                    block.timestamp\r\n                ) {\r\n                    emit AutoLiquify(amountToLiquify, amountBNBLiquidity);\r\n                } catch {\r\n                    emit AutoLiquify(0, 0);\r\n                }\r\n            }\r\n            emit SwapBackSuccess(amountToSwap);\r\n        } catch Error(string memory e) {\r\n            emit SwapBackFailed(string(abi.encodePacked(\"SwapBack failed with error \", e)));\r\n        } catch {\r\n            emit SwapBackFailed(\"SwapBack failed without an error message from pancakeSwap\");\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BuybackTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Launched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"MarketTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"SwapBackFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapBackSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesOnNormalTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLastPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buybackFeeReciever\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setFeesOnNormalTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsMaxHoldExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launched_\",\"type\":\"uint256\"}],\"name\":\"setLaunchedAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxHoldPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withCSupply\",\"type\":\"bool\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MILKERS", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d2803ae29ba9754289111b3f79485e92a839d184da28f1a6e7587dc338fbdc33"}