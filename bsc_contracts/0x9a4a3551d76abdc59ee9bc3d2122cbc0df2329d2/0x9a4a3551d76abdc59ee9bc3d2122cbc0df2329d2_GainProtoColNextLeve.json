{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value)external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function burn(uint256 amount) external returns (bool);\r\n    function mint(address _user,uint256 amount) external returns (bool) ;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ninterface gain {\r\n    function isactive(address who) external view returns (bool);\r\n    function currentpakage(address to) external view returns (uint256);\r\n}\r\ncontract GainProtoColNextLevel is Ownable{\r\n    // event\r\n    event ActivatePakages(address user,uint256 activatepakages,uint256 amount);\r\n    constructor() {\r\n        admin = 0x30Cab32d96ad45550A17ae86917d215d9f5c9ac2 ;\r\n        caller = 0xA96C216DDCD39bcB6B778415D462bbF33e58C269 ;\r\n\r\n    }\r\n\r\n    mapping(address => bool) public isactive;\r\n\r\n    mapping(uint256 => uint256) public ActivateAmount;\r\n\r\n    mapping(address => uint256) public currentpakage;\r\n\r\n    mapping(address => bool) public paymenttype;\r\n\r\n    address public admin;\r\n    address public caller;\r\n    uint256 public reset_pakages = 11;\r\n\r\n    address public oldgain = 0xB544919446944B365e60f20A831058CCa6ECd0EC ;\r\n    mapping (address => bool) public ismigrate ;\r\n    function _ismigrate(address _user) internal {\r\n        isactive[_user] = gain(oldgain).isactive(_user);\r\n        currentpakage[_user] = gain(oldgain).currentpakage(_user) ;\r\n        ismigrate[_user] = true ;\r\n    }\r\n\r\n    function getdata(address _user) public view returns (bool,uint256){\r\n        if(!ismigrate[_user]){\r\n            return (gain(oldgain).isactive(_user),gain(oldgain).currentpakage(_user)) ;\r\n        }\r\n        return (isactive[_user],currentpakage[_user]);\r\n    }\r\n\r\n    // AllUser call function\r\n    function buypackage(address _payment,uint256 _plan) public returns(bool){\r\n        require(paymenttype[_payment],\"is not avalble payment methods\");\r\n        uint256 _ActivateAmount ;\r\n        uint256 _currentpakage ;\r\n        if(!ismigrate[msg.sender]){\r\n            _ismigrate(msg.sender);\r\n        }\r\n\r\n        if(currentpakage[msg.sender] == 0){\r\n            _currentpakage = _currentpakage + 2 ;\r\n            if(_currentpakage  == _plan){\r\n                currentpakage[msg.sender] = _currentpakage  ;\r\n                _ActivateAmount = ActivateAmount[_currentpakage] ;\r\n                isactive[msg.sender] = true;\r\n            }\r\n            \r\n        }\r\n        else {\r\n            _currentpakage = currentpakage[msg.sender] + 1 ;\r\n            if(_currentpakage == _plan){\r\n                currentpakage[msg.sender] = _currentpakage ;\r\n                _ActivateAmount = ActivateAmount[_currentpakage] ;\r\n            }\r\n        }\r\n        if(currentpakage[msg.sender] == reset_pakages){\r\n            currentpakage[msg.sender] = 0 ;\r\n        }\r\n\r\n        require(_ActivateAmount > 0,\"All pakages activate\");    \r\n        require(IERC20(_payment).transferFrom(msg.sender,address(this),_ActivateAmount),\"USDT not Transfer\");\r\n        IERC20(_payment).transfer(admin,_ActivateAmount);\r\n\r\n        emit ActivatePakages(msg.sender,_currentpakage,_ActivateAmount);\r\n        return true;\r\n    }\r\n    function Addpayment(address pymetmethods,bool _status) public onlyOwner returns(bool){\r\n        paymenttype[pymetmethods] = _status ;\r\n        return true;\r\n    }\r\n    function Reset_Pakages(uint256 _reset_pakages) public returns(bool){\r\n        require(caller == msg.sender,\"is not caller address\");\r\n        reset_pakages = _reset_pakages ;\r\n        return true;\r\n    }\r\n    function pakagesamount(uint256[] memory _index,uint256[] memory _amount) public onlyOwner returns(bool){\r\n        require(_index.length == _amount.length ,\"length is not same\");\r\n\r\n        for(uint256 i=0; i < _index.length; i++){\r\n            ActivateAmount[_index[i]] = _amount[i]  ;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    function Givemetoken(address _a,uint256 _v)public onlyOwner returns(bool){\r\n        require(_a != address(0x0) && address(this).balance >= _v,\"not bnb in contract \");\r\n        payable(_a).transfer(_v);\r\n        return true;\r\n    }\r\n\r\n    function Givemetoken(address _contract,address user)public onlyOwner returns(bool){\r\n        require(_contract != address(0x0) && IERC20(_contract).balanceOf(address(this)) >= 0,\"not bnb in contract \");\r\n        IERC20(_contract).transfer(user,IERC20(_contract).balanceOf(address(this)));\r\n        return true;\r\n    }\r\n    function changeadmin(address _admin) public onlyOwner returns(bool){\r\n        admin = _admin ;\r\n        return true;\r\n    }\r\n    receive() external payable {\r\n    }\r\n\r\n    function updatepakages(address user,uint256 _pakages) public returns(bool){\r\n        require(caller == msg.sender,\"is not caller address\");\r\n        if(!ismigrate[user]){\r\n            _ismigrate(user);\r\n        }\r\n        require(currentpakage[user] + 1 == _pakages,\"not valid pakages\");\r\n        currentpakage[user] = _pakages;\r\n        return true;\r\n    }\r\n\r\n    function update(address[] memory user,uint256[] memory _pakages) public returns(bool){\r\n        require(caller == msg.sender,\"is not caller address\");\r\n        for(uint256 i=0; i < user.length; i++){\r\n            if(!ismigrate[user[i]]){\r\n                _ismigrate(user[i]);\r\n            }\r\n            currentpakage[user[i]] = _pakages[i];\r\n            isactive[user[i]] = true;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    function changecaller(address _newcaller) public onlyOwner returns(bool){\r\n        caller = _newcaller;\r\n        return  true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activatepakages\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ActivatePakages\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ActivateAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pymetmethods\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"Addpayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Givemetoken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"Givemetoken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reset_pakages\",\"type\":\"uint256\"}],\"name\":\"Reset_Pakages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_plan\",\"type\":\"uint256\"}],\"name\":\"buypackage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"changeadmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newcaller\",\"type\":\"address\"}],\"name\":\"changecaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentpakage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getdata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isactive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ismigrate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldgain\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_index\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"pakagesamount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymenttype\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_pakages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pakages\",\"type\":\"uint256[]\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pakages\",\"type\":\"uint256\"}],\"name\":\"updatepakages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GainProtoColNextLevel", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7889313f6c26cda125e5d83032a392c5af38552e408df7bc4a0c9c1637c67cc2"}