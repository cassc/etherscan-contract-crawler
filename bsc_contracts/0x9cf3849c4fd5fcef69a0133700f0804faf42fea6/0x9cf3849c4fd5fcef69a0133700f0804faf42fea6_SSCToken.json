{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-06-07\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n   \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n     function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ninterface IWrap {\r\n\tfunction withdraw() external;\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\ncontract SSCToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => uint256) private _tLocked;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    uint8 private _decimals = 18;\r\n    uint256 private _tTotal = 1000000 * 1e18;\r\n\r\n    uint256 public burnLimit = 990000 * 1e18;    \r\n    uint256 public burnAmount;\r\n\r\n    string private _name = \"SeashellCoin\";\r\n    string private _symbol = \"SSC\";\r\n    \r\n    uint256 public burnFee = 100;\r\n    uint256 public lpFee = 100;\r\n    uint256 public foundFee = 90;\r\n    uint256 public operateFee = 60;\r\n    uint256 public clubFee = 15;\r\n    uint256 public coreClubFee = 35;\r\n    uint256 public midLeaderFee = 100;\r\n    uint256 public totalFee = 500;\r\n    // \u9501\u4ed3\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u6708\r\n    uint256 public lockTime = 36;\r\n    // \u91ca\u653e\u5468\u671f\r\n    uint256 public releaseInterval = 30 days;\r\n    // \u7528\u6237\u91ca\u653e\u65f6\u95f4\r\n    mapping(address => uint256) public releaseTime;\r\n    // \u7528\u6237\u5df2\u91ca\u653e\u7684\u671f\u6570\r\n    mapping(address => uint256) public releasePeriods;\r\n    // \u7528\u6237\u6bcf\u671f\u91ca\u653e\u7684\u6570\u91cf\r\n    mapping(address => uint256) public releaseAmount;\r\n\r\n    address public operateAddress;\r\n    address public foundAddress;\r\n    address public clubAddress;\r\n    address public coreClubAddress;\r\n    address public midLeaderAddress;\r\n    address public lockAddress;\r\n    address public wrap;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    bool private swapping;\r\n\r\n    mapping(address => bool) public ammPairs;\r\n    \r\n    address public uniswapV2Pair;\r\n    address public USDT;    \r\n    address public holder;\r\n    uint256 public addPriceTokenAmount;\r\n\r\n    uint public maxTxAmount = 1e18;\r\n    bool inSwapAndLiquify;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    event Unfreeze(address indexed account, uint256 amount, uint256 periods);\r\n\r\n    constructor (\r\n        address _route,\r\n        address _usdt,\r\n        address _holder) {\r\n        \r\n        USDT = _usdt;\r\n        holder = _holder;\r\n        _tOwned[holder] = _tTotal;\r\n        \r\n        _isExcludedFromFee[_holder] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        \r\n        uniswapV2Router = IUniswapV2Router02(_route);\r\n         \r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), USDT);\r\n\r\n        address token1 = IUniswapV2Pair(address(uniswapV2Pair)).token1();\r\n        require(token1 != USDT, \"pls deploy again\");\r\n        \r\n        ammPairs[uniswapV2Pair] = true;\r\n        operateAddress = 0x698926fA7765a4495ec5a155e2d7B75Dc05CF5d1;\r\n        foundAddress = 0x9fcF85DD2cF2CbDF7838Bc761276334cA3F3B288;\r\n        clubAddress = 0x1564dE381478E1D273886BFE127918A64d79FB07;\r\n        coreClubAddress = 0xB4f58D3AF9C733Afa20ff7002C6D155bCC00C257;\r\n        midLeaderAddress = 0xFb6300C3a8D7eDE356d41638E62E1193bfc01607;\r\n        lockAddress = 0x779D40Cd695214A1f0A095814e67952467DE697F;\r\n\r\n        emit Transfer(address(0), _holder, _tTotal);\r\n        _approve(address(this), address(uniswapV2Router), ~uint256(0));\r\n        IERC20(USDT).approve(address(uniswapV2Router), ~uint256(0));\r\n    }\r\n\r\n    function setWrap(address _wrap) external onlyOwner{\r\n        wrap = _wrap;\r\n    }\r\n\r\n    function setAmmPair(address pair,bool hasPair) external onlyOwner{\r\n        ammPairs[pair] = hasPair;\r\n    }\r\n\r\n    function setLpFee(uint value) external onlyOwner{\r\n        lpFee = value;\r\n        totalFee = burnFee.add(lpFee).add(foundFee).add(operateFee).add(clubFee).add(coreClubFee).add(midLeaderFee);\r\n    }\r\n\r\n    function setBurnFee(uint value) external onlyOwner{\r\n        burnFee = value;\r\n        totalFee = burnFee.add(lpFee).add(foundFee).add(operateFee).add(clubFee).add(coreClubFee).add(midLeaderFee);\r\n    }\r\n\r\n    function setFoundFee(uint value) external onlyOwner{\r\n        foundFee = value;\r\n        totalFee = burnFee.add(lpFee).add(foundFee).add(operateFee).add(clubFee).add(coreClubFee).add(midLeaderFee);\r\n    }\r\n\r\n    function setOperateFee(uint value) external onlyOwner{\r\n        operateFee = value;\r\n        totalFee = burnFee.add(lpFee).add(foundFee).add(operateFee).add(clubFee).add(coreClubFee).add(midLeaderFee);\r\n    }\r\n\r\n    function setClubFee(uint value) external onlyOwner{\r\n        clubFee = value;\r\n        totalFee = burnFee.add(lpFee).add(foundFee).add(operateFee).add(clubFee).add(coreClubFee).add(midLeaderFee);\r\n    }\r\n\r\n    function setCoreClubFee(uint value) external onlyOwner{\r\n        coreClubFee = value;\r\n        totalFee = burnFee.add(lpFee).add(foundFee).add(operateFee).add(clubFee).add(coreClubFee).add(midLeaderFee);\r\n    }\r\n\r\n    function setMidLeaderFee(uint value) external onlyOwner{\r\n        midLeaderFee = value;\r\n        totalFee = burnFee.add(lpFee).add(foundFee).add(operateFee).add(clubFee).add(coreClubFee).add(midLeaderFee);\r\n    }\r\n\r\n    function setOperateAddress(address addr) external onlyOwner{\r\n        operateAddress = addr;\r\n    }\r\n\r\n    function setFoundAddress(address addr) external onlyOwner{\r\n        foundAddress = addr;\r\n    }\r\n\r\n    function setClubAddress(address addr) external onlyOwner{\r\n        clubAddress = addr;\r\n    }\r\n\r\n    function setCoreClubAddress(address addr) external onlyOwner{\r\n        coreClubAddress = addr;\r\n    }\r\n\r\n    function setMidLeaderAddress(address addr) external onlyOwner{\r\n        midLeaderAddress = addr;\r\n    }\r\n\r\n    function setTxAmount(uint apta) external onlyOwner{\r\n        maxTxAmount = apta;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account].add(_tLocked[account]);\r\n    }\r\n\r\n    function ownedBalanceOf(address account) public view returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function lockBalanceOf(address account) public view returns (uint256) {\r\n        return _tLocked[account];\r\n    }\r\n\r\n    function getCanLockInfo(address account) public view returns (uint, uint) {\r\n        uint256 current = block.timestamp;\r\n        if( _tLocked[account] > 0 && current >= releaseTime[account] ){\r\n            // \u8ba1\u7b97\u9700\u8981\u91ca\u653e\u7684\u671f\u6570\r\n            uint256 releasePeriod = current.sub(releaseTime[account]).div(releaseInterval) + 1;\r\n            if( releasePeriod > releasePeriods[account] ){\r\n                uint256 releasing = releaseAmount[account].mul(releasePeriod.sub(releasePeriods[account]));\r\n                if( releasing > _tLocked[account] ){\r\n                    releasing = _tLocked[account];\r\n                }\r\n                return (releasing, releasePeriod.sub(releasePeriods[account]));\r\n            } else {\r\n                return (0, 0);\r\n            }\r\n        } else{\r\n            return (0, 0);\r\n        }\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    function excludeFromFee(address[] memory accounts) public onlyOwner {\r\n        for( uint i = 0; i < accounts.length; i++ ){\r\n            _isExcludedFromFee[accounts[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function _take(uint256 tValue, address from, address to) private {\r\n        _tOwned[to] = _tOwned[to].add(tValue);\r\n        emit Transfer(from, to, tValue);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferWrapOwnership(address _newWrapOwner) public onlyOwner {\r\n\t\tIWrap(wrap).transferOwnership(_newWrapOwner);\r\n\t}\r\n\r\n    struct Param{\r\n        bool takeFee;\r\n        uint tTransferAmount;\r\n        uint tLp;\r\n        uint tBurn;\r\n        uint tFound;\r\n        uint tOperate;\r\n        uint tClub;\r\n        uint tCoreClub;\r\n        uint tMidLeader;\r\n    }\r\n\r\n    function _initParam(uint256 tAmount,Param memory param) private view  {\r\n        uint tFee = 0;\r\n        if( param.takeFee ) {\r\n            param.tLp = tAmount * lpFee / 10000;\r\n            param.tBurn = tAmount * burnFee / 10000;\r\n            param.tFound = tAmount * foundFee / 10000;\r\n            param.tOperate = tAmount * operateFee / 10000;\r\n            param.tClub = tAmount * clubFee / 10000;\r\n            param.tCoreClub = tAmount * coreClubFee / 10000;\r\n            param.tMidLeader = tAmount * midLeaderFee / 10000;\r\n            tFee = tAmount * totalFee / 10000;\r\n        }\r\n        param.tTransferAmount = tAmount.sub(tFee);\r\n    }\r\n\r\n    function _takeFee(Param memory param,address from) private {\r\n        if( param.tLp > 0 ){\r\n            _take(param.tLp, from, address(this));\r\n        }\r\n        if( param.tBurn > 0 ){\r\n            _take(param.tBurn, from, address(0));\r\n            burnAmount += param.tBurn;\r\n        }\r\n        if( param.tFound > 0 ){\r\n            _take(param.tFound, from, foundAddress);\r\n        }\r\n        if( param.tOperate > 0 ){\r\n            _take(param.tOperate, from, operateAddress);\r\n        }\r\n        if( param.tClub > 0 ){\r\n            _take(param.tClub, from, clubAddress);\r\n        }\r\n        if( param.tCoreClub > 0 ){\r\n            _take(param.tCoreClub, from, coreClubAddress);\r\n        }\r\n        if( param.tMidLeader > 0 ){\r\n            _take(param.tMidLeader, from, midLeaderAddress);\r\n        }\r\n    }\r\n\r\n    function _isLiquidity(address from,address to) internal view returns(bool isAdd,bool isDel){\r\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        (uint r0,,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\r\n        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n        if( ammPairs[to] ){\r\n            if( token0 != address(this) && bal0 > r0 ){\r\n                isAdd = bal0 - r0 > addPriceTokenAmount;\r\n            }\r\n        }\r\n        if( ammPairs[from] ){\r\n            if( token0 != address(this) && bal0 < r0 ){\r\n                isDel = r0 - bal0 > 0; \r\n            }\r\n        }\r\n    }\r\n\r\n    function batchTransfer(address[] memory accounts, uint256[] memory amounts) external returns(bool) {\r\n        require(accounts.length == amounts.length, \"parameter error\");\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _transfer(msg.sender, accounts[i], amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if(from == lockAddress) {\r\n            _doLockTransfer(from, to, amount);\r\n            releaseTime[to] = block.timestamp.add(releaseInterval);\r\n            releaseAmount[to] = releaseAmount[to].add(amount.div(lockTime));\r\n            return;\r\n        }\r\n\r\n        // \u5982\u679c\u7528\u6237\u9501\u4ed3\u91d1\u989d_tLocked\u5927\u4e8e0\uff0c\u5e76\u4e14\u9501\u4ed3\u65f6\u95f4\u5df2\u5230\uff0c\u90a3\u4e48\u89e3\u9501\r\n        uint256 current = block.timestamp;\r\n        if( _tLocked[from] > 0 && current >= releaseTime[from] ){\r\n            // \u8ba1\u7b97\u9700\u8981\u91ca\u653e\u7684\u671f\u6570\r\n            uint256 releasePeriod = current.sub(releaseTime[from]).div(releaseInterval) + 1;\r\n            if( releasePeriod > releasePeriods[from] ){\r\n                uint256 releasing = releaseAmount[from].mul(releasePeriod.sub(releasePeriods[from]));\r\n                if( releasing > _tLocked[from] ){\r\n                    releasing = _tLocked[from];\r\n                    releasePeriods[from] = lockTime;\r\n                } else {\r\n                    releasePeriods[from] = releasePeriod;\r\n                }\r\n                _tLocked[from] = _tLocked[from].sub(releasing);\r\n                _tOwned[from] = _tOwned[from].add(releasing);\r\n                emit Unfreeze(from, releasing, releasePeriod.sub(releasePeriods[from]));\r\n            }\r\n        }\r\n\r\n        bool isAddLiquidity;\r\n        bool isDelLiquidity;\r\n        ( isAddLiquidity, isDelLiquidity) = _isLiquidity(from,to);\r\n       \r\n        Param memory param;\r\n        bool takeFee = true;\r\n\r\n        if(!ammPairs[to]) { // \u8f6c\u8d26 \u4e70\u6216\u8005\u64a4\u6c60\r\n            takeFee = false;\r\n        }\r\n\r\n        if(ammPairs[to]) { // \u5356\u6216\u8005\u52a0\u6c60\r\n            if(_isExcludedFromFee[from] || isAddLiquidity) {\r\n                takeFee = false;\r\n            }\r\n        }\r\n\r\n        if( burnAmount >= burnLimit && burnFee > 0){\r\n            totalFee = totalFee.sub(burnFee);\r\n            burnFee = 0;\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= maxTxAmount;\r\n        if( canSwap &&\r\n            !swapping &&\r\n            !ammPairs[from] &&\r\n            from != owner() &&\r\n            to != owner() &&\r\n            from != address(this)\r\n        ) {\r\n            swapping = true;\r\n            swapAndLiquify(contractTokenBalance);\r\n            swapping = false;\r\n        }\r\n\r\n        param.takeFee = takeFee;\r\n        _initParam(amount, param);\r\n        _tokenTransfer(from,to,amount,param);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 amount) public lockTheSwap {\r\n        uint256 half = amount.div(2);\r\n        uint256 otherHalf = amount.sub(half);\r\n\r\n        uint256 initialBalance = IERC20(USDT).balanceOf(address(this));\r\n        swapTokensForUsdt(half); \r\n        uint256 newBalance = IERC20(USDT).balanceOf(address(this)).sub(initialBalance);\r\n        addLiquidity(newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForUsdt(uint256 tokenAmount) public {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = USDT;\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            wrap,\r\n            block.timestamp\r\n        );     \r\n        IWrap(wrap).withdraw(); \r\n    }\r\n\r\n    function addLiquidity(uint256 usdtAmount, uint256 tokenAmount) private {\r\n        uniswapV2Router.addLiquidity(\r\n            USDT,\r\n            address(this),\r\n            usdtAmount,\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            foundAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount,Param memory param) private {\r\n        require(_tOwned[sender] >= tAmount, \"balance not enough\");\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(param.tTransferAmount);\r\n        emit Transfer(sender, recipient, param.tTransferAmount);\r\n        if(param.takeFee){\r\n            _takeFee(param,sender);\r\n        }\r\n    }\r\n\r\n    function _doLockTransfer(address sender, address recipient, uint256 tAmount) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tLocked[recipient] = _tLocked[recipient].add(tAmount);\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function _doTransfer(address sender, address recipient, uint256 tAmount) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tAmount);\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function donateDust(address addr, uint256 amount) external onlyOwner {\r\n        TransferHelper.safeTransfer(addr, _msgSender(), amount);\r\n    }\r\n\r\n    function donateEthDust(uint256 amount) external onlyOwner {\r\n        TransferHelper.safeTransferETH(_msgSender(), amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_route\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periods\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addPriceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clubAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clubFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreClubAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreClubFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donateDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donateEthDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCanLockInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"midLeaderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"midLeaderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ownedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"releaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"releasePeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"releaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasPair\",\"type\":\"bool\"}],\"name\":\"setAmmPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setClubAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setClubFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setCoreClubAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setCoreClubFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFoundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setFoundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMidLeaderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMidLeaderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setOperateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setOperateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apta\",\"type\":\"uint256\"}],\"name\":\"setTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrap\",\"type\":\"address\"}],\"name\":\"setWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapTokensForUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWrapOwner\",\"type\":\"address\"}],\"name\":\"transferWrapOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SSCToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000fc66286ea48e53a9fad1c3f3388c2dff098279b3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d1b389b8a75d94923e4dc4c9e8125f946cd5b3b31fd98624608927e4fcb8899b"}