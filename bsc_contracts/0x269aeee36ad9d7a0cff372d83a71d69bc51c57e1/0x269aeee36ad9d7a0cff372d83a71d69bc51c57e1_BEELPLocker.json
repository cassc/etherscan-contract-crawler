{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC721 {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n}\r\n\r\ninterface INonfungiblePositionManager is IERC721 {\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    function collect(CollectParams calldata params)\r\n        external\r\n        payable\r\n        returns (uint256 amount0, uint256 amount1);\r\n}\r\n\r\ncontract BEELPLocker {\r\n    address NONFUNGIBLE_POSITION_MANAGER;\r\n    INonfungiblePositionManager immutable _positionManager;\r\n\r\n    address public lpFeeCollector;\r\n\r\n    mapping(uint256 => uint256) public lockUpDeadline;\r\n\r\n    mapping(uint256 => bool) public nftLocked;\r\n    mapping(uint256 => bool) public withdrawTriggered;\r\n\r\n    modifier onlyLPFeeCollector() {\r\n        require(msg.sender == lpFeeCollector);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        NONFUNGIBLE_POSITION_MANAGER = 0x46A15B0b27311cedF172AB29E4f4766fbE7F4364;\r\n        _positionManager = INonfungiblePositionManager(\r\n            NONFUNGIBLE_POSITION_MANAGER\r\n        );\r\n        lpFeeCollector = msg.sender;\r\n    }\r\n\r\n    function lockNFT(uint256 _tokenId) external onlyLPFeeCollector {\r\n        require(!nftLocked[_tokenId], \"NFT is already locked\");\r\n\r\n        IERC721(NONFUNGIBLE_POSITION_MANAGER).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _tokenId\r\n        );\r\n\r\n        nftLocked[_tokenId] = true;\r\n    }\r\n\r\n    function triggerNFTWithdrawal(uint256 _tokenId)\r\n        external\r\n        onlyLPFeeCollector\r\n    {\r\n        require(nftLocked[_tokenId], \"NFT is not locked\");\r\n        require(\r\n            lockUpDeadline[_tokenId] == 0,\r\n            \"Withdrawal has been already triggered\"\r\n        );\r\n        lockUpDeadline[_tokenId] = block.timestamp + (7 days);\r\n        withdrawTriggered[_tokenId] = true;\r\n    }\r\n\r\n    function cancelNFTWithdrawal(uint256 _tokenId) external onlyLPFeeCollector {\r\n        require(nftLocked[_tokenId], \"NFT is not locked\");\r\n        require(\r\n            lockUpDeadline[_tokenId] != 0,\r\n            \"Withdrawal has not been triggered\"\r\n        );\r\n\r\n        lockUpDeadline[_tokenId] = 0;\r\n        withdrawTriggered[_tokenId] = false;\r\n    }\r\n\r\n    function withdrawNFT(uint256 _tokenId) external onlyLPFeeCollector {\r\n        require(nftLocked[_tokenId], \"NFT is not locked\");\r\n        require(\r\n            lockUpDeadline[_tokenId] != 0,\r\n            \"Withdrawal  has not been triggered\"\r\n        );\r\n        require(\r\n            block.timestamp >= lockUpDeadline[_tokenId],\r\n            \"Lock-up period has not ended yet\"\r\n        );\r\n\r\n        IERC721(NONFUNGIBLE_POSITION_MANAGER).transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            _tokenId\r\n        );\r\n\r\n        nftLocked[_tokenId] = false;\r\n        lockUpDeadline[_tokenId] = 0;\r\n        withdrawTriggered[_tokenId] = false;\r\n    }\r\n\r\n    function collectLPFees(uint256 _tokenId) external onlyLPFeeCollector {\r\n        _positionManager.collect(\r\n            INonfungiblePositionManager.CollectParams({\r\n                tokenId: _tokenId,\r\n                recipient: lpFeeCollector,\r\n                amount0Max: type(uint128).max,\r\n                amount1Max: type(uint128).max\r\n            })\r\n        );\r\n    }\r\n\r\n    function changeLPFeeCollector(address account) external onlyLPFeeCollector {\r\n        require(account != address(0), \"Address 0\");\r\n        lpFeeCollector = account;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelNFTWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"changeLPFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"collectLPFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lockNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockUpDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerNFTWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawTriggered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BEELPLocker", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://87214b4fa8b2ebe760d041ffce3c2fd7d054e8c73c992fb515469a2b09d517cc"}