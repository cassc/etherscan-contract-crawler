{"SourceCode": "// File: IFlashMentor.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IFlashMentor {\r\n    function onFlashWithdraw(uint256 tokenId, address initiator, address operator) external view returns(bytes4);\r\n    function onTokenReturn(uint256 tokenId, address initiator, address operator) external view returns(bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: CyLoansV2.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract CyLoansV2 is Pausable, Ownable {\r\n\r\n  address public cyBlocAddress;\r\n  address public flashMentor;\r\n  uint256 public CANCEL_COOLDOWN_TIME = 1 days; //24h in second\r\n\r\n  struct Lending {\r\n    address lender;\r\n    uint256 tokenId;\r\n    bool    isCanceled;\r\n    uint256 cancelAt;\r\n  }\r\n\r\n  // Map from lender to their corresponding lending.\r\n  mapping (uint256 => Lending) public lendings;\r\n\r\n  event LendingAdded(\r\n    uint256 indexed _tokenId,\r\n    address _lender\r\n  );\r\n\r\n  event RequestCancelled(\r\n    address _lender,\r\n    uint256 indexed _tokenId,\r\n    bool    _isCanceled,\r\n    uint256 _cancelAt\r\n  );\r\n\r\n  event LendingCancelled(\r\n    address _lender,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n\r\n  constructor(address _cyBlocAddress) {\r\n    cyBlocAddress = _cyBlocAddress;\r\n  }\r\n\r\n  modifier onlyFlashMentor() {\r\n    require(flashMentor == msg.sender);\r\n    _;\r\n  }\r\n\r\n  function setCyBloc(address _cyBlocAddress) external onlyOwner {\r\n      cyBlocAddress = _cyBlocAddress;\r\n  }\r\n\r\n  function setFlashMentor(address _flashMentor) external onlyOwner {\r\n      flashMentor = _flashMentor;\r\n  }\r\n\r\n  function setCancelCooldown(uint256 _cancelCooldown) external onlyOwner {\r\n    require(_cancelCooldown < 30 days,  \"CyLoan: Too long\");// 30 days\r\n    CANCEL_COOLDOWN_TIME = _cancelCooldown;\r\n  }\r\n\r\n  function pause() public onlyOwner {\r\n    _pause();\r\n  }\r\n\r\n  function unPause() public onlyOwner {\r\n    _unpause();\r\n  }\r\n\r\n  function ListCyBlocForRent(\r\n    uint256[] memory _tokenIds\r\n  )\r\n    external\r\n    whenNotPaused\r\n  {\r\n    require(_tokenIds.length > 0, \"CyLoan: Missing token\");\r\n    address _lender = msg.sender;\r\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n      require(_owns(_lender, _tokenIds[i]), \"CyLoan: You are not owner\");\r\n\r\n      _escrow(_lender, _tokenIds[i]);\r\n\r\n      Lending memory _lending = Lending(\r\n        _lender,\r\n        _tokenIds[i],\r\n        false,\r\n        0\r\n      );\r\n      _addLending(\r\n        _tokenIds[i],\r\n        _lending\r\n      );\r\n    }\r\n  }\r\n\r\n  function onTokenReturn(uint256 tokenId, address initiator, address operator) external view returns(bytes4) {\r\n    require(IERC721(cyBlocAddress).ownerOf(tokenId) == address(this), \"CyLoans: Borrowed token not returned\");\r\n    require(lendings[tokenId].lender == initiator, \"CyLoans: Initiator not owner\");\r\n    require(operator == flashMentor, \"CyLoans: Untrusted operator\");\r\n    return IFlashMentor.onTokenReturn.selector;\r\n  }\r\n\r\n  function flashWithdraw(uint256 tokenId, address initiator, address operator) external onlyFlashMentor {\r\n    require(initiator == lendings[tokenId].lender, \"CyLoan: You are not owner\");\r\n    IERC721(cyBlocAddress).safeTransferFrom(address(this), msg.sender, tokenId);\r\n    \r\n    require(\r\n      IFlashMentor(operator).onFlashWithdraw(tokenId, initiator, operator) == IFlashMentor.onFlashWithdraw.selector,\r\n      \"CyLoans: Fail onFlashWithdraw check\"\r\n    );\r\n  }\r\n\r\n  function requestCancel(uint256[] memory _tokenIds) external {\r\n    require(_tokenIds.length > 0, \"CyLoan: Missing tokenId\");\r\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n      Lending storage _lending = lendings[_tokenIds[i]];\r\n      require(msg.sender == _lending.lender, \"CyLoan: You are not owner\");\r\n      require(!_lending.isCanceled, \"CyLoan: Canceled\");\r\n\r\n      _lending.isCanceled = true;\r\n      _lending.cancelAt = block.timestamp + CANCEL_COOLDOWN_TIME;\r\n      emit RequestCancelled(_lending.lender, _lending.tokenId, _lending.isCanceled, _lending.cancelAt);\r\n    }\r\n  }\r\n\r\n  function cancelLending(uint256[] memory _tokenIds) external {\r\n    require(_tokenIds.length > 0, \"CyLoan: Missing tokenId\");\r\n\r\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n      Lending storage _lending = lendings[_tokenIds[i]];\r\n      require(msg.sender == _lending.lender, \"CyLoan: You are not owner\");\r\n      require(_lending.isCanceled, \"CyLoan: Have not request cancel\");\r\n      require(_lending.cancelAt <= block.timestamp || CANCEL_COOLDOWN_TIME == 0, \"CyLoan: Cannot cancel at this time\");\r\n\r\n      _cancelWithoutBorrower(_lending.lender, _lending.tokenId);\r\n    }\r\n  }\r\n\r\n  function cancelWhenPaused(\r\n    uint256[] memory _tokenIds\r\n  )\r\n    external\r\n    whenPaused\r\n    onlyOwner\r\n  {\r\n    require(_tokenIds.length > 0, \"CyLoan: Missing tokenId\");\r\n\r\n    for (uint256 i = 0; i < _tokenIds.length; i++) {\r\n      Lending storage _lending = lendings[_tokenIds[i]];\r\n\r\n      _cancelWithoutBorrower(_lending.lender, _lending.tokenId);\r\n    }\r\n  }\r\n\r\n\r\n  function _cancelWithoutBorrower(address _lender, uint256 _tokenId) internal {\r\n    _removeLending(_tokenId);\r\n    _transfer(_lender, _tokenId);\r\n    emit LendingCancelled(_lender, _tokenId);\r\n  }\r\n\r\n  function _getNftContract(address _nftAddress) internal pure returns (IERC721) {\r\n    IERC721 candidateContract = IERC721(_nftAddress);\r\n    // require(candidateContract.implementsERC721());\r\n    return candidateContract;\r\n  }\r\n\r\n\r\n  function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n    IERC721 _nftContract = _getNftContract(cyBlocAddress);\r\n    return (_nftContract.ownerOf(_tokenId) == _claimant);\r\n  }\r\n\r\n  function _removeLending(uint256 _tokenId) internal {\r\n    delete lendings[_tokenId];\r\n  }\r\n\r\n  function _addLending(\r\n    uint256 _tokenId,\r\n    Lending memory _lending\r\n  )\r\n    internal\r\n  {\r\n\r\n    lendings[_tokenId] = _lending;\r\n\r\n    emit LendingAdded(\r\n      _tokenId,\r\n      _lending.lender\r\n    );\r\n  }\r\n\r\n  /// @dev Escrows the NFT, assigning ownership to this contract.\r\n  /// Throws if the escrow fails.\r\n  /// @param _owner - Current owner address of token to escrow.\r\n  /// @param _tokenId - ID of token whose approval to verify.\r\n  function _escrow(address _owner, uint256 _tokenId) internal {\r\n    IERC721 _nftContract = _getNftContract(cyBlocAddress);\r\n\r\n    // It will throw if transfer fails\r\n    _nftContract.transferFrom(_owner, address(this), _tokenId);\r\n  }\r\n\r\n  /// @dev Transfers an NFT owned by this contract to another address.\r\n  /// Returns true if the transfer succeeds.\r\n  /// @param _receiver - Address to transfer NFT to.\r\n  /// @param _tokenId - ID of token to transfer.\r\n  function _transfer(address _receiver, uint256 _tokenId) internal {\r\n    IERC721 _nftContract = _getNftContract(cyBlocAddress);\r\n\r\n    // It will throw if transfer fails\r\n    _nftContract.safeTransferFrom(address(this), _receiver, _tokenId);\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cyBlocAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"LendingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"LendingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isCanceled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cancelAt\",\"type\":\"uint256\"}],\"name\":\"RequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANCEL_COOLDOWN_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ListCyBlocForRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelLending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelWhenPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cyBlocAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashMentor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"flashWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lendings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCanceled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cancelAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"onTokenReturn\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"requestCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cancelCooldown\",\"type\":\"uint256\"}],\"name\":\"setCancelCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cyBlocAddress\",\"type\":\"address\"}],\"name\":\"setCyBloc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flashMentor\",\"type\":\"address\"}],\"name\":\"setFlashMentor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CyLoansV2", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000013b5816396c5095a145af6994688e6e53fda6095", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://daf52f8763040d874ec64cb27cdf9db11539793acfd8a717e100289d51cb532c"}