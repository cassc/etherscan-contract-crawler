{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {// Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n      * account.\r\n      */\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n      * @dev Throws if called by any account other than the owner.\r\n      */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20Ext is IERC20 {\r\n    function isBlackListed(address owner) external view returns (bool);\r\n    function inviter(address owner) external view returns (address);\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface ILPTool  {\r\n    function addLP(address lpAddr) external;\r\n    function removeLP(address lpAddr) external;\r\n    function getLpTotalValue(address lpAddress) external view returns(uint256);\r\n    function getLpPrice(address lpAddress) external view returns(uint256);\r\n    function getTokenPrice(address tokenAddress) external view returns(uint256);\r\n}\r\n\r\n\r\n\r\n\r\ncontract CBGPool is Ownable {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public cbgPeacePair;\r\n\r\n\r\n\r\n\r\n    uint[] public _layerHashRate = [56,29,23,17,11,6,29,23,17,11,6,29,23,17,11,6,29,23,17,11,6];\r\n    uint public _layerHashMax = 21;\r\n\r\n    uint256 public userPercent = 600;\r\n\r\n    IPancakeFactory public pancakeFactory;\r\n    IPancakeRouter02 public pancakeRouterr =IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address public pancakeswapV2Router = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address public peaceToken = address(0x85973C97919c999E5D3d8832290152a3ACdf8a6E); //NOTICE Peace\r\n\r\n    address public peaceUsdPair = address(0x4b3b5b1335D33E0a9eBD583dB9845ad17094eCa7); //Peace-usd\r\n    address public usdToken = address(0x55d398326f99059fF775485246999027B3197955); //usd\r\n    IERC20Ext internal CPTToken = IERC20Ext(0xD66734e3663D3Eb36F1e7819bc20bfb9c5B5ba62); //CPT\r\n\r\n    address public destoryTriggerAddress =0x1AF68953da76246F6f34F47990e7b63f87Be1cF5;\r\n\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    ILPTool public lpTool;\r\n\r\n\r\n\r\n\r\n    event StartPool(address indexed user, uint256 amount);\r\n    event StopPool(address indexed user, uint256 amount);\r\n    event InviteAmount(address indexed user, uint256 addAmount, uint256 subAmount);\r\n\r\n\r\n    struct UserInfo {\r\n        // uint256 inviteReward; //\r\n        uint256 amount;     // How many LP tokens the user has.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        uint256 amount;\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. CHERRYs to distribute per block.\r\n        uint256 lastRewardBlock;  // Last block number that CHERRYs distribution occurs.\r\n        uint256 accPerShare; // Accumulated CACHERRYper share, times 1e12. See below.\r\n        bool isStart;\r\n    }\r\n\r\n\r\n\r\n    uint256 public perBlock;\r\n\r\n    // Info of each user that stakes LP tokens.\r\n    mapping (address => mapping (address => UserInfo)) public userInfoMap;\r\n\r\n    mapping(address => uint256) public userInviteRewardMap;\r\n\r\n    mapping(address => PoolInfo) public poolInfoMap;\r\n    address[] public lpAddressList;\r\n    mapping(address => bool) public isDestoryNullLp;\r\n\r\n    uint256 public totalAllocPoint = 0;\r\n\r\n    uint256 public startBlock;\r\n    bool public autoAdjustAlloc = true;\r\n\r\n    uint256 public inviteRewardLpValue = 400 * 1e18;\r\n\r\n\r\n\r\n    constructor(uint256 _startBlock,uint256 _perBlock,ILPTool _tool)  {\r\n        pancakeFactory = IPancakeFactory(pancakeRouterr.factory());\r\n        cbgPeacePair = pancakeFactory.createPair(address(this), peaceToken);\r\n        startBlock = _startBlock;\r\n        perBlock = _perBlock;\r\n        lpTool = _tool;\r\n\r\n        initPool();\r\n    }\r\n\r\n\r\n    function initPool() private {\r\n        poolInfoMap[cbgPeacePair] = PoolInfo({\r\n        amount: 0,\r\n        allocPoint: 0,\r\n        lastRewardBlock: startBlock,\r\n        accPerShare: 0,\r\n        isStart:true\r\n        });\r\n        lpAddressList.push(cbgPeacePair);\r\n        lpTool.addLP(cbgPeacePair);\r\n\r\n\r\n\r\n\r\n        poolInfoMap[peaceUsdPair] = PoolInfo({\r\n        amount: 0,\r\n        allocPoint: 0,\r\n        lastRewardBlock: startBlock,\r\n        accPerShare: 0,\r\n        isStart:true\r\n        });\r\n        lpAddressList.push(peaceUsdPair);\r\n        lpTool.addLP(peaceUsdPair);\r\n    }\r\n\r\n    function  isPairAddree(address _account) internal view returns(bool){\r\n        if( _account == cbgPeacePair){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function add(uint256 _allocPoint, address _lpToken) public onlyOwner {\r\n\r\n        massUpdatePools();\r\n\r\n        lpTool.addLP(_lpToken);\r\n        if(autoAdjustAlloc){\r\n            _allocPoint = getLpAllocPoint(_lpToken);\r\n        }\r\n\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfoMap[_lpToken] = PoolInfo({\r\n        amount: 0,\r\n        allocPoint: _allocPoint,\r\n        lastRewardBlock: lastRewardBlock,\r\n        accPerShare: 0,\r\n        isStart:true\r\n        });\r\n        lpAddressList.push(_lpToken);\r\n\r\n    }\r\n\r\n\r\n\r\n    //\r\n    function set(address _lpToken, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\r\n        if(_allocPoint == 0){\r\n            stopLp(_lpToken);\r\n            return;\r\n        }\r\n        require(!autoAdjustAlloc,\"AutoAdjust\");\r\n\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 prevAllocPoint = poolInfoMap[_lpToken].allocPoint;\r\n        poolInfoMap[_lpToken].allocPoint = _allocPoint;\r\n        poolInfoMap[_lpToken].isStart = true;\r\n        if (prevAllocPoint != _allocPoint) {\r\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\r\n        }\r\n    }\r\n\r\n    function stopLp(address _lpToken) public onlyOwner {\r\n        PoolInfo storage pool = poolInfoMap[_lpToken];\r\n        if(pool.isStart){\r\n            massUpdatePools();\r\n            pool.isStart = false;\r\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint);\r\n            pool.allocPoint = 0;\r\n        }\r\n    }\r\n\r\n    function stopAll() public onlyOwner{\r\n        massUpdatePools();\r\n        uint256 length = lpAddressList.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n             PoolInfo storage pool = poolInfoMap[lpAddressList[pid]];\r\n            if(pool.isStart){\r\n                pool.isStart = false;\r\n                totalAllocPoint = totalAllocPoint.sub(pool.allocPoint);\r\n                pool.allocPoint = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function startAll() public onlyOwner{\r\n        massUpdatePools();\r\n        uint256 length = lpAddressList.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            PoolInfo storage pool = poolInfoMap[lpAddressList[pid]];\r\n            uint256 _allocPoint = getLpAllocPoint(lpAddressList[pid]);\r\n            pool.isStart = true;\r\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n            pool.allocPoint = _allocPoint;\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //\r\n    function massUpdatePoolsStartBlock() internal {\r\n        uint256 length = lpAddressList.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            poolInfoMap[lpAddressList[pid]].lastRewardBlock = startBlock;\r\n        }\r\n    }\r\n\r\n    function massUpdatePools() internal {\r\n        uint256 length = lpAddressList.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(lpAddressList[pid]);\r\n        }\r\n    }\r\n\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(address _lpAddress) internal {\r\n        PoolInfo storage pool = poolInfoMap[_lpAddress];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.amount;\r\n        if (lpSupply == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 reward = multiplier.mul(perBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n        pool.accPerShare = pool.accPerShare.add(reward.mul(1e12).div(lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n\r\n    function pending(address _user) internal view returns(uint256){\r\n        uint256 length = lpAddressList.length;\r\n        uint256 pendingReward = 0;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            pendingReward = pendingReward.add(pending(_user,lpAddressList[pid]));\r\n        }\r\n        return pendingReward;\r\n    }\r\n\r\n\r\n    function pending(address _user,address _lpAddress) internal view returns (uint256){\r\n\r\n        require(totalAllocPoint != 0, \"totalAllocPoint is zero!\");\r\n\r\n        PoolInfo storage pool = poolInfoMap[_lpAddress];\r\n        UserInfo storage user = userInfoMap[_lpAddress][_user];\r\n        uint256 accPerShare = pool.accPerShare;\r\n        uint256 lpSupply = pool.amount;\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 cherryReward = multiplier.mul(perBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n            accPerShare = accPerShare.add(cherryReward.mul(1e12).div(lpSupply));\r\n        }\r\n        uint256 pendingAmount = user.amount.mul(accPerShare).div(1e12).sub(user.rewardDebt);\r\n        if(_user != deadAddress){\r\n            return userInviteRewardMap[_user].add(pendingAmount.mul(1e12).mul(userPercent).div(1000).div(1e12));\r\n        }else{\r\n            return pendingAmount;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function getMultiplier(uint256 _from, uint256 _to) internal pure returns (uint256) {\r\n        return _to.sub(_from);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // Deposit LP tokens to MasterChef for CHERRY allocation.\r\n    function deposit(address _lpAddress,address _user, uint256 _amount) internal returns (uint256) {\r\n\r\n        PoolInfo storage pool = poolInfoMap[_lpAddress];\r\n        UserInfo storage user = userInfoMap[_lpAddress][_user];\r\n        uint256 pendingReward = 0;\r\n        uint256 currentAmount = user.amount;\r\n        uint256 currentPoolAmount = pool.amount;\r\n\r\n        updatePool(_lpAddress);\r\n        if (user.amount > 0) {\r\n            pendingReward = user.amount.mul(pool.accPerShare).div(1e12).sub(user.rewardDebt);\r\n            if(_amount < user.amount){\r\n                pendingReward = pendingReward.mul(_amount).mul(1e12).div(user.amount).div(1e12);\r\n            }\r\n\r\n        }\r\n\r\n        pool.amount = currentPoolAmount.sub(currentAmount).add(_amount);\r\n        user.amount = _amount;\r\n\r\n        user.rewardDebt = user.amount.mul(pool.accPerShare).div(1e12);\r\n\r\n        return pendingReward;\r\n    }\r\n\r\n\r\n    function distributeReward(address _user,uint256 _amount) internal returns(uint256) {\r\n        uint256 basePercent = 1000 - userPercent;\r\n        address cur = _user;\r\n        uint256 leftAmount = _amount;\r\n        for (uint j = 0; j < _layerHashMax; j++) {\r\n            cur = CPTToken.inviter(cur);\r\n            if (cur == address(0)) {\r\n                break;\r\n            }\r\n            if(isDistributeReward(cur)){\r\n                uint256 inviteAmount = _amount * _layerHashRate[j] / basePercent;\r\n                userInviteRewardMap[cur] = userInviteRewardMap[cur].add(inviteAmount);\r\n                leftAmount = leftAmount.sub(inviteAmount);\r\n            }\r\n\r\n        }\r\n        return leftAmount;\r\n\r\n    }\r\n\r\n\r\n    function isDistributeReward(address _user) internal view returns(bool){\r\n        uint256 length = lpAddressList.length;\r\n        uint256 value = 0;\r\n        for (uint256 pid = 0; pid < length; pid++) {\r\n            address lpAddress = lpAddressList[pid];\r\n            value = value.add(getLpValue(lpAddress,userInfoMap[lpAddress][_user].amount));\r\n        }\r\n        if(value >= inviteRewardLpValue){\r\n            return true;\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n\r\n    function getLpValue(address _lpAddress,uint256 _amount) internal view returns(uint256){\r\n        uint256 price = lpTool.getLpPrice(_lpAddress);\r\n        return _amount.mul(price).div(1e18);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function getLpAllocPoint(address lpAddress) internal view returns(uint256){\r\n        uint256 lpValue = lpTool.getLpTotalValue(lpAddress);\r\n        return lpValue.div(1e18);\r\n    }\r\n\r\n\r\n    function updatePoolAllocPoint()  internal {\r\n        if(autoAdjustAlloc){\r\n            massUpdatePools();\r\n            totalAllocPoint = 0;\r\n            uint256 length = lpAddressList.length;\r\n            for (uint256 pid = 0; pid < length; ++pid) {\r\n                address lpAddress = lpAddressList[pid];\r\n                PoolInfo storage pool = poolInfoMap[lpAddress];\r\n                if(pool.isStart){\r\n                    uint256 poolAllocPoint = getLpAllocPoint(lpAddress);\r\n                    pool.allocPoint = poolAllocPoint;\r\n                    totalAllocPoint = totalAllocPoint.add(poolAllocPoint);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function setLayerHashRate(uint layerHashMax_, uint[] memory rates_) public onlyOwner {\r\n        require(rates_.length == layerHashMax_, \"rates_ length error\");\r\n        uint256 totalRate_ = 0;\r\n        for(uint i = 0;i<layerHashMax_;i++){\r\n            totalRate_ = totalRate_.add(rates_[i]);\r\n        }\r\n        require(totalRate_<1000);\r\n\r\n        _layerHashRate = rates_;\r\n        _layerHashMax = layerHashMax_;\r\n        userPercent = 1000-totalRate_;\r\n    }\r\n\r\n\r\n\r\n    function setDestoryTriggerAddress(address _destoryTriggerAddress) external onlyOwner{\r\n        destoryTriggerAddress = _destoryTriggerAddress;\r\n    }\r\n\r\n\r\n\r\n    function setUserPercent(uint256 _userPercent) external onlyOwner{\r\n        require(_userPercent <= 100);\r\n        userPercent = _userPercent;\r\n    }\r\n\r\n    function setLpTool(ILPTool _lpTool) external onlyOwner{\r\n        lpTool = _lpTool;\r\n    }\r\n\r\n    function  setAutoAdjustAlloc(bool _autoAdjustAlloc) external onlyOwner{\r\n        autoAdjustAlloc = _autoAdjustAlloc;\r\n    }\r\n\r\n    function setInviteRewardLpValue(uint256 _inviteRewardLpValue) external onlyOwner{\r\n        inviteRewardLpValue = _inviteRewardLpValue;\r\n    }\r\n\r\n\r\n    function setPerBlock(uint256 _perBlock) public onlyOwner {\r\n        if(block.number>startBlock){\r\n            massUpdatePools();\r\n        }\r\n        perBlock = _perBlock;\r\n    }\r\n\r\n\r\n    function setStartBlock(uint256 _startBlock) public onlyOwner {\r\n        require(startBlock > block.number && _startBlock > block.number,\"Mining started\");\r\n        startBlock = _startBlock;\r\n        massUpdatePoolsStartBlock();\r\n    }\r\n\r\n\r\n\r\n\r\n    function totalBlockReward() public view returns (uint256) {\r\n        if(perBlock==0 || startBlock ==0) return 0;\r\n        return getBlockReward(startBlock);\r\n    }\r\n\r\n\r\n    function balanceOfProfit(address _user) public view returns (uint256) {\r\n        return pending(_user);\r\n    }\r\n\r\n    function getBlockReward(uint256 _lastRewardBlock) public view returns (uint256) {\r\n        uint256 blockReward = 0;\r\n        blockReward = blockReward.add(block.number.sub(_lastRewardBlock).mul(perBlock));\r\n        return blockReward;\r\n    }\r\n\r\n\r\n\r\n\r\n    function setisDestoryNullLp(address lpAddress,bool isDestory) external onlyOwner{\r\n        isDestoryNullLp[lpAddress] = isDestory;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\ncontract CBG is CBGPool {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    string public name = \"Cyborg\";\r\n    string public symbol = \"CBG\";\r\n\r\n    uint8  public decimals = 18;\r\n\r\n    uint private _totalSupply;\r\n\r\n    uint256 private mintRemainderRaward = 20600000 * 1e18;\r\n    uint256 public mintRawardAmount;\r\n\r\n    uint public _technologyRate = 5;\r\n    address public _technologyAddr= address(0x1742F5d1CB07b250A29dbD1e61E39E55a5399675);\r\n\r\n    uint public _daoFundRate = 5;\r\n    address public _daoFundAddr= address(0x5410164f039147B261B25401A60202e3583C9e16);\r\n\r\n    uint public _daoRate = 20;\r\n    address public _daoAddr= address(0x7C5D7F63B18674261d724596A4cA5FFf8F4E40fA);\r\n\r\n    uint public _destoryRate = 20;\r\n    address public _destoryAddr1 = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n\r\n\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event AddedWhiteList(address _user);\r\n    event RemovedWhiteList(address _user);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 swapAmount,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    mapping (address => uint)                       private  _balances;\r\n    mapping (address => mapping (address => uint))  private  _allowances;\r\n    mapping (address => bool) public isWhiteListed;\r\n\r\n\r\n\r\n    constructor(uint256 _perBlock, uint256 _startBlock,ILPTool _tool,address _holder)  CBGPool(_startBlock ,_perBlock, _tool)\r\n    {\r\n        _totalSupply = mintRemainderRaward;\r\n\r\n        _mint(_holder, 400000 * 1e18);\r\n        isWhiteListed[owner] = true;\r\n        isWhiteListed[address(this)] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address _user) public view returns (uint256) {\r\n        return _balances[_user];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address sender, address spender, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function transfer(address to, uint amount) public returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function _takeBuyFee(uint256 tAmount) internal returns(uint allocatedAmount){\r\n        uint curTAmount = 0;\r\n\r\n\r\n        if(_technologyRate>0) {\r\n            curTAmount = tAmount.mul(_technologyRate).div(1000);\r\n            _balances[_technologyAddr] = _balances[_technologyAddr].add(curTAmount);\r\n            allocatedAmount = allocatedAmount.add(curTAmount);\r\n        }\r\n\r\n        if(_daoFundRate>0) {\r\n            curTAmount = tAmount.mul(_daoFundRate).div(1000);\r\n            _balances[_daoFundAddr] = _balances[_daoFundAddr].add(curTAmount);\r\n            allocatedAmount = allocatedAmount.add(curTAmount);\r\n        }\r\n\r\n        if(_daoRate>0) {\r\n            curTAmount = tAmount.mul(_daoRate).div(1000);\r\n            _balances[_daoAddr] = _balances[_daoAddr].add(curTAmount);\r\n            allocatedAmount = allocatedAmount.add(curTAmount);\r\n        }\r\n\r\n    }\r\n\r\n    function _takeSellFee(uint256 tAmount) internal returns(uint allocatedAmount){\r\n        uint curTAmount = 0;\r\n\r\n        if(_technologyRate>0) {\r\n            curTAmount = tAmount.mul(_technologyRate).div(1000);\r\n            _balances[_technologyAddr] = _balances[_technologyAddr].add(curTAmount);\r\n            allocatedAmount = allocatedAmount.add(curTAmount);\r\n        }\r\n\r\n        if(_daoFundRate>0) {\r\n            curTAmount = tAmount.mul(_daoFundRate).div(1000);\r\n            _balances[_daoFundAddr] = _balances[_daoFundAddr].add(curTAmount);\r\n            allocatedAmount = allocatedAmount.add(curTAmount);\r\n        }\r\n\r\n        if(_destoryRate>0) {\r\n            curTAmount = tAmount.mul(_destoryRate).div(1000);\r\n             _totalSupply = _totalSupply.sub(curTAmount, \"ERC20: destory amount exceeds totalSupply\");\r\n            _balances[_destoryAddr1] = _balances[_destoryAddr1].add(curTAmount);\r\n            allocatedAmount = allocatedAmount.add(curTAmount);\r\n        }\r\n\r\n    }\r\n\r\n    function _checkPool(address src) internal {\r\n        uint256 pendingReward = 0;\r\n        uint256 leftAmount  = 0;\r\n        uint256 length = lpAddressList.length;\r\n        for(uint i = 0;i<length;i++){\r\n            if(src == deadAddress && !isDestoryNullLp[lpAddressList[i]]){\r\n                continue;\r\n            }\r\n            IPancakePair pair = IPancakePair(lpAddressList[i]);\r\n            uint256 balanceLp = pair.balanceOf(src);\r\n            pendingReward = pendingReward.add(deposit(lpAddressList[i],src,balanceLp));\r\n        }\r\n\r\n        if(src != deadAddress && pendingReward > 0){\r\n            uint256 userPercentAmount = pendingReward.mul(1e12).mul(userPercent).div(1000).div(1e12);\r\n            leftAmount = distributeReward(src,pendingReward.sub(userPercentAmount));\r\n            pendingReward = userPercentAmount;\r\n        }\r\n\r\n        pendingReward = userInviteRewardMap[src].add(pendingReward);\r\n        userInviteRewardMap[src] = 0;\r\n\r\n        if(pendingReward > 0){\r\n            _reward(src,pendingReward);\r\n        }\r\n\r\n        if(leftAmount >0){\r\n            _reward(deadAddress,leftAmount);\r\n        }\r\n\r\n    }\r\n\r\n    function _sellFee(address sender, address recipient, uint amount) private {\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        uint bal = amount;\r\n        if(!isWhiteListed[sender]) {\r\n            uint lpAmount = _takeSellFee(amount);\r\n            bal = amount.sub(lpAmount);\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient].add(bal);\r\n        emit Transfer(sender, recipient, bal);\r\n    }\r\n\r\n    function _buyFee(address sender, address recipient, uint amount) private {\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        uint bal = amount;\r\n        if(!isWhiteListed[recipient]) {\r\n            uint otherAmount = _takeBuyFee(amount);\r\n            bal = amount.sub(otherAmount);\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient].add(bal);\r\n        emit Transfer(sender, recipient, bal);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount>0, \"ERC20: Transfer amount must be greater than zero\");\r\n\r\n\r\n        if(recipient == address(this) && amount == 10 ** 14) {\r\n            address src = sender;\r\n            if(sender == destoryTriggerAddress){\r\n                src = deadAddress;\r\n            }\r\n            _checkPool(src);\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        } else if(recipient == address(this) && amount == 2 * 1e14) {\r\n            updatePoolAllocPoint();\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        } else if (isPairAddree(sender) &&  recipient != pancakeswapV2Router){\r\n            _buyFee(sender, recipient, amount);\r\n        } else if(isPairAddree(recipient) &&  sender != pancakeswapV2Router ) {\r\n            _sellFee(sender,recipient, amount);\r\n        }else {\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function _mint(address account, uint256 amount) private {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _reward(address src,uint256 _amount) private {\r\n        if(_amount>0 && mintRemainderRaward>0) {\r\n            if(_amount>mintRemainderRaward) {\r\n                _amount = mintRemainderRaward;\r\n            }\r\n            mintRemainderRaward = mintRemainderRaward.sub(_amount, \"ERC20: transfer amount exceeds balance\");\r\n            mintRawardAmount = mintRawardAmount.add(_amount);\r\n            if(src == deadAddress){\r\n                _totalSupply = _totalSupply.sub(_amount, \"ERC20: destory amount exceeds totalSupply\");\r\n            }\r\n            _balances[src] = _balances[src].add(_amount);\r\n            emit Transfer(address(this), src, _amount);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function addWhiteList(address[] memory _evilUser) public onlyOwner {\r\n        require(_evilUser.length > 0);\r\n        for (uint256 i = 0; i < _evilUser.length; i++) {\r\n            if (_evilUser[i] != address(0) && !isWhiteListed[_evilUser[i]]) {\r\n                isWhiteListed[_evilUser[i]] = true;\r\n                emit AddedWhiteList(_evilUser[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeWhiteList(address[] memory _clearedUser) public onlyOwner {\r\n        require(_clearedUser.length > 0);\r\n        for (uint256 i = 0; i < _clearedUser.length; i++) {\r\n            if (isWhiteListed[_clearedUser[i]]) {\r\n                isWhiteListed[_clearedUser[i]] = false;\r\n                emit RemovedWhiteList(_clearedUser[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function setDestoryRate(uint rate_) public onlyOwner {\r\n        require(rate_.add(_technologyRate).add(_daoFundRate)<=30, \"Rate cannot exceed 1000\");\r\n\r\n        _destoryRate = rate_;\r\n    }\r\n\r\n\r\n    function setTechnologyRate(uint rate_) public onlyOwner {\r\n        require(rate_.add(_destoryRate).add(_daoFundRate)<=30, \"Rate cannot exceed 1000\");\r\n        require(rate_.add(_daoFundRate).add(_daoRate)<=30, \"Rate cannot exceed 1000\");\r\n\r\n\r\n        _technologyRate = rate_;\r\n    }\r\n\r\n    function setDaoFundRate(uint rate_) public onlyOwner {\r\n        require(rate_.add(_destoryRate).add(_technologyRate)<=30, \"Rate cannot exceed 1000\");\r\n        require(rate_.add(_technologyRate).add(_daoRate)<=30, \"Rate cannot exceed 1000\");\r\n\r\n        _daoFundRate = rate_;\r\n    }\r\n\r\n    //destoryRate\r\n    function setDaoRate(uint rate_) public onlyOwner {\r\n        require(rate_.add(_technologyRate).add(_daoFundRate)<=30, \"Rate cannot exceed 1000\");\r\n        _daoRate = rate_;\r\n    }\r\n\r\n\r\n    function setTechnologyAddr(address account) public onlyOwner {\r\n        _technologyAddr = account;\r\n    }\r\n\r\n    function setDaoFundAddr(address account) public onlyOwner {\r\n        _daoFundAddr = account;\r\n    }\r\n\r\n    function setDaoAddr(address account) public onlyOwner {\r\n        _daoAddr = account;\r\n    }\r\n\r\n    function setDestoryAddr(address account) public onlyOwner {\r\n        _destoryAddr1 = account;\r\n    }\r\n\r\n\r\n    function setCpt(address _cpt) external onlyOwner{\r\n        CPTToken = IERC20Ext(_cpt);\r\n    }\r\n\r\n    function withdrawOther(address _tokenAddress, uint256 amount,address to) external onlyOwner{\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        token.transfer(to,amount);\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract ILPTool\",\"name\":\"_tool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subAmount\",\"type\":\"uint256\"}],\"name\":\"InviteAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StartPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StopPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_daoAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_daoFundAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_daoFundRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_daoRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destoryAddr1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destoryRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_layerHashMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_layerHashRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_technologyAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_technologyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_evilUser\",\"type\":\"address[]\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAdjustAlloc\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOfProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cbgPeacePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destoryTriggerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastRewardBlock\",\"type\":\"uint256\"}],\"name\":\"getBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviteRewardLpValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDestoryNullLp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpAddressList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTool\",\"outputs\":[{\"internalType\":\"contract ILPTool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRawardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeFactory\",\"outputs\":[{\"internalType\":\"contract IPancakeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouterr\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peaceToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peaceUsdPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfoMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isStart\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_clearedUser\",\"type\":\"address[]\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoAdjustAlloc\",\"type\":\"bool\"}],\"name\":\"setAutoAdjustAlloc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cpt\",\"type\":\"address\"}],\"name\":\"setCpt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setDaoAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setDaoFundAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"setDaoFundRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"setDaoRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setDestoryAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"setDestoryRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destoryTriggerAddress\",\"type\":\"address\"}],\"name\":\"setDestoryTriggerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inviteRewardLpValue\",\"type\":\"uint256\"}],\"name\":\"setInviteRewardLpValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"layerHashMax_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rates_\",\"type\":\"uint256[]\"}],\"name\":\"setLayerHashRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILPTool\",\"name\":\"_lpTool\",\"type\":\"address\"}],\"name\":\"setLpTool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perBlock\",\"type\":\"uint256\"}],\"name\":\"setPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTechnologyAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"setTechnologyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userPercent\",\"type\":\"uint256\"}],\"name\":\"setUserPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDestory\",\"type\":\"bool\"}],\"name\":\"setisDestoryNullLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"stopLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBlockReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfoMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInviteRewardMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawOther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CBG", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000002a13d3ef8efc00000000000000000000000000000000000000000000000000000000000012ef9c1000000000000000000000000b838c91de83403facdb415b652903b46ae839b2a000000000000000000000000b1fb433ee0859a82dabcce8b705ad28cc8be1bd6", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://43c5bdb7b7a349c5e24b61b4f30418d795e8582909cfa6b65ab7161cc9598061"}