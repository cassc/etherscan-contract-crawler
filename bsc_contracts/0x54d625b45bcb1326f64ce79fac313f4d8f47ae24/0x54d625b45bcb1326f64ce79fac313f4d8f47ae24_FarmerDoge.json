{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n// FarmerDoge final\r\n//\r\n// https://t.me/farmerdoge\r\n//\r\npragma solidity ^0.8.4;\r\n\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * C U ON THE MOON\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function changeToken(address newToken, bool forceChange) external;\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n    function claimDividend(address shareholder) external;\r\n    function checkUnpaidDividends(address shareholder) external view returns (uint256);\r\n    function checkTokenChangeProgress() external view returns (uint256 count, uint256 progress);\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n\r\n    address _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n        uint256 lastConversionNumerator;\r\n        uint256 lastConversionDivisor;\r\n    }\r\n\r\n    IERC20 TOKEN;\r\n    address WBNB;\r\n    IDEXRouter router;\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n    uint256 public tokenConversionNumerator;\r\n    uint256 public tokenConversionDivisor;\r\n    uint256 public tokenConversionCount;\r\n    uint256 public tokenConversionProgress;\r\n\r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public minDistribution = 1 * (10 ** 18);\r\n\r\n    uint256 currentIndex;\r\n\r\n    bool initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    constructor (address _router, address reflectToken, address _wbnb) {\r\n        router = IDEXRouter(_router);\r\n        TOKEN = IERC20(reflectToken);\r\n        WBNB = _wbnb;\r\n        _token = msg.sender;\r\n    }\r\n    \r\n    function changeToken(address newToken, bool forceChange) external override onlyToken {\r\n        require(tokenConversionCount <= tokenConversionProgress || forceChange, \"Previous conversion not complete.\");\r\n        tokenConversionDivisor = TOKEN.balanceOf(address(this));\r\n        require(totalDividends == 0 || tokenConversionDivisor > 0, \"Requires at least some of initial token to calculate convertion rate.\");\r\n        \r\n        if (tokenConversionDivisor > 0) {\r\n            TOKEN.approve(address(router), tokenConversionDivisor);\r\n            \r\n            address[] memory path = new address[](3);\r\n            path[0] = address(TOKEN);\r\n            path[1] = WBNB;\r\n            path[2] = address(newToken);\r\n    \r\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenConversionDivisor,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n            \r\n            tokenConversionCount = shareholders.length;\r\n            tokenConversionProgress = 0;\r\n        }\r\n        \r\n        TOKEN = IERC20(newToken);\r\n        \r\n        if (totalDividends > 0) {\r\n            tokenConversionNumerator = TOKEN.balanceOf(address(this));\r\n            \r\n            totalDividends = (totalDividends * tokenConversionNumerator) / tokenConversionDivisor;\r\n            dividendsPerShare = (dividendsPerShare * tokenConversionNumerator) / tokenConversionDivisor;\r\n            totalDistributed = (totalDistributed * tokenConversionNumerator) / tokenConversionDivisor;\r\n        }\r\n    }\r\n    \r\n    function checkTokenChangeProgress() external override view returns (uint256 count, uint256 progress) {\r\n        return (tokenConversionCount, tokenConversionProgress);\r\n    }\r\n    \r\n    function processTokenChange(address shareholder) internal {\r\n        if(shares[shareholder].lastConversionNumerator != tokenConversionNumerator || shares[shareholder].lastConversionDivisor != tokenConversionDivisor) {\r\n            shares[shareholder].lastConversionNumerator = tokenConversionNumerator;\r\n            shares[shareholder].lastConversionDivisor = tokenConversionDivisor;\r\n            shares[shareholder].totalRealised = (shares[shareholder].totalRealised * tokenConversionNumerator) / tokenConversionDivisor;\r\n            shares[shareholder].totalExcluded = (shares[shareholder].totalExcluded * tokenConversionNumerator) / tokenConversionDivisor;\r\n        }\r\n        tokenConversionProgress++;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            if(shares[shareholder].lastConversionNumerator != tokenConversionNumerator || shares[shareholder].lastConversionDivisor != tokenConversionDivisor) { processTokenChange(shareholder); }\r\n            distributeDividend(shareholder, getUnpaidEarnings(shareholder));\r\n        }\r\n\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = (totalShares - shares[shareholder].amount) + amount;\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = TOKEN.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(TOKEN);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = TOKEN.balanceOf(address(this)) - balanceBefore;\r\n\r\n        totalDividends = totalDividends + amount;\r\n        dividendsPerShare = dividendsPerShare + ((dividendsPerShareAccuracyFactor * amount) / totalShares);\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n            \r\n            if(shares[shareholders[currentIndex]].lastConversionNumerator != tokenConversionNumerator || shares[shareholders[currentIndex]].lastConversionDivisor != tokenConversionDivisor)\r\n                processTokenChange(shareholders[currentIndex]);\r\n            \r\n            uint256 unpaidEarnings = getUnpaidEarnings(shareholders[currentIndex]);\r\n            if(shouldDistribute(shareholders[currentIndex], unpaidEarnings)){\r\n                distributeDividend(shareholders[currentIndex], unpaidEarnings);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder, uint256 unpaidEarnings) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && unpaidEarnings > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder, uint256 unpaidEarnings) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n\r\n        if(unpaidEarnings > 0){\r\n            totalDistributed = totalDistributed + unpaidEarnings;\r\n            TOKEN.transfer(shareholder, unpaidEarnings);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            \r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised + unpaidEarnings;\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n\r\n    function claimDividend(address shareholder) external override {\r\n        if(shares[shareholder].lastConversionNumerator != tokenConversionNumerator || shares[shareholder].lastConversionDivisor != tokenConversionDivisor) { processTokenChange(shareholder); }\r\n        distributeDividend(shareholder, getUnpaidEarnings(shareholder));\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n        \r\n        if(shares[shareholder].lastConversionNumerator != tokenConversionNumerator || shares[shareholder].lastConversionDivisor != tokenConversionDivisor) {\r\n            shareholderTotalDividends = (shareholderTotalDividends * tokenConversionNumerator) / tokenConversionDivisor;\r\n            shareholderTotalExcluded = (shareholderTotalExcluded * tokenConversionNumerator) / tokenConversionDivisor;\r\n        }\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends - shareholderTotalExcluded;\r\n    }\r\n    \r\n    function checkUnpaidDividends(address shareholder) external view override returns (uint256) {\r\n        return getUnpaidEarnings(shareholder);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return (share * dividendsPerShare) / dividendsPerShareAccuracyFactor;\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        if(shares[shareholder].lastConversionNumerator != tokenConversionNumerator || shares[shareholder].lastConversionDivisor != tokenConversionDivisor)\r\n            tokenConversionProgress++;\r\n            \r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ncontract FarmerDoge is IERC20, Ownable {\r\n    using Address for address;\r\n    \r\n    address WBNB;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    IERC20 discountToken;\r\n    uint256 discountTokenMaxWallet;\r\n    address public currentlyServing;\r\n\r\n    string _name = \"FarmerDoge (Launch Day)\";\r\n    string _symbol = \"CROP\";\r\n    uint8 constant _decimals = 9;\r\n\r\n    uint256 _totalSupply = 10000000000 * (10 ** _decimals);\r\n    uint256 public _maxTxAmount = (_totalSupply * 1) / 100;\r\n    uint256 public _maxWalletSize = (_totalSupply * 1) / 100;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => bool) isDividendExempt;\r\n    mapping (address => bool) airDropped;\r\n    mapping (address => uint256) airDropVestingPeriod;\r\n    mapping (address => uint256) airDropBalance;\r\n    mapping (address => uint256) lastSell;\r\n\r\n    uint256 liquidityFee = 1000;\r\n    uint256 buybackFee = 0;\r\n    uint256 reflectionFee = 500;\r\n    uint256 marketingFee = 500;\r\n    uint256 totalFee = 2000;\r\n    uint256 feeDenominator = 10000;\r\n    uint256 public _sellMultiplierNumerator = 150;\r\n    uint256 public _sellMultiplierDenominator = 100;\r\n    uint256 public _dumpProtectionNumerator = 50;\r\n    uint256 public _dumpProtectionDenominator = 100 * _maxTxAmount;\r\n    uint256 public _dumpProtectionThreshold = 3;\r\n    uint256 public _dumpProtectionTimer = 15 seconds;\r\n    uint256 public _discountNumerator = 100;\r\n    uint256 public _discountDenominator = 100;\r\n\r\n    address public autoLiquidityReceiver;\r\n    address payable public marketingFeeReceiver;\r\n\r\n    uint256 targetLiquidity = 35;\r\n    uint256 targetLiquidityDenominator = 100;\r\n\r\n    IDEXRouter public router;\r\n    address routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    address public pair;\r\n\r\n    uint256 public launchedAt;\r\n    uint256 public launchedTime;\r\n\r\n    uint256 buybackMultiplierTriggeredAt;\r\n    uint256 buybackMultiplierLength = 30 minutes;\r\n\r\n    bool public autoBuybackEnabled = false;\r\n    uint256 autoBuybackCap;\r\n    uint256 autoBuybackAccumulator;\r\n    uint256 autoBuybackAmount;\r\n    uint256 autoBuybackBlockPeriod;\r\n    uint256 autoBuybackBlockLast;\r\n\r\n    DividendDistributor distributor;\r\n    uint256 distributorGas = 500000;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply / 2000;\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () {\r\n        router = IDEXRouter(routerAddress);\r\n        WBNB = router.WETH();\r\n        currentlyServing = WBNB;\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[msg.sender][routerAddress] = type(uint256).max;\r\n        _allowances[address(this)][routerAddress] = type(uint256).max;\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[routerAddress] = true;\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        isDividendExempt[ZERO] = true;\r\n        autoLiquidityReceiver = msg.sender;\r\n        marketingFeeReceiver = payable(msg.sender);\r\n\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure returns (uint8) { return _decimals; }\r\n    function symbol() external view returns (string memory) { return _symbol; }\r\n    function name() external view returns (string memory) { return _name; }\r\n    function getOwner() external view returns (address) { return owner(); }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    \r\n    function updateTokenDetails(string memory newName, string memory newSymbol) external onlyOwner {\r\n        _name = newName;\r\n        _symbol = newSymbol;\r\n    }\r\n    \r\n    function airdrop(address[] memory addresses, uint256[] memory amounts, uint256 vestingPeriod, bool fromContract) external onlyOwner {\r\n        require(addresses.length > 0 && amounts.length > 0 && addresses.length == amounts.length);\r\n        address from = fromContract ? address(this) : msg.sender;\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            if(balanceOf(addresses[i]) == 0) {\r\n                _allowances[from][addresses[i]] = amounts[i];\r\n                _transferFrom(from, addresses[i], amounts[i]);\r\n                airDropVestingPeriod[addresses[i]] = block.timestamp + vestingPeriod;\r\n                airDropBalance[addresses[i]] = amounts[i];\r\n                airDropped[addresses[i]] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(airDropped[sender]){\r\n            if(airDropVestingPeriod[sender] <= block.timestamp)\r\n            {\r\n                airDropped[sender] = false;\r\n            }\r\n            else\r\n            {\r\n                require(_balances[sender] - airDropBalance[sender] >= amount, \"Tokens have not vested yet\");\r\n            }\r\n        }\r\n        require(_balances[sender] >= amount, \"Insufficient balance\");\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        checkTxLimit(sender, amount);\r\n        \r\n        if (recipient != pair && recipient != DEAD) {\r\n            if (!isTxLimitExempt[recipient]) checkWalletLimit(recipient, amount);\r\n        }\r\n\r\n        if(!launched() && recipient == pair){ require(sender == owner(), \"Contract not launched yet.\"); launch(); }\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, recipient, amount) : amount;\r\n        \r\n        if(shouldSwapBack(recipient)){ swapBack(amount); }\r\n        if(shouldAutoBuyback(recipient)){ triggerAutoBuyback(); }\r\n        \r\n        _balances[recipient] = _balances[recipient] + amountReceived;\r\n\r\n        if(!isDividendExempt[sender]){ try distributor.setShare(sender, _balances[sender]) {} catch {} }\r\n        if(!isDividendExempt[recipient]){ try distributor.setShare(recipient, _balances[recipient]) {} catch {} }\r\n\r\n        try distributor.process(distributorGas) {} catch {}\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function checkWalletLimit(address recipient, uint256 amount) internal view {\r\n        uint256 walletLimit = _maxWalletSize;\r\n        if (_discountNumerator > 0) {\r\n            uint256 balance;\r\n            balance = discountToken.balanceOf(recipient);\r\n            if (balance > 0)\r\n                walletLimit = walletLimit + (walletLimit * getDiscountRate(balance)) / totalFee;\r\n        }\r\n        require(_balances[recipient] + amount <= walletLimit, \"Transfer amount exceeds the bag size.\");\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n    \r\n    function setup(address reflectToken) external onlyOwner {\r\n        require(!launched());\r\n        currentlyServing = reflectToken;\r\n        distributor = new DividendDistributor(routerAddress, currentlyServing, WBNB);\r\n        discountTokenMaxWallet = 1;\r\n    }\r\n    \r\n    function setDiscountToken(address _discountToken, uint256 _discountMaxWallet) external onlyOwner {\r\n        require(_discountToken.isContract());\r\n        discountToken = IERC20(_discountToken);\r\n        _discountDenominator = (_discountDenominator * _discountMaxWallet) / discountTokenMaxWallet;\r\n        discountTokenMaxWallet = _discountMaxWallet;\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n    \r\n    function getDiscountRate(uint256 balance) internal view returns (uint256) {\r\n        if (balance > discountTokenMaxWallet)\r\n            balance = discountTokenMaxWallet;\r\n        return (totalFee * balance * _discountNumerator) / _discountDenominator;\r\n    }\r\n    \r\n    function checkDiscountRate(address wallet) external view returns (uint256) {\r\n        return getDiscountRate(discountToken.balanceOf(wallet));\r\n    }\r\n\r\n    function getTotalFee(bool selling, address sender, address recipient, uint256 amount) public view returns (uint256) {\r\n        if(launchedAt + 1 >= block.number){ return feeDenominator - 1; }\r\n        if(selling){\r\n            if (lastSell[sender] + _dumpProtectionTimer <= block.timestamp)\r\n                return (totalFee * _sellMultiplierNumerator) / _sellMultiplierDenominator + (amount > swapThreshold * _dumpProtectionThreshold  ? ( amount * totalFee * _dumpProtectionNumerator) / _dumpProtectionDenominator : 0); \r\n            else\r\n                return (totalFee * _sellMultiplierNumerator) / _sellMultiplierDenominator + (_maxTxAmount * totalFee * _dumpProtectionNumerator) / _dumpProtectionDenominator; \r\n        }\r\n        if (_discountNumerator == 0 || isDividendExempt[recipient]) \r\n            return totalFee;\r\n        uint256 balance = discountToken.balanceOf(recipient);\r\n        if (balance == 0)\r\n            return totalFee;\r\n        return totalFee - getDiscountRate(balance);\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = (amount * getTotalFee(recipient == pair, sender, recipient, amount)) / feeDenominator;\r\n        if (recipient == pair) lastSell[sender] = block.timestamp;\r\n\r\n        _balances[address(this)] = _balances[address(this)] + feeAmount;\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function shouldSwapBack(address recipient) internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && recipient == pair\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function swapBack(uint256 amount) internal swapping {\r\n        uint256 swapHolderProtection = amount > swapThreshold * _dumpProtectionThreshold ? amount + (_dumpProtectionNumerator * amount * amount) / (_dumpProtectionDenominator * 2) : amount;\r\n        if (_balances[address(this)] < swapHolderProtection) swapHolderProtection = _balances[address(this)];\r\n        if (swapHolderProtection > _maxTxAmount) swapHolderProtection = _maxTxAmount;\r\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\r\n        uint256 amountToLiquify = ((swapHolderProtection * dynamicLiquidityFee) / totalFee) / 2;\r\n        uint256 amountToSwap = swapHolderProtection - amountToLiquify;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n        \r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance - balanceBefore;\r\n        uint256 totalBNBFee = totalFee - dynamicLiquidityFee / 2;\r\n\r\n        uint256 amountBNBLiquidity = (amountBNB * dynamicLiquidityFee) / totalBNBFee / 2;\r\n        uint256 amountBNBReflection = (amountBNB * reflectionFee) / totalBNBFee;\r\n        uint256 amountBNBMarketing = amountBNB - (amountBNBLiquidity + amountBNBReflection);\r\n\r\n        try distributor.deposit{value: amountBNBReflection}() {} catch {}\r\n        \r\n        marketingFeeReceiver.transfer(amountBNBMarketing);\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n\r\n    function shouldAutoBuyback(address recipient) internal view returns (bool) {\r\n        return msg.sender != pair\r\n            && !inSwap\r\n            && autoBuybackEnabled\r\n            && autoBuybackBlockLast + autoBuybackBlockPeriod <= block.number\r\n            && recipient == pair\r\n            && address(this).balance >= autoBuybackAmount;\r\n    }\r\n\r\n    function triggerManualBuyback(uint256 amount, bool triggerBuybackMultiplier) external onlyOwner {\r\n        buyTokens(amount, DEAD);\r\n        if(triggerBuybackMultiplier){\r\n            buybackMultiplierTriggeredAt = block.timestamp;\r\n            emit BuybackMultiplierActive(buybackMultiplierLength);\r\n        }\r\n    }\r\n    \r\n    function manualTokenPurchase(uint256 amount) external onlyOwner {\r\n        try distributor.deposit{value: amount}() {} catch {}\r\n    }\r\n\r\n    function clearBuybackMultiplier() external onlyOwner {\r\n        buybackMultiplierTriggeredAt = 0;\r\n    }\r\n\r\n    function triggerAutoBuyback() internal {\r\n        buyTokens(autoBuybackAmount, DEAD);\r\n        autoBuybackBlockLast = block.number;\r\n        autoBuybackAccumulator = autoBuybackAccumulator + autoBuybackAmount;\r\n        if(autoBuybackAccumulator > autoBuybackCap){ autoBuybackEnabled = false; }\r\n    }\r\n\r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setAutoBuybackSettings(bool _enabled, uint256 _cap, uint256 _amount, uint256 _period) external onlyOwner {\r\n        autoBuybackEnabled = _enabled;\r\n        autoBuybackCap = _cap;\r\n        autoBuybackAccumulator = 0;\r\n        autoBuybackAmount = _amount;\r\n        autoBuybackBlockPeriod = _period;\r\n        autoBuybackBlockLast = block.number;\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function launch() internal {\r\n        launchedAt = block.number;\r\n        launchedTime = block.timestamp;\r\n    }\r\n\r\n    function setTxLimit(uint256 numerator, uint256 divisor) external onlyOwner {\r\n        require(numerator > 0 && divisor > 0 && divisor <= 10000);\r\n        _maxTxAmount = (_totalSupply * numerator) / divisor;\r\n    }\r\n    \r\n    function setReflectToken(address newToken, bool forceChange) external onlyOwner {\r\n        require(newToken.isContract(), \"Enter valid contract address\");\r\n        distributor.changeToken(newToken, forceChange);\r\n        currentlyServing = newToken;\r\n    }\r\n    \r\n    function checkReflectTokenUpdate() external view onlyOwner returns (uint256 count, uint256 progress) {\r\n        return distributor.checkTokenChangeProgress();\r\n    }\r\n    \r\n    function setMaxWallet(uint256 numerator, uint256 divisor) external onlyOwner() {\r\n        require(numerator > 0 && divisor > 0 && divisor <= 10000);\r\n        _maxWalletSize = (_totalSupply * numerator) / divisor;\r\n    }\r\n    \r\n    function setSellMultiplier(uint256 numerator, uint256 divisor) external onlyOwner() {\r\n        require(divisor > 0 && numerator / divisor <= 3, \"Taxes too high\");\r\n        _sellMultiplierNumerator = numerator;\r\n        _sellMultiplierDenominator = divisor;\r\n    }\r\n    \r\n    function setDumpMultiplier(uint256 numerator, uint256 divisor, uint256 dumpThreshold, uint256 dumpTimer) external onlyOwner() {\r\n        require(divisor > 0 && numerator / divisor <= 2 , \"Taxes too high\");\r\n        _dumpProtectionNumerator = numerator;\r\n        _dumpProtectionDenominator = divisor * _maxTxAmount;\r\n        _dumpProtectionThreshold = dumpThreshold;\r\n        _dumpProtectionTimer = dumpTimer;\r\n    }\r\n    \r\n    function setDiscountMultiplier(uint256 numerator, uint256 divisor) external onlyOwner() {\r\n        require(divisor > 0 && numerator / divisor <= 1);\r\n        _discountNumerator = numerator;\r\n        _discountDenominator = divisor * discountTokenMaxWallet;\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt) external onlyOwner {\r\n        require(holder != address(this) && holder != pair);\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){\r\n            distributor.setShare(holder, 0);\r\n        }else{\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setFees(uint256 _liquidityFee, uint256 _buybackFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _feeDenominator) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        buybackFee = _buybackFee;\r\n        reflectionFee = _reflectionFee;\r\n        marketingFee = _marketingFee;\r\n        totalFee = _liquidityFee + _buybackFee + _reflectionFee + _marketingFee;\r\n        feeDenominator = _feeDenominator;\r\n        require(totalFee < feeDenominator / 4);\r\n    }\r\n\r\n    function setFeeReceivers(address _autoLiquidityReceiver, address _marketingFeeReceiver) external onlyOwner {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        marketingFeeReceiver = payable(_marketingFeeReceiver);\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _denominator) external onlyOwner {\r\n        require(_denominator > 0);\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _totalSupply / _denominator;\r\n    }\r\n\r\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external onlyOwner {\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external onlyOwner {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external onlyOwner {\r\n        require(gas < 750000);\r\n        distributorGas = gas;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - (balanceOf(DEAD) + balanceOf(ZERO));\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        return (accuracy * balanceOf(pair) * 2) / getCirculatingSupply();\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n    \r\n    function availableDividends(address account) external view returns (uint256) {\r\n\t    return distributor.checkUnpaidDividends(account);\r\n\t}\r\n\t\r\n\tfunction claimDividends() external {\r\n\t    distributor.claimDividend(msg.sender);\r\n\t    try distributor.process(distributorGas) {} catch {}\r\n\t}\r\n\r\n    function processDividends() external {\r\n\t    try distributor.process(distributorGas) {} catch {}\r\n\t}\r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n    event BuybackMultiplierActive(uint256 duration);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"BuybackMultiplierActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_discountDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_discountNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dumpProtectionDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dumpProtectionNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dumpProtectionThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dumpProtectionTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMultiplierDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMultiplierNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fromContract\",\"type\":\"bool\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"availableDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"checkDiscountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReflectTokenUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"progress\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearBuybackMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentlyServing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"selling\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualTokenPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setAutoBuybackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setDiscountMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_discountToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_discountMaxWallet\",\"type\":\"uint256\"}],\"name\":\"setDiscountToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dumpThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dumpTimer\",\"type\":\"uint256\"}],\"name\":\"setDumpMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"forceChange\",\"type\":\"bool\"}],\"name\":\"setReflectToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setSellMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reflectToken\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerBuybackMultiplier\",\"type\":\"bool\"}],\"name\":\"triggerManualBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"updateTokenDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FarmerDoge", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8a20c3b3a90e3e25bf9ccba4f71ca81e540aeae54dd51267aef06dc2ea31eab2"}