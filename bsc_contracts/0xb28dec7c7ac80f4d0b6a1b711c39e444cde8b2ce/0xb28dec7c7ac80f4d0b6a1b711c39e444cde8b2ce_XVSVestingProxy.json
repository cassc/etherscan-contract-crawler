{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/VRT/XVSVesting.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../Utils/IBEP20.sol\\\";\\nimport \\\"../Utils/SafeBEP20.sol\\\";\\nimport \\\"./XVSVestingStorage.sol\\\";\\nimport \\\"./XVSVestingProxy.sol\\\";\\n\\n/**\\n * @title Venus's XVSVesting Contract\\n * @author Venus\\n */\\ncontract XVSVesting is XVSVestingStorage {\\n    using SafeMath for uint256;\\n    using SafeBEP20 for IBEP20;\\n\\n    /// @notice total vesting period for 1 year in seconds\\n    uint256 constant public TOTAL_VESTING_TIME = 365 * 24 * 60 * 60;\\n\\n    /// @notice decimal precision for XVS\\n    uint256 constant public xvsDecimalsMultiplier = 1e18;\\n\\n    /// @notice Emitted when XVSVested is claimed by recipient\\n    event VestedTokensClaimed(address recipient, uint256 amountClaimed);\\n\\n    /// @notice Emitted when vrtConversionAddress is set\\n    event VRTConversionSet(address vrtConversionAddress);\\n\\n    /// @notice Emitted when XVS is deposited for vesting\\n    event XVSVested(\\n        address indexed recipient,\\n        uint256 startTime,\\n        uint256 amount,\\n        uint256 withdrawnAmount\\n    );\\n\\n    /// @notice Emitted when XVS is withdrawn by recipient\\n    event XVSWithdrawn(address recipient, uint256 amount);\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"Address cannot be Zero\\\");\\n        _;\\n    }\\n\\n    constructor() public {}\\n\\n    /**\\n     * @notice initialize XVSVestingStorage\\n     * @param _xvsAddress The XVSToken address\\n     */\\n    function initialize(address _xvsAddress) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the XVSVesting\\\");\\n        require(initialized == false, \\\"XVSVesting is already initialized\\\");\\n        require(_xvsAddress != address(0), \\\"_xvsAddress cannot be Zero\\\");\\n        xvs = IBEP20(_xvsAddress);\\n\\n        _notEntered = true;\\n        initialized = true;\\n    }\\n\\n    modifier isInitialized() {\\n        require(initialized == true, \\\"XVSVesting is not initialized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice sets VRTConverter Address\\n     * @dev Note: If VRTConverter is not set, then Vesting is not allowed\\n     * @param _vrtConversionAddress The VRTConverterProxy Address\\n     */\\n    function setVRTConverter(address _vrtConversionAddress) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the Vault\\\");\\n        require(_vrtConversionAddress != address(0), \\\"vrtConversionAddress cannot be Zero\\\");\\n        vrtConversionAddress = _vrtConversionAddress;\\n        emit VRTConversionSet(_vrtConversionAddress);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"only admin can\\\");\\n        _;\\n    }\\n\\n    modifier onlyVrtConverter() {\\n        require(\\n            msg.sender == vrtConversionAddress,\\n            \\\"only VRTConversion Address can call the function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier vestingExistCheck(address recipient) {\\n        require(\\n            vestings[recipient].length > 0,\\n            \\\"recipient doesnot have any vestingRecord\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Deposit XVS for Vesting\\n     * @param recipient The vesting recipient\\n     * @param depositAmount XVS amount for deposit\\n     */\\n    function deposit(address recipient, uint depositAmount) external isInitialized onlyVrtConverter\\n        nonZeroAddress(recipient) {\\n        require(depositAmount > 0, \\\"Deposit amount must be non-zero\\\");\\n\\n        VestingRecord[] storage vestingsOfRecipient = vestings[recipient];\\n\\n        VestingRecord memory vesting = VestingRecord({\\n            recipient: recipient,\\n            startTime: getCurrentTime(),\\n            amount: depositAmount,\\n            withdrawnAmount: 0\\n        });\\n\\n        vestingsOfRecipient.push(vesting);\\n\\n        emit XVSVested(\\n            recipient,\\n            vesting.startTime,\\n            vesting.amount,\\n            vesting.withdrawnAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice Withdraw Vested XVS of recipient\\n     */\\n    function withdraw() external isInitialized vestingExistCheck(msg.sender) {\\n        address recipient = msg.sender;\\n        VestingRecord[] storage vestingsOfRecipient = vestings[recipient];\\n        uint256 vestingCount = vestingsOfRecipient.length;\\n        uint256 totalWithdrawableAmount = 0;\\n\\n        for(uint i = 0; i < vestingCount; ++i) {\\n            VestingRecord storage vesting = vestingsOfRecipient[i];\\n            (uint256 vestedAmount, uint256 toWithdraw) = calculateWithdrawableAmount(vesting.amount, vesting.startTime, vesting.withdrawnAmount);\\n            if(toWithdraw > 0){\\n                totalWithdrawableAmount = totalWithdrawableAmount.add(toWithdraw);\\n                vesting.withdrawnAmount = vesting.withdrawnAmount.add(toWithdraw);\\n            }\\n        }\\n\\n       if(totalWithdrawableAmount > 0){\\n           uint256 xvsBalance = xvs.balanceOf(address(this));\\n           require(xvsBalance >= totalWithdrawableAmount, \\\"Insufficient XVS for withdrawal\\\");\\n           emit XVSWithdrawn(recipient, totalWithdrawableAmount);\\n           xvs.safeTransfer(recipient, totalWithdrawableAmount);\\n       }\\n    }\\n\\n    /**\\n     * @notice get Withdrawable XVS Amount\\n     * @param recipient The vesting recipient\\n     * @return A tuple with totalWithdrawableAmount , totalVestedAmount and totalWithdrawnAmount\\n     */\\n    function getWithdrawableAmount(address recipient) view public isInitialized nonZeroAddress(recipient) vestingExistCheck(recipient)\\n    returns (uint256 totalWithdrawableAmount, uint256 totalVestedAmount, uint256 totalWithdrawnAmount)\\n    {\\n        VestingRecord[] storage vestingsOfRecipient = vestings[recipient];\\n        uint256 vestingCount = vestingsOfRecipient.length;\\n\\n        for(uint i = 0; i < vestingCount; i++) {\\n            VestingRecord storage vesting = vestingsOfRecipient[i];\\n            (uint256 vestedAmount, uint256 toWithdraw) = calculateWithdrawableAmount(vesting.amount, vesting.startTime, vesting.withdrawnAmount);\\n            totalVestedAmount = totalVestedAmount.add(vestedAmount);\\n            totalWithdrawableAmount = totalWithdrawableAmount.add(toWithdraw);\\n            totalWithdrawnAmount = totalWithdrawnAmount.add(vesting.withdrawnAmount);\\n        }\\n\\n        return (totalWithdrawableAmount, totalVestedAmount, totalWithdrawnAmount);\\n    }\\n\\n    /**\\n     * @notice get Withdrawable XVS Amount\\n     * @param amount Amount deposited for vesting\\n     * @param vestingStartTime time in epochSeconds at the time of vestingDeposit\\n     * @param withdrawnAmount XVSAmount withdrawn from VestedAmount\\n     * @return A tuple with vestedAmount and withdrawableAmount\\n     */\\n    function calculateWithdrawableAmount(uint256 amount, uint256 vestingStartTime, uint256 withdrawnAmount)\\n      view internal returns (uint256, uint256) {\\n        uint256 vestedAmount = calculateVestedAmount(amount, vestingStartTime, getCurrentTime());\\n        uint toWithdraw = vestedAmount.sub(withdrawnAmount);\\n        return (vestedAmount, toWithdraw);\\n    }\\n\\n    /**\\n     * @notice calculate total vested amount\\n     * @param vestingAmount Amount deposited for vesting\\n     * @param vestingStartTime time in epochSeconds at the time of vestingDeposit\\n     * @param currentTime currentTime in epochSeconds\\n     * @return Total XVS amount vested\\n     */\\n    function calculateVestedAmount(uint256 vestingAmount, uint256 vestingStartTime, uint256 currentTime) internal view returns (uint256) {\\n        if (currentTime < vestingStartTime) {\\n            return 0;\\n        } else if (currentTime > vestingStartTime.add(TOTAL_VESTING_TIME)) {\\n            return vestingAmount;\\n        } else {\\n            return (vestingAmount.mul(currentTime.sub(vestingStartTime))).div(TOTAL_VESTING_TIME);\\n        }\\n    }\\n\\n    /**\\n     * @notice current block timestamp\\n     * @return blocktimestamp\\n     */\\n   function getCurrentTime() public view returns (uint256) {\\n      return block.timestamp;\\n   }\\n\\n    /*** Admin Functions ***/\\n    function _become(XVSVestingProxy xvsVestingProxy) public {\\n        require(msg.sender == xvsVestingProxy.admin(), \\\"only proxy admin can change brains\\\");\\n        xvsVestingProxy._acceptImplementation();\\n    }\\n}\"\r\n    },\r\n    \"contracts/VRT/XVSVestingProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"./XVSVestingStorage.sol\\\";\\n\\ncontract XVSVestingProxy is  XVSVestingAdminStorage {\\n\\n    /**\\n      * @notice Emitted when pendingImplementation is changed\\n      */\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingImplementation is accepted, which means XVSVesting implementation is updated\\n      */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n    * @notice Emitted when pendingAdmin is changed\\n    */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n    * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n    */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor(address implementation_,\\n                address _xvsAddress) nonZeroAddress(implementation_) nonZeroAddress(_xvsAddress) public {\\n        // Creator of the contract is admin during initialization\\n        admin = msg.sender;\\n\\n        // New implementations always get set via the settor (post-initialize)\\n        _setImplementation(implementation_);\\n\\n        // First delegate gets to initialize the delegator (i.e. storage contract)\\n        delegateTo(implementation_, abi.encodeWithSignature(\\\"initialize(address)\\\",\\n                                                            _xvsAddress));\\n    }\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"Address cannot be Zero\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @notice Called by the admin to update the implementation of the delegator\\n    * @param implementation_ The address of the new implementation for delegation\\n    */\\n    function _setImplementation(address implementation_) public {\\n        require(msg.sender == admin, \\\"XVSVestingProxy::_setImplementation: admin only\\\");\\n        require(implementation_ != address(0), \\\"XVSVestingProxy::_setImplementation: invalid implementation address\\\");\\n\\n        address oldImplementation = implementation;\\n        implementation = implementation_;\\n\\n        emit NewImplementation(oldImplementation, implementation);\\n    }\\n\\n    /**\\n      * @notice Internal method to delegate execution to another contract\\n      * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n      * @param callee The contract to delegatecall\\n      * @param data The raw data to delegatecall\\n      * @return The returned bytes from the delegatecall\\n     */\\n    function delegateTo(address callee, bytes memory data) internal nonZeroAddress(callee) returns (bytes memory) {\\n        (bool success, bytes memory returnData) = callee.delegatecall(data);\\n        assembly {\\n            if eq(success, 0) {\\n                revert(add(returnData, 0x20), returndatasize)\\n            }\\n        }\\n        return returnData;\\n    }\\n\\n    /*** Admin Functions ***/\\n    function _setPendingImplementation(address newPendingImplementation) nonZeroAddress(newPendingImplementation) public {\\n\\n        require(msg.sender == admin, \\\"Only admin can set Pending Implementation\\\");\\n\\n        address oldPendingImplementation = pendingImplementation;\\n\\n        pendingImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, pendingImplementation);\\n    }\\n\\n    /**\\n    * @notice Accepts new implementation of VRT Vault. msg.sender must be pendingImplementation\\n    * @dev Admin function for new implementation to accept it's role as implementation\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n    */\\n    function _acceptImplementation() public {\\n        // Check caller is pendingImplementation\\n        require(msg.sender == pendingImplementation, \\\"only address marked as pendingImplementation can accept Implementation\\\");\\n\\n        // Save current values for inclusion in log\\n        address oldImplementation = implementation;\\n        address oldPendingImplementation = pendingImplementation;\\n\\n        implementation = pendingImplementation;\\n\\n        pendingImplementation = address(0);\\n\\n        emit NewImplementation(oldImplementation, implementation);\\n        emit NewPendingImplementation(oldPendingImplementation, pendingImplementation);\\n    }\\n\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address newPendingAdmin) nonZeroAddress(newPendingAdmin) public {\\n        // Check caller = admin\\n        require(msg.sender == admin, \\\"only admin can set pending admin\\\");\\n        require(newPendingAdmin != pendingAdmin , \\\"New pendingAdmin can not be same as the previous one\\\");\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() public {\\n        // Check caller is pendingAdmin\\n        require(msg.sender == pendingAdmin, \\\"only address marked as pendingAdmin can accept as Admin\\\");\\n        \\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    function () external payable {\\n        // delegate all other functions to current implementation\\n        (bool success, ) = implementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\n              default { return(free_mem_ptr, returndatasize) }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/VRT/XVSVestingStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.16;\\n\\nimport \\\"../Utils/SafeMath.sol\\\";\\nimport \\\"../Utils/IBEP20.sol\\\";\\n\\ncontract XVSVestingAdminStorage {\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n    * @notice Active brains of XVSVesting\\n    */\\n    address public implementation;\\n\\n    /**\\n    * @notice Pending brains of XVSVesting\\n    */\\n    address public pendingImplementation;\\n}\\n\\ncontract XVSVestingStorage is XVSVestingAdminStorage {\\n\\n    struct VestingRecord {\\n        address recipient;\\n        uint256 startTime;\\n        uint256 amount;\\n        uint256 withdrawnAmount;\\n    }\\n\\n    /// @notice Guard variable for re-entrancy checks\\n    bool public _notEntered;\\n\\n    /// @notice indicator to check if the contract is initialized\\n    bool public initialized;\\n\\n    /// @notice The XVS TOKEN!\\n    IBEP20 public xvs;\\n\\n    /// @notice VRTConversion Contract Address\\n    address public vrtConversionAddress;\\n\\n    /// @notice mapping of VestingRecord(s) for user(s)\\n    mapping(address => VestingRecord[]) public vestings;\\n}\"\r\n    },\r\n    \"contracts/Utils/SafeBEP20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for BEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeBEP20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeBEP20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeBEP20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Utils/IBEP20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the BEP20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {BEP20Detailed}.\\n */\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/Utils/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xvsAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingImplementation\",\"type\":\"address\"}],\"name\":\"NewPendingImplementation\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"name\":\"_setImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingImplementation\",\"type\":\"address\"}],\"name\":\"_setPendingImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "XVSVestingProxy", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a9dd0536ab0699d60c28ce369ff366a1e621bff1000000000000000000000000cf6bb5389c92bdda8a3747ddb454cb7a64626c63", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xa9dd0536ab0699d60c28ce369ff366a1e621bff1", "SwarmSource": ""}