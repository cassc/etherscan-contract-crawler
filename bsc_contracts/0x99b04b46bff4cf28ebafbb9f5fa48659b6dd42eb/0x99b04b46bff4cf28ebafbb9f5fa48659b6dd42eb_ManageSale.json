{"SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"Dao.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./SaleScheme.sol\\\";\\r\\n\\r\\ncontract Dao is Ownable {\\r\\n    struct DaoUser {\\r\\n        uint stakedAmount;\\r\\n        uint rewardPercent;\\r\\n        uint unlockTime;\\r\\n        uint votingPower;\\r\\n        uint currentPackageId;\\r\\n        bool status;\\r\\n    }\\r\\n\\r\\n    struct Package {\\r\\n        uint id;\\r\\n        string name;\\r\\n        uint rewardPercent;\\r\\n        uint lockTime;\\r\\n        uint votingX; // 00 decimal\\r\\n    }\\r\\n\\r\\n    mapping(address =\\u003e DaoUser) public users;\\r\\n    mapping(uint =\\u003e Package) public packages;\\r\\n    uint public rewardPool;\\r\\n    IERC20 public token; // ERC20 token referans\u0131\\r\\n\\r\\n    uint public packageCount;\\r\\n\\r\\n    constructor(address _token) {\\r\\n        token = IERC20(_token);\\r\\n    }\\r\\n\\r\\n    //packageName string olmal\u0131ym\u0131\u015f gibi geldi.\\r\\n    function addPackage(\\r\\n        string memory packageName,\\r\\n        uint rewardPct,\\r\\n        uint lockTm,\\r\\n        uint _votingX\\r\\n    ) external onlyOwner {\\r\\n        packageCount++;\\r\\n        packages[packageCount] = Package({\\r\\n            id: packageCount,\\r\\n            name: packageName,\\r\\n            rewardPercent: rewardPct,\\r\\n            lockTime: lockTm,\\r\\n            votingX: _votingX\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function viewPackage(\\r\\n        uint _packageId\\r\\n    ) external view returns (Package memory) {\\r\\n        return packages[_packageId];\\r\\n    }\\r\\n\\r\\n    function updatePackage(\\r\\n        uint packageId,\\r\\n        uint newRewardPct,\\r\\n        uint newLockTm\\r\\n    ) external onlyOwner {\\r\\n        require(packages[packageId].lockTime != 0, \\\"Wrong Package.\\\");\\r\\n\\r\\n        packages[packageId].rewardPercent = newRewardPct;\\r\\n        packages[packageId].lockTime = newLockTm;\\r\\n    }\\r\\n\\r\\n    function removePackage(uint packageId) external onlyOwner {\\r\\n        require(packages[packageId].lockTime != 0, \\\"Wrong Package.\\\");\\r\\n        delete packages[packageId];\\r\\n    }\\r\\n\\r\\n    function stake(uint amount, uint packageId) external {\\r\\n        require(packages[packageId].lockTime != 0, \\\"Wrong Package.\\\");\\r\\n        require(amount \\u003e 0, \\\"Amount should be \\u003e 0.\\\");\\r\\n\\r\\n        DaoUser storage user = users[msg.sender];\\r\\n        user.stakedAmount += amount;\\r\\n        user.votingPower += (amount * packages[packageId].votingX);\\r\\n\\r\\n        user.rewardPercent = packages[packageId].rewardPercent;\\r\\n        user.unlockTime = block.timestamp + packages[packageId].lockTime;\\r\\n        user.currentPackageId = packageId;\\r\\n        user.status = true;\\r\\n\\r\\n        require(\\r\\n            token.transferFrom(msg.sender, address(this), amount),\\r\\n            \\\"Token transfer failed.\\\"\\r\\n        );\\r\\n        rewardPool += amount;\\r\\n    }\\r\\n\\r\\n    function withdraw() external {\\r\\n        DaoUser storage user = users[msg.sender];\\r\\n        require(\\r\\n            block.timestamp \\u003e= user.unlockTime,\\r\\n            \\\"You need to wait more time.\\\"\\r\\n        );\\r\\n\\r\\n        uint reward = (user.stakedAmount * user.rewardPercent) / 100;\\r\\n        uint totalAmount = user.stakedAmount + reward;\\r\\n\\r\\n        require(rewardPool \\u003e= totalAmount, \\\"Reward pool error.\\\");\\r\\n\\r\\n        user.stakedAmount = 0;\\r\\n        user.rewardPercent = 0;\\r\\n        user.unlockTime = 0;\\r\\n        user.votingPower = 0;\\r\\n        user.currentPackageId = 0;\\r\\n\\r\\n        user.status = false;\\r\\n\\r\\n        rewardPool -= totalAmount;\\r\\n\\r\\n        require(\\r\\n            token.transfer(msg.sender, totalAmount),\\r\\n            \\\"Token transfer failed.\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addToRewardPool(uint amount) external {\\r\\n        require(\\r\\n            token.transferFrom(msg.sender, address(this), amount),\\r\\n            \\\"Token transfer failed.\\\"\\r\\n        );\\r\\n        rewardPool += amount;\\r\\n    }\\r\\n\\r\\n    function getVotingPower() public view returns (uint, bool) {\\r\\n        return (users[msg.sender].votingPower, users[msg.sender].status);\\r\\n    }\\r\\n\\r\\n    function viewRewardPool() external view returns (uint) {\\r\\n        return rewardPool;\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n    function transfer(address recipient, uint amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function approve(address spender, uint amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n}\"},\"MenageSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Dao.sol\\\";\\r\\n\\r\\ncontract ManageSale is Dao {\\r\\n    IERC20 public mainToken;\\r\\n    address public daoTreasure;\\r\\n\\r\\n    uint public activeSeason;\\r\\n    uint public bidCount;\\r\\n\\r\\n    struct Bid {\\r\\n        uint id;\\r\\n        address projectOwner;\\r\\n        string projectName;\\r\\n        address projectToken;\\r\\n        uint price; // for 1 usdt, 00 decimal\\r\\n        uint tokenDecimal;\\r\\n        uint burnedToken;\\r\\n    }\\r\\n\\r\\n    struct Voting {\\r\\n        uint id;\\r\\n        address projectOwner;\\r\\n        string projectName;\\r\\n        address projectToken;\\r\\n        uint price; // for 1 usdt, 00 decimal\\r\\n        uint tokenDecimal;\\r\\n        uint burnedToken;\\r\\n        uint yesVote;\\r\\n        uint noVote;\\r\\n    }\\r\\n\\r\\n    struct Season {\\r\\n        uint id;\\r\\n        bool status;\\r\\n    }\\r\\n\\r\\n    struct SaleClone {\\r\\n        uint id;\\r\\n        address cloneAddress;\\r\\n        address tokenAddress;\\r\\n        address USDTAddress;\\r\\n        address safeWallet;\\r\\n        address daoTreasureAddress;\\r\\n        address projectOwner;\\r\\n        uint price;\\r\\n    }\\r\\n\\r\\n    event BidCreated(\\r\\n        uint indexed projectId,\\r\\n        address projectOwner,\\r\\n        string projectName,\\r\\n        address projectTokenAddress,\\r\\n        uint price,\\r\\n        uint decimal,\\r\\n        uint bidAmount\\r\\n    );\\r\\n\\r\\n    constructor(address _token, address _daoTreasure) Dao(_token) {\\r\\n        mainToken = IERC20(_token);\\r\\n        daoTreasure = _daoTreasure;\\r\\n    }\\r\\n\\r\\n    mapping(uint =\\u003e mapping(uint =\\u003e Bid)) public bids;\\r\\n    mapping(uint =\\u003e mapping(uint =\\u003e Voting)) public votings;\\r\\n    mapping(uint =\\u003e mapping(address =\\u003e bool)) public isVoted;\\r\\n    mapping(uint =\\u003e Season) public seasons;\\r\\n\\r\\n    mapping(uint =\\u003e SaleClone) public salesClones;\\r\\n\\r\\n    uint public saleCount;\\r\\n\\r\\n    event WinnerProject(uint seasonID, uint votingID);\\r\\n\\r\\n    bool public bidsEndedForSeason = false;\\r\\n    bool public voteIsStarted = false;\\r\\n\\r\\n    function addVoting(\\r\\n        uint _id,\\r\\n        address _projectOwner,\\r\\n        string memory _projectName,\\r\\n        address _projectToken,\\r\\n        uint _price,\\r\\n        uint _tokenDecimal,\\r\\n        uint _burnedToken\\r\\n    ) external onlyOwner {\\r\\n        votings[activeSeason][_id] = Voting({\\r\\n            id: _id,\\r\\n            projectOwner: _projectOwner,\\r\\n            projectName: _projectName,\\r\\n            projectToken: _projectToken,\\r\\n            price: _price,\\r\\n            tokenDecimal: _tokenDecimal,\\r\\n            burnedToken: _burnedToken,\\r\\n            yesVote: 0,\\r\\n            noVote: 0\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function removeVoting(uint _seasonId, uint _id) external onlyOwner {\\r\\n        delete votings[_seasonId][_id];\\r\\n    }\\r\\n\\r\\n    function createBid(\\r\\n        string memory _name,\\r\\n        address _projectToken,\\r\\n        uint _price,\\r\\n        uint _decimal,\\r\\n        uint _bidAmount\\r\\n    ) public {\\r\\n        require(seasons[activeSeason].status, \\\"Season is not started\\\");\\r\\n        require(!bidsEndedForSeason, \\\"Bids have been ended for this season.\\\");\\r\\n        require(\\r\\n            mainToken.transferFrom(msg.sender, daoTreasure, _bidAmount),\\r\\n            \\\"Transfer Failed\\\"\\r\\n        );\\r\\n\\r\\n        bids[activeSeason][bidCount] = Bid({\\r\\n            id: bidCount,\\r\\n            projectOwner: msg.sender,\\r\\n            projectName: _name,\\r\\n            projectToken: _projectToken,\\r\\n            price: _price,\\r\\n            tokenDecimal: _decimal,\\r\\n            burnedToken: _bidAmount\\r\\n        });\\r\\n\\r\\n        bidCount++;\\r\\n        emit BidCreated(\\r\\n            bidCount,\\r\\n            msg.sender,\\r\\n            _name,\\r\\n            _projectToken,\\r\\n            _price,\\r\\n            _decimal,\\r\\n            _bidAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function useVote(bool _vote, uint _id) public {\\r\\n        require(voteIsStarted, \\\"vote is not started\\\");\\r\\n        (uint _x, bool _y) = getVotingPower();\\r\\n\\r\\n        require(_y, \\\"You are not DAO user.\\\");\\r\\n        require(\\r\\n            isVoted[activeSeason][msg.sender] == false,\\r\\n            \\\"You can use Only one time vote\\\"\\r\\n        );\\r\\n\\r\\n        if (_vote) {\\r\\n            votings[activeSeason][_id].yesVote += _x;\\r\\n        } else {\\r\\n            votings[activeSeason][_id].noVote += _x;\\r\\n        }\\r\\n        isVoted[activeSeason][msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function setWinner(\\r\\n        uint winnerID,\\r\\n        address _USDT,\\r\\n        address _safeWalletAddress\\r\\n    ) public onlyOwner {\\r\\n        saleCount++;\\r\\n\\r\\n        address _token = votings[activeSeason][winnerID].projectToken;\\r\\n\\r\\n        //ayn\u0131 veri iki farkl\u0131 de\u011fi\u015fkene atanm\u0131\u015f\\r\\n        address _SafeWallet = _safeWalletAddress;\\r\\n        address _projectOwner = votings[activeSeason][winnerID].projectOwner;\\r\\n\\r\\n        uint _price = votings[activeSeason][winnerID].price;\\r\\n\\r\\n        address newContract = address(\\r\\n            new SaleSchema(\\r\\n                _token,\\r\\n                _USDT,\\r\\n                _SafeWallet,\\r\\n                daoTreasure,\\r\\n                _projectOwner,\\r\\n                _price\\r\\n            )\\r\\n        );\\r\\n\\r\\n        salesClones[saleCount] = SaleClone({\\r\\n            id: saleCount,\\r\\n            cloneAddress: newContract,\\r\\n            tokenAddress: _token,\\r\\n            USDTAddress: _USDT,\\r\\n            safeWallet: _SafeWallet,\\r\\n            daoTreasureAddress: daoTreasure,\\r\\n            projectOwner: _projectOwner,\\r\\n            price: _price\\r\\n        });\\r\\n\\r\\n        emit WinnerProject(activeSeason, winnerID);\\r\\n    }\\r\\n\\r\\n    function viewWinner(uint seasonID) external view returns (uint) {\\r\\n        int highestDifference = int(votings[seasonID][0].yesVote) -\\r\\n            int(votings[seasonID][0].noVote); // Ba\u015flang\u0131\u00e7 de\u011feri olarak ilk Voting\\u0027i kullan\u0131yoruz.\\r\\n        uint correspondingVotingID = 0;\\r\\n\\r\\n        for (uint i = 1; i \\u003c 5; i++) {\\r\\n            Voting storage v = votings[seasonID][i];\\r\\n            int currentDifference = int(v.yesVote) - int(v.noVote);\\r\\n\\r\\n            if (currentDifference \\u003e highestDifference) {\\r\\n                highestDifference = currentDifference;\\r\\n                correspondingVotingID = i;\\r\\n            }\\r\\n        }\\r\\n        return correspondingVotingID;\\r\\n    }\\r\\n\\r\\n    function startSeason() public onlyOwner {\\r\\n        seasons[activeSeason] = Season({id: activeSeason, status: true});\\r\\n    }\\r\\n\\r\\n    function endBids() public onlyOwner {\\r\\n        require(seasons[activeSeason].status, \\\"Season is not started\\\");\\r\\n        require(!bidsEndedForSeason, \\\"Bids already ended for the season.\\\");\\r\\n\\r\\n        bidsEndedForSeason = true;\\r\\n        voteIsStarted = true;\\r\\n    }\\r\\n\\r\\n    function endSeason() public onlyOwner {\\r\\n        require(seasons[activeSeason].status, \\\"Season is not started\\\");\\r\\n        seasons[activeSeason].status = false;\\r\\n        activeSeason++;\\r\\n        bidsEndedForSeason = false;\\r\\n        voteIsStarted = false;\\r\\n    }\\r\\n\\r\\n    function updateDaoTreasure(address _newDaoTreasure) external onlyOwner {\\r\\n        daoTreasure = _newDaoTreasure;\\r\\n    }\\r\\n\\r\\n    function viewWinnerBidsIds() external view returns (uint256[] memory) {\\r\\n        Bid[] memory seasonBids = new Bid[](bidCount);\\r\\n        for (uint256 i = 0; i \\u003c bidCount; i++) {\\r\\n            seasonBids[i] = bids[activeSeason][i];\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c seasonBids.length; i++) {\\r\\n            for (uint256 j = i + 1; j \\u003c seasonBids.length; j++) {\\r\\n                if (seasonBids[j].burnedToken \\u003e seasonBids[i].burnedToken) {\\r\\n                    Bid memory temp = seasonBids[i];\\r\\n                    seasonBids[i] = seasonBids[j];\\r\\n                    seasonBids[j] = temp;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256[] memory allBidIds = new uint256[](seasonBids.length);\\r\\n\\r\\n        // S\u0131ralanm\u0131\u015f teklif kimliklerini diziye ekleyin\\r\\n        for (uint256 i = 0; i \\u003c seasonBids.length; i++) {\\r\\n            allBidIds[i] = seasonBids[i].id;\\r\\n        }\\r\\n\\r\\n        return allBidIds;\\r\\n    }\\r\\n\\r\\n    function viewBidDetails(\\r\\n        uint _seasonId,\\r\\n        uint _id\\r\\n    ) external view returns (Bid memory) {\\r\\n        return bids[_seasonId][_id];\\r\\n    }\\r\\n\\r\\n    function viewSaleClone(uint _id) external view returns (SaleClone memory) {\\r\\n        return salesClones[_id];\\r\\n    }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\"},\"SaleScheme.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract SaleSchema is ReentrancyGuard {\\r\\n    IERC20 public token;\\r\\n    IERC20 public USDT;\\r\\n\\r\\n    address public SafeWallet;\\r\\n    address public TeamWallet;\\r\\n    address public projectOwner;\\r\\n\\r\\n    uint public TOKEN_PRICE;\\r\\n\\r\\n    mapping(address =\\u003e uint256) public remainingClaimAmount;\\r\\n\\r\\n    constructor(\\r\\n        address _token,\\r\\n        address _USDT,\\r\\n        address _SafeWallet,\\r\\n        address _daoWallet,\\r\\n        address _projectOwner,\\r\\n        uint _price\\r\\n    ) {\\r\\n        token = IERC20(_token);\\r\\n        USDT = IERC20(_USDT);\\r\\n        SafeWallet = _SafeWallet;\\r\\n        TeamWallet = _daoWallet;\\r\\n        projectOwner = _projectOwner;\\r\\n        TOKEN_PRICE = _price;\\r\\n    }\\r\\n\\r\\n    function buyTokens(uint256 USDTAmount) external nonReentrant {\\r\\n        uint256 instantTokenAmount = (USDTAmount * TOKEN_PRICE) / 100;\\r\\n\\r\\n        USDT.transferFrom(msg.sender, address(this), USDTAmount);\\r\\n        token.transfer(msg.sender, instantTokenAmount);\\r\\n    }\\r\\n\\r\\n    function withdrawRemainTokens(IERC20 wToken) external onlyOwner {\\r\\n        uint256 balance = wToken.balanceOf(address(this));\\r\\n        require(wToken.transfer(msg.sender, balance), \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address _newOwner) external onlyOwner {\\r\\n        projectOwner = _newOwner;\\r\\n    }\\r\\n\\r\\n    function updatePrice(uint _newPrice) external onlyOwner {\\r\\n        TOKEN_PRICE = _newPrice;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == projectOwner, \\\"You are not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoTreasure\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"projectTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"BidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seasonID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingID\",\"type\":\"uint256\"}],\"name\":\"WinnerProject\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeSeason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"packageName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rewardPct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingX\",\"type\":\"uint256\"}],\"name\":\"addPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addToRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_projectOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_projectToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnedToken\",\"type\":\"uint256\"}],\"name\":\"addVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"projectToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnedToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidsEndedForSeason\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_projectToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidAmount\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoTreasure\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBids\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"packageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingX\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"}],\"name\":\"removePackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seasonId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"salesClones\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cloneAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"USDTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoTreasureAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seasons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"winnerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeWalletAddress\",\"type\":\"address\"}],\"name\":\"setWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSeason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newDaoTreasure\",\"type\":\"address\"}],\"name\":\"updateDaoTreasure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardPct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLockTm\",\"type\":\"uint256\"}],\"name\":\"updatePackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"useVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPackageId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seasonId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"viewBidDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"projectToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnedToken\",\"type\":\"uint256\"}],\"internalType\":\"struct ManageSale.Bid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_packageId\",\"type\":\"uint256\"}],\"name\":\"viewPackage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingX\",\"type\":\"uint256\"}],\"internalType\":\"struct Dao.Package\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"viewSaleClone\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cloneAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"USDTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoTreasureAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ManageSale.SaleClone\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seasonID\",\"type\":\"uint256\"}],\"name\":\"viewWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewWinnerBidsIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteIsStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"projectToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnedToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noVote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ManageSale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004d829d37460d2490446255b15d52c81df309329000000000000000000000000001d870eba1ab2e2576c5b0bf717b504c28eeda19", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5ea927a6f1c974b1836493c2263f9678a54e5cc91c5d37c472ec34d02dc3866c"}