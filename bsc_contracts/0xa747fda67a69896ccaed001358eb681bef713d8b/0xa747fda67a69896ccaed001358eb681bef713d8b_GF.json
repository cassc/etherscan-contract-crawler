{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-05-11\r\n*/\r\n\r\n//GF token\r\n\r\n//SPDX-License-Identifier: None\r\n\r\n// pragma solidity 0.8.14;\r\n// pragma solidity >=0.4.20;\r\npragma solidity >=0.4.21 <=0.8.14;\r\npragma abicoder v1;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * BEP20 standard interface.\r\n */\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n/**\r\n * Allows for contract ownership along with multi-address authorization\r\n */\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\ncontract GF is IBEP20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    event TradingEnabled(uint256 _startDate);\r\n    event TimeFupdated(uint256 _timeF);\r\n    event AdressBlacklisted(address _address, bool _bool);\r\n    event TXLimitSet(uint256 _txLimit);\r\n    event MaxWalletSet(uint256 _maxWallet);\r\n    event IsFeeExemptSet(address _address, bool _exempt);\r\n    event BuyFeesSet (uint256 _totalFees);\r\n    event SellFeesSet (uint256 _totalFees);\r\n    event RewardFeeReceiverSet(address _address);\r\n    event MarketingFeeReceiverSet(address _address);\r\n    event SwapBackSettingsSet(bool _bool, uint256 _amount);\r\n    //Mainnet BSC :0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c // Testnet BSC: 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd // ETH Mainnet: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D // ETH Testnet: 0xc778417E063141139Fce010982780140Aa0cD5Ab\r\n    address constant private WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // WBNB contract address \r\n    address constant private DEAD = 0x000000000000000000000000000000000000dEaD; // burn address - black hole\r\n    address constant private ZERO = 0x0000000000000000000000000000000000000000; // zero\r\n\r\n    string private constant _name = \"GirlsFren\";\r\n    string private constant _symbol = \"GF\";\r\n    uint8 private constant _decimals = 18;\r\n    bool public PauseStatus;\r\n\r\n\r\n    uint256 constant private  _totalSupply = 100000000000000 * (10 ** _decimals); // 14 zeros\r\n    uint256 private  _burntSupply = (_totalSupply * 10) /100; // 10% burn\r\n    uint256 private  _liqSupply = (_totalSupply * 90) /100; // 90% remaining\r\n   \r\n    uint256 public _maxTxAmount = (_totalSupply * 2) / 1000; // max limit per transaction - 0.2%\r\n    uint256 public _maxWalletSize = ((_totalSupply * 5) / 1000 ) + 1; // max wallet size - 0.5%\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping (address => bool) public isMaxWalletExempt;\r\n    mapping (address => bool) private bl;\r\n\r\n    //Buyfees\r\n    uint256 private liquidityFee = 0;\r\n    uint256 private marketingFee = 9;\r\n    uint256 private rewardFee = 0;\r\n    uint256 private totalFee = 9;\r\n    \r\n    \r\n    //Sellfees\r\n    uint256 private sellLiquidityFee = 3;\r\n    uint256 private sellMarketingFee = 6;\r\n    uint256 private sellRewardFee = 0;\r\n    uint256 private totalSellFee = 9;\r\n    \r\n    \r\n    //AvFees\r\n    uint256 private tempLiquidityFee;\r\n    uint256 private tempMarketingFee;\r\n    uint256 private tempLiqProviderFee;\r\n    uint256 private tempRewardFee;\r\n    uint256 private tempTotalFee;\r\n    \r\n    uint256 private feeDenominator = 100;\r\n    uint256 public launchTimestamp;\r\n    uint256 private timeF; \r\n    \r\n    \r\n    address private marketingFeeReceiver = 0x71c8819988FFD77e5983854fc1B1F94596Ec4872; \r\n    address constant private ethBridgeAndExchange = 0x9Bbb45063Ae464fff3d4f90FaF66619fcc7B4b57; // 0x5511140bb33158e3b7b0d0B83D20C5D6Cf1E9522\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    uint256 public launchedAt;\r\n    \r\n    bool public tradingEnabled;\r\n    bool public swapEnabled;\r\n    uint256 public swapThreshold = _totalSupply / 1000 * 1; // 0.1%\r\n    \r\n    bool private inSwap;\r\n    \r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () Auth(msg.sender) {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        //Mainnet: 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        //Testnet BSC: 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\r\n        //Testnet ETH: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        address _owner = owner;\r\n        address _DEAD = DEAD;\r\n        isFeeExempt[_owner] = true;\r\n        isTxLimitExempt[_owner] = true;\r\n        isMaxWalletExempt[_owner] = true; \r\n        isFeeExempt[marketingFeeReceiver] = true;\r\n        isTxLimitExempt[marketingFeeReceiver] = true;\r\n        isMaxWalletExempt[marketingFeeReceiver] = true; \r\n        isFeeExempt[ethBridgeAndExchange] = true;\r\n        isTxLimitExempt[ethBridgeAndExchange] = true;\r\n        isMaxWalletExempt[ethBridgeAndExchange] = true; \r\n\r\n        _balances[_owner] = _liqSupply;\r\n        _balances[_DEAD] = _burntSupply;\r\n        emit Transfer(address(0), _owner, _liqSupply);\r\n        emit Transfer(address(0), _DEAD, _burntSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n\r\n    //Added pause for owner only\r\n    function pause(bool _paused) public onlyOwner {\r\n        PauseStatus = _paused;\r\n    }\r\n\r\n    // Increase allowance\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n\r\n        approve(spender, currentAllowance + addedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Decrease allowance\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = msg.sender;\r\n\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        \r\n        approve(spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        require(PauseStatus == false, \"Contract Paused\");\r\n\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        \r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(!bl[sender] && !bl[recipient]);\r\n        if(sender != pair && recipient != pair){ return _basicTransfer(sender, recipient, amount); } //transfer between wallets\r\n        \r\n        if(!isFeeExempt[sender]){\r\n            require(tradingEnabled, \"Trading is not enabled yet\");\r\n        }\r\n        \r\n        checkTxLimit(sender,recipient, amount);\r\n\r\n        if (recipient != pair && recipient != DEAD && recipient != ethBridgeAndExchange && sender != ethBridgeAndExchange) {\r\n            require(isTxLimitExempt[recipient] || isTxLimitExempt[sender] || isMaxWalletExempt[sender]|| isMaxWalletExempt[recipient] || _balances[recipient] + amount <= _maxWalletSize, \"Transfer amount exceeds max wallet size.\");\r\n        }\r\n        \r\n        if(shouldSwapBack()){ swapBack(); }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n    \r\n        if(shouldTakeFee(sender) != true || shouldTakeFee(recipient) != true){\r\n             uint256 amountReceived = amount; \r\n             _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n            emit Transfer(sender, recipient, amountReceived);\r\n        }\r\n        else \r\n        {\r\n            uint256 amountReceived = takeFee(sender, recipient, amount);\r\n            _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n            emit Transfer(sender, recipient, amountReceived);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(!bl[sender] && !bl[recipient]);\r\n        require(isMaxWalletExempt[recipient] || _balances[recipient] + amount <= _maxWalletSize, \"Transfer amount exceeds max wallet size basic transfer.\");\r\n        require(isFeeExempt[sender] || tradingEnabled == true, \"Trading not enabled yet\");\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function getTotalFee(bool selling) public view returns (uint256) {\r\n        uint256 multiplier = AntiDumpMultiplier();\r\n        bool firstFewBlocks = AntSni();\r\n        if(selling) {   return totalSellFee.mul(multiplier); }\r\n        if (firstFewBlocks) {return feeDenominator.sub(1); }\r\n        return totalFee;\r\n    }\r\n\r\n    function AntiDumpMultiplier() private view returns (uint256) {\r\n        uint256 time_since_start = block.timestamp - launchTimestamp;\r\n        uint256 hour = 3600;\r\n        if (time_since_start > 1 * hour) { return (1);}\r\n        else { return (2);}\r\n    }\r\n    \r\n    function AntSni() private view returns (bool) {\r\n        uint256 time_since_start = block.timestamp - launchTimestamp;\r\n        if (time_since_start < timeF) { return true;}\r\n        else { return false;}\r\n    }\r\n    \r\n    function updateTimeF(uint256 _int) external onlyOwner {\r\n        require(_int < 1536, \"Time too long\");\r\n        timeF = _int;\r\n        emit TimeFupdated(_int);\r\n    }\r\n\r\n\r\n    function takeFee(address sender, address receiver, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount = amount.mul(getTotalFee(receiver == pair)).div(feeDenominator);\r\n        if(receiver == pair) {\r\n            uint256 rewardFeeAmount = amount.mul(sellRewardFee).div(feeDenominator).mul(AntiDumpMultiplier());\r\n            uint256 newFeeAmount = feeAmount.sub(rewardFeeAmount);        \r\n            \r\n            _balances[address(this)] = _balances[address(this)].add(newFeeAmount); \r\n            emit Transfer(sender, address(this), newFeeAmount); \r\n            return amount.sub(feeAmount); \r\n        }\r\n        else {\r\n            uint256 rewardFeeAmount = amount.mul(rewardFee).div(feeDenominator);\r\n            uint256 newFeeAmount = feeAmount.sub(rewardFeeAmount);\r\n\r\n            _balances[address(this)] = _balances[address(this)].add(newFeeAmount);\r\n            emit Transfer(sender, address(this), newFeeAmount);\r\n            return amount.sub(feeAmount);\r\n       }\r\n    \r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function getSwapFees() internal {\r\n        tempLiquidityFee = liquidityFee.add(sellLiquidityFee).div(2);\r\n        tempMarketingFee = marketingFee.add(sellMarketingFee).div(2);\r\n        tempRewardFee = rewardFee.add(sellRewardFee).div(2);\r\n        tempTotalFee = totalFee.add(totalSellFee).div(2);\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        //average the fees\r\n        getSwapFees();\r\n        \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        uint256 amountToLiquify = contractTokenBalance.mul(tempLiquidityFee).div(tempTotalFee.sub(tempRewardFee)).div(2);\r\n        uint256 amountToSwap = contractTokenBalance.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n        uint256 totalBNBFee = tempTotalFee.sub(tempRewardFee).sub(tempLiquidityFee.div(2));\r\n        uint256 amountBNBLiquidity = amountBNB.mul(tempLiquidityFee).div(totalBNBFee).div(2);\r\n        uint256 amountBNBMarketing = amountBNB.mul(tempMarketingFee).div(totalBNBFee);\r\n        \r\n       \r\n        (bool MarketingSuccess, /* bytes memory data */) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 30000}(\"\");\r\n        require(MarketingSuccess,\"receiver rejected GF transfer\");\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                marketingFeeReceiver,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n    \r\n    \r\n    function startTrading() external onlyOwner{\r\n        tradingEnabled = true;\r\n        swapEnabled = true;\r\n        launchTimestamp = block.timestamp;\r\n        emit TradingEnabled(block.timestamp);\r\n    }\r\n\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function launch() internal {\r\n        launchedAt = block.number;\r\n    }\r\n    \r\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender]|| isTxLimitExempt[recipient], \"TX Limit Exceeded\");\r\n    }\r\n    \r\n    function setTxLimit(uint256 amount) external authorized {\r\n        require(amount >= _totalSupply / 1000);\r\n        _maxTxAmount = amount;\r\n        emit TXLimitSet(amount);\r\n    }\r\n\r\n   function setMaxWallet(uint256 amount) external onlyOwner() {\r\n        require(amount >= _totalSupply / 1000 );\r\n        _maxWalletSize = amount;\r\n        emit MaxWalletSet( amount);\r\n    }    \r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n        emit IsFeeExemptSet( holder, exempt);\r\n    }\r\n    \r\n    function excludeFromMaxWallet(address _wallet, bool _excludeFromMaxWallet) external onlyOwner{\r\n        isMaxWalletExempt[_wallet] = _excludeFromMaxWallet; \r\n    }\r\n\r\n    function setBl(address _wallet, bool _bl) external onlyOwner{\r\n        bl[_wallet] = _bl; \r\n        emit AdressBlacklisted(_wallet, _bl);\r\n    }\r\n    \r\n    function excludeFromMaxTX(address _wallet, bool _excludeFromMaxTx) external onlyOwner{\r\n        isTxLimitExempt[_wallet]= _excludeFromMaxTx;\r\n    }\r\n\r\n    function setBuyFees(uint256 _liquidityFee,  uint256 _marketingFee, uint256 _rewardFee, uint256 _feeDenominator) external authorized {\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n        rewardFee = _rewardFee;\r\n      \r\n        totalFee = _liquidityFee.add(_marketingFee).add(_rewardFee);\r\n        feeDenominator = _feeDenominator;\r\n        emit BuyFeesSet (totalFee);\r\n    }\r\n    \r\n    function setSellFees(uint256 _liquidityFee,  uint256 _marketingFee, uint256 _rewardFee, uint256 _feeDenominator) external authorized {\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n        sellRewardFee = _rewardFee;\r\n        \r\n        totalSellFee = _liquidityFee.add(_marketingFee).add(_rewardFee);\r\n        feeDenominator = _feeDenominator;\r\n        emit SellFeesSet (totalFee);\r\n    }\r\n\r\n    function setMarketingFeeReceiver(address _marketingFeeReceiver) external authorized {\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n        emit MarketingFeeReceiverSet(_marketingFeeReceiver );\r\n    }\r\n    \r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external authorized {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n        emit SwapBackSettingsSet(_enabled, _amount);\r\n    }\r\n    \r\n\r\n    function manualSend() external authorized {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        payable(marketingFeeReceiver).transfer(contractETHBalance);\r\n    }\r\n\r\n    function transferERC20(address _token, uint _amount) public authorized {\r\n        require(_amount <= IBEP20(_token).balanceOf(address(this)), \"Can't transfer more than the balance\");\r\n        IBEP20(_token).transfer(marketingFeeReceiver, _amount);\r\n    }\r\n        \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n    \r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"AdressBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalFees\",\"type\":\"uint256\"}],\"name\":\"BuyFeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_exempt\",\"type\":\"bool\"}],\"name\":\"IsFeeExemptSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"MarketingFeeReceiverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"MaxWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RewardFeeReceiverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalFees\",\"type\":\"uint256\"}],\"name\":\"SellFeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SwapBackSettingsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_txLimit\",\"type\":\"uint256\"}],\"name\":\"TXLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeF\",\"type\":\"uint256\"}],\"name\":\"TimeFupdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PauseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_excludeFromMaxTx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_excludeFromMaxWallet\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"selling\",\"type\":\"bool\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMaxWalletExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bl\",\"type\":\"bool\"}],\"name\":\"setBl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setMarketingFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_int\",\"type\":\"uint256\"}],\"name\":\"updateTimeF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GF", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://26fc24eaaabe8ac1cf0fccc9b512a85cb67c30dc561e9652f61d836a20a17113"}