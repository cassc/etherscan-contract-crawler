{"SourceCode": "pragma solidity 0.6.12;\r\n\r\n\r\ninterface IReferral {\r\n\r\n    function addReferrer(address _user, address _referrer) external;\r\n\r\n    function addRewards(address _user, string memory _type, uint256 _total) external;\r\n\r\n    function getRewards(address _user, string memory _type) external view returns (uint256);\r\n\r\n    function getReferrer(address _user) external view returns (address);\r\n\r\n    function getReferralsCount(address _referrer) external view returns (uint256);\r\n\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\nabstract contract MinterRole {\r\n    mapping(address => bool) private minters;\r\n\r\n    event MinterAdded(address indexed _minter);\r\n    event MinterRemoved(address indexed _minter);\r\n\r\n    constructor () public {\r\n        addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(minters[msg.sender], \"Minterable: caller is not the minter\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address _minter) external view virtual returns (bool) {\r\n        return minters[_minter];\r\n    }\r\n\r\n    function addMinter(address _minter) public virtual {\r\n        minters[_minter] = true;\r\n        emit MinterAdded(_minter);\r\n    }\r\n\r\n    function removeMinter(address _minter) public virtual {\r\n        minters[_minter] = false;\r\n        emit MinterRemoved(_minter);\r\n    }\r\n}\r\n\r\nabstract contract OperatorRole {\r\n    mapping(address => bool) private operators;\r\n\r\n    event OperatorAdded(address indexed _operator);\r\n    event OperatorRemoved(address indexed _operator);\r\n\r\n    constructor () public {\r\n        addOperator(msg.sender);\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender], \"Operatable: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    function isOperator(address _minter) external view virtual returns (bool) {\r\n        return operators[_minter];\r\n    }\r\n\r\n    function addOperator(address _operator) public virtual {\r\n        operators[_operator] = true;\r\n        emit OperatorAdded(_operator);\r\n    }\r\n\r\n    function removeOperator(address _operator) public virtual {\r\n        operators[_operator] = false;\r\n        emit OperatorRemoved(_operator);\r\n    }\r\n}\r\n\r\nabstract contract OwnerRole {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract BEP20e is OwnerRole, MinterRole, OperatorRole {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public burnFee;\r\n    uint256 public marketingFee;\r\n    uint256 public buybackFee;\r\n\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address public marketingAddress;\r\n    IUniswapV2Router02 public router;\r\n    address public pair;\r\n    IReferral public referral;\r\n\r\n    uint256 public buybackBalance;\r\n    uint256 public marketingBalance;\r\n\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n\r\n    bool private inSwap;\r\n\r\n    bool public marketingSwapEnabled = false;\r\n    uint256 public minMarketingSwapAmount = 1000000000000000000;\r\n    uint256 public maxMarketingSwapAmount = 1500000000000000000;\r\n\r\n    bool public swapEnabled = false;\r\n    uint256 public minSwapAmount = 1000000000000000000;\r\n    uint256 public maxSwapAmount = 1500000000000000000;\r\n\r\n    bool public buybackEnabled = false;\r\n    uint256 public minBalanceRequired = 1000000000000000000;\r\n    uint256 public minBuybackSellAmount = 1000000000000000000;\r\n    uint256 public maxBuybackAmount = 1500000000000000000;\r\n\r\n    mapping(address => bool) private lpTokens;\r\n    mapping(address => bool) private excludedFromFee;\r\n    mapping(address => bool) private excludedFromAntiWhale;\r\n\r\n    uint256 public antiWhaleTxAmountRate = 50; // 0.5%\r\n    bool public antiWhaleEnabled = true;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event SwapTokensForETH(uint256 amountIn, address[] path);\r\n    event SwapETHForTokens(uint256 amountIn, address[] path);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(string memory _name, string memory _symbol, address _router, IReferral _referral) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n\r\n        marketingAddress = msg.sender;\r\n\r\n        router = IUniswapV2Router02(_router);\r\n        pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\r\n        referral = _referral;\r\n\r\n        lpTokens[pair] = true;\r\n\r\n        setExcludedFromFee(msg.sender, true);\r\n        setExcludedFromAntiWhale(msg.sender, true);\r\n\r\n        setExcludedFromFee(address(this), true);\r\n        setExcludedFromAntiWhale(address(this), true);\r\n    }\r\n\r\n    function balanceOf(address _account) public view virtual returns (uint256) {\r\n        return balances[_account];\r\n    }\r\n\r\n    function allowance(address _from, address _to) external view virtual returns (uint256) {\r\n        return allowances[_from][_to];\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) external virtual onlyMinter {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function burn(uint256 _amount) external virtual {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n    function approve(address _to, uint256 _amount) external virtual returns (bool) {\r\n        require(_amount > 0, \"BEP20: amount is greater than zero\");\r\n\r\n        _approve(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function addBuybackBalance(uint256 _amount) external {\r\n        require(balances[msg.sender] >= _amount, \"BEP20: add amount exceeds balance\");\r\n        require(_amount > 0, \"BEP20: amount is greater than zero\");\r\n\r\n        _transferAmount(msg.sender, address(this), _amount);\r\n\r\n        buybackBalance = buybackBalance.add(_amount);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) external virtual returns (bool) {\r\n        _transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) external virtual returns (bool) {\r\n        require(allowances[_from][msg.sender] >= _amount, \"BEP20: transfer amount exceeds allowance\");\r\n\r\n        _transfer(_from, _to, _amount);\r\n        _approve(_from, msg.sender, allowances[_from][msg.sender].sub(_amount));\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address _to, uint256 _amount) external virtual returns (bool) {\r\n        require(_amount > 0, \"BEP20: amount is greater than zero\");\r\n\r\n        uint256 total = allowances[msg.sender][_to].add(_amount);\r\n        _approve(msg.sender, _to, total);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address _to, uint256 _amount) external virtual returns (bool) {\r\n        require(allowances[msg.sender][_to] >= _amount, \"BEP20: decreased allowance below zero\");\r\n        require(_amount > 0, \"BEP20: amount is greater than zero\");\r\n\r\n        uint256 total = allowances[msg.sender][_to].sub(_amount);\r\n        _approve(msg.sender, _to, total);\r\n        return true;\r\n    }\r\n\r\n    function calcFee(uint256 _amount, uint256 _percent) public pure returns (uint256) {\r\n        return _amount.mul(_percent).div(10000);\r\n    }\r\n\r\n    function totalSupplyWithoutDeadBalance() public view returns (uint256) {\r\n        return totalSupply.sub(balanceOf(deadAddress));\r\n    }\r\n\r\n    function maxAntiWhaleTxAmount() public view returns (uint256) {\r\n        return calcFee(totalSupplyWithoutDeadBalance(), antiWhaleTxAmountRate);\r\n    }\r\n\r\n    function buyback(uint256 _amount) public onlyOperator {\r\n        uint256 balance = address(this).balance;\r\n\r\n        require(_amount > 0, \"BEP20: amount is greater than zero\");\r\n        require(balance >= _amount, \"BEP20: buyback amount is too big\");\r\n\r\n        if (!inSwap) {\r\n            _buyback(_amount);\r\n        }\r\n    }\r\n\r\n    function swapMarketing(uint256 _amount) public onlyOperator {\r\n        require(_amount > 0, \"BEP20: amount is greater than zero\");\r\n        require(marketingBalance >= _amount, \"BEP20: amount is too big\");\r\n\r\n        if (!inSwap) {\r\n            _swapMarketing(_amount);\r\n        }\r\n    }\r\n\r\n    function swapBuyback(uint256 _amount) public onlyOperator {\r\n        require(_amount > 0, \"BEP20: amount is greater than zero\");\r\n        require(buybackBalance >= _amount, \"BEP20: amount is too big\");\r\n\r\n        if (!inSwap) {\r\n            _swapBuyback(_amount);\r\n        }\r\n    }\r\n\r\n    function setMarketingAddress(address _marketingAddress) external virtual onlyOperator {\r\n        require(marketingAddress != address(0), \"BEP20: zero address\");\r\n\r\n        marketingAddress = _marketingAddress;\r\n    }\r\n\r\n    function setMarketingSwapEnabled(bool _marketingSwapEnabled) external onlyOperator {\r\n        marketingSwapEnabled = _marketingSwapEnabled;\r\n    }\r\n\r\n    function setMinMarketingSwapAmount(uint256 _minMarketingSwapAmount) external onlyOperator {\r\n        minMarketingSwapAmount = _minMarketingSwapAmount;\r\n    }\r\n\r\n    function setMaxMarketingSwapAmount(uint256 _maxMarketingSwapAmount) external onlyOperator {\r\n        maxMarketingSwapAmount = _maxMarketingSwapAmount;\r\n    }\r\n\r\n    function setSwapEnabled(bool _swapEnabled) external onlyOperator {\r\n        swapEnabled = _swapEnabled;\r\n    }\r\n\r\n    function setMinSwapAmount(uint256 _minSwapAmount) external onlyOperator {\r\n        minSwapAmount = _minSwapAmount;\r\n    }\r\n\r\n    function setMaxSwapAmount(uint256 _maxSwapAmount) external onlyOperator {\r\n        maxSwapAmount = _maxSwapAmount;\r\n    }\r\n\r\n    function setBuybackEnabled(bool _buybackEnabled) external onlyOperator {\r\n        buybackEnabled = _buybackEnabled;\r\n    }\r\n\r\n    function setMinBalanceRequired(uint256 _minBalanceRequired) external onlyOperator {\r\n        minBalanceRequired = _minBalanceRequired;\r\n    }\r\n\r\n    function setMinBuybackSellAmount(uint256 _minBuybackSellAmount) external onlyOperator {\r\n        minBuybackSellAmount = _minBuybackSellAmount;\r\n    }\r\n\r\n    function setMaxBuybackAmount(uint256 _maxBuybackAmount) external onlyOperator {\r\n        maxBuybackAmount = _maxBuybackAmount;\r\n    }\r\n\r\n    function isLpToken(address _address) public view returns (bool) {\r\n        return lpTokens[_address];\r\n    }\r\n\r\n    function setLpToken(address _address, bool _isLpToken) external onlyOperator {\r\n        require(_address != address(0), \"BEP20: invalid LP address\");\r\n        require(_address != pair, \"BEP20: exclude bnb pair\");\r\n\r\n        lpTokens[_address] = _isLpToken;\r\n    }\r\n\r\n    function isExcludedFromFee(address _address) public view returns (bool) {\r\n        return excludedFromFee[_address];\r\n    }\r\n\r\n    function setExcludedFromFee(address _address, bool _isExcludedFromFee) public onlyOperator {\r\n        excludedFromFee[_address] = _isExcludedFromFee;\r\n    }\r\n\r\n    function isExcludedFromAntiWhale(address _address) public view returns (bool) {\r\n        return excludedFromAntiWhale[_address];\r\n    }\r\n\r\n    function setExcludedFromAntiWhale(address _address, bool _isExcludedFromAntiWhale) public onlyOperator {\r\n        excludedFromAntiWhale[_address] = _isExcludedFromAntiWhale;\r\n    }\r\n\r\n    function setAntiWhaleTxAmountRate(uint256 _antiWhaleTxAmountRate) external onlyOperator {\r\n        require(_antiWhaleTxAmountRate <= 500 && _antiWhaleTxAmountRate >= 50, \"BEP20: invalid _antiWhaleTxAmountRate\");\r\n        antiWhaleTxAmountRate = _antiWhaleTxAmountRate;\r\n    }\r\n\r\n    function setAntiWhaleEnabled(bool _antiWhaleEnabled) external onlyOperator {\r\n        antiWhaleEnabled = _antiWhaleEnabled;\r\n    }\r\n\r\n    function addMinter(address _minter) public onlyOwner override(MinterRole) {\r\n        super.addMinter(_minter);\r\n    }\r\n\r\n    function removeMinter(address _minter) public onlyOwner override(MinterRole) {\r\n        super.removeMinter(_minter);\r\n    }\r\n\r\n    function addOperator(address _operator) public onlyOwner override(OperatorRole) {\r\n        super.addOperator(_operator);\r\n    }\r\n\r\n    function removeOperator(address _operator) public onlyOwner override(OperatorRole) {\r\n        super.removeOperator(_operator);\r\n    }\r\n\r\n    function setReferral(IReferral _referral) external onlyOwner {\r\n        referral = _referral;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _buyback(uint256 _amount) internal {\r\n        _swapETHForTokens(_amount, deadAddress);\r\n    }\r\n\r\n    function _swapMarketing(uint256 _marketingSwapAmount) internal {\r\n        _swapTokensForEth(_marketingSwapAmount, marketingAddress);\r\n        marketingBalance = marketingBalance.sub(_marketingSwapAmount);\r\n    }\r\n\r\n    function _swapBuyback(uint256 _swapAmount) internal {\r\n        _swapTokensForEth(_swapAmount, address(this));\r\n        buybackBalance = buybackBalance.sub(_swapAmount);\r\n    }\r\n\r\n    function _mint(address _to, uint256 _amount) internal virtual {\r\n        require(_to != address(0), \"BEP20: mint to the zero address\");\r\n        require(_amount > 0, \"BEP20: amount is greater than zero\");\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        emit Transfer(address(0), _to, _amount);\r\n    }\r\n\r\n    function _burn(address _from, uint256 _amount) internal virtual {\r\n        require(_from != address(0), \"BEP20: burn from the zero address\");\r\n        require(_amount > 0, \"BEP20: amount is greater than zero\");\r\n        require(balances[_from] >= _amount, \"BEP20: burn amount exceeds balance\");\r\n\r\n        _transferAmount(_from, deadAddress, _amount);\r\n    }\r\n\r\n    function _approve(address _from, address _to, uint256 _amount) internal virtual {\r\n        require(_from != address(0), \"BEP20: approve from the zero address\");\r\n        require(_to != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        allowances[_from][_to] = _amount;\r\n        emit Approval(_from, _to, _amount);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _amount) internal virtual {\r\n        require(_from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(_to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(balances[_from] >= _amount, \"BEP20: transfer amount exceeds balance\");\r\n        require(_amount > 0, \"BEP20: amount is greater than zero\");\r\n\r\n        if (antiWhaleEnabled && !isExcludedFromAntiWhale(_from) && !isExcludedFromAntiWhale(_to) && !isLpToken(_from)) {\r\n            require(_amount <= maxAntiWhaleTxAmount(), \"BEP20: transfer amount exceeds the maxAntiWhaleTxAmount\");\r\n        }\r\n\r\n        uint256 calculatedAmount = _amount;\r\n        uint256 burnFeeAmount = 0;\r\n        uint256 marketingFeeAmount = 0;\r\n        uint256 buybackFeeAmount = 0;\r\n\r\n        if (!inSwap && !(isExcludedFromFee(_from) || isExcludedFromFee(_to))) {\r\n            burnFeeAmount = calcFee(_amount, burnFee);\r\n            if (burnFeeAmount > 0) {\r\n                address referrer = address(0);\r\n                if (isLpToken(_from) && !isLpToken(_to)) {\r\n                    referrer = referral.getReferrer(_to);\r\n                } else if (!isLpToken(_from) && isLpToken(_to)) {\r\n                    referrer = referral.getReferrer(_from);\r\n                } else {\r\n                    referrer = referral.getReferrer(_from);\r\n                }\r\n\r\n                if (referrer != address(0)) {\r\n                    _transferAmount(_from, referrer, burnFeeAmount);\r\n                    referral.addRewards(referrer, \"token\", burnFeeAmount);\r\n                } else {\r\n                    _transferAmount(_from, address(this), burnFeeAmount);\r\n                    buybackBalance = buybackBalance.add(burnFeeAmount);\r\n                }\r\n            }\r\n\r\n            marketingFeeAmount = calcFee(_amount, marketingFee);\r\n            if (marketingFeeAmount > 0) {\r\n                _transferAmount(_from, address(this), marketingFeeAmount);\r\n                marketingBalance = marketingBalance.add(marketingFeeAmount);\r\n            }\r\n\r\n            buybackFeeAmount = calcFee(_amount, buybackFee);\r\n            if (buybackFeeAmount > 0) {\r\n                _transferAmount(_from, address(this), buybackFeeAmount);\r\n                buybackBalance = buybackBalance.add(buybackFeeAmount);\r\n            }\r\n\r\n            if (!isLpToken(_from)) {\r\n                if (marketingSwapEnabled && marketingBalance >= minMarketingSwapAmount && minMarketingSwapAmount > 0) {\r\n                    uint256 marketingSwapAmount = marketingBalance > maxMarketingSwapAmount ? maxMarketingSwapAmount : marketingBalance;\r\n                    if (marketingSwapAmount > 0 && marketingSwapAmount <= balanceOf(address(this))) {\r\n                        _swapMarketing(marketingSwapAmount);\r\n                    }\r\n                }\r\n\r\n                if (swapEnabled && buybackBalance >= minSwapAmount && minSwapAmount > 0) {\r\n                    uint256 swapAmount = buybackBalance > maxSwapAmount ? maxSwapAmount : buybackBalance;\r\n                    if (swapAmount > 0 && swapAmount <= balanceOf(address(this))) {\r\n                        _swapBuyback(swapAmount);\r\n                    }\r\n                }\r\n\r\n                uint256 balance = address(this).balance;\r\n                if (buybackEnabled && balance >= minBalanceRequired && minBalanceRequired > 0 && _amount >= minBuybackSellAmount && isLpToken(_to)) {\r\n                    uint256 buybackAmount = balance > maxBuybackAmount ? maxBuybackAmount : balance;\r\n                    if (buybackAmount > 0) {\r\n                        _buyback(buybackAmount);\r\n                    }\r\n                }\r\n            }\r\n\r\n            calculatedAmount = calculatedAmount.sub(burnFeeAmount).sub(marketingFeeAmount).sub(buybackFeeAmount);\r\n        }\r\n\r\n        _transferAmount(_from, _to, calculatedAmount);\r\n    }\r\n\r\n    function _transferAmount(address _from, address _to, uint256 _amount) internal virtual {\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 _tokenAmount, address _recipient) internal lockTheSwap {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), _tokenAmount);\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            _recipient,\r\n            block.timestamp\r\n        );\r\n\r\n        emit SwapTokensForETH(_tokenAmount, path);\r\n    }\r\n\r\n    function _swapETHForTokens(uint256 amount, address _recipient) internal lockTheSwap {\r\n        // generate the uniswap pair path of weth -> token\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(this);\r\n\r\n        // make the swap\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value : amount}(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            _recipient, // Burn address\r\n            block.timestamp.add(300)\r\n        );\r\n\r\n        emit SwapETHForTokens(amount, path);\r\n    }\r\n\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract ErosToken is BEP20e {\r\n    constructor(address _router, IReferral _referral) public BEP20e('Eros', 'EROS', _router, _referral) {\r\n        _mint(msg.sender, 1000000 * 10 ** uint256(decimals));\r\n\r\n        burnFee = 300; // 3%\r\n        marketingFee = 300; // 3%\r\n        buybackFee = 300; // 3%\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IReferral\",\"name\":\"_referral\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addBuybackBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiWhaleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiWhaleTxAmountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"calcFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isExcludedFromAntiWhale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isLpToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAntiWhaleTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuybackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketingSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBalanceRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuybackSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMarketingSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referral\",\"outputs\":[{\"internalType\":\"contract IReferral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_antiWhaleEnabled\",\"type\":\"bool\"}],\"name\":\"setAntiWhaleEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_antiWhaleTxAmountRate\",\"type\":\"uint256\"}],\"name\":\"setAntiWhaleTxAmountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buybackEnabled\",\"type\":\"bool\"}],\"name\":\"setBuybackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExcludedFromAntiWhale\",\"type\":\"bool\"}],\"name\":\"setExcludedFromAntiWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isExcludedFromFee\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLpToken\",\"type\":\"bool\"}],\"name\":\"setLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_marketingSwapEnabled\",\"type\":\"bool\"}],\"name\":\"setMarketingSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuybackAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxBuybackAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMarketingSwapAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxMarketingSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSwapAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBalanceRequired\",\"type\":\"uint256\"}],\"name\":\"setMinBalanceRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuybackSellAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBuybackSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minMarketingSwapAmount\",\"type\":\"uint256\"}],\"name\":\"setMinMarketingSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSwapAmount\",\"type\":\"uint256\"}],\"name\":\"setMinSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReferral\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"setReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyWithoutDeadBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ErosToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000247279aa5ccbdb4723039da05a5d9af4ff85d590", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://05ea0b2d3ab96efa1b5055e818b00096afa7b1c7c1306933671073b051c1f799"}