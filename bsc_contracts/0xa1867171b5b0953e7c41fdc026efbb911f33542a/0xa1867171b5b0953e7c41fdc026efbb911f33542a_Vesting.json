{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/IAccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Vesting.sol\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Vesting\r\n */\r\ncontract Vesting is ReentrancyGuard, AccessControl {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Investor data structure. Mapping from these structures is stored in the contract, it is filled before the start of vesting\r\n    struct InvestorData {\r\n        bool cliffPaid;\r\n        address investor; // investor address\r\n        uint256 amount; // amount of tokens to be released at the end of the vesting except for amount paid after the cliff\r\n        uint256 released; // amount of tokens released\r\n        uint256 amountAfterCliff; // amount paid after cliff, must be calculated outside the contract from the percentage (cliffPercent)\r\n        uint256 phaseID; // ID of the vesting phase, for each phase set a unique number outside the contract\r\n    }\r\n\r\n    // The structure of the vesting phases. Mapping from these structures is stored in the contract, it is filled before the start of vesting\r\n    struct VestingPhase {\r\n        uint256 start; // start time of the vesting period\r\n        uint256 duration; // duration of the vesting period arter cliff in seconds (total duration - cliff)\r\n        uint256 cliff; // cliff period in seconds\r\n        uint256 cliffPercent; // % after cliff period (multiply by 10, because could be fractional percentage, like - 7.5)\r\n        uint256 slicePeriodSeconds; // duration of a slice period in seconds\r\n        string phaseName; // name of the vesting phase\r\n    }\r\n\r\n    // The full structure of vesting in the context of the investor. Not stored in the contract, but returned upon request from the web application\r\n    struct VestingSchedule {\r\n        bool cliffPaid;\r\n        address investor; // investor address\r\n        uint256 cliff; // cliff period in seconds\r\n        uint256 cliffPercent; // % after cliff period (multiply by 10, because could be fractional percentage, like - 7,5)\r\n        uint256 amountAfterCliff; // amount paid after cliff\r\n        uint256 start; // start time of the vesting period\r\n        uint256 duration; // duration of the vesting period arter cliff in seconds\r\n        uint256 slicePeriodSeconds; // duration of a slice period for the vesting in seconds\r\n        uint256 amount; // amount of tokens to be released at the end of the vesting except for percentages after the cliff\r\n        uint256 released; // amount of tokens released exept cliff percent\r\n        uint256 releasedTotal; // total amount of tokens released with cliff percent\r\n        uint256 releasableAmount; // amount of tokens ready for release now\r\n        uint256 phaseID; // ID of the vesting phase\r\n        string phaseName; // name of the vesting phase\r\n    }\r\n\r\n    IERC20 private immutable _token;\r\n    // Create a new role identifier for the admin role\r\n    bytes32 public constant STAGE_ADJUSTMENT_ROLE =\r\n        keccak256(\"STAGE_ADJUSTMENT_ROLE\");\r\n    mapping(bytes32 => InvestorData) private investorsData;\r\n    mapping(uint256 => VestingPhase) private vestingPhases;\r\n    uint256 private vestingTotalAmount;\r\n    mapping(address => uint256) private holdersVestingCount;\r\n\r\n    event Released(address indexed investor, uint256 amount);\r\n\r\n    /**\r\n     * @dev Reverts if the vesting schedule does not exist or has been revoked.\r\n     */\r\n    modifier onlyIfNotRevoked(bytes32 investorDataId) {\r\n        require(investorsData[investorDataId].amount > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any accounts other than the SA (stage adjustment) or admin.\r\n     */\r\n    modifier onlyAdminOrSA() {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) ||\r\n                hasRole(STAGE_ADJUSTMENT_ROLE, msg.sender),\r\n            \"Caller is not an admin and has no stage adjustment role\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a vesting contract.\r\n     * @param token_ address of the IERC20/BEP20 token contract\r\n     */\r\n    constructor(address token_) {\r\n        require(token_ != address(0x0));\r\n        _token = IERC20(token_);\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    /**\r\n     * @notice Returns the total amount of vesting.\r\n     * @return the total amount of vesting\r\n     */\r\n    function getvestingTotalAmount() external view returns (uint256) {\r\n        return vestingTotalAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of vesting schedules associated to an investor.\r\n     * @return the number of vesting schedules\r\n     */\r\n    function getVestingSchedulesCountByInvestor(address _investor)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return holdersVestingCount[_investor];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the investor data information for a given holder and index.\r\n     * @return the investor data structure information\r\n     */\r\n    function getInvestorDataByAddressAndIndex(address holder, uint256 index)\r\n        external\r\n        view\r\n        returns (InvestorData memory)\r\n    {\r\n        return\r\n            getInvestorData(\r\n                computeInvestorDataIdForAddressAndIndex(holder, index)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the vesting schedule information for a given holder and index.\r\n     * @return the vesting schedule structure information\r\n     */\r\n    function getVestingScheduleByAddressAndIndex(address holder, uint256 index)\r\n        public\r\n        view\r\n        returns (VestingSchedule memory)\r\n    {\r\n        InvestorData memory investorData = getInvestorData(\r\n            computeInvestorDataIdForAddressAndIndex(holder, index)\r\n        );\r\n        uint256 releasedTotal = investorData.released;\r\n        if (investorData.cliffPaid) {\r\n            releasedTotal = releasedTotal + investorData.amountAfterCliff;\r\n        }\r\n        VestingPhase memory vestingPhase = vestingPhases[investorData.phaseID];\r\n        return\r\n            VestingSchedule(\r\n                investorData.cliffPaid,\r\n                investorData.investor,\r\n                vestingPhase.cliff,\r\n                vestingPhase.cliffPercent,\r\n                investorData.amountAfterCliff,\r\n                vestingPhase.start,\r\n                vestingPhase.duration,\r\n                vestingPhase.slicePeriodSeconds,\r\n                investorData.amount,\r\n                investorData.released,\r\n                releasedTotal,\r\n                _computeReleasableAmount(investorData),\r\n                investorData.phaseID,\r\n                vestingPhase.phaseName\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the array of vesting schedules for a given holder.\r\n     * @return the array of vesting schedule structures\r\n     * @param _investor address of investor\r\n     */\r\n    function getScheduleArrayByInvestor(address _investor)\r\n        external\r\n        view\r\n        returns (VestingSchedule[] memory)\r\n    {\r\n        uint256 vestingSchedulesCount = holdersVestingCount[_investor];\r\n        VestingSchedule[] memory schedulesArray = new VestingSchedule[](\r\n            vestingSchedulesCount\r\n        );\r\n        for (uint256 i = 0; i < vestingSchedulesCount; i++) {\r\n            schedulesArray[i] = getVestingScheduleByAddressAndIndex(\r\n                _investor,\r\n                i\r\n            );\r\n        }\r\n        return schedulesArray;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the IERC20/BEP20 token managed by the vesting contract.\r\n     */\r\n    function getToken() external view returns (address) {\r\n        return address(_token);\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new vesting phase.\r\n     * @param _phaseId ID of vesting phase\r\n     * @param _start start time of the vesting period\r\n     * @param _duration duration in seconds of the period in which the tokens will vest\r\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n     * @param _cliffPercent % of token amount could be clamed after the cliff\r\n     * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\r\n     * @param _phaseName name of the vesting phase\r\n     */\r\n    function createVestingPhase(\r\n        uint256 _phaseId,\r\n        uint256 _start,\r\n        uint256 _duration,\r\n        uint256 _cliff,\r\n        uint256 _cliffPercent,\r\n        uint256 _slicePeriodSeconds,\r\n        string memory _phaseName\r\n    ) external onlyAdminOrSA {\r\n        require(_duration >= 0, \"Vesting: duration must be >= 0\");\r\n        require(\r\n            _slicePeriodSeconds >= 1,\r\n            \"Vesting: slicePeriodSeconds must be >= 1\"\r\n        );\r\n        vestingPhases[_phaseId] = VestingPhase(\r\n            _start,\r\n            _duration,\r\n            _start + _cliff,\r\n            _cliffPercent,\r\n            _slicePeriodSeconds,\r\n            _phaseName\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Change vesting phase.\r\n     * @param _phaseId ID of vesting phase\r\n     * @param _start start time of the vesting period\r\n     * @param _duration duration in seconds of the period in which the tokens will vest\r\n     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n     * @param _cliffPercent % of token amount could be clamed after the cliff\r\n     * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\r\n     * @param _phaseName name of the vesting phase\r\n     */\r\n    function changeVestingPhase(\r\n        uint256 _phaseId,\r\n        uint256 _start,\r\n        uint256 _duration,\r\n        uint256 _cliff,\r\n        uint256 _cliffPercent,\r\n        uint256 _slicePeriodSeconds,\r\n        string memory _phaseName\r\n    ) external onlyAdminOrSA {\r\n        require(_duration >= 0, \"Vesting: duration must be >= 0\");\r\n        require(\r\n            _slicePeriodSeconds >= 1,\r\n            \"Vesting: slicePeriodSeconds must be >= 1\"\r\n        );\r\n        VestingPhase storage vestingPhase = vestingPhases[_phaseId];\r\n        vestingPhase.start = _start;\r\n        vestingPhase.duration = _duration;\r\n        vestingPhase.cliff = _start + _cliff;\r\n        vestingPhase.cliffPercent = _cliffPercent;\r\n        vestingPhase.slicePeriodSeconds = _slicePeriodSeconds;\r\n        vestingPhase.phaseName = _phaseName;\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new vesting schedule for an investor.\r\n     * @param _investor address of the investor to whom vested tokens are transferred\r\n     * @param _amount total amount of tokens to be released at the end of the vesting\r\n     * @param _cliffPercent percent from total amount to be payd after cliff\r\n     * @param _phaseID ID of the vesting phase\r\n     */\r\n    function addInvestor(\r\n        address _investor,\r\n        uint256 _amount,\r\n        uint256 _cliffPercent,\r\n        uint256 _phaseID\r\n    ) external onlyAdminOrSA {\r\n        require(_amount > 0, \"Vesting: amount must be > 0\");\r\n        bytes32 investorDataId = computeNextinvestorDataIdForHolder(_investor);\r\n        uint256 _amountAfterCliff = (_amount * _cliffPercent) / 1000;\r\n\r\n        investorsData[investorDataId] = InvestorData(\r\n            false,\r\n            _investor,\r\n            _amount - _amountAfterCliff,\r\n            0,\r\n            _amountAfterCliff,\r\n            _phaseID\r\n        );\r\n        vestingTotalAmount = vestingTotalAmount + _amount;\r\n        holdersVestingCount[_investor] += 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Cancels an existing schedule by resetting the amount\r\n     * @param investorDataId the vesting schedule identifier\r\n     */\r\n    function cancelInvestorSchedule(bytes32 investorDataId)\r\n        external\r\n        onlyAdminOrSA\r\n    {\r\n        InvestorData storage investorData = investorsData[investorDataId];\r\n        vestingTotalAmount =\r\n            vestingTotalAmount -\r\n            ((investorData.amount + investorData.amountAfterCliff) -\r\n                investorData.released);\r\n        investorData.amount = 0;\r\n        investorData.amountAfterCliff = 0;\r\n        investorData.cliffPaid = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Change an existing schedule by overwriting all parameters\r\n     * @param investorDataId the vesting schedule identifier\r\n     * @param _cliffPaid was the amount paid after the cliff\r\n     * @param _amount total amount of tokens to be released at the end of the vesting\r\n     * @param _released how much has already been paid to the investor\r\n     * @param _cliffPercent percent from total amount to be payd after cliff\r\n     * @param _phaseID ID of the vesting phase\r\n     */\r\n    function changeInvestorSchedule(\r\n        bytes32 investorDataId,\r\n        bool _cliffPaid,\r\n        uint256 _amount,\r\n        uint256 _released,\r\n        uint256 _cliffPercent,\r\n        uint256 _phaseID\r\n    ) external onlyAdminOrSA {\r\n        uint256 _amountAfterCliff = (_amount * _cliffPercent) / 1000;\r\n        InvestorData storage investorData = investorsData[investorDataId];\r\n\r\n        if (_released == 0) {\r\n            _released = investorData.released;\r\n        }\r\n        if (_phaseID == 0) {\r\n            _phaseID = investorData.phaseID;\r\n        }\r\n\r\n        vestingTotalAmount =\r\n            vestingTotalAmount -\r\n            ((investorData.amount + investorData.amountAfterCliff) -\r\n                investorData.released);\r\n\r\n        investorData.cliffPaid = _cliffPaid;\r\n        investorData.amount = _amount - _amountAfterCliff;\r\n        investorData.released = _released;\r\n        investorData.amountAfterCliff = _amountAfterCliff;\r\n        investorData.phaseID = _phaseID;\r\n\r\n        vestingTotalAmount = (vestingTotalAmount + _amount) - _released;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw the specified amount if possible.\r\n     * @param amount the amount to withdraw\r\n     */\r\n    function withdraw(uint256 amount) external {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            \"Caller is not an admin\"\r\n        );\r\n        _token.safeTransfer(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Release vested amount of tokens.\r\n     * @param investorDataId the vesting schedule identifier\r\n     * @param amount the amount to release\r\n     */\r\n    function release(bytes32 investorDataId, uint256 amount)\r\n        public\r\n        nonReentrant\r\n        onlyIfNotRevoked(investorDataId)\r\n    {\r\n        InvestorData storage investorData = investorsData[investorDataId];\r\n        require(\r\n            msg.sender == investorData.investor ||\r\n                hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            \"Vesting: only investor and admin can release vested tokens\"\r\n        );\r\n        uint256 vestedAmount = _computeReleasableAmount(investorData);\r\n        require(\r\n            vestedAmount >= amount,\r\n            \"Vesting: cannot release tokens, not enough vested tokens\"\r\n        );\r\n        if (amount != 0) {\r\n            if (investorData.cliffPaid) {\r\n                investorData.released = investorData.released + amount;\r\n            } else {\r\n                investorData.released =\r\n                    (investorData.released + amount) -\r\n                    investorData.amountAfterCliff;\r\n            }\r\n            vestingTotalAmount = vestingTotalAmount - amount;\r\n            investorData.cliffPaid = true;\r\n            address payable investorPayable = payable(investorData.investor);\r\n\r\n            _token.safeTransfer(investorPayable, amount);\r\n\r\n            emit Released(investorData.investor, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Computes the vested amount of tokens for the given vesting schedule identifier.\r\n     * @return the vested amount\r\n     */\r\n    function computeReleasableAmount(bytes32 investorDataId)\r\n        external\r\n        view\r\n        onlyIfNotRevoked(investorDataId)\r\n        returns (uint256)\r\n    {\r\n        //InvestorData storage investorData = investorsData[investorDataId];\r\n        return _computeReleasableAmount(investorsData[investorDataId]);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the investor data information for a given identifier.\r\n     * @return the investor data structure information\r\n     */\r\n    function getInvestorData(bytes32 investorDataId)\r\n        public\r\n        view\r\n        returns (InvestorData memory)\r\n    {\r\n        return investorsData[investorDataId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens that can be withdrawn by the admin.\r\n     * @return the amount of tokens\r\n     */\r\n    function getWithdrawableAmount() external view returns (uint256) {\r\n        return _token.balanceOf(address(this)) - vestingTotalAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the next investor data identifier for a given holder address.\r\n     */\r\n    function computeNextinvestorDataIdForHolder(address holder)\r\n        public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return\r\n            computeInvestorDataIdForAddressAndIndex(\r\n                holder,\r\n                holdersVestingCount[holder]\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Get vesting phase.\r\n     * @param _phaseID ID of phase\r\n     * @return structure of vesting phase\r\n     */\r\n    function getVestingPhase(uint256 _phaseID)\r\n        external\r\n        view\r\n        returns (VestingPhase memory)\r\n    {\r\n        return vestingPhases[_phaseID];\r\n    }\r\n\r\n    /**\r\n     * @dev Get current timestamp in seconds.\r\n     * @return current timestamp\r\n     */\r\n    function getCurrentTime() internal view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the investor data identifier for an address and an index.\r\n     */\r\n    function computeInvestorDataIdForAddressAndIndex(\r\n        address holder,\r\n        uint256 index\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(holder, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Grant the stage adjustment role to a specified account\r\n     * @param saRole_ the address to which SA permissions are set\r\n     */\r\n    function grantSARole(address saRole_) external {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\r\n            \"Caller is not an admin\"\r\n        );\r\n        _setupRole(STAGE_ADJUSTMENT_ROLE, saRole_);\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the releasable amount of tokens for a vesting schedule.\r\n     * @return the amount of releasable tokens\r\n     */\r\n    function _computeReleasableAmount(InvestorData memory investorData)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 currentTime = getCurrentTime();\r\n        VestingPhase memory vestingPhase = vestingPhases[investorData.phaseID];\r\n\r\n        if (\r\n            (currentTime < vestingPhase.cliff) || (investorData.amount == 0) // If cliff not finished or total amount = 0 (schedule was canceled)\r\n        ) {\r\n            return 0;\r\n        } else if (currentTime >= vestingPhase.cliff + vestingPhase.duration) {\r\n            // If vesting period finished\r\n            return investorData.amount - investorData.released;\r\n        } else {\r\n            uint256 timeFromStart = currentTime - vestingPhase.cliff;\r\n            uint256 secondsPerSlice = vestingPhase.slicePeriodSeconds;\r\n            uint256 vestedSlicePeriods = timeFromStart / secondsPerSlice;\r\n            uint256 vestedSeconds = vestedSlicePeriods * secondsPerSlice;\r\n            uint256 vestedAmount = (investorData.amount * vestedSeconds) /\r\n                vestingPhase.duration;\r\n            if (investorData.cliffPaid) {\r\n                vestedAmount = vestedAmount - investorData.released;\r\n            } else {\r\n                vestedAmount = vestedAmount + investorData.amountAfterCliff;\r\n            }\r\n            return vestedAmount;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAGE_ADJUSTMENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phaseID\",\"type\":\"uint256\"}],\"name\":\"addInvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"investorDataId\",\"type\":\"bytes32\"}],\"name\":\"cancelInvestorSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"investorDataId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_cliffPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phaseID\",\"type\":\"uint256\"}],\"name\":\"changeInvestorSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_phaseName\",\"type\":\"string\"}],\"name\":\"changeVestingPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"computeInvestorDataIdForAddressAndIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"computeNextinvestorDataIdForHolder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"investorDataId\",\"type\":\"bytes32\"}],\"name\":\"computeReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliffPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_phaseName\",\"type\":\"string\"}],\"name\":\"createVestingPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"investorDataId\",\"type\":\"bytes32\"}],\"name\":\"getInvestorData\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"cliffPaid\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAfterCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseID\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.InvestorData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getInvestorDataByAddressAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"cliffPaid\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAfterCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseID\",\"type\":\"uint256\"}],\"internalType\":\"struct Vesting.InvestorData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getScheduleArrayByInvestor\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"cliffPaid\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAfterCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"phaseName\",\"type\":\"string\"}],\"internalType\":\"struct Vesting.VestingSchedule[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseID\",\"type\":\"uint256\"}],\"name\":\"getVestingPhase\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"phaseName\",\"type\":\"string\"}],\"internalType\":\"struct Vesting.VestingPhase\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleByAddressAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"cliffPaid\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAfterCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"phaseName\",\"type\":\"string\"}],\"internalType\":\"struct Vesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getVestingSchedulesCountByInvestor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getvestingTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"saRole_\",\"type\":\"address\"}],\"name\":\"grantSARole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"investorDataId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Vesting", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000bb6cdedac5cab4a420211a4a8e8b5dca879b31de", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://211de82037ba83eee1377608e7fa265170e185f05b6564e82ac3596d88af8dd6"}