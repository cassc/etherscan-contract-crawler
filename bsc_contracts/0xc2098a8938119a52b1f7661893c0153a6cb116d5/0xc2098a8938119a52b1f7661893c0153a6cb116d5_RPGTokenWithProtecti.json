{"SourceCode": "pragma solidity 0.5.17;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract BurnRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event BurnerAdded(address indexed account);\r\n    event BurnerRemoved(address indexed account);\r\n\r\n    Roles.Role private _burners;\r\n\r\n    constructor () internal {\r\n        _addBurner(msg.sender);\r\n    }\r\n\r\n    modifier onlyBurner() {\r\n        require(isBurner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isBurner(address account) public view returns (bool) {\r\n        return _burners.has(account);\r\n    }\r\n\r\n    function addBurner(address account) public onlyBurner {\r\n        _addBurner(account);\r\n    }\r\n\r\n    function renounceBurner() public {\r\n        _removeBurner(msg.sender);\r\n    }\r\n\r\n    function _addBurner(address account) internal {\r\n        _burners.add(account);\r\n        emit BurnerAdded(account);\r\n    }\r\n\r\n    function _removeBurner(address account) internal {\r\n        _burners.remove(account);\r\n        emit BurnerRemoved(account);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://eips.ethereum.org/EIPS/eip-20\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses.\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract ERC20Burnable is ERC20, BurnRole{\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 value) public onlyBurner returns (bool){\r\n        _burn(msg.sender, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) external onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic.\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole{\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param to The address that will receive the minted tokens.\r\n     * @param value The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address to, uint256 value) external onlyMinter returns (bool) {\r\n        _mint(to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Capped token\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract ERC20Capped is ERC20Mintable {\r\n    uint256 private _cap;\r\n\r\n    constructor (uint256 cap) public {\r\n        require(cap > 0);\r\n        _cap = cap;\r\n    }\r\n\r\n    /**\r\n     * @return the cap for the token minting.\r\n     */\r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        require(totalSupply().add(value) <= _cap);\r\n        super._mint(account, value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n\r\n        require(address(token).isContract());\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success);\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            require(abi.decode(returndata, (bool)));\r\n        }\r\n    }\r\n}\r\n\r\ncontract RPGBurn is Ownable {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    ERC20Burnable private _token;\r\n\r\n    constructor(ERC20Burnable token) public {\r\n        _token = token;\r\n    }\r\n\r\n    function burn(uint256 value) onlyOwner public {\r\n        _token.burn(value);\r\n    }\r\n}\r\n\r\n\r\ncontract RPG is\r\n    ERC20,\r\n    ERC20Detailed,\r\n    ERC20Burnable,\r\n    ERC20Capped,\r\n    Ownable\r\n{\r\n    using Address for address;\r\n    uint256 public constant INITIAL_SUPPLY = 21000000 * (10**18);\r\n    mapping(address => uint8) public limit;\r\n    RPGBurn public burnContract;\r\n\r\n    constructor(string memory name, string memory symbol)\r\n        public\r\n        Ownable()\r\n        ERC20Capped(INITIAL_SUPPLY)\r\n        ERC20Burnable()\r\n        ERC20Detailed(name, symbol, 18)\r\n        ERC20()\r\n    {\r\n        // mint all tokens\r\n        _mint(msg.sender, INITIAL_SUPPLY);\r\n\r\n        // create burner contract\r\n        burnContract = new RPGBurn(this);\r\n        addBurner(address(burnContract));\r\n    }\r\n\r\n    /**\r\n     * Set target address transfer limit\r\n     * @param addr target address\r\n     * @param mode limit mode (0: no limit, 1: can not transfer token, 2: can not receive token)\r\n     */\r\n    function setTransferLimit(address addr, uint8 mode) public onlyOwner {\r\n        require(mode == 0 || mode == 1 || mode == 2);\r\n\r\n        if (mode == 0) {\r\n            delete limit[addr];\r\n        } else {\r\n            limit[addr] = mode;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(limit[msg.sender] != 1, 'from address is limited.');\r\n        require(limit[to] != 2, 'to address is limited.');\r\n\r\n        _transfer(msg.sender, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function burnFromContract(uint256 value) onlyBurner public {\r\n        burnContract.burn(value);\r\n    }\r\n}\r\n\r\ncontract RPGVesting is Ownable {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    RPG private _token;\r\n    RPGVestingA private _investors = RPGVestingA(0);\r\n    RPGVestingB private _incubator_adviser;\r\n    RPGVestingC private _development;\r\n    RPGVestingD private _community;\r\n    RPGVestingE private _fund;\r\n\r\n    uint256 public INITIAL_SUPPLY;\r\n\r\n    event event_debug(uint256 amount);\r\n\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    function init(\r\n        RPG token,RPGVestingA investors_addr,RPGVestingB incubator_adviser_addr,RPGVestingC development_addr,RPGVestingD community_addr,RPGVestingE fund_addr,\r\n        address[] memory investors,          //10%-----A\r\n        uint256[] memory investors_number,\r\n        address[] memory incubator_advisers, //7%-----B\r\n        uint256[] memory incubator_advisers_number,\r\n        address developments,               //14%----C\r\n        address community,                  //49%----D  mutisigncontract address\r\n        address[3] memory fund              //20%----E\r\n    ) public onlyOwner {\r\n        require(address(_investors) == address(0));     //run once\r\n\r\n        //para check\r\n        require(address(token) != address(0));\r\n        require(address(investors_addr) != address(0));\r\n        require(address(incubator_adviser_addr) != address(0));\r\n        require(address(development_addr) != address(0));\r\n        require(address(community_addr) != address(0));\r\n        require(address(fund_addr) != address(0));\r\n        require(investors.length == investors_number.length);\r\n        require(incubator_advisers.length == incubator_advisers_number.length);\r\n        require(developments != address(0));\r\n        require(community != address(0));\r\n        require(fund[0] != address(0));\r\n        require(fund[1] != address(0));\r\n        require(fund[2] != address(0));\r\n        //run check\r\n\r\n        _token = token;\r\n        _investors = investors_addr;\r\n        _incubator_adviser = incubator_adviser_addr;\r\n        _development = development_addr;\r\n        _community = community_addr;\r\n        _fund = fund_addr;\r\n        INITIAL_SUPPLY = _token.INITIAL_SUPPLY();\r\n        require(_token.balanceOf(address(this)) == INITIAL_SUPPLY);\r\n\r\n        // create all vesting contracts\r\n        // _investors          = new RPGVestingA(_token,INITIAL_SUPPLY.mul(9).div(100));\r\n        // _incubator_adviser  = new RPGVestingB(_token,INITIAL_SUPPLY.mul(7).div(100));\r\n        // _development        = new RPGVestingB(_token,INITIAL_SUPPLY.mul(14).div(100));\r\n        // _community          = new RPGVestingC(_token,community,INITIAL_SUPPLY.mul(49).div(100));\r\n        // _fund               = new RPGVestingD(_token,fund,INITIAL_SUPPLY.mul(21).div(100));\r\n\r\n        //init\r\n        require(_investors.init(_token,INITIAL_SUPPLY.mul(10).div(100),investors,investors_number));\r\n        require(_incubator_adviser.init(_token,INITIAL_SUPPLY.mul(7).div(100),incubator_advisers,incubator_advisers_number));\r\n        require(_development.init(_token,developments,INITIAL_SUPPLY.mul(14).div(100)));\r\n        require(_community.init(_token,community,INITIAL_SUPPLY.mul(49).div(100)));\r\n        require(_fund.init(_token,fund,INITIAL_SUPPLY.mul(20).div(100)));\r\n\r\n        //transfer tokens to vesting contracts\r\n        _token.transfer(address(_investors)         , _investors.total());\r\n        _token.transfer(address(_incubator_adviser) , _incubator_adviser.total());\r\n        _token.transfer(address(_development)       , _development.total());\r\n        _token.transfer(address(_community)         , _community.total());\r\n        _token.transfer(address(_fund)              , _fund.total());\r\n\r\n    }\r\n\r\n    function StartIDO(uint256 start) public onlyOwner {\r\n        require(start >= block.timestamp);\r\n\r\n        _investors.setStart(start);\r\n        _fund.setStart(start);\r\n    }\r\n\r\n    function StartMainnet(uint256 start) public onlyOwner {\r\n        require(start >= block.timestamp);\r\n        require(start >= _investors.start());\r\n\r\n        _incubator_adviser.setStart(start);\r\n        _development.setStart(start);\r\n        _community.setStart(start);\r\n    }\r\n\r\n    function StartInvestorsClaim() public onlyOwner {\r\n        require(_investors.start() > 0 && _investors.start() < block.timestamp);\r\n\r\n        _investors.setcanclaim();\r\n    }\r\n\r\n    function investors() public view returns (address) {\r\n        return address(_investors);\r\n    }\r\n\r\n    function incubator_adviser() public view returns (address) {\r\n        return address(_incubator_adviser);\r\n    }\r\n\r\n    function development() public view returns (address) {\r\n        return address(_development);\r\n    }\r\n\r\n    function community() public view returns (address) {\r\n        return address(_community);\r\n    }\r\n\r\n    function fund() public view returns (address) {\r\n        return address(_fund);\r\n    }\r\n\r\n    ////calc vesting number/////////////////////////////\r\n    function unlocked_investors_vesting(address user) public view returns(uint256) {\r\n        return _investors.calcvesting(user);\r\n    }\r\n\r\n    function unlocked_incubator_adviser_vesting(address user) public view returns(uint256) {\r\n        return _incubator_adviser.calcvesting(user);\r\n    }\r\n\r\n    function unlocked_development_vesting() public view returns(uint256) {\r\n        return _development.calcvesting();\r\n    }\r\n\r\n    function unlocked_community_vesting() public view returns(uint256) {\r\n        return _community.calcvesting();\r\n    }\r\n\r\n    // function calc_fund_vesting() public view returns(uint256) {\r\n    //     return _fund.calcvesting();\r\n    // }\r\n\r\n    ///////claimed amounts//////////////////////////////\r\n    function claimed_investors(address user) public view returns(uint256){\r\n        return _investors.claimed(user);\r\n    }\r\n\r\n    function claimed_incubator_adviser(address user) public view returns(uint256){\r\n        return _incubator_adviser.claimed(user);\r\n    }\r\n\r\n    function claimed_development() public view returns(uint256){\r\n        return _development.claimed();\r\n    }\r\n\r\n    function claimed_community() public view returns(uint256){\r\n        return _community.claimed();\r\n    }\r\n\r\n    //////change address/////////////////////////////////\r\n    function investors_changeaddress(address oldaddr,address newaddr) onlyOwner public{\r\n        require(newaddr != address(0));\r\n\r\n        _investors.changeaddress(oldaddr,newaddr);\r\n    }\r\n\r\n    function incubator_adviser_changeaddress(address oldaddr,address newaddr) onlyOwner public{\r\n        require(newaddr != address(0));\r\n\r\n        _incubator_adviser.changeaddress(oldaddr,newaddr);\r\n    }\r\n\r\n    function community_changeaddress(address newaddr) onlyOwner public{\r\n        require(newaddr != address(0));\r\n\r\n        _community.changeaddress(newaddr);\r\n    }\r\n\r\n}\r\n\r\ncontract RPGVestingA {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    address _vestingaddr;\r\n    IERC20 private _token;\r\n    uint256 private _total;\r\n    uint256 private _start = 0;\r\n    bool    private _canclaim = false;\r\n    address[] private _beneficiarys;\r\n    uint256 constant _duration = 86400;\r\n    uint256 constant _releasealldays = 400;\r\n    mapping(address => uint256) private _beneficiary_total;\r\n    mapping(address => uint256) private _released;\r\n\r\n    //event\r\n    event event_set_can_claim();\r\n    event event_claimed(address user,uint256 amount);\r\n    event event_change_address(address oldaddr,address newaddr);\r\n\r\n    constructor(address addr) public {\r\n        require(addr != address(0));\r\n\r\n        _vestingaddr = addr;\r\n    }\r\n\r\n    function init(IERC20 token, uint256 total,address[] memory beneficiarys,uint256[] memory amounts) public returns(bool) {\r\n        require(_vestingaddr == msg.sender);\r\n        require(_beneficiarys.length == 0);     //run once\r\n\r\n        require(address(token) != address(0));\r\n        require(total > 0);\r\n        require(beneficiarys.length == amounts.length);\r\n\r\n        _token = token;\r\n        _total = total;\r\n\r\n        uint256 all = 0;\r\n        for(uint256 i = 0 ; i < amounts.length; i++)\r\n        {\r\n            all = all.add(amounts[i]);\r\n        }\r\n        require(all == _total);\r\n\r\n        _beneficiarys = beneficiarys;\r\n        for(uint256 i = 0 ; i < _beneficiarys.length; i++)\r\n        {\r\n            _beneficiary_total[_beneficiarys[i]] = amounts[i];\r\n            _released[_beneficiarys[i]] = 0;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setStart(uint256 newStart) public {\r\n        require(_vestingaddr == msg.sender);\r\n        require(newStart > 0 && _start == 0);\r\n\r\n        _start = newStart;\r\n    }\r\n\r\n    /**\r\n    * @return the start time of the token vesting.\r\n    */\r\n    function start() public view returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the tokens.\r\n     */\r\n    function beneficiary() public view returns (address[] memory) {\r\n        return _beneficiarys;\r\n    }\r\n\r\n    /**\r\n     * @return total tokens of the beneficiary address.\r\n     */\r\n    function beneficiarytotal(address addr) public view returns (uint256) {\r\n    \trequire(_beneficiary_total[addr] != 0,'not in beneficiary list');\r\n        return _beneficiary_total[addr];\r\n    }\r\n\r\n    /**\r\n     * @return total of the tokens.\r\n     */\r\n    function total() public view returns (uint256) {\r\n        return _total;\r\n    }\r\n\r\n    /**\r\n     * @return canclaim.\r\n     */\r\n    function canclaim() public view returns (bool) {\r\n        return _canclaim;\r\n    }\r\n\r\n    function setcanclaim() public {\r\n        require(_vestingaddr == msg.sender);\r\n        require(!_canclaim,'_canclaim is not false!');\r\n\r\n        _canclaim = true;\r\n\r\n        emit event_set_can_claim();\r\n    }\r\n\r\n    /**\r\n     * @return total number can release to now.\r\n     */\r\n    function calcvesting(address user) public view returns(uint256) {\r\n        require(_start > 0);\r\n        require(block.timestamp >= _start);\r\n        require(_beneficiary_total[user] > 0);\r\n\r\n        uint256 daynum = block.timestamp.sub(_start).div(_duration);\r\n\r\n        if(daynum <= _releasealldays)\r\n        {\r\n            return _beneficiary_total[user].mul(daynum).div(_releasealldays);\r\n        }\r\n        else\r\n        {\r\n            return _beneficiary_total[user];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * claim all the tokens to now\r\n     * @return claim number this time .\r\n     */\r\n    function claim() public returns(uint256) {\r\n        require(_start > 0);\r\n        require(_beneficiary_total[msg.sender] > 0);\r\n        require(_canclaim,'claim not allowed!');\r\n\r\n        uint256 amount = calcvesting(msg.sender).sub(_released[msg.sender]);\r\n        if(amount > 0)\r\n        {\r\n            _released[msg.sender] = _released[msg.sender].add(amount);\r\n            _token.safeTransfer(msg.sender,amount);\r\n            emit event_claimed(msg.sender,amount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @return all number has claimed\r\n     */\r\n    function claimed(address user) public view returns(uint256) {\r\n        require(_start > 0);\r\n\r\n        return _released[user];\r\n    }\r\n\r\n    function changeaddress(address oldaddr,address newaddr) public {\r\n        require(_beneficiarys.length > 0);\r\n        require(_beneficiary_total[newaddr] == 0);\r\n\r\n        if(msg.sender == _vestingaddr)\r\n        {\r\n            for(uint256 i = 0 ; i < _beneficiarys.length; i++)\r\n            {\r\n                if(_beneficiarys[i] == oldaddr)\r\n                {\r\n                    _beneficiarys[i] = newaddr;\r\n                    _beneficiary_total[newaddr] = _beneficiary_total[oldaddr];\r\n                    _beneficiary_total[oldaddr] = 0;\r\n                    _released[newaddr] = _released[oldaddr];\r\n                    _released[oldaddr] = 0;\r\n\r\n                    emit event_change_address(oldaddr,newaddr);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            require(msg.sender == oldaddr);\r\n\r\n            for(uint256 i = 0 ; i < _beneficiarys.length; i++)\r\n            {\r\n                if(_beneficiarys[i] == msg.sender)\r\n                {\r\n                    _beneficiarys[i] = newaddr;\r\n                    _beneficiary_total[newaddr] = _beneficiary_total[msg.sender];\r\n                    _beneficiary_total[msg.sender] = 0;\r\n                    _released[newaddr] = _released[msg.sender];\r\n                    _released[msg.sender] = 0;\r\n\r\n                    emit event_change_address(msg.sender,newaddr);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract RPGVestingB {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    address _vestingaddr;\r\n    IERC20 private _token;\r\n    address[] private _beneficiarys;\r\n    uint256 private _total;\r\n    uint256 private _start = 0;\r\n    uint256 constant _duration = 86400;\r\n    uint256 constant _releaseperiod = 180;\r\n    mapping(address => uint256) private _beneficiary_total;\r\n    mapping(address => uint256) private _released;\r\n\r\n    //event\r\n    event event_claimed(address user,uint256 amount);\r\n    event event_change_address(address oldaddr,address newaddr);\r\n\r\n    constructor(address addr) public {\r\n        require(addr != address(0));\r\n\r\n        _vestingaddr = addr;\r\n    }\r\n\r\n    function init(IERC20 token,uint256 total,address[] memory beneficiarys,uint256[] memory amounts) public returns(bool) {\r\n        require(_vestingaddr == msg.sender);\r\n        require(_beneficiarys.length == 0); //run once\r\n\r\n        require(address(token) != address(0));\r\n        require(total > 0);\r\n        require(beneficiarys.length == amounts.length);\r\n\r\n        _token = token;\r\n        _total = total;\r\n\r\n        uint256 all = 0;\r\n        for(uint256 i = 0 ; i < amounts.length; i++)\r\n        {\r\n            all = all.add(amounts[i]);\r\n        }\r\n        require(all == _total);\r\n\r\n        _beneficiarys = beneficiarys;\r\n        for(uint256 i = 0 ; i < _beneficiarys.length; i++)\r\n        {\r\n            _beneficiary_total[_beneficiarys[i]] = amounts[i];\r\n            _released[_beneficiarys[i]] = 0;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the tokens.\r\n     */\r\n    function beneficiary() public view returns (address[] memory) {\r\n        return _beneficiarys;\r\n    }\r\n\r\n    /**\r\n     * @return total tokens of the beneficiary address.\r\n     */\r\n    function beneficiarytotal(address addr) public view returns (uint256) {\r\n    \trequire(_beneficiary_total[addr] != 0,'not in beneficiary list');\r\n        return _beneficiary_total[addr];\r\n    }\r\n\r\n    /**\r\n     * @return total of the tokens.\r\n     */\r\n    function total() public view returns (uint256) {\r\n        return _total;\r\n    }\r\n\r\n    /**\r\n     * @return the start time of the token vesting.\r\n     */\r\n    function start() public view returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    function setStart(uint256 newStart) public {\r\n        require(_vestingaddr == msg.sender);\r\n        require(newStart > 0 && _start == 0);\r\n\r\n        _start = newStart;\r\n    }\r\n\r\n    /**\r\n     * @return number to now.\r\n     */\r\n    function calcvesting(address user) public view returns(uint256) {\r\n        require(_start > 0);\r\n        require(block.timestamp >= _start);\r\n        require(_beneficiary_total[user] > 0);\r\n\r\n        uint256 daynum = block.timestamp.sub(_start).div(_duration);\r\n\r\n        uint256 counts180 = daynum.div(_releaseperiod);\r\n        uint256 dayleft = daynum.mod(_releaseperiod);\r\n        uint256 amount180 = 0;\r\n        uint256 thistotal = _beneficiary_total[user].mul(8).div(100);\r\n        for(uint256 i = 0; i< counts180; i++)\r\n        {\r\n            amount180 = amount180.add(thistotal);\r\n            thistotal = thistotal.mul(92).div(100);     //thistotal.mul(100).div(8).mul(92).div(100).mul(8).div(100);     //next is thistotal/(0.08)*0.92*0.08\r\n        }\r\n\r\n        return amount180.add(thistotal.mul(dayleft).div(_releaseperiod));\r\n    }\r\n\r\n    /**\r\n     * claim all the tokens to now\r\n     * @return claim number this time .\r\n     */\r\n    function claim() public returns(uint256) {\r\n        require(_start > 0);\r\n        require(_beneficiary_total[msg.sender] > 0);\r\n\r\n        uint256 amount = calcvesting(msg.sender).sub(_released[msg.sender]);\r\n        if(amount > 0)\r\n        {\r\n            _released[msg.sender] = _released[msg.sender].add(amount);\r\n            _token.safeTransfer(msg.sender,amount);\r\n            emit event_claimed(msg.sender,amount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @return all number has claimed\r\n     */\r\n    function claimed(address user) public view returns(uint256) {\r\n        require(_start > 0);\r\n\r\n        return _released[user];\r\n    }\r\n\r\n    function changeaddress(address oldaddr,address newaddr) public {\r\n        require(_beneficiarys.length > 0);\r\n        require(_beneficiary_total[newaddr] == 0);\r\n\r\n        if(msg.sender == _vestingaddr)\r\n        {\r\n            for(uint256 i = 0 ; i < _beneficiarys.length; i++)\r\n            {\r\n                if(_beneficiarys[i] == oldaddr)\r\n                {\r\n                    _beneficiarys[i] = newaddr;\r\n                    _beneficiary_total[newaddr] = _beneficiary_total[oldaddr];\r\n                    _beneficiary_total[oldaddr] = 0;\r\n                    _released[newaddr] = _released[oldaddr];\r\n                    _released[oldaddr] = 0;\r\n\r\n                    emit event_change_address(oldaddr,newaddr);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            require(msg.sender == oldaddr);\r\n\r\n            for(uint256 i = 0 ; i < _beneficiarys.length; i++)\r\n            {\r\n                if(_beneficiarys[i] == msg.sender)\r\n                {\r\n                    _beneficiarys[i] = newaddr;\r\n                    _beneficiary_total[newaddr] = _beneficiary_total[msg.sender];\r\n                    _beneficiary_total[msg.sender] = 0;\r\n                    _released[newaddr] = _released[msg.sender];\r\n                    _released[msg.sender] = 0;\r\n\r\n                    emit event_change_address(msg.sender,newaddr);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract RPGVestingC {\r\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\r\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\r\n    // it is recommended to avoid using short time durations (less than a minute).\r\n    // solhint-disable not-rely-on-time\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    address _vestingaddr;\r\n\r\n    event event_claimed(address user,uint256 amount);\r\n\r\n    IERC20 private _token;\r\n    uint256 private _total;\r\n    uint256 constant _duration = 86400;\r\n    uint256 constant _releaseperiod = 180;\r\n    uint256 private _released = 0;\r\n\r\n    // beneficiary of tokens after they are released\r\n    address private _beneficiary = address(0);\r\n    uint256 private _start = 0;\r\n\r\n    constructor (address addr) public {\r\n        require(addr != address(0));\r\n\r\n        _vestingaddr = addr;\r\n    }\r\n\r\n    function init(IERC20 token,address beneficiary, uint256 total) public returns(bool){\r\n        require(_vestingaddr == msg.sender);\r\n        require(_beneficiary == address(0));    //run once\r\n\r\n        require(address(token) != address(0));\r\n        require(beneficiary != address(0));\r\n        require(total > 0);\r\n\r\n        _token = token;\r\n        _beneficiary = beneficiary;\r\n        _total = total;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the tokens.\r\n     */\r\n    function beneficiary() public view returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @return the start time of the token vesting.\r\n     */\r\n    function start() public view returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @return total of the tokens.\r\n     */\r\n    function total() public view returns (uint256) {\r\n        return _total;\r\n    }\r\n\r\n    function setStart(uint256 newStart) public {\r\n        require(_vestingaddr == msg.sender);\r\n        require(newStart > 0 && _start == 0);\r\n\r\n        _start = newStart;\r\n    }\r\n\r\n    /**\r\n     * @return number to now.\r\n     */\r\n    function calcvesting() public view returns(uint256) {\r\n        require(_start > 0);\r\n        require(block.timestamp >= _start);\r\n\r\n        uint256 daynum = block.timestamp.sub(_start).div(_duration);\r\n\r\n        uint256 counts180 = daynum.div(_releaseperiod);\r\n        uint256 dayleft = daynum.mod(_releaseperiod);\r\n        uint256 amount180 = 0;\r\n        uint256 thistotal = _total.mul(8).div(100);\r\n        for(uint256 i = 0; i< counts180; i++)\r\n        {\r\n            amount180 = amount180.add(thistotal);\r\n            thistotal = thistotal.mul(92).div(100);         //thistotal.mul(100).div(8).mul(92).div(100).mul(8).div(100);     //next is thistotal/(0.08)*0.92*0.08\r\n        }\r\n\r\n        return amount180.add(thistotal.mul(dayleft).div(_releaseperiod));\r\n    }\r\n\r\n    /**\r\n     * @return number of this claim\r\n     */\r\n    function claim() public returns(uint256) {\r\n        require(_start > 0);\r\n\r\n        uint256 amount = calcvesting().sub(_released);\r\n        if(amount > 0)\r\n        {\r\n            _released = _released.add(amount);\r\n            _token.safeTransfer(_beneficiary,amount);\r\n            emit event_claimed(msg.sender,amount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @return all number has claimed\r\n     */\r\n    function claimed() public view returns(uint256) {\r\n        require(_start > 0);\r\n\r\n        return _released;\r\n    }\r\n}\r\n\r\ncontract RPGVestingD {\r\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\r\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\r\n    // it is recommended to avoid using short time durations (less than a minute).\r\n    // solhint-disable not-rely-on-time\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    address _vestingaddr;\r\n\r\n    event event_claimed(address user,uint256 amount);\r\n\r\n    IERC20 private _token;\r\n    uint256 private _total;\r\n    uint256 constant _duration = 86400;\r\n    uint256 constant _releaseperiod = 180;\r\n    uint256 private _released = 0;\r\n\r\n    // beneficiary of tokens after they are released\r\n    address private _beneficiary = address(0);\r\n    uint256 private _start = 0;\r\n\r\n    constructor (address addr) public {\r\n        require(addr != address(0));\r\n\r\n        _vestingaddr = addr;\r\n\r\n    }\r\n\r\n    function init(IERC20 token,address beneficiary, uint256 total) public returns(bool){\r\n        require(_vestingaddr == msg.sender);\r\n        require(_beneficiary == address(0));    //run once\r\n\r\n        require(address(token) != address(0));\r\n        require(beneficiary != address(0));\r\n        require(total > 0);\r\n\r\n        _token = token;\r\n        _beneficiary = beneficiary;\r\n        _total = total;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the tokens.\r\n     */\r\n    function beneficiary() public view returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @return the start time of the token vesting.\r\n     */\r\n    function start() public view returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @return total of the tokens.\r\n     */\r\n    function total() public view returns (uint256) {\r\n        return _total;\r\n    }\r\n\r\n    function setStart(uint256 newStart) public {\r\n        require(_vestingaddr == msg.sender);\r\n        require(newStart > 0 && _start == 0);\r\n\r\n        _start = newStart;\r\n    }\r\n\r\n    /**\r\n     * @return number to now.\r\n     */\r\n    function calcvesting() public view returns(uint256) {\r\n        require(_start > 0);\r\n        require(block.timestamp >= _start);\r\n\r\n        uint256 daynum = block.timestamp.sub(_start).div(_duration);\r\n\r\n        uint256 counts180 = daynum.div(_releaseperiod);\r\n        uint256 dayleft = daynum.mod(_releaseperiod);\r\n        uint256 amount180 = 0;\r\n        uint256 thistotal = _total.mul(8).div(100);\r\n        for(uint256 i = 0; i< counts180; i++)\r\n        {\r\n            amount180 = amount180.add(thistotal);\r\n            thistotal = thistotal.mul(92).div(100);                //thistotal.mul(100).div(8).mul(92).div(100).mul(8).div(100);     //next is thistotal/(0.08)*0.92*0.08\r\n        }\r\n\r\n        return amount180.add(thistotal.mul(dayleft).div(_releaseperiod));\r\n    }\r\n\r\n    /**\r\n     * @return number of this claim\r\n     */\r\n    function claim() public returns(uint256) {\r\n        require(_start > 0);\r\n\r\n        uint256 amount = calcvesting().sub(_released);\r\n        if(amount > 0)\r\n        {\r\n            _released = _released.add(amount);\r\n            _token.safeTransfer(_beneficiary,amount);\r\n            emit event_claimed(_beneficiary,amount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @return all number has claimed\r\n     */\r\n    function claimed() public view returns(uint256) {\r\n        require(_start > 0);\r\n\r\n        return _released;\r\n    }\r\n\r\n    //it must approve , before call this function\r\n    function changeaddress(address newaddr) public {\r\n        require(_beneficiary != address(0));\r\n        require(msg.sender == _vestingaddr);\r\n\r\n        _token.safeTransferFrom(_beneficiary,newaddr,_token.balanceOf(_beneficiary));\r\n        _beneficiary = newaddr;\r\n    }\r\n}\r\n\r\ncontract RPGVestingE {\r\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\r\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\r\n    // it is recommended to avoid using short time durations (less than a minute).\r\n    // solhint-disable not-rely-on-time\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    address _vestingaddr;\r\n\r\n    event event_claimed(address user,uint256 amount);\r\n\r\n    IERC20 private _token;\r\n    uint256 private _total;\r\n\r\n    // beneficiary of tokens after they are released\r\n    address[3] private _beneficiarys;\r\n\r\n    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\r\n    //uint256 private _phase;\r\n    uint256 private _start = 0;\r\n    //uint256 private _duration;\r\n\r\n    //bool private _revocable;\r\n\r\n    constructor (address addr) public {\r\n        require(addr != address(0));\r\n\r\n        _vestingaddr = addr;\r\n    }\r\n\r\n    function init(IERC20 token,address[3] memory beneficiarys, uint256 total) public returns(bool){\r\n        require(_vestingaddr == msg.sender);\r\n        require(_beneficiarys[0] == address(0),'Initialize only once!');\r\n\r\n        require(address(token) != address(0));\r\n        require(beneficiarys[0] != address(0));\r\n        require(beneficiarys[1] != address(0));\r\n        require(beneficiarys[2] != address(0));\r\n        require(total > 0);\r\n\r\n        _token = token;\r\n        _beneficiarys = beneficiarys;\r\n        _total = total;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the tokens.\r\n     */\r\n    function beneficiary() public view returns (address[3] memory) {\r\n        return _beneficiarys;\r\n    }\r\n\r\n    /**\r\n     * @return the start time of the token vesting.\r\n     */\r\n    function start() public view returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @return total of the tokens.\r\n     */\r\n    function total() public view returns (uint256) {\r\n        return _total;\r\n    }\r\n\r\n    function setStart(uint256 newStart) public {\r\n        require(_vestingaddr == msg.sender);\r\n        require(newStart > 0 && _start == 0);\r\n\r\n        _start = newStart;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens to beneficiary.\r\n     */\r\n    function claim() public returns(uint256){\r\n        require(_start > 0);\r\n\r\n        _token.safeTransfer(_beneficiarys[0], _total.mul(8).div(20));\r\n        emit event_claimed(_beneficiarys[0],_total.mul(8).div(20));\r\n\r\n        _token.safeTransfer(_beneficiarys[1], _total.mul(7).div(20));\r\n        emit event_claimed(_beneficiarys[1],_total.mul(7).div(20));\r\n\r\n        _token.safeTransfer(_beneficiarys[2], _total.mul(5).div(20));\r\n        emit event_claimed(_beneficiarys[2],_total.mul(5).div(20));\r\n        return _total;\r\n    }\r\n\r\n    /**\r\n     * @return all number has claimed\r\n     */\r\n    function claimed() public view returns(uint256) {\r\n        require(_start > 0);\r\n\r\n        uint256 amount0 = _token.balanceOf(_beneficiarys[0]);\r\n        uint256 amount1 = _token.balanceOf(_beneficiarys[1]);\r\n        uint256 amount2 = _token.balanceOf(_beneficiarys[2]);\r\n        return amount0.add(amount1).add(amount2);\r\n    }\r\n\r\n}\r\n\r\ncontract RPGVestingF is Ownable{\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    //address _vestingaddr;\r\n    IERC20 private _token;\r\n    uint256 private _total;\r\n    uint256 private _start = 0;\r\n    address[] private _beneficiarys;\r\n    uint256 constant _duration = 86400;\r\n    uint256 _releasealldays;\r\n    mapping(address => uint256) private _beneficiary_total;\r\n    mapping(address => uint256) private _released;\r\n\r\n    //event\r\n    event event_set_can_claim();\r\n    event event_claimed(address user,uint256 amount);\r\n    event event_change_address(address oldaddr,address newaddr);\r\n\r\n    constructor(uint256 releasealldays) public {\r\n        require(releasealldays > 0);\r\n\t\t    _releasealldays = releasealldays;\r\n    }\r\n\r\n    function init(IERC20 token, uint256 total,address[] calldata beneficiarys,uint256[] calldata amounts) external onlyOwner returns(bool) {\r\n        //require(_vestingaddr == msg.sender);\r\n        require(_beneficiarys.length == 0);     //run once\r\n\r\n        require(address(token) != address(0));\r\n        require(total > 0);\r\n        require(beneficiarys.length == amounts.length);\r\n\r\n        _token = token;\r\n        _total = total;\r\n\r\n        uint256 all = 0;\r\n        for(uint256 i = 0 ; i < amounts.length; i++)\r\n        {\r\n            all = all.add(amounts[i]);\r\n        }\r\n        require(all == _total);\r\n\r\n        _beneficiarys = beneficiarys;\r\n        for(uint256 i = 0 ; i < _beneficiarys.length; i++)\r\n        {\r\n            _beneficiary_total[_beneficiarys[i]] = amounts[i];\r\n            _released[_beneficiarys[i]] = 0;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setStart(uint256 newStart) external onlyOwner{\r\n        //require(_vestingaddr == msg.sender);\r\n        require(newStart > block.timestamp && _start == 0);\r\n\r\n        _start = newStart;\r\n    }\r\n\r\n    /**\r\n    * @return the start time of the token vesting.\r\n    */\r\n    function start() public view returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the tokens.\r\n     */\r\n    function beneficiary() public view returns (address[] memory) {\r\n        return _beneficiarys;\r\n    }\r\n\r\n    /**\r\n     * @return total tokens of the beneficiary address.\r\n     */\r\n    function beneficiarytotal(address addr) public view returns (uint256) {\r\n    \trequire(_beneficiary_total[addr] != 0,'not in beneficiary list');\r\n        return _beneficiary_total[addr];\r\n    }\r\n\r\n    /**\r\n     * @return total of the tokens.\r\n     */\r\n    function total() public view returns (uint256) {\r\n        return _total;\r\n    }\r\n\r\n    /**\r\n     * @return total number can release to now.\r\n     */\r\n    function calcvesting(address user) public view returns(uint256) {\r\n        require(_start > 0);\r\n        require(block.timestamp >= _start);\r\n        require(_beneficiary_total[user] > 0);\r\n\r\n        uint256 daynum = block.timestamp.sub(_start).div(_duration);\r\n\r\n        if(daynum <= _releasealldays)\r\n        {\r\n            return _beneficiary_total[user].mul(daynum).div(_releasealldays);\r\n        }\r\n        else\r\n        {\r\n            return _beneficiary_total[user];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * claim all the tokens to now\r\n     * @return claim number this time .\r\n     */\r\n    function claim() external returns(uint256) {\r\n        require(_start > 0);\r\n        require(_beneficiary_total[msg.sender] > 0);\r\n\r\n        uint256 amount = calcvesting(msg.sender).sub(_released[msg.sender]);\r\n        if(amount > 0)\r\n        {\r\n            _released[msg.sender] = _released[msg.sender].add(amount);\r\n            _token.safeTransfer(msg.sender,amount);\r\n            emit event_claimed(msg.sender,amount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @return all number has claimed\r\n     */\r\n    function claimed(address user) public view returns(uint256) {\r\n        require(_start > 0);\r\n\r\n        return _released[user];\r\n    }\r\n\r\n    function changeaddress(address oldaddr,address newaddr) external {\r\n        require(newaddr != address(0));\r\n        require(_beneficiarys.length > 0);\r\n        require(_beneficiary_total[newaddr] == 0);\r\n\r\n        //if(msg.sender == _vestingaddr)\r\n        if(isOwner())\r\n        {\r\n            for(uint256 i = 0 ; i < _beneficiarys.length; i++)\r\n            {\r\n                if(_beneficiarys[i] == oldaddr)\r\n                {\r\n                    _beneficiarys[i] = newaddr;\r\n                    _beneficiary_total[newaddr] = _beneficiary_total[oldaddr];\r\n                    _beneficiary_total[oldaddr] = 0;\r\n                    _released[newaddr] = _released[oldaddr];\r\n                    _released[oldaddr] = 0;\r\n        \r\n                    emit event_change_address(oldaddr,newaddr);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            require(msg.sender == oldaddr);\r\n\r\n            for(uint256 i = 0 ; i < _beneficiarys.length; i++)\r\n            {\r\n                if(_beneficiarys[i] == msg.sender)\r\n                {\r\n                    _beneficiarys[i] = newaddr;\r\n                    _beneficiary_total[newaddr] = _beneficiary_total[msg.sender];\r\n                    _beneficiary_total[msg.sender] = 0;\r\n                    _released[newaddr] = _released[msg.sender];\r\n                    _released[msg.sender] = 0;\r\n\r\n                    emit event_change_address(msg.sender,newaddr);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity 0.5.17;\r\n\r\ninterface IPLPS {\r\n    function LiquidityProtection_beforeTokenTransfer(\r\n        address _pool, address _from, address _to, uint _amount) external;\r\n    function isBlocked(address _pool, address _who) external view returns(bool);\r\n    function unblock(address _pool, address[] calldata _whos) external;\r\n}\r\n\r\npragma solidity 0.5.17;\r\n\r\n// Exempt from the original UniswapV2Library.\r\nlibrary UniswapV2Library {\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(bytes32 initCodeHash, address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                initCodeHash // init code hash\r\n            )))));\r\n    }\r\n}\r\n\r\npragma solidity 0.5.17;\r\n\r\n/// @notice based on https://github.com/Uniswap/uniswap-v3-periphery/blob/v1.0.0/contracts/libraries/PoolAddress.sol\r\n/// @notice changed compiler version and lib name.\r\n\r\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\r\nlibrary UniswapV3Library {\r\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\r\n\r\n    /// @notice The identifying key of the pool\r\n    struct PoolKey {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n    }\r\n\r\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\r\n    /// @param tokenA The first token of a pool, unsorted\r\n    /// @param tokenB The second token of a pool, unsorted\r\n    /// @param fee The fee level of the pool\r\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\r\n    function getPoolKey(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) internal pure returns (PoolKey memory) {\r\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\r\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\r\n    }\r\n\r\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\r\n    /// @param factory The Uniswap V3 factory contract address\r\n    /// @param key The PoolKey\r\n    /// @return pool The contract address of the V3 pool\r\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\r\n        require(key.token0 < key.token1);\r\n        pool = address(\r\n            uint160(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            hex'ff',\r\n                            factory,\r\n                            keccak256(abi.encode(key.token0, key.token1, key.fee)),\r\n                            POOL_INIT_CODE_HASH\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract UsingLiquidityProtectionService {\r\n    bool private unProtected = false;\r\n    IPLPS private plps;\r\n    uint64 internal constant HUNDRED_PERCENT = 1e18;\r\n    bytes32 internal constant UNISWAP = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\r\n    bytes32 internal constant PANCAKESWAP = 0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5;\r\n    bytes32 internal constant QUICKSWAP = 0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f;\r\n\r\n    enum UniswapVersion {\r\n        V2,\r\n        V3\r\n    }\r\n\r\n    enum UniswapV3Fees {\r\n        _005, // 0.05%\r\n        _03, // 0.3%\r\n        _1 // 1%\r\n    }\r\n\r\n    modifier onlyProtectionAdmin() {\r\n        protectionAdminCheck();\r\n        _;\r\n    }\r\n\r\n    constructor (address _plps) public {\r\n        plps = IPLPS(_plps);\r\n    }\r\n\r\n    function LiquidityProtection_setLiquidityProtectionService(IPLPS _plps) external onlyProtectionAdmin() {\r\n        plps = _plps;\r\n    }\r\n\r\n    function token_transfer(address from, address to, uint amount) internal;\r\n    function token_balanceOf(address holder) internal view returns(uint);\r\n    function protectionAdminCheck() internal view;\r\n    function uniswapVariety() internal pure returns(bytes32);\r\n    function uniswapVersion() internal pure returns(UniswapVersion);\r\n    function uniswapFactory() internal pure returns(address);\r\n    function counterToken() internal pure returns(address) {\r\n        return 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // BUSD\r\n    }\r\n    function uniswapV3Fee() internal pure returns(UniswapV3Fees) {\r\n        return UniswapV3Fees._03;\r\n    }\r\n    function protectionChecker() internal view returns(bool) {\r\n        return ProtectionSwitch_manual();\r\n    }\r\n\r\n    function lps() private view returns(IPLPS) {\r\n        return plps;\r\n    }\r\n\r\n    function LiquidityProtection_beforeTokenTransfer(address _from, address _to, uint _amount) internal {\r\n        if (protectionChecker()) {\r\n            if (unProtected) {\r\n                return;\r\n            }\r\n            lps().LiquidityProtection_beforeTokenTransfer(getLiquidityPool(), _from, _to, _amount);\r\n        }\r\n    }\r\n\r\n    function revokeBlocked(address[] calldata _holders, address _revokeTo) external onlyProtectionAdmin() {\r\n        require(isProtected(), 'UsingLiquidityProtectionService: protection removed');\r\n        bool unProtectedOld = unProtected;\r\n        unProtected = true;\r\n        address pool = getLiquidityPool();\r\n        for (uint i = 0; i < _holders.length; i++) {\r\n            address holder = _holders[i];\r\n            if (lps().isBlocked(pool, holder)) {\r\n                token_transfer(holder, _revokeTo, token_balanceOf(holder));\r\n            }\r\n        }\r\n        unProtected = unProtectedOld;\r\n    }\r\n\r\n    function LiquidityProtection_unblock(address[] calldata _holders) external onlyProtectionAdmin() {\r\n        require(protectionChecker(), 'UsingLiquidityProtectionService: protection removed');\r\n        address pool = getLiquidityPool();\r\n        lps().unblock(pool, _holders);\r\n    }\r\n\r\n    function disableProtection() external onlyProtectionAdmin() {\r\n        unProtected = true;\r\n    }\r\n\r\n    function isProtected() public view returns(bool) {\r\n        return not(unProtected);\r\n    }\r\n\r\n    function ProtectionSwitch_manual() internal view returns(bool) {\r\n        return isProtected();\r\n    }\r\n\r\n    function ProtectionSwitch_timestamp(uint _timestamp) internal view returns(bool) {\r\n        return not(passed(_timestamp));\r\n    }\r\n\r\n    function ProtectionSwitch_block(uint _block) internal view returns(bool) {\r\n        return not(blockPassed(_block));\r\n    }\r\n\r\n    function blockPassed(uint _block) internal view returns(bool) {\r\n        return _block < block.number;\r\n    }\r\n\r\n    function passed(uint _timestamp) internal view returns(bool) {\r\n        return _timestamp < block.timestamp;\r\n    }\r\n\r\n    function not(bool _condition) internal pure returns(bool) {\r\n        return !_condition;\r\n    }\r\n\r\n    function feeToUint24(UniswapV3Fees _fee) internal pure returns(uint24) {\r\n        if (_fee == UniswapV3Fees._03) return 3000;\r\n        if (_fee == UniswapV3Fees._005) return 500;\r\n        return 10000;\r\n    }\r\n\r\n    function getLiquidityPool() public view returns(address) {\r\n        if (uniswapVersion() == UniswapVersion.V2) {\r\n            return UniswapV2Library.pairFor(uniswapVariety(), uniswapFactory(), address(this), counterToken());\r\n        }\r\n        require(uniswapVariety() == UNISWAP, 'LiquidityProtection: uniswapVariety() can only be UNISWAP for V3.');\r\n        return UniswapV3Library.computeAddress(uniswapFactory(),\r\n            UniswapV3Library.getPoolKey(address(this), counterToken(), feeToUint24(uniswapV3Fee())));\r\n    }\r\n}\r\n\r\npragma solidity 0.5.17;\r\n\r\ncontract RPGTokenWithProtection is\r\nUsingLiquidityProtectionService(0x90990bDe88B2E5fD61365d16BaAe9C4a2b9500ce),\r\nRPG\r\n{\r\n    constructor(string memory _name, string memory _symbol) RPG(_name, _symbol) public {\r\n    }\r\n\r\n    function token_transfer(address _from, address _to, uint _amount) internal {\r\n        _transfer(_from, _to, _amount); // Expose low-level token transfer function.\r\n    }\r\n    function token_balanceOf(address _holder) internal view returns(uint) {\r\n        return balanceOf(_holder); // Expose balance check function.\r\n    }\r\n    function protectionAdminCheck() internal view onlyOwner {} // Must revert to deny access.\r\n    function uniswapVariety() internal pure returns(bytes32) {\r\n        return PANCAKESWAP; // UNISWAP / PANCAKESWAP / QUICKSWAP.\r\n    }\r\n    function uniswapVersion() internal pure returns(UniswapVersion) {\r\n        return UniswapVersion.V2; // V2 or V3.\r\n    }\r\n    function uniswapFactory() internal pure returns(address) {\r\n        return 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73; // Replace with the correct address.\r\n    }\r\n    function _transfer(address _from, address _to, uint _amount) internal {\r\n        LiquidityProtection_beforeTokenTransfer(_from, _to, _amount);\r\n        super._transfer(_from, _to, _amount);\r\n    }\r\n    // All the following overrides are optional, if you want to modify default behavior.\r\n\r\n    // How the protection gets disabled.\r\n    function protectionChecker() internal view returns(bool) {\r\n        return ProtectionSwitch_timestamp(1636675199); // Switch off protection on Thursday, November 11, 2021 11:59:59 PM GMT.\r\n        // return ProtectionSwitch_block(13000000); // Switch off protection on block 13000000.\r\n        //        return ProtectionSwitch_manual(); // Switch off protection by calling disableProtection(); from owner. Default.\r\n    }\r\n\r\n    // This token will be pooled in pair with:\r\n    function counterToken() internal pure returns(address) {\r\n        return 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // BUSD\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BurnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BurnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IPLPS\",\"name\":\"_plps\",\"type\":\"address\"}],\"name\":\"LiquidityProtection_setLiquidityProtectionService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"LiquidityProtection_unblock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnContract\",\"outputs\":[{\"internalType\":\"contract RPGBurn\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableProtection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLiquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBurner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isProtected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_revokeTo\",\"type\":\"address\"}],\"name\":\"revokeBlocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"setTransferLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RPGTokenWithProtection", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001452616e676572732050726f746f636f6c2047617300000000000000000000000000000000000000000000000000000000000000000000000000000000000000035250470000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "BSD-2-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://aa225cb0a5bfea9c7fe9b877dca54d930872d186079c86dd5a31216c0278e603"}