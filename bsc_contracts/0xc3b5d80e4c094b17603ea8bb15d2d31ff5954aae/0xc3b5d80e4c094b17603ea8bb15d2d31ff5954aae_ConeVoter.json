{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/vote/ConeVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../interface/IVe.sol\\\";\\nimport \\\"../../interface/IVoter.sol\\\";\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IERC721.sol\\\";\\nimport \\\"../../interface/IGauge.sol\\\";\\nimport \\\"../../interface/IFactory.sol\\\";\\nimport \\\"../../interface/IPair.sol\\\";\\nimport \\\"../../interface/IBribeFactory.sol\\\";\\nimport \\\"../../interface/IGaugeFactory.sol\\\";\\nimport \\\"../../interface/IMinter.sol\\\";\\nimport \\\"../../interface/IBribe.sol\\\";\\nimport \\\"../../interface/IMultiRewardsPool.sol\\\";\\nimport \\\"../Reentrancy.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\n\\ncontract ConeVoter is IVoter, Reentrancy {\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev The ve token that governs these contracts\\n  address public immutable override ve;\\n  /// @dev ConeFactory\\n  address public immutable factory;\\n  address public immutable token;\\n  address public immutable gaugeFactory;\\n  address public immutable bribeFactory;\\n  /// @dev Rewards are released over 7 days\\n  uint internal constant DURATION = 7 days;\\n  /// @dev Delay period for votes. 6 days for keep compatibility.\\n  uint internal constant VOTE_DELAY = 6 days;\\n  address public minter;\\n\\n  /// @dev Total voting weight\\n  uint public totalWeight;\\n\\n  /// @dev All pools viable for incentives\\n  address[] public pools;\\n  /// @dev pool => gauge\\n  mapping(address => address) public gauges;\\n  /// @dev gauge => pool\\n  mapping(address => address) public poolForGauge;\\n  /// @dev gauge => bribe\\n  mapping(address => address) public bribes;\\n  /// @dev pool => weight\\n  mapping(address => int256) public weights;\\n  /// @dev nft => pool => votes\\n  mapping(uint => mapping(address => int256)) public votes;\\n  /// @dev nft => pools\\n  mapping(uint => address[]) public poolVote;\\n  /// @dev nft => total voting weight of user\\n  mapping(uint => uint) public usedWeights;\\n  mapping(address => bool) public isGauge;\\n  mapping(address => bool) public isWhitelisted;\\n\\n  uint public index;\\n  mapping(address => uint) public supplyIndex;\\n  mapping(address => uint) public claimable;\\n  mapping(uint => uint) public lastVote;\\n\\n  event GaugeCreated(address indexed gauge, address creator, address indexed bribe, address indexed pool);\\n  event Voted(address indexed voter, uint tokenId, int256 weight);\\n  event Abstained(uint tokenId, int256 weight);\\n  event Deposit(address indexed lp, address indexed gauge, uint tokenId, uint amount);\\n  event Withdraw(address indexed lp, address indexed gauge, uint tokenId, uint amount);\\n  event NotifyReward(address indexed sender, address indexed reward, uint amount);\\n  event DistributeReward(address indexed sender, address indexed gauge, uint amount);\\n  event Attach(address indexed owner, address indexed gauge, uint tokenId);\\n  event Detach(address indexed owner, address indexed gauge, uint tokenId);\\n  event Whitelisted(address indexed whitelister, address indexed token);\\n\\n  constructor(address _ve, address _factory, address _gaugeFactory, address _bribeFactory) {\\n    ve = _ve;\\n    factory = _factory;\\n    token = IVe(_ve).token();\\n    gaugeFactory = _gaugeFactory;\\n    bribeFactory = _bribeFactory;\\n    minter = msg.sender;\\n  }\\n\\n  function initialize(address[] memory _tokens, address _minter) external {\\n    require(msg.sender == minter, \\\"!minter\\\");\\n    for (uint i = 0; i < _tokens.length; i++) {\\n      _whitelist(_tokens[i]);\\n    }\\n    minter = _minter;\\n  }\\n\\n  /// @dev Amount of tokens required to be hold for whitelisting.\\n  function listingFee() external view returns (uint) {\\n    return _listingFee();\\n  }\\n\\n  /// @dev 0.5% of circulation supply.\\n  function _listingFee() internal view returns (uint) {\\n    return (IERC20(token).totalSupply() - IERC20(ve).totalSupply()) / 200;\\n  }\\n\\n  /// @dev Remove all votes for given tokenId.\\n  function reset(uint _tokenId) external {\\n    require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n    _reset(_tokenId);\\n    IVe(ve).abstain(_tokenId);\\n  }\\n\\n  function _reset(uint _tokenId) internal {\\n    address[] storage _poolVote = poolVote[_tokenId];\\n    uint _poolVoteCnt = _poolVote.length;\\n    int256 _totalWeight = 0;\\n\\n    for (uint i = 0; i < _poolVoteCnt; i ++) {\\n      address _pool = _poolVote[i];\\n      int256 _votes = votes[_tokenId][_pool];\\n      _updateFor(gauges[_pool]);\\n      weights[_pool] -= _votes;\\n      votes[_tokenId][_pool] -= _votes;\\n      if (_votes > 0) {\\n        IBribe(bribes[gauges[_pool]])._withdraw(uint(_votes), _tokenId);\\n        _totalWeight += _votes;\\n      } else {\\n        _totalWeight -= _votes;\\n      }\\n      emit Abstained(_tokenId, _votes);\\n    }\\n    totalWeight -= uint(_totalWeight);\\n    usedWeights[_tokenId] = 0;\\n    delete poolVote[_tokenId];\\n  }\\n\\n  /// @dev Resubmit exist votes for given token. For internal purposes.\\n  function poke(uint _tokenId) external {\\n    address[] memory _poolVote = poolVote[_tokenId];\\n    uint _poolCnt = _poolVote.length;\\n    int256[] memory _weights = new int256[](_poolCnt);\\n\\n    for (uint i = 0; i < _poolCnt; i ++) {\\n      _weights[i] = votes[_tokenId][_poolVote[i]];\\n    }\\n\\n    _vote(_tokenId, _poolVote, _weights);\\n  }\\n\\n  function _vote(uint _tokenId, address[] memory _poolVote, int256[] memory _weights) internal {\\n    _reset(_tokenId);\\n    uint _poolCnt = _poolVote.length;\\n    int256 _weight = int256(IVe(ve).balanceOfNFT(_tokenId));\\n    int256 _totalVoteWeight = 0;\\n    int256 _totalWeight = 0;\\n    int256 _usedWeight = 0;\\n\\n    for (uint i = 0; i < _poolCnt; i++) {\\n      _totalVoteWeight += _weights[i] > 0 ? _weights[i] : - _weights[i];\\n    }\\n\\n    for (uint i = 0; i < _poolCnt; i++) {\\n      address _pool = _poolVote[i];\\n      address _gauge = gauges[_pool];\\n\\n      int256 _poolWeight = _weights[i] * _weight / _totalVoteWeight;\\n      require(votes[_tokenId][_pool] == 0, \\\"duplicate pool\\\");\\n      require(_poolWeight != 0, \\\"zero power\\\");\\n      _updateFor(_gauge);\\n\\n      poolVote[_tokenId].push(_pool);\\n\\n      weights[_pool] += _poolWeight;\\n      votes[_tokenId][_pool] += _poolWeight;\\n      if (_poolWeight > 0) {\\n        IBribe(bribes[_gauge])._deposit(uint(_poolWeight), _tokenId);\\n      } else {\\n        _poolWeight = - _poolWeight;\\n      }\\n      _usedWeight += _poolWeight;\\n      _totalWeight += _poolWeight;\\n      emit Voted(msg.sender, _tokenId, _poolWeight);\\n    }\\n    if (_usedWeight > 0) IVe(ve).voting(_tokenId);\\n    totalWeight += uint(_totalWeight);\\n    usedWeights[_tokenId] = uint(_usedWeight);\\n  }\\n\\n  /// @dev Vote for given pools using a vote power of given tokenId. Reset previous votes.\\n  function vote(uint tokenId, address[] calldata _poolVote, int256[] calldata _weights) external {\\n    require(IVe(ve).isApprovedOrOwner(msg.sender, tokenId), \\\"!owner\\\");\\n    require(_poolVote.length == _weights.length, \\\"!arrays\\\");\\n    require(lastVote[tokenId] + VOTE_DELAY < block.timestamp, \\\"delay\\\");\\n    _vote(tokenId, _poolVote, _weights);\\n    lastVote[tokenId] = block.timestamp;\\n  }\\n\\n  /// @dev Add token to whitelist. Only pools with whitelisted tokens can be added to gauge.\\n  function whitelist(address _token, uint _tokenId) external {\\n    require(_tokenId > 0, \\\"!token\\\");\\n    require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\n    require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\n    _whitelist(_token);\\n  }\\n\\n  function _whitelist(address _token) internal {\\n    require(!isWhitelisted[_token], \\\"already whitelisted\\\");\\n    isWhitelisted[_token] = true;\\n    emit Whitelisted(msg.sender, _token);\\n  }\\n\\n  /// @dev Add a token to a gauge/bribe as possible reward.\\n  function registerRewardToken(address _token, address _gaugeOrBribe, uint _tokenId) external {\\n    require(_tokenId > 0, \\\"!token\\\");\\n    require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\n    require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\n    IMultiRewardsPool(_gaugeOrBribe).registerRewardToken(_token);\\n  }\\n\\n  /// @dev Remove a token from a gauge/bribe allowed rewards list.\\n  function removeRewardToken(address _token, address _gaugeOrBribe, uint _tokenId) external {\\n    require(_tokenId > 0, \\\"!token\\\");\\n    require(msg.sender == IERC721(ve).ownerOf(_tokenId), \\\"!owner\\\");\\n    require(IVe(ve).balanceOfNFT(_tokenId) > _listingFee(), \\\"!power\\\");\\n    IMultiRewardsPool(_gaugeOrBribe).removeRewardToken(_token);\\n  }\\n\\n  /// @dev Create gauge for given pool. Only for a pool with whitelisted tokens.\\n  function createGauge(address _pool) external returns (address) {\\n    require(gauges[_pool] == address(0x0), \\\"exists\\\");\\n    require(IFactory(factory).isPair(_pool), \\\"!pool\\\");\\n    (address tokenA, address tokenB) = IPair(_pool).tokens();\\n    require(isWhitelisted[tokenA] && isWhitelisted[tokenB], \\\"!whitelisted\\\");\\n\\n    address[] memory allowedRewards = new address[](3);\\n    allowedRewards[0] = tokenA;\\n    allowedRewards[1] = tokenB;\\n    if (token != tokenA && token != tokenB) {\\n      allowedRewards[2] = token;\\n    }\\n\\n    address _bribe = IBribeFactory(bribeFactory).createBribe(allowedRewards);\\n    address _gauge = IGaugeFactory(gaugeFactory).createGauge(_pool, _bribe, ve, allowedRewards);\\n    IERC20(token).safeIncreaseAllowance(_gauge, type(uint).max);\\n    bribes[_gauge] = _bribe;\\n    gauges[_pool] = _gauge;\\n    poolForGauge[_gauge] = _pool;\\n    isGauge[_gauge] = true;\\n    _updateFor(_gauge);\\n    pools.push(_pool);\\n    emit GaugeCreated(_gauge, msg.sender, _bribe, _pool);\\n    return _gauge;\\n  }\\n\\n  /// @dev A gauge should be able to attach a token for preventing transfers/withdraws.\\n  function attachTokenToGauge(uint tokenId, address account) external override {\\n    require(isGauge[msg.sender], \\\"!gauge\\\");\\n    if (tokenId > 0) {\\n      IVe(ve).attachToken(tokenId);\\n    }\\n    emit Attach(account, msg.sender, tokenId);\\n  }\\n\\n  /// @dev Emit deposit event for easily handling external actions.\\n  function emitDeposit(uint tokenId, address account, uint amount) external override {\\n    require(isGauge[msg.sender], \\\"!gauge\\\");\\n    emit Deposit(account, msg.sender, tokenId, amount);\\n  }\\n\\n  /// @dev Detach given token.\\n  function detachTokenFromGauge(uint tokenId, address account) external override {\\n    require(isGauge[msg.sender], \\\"!gauge\\\");\\n    if (tokenId > 0) {\\n      IVe(ve).detachToken(tokenId);\\n    }\\n    emit Detach(account, msg.sender, tokenId);\\n  }\\n\\n  /// @dev Emit withdraw event for easily handling external actions.\\n  function emitWithdraw(uint tokenId, address account, uint amount) external override {\\n    require(isGauge[msg.sender], \\\"!gauge\\\");\\n    emit Withdraw(account, msg.sender, tokenId, amount);\\n  }\\n\\n  /// @dev Length of pools\\n  function poolsLength() external view returns (uint) {\\n    return pools.length;\\n  }\\n\\n  /// @dev Add rewards to this contract. Usually it is ConeMinter.\\n  function notifyRewardAmount(uint amount) external override {\\n    require(amount != 0, \\\"zero amount\\\");\\n    uint _totalWeight = totalWeight;\\n    // without votes rewards can not be added\\n    require(_totalWeight != 0, \\\"!weights\\\");\\n    // transfer the distro in\\n    IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n    // 1e18 adjustment is removed during claim\\n    uint _ratio = amount * 1e18 / _totalWeight;\\n    if (_ratio > 0) {\\n      index += _ratio;\\n    }\\n    emit NotifyReward(msg.sender, token, amount);\\n  }\\n\\n  /// @dev Update given gauges.\\n  function updateFor(address[] memory _gauges) external {\\n    for (uint i = 0; i < _gauges.length; i++) {\\n      _updateFor(_gauges[i]);\\n    }\\n  }\\n\\n  /// @dev Update gauges by indexes in a range.\\n  function updateForRange(uint start, uint end) public {\\n    for (uint i = start; i < end; i++) {\\n      _updateFor(gauges[pools[i]]);\\n    }\\n  }\\n\\n  /// @dev Update all gauges.\\n  function updateAll() external {\\n    updateForRange(0, pools.length);\\n  }\\n\\n  /// @dev Update reward info for given gauge.\\n  function updateGauge(address _gauge) external {\\n    _updateFor(_gauge);\\n  }\\n\\n  function _updateFor(address _gauge) internal {\\n    address _pool = poolForGauge[_gauge];\\n    int256 _supplied = weights[_pool];\\n    if (_supplied > 0) {\\n      uint _supplyIndex = supplyIndex[_gauge];\\n      // get global index for accumulated distro\\n      uint _index = index;\\n      // update _gauge current position to global position\\n      supplyIndex[_gauge] = _index;\\n      // see if there is any difference that need to be accrued\\n      uint _delta = _index - _supplyIndex;\\n      if (_delta > 0) {\\n        // add accrued difference for each supplied token\\n        uint _share = uint(_supplied) * _delta / 1e18;\\n        claimable[_gauge] += _share;\\n      }\\n    } else {\\n      // new users are set to the default global state\\n      supplyIndex[_gauge] = index;\\n    }\\n  }\\n\\n  /// @dev Batch claim rewards from given gauges.\\n  function claimRewards(address[] memory _gauges, address[][] memory _tokens) external {\\n    for (uint i = 0; i < _gauges.length; i++) {\\n      IGauge(_gauges[i]).getReward(msg.sender, _tokens[i]);\\n    }\\n  }\\n\\n  /// @dev Batch claim rewards from given bribe contracts for given tokenId.\\n  function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint _tokenId) external {\\n    require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n    for (uint i = 0; i < _bribes.length; i++) {\\n      IBribe(_bribes[i]).getRewardForOwner(_tokenId, _tokens[i]);\\n    }\\n  }\\n\\n  /// @dev Claim fees from given bribes.\\n  function claimFees(address[] memory _bribes, address[][] memory _tokens, uint _tokenId) external {\\n    require(IVe(ve).isApprovedOrOwner(msg.sender, _tokenId), \\\"!owner\\\");\\n    for (uint i = 0; i < _bribes.length; i++) {\\n      IBribe(_bribes[i]).getRewardForOwner(_tokenId, _tokens[i]);\\n    }\\n  }\\n\\n  /// @dev Move fees from deposited pools to bribes for given gauges.\\n  function distributeFees(address[] memory _gauges) external {\\n    for (uint i = 0; i < _gauges.length; i++) {\\n      IGauge(_gauges[i]).claimFees();\\n    }\\n  }\\n\\n  /// @dev Get emission from minter and notify rewards for given gauge.\\n  function distribute(address _gauge) external override {\\n    _distribute(_gauge);\\n  }\\n\\n  function _distribute(address _gauge) internal lock {\\n    IMinter(minter).updatePeriod();\\n    _updateFor(_gauge);\\n    uint _claimable = claimable[_gauge];\\n    if (_claimable > IMultiRewardsPool(_gauge).left(token) && _claimable / DURATION > 0) {\\n      claimable[_gauge] = 0;\\n      IGauge(_gauge).notifyRewardAmount(token, _claimable);\\n      emit DistributeReward(msg.sender, _gauge, _claimable);\\n    }\\n  }\\n\\n  /// @dev Distribute rewards for all pools.\\n  function distributeAll() external {\\n    uint length = pools.length;\\n    for (uint x; x < length; x++) {\\n      _distribute(gauges[pools[x]]);\\n    }\\n  }\\n\\n  function distributeForPoolsInRange(uint start, uint finish) external {\\n    for (uint x = start; x < finish; x++) {\\n      _distribute(gauges[pools[x]]);\\n    }\\n  }\\n\\n  function distributeForGauges(address[] memory _gauges) external {\\n    for (uint x = 0; x < _gauges.length; x++) {\\n      _distribute(_gauges[x]);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IVe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IVe {\\n\\n  enum DepositType {\\n    DEPOSIT_FOR_TYPE,\\n    CREATE_LOCK_TYPE,\\n    INCREASE_LOCK_AMOUNT,\\n    INCREASE_UNLOCK_TIME,\\n    MERGE_TYPE\\n  }\\n\\n  struct Point {\\n    int128 bias;\\n    int128 slope; // # -dweight / dt\\n    uint ts;\\n    uint blk; // block\\n  }\\n  /* We cannot really do block numbers per se b/c slope is per time, not per block\\n  * and per block could be fairly bad b/c Ethereum changes blocktimes.\\n  * What we can do is to extrapolate ***At functions */\\n\\n  struct LockedBalance {\\n    int128 amount;\\n    uint end;\\n  }\\n\\n  function token() external view returns (address);\\n\\n  function balanceOfNFT(uint) external view returns (uint);\\n\\n  function isApprovedOrOwner(address, uint) external view returns (bool);\\n\\n  function createLockFor(uint, uint, address) external returns (uint);\\n\\n  function userPointEpoch(uint tokenId) external view returns (uint);\\n\\n  function epoch() external view returns (uint);\\n\\n  function userPointHistory(uint tokenId, uint loc) external view returns (Point memory);\\n\\n  function pointHistory(uint loc) external view returns (Point memory);\\n\\n  function checkpoint() external;\\n\\n  function depositFor(uint tokenId, uint value) external;\\n\\n  function attachToken(uint tokenId) external;\\n\\n  function detachToken(uint tokenId) external;\\n\\n  function voting(uint tokenId) external;\\n\\n  function abstain(uint tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IVoter {\\n\\n  function ve() external view returns (address);\\n\\n  function attachTokenToGauge(uint _tokenId, address account) external;\\n\\n  function detachTokenFromGauge(uint _tokenId, address account) external;\\n\\n  function emitDeposit(uint _tokenId, address account, uint amount) external;\\n\\n  function emitWithdraw(uint _tokenId, address account, uint amount) external;\\n\\n  function distribute(address _gauge) external;\\n\\n  function notifyRewardAmount(uint amount) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n  /**\\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n  /**\\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n   */\\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n  /**\\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n   */\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n  /**\\n   * @dev Returns the number of tokens in ``owner``'s account.\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @dev Returns the owner of the `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Transfers `tokenId` token from `from` to `to`.\\n   *\\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n   * The approval is cleared when the token is transferred.\\n   *\\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n   *\\n   * Requirements:\\n   *\\n   * - The caller must own the token or be an approved operator.\\n   * - `tokenId` must exist.\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n   * @dev Returns the account approved for `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n  /**\\n   * @dev Approve or remove `operator` as an operator for the caller.\\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n   *\\n   * Requirements:\\n   *\\n   * - The `operator` cannot be the caller.\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   */\\n  function setApprovalForAll(address operator, bool _approved) external;\\n\\n  /**\\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n   *\\n   * See {setApprovalForAll}\\n   */\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IGauge {\\n\\n  function notifyRewardAmount(address token, uint amount) external;\\n\\n  function getReward(address account, address[] memory tokens) external;\\n\\n  function claimFees() external returns (uint claimed0, uint claimed1);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IFactory {\\n\\n  function isPair(address pair) external view returns (bool);\\n\\n  function getInitializable() external view returns (address, address, bool);\\n\\n  function isPaused() external view returns (bool);\\n\\n  function pairCodeHash() external pure returns (bytes32);\\n\\n  function getPair(address tokenA, address token, bool stable) external view returns (address);\\n\\n  function createPair(address tokenA, address tokenB, bool stable) external returns (address pair);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IPair {\\n\\n  // Structure to capture time period obervations every 30 minutes, used for local oracles\\n  struct Observation {\\n    uint timestamp;\\n    uint reserve0Cumulative;\\n    uint reserve1Cumulative;\\n  }\\n\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n  function burn(address to) external returns (uint amount0, uint amount1);\\n\\n  function mint(address to) external returns (uint liquidity);\\n\\n  function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n\\n  function getAmountOut(uint, address) external view returns (uint);\\n\\n  function claimFees() external returns (uint, uint);\\n\\n  function tokens() external view returns (address, address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function stable() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IBribeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IBribeFactory {\\n  function createBribe(address[] memory _allowedRewardTokens) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IGaugeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IGaugeFactory {\\n  function createGauge(\\n    address _pool,\\n    address _bribe,\\n    address _ve,\\n    address[] memory _allowedRewardTokens\\n  ) external returns (address);\\n\\n  function createGaugeSingle(\\n    address _pool,\\n    address _bribe,\\n    address _ve,\\n    address _voter,\\n    address[] memory _allowedRewardTokens\\n  ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IMinter {\\n\\n  function updatePeriod() external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IBribe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IBribe {\\n\\n  function notifyRewardAmount(address token, uint amount) external;\\n\\n  function _deposit(uint amount, uint tokenId) external;\\n\\n  function _withdraw(uint amount, uint tokenId) external;\\n\\n  function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IMultiRewardsPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IMultiRewardsPool {\\n\\n  function underlying() external view returns (address);\\n\\n  function derivedSupply() external view returns (uint);\\n\\n  function derivedBalances(address account) external view returns (uint);\\n\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address account) external view returns (uint);\\n\\n  function rewardTokens(uint id) external view returns (address);\\n\\n  function isRewardToken(address token) external view returns (bool);\\n\\n  function rewardTokensLength() external view returns (uint);\\n\\n  function derivedBalance(address account) external view returns (uint);\\n\\n  function left(address token) external view returns (uint);\\n\\n  function earned(address token, address account) external view returns (uint);\\n\\n  function registerRewardToken(address token) external;\\n\\n  function removeRewardToken(address token) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/base/Reentrancy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nabstract contract Reentrancy {\\n\\n  /// @dev simple re-entrancy check\\n  uint internal _unlocked = 1;\\n\\n  modifier lock() {\\n    require(_unlocked == 1, \\\"Reentrant call\\\");\\n    _unlocked = 2;\\n    _;\\n    _unlocked = 1;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint value\\n  ) internal {\\n    uint newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n    (bool success, bytes memory returndata) = target.call(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bribeFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"weight\",\"type\":\"int256\"}],\"name\":\"Abstained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Attach\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Detach\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"GaugeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"weight\",\"type\":\"int256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"attachTokenToGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bribes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"createGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"detachTokenFromGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distributeForGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"name\":\"distributeForPoolsInRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGauge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolForGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeOrBribe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"registerRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeOrBribe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"updateFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"updateForRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"updateGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_poolVote\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_weights\",\"type\":\"int256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConeVoter", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d0c1378c177e961d96c06b0e8f6e7841476c81ef0000000000000000000000000efc2d2d054383462f2cd72ea2526ef7687e1016000000000000000000000000ee7ffe79689b3d826c7389b95780f42849fb7019000000000000000000000000fe700d523094cc6c673d78f1446ae0743c89586e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}