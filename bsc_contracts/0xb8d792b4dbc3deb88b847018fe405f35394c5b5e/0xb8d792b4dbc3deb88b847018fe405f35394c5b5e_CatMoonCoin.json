{"SourceCode": "/*\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&,,,&&&@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@&&&&&&&@@@@@@@@@@@@@@@@@@@@@&&*,,&,,*&&&@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@&&*,,*,,&&&&@@@@@@@@@@@@@@@@&&*,,&&&&,,%&&@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@&%&&&%,,,**#&&&&&&&%((,##%%&&&,,&&&&&&,,&&@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@&&&&&&&%,*,,,,*,,,((((,,,,,,,,,,  &&&&%,,&&@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@&&&&&% ,,,&&&&&&&&&&&&&&&&&&&#,     .&&,,&&@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@&&,  #&&&%. .*&&&&&&&&&&&&&&&&&&,     *,&&@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@&&,  &&&*...&&&&&&&&&&&&&&&&&&&&&&&&&     &&@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@&&  &&&.  ,&&&&&&&&&&&&&&&&&&&&&&&&&&&&&    .&&@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@&& .&&*. .&&&&.. #&&&&&&&&&&&&&&&&&&&&&&&&*    &&@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@&& ,&&..    &&,. .&&&&&&&&&&&&&&&&&&&&&&&&&&(    &&@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@&&, &&(      .&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&     &&@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@&& ,&&      .%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&    %&@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@&& *&&    (&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&    #&@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@&& .&&   (&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&    &&@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@&&  &&%  .&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&    &&@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@&&%  &&*. ,&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&    &&@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@&&,  &&%. *&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&    &%(&&@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@&&*  &&&, .&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&   &#   &&@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@&&&   &&&(..%&&&&&&&&&&&&&&&&&&&&&&&&&&  .%    &&&@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@&&%   *&&&%.,&&&&&&&&&&&&&&&&&&&&&&       ,&&&@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@&&&(    &&&&&&&&&&&&&&&&&&&&&,       %&&&@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@&(,&&&,     (%&&&&&%#*        (&&&&@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@&&&&&&%,            .#&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@%      @@@@@@    @@@         @*    @@@.    @@@(      @@@@@      @@@@    @@   \r\n@@         @@@@     @@@         @     @@@    ,@@         @@         @@@    @@   \r\n@@   @@@   @@@,     @@@@@(  .@@@@     @@     @@%   @@@   @@   @@@   @@.    *@   \r\n@.  *@@&(((@@@   %   @@@@   @@@@@     @,     @@   @@@*  *@@   @@%   @@      %   \r\n@   %@@@@@@@@   @%   @@@@   @@@@,     @      @@   @@@   @@   &@@*  ,@@         @\r\n@   @@@@@@@@,   @@   @@@@   @@@@   @     .  (@@   @@@   @@   @@@   @@@         @\r\n@   @@@   @@         @@@,  ,@@@@   @    #   @@#   @@@   @@   @@@   @@   #      @\r\n    @@#   @          &@@   @@@@@   @    @   @@   @@@,  ,@%   @@%   @@   @,     @\r\n@        @    @@@@    @@   @@@@.   @   @@   @@.        @@%        @@@   @@    ,@\r\n\r\n*/\r\n\r\n// CatMoonCoin.com\r\n\r\npragma solidity ^0.8.4;\t\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\ninterface IBEP20 {\t\r\n    function totalSupply() external view returns (uint256);\t\r\n    function balanceOf(address account) external view returns (uint256);\t\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\t\r\n    function allowance(address owner, address spender) external view returns (uint256);\t\r\n    function approve(address spender, uint256 amount) external returns (bool);\t\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\t\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\t\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\t\r\n}\t\r\n\r\nlibrary SafeMath {\t\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        uint256 c = a + b;\t\r\n        require(c >= a, \"SafeMath: addition overflow\");\t\r\n        return c;\t\r\n    }\t\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\t\r\n    }\t\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\t\r\n        require(b <= a, errorMessage);\t\r\n        uint256 c = a - b;\t\r\n        return c;\t\r\n    }\t\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        if (a == 0) {\t\r\n            return 0;\t\r\n        }\t\r\n        uint256 c = a * b;\t\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\t\r\n        return c;\t\r\n    }\t\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        return div(a, b, \"SafeMath: division by zero\");\t\r\n    }\t\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\t\r\n        require(b > 0, errorMessage);\t\r\n        uint256 c = a / b;\t\r\n        return c;\t\r\n    }\t\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\t\r\n    }\t\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\t\r\n        require(b != 0, errorMessage);\t\r\n        return a % b;\t\r\n    }\t\r\n}\r\n\r\ninterface Token {\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\t\r\n    function _msgSender() internal view virtual returns (address) {\t\r\n        return msg.sender;\t\r\n    }\t\r\n    function _msgData() internal view virtual returns (bytes memory) {\t\r\n        this;\r\n        return msg.data;\t\r\n    }\t\r\n}\t\r\n\r\nlibrary Address {\t\r\n    function isContract(address account) internal view returns (bool) {\t\r\n        bytes32 codehash;\t\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\t\r\n        assembly { codehash := extcodehash(account) }\t\r\n        return (codehash != accountHash && codehash != 0x0);\t\r\n    }\t\r\n    function sendValue(address payable recipient, uint256 amount) internal {\t\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\t\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\t\r\n    }\t\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\t\r\n      return functionCall(target, data, \"Address: low-level call failed\");\t\r\n    }\t\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\t\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\t\r\n    }\t\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\t\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\t\r\n    }\t\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\t\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\t\r\n        return _functionCallWithValue(target, data, value, errorMessage);\t\r\n    }\t\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\t\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\t\r\n        if (success) {\t\r\n            return returndata;\t\r\n        } else {\t\t\r\n            if (returndata.length > 0) {\r\n                assembly {\t\r\n                    let returndata_size := mload(returndata)\t\r\n                    revert(add(32, returndata), returndata_size)\t\r\n                }\t\r\n            } else {\t\r\n                revert(errorMessage);\t\r\n            }\t\r\n        }\t\r\n    }\t\r\n}\r\n\r\ninterface IUniswapV2Factory {\t\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\t\r\n    function feeTo() external view returns (address);\t\r\n    function feeToSetter() external view returns (address);\t\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\t\r\n    function allPairs(uint) external view returns (address pair);\t\r\n    function allPairsLength() external view returns (uint);\t\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\t\r\n    function setFeeTo(address) external;\t\r\n    function setFeeToSetter(address) external;\t\r\n}\t\r\n\r\ninterface IUniswapV2Pair {\t\r\n    event Approval(address indexed owner, address indexed spender, uint value);\t\r\n    event Transfer(address indexed from, address indexed to, uint value);\t\r\n    function name() external pure returns (string memory);\t\r\n    function symbol() external pure returns (string memory);\t\r\n    function decimals() external pure returns (uint8);\t\r\n    function totalSupply() external view returns (uint);\t\r\n    function balanceOf(address owner) external view returns (uint);\t\r\n    function allowance(address owner, address spender) external view returns (uint);\t\r\n    function approve(address spender, uint value) external returns (bool);\t\r\n    function transfer(address to, uint value) external returns (bool);\t\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\t\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\t\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\t\r\n    function nonces(address owner) external view returns (uint);\t\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\t\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\t\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\t\r\n    event Swap(\t\r\n        address indexed sender,\t\r\n        uint amount0In,\t\r\n        uint amount1In,\t\r\n        uint amount0Out,\t\r\n        uint amount1Out,\t\r\n        address indexed to\t\r\n    );\t\r\n    event Sync(uint112 reserve0, uint112 reserve1);\t\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\t\r\n    function factory() external view returns (address);\t\r\n    function token0() external view returns (address);\t\r\n    function token1() external view returns (address);\t\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\t\r\n    function price0CumulativeLast() external view returns (uint);\t\r\n    function price1CumulativeLast() external view returns (uint);\t\r\n    function kLast() external view returns (uint);\t\r\n    function mint(address to) external returns (uint liquidity);\t\r\n    function burn(address to) external returns (uint amount0, uint amount1);\t\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\t\r\n    function skim(address to) external;\t\r\n    function sync() external;\t\r\n    function initialize(address, address) external;\t\r\n}\t\r\n\r\ninterface IUniswapV2Router01 {\t\r\n    function factory() external pure returns (address);\t\r\n    function WETH() external pure returns (address);\t\r\n    function addLiquidity(\t\r\n        address tokenA,\t\r\n        address tokenB,\t\r\n        uint amountADesired,\t\r\n        uint amountBDesired,\t\r\n        uint amountAMin,\t\r\n        uint amountBMin,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\t\r\n    function addLiquidityETH(\t\r\n        address token,\t\r\n        uint amountTokenDesired,\t\r\n        uint amountTokenMin,\t\r\n        uint amountETHMin,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\t\r\n    function removeLiquidity(\t\r\n        address tokenA,\t\r\n        address tokenB,\t\r\n        uint liquidity,\t\r\n        uint amountAMin,\t\r\n        uint amountBMin,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external returns (uint amountA, uint amountB);\t\r\n    function removeLiquidityETH(\t\r\n        address token,\t\r\n        uint liquidity,\t\r\n        uint amountTokenMin,\t\r\n        uint amountETHMin,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external returns (uint amountToken, uint amountETH);\t\r\n    function removeLiquidityWithPermit(\t\r\n        address tokenA,\t\r\n        address tokenB,\t\r\n        uint liquidity,\t\r\n        uint amountAMin,\t\r\n        uint amountBMin,\t\r\n        address to,\t\r\n        uint deadline,\t\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\t\r\n    ) external returns (uint amountA, uint amountB);\t\r\n    function removeLiquidityETHWithPermit(\t\r\n        address token,\t\r\n        uint liquidity,\t\r\n        uint amountTokenMin,\t\r\n        uint amountETHMin,\t\r\n        address to,\t\r\n        uint deadline,\t\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\t\r\n    ) external returns (uint amountToken, uint amountETH);\t\r\n    function swapExactTokensForTokens(\t\r\n        uint amountIn,\t\r\n        uint amountOutMin,\t\r\n        address[] calldata path,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external returns (uint[] memory amounts);\t\r\n    function swapTokensForExactTokens(\t\r\n        uint amountOut,\t\r\n        uint amountInMax,\t\r\n        address[] calldata path,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external returns (uint[] memory amounts);\t\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\t\r\n        external\t\r\n        payable\t\r\n        returns (uint[] memory amounts);\t\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\t\r\n        external\t\r\n        returns (uint[] memory amounts);\t\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\t\r\n        external\t\r\n        returns (uint[] memory amounts);\t\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\t\r\n        external\t\r\n        payable\t\r\n        returns (uint[] memory amounts);\t\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\t\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\t\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\t\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\t\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\t\r\n}\t\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\t\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\t\r\n        address token,\t\r\n        uint liquidity,\t\r\n        uint amountTokenMin,\t\r\n        uint amountETHMin,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external returns (uint amountETH);\t\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\t\r\n        address token,\t\r\n        uint liquidity,\t\r\n        uint amountTokenMin,\t\r\n        uint amountETHMin,\t\r\n        address to,\t\r\n        uint deadline,\t\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\t\r\n    ) external returns (uint amountETH);\t\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\t\r\n        uint amountIn,\t\r\n        uint amountOutMin,\t\r\n        address[] calldata path,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external;\t\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\t\r\n        uint amountOutMin,\t\r\n        address[] calldata path,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external payable;\t\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\t\r\n        uint amountIn,\t\r\n        uint amountOutMin,\t\r\n        address[] calldata path,\t\r\n        address to,\t\r\n        uint deadline\t\r\n    ) external;\t\r\n}\r\n\r\ncontract Ownable is Context {\t\r\n    address private _owner;\t\r\n   \taddress payable internal _devWallet;\r\n   \taddress public _Janitor;\r\n    constructor () {\t\r\n        address msgSender = _msgSender();\t\r\n        _owner = msgSender;\t\r\n        emit OwnershipTransferred(address(0), msgSender);\t\r\n    }\t\r\n    function owner() public view returns (address) {\t\r\n        return _owner;\t\r\n    }\t\r\n    modifier onlyOwner() {\t\r\n        require(_owner == _msgSender(), \"Caller is not the owner\");\t\r\n        _;\t\r\n    }\r\n    modifier onlyDev() {\t\r\n        require(_owner == _msgSender() || _devWallet == _msgSender(), \"Caller is not the dev\");\t\r\n        _;\t\r\n    }\r\n    modifier onlyJanitor() {\t\r\n        require(_owner == _msgSender() || _Janitor == _msgSender(), \"Caller is not the janitor\");\t\r\n        _;\t\r\n    }\t\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\t\r\n        emit OwnershipTransferred(_owner, newOwner);\t\r\n        _owner = newOwner;\t\r\n    }\r\n}\r\n\r\n\r\ncontract CatMoonCoin is Context, IBEP20, Ownable {\t\r\n    using SafeMath for uint256;\t\r\n    using Address for address;\t\r\n    mapping (address => uint256) private _rOwned;\t\r\n    mapping (address => uint256) private _tOwned;\t\r\n    mapping (address => mapping (address => uint256)) private _allowances;\t\r\n    mapping (address => bool) private _isExcludedFromFee;\t\r\n    mapping (address => bool) private _isExcluded;\r\n    mapping (address => bool) private _AddressExists;\r\n    address[] private _addressList;\r\n    address[] private _excluded;\r\n    \r\n    uint256 private constant MAX = ~uint256(0);\t\r\n    uint256 private _tTotal = 100000000000 * 10**6 * 10**9; // 100 quadrillion\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\t\r\n    \r\n    uint256 private _tFeeTotal;\t\r\n    string private _name = \"CatMoonCoin.com\";\t\r\n    string private _symbol = \"CATMOON\";\r\n    uint8 private _decimals = 9;\t\r\n    \t\r\n    uint256 public _taxFee = 5;\r\n    uint256 private _previousTaxFee = _taxFee;\t\r\n\t\r\n\tuint256 public _devFee = 4;\r\n    uint256 private _previousDevFee = _devFee;\r\n    \r\n    IUniswapV2Router02 public uniswapV2Router;\t\r\n    address public uniswapV2Pair;\t\r\n    bool public _Launched = false;\r\n    bool public _antiSniper = false;\r\n    bool public _antiDumpEnabled = false;\r\n    \r\n    struct TData {\r\n        uint256 tAmount;\r\n        uint256 tFee;\r\n        uint256 tDev;\r\n        uint256 currentRate;\r\n    }\r\n    \r\n    constructor () {\r\n        _rOwned[_msgSender()] = _rTotal;\t\r\n        addAddress(_msgSender());\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\t\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\t\r\n            .createPair(address(this), _uniswapV2Router.WETH());\t\r\n        uniswapV2Router = _uniswapV2Router;\t\r\n        \r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\t\r\n        \t\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\t\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\t\r\n        return _name;\t\r\n    }\r\n    \r\n    function symbol() public view returns (string memory) {\t\r\n        return _symbol;\t\r\n    }\r\n    \r\n    function decimals() public view returns (uint8) {\t\r\n        return _decimals;\t\r\n    }\r\n    \r\n    function totalSupply() public view override returns (uint256) {\t\r\n        return _tTotal;\t\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\t\r\n        if (_isExcluded[account]) return _tOwned[account];\t\r\n        return tokenFromReflection(_rOwned[account]);\t\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\t\r\n        _transfer(_msgSender(), recipient, amount);\t\r\n        return true;\t\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view override returns (uint256) {\t\r\n        return _allowances[owner][spender];\t\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\t\r\n        _approve(_msgSender(), spender, amount);\t\r\n        return true;\t\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\t\r\n        _transfer(sender, recipient, amount);\t\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"Transfer amount cannot exceed allowance\"));\t\r\n        return true;\t\r\n    }\t\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\t\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\t\r\n        return true;\t\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\t\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"Cannot decrease allowance below zero\"));\t\r\n        return true;\t\r\n    }\r\n    \r\n    function isExcludedFromReward(address account) public view returns (bool) {\t\r\n        return _isExcluded[account];\t\r\n    }\r\n    \r\n    function totalFees() public view returns (uint256) {\t\r\n        return _tFeeTotal;\t\r\n    }\r\n    \r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\t\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\t\r\n        if (!deductTransferFee) {\t\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\t\r\n            return rAmount;\t\r\n        } else {\t\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\t\r\n            return rTransferAmount;\t\r\n        }\t\r\n    }\r\n    \r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\t\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\t\r\n        uint256 currentRate =  _getRate();\t\r\n        return rAmount.div(currentRate);\t\r\n    }\r\n    \r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\t\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tDev) = _getValues(tAmount);\t\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\t\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\t\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);    \r\n\t\t_takeDev(tDev);\r\n        _reflectFee(rFee, tFee);\t\r\n        emit Transfer(sender, recipient, tTransferAmount);\t\r\n    }\r\n\r\n    // Set janitor address, a multi-sig managed by volunteers\r\n    event janitorAddressUpdated(address indexed previous, address indexed adr);\r\n    function janitorSetNewJanitorAddress(address jan) public onlyJanitor() {\r\n        emit janitorAddressUpdated(_Janitor, jan);\t\r\n        _Janitor = jan;\r\n    }\r\n    \r\n    // Rescue foreign tokens accidentally sent to the contract address by rookies\r\n    event tokensRescued(address indexed token, address indexed to, uint amount);\r\n    function janitorRescueForeignTokens(address _tokenAddr, address _to, uint _amount) public onlyJanitor() {\r\n        require(!_Launched , \"Cannot rescue tokens pre-launch\");\t\r\n        emit tokensRescued(_tokenAddr, _to, _amount);\t\r\n        Token(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n    \r\n    // Set receipent address for marketing funds\r\n    event devAddressUpdated(address indexed previous, address indexed adr);\r\n    function devSetNewDevAddress(address payable dev) public onlyDev() {\r\n        emit devAddressUpdated(_devWallet, dev);\t\r\n        _devWallet = dev;\r\n        _isExcludedFromFee[_devWallet] = true;\r\n    }\r\n\r\n    // Liquidates marketing funds in tiny pieces automatically so that payees cannot unintentionally hurt the price by selling all at once    \r\n    event antiDumpToggled(bool enb);\r\n    function devToggleAntiDump(bool enabled) public onlyDev() {\r\n        _antiDumpEnabled = enabled;\r\n        emit antiDumpToggled(enabled);\r\n    }\r\n    \r\n    // Prevents bots from being able to snipe the coin during pre-launch tests\r\n    function devToggleAntiSniper(bool enabled) public onlyDev() {\r\n        require(!_Launched , \"Cannot control anti-sniper post-launch\");\t\r\n        _antiSniper = enabled;\r\n    }\r\n    \r\n    // Toggles everything to their final state before contract ownership is renounced\r\n    event tokenLaunched();\r\n    function devLaunch() public onlyDev() {\t\r\n        _Launched = true;\r\n        _antiSniper = false;\r\n        _antiDumpEnabled = true;\r\n        emit tokenLaunched();\r\n    }\r\n    \r\n    receive() external payable {}\t\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\t\r\n        _rTotal = _rTotal.sub(rFee);\t\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\t\r\n    }\r\n    \r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\t\r\n        (uint256 tTransferAmount, TData memory data) = _getTValues(tAmount);\r\n        data.tAmount = tAmount;\r\n        data.currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(data);\t\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, data.tFee, data.tDev);\t\r\n    }\t\r\n    \r\n    function _getTValues(uint256 tAmount) private view returns (uint256, TData memory) {\t\r\n        uint256 tFee = calculateTaxFee(tAmount);\t\r\n        \r\n\t\tuint256 tDev = calculateDevFee(tAmount);\r\n\t\t\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tDev);\t\r\n        return (tTransferAmount, TData(0, tFee, tDev, 0));\t\r\n    }\t\r\n    \r\n    function _getRValues(TData memory _data) private pure returns (uint256, uint256, uint256) {\t\r\n        uint256 rAmount = _data.tAmount.mul(_data.currentRate);\t\r\n        uint256 rFee = _data.tFee.mul(_data.currentRate);\t\r\n\t\tuint256 rDev = _data.tDev.mul(_data.currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rDev);\t\r\n        return (rAmount, rTransferAmount, rFee);\t\r\n    }\t\r\n    \r\n    function _getRate() private view returns(uint256) {\t\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\t\r\n        return rSupply.div(tSupply);\t\r\n    }\r\n    \r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\t\r\n        uint256 rSupply = _rTotal;\t\r\n        uint256 tSupply = _tTotal;      \t\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\t\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\t\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\t\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\t\r\n        }\t\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\t\r\n        return (rSupply, tSupply);\t\r\n    }\t\r\n    \r\n\tfunction addAddress(address adr) private {\r\n        if(_AddressExists[adr])\r\n            return;\r\n        _AddressExists[adr] = true;\r\n        _addressList.push(adr);\r\n    }\r\n    \r\n    function random() private view returns (uint) {\r\n        return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, block.number)));\r\n    }\r\n    \r\n    function _takeDev(uint256 tDev) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rDev = tDev.mul(currentRate);\r\n\r\n        if (_antiDumpEnabled) {\r\n            swapTokensForEth(rDev);\r\n            _devWallet.transfer(address(this).balance);\r\n        } else {\r\n            _rOwned[_devWallet] = _rOwned[_devWallet].add(rDev);\r\n            if(_isExcluded[_devWallet])\r\n                _tOwned[_devWallet] = _tOwned[_devWallet].add(tDev);\r\n        }\r\n    }\r\n    \r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\t\r\n        path[0] = address(this);\t\r\n        path[1] = uniswapV2Router.WETH();\t\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\t\r\n            tokenAmount,\t\r\n            0,\r\n            path,\t\r\n            address(this),\t\r\n            block.timestamp\t\r\n        );\t\r\n    }\t\r\n\t\r\n\tfunction calculateDevFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_devFee).div(\r\n            10**2\r\n        );\r\n    }\r\n    \r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\t\r\n        return _amount.mul(_taxFee).div(\t\r\n            10**2\t\r\n        );\t\r\n    }\r\n    \r\n    function removeAllFee() private {\t\r\n        if(_taxFee == 0 && _devFee == 0) return;\t\r\n        \t\r\n        _previousTaxFee = _taxFee;\r\n\t\t_previousDevFee = _devFee;\r\n        _taxFee = 0;\r\n\t\t_devFee = 0;\r\n    }\t\r\n    \t\r\n    function restoreAllFee() private {\t\r\n        _taxFee = _previousTaxFee;\t\r\n\t\t_devFee = _previousDevFee;\r\n    }\t\r\n    \t\r\n    function isExcludedFromFee(address account) public view returns(bool) {\t\r\n        return _isExcludedFromFee[account];\t\r\n    }\t\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) private {\t\r\n        require(owner != address(0), \"Cannot approve from the zero address\");\t\r\n        require(spender != address(0), \"Cannot approve to the zero address\");\t\r\n        _allowances[owner][spender] = amount;\t\r\n        emit Approval(owner, spender, amount);\t\r\n    }\t\r\n    function _transfer(\t\r\n        address from,\t\r\n        address to,\t\r\n        uint256 amount\t\r\n    ) private {\t\r\n        require(from != address(0), \"Cannot transfer from the zero address\");\t\r\n        require(to != address(0), \"Cannot transfer to the zero address\");\t\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(amount <= _tTotal, \"Transfer amount must be below the total supply\");\r\n        if(_antiSniper) {\r\n            require(to == _devWallet || to == _Janitor, \"Token isnt launched yet\");\r\n        }\r\n        \r\n        uint256 contractTokenBalance = balanceOf(address(this));\t\r\n        \t\r\n        if(contractTokenBalance >= _tTotal)\t\r\n        {\t\r\n            contractTokenBalance = _tTotal;\t\r\n        }\t\r\n        \t\r\n        bool takeFee = true;\t\r\n        \t\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\t\r\n            takeFee = false;\t\r\n        }\t\r\n        \r\n        addAddress(from);\r\n\t\taddAddress(to);\r\n        \t\r\n        _tokenTransfer(from,to,amount,takeFee);\t\r\n    }\t\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\t\r\n        if(!takeFee)\t\r\n            removeAllFee();\t\r\n        \t\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\t\r\n            _transferFromExcluded(sender, recipient, amount);\t\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\t\r\n            _transferToExcluded(sender, recipient, amount);\t\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\t\r\n            _transferStandard(sender, recipient, amount);\t\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\t\r\n            _transferBothExcluded(sender, recipient, amount);\t\r\n        } else {\t\r\n            _transferStandard(sender, recipient, amount);\t\r\n        }\t\r\n        \t\r\n        if(!takeFee)\t\r\n            restoreAllFee();\t\r\n    }\t\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\t\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tDev) = _getValues(tAmount);\t\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t_takeDev(tDev);\r\n        _reflectFee(rFee, tFee);\t\r\n        emit Transfer(sender, recipient, tTransferAmount);\t\r\n    }\t\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\t\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tDev) = _getValues(tAmount);\t\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\t\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);       \r\n\t\t_takeDev(tDev);\r\n        _reflectFee(rFee, tFee);\t\r\n        emit Transfer(sender, recipient, tTransferAmount);\t\r\n    }\t\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\t\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tDev) = _getValues(tAmount);\t\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\t\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\t\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t_takeDev(tDev);\r\n        _reflectFee(rFee, tFee);\t\r\n        emit Transfer(sender, recipient, tTransferAmount);\t\r\n    }\t\r\n    \t\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enb\",\"type\":\"bool\"}],\"name\":\"antiDumpToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"devAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"janitorAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"tokenLaunched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokensRescued\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_Janitor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_antiDumpEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_antiSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"dev\",\"type\":\"address\"}],\"name\":\"devSetNewDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"devToggleAntiDump\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"devToggleAntiSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"janitorRescueForeignTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"jan\",\"type\":\"address\"}],\"name\":\"janitorSetNewJanitorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CatMoonCoin", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3c1a8cab52e5cc74bd8453aed3d8ef574bedae761c806d1b31e78e4dbec282f8"}