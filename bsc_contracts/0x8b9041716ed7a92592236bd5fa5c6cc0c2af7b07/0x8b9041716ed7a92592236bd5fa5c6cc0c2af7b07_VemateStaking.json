{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.16;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract VemateStaking is Ownable{\r\n\r\n    struct Position {\r\n        uint256 positionId;\r\n        address walletAddress;\r\n        uint256 createdDate;\r\n        uint256 unlockDate;\r\n        uint256 percentInterest;\r\n        uint256 tokenStaked;\r\n        uint256 tokenInterest;\r\n        bool open;\r\n    }\r\n\r\n    address private immutable VMT;\r\n\r\n    uint16[] private lockPeriods;\r\n\r\n    mapping(uint256 => Position) private positions;\r\n    mapping(address => uint256[]) private positionIdsByAddress;\r\n    mapping(uint256 => uint256) private tiers;\r\n\r\n    uint256 public totalStaked;\r\n    uint256 public totalInterest;\r\n    uint256 public currentPositionId;\r\n\r\n    constructor(address vemate) {\r\n        require(vemate != address(0x0),'zero address');\r\n        VMT = vemate;\r\n\r\n        totalStaked = 0;\r\n        totalInterest = 0;\r\n        currentPositionId = 0;\r\n\r\n        tiers[90] = 3;\r\n        tiers[180] = 5;\r\n        tiers[365] = 7;\r\n\r\n        lockPeriods.push(90);\r\n        lockPeriods.push(180);\r\n        lockPeriods.push(365);\r\n    }\r\n\r\n    function stake(uint256 numDays, uint256 tokenAmount) external {\r\n        require(tiers[numDays] > 0, \"Mapping not found\");\r\n        require(IERC20(VMT).balanceOf(_msgSender()) >= tokenAmount, \"Not enough VMT\");\r\n\r\n        uint256 interest = tokenAmount * tiers[numDays] * numDays / 36500;\r\n        require(getAmountLeftForPool() >= interest, \"Not enough VMT left for rewards\");\r\n        require(IERC20(VMT).allowance(_msgSender(), address(this)) >= tokenAmount, \"Please increase allowance\");\r\n\r\n        bool success = IERC20(VMT).transferFrom(_msgSender(), address(this), tokenAmount);\r\n\r\n        if(success){\r\n            positions[currentPositionId] = Position (\r\n                currentPositionId,\r\n                _msgSender(),\r\n                block.timestamp,\r\n                block.timestamp + (numDays * 1 days),\r\n                tiers[numDays],\r\n                tokenAmount,\r\n                interest,\r\n                true\r\n            );\r\n\r\n            positionIdsByAddress[_msgSender()].push(currentPositionId);\r\n            currentPositionId += 1;\r\n            totalStaked += tokenAmount;\r\n            totalInterest += interest;\r\n        }\r\n\r\n    }\r\n\r\n    function modifyLockPeriods(uint16 numDays, uint16 basisPoints) external onlyOwner{\r\n        if(tiers[numDays] == 0){\r\n            lockPeriods.push(numDays);\r\n        }\r\n        tiers[numDays] = basisPoints;\r\n    }\r\n\r\n    function getLockPeriods() external view returns(uint16[] memory){\r\n        return lockPeriods;\r\n    }\r\n\r\n    function getPositionById(uint256 positionId) external view returns(Position memory){\r\n        return positions[positionId];\r\n    }\r\n\r\n    function getPositionIdsForAddress(address walletAddress) external view returns(uint256[] memory) {\r\n        return positionIdsByAddress[walletAddress];\r\n    }\r\n\r\n    function changeLockDate(uint256 positionId, uint256 newUnlockDate) external onlyOwner{\r\n        positions[positionId].unlockDate = newUnlockDate;\r\n    }\r\n\r\n    function getAmountLeftForPool() public view returns(uint256){\r\n        return IERC20(VMT).balanceOf(address(this)) - totalStaked - totalInterest;\r\n    }\r\n\r\n    function getPoolSize() external view returns(uint256){\r\n        return IERC20(VMT).balanceOf(address(this)) - totalStaked;\r\n    }\r\n\r\n    function unstake(uint256 positionId) external returns(bool) {\r\n        require(positions[positionId].walletAddress == _msgSender(), \"Only position creator may modify position\");\r\n        require(positions[positionId].open, \"Already unstaked\");\r\n\r\n        require(block.timestamp > positions[positionId].unlockDate, \"UnlockDate not reached\");\r\n\r\n        uint256 tokenAmount = positions[positionId].tokenStaked;\r\n        uint256 amountWithInterest = tokenAmount + positions[positionId].tokenInterest;\r\n\r\n        totalStaked -= tokenAmount;\r\n        totalInterest -= positions[positionId].tokenInterest;\r\n        positions[positionId].open = false;\r\n\r\n        bool success = IERC20(VMT).transfer(_msgSender(), amountWithInterest);\r\n        return success;\r\n    }\r\n\r\n    function emergencyWithdraw(uint256 positionId) external returns(bool){\r\n        require(positions[positionId].walletAddress == _msgSender(), \"Only position creator may modify position\");\r\n        require(positions[positionId].open, \"Already unstaked\");\r\n        require(positions[positionId].unlockDate > block.timestamp, \"UnlockDate already reached\");\r\n\r\n        uint256 stakedTime = positions[positionId].createdDate;\r\n        uint256 timeDifference = block.timestamp - stakedTime;\r\n\r\n        uint256 amount = positions[positionId].tokenStaked;\r\n        uint256 penalty = checkPenalty(timeDifference, amount);\r\n        uint256 amountAfterPenalty = amount - penalty;\r\n\r\n        totalStaked -= amount;\r\n        totalInterest -= positions[positionId].tokenInterest;\r\n        positions[positionId].open = false;\r\n\r\n        bool success = IERC20(VMT).transfer(_msgSender(), amountAfterPenalty);\r\n        return success;\r\n    }\r\n\r\n    function checkPenalty(uint256 time, uint256 stakedAmount) private pure returns(uint256) {\r\n        uint256 penalty;\r\n        uint256 numberOfDays = time / 86400;\r\n\r\n        if(numberOfDays < 10){\r\n            penalty = stakedAmount * 20 / 100;\r\n            return penalty;\r\n        } else if(numberOfDays < 20) {\r\n            penalty = stakedAmount * 15 / 100;\r\n            return penalty;\r\n        } else if(numberOfDays < 30) {\r\n            penalty = stakedAmount * 12 / 100;\r\n            return penalty;\r\n        } else if(numberOfDays < 60) {\r\n            penalty = stakedAmount * 10 / 100;\r\n            return penalty;\r\n        } else if(numberOfDays < 90) {\r\n            penalty = stakedAmount * 8 / 100;\r\n            return penalty;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function rescueBNB(uint256 amount) external onlyOwner returns(bool){\r\n        payable(_msgSender()).transfer(amount);\r\n        return true;\r\n    }\r\n\r\n    function rescueBEP20(address bep20, uint256 amount) external onlyOwner returns(bool){\r\n        bool success = IERC20(bep20).transfer(_msgSender(), amount);\r\n        return success;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vemate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newUnlockDate\",\"type\":\"uint256\"}],\"name\":\"changeLockDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPositionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountLeftForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockPeriods\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPositionById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenInterest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"internalType\":\"struct VemateStaking.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"getPositionIdsForAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"numDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"basisPoints\",\"type\":\"uint16\"}],\"name\":\"modifyLockPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bep20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueBEP20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VemateStaking", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e615c5e7219f9801c3b75bc76e45a4dab3c38e51", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://feb643cfed7a42151292e43dc6f9b1cb303f22949ff9dea5c39571663cc3b872"}