{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-07-17\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-06-04\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-06-03\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-06-01\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-05-31\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-03-11\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface StakingRewards {\r\n    function balanceOfs(address account) external view returns (uint);\r\n}\r\n\r\n\r\ncontract Team is Ownable {\r\n    IERC20 public immutable usdtToken;//USDT\r\n    IERC20 public immutable hoToken;//HO\r\n    StakingRewards public  stake;\r\n    mapping(address => uint) public balanceStake;\r\n    bool public pasue;\r\n    mapping(address => address) public relation;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => uint) public below1;\r\n    mapping(address => uint) public below2;\r\n    mapping(address => uint) public below3;\r\n    mapping(address => bool) public white;\r\n    mapping(address => bool) public captain;\r\n\tuint256 public limits;\r\n\r\n    address public feer;\r\n    uint256 public fees;\r\n\r\n\r\n\tevent relations(address low,address high);\r\n    modifier onlyWhite() {\r\n        require(white[msg.sender] == true, \"not authorized\");\r\n        _;\r\n    }\r\n    constructor() {\r\n        usdtToken = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n        hoToken = IERC20(0x868f0DfAD219C8C93d34b2414cf6F663FBCCe7FF);//ho address\r\n        pasue = true;\r\n        feer = msg.sender;\r\n        limits = 1 * 10**18;\r\n        fees = 200;\r\n    }\r\n\r\n    function setFeer(address _adr) external onlyOwner{\r\n        feer = _adr;\r\n    }\r\n    function setFees(uint256 _num) external onlyOwner{\r\n        require(_num < 1000,\"must is < 1000\");\r\n        fees = _num;\r\n    }\r\n    function setLimit(uint256 _num) external onlyOwner{\r\n        limits = _num;\r\n    }\r\n\r\n   function setPasue(uint256 _pasue) external onlyOwner{\r\n        if(_pasue > 0){\r\n            pasue = true;\r\n        }else{\r\n            pasue = false;\r\n        }\r\n    }\r\n\r\n\tfunction setBalanceStake(address[] calldata adr,uint256[] calldata num) external onlyWhite{\r\n\r\n        for(uint i=0;i<adr.length;i++){\r\n            balanceStake[adr[i]] +=num[i];\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    function withdrawHo() external{\r\n        uint num = balanceStake[msg.sender];\r\n        balanceStake[msg.sender] = 0;\r\n        if(num > 0){\r\n            if(fees > 0){\r\n                uint num2 = num * fees /1000 ;\r\n                uint num1 = num-num2;\r\n                hoToken.transfer(msg.sender,num1);\r\n                hoToken.transfer(feer,num2);\r\n            }else{\r\n                hoToken.transfer(msg.sender,num);\r\n            }\r\n      \r\n        }\r\n    }\r\n\r\n    function setStake(address _adr) external onlyOwner{\r\n        stake = StakingRewards(_adr);\r\n    }\r\n\r\n    function bulid(address superior) external{\r\n\r\n        require(captain[msg.sender] != true,\"captain not below\");\r\n        require(relation[msg.sender] == address(0),\"you have captain\");\r\n\r\n        require( captain[superior] == true || relation[superior] != address(0),\"superior not be to\");\r\n\r\n        relation[msg.sender] = superior;\r\n\r\n        below1[superior] += 1;\r\n\r\n        if(relation[superior] != address(0)){\r\n            below2[relation[superior]] += 1;\r\n        }\r\n\r\n        if(relation[relation[superior]] != address(0)){\r\n            below3[relation[relation[superior]]] += 1;\r\n        }\r\n\r\n        emit relations(msg.sender,superior);\r\n    }\r\n\r\n    function setbulid(address[] memory _h,address[] memory _l) external onlyOwner{\r\n        for(uint i=0;i<_h.length;i++){\r\n            relation[_l[i]] = _h[i];  \r\n            below1[_h[i]] += 1;\r\n\r\n            if(relation[_h[i]] != address(0)){\r\n                below2[relation[_h[i]]] += 1;\r\n            }\r\n\r\n            if(relation[relation[_h[i]]] != address(0)){\r\n                below3[relation[relation[_h[i]]]] += 1;\r\n            }   \r\n        }\r\n    }\r\n\r\n    function setWhit(address[] memory _adr) external onlyOwner{\r\n        for(uint i=0;i<_adr.length;i++){\r\n            white[_adr[i]] = true;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function setCaptain(address[] memory _adr) external onlyOwner{\r\n        for(uint i=0;i<_adr.length;i++){\r\n            captain[_adr[i]] = true;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function setBalance(address[] memory _adr,uint256[] memory _num) external onlyWhite{\r\n         for(uint i=0;i<_adr.length;i++){\r\n            balanceOf[_adr[i]] += _num[i];\r\n         }\r\n        \r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    function withdraw() external{\r\n        uint num = balanceOf[msg.sender];\r\n        balanceOf[msg.sender] = 0;\r\n\t\t\r\n\t\tif(num > 0){\r\n            uint num2 = num * fees /1000 ;\r\n            uint num1 = num-num2;\r\n            usdtToken.transfer(msg.sender,num1);\r\n            usdtToken.transfer(feer,num2);\r\n        }\r\n\t\t\r\n    }\r\n\r\n\r\n    function isCan(address _adr) public view virtual  returns (bool) {\r\n        return captain[_adr] || relation[_adr] != address(0);\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"low\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"high\",\"type\":\"address\"}],\"name\":\"relations\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"below1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"below2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"below3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superior\",\"type\":\"address\"}],\"name\":\"bulid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"captain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hoToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"isCan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pasue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_adr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_num\",\"type\":\"uint256[]\"}],\"name\":\"setBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"num\",\"type\":\"uint256[]\"}],\"name\":\"setBalanceStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_adr\",\"type\":\"address[]\"}],\"name\":\"setCaptain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"setFeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pasue\",\"type\":\"uint256\"}],\"name\":\"setPasue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"setStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_adr\",\"type\":\"address[]\"}],\"name\":\"setWhit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_h\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_l\",\"type\":\"address[]\"}],\"name\":\"setbulid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"contract StakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"white\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawHo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Team", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://84208f7b226b0c8654a80120c69e4483de84d64f8e2536f048f014760d7cfb32"}