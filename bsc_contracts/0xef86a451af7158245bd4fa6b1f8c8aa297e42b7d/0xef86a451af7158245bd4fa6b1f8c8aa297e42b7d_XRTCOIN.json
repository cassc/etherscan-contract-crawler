{"SourceCode": "// SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ERC20 is IERC20,Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 _totalSupply;\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        if(owner() == account){\r\n            _totalSupply = _totalSupply.add(amount);\r\n        }\r\n        \r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address _owner, address spender, uint256 value) internal {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[_owner][spender] = value;\r\n        emit Approval(_owner, spender, value);\r\n    }\r\n\r\n}\r\n\r\nabstract contract ERC20Detailed  {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    constructor (string memory __name, string memory __symbol, uint8 __decimals)  {\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n        _decimals = __decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract XRTCOIN is ERC20, ERC20Detailed {\r\n\r\n    using SafeMath for uint256;\r\n    uint256 tokenBalance;\r\n    uint256 deployTime;\r\n    uint256 maxSlotTime = 1440000;\r\n\r\n    uint256 public withdrawlAmount;\r\n    uint256 public maxSupply;\r\n    uint256 public RemainingReward;\r\n    uint256 public Duration = 1440000 minutes; \r\n    uint256 slotTime = 1 minutes;\r\n\r\n    address public multisendaccount;\r\n    uint256 baseDivisor = 100;\r\n\r\n    ///////////   Address ////////\r\n    address public Creator;\r\n    address public Management;\r\n    address public Coreteam;\r\n    address public Staking;\r\n    address public Rewards_dividend;\r\n    address public DAO;\r\n    address public Cryptobank_forex;\r\n    address public Marketing;\r\n    address public Charity;\r\n    \r\n    //////// percentage ///////\r\n    uint256 public CreatorShare = 5;\r\n    uint256 public ManagementShare = 5;\r\n    uint256 public CoreteamShare = 5;\r\n    uint256 public StakingShare = 20 ;\r\n    uint256 public Rewards_dividendShare = 20;\r\n    uint256 public DAOShare = 15;\r\n    uint256 public Cryptobank_forexShare = 20;\r\n    uint256 public MarketingShare = 9;\r\n    uint256 public CharityShare = 1;\r\n\r\n    mapping (address => uint256) public selling;\r\n    mapping (address => uint256) public buying;\r\n\r\n    event Multisended(uint256 total, address tokenAddress);\r\n\r\n    constructor()\r\n    ERC20Detailed(\"xtended reality Coin\", \"XRT\",18)\r\n    {\r\n        deployTime = block.timestamp;\r\n        RemainingReward = 20000000*(10**18);\r\n        _mint(owner(),1000000*(10**18));\r\n        _mint(address(this), 20000000*(10**18));\r\n        tokenBalance = balanceOf(address(this));\r\n        Duration= Duration.div(60);\r\n        maxSupply = 21000000*(10**18);\r\n        Creator = 0x2e82128206d800Af79DE383DAdDf30bf0b4C8fcc;\r\n        Management = 0x8262727f4a8958945d64912C3b664f3519A337f9;\r\n        Coreteam = 0xa3cf21350799DbF7f41Ebc07f4532bA7aFE401a3;\r\n        Staking = 0xeE1f8336c7673BaD930a9462D32c6d23926C5Cff;\r\n        Rewards_dividend = 0xB4d7b04ab8a952d2e15be21cB8b6Ec1597dE2D19;\r\n        DAO = 0x46B344AA623D76E480Df717B00d198c60591461b;\r\n        Cryptobank_forex = 0xAa15926F828beeC694170156196E7A0868a534dd;\r\n        Marketing = 0x76ebCa8dc91052ab27E43358485868Bf774123F2;\r\n        Charity = 0xc2552757214670692533Cce7B5C0F7d5E9370BA6;\r\n    }\r\n\r\n    function updateCreator(address _creator) external onlyOwner {\r\n        Creator = _creator;\r\n    }\r\n    \r\n    function updateManagement(address _management) external onlyOwner {\r\n        Management = _management;\r\n    }\r\n    \r\n    function updateCoreteam(address _coreteam) external onlyOwner {\r\n        Coreteam = _coreteam;\r\n    }\r\n    \r\n    function updateStaking(address _staking) external onlyOwner {\r\n        Staking = _staking;\r\n    }\r\n    \r\n    function updateRewardsDividend(address _rewardsDividend) external onlyOwner {\r\n        Rewards_dividend = _rewardsDividend;\r\n    }\r\n    \r\n    function updateDAO(address _dao) external onlyOwner {\r\n        DAO = _dao;\r\n    }\r\n    \r\n    function updateCryptobankForex(address _cryptobankForex) external onlyOwner{\r\n        Cryptobank_forex = _cryptobankForex;\r\n    }\r\n    \r\n    function updateMarketing(address _marketing) external onlyOwner {\r\n        Marketing = _marketing;\r\n    }\r\n    \r\n    function updateCharity(address _charity) external onlyOwner {\r\n        Charity = _charity;\r\n    }\r\n\r\n    function calculatePercentage(uint256 amount) public view \r\n    returns(uint256 creator,uint256 management,uint256 coreteam,uint256 staking, uint256 rewards_dividend ,uint256 dao, uint256 cryptobank_forex, uint256 marketing, uint256 charity)\r\n    {\r\n        creator = amount.mul(CreatorShare).div(baseDivisor);\r\n        management = amount.mul(ManagementShare).div(baseDivisor);\r\n        coreteam = amount.mul(CoreteamShare).div(baseDivisor);\r\n        staking = amount.mul(StakingShare).div(baseDivisor);\r\n        rewards_dividend = amount.mul(Rewards_dividendShare).div(baseDivisor);\r\n        dao = amount.mul(DAOShare).div(baseDivisor);\r\n        cryptobank_forex = amount.mul(Cryptobank_forexShare).div(baseDivisor);\r\n        marketing = amount.mul(MarketingShare).div(baseDivisor);\r\n        charity = amount.mul(CharityShare).div(baseDivisor);\r\n    }\r\n\r\n    function calculatingPerMinutes()\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 totalTime;\r\n        totalTime = (block.timestamp.sub(deployTime)).div(slotTime);\r\n        if(totalTime >= maxSlotTime){\r\n            totalTime = maxSlotTime;\r\n        }\r\n        return totalTime;\r\n    }\r\n\r\n    function WithdrawableTokens(address _user)\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        uint256 _reward;\r\n        uint256 TokenPerMinutes;\r\n        if(_user == owner()){\r\n            uint256 calcTime = calculatingPerMinutes();\r\n            TokenPerMinutes = (tokenBalance.div(Duration));\r\n            _reward =  (calcTime.mul(TokenPerMinutes));\r\n\r\n            return _reward.sub(withdrawlAmount);  \r\n        }\r\n        else{\r\n            return 0;\r\n        }       \r\n    }\r\n    \r\n    function updateTime(uint256 _time)\r\n    public\r\n    onlyOwner\r\n    {\r\n        Withdraw();\r\n        deployTime = block.timestamp;\r\n        Duration = _time;\r\n        maxSlotTime = _time;\r\n    }\r\n\r\n    function Withdraw()\r\n    public\r\n    onlyOwner\r\n    {\r\n        uint256 transferReward = WithdrawableTokens(msg.sender);\r\n        withdrawlAmount += transferReward;\r\n        RemainingReward -= transferReward;\r\n        require(withdrawlAmount <= balanceOf(address(this)), \"Not enough balance!\");\r\n        (uint256 creatorShare,uint256 managementShare,uint256 coreTeamShare,uint256 stakingShare,\r\n        uint256 rewardsShare,uint256 daoShare,uint256 cryptoBankAndForexShare,uint256 marketingShare,uint256 charityShare) = calculatePercentage(transferReward);\r\n\r\n        _transfer(address(this), Creator, creatorShare);\r\n        _transfer(address(this), Management, managementShare);\r\n        _transfer(address(this), Coreteam, coreTeamShare);\r\n        _transfer(address(this), Staking, stakingShare);\r\n        _transfer(address(this), Rewards_dividend, rewardsShare);\r\n        _transfer(address(this), DAO, daoShare);\r\n        _transfer(address(this), Cryptobank_forex, cryptoBankAndForexShare);\r\n        _transfer(address(this), Marketing, marketingShare);\r\n        _transfer(address(this), Charity, charityShare);\r\n\r\n        _totalSupply = _totalSupply.add(transferReward);\r\n    }\r\n\r\n    function multiSendToken( address[] calldata _contributors, uint256[] calldata __balances)\r\n    external \r\n    {\r\n        uint8 i = 0;\r\n        for (i; i < _contributors.length; i++)\r\n        {_transfer(msg.sender,_contributors[i], __balances[i]);}\r\n    }\r\n\r\n    function sendMultiBnb(address payable[]  memory  _contributors, uint256[] memory __balances)\r\n    public\r\n    payable\r\n    {\r\n        uint256 total = msg.value;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= __balances[i],\"Invalid Amount\");\r\n            total = total - __balances[i];\r\n            _contributors[i].transfer(__balances[i]);\r\n        }\r\n        emit Multisended(  msg.value , msg.sender);\r\n    }\r\n\r\n    function Buy()\r\n    external\r\n    payable\r\n    {require(msg.value > 0,\"Select amount first\");}\r\n    \r\n    function Sell(uint256 _token)\r\n    external\r\n    {\r\n        require(_token > 0,\"Select amount first\");\r\n        _transfer(msg.sender,address(this),_token);\r\n    }\r\n\r\n    function WithDrawBNB(uint256 _amount)\r\n    external\r\n    onlyOwner\r\n    {payable(msg.sender).transfer(_amount);}\r\n    \r\n    function getTokens(uint256 _amount)\r\n    external\r\n    onlyOwner\r\n    {_transfer(address(this),msg.sender,_amount);}\r\n\r\n    function setMultiSendAccount(address _addr)\r\n    external\r\n    onlyOwner\r\n    {multisendaccount=_addr;}\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}  \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Charity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CharityShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Coreteam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CoreteamShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CreatorShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Cryptobank_forex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Cryptobank_forexShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAOShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Management\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ManagementShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Marketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RemainingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Rewards_dividend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Rewards_dividendShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithDrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"WithdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculatePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"management\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coreteam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards_dividend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dao\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cryptobank_forex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatingPerMinutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"__balances\",\"type\":\"uint256[]\"}],\"name\":\"multiSendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisendaccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"selling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"__balances\",\"type\":\"uint256[]\"}],\"name\":\"sendMultiBnb\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMultiSendAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_charity\",\"type\":\"address\"}],\"name\":\"updateCharity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coreteam\",\"type\":\"address\"}],\"name\":\"updateCoreteam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"updateCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cryptobankForex\",\"type\":\"address\"}],\"name\":\"updateCryptobankForex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"updateDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"}],\"name\":\"updateManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"}],\"name\":\"updateMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDividend\",\"type\":\"address\"}],\"name\":\"updateRewardsDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"updateStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"updateTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawlAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "XRTCOIN", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2d594baac7de4a3737fca34ff0ee3c065898370f25adac86d3c69d9de315367f"}