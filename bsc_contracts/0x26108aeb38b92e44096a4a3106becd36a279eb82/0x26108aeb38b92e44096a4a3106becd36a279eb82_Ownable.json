{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.0;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Invalid address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TomorrowlandToken is Ownable {\r\n    string public name = \"Tomorrowland\";\r\n    string public symbol = \"TLM\";\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public totalSupply = 8000000000 * (10**uint256(decimals)); // 8 billion tokens\r\n    uint256 public initialSupply = 1000000000 * (10**uint256(decimals)); // 1 billion tokens\r\n    uint256 public initialPrice = 10; // $0.10 per token in cents\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    constructor() {\r\n        balanceOf[owner] = initialSupply;\r\n        emit Transfer(address(0), owner, initialSupply);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(value <= balanceOf[msg.sender], \"Insufficient balance\");\r\n\r\n        balanceOf[msg.sender] -= value;\r\n        balanceOf[to] += value;\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function mint(uint256 amount) external onlyOwner {\r\n        require(initialSupply + amount <= totalSupply, \"Exceeds total supply\");\r\n\r\n        balanceOf[owner] += amount;\r\n        totalSupply += amount;\r\n\r\n        emit Transfer(address(0), owner, amount);\r\n    }\r\n\r\n    function burn(uint256 amount) external onlyOwner {\r\n        require(amount <= balanceOf[owner], \"Insufficient balance for burning\");\r\n\r\n        balanceOf[owner] -= amount;\r\n        totalSupply -= amount;\r\n\r\n        emit Burn(owner, amount);\r\n    }\r\n\r\n    function getCost(uint256 amount) external view returns (uint256) {\r\n        return amount * initialPrice;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Ownable", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7bf06f2dd788af5232ed7525c54691f489428302b1c5a7c5f3bdb3b09136313e"}