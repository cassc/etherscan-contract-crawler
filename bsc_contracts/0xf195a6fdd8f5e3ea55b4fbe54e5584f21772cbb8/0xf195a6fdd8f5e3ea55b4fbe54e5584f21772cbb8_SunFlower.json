{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function feeToRate() external view returns (uint256);\r\n\r\n    function initCodeHash() external view returns (bytes32);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function setFeeToRate(uint256) external;\r\n\r\n    function setInitCodeHash(bytes32) external;\r\n\r\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\r\n\r\n    function pairFor(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\r\n\r\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);\r\n\r\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\ninterface IPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function price(address token, uint256 baseDecimal) external view returns (uint256);\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapMining() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external view returns (uint256 amountB);\r\n\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);\r\n\r\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRepository {\r\n    function withdraw(IERC20 _token, address _recipient) external returns(uint256 _balance);\r\n}\r\n\r\ninterface ISF {\r\n    function upline(address) external view returns(address);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract Repository  {\r\n\r\n    address internal _owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"DENIED\");\r\n        _;\r\n\r\n    }\r\n    constructor(address __owner) {\r\n        _owner = __owner;\r\n    }\r\n\r\n    receive() external payable {} \r\n\r\n    function withdraw(IERC20 _token, address _recipient) public onlyOwner() returns(uint256 _balance) {\r\n        _balance = _token.balanceOf(address(this));\r\n        _token.transfer(_recipient, _balance);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 MAX = ~uint256(0);\r\n    uint256 public BASEDIVIDE;\r\n\r\n    address private manager;\r\n    address private fund;\r\n    address private uplineManager;\r\n    address private nftManager;\r\n    address private deflationManager;\r\n    bool public isDeflation;\r\n\r\n    mapping(address => bool) public tokenHold;\r\n    address[] public tokenHolders;\r\n    mapping(address => uint256) tokenHolderId;\r\n    bool public enableAntiBot;\r\n    mapping(address => uint256) private antiBot;\r\n    uint256 botLimit;\r\n    uint256 start;\r\n    mapping(address => bool) except;\r\n\r\n    struct Compound {\r\n        uint256 dateRate;\r\n        uint256 intervalRate;\r\n        uint256 base;\r\n        uint256 cycle;\r\n        uint256 totalCompound;\r\n        uint256 distributedCompound;\r\n        uint256 accumulate;\r\n        uint256 startEpoch;\r\n        uint256 lastUpdate;\r\n        uint256 interval;\r\n        uint256 endEpoch;\r\n    }\r\n\r\n    Compound public compound;\r\n\r\n    struct UserCompound {\r\n        uint256 lastCalled;\r\n        uint256 receivedCompound;\r\n        uint256 unReceiveCompound;\r\n    }\r\n\r\n    mapping(address => UserCompound)  public userCompound;\r\n\r\n    struct Rates {\r\n        uint256 autoLpRate;\r\n        uint256 uplineRate;\r\n        uint256 burnRate;\r\n        uint256 tBurnRate;\r\n        uint256 managerRate;\r\n        uint256 fundRate;\r\n        uint256 nftRate;\r\n        uint256 rateBase;\r\n    }\r\n\r\n    Rates rates;\r\n\r\n    struct UpLine {\r\n        uint256 level;\r\n        uint256 firstLevelRate;\r\n        uint256 otherLevelRate;\r\n        uint256 rateBase;\r\n        uint256 miniBalance;\r\n    }\r\n\r\n    UpLine public upLineData;\r\n    ISF public sf;\r\n\r\n    address public defaultRouter;\r\n    mapping(address => bool) public isRouter;\r\n    mapping(address => bool) public checkedIsNotRouter;\r\n    mapping(address => bool) public isPair;\r\n    mapping(address => bool) public checkedIsNotPair;\r\n    mapping(address => address) public pairTokenB;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    uint256 public autoAddLiquidityAmount;\r\n\r\n    IRepository public repository;\r\n    IPair public defaultPair;\r\n    address public defaultWbnb;\r\n\r\n    mapping(address => bool) public exclude;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 otherReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n    event GetReservesEvent(uint256 amout0out, uint256 amount1out);\r\n\r\n\r\n        /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(\r\n                string memory name_, \r\n        string memory symbol_, \r\n        uint8 decimals_,\r\n        uint256 totalSupply_,\r\n        address manager_,\r\n        address fund_,\r\n        address uplineManager_,\r\n        address nftManager_,\r\n        address deflationManager_,\r\n        address router_,\r\n        address _sf\r\n    ) {\r\n        _initialize(\r\n        name_,\r\n        symbol_,\r\n        decimals_,\r\n        totalSupply_,\r\n        manager_,\r\n        fund_,\r\n        uplineManager_,\r\n        nftManager_,\r\n        deflationManager_,\r\n        router_,\r\n        _sf\r\n        );\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    modifier checkIsRouter(address _sender) {\r\n        {\r\n            if (!isRouter[_sender] && !checkedIsNotRouter[_sender]) {\r\n                if (address(_sender).isContract()) {\r\n                    IRouter _routerCheck = IRouter(\r\n                        _sender\r\n                    );\r\n                    try _routerCheck.WETH() returns (address) {\r\n                        try _routerCheck.factory() returns (address) {\r\n                            isRouter[_sender] = true;\r\n                        } catch {\r\n                            checkedIsNotRouter[_sender] = true;\r\n                        }\r\n                    } catch {\r\n                        checkedIsNotRouter[_sender] = true;\r\n                    }\r\n                } else {\r\n                    checkedIsNotRouter[_sender] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    modifier checkIsPair(address _sender) {\r\n        {\r\n            if (!isPair[_sender] && !checkedIsNotPair[_sender]) {\r\n                if (_sender.isContract()) {\r\n                    IPair _pairCheck = IPair(_sender);\r\n                    try _pairCheck.token0() returns (address) {\r\n                        try _pairCheck.token1() returns (address){\r\n                            try _pairCheck.factory() returns (address) {\r\n                                address _token0 = _pairCheck.token0();\r\n                                address _token1 = _pairCheck.token1();\r\n                                address this_token = address(this) == _token0 ? _token0 : address(this) == _token1 ? _token1 : address(0);\r\n                                if(this_token != address(0)) {\r\n                                    isPair[_sender] = true;\r\n                                    pairTokenB[_sender] = address(this) == _token0 ? address(this) == _token1 ? _token1 : address(0) : _token0;\r\n                                } else{\r\n                                   checkedIsNotPair[_sender] = true; \r\n                                }\r\n\r\n                            } catch {\r\n                                checkedIsNotPair[_sender] = true;\r\n                            }\r\n                        } catch {\r\n                            checkedIsNotPair[_sender] = true;\r\n                        }\r\n\r\n                    } catch {\r\n                        checkedIsNotPair[_sender] = true;\r\n                    }\r\n                } else {\r\n                    checkedIsNotPair[_sender] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier onlyInilized() {\r\n        require(_initialized, \"Initializable: contract is not initialized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _currentTotalSupply();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) \r\n    public virtual override \r\n    checkIsPair(msg.sender)\r\n    checkIsPair(to)\r\n    returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount, true);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override \r\n    checkIsPair(msg.sender) checkIsPair(from) checkIsPair(to)\r\n    returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount, false);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bool isT\r\n    ) \r\n    internal virtual \r\n    checkIsRouter(msg.sender)\r\n    checkIsRouter(from)\r\n    checkIsRouter(to)\r\n    {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        _checkBefore(from, to);\r\n        _autoSwap(from, to);\r\n\r\n\r\n        (address user, uint256 uplineFee, uint256 lpFee, uint256 burnFee, uint256 tBurnFee, uint256 managerFee, uint256 fundFee, uint256 nftFee) = _caculateFees(from, to, amount, isT);\r\n\r\n        _standardTransfer(from, to, amount);  \r\n\r\n        if(isT && tBurnFee >0) {  \r\n            _standardTransfer(user, deflationManager, tBurnFee);\r\n        }     \r\n\r\n        if(isT && lpFee >0) {\r\n            _standardTransfer(user, address(this), lpFee);\r\n        }\r\n\r\n        if(isT && uplineFee >0){\r\n            _divideDownlineFee(user, uplineFee);\r\n        }\r\n\r\n        if(!isT && burnFee >0) {\r\n            _burn(user, burnFee);\r\n        }\r\n\r\n        if(!isT && managerFee >0) {\r\n            _standardTransfer(user, manager, managerFee);\r\n        }\r\n\r\n        if(!isT && fundFee >0) {\r\n            _standardTransfer(user, fund, fundFee);\r\n        }\r\n\r\n        if(!isT && nftFee >0) {\r\n            _standardTransfer(user, nftManager, nftFee);\r\n        }\r\n\r\n        _checkAfter(from, to);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        // _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n        // _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        // _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        // _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _standardTransfer(address from, address to, uint256 amount) internal {\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n\r\n    /*****************************************************************************************************************/\r\n    /************************************************** other function ***********************************************/\r\n    /*****************************************************************************************************************/\r\n\r\n    // external\r\n    function setSwapAndLiquifyEnabled(bool _enable) public returns(bool) {\r\n        require(msg.sender == manager || msg.sender == owner(), \"Denied!\");\r\n        swapAndLiquifyEnabled = _enable;\r\n        emit SwapAndLiquifyEnabledUpdated(_enable);\r\n        return true;\r\n    }\r\n\r\n    function setRates(uint256 _lpRate, uint256 _uplineRate, uint256 _burnRate, uint256 _tBurnRate, uint256 _managerRate, uint256 _fundRate, uint256 _nftRate) public returns(bool){\r\n        require(msg.sender == manager || msg.sender == owner(), \"Denied!\");\r\n        _setRates(BASEDIVIDE,  _lpRate, _uplineRate, _burnRate, _tBurnRate, _managerRate, _fundRate, _nftRate);\r\n        return true;\r\n    }\r\n    \r\n    function setStartCompoundEpoch(uint256 _startEpoch) public {\r\n        require(msg.sender == manager || msg.sender == owner(), \"Denied!\");\r\n        require(compound.startEpoch == 0, \"Compound start time has beed set!\");\r\n        _setStartCompoundEpoch(_startEpoch, compound.cycle);\r\n    }\r\n\r\n    function setUplineLevel(uint256 _level) public {\r\n        require(msg.sender == manager || msg.sender == owner(), \"Denied!\");\r\n        require(_level >0, \"level is zero\");\r\n        upLineData.level = _level;\r\n    }\r\n\r\n    function setSF(address _sf) public returns(bool){\r\n        require(msg.sender == manager || msg.sender == owner(), \"Denied!\");\r\n        sf = ISF(_sf);\r\n        require(sf.upline(msg.sender)==address(0), \"\");\r\n       return true;\r\n    }\r\n\r\n    function setStartDeflation(bool _start) public onlyInilized() returns(bool) {\r\n        require(msg.sender == deflationManager || msg.sender == owner(), \"Deined!\");\r\n        isDeflation = _start;\r\n        return true;\r\n    }\r\n    \r\n    function withdraw(address token_) public returns(bool) {\r\n        require(msg.sender == manager || msg.sender == owner(), \"Denied!\");\r\n        if(token_ == address(this)){\r\n            _standardTransfer(address(this), manager, _balances[address(this)]);\r\n            return true;\r\n        }\r\n        uint256 amount = IERC20Metadata(token_).balanceOf(address(this));\r\n        IERC20Metadata(token_).transfer(manager, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function setEnableAntibot(bool _enable) public returns(bool){\r\n        require(msg.sender == manager || msg.sender == owner(), \"Denied!\");\r\n        enableAntiBot = _enable;\r\n        return true;\r\n    }\r\n\r\n    function setAntibotLimit(uint256 _locktime) public returns(bool){\r\n        require(msg.sender == manager || msg.sender == owner(), \"Denied!\");\r\n        botLimit = _locktime;\r\n        return true;\r\n    }\r\n\r\n    function setExcept(address _except, bool _enable) public returns(bool){\r\n        require(msg.sender == manager || msg.sender == owner(), \"Denied!\");\r\n        except[_except] = _enable;\r\n        return true;\r\n    }\r\n\r\n    // internal \r\n\r\n    function _balanceOf(address account) internal view returns (uint256) {\r\n        return _balances[account].add(_computeCompound(account));\r\n    }\r\n\r\n    function _checkBefore(address from, address to) internal {\r\n        bool isT = !from.isContract() && !to.isContract() ? true : false;\r\n        if(!(except[from] || except[to] || isT)){\r\n            require(block.timestamp >= start, \"ERROR:start time limited!\");\r\n        }\r\n        if(isPair[to] && !isPair[from] && !isRouter[from] && from !=address(this) && enableAntiBot){\r\n            require(antiBot[from].add(botLimit) < block.timestamp, \"ERROR: anti bot!\");\r\n        }\r\n        _updateTotal();\r\n        _distributedCompound(from);\r\n        _distributedCompound(to);\r\n        if (!tokenHold[to] && !to.isContract()) {\r\n            _addTokenHolder(to);            \r\n        }\r\n    }\r\n\r\n    function _checkAfter(address from, address to) internal {\r\n        if((isPair[from] || isRouter[from]) && !isPair[to] && !isRouter[to] && to !=address(this) && enableAntiBot){\r\n            antiBot[from] = block.timestamp;\r\n        }\r\n        _updateTotal();\r\n        _updateUserLastcall(from);\r\n        _updateUserLastcall(to);\r\n        if(!from.isContract() && _balances[from] == 0){\r\n            _removeTokenHolder(from);   \r\n        } \r\n\r\n    }\r\n    \r\n    function _autoSwap(address from, address to) internal {\r\n        if(!swapAndLiquifyEnabled){\r\n            return;\r\n        }\r\n        if(isPair[from]) {\r\n            return;\r\n        }\r\n        address pair = isPair[from] ? from : isPair[to] ? to : address(defaultPair);\r\n        if(!inSwapAndLiquify && _balances[address(this)] >= autoAddLiquidityAmount && IPair(pair).totalSupply() >0) {\r\n            swapAndLiquify(IPair(pair), autoAddLiquidityAmount);\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(IPair pair, uint256 contractTokenBalance) internal lockTheSwap {\r\n\r\n        if(!isPair[address(pair)] || _balances[address(this)] < contractTokenBalance) {\r\n            return;\r\n        }\r\n\r\n        address token0 = pair.token0();\r\n        address token1 = pair.token1();\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        address tokenB = pairTokenB[address(pair)];\r\n        if(tokenB == address(0)){\r\n            tokenB = address(this) == token0 ? address(this) == token1 ? address(0) : token1 : token0;\r\n        }\r\n        if(tokenB == address(0)) {\r\n            return;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = tokenB;\r\n        uint256 initialBalance = IERC20(tokenB).balanceOf(address(this));\r\n\r\n        _approve(address(this), address(defaultRouter), contractTokenBalance);\r\n        address to = address(repository);\r\n        IRouter(defaultRouter).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            half,\r\n            0, \r\n            path,\r\n            to,\r\n            block.timestamp+1000\r\n        );\r\n        uint256 otherAmount = repository.withdraw(IERC20(address(tokenB)), address(this));\r\n        uint256 newBalance = IERC20(tokenB).balanceOf(address(this));\r\n        newBalance = newBalance >= initialBalance ? newBalance.sub(initialBalance) : 0;\r\n        newBalance = newBalance <= otherAmount ? newBalance : otherAmount;\r\n        IERC20(tokenB).approve(defaultRouter, newBalance);\r\n        IRouter(defaultRouter).addLiquidity(address(this), tokenB, otherHalf, newBalance, 0, 0, address(manager), block.timestamp + 1000);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n\r\n    function _initCompound(uint256 _maxTotal, uint256 _dateRate, uint256 _base, uint256 _cycle, uint256 _interval, uint256 _startEpoch) internal {\r\n        require((_cycle.mod(1 days)) == 0, \"Compound cycle must be mod day!\");\r\n        require(_dateRate < _base, \"Compound rate exceed base!\");\r\n        uint256 oneDay = 1 days;\r\n        require(_interval <= oneDay && oneDay.mod(_interval) == 0, \"Compound reward interval exceed date rate or date rate cannot mod by interfal\");\r\n        compound.totalCompound = _maxTotal;\r\n        compound.dateRate = _dateRate;\r\n        compound.base = _base;\r\n        compound.cycle = _cycle;\r\n        compound.interval = _interval;\r\n        compound.intervalRate = _dateRate.div(oneDay.div(_interval));\r\n        _setStartCompoundEpoch(_startEpoch, _cycle);\r\n    }\r\n\r\n    function _addTokenHolder(address _user) internal {\r\n        if(tokenHolderId[_user] ==0 || tokenHolderId[_user] == MAX){\r\n            return;\r\n        }\r\n        tokenHold[_user] = true;\r\n        tokenHolders.push(_user);\r\n        tokenHolderId[_user] = tokenHolders.length;\r\n    }\r\n\r\n    function _removeTokenHolder(address _user) internal {\r\n        tokenHold[_user] = false;\r\n        tokenHolderId[_user] = MAX;\r\n    }\r\n\r\n    function _setStartCompoundEpoch(uint256 _startEpoch, uint256 _cycle) internal {\r\n        compound.startEpoch = _startEpoch;\r\n        compound.endEpoch = _startEpoch.add(_cycle);\r\n        compound.lastUpdate = _startEpoch;\r\n    }\r\n\r\n    function _computeCompound(address _user) internal view returns(uint256) {\r\n        uint256 current = block.timestamp;\r\n        if(\r\n            compound.startEpoch == 0 ||\r\n            current <= compound.startEpoch.add(compound.interval) || \r\n            compound.distributedCompound >= compound.totalCompound ||\r\n            compound.distributedCompound >= compound.totalCompound  ||\r\n            current < userCompound[_user].lastCalled  || \r\n            _balances[_user] == 0\r\n        ) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 lastcalled = userCompound[_user].lastCalled;\r\n        if(lastcalled <= compound.startEpoch){\r\n            lastcalled = compound.startEpoch;\r\n        }\r\n\r\n        address user = _user;\r\n        uint256 userCompoundFee;\r\n        uint256 userBalance = _balances[user];\r\n\r\n        uint256 oneDay = 1 days;\r\n\r\n        uint256 diff = current.sub(lastcalled);\r\n\r\n        if(diff >= oneDay) {\r\n            uint256 dayCount = diff.div(oneDay);\r\n            for(uint i=0; i<dayCount; i++){\r\n                uint256 temp = userBalance.mul(compound.dateRate).div(compound.base);\r\n                userCompoundFee = userCompoundFee.add(temp);\r\n                userBalance = userBalance.add(temp);\r\n                diff = diff.sub(oneDay);\r\n            }\r\n        }\r\n\r\n        if(diff > 0){\r\n            uint256 count = diff.div(compound.interval);            \r\n            \r\n            for(uint c=0; c<count; c++) {\r\n                uint256 temp = userBalance.mul(compound.intervalRate).div(compound.base);\r\n                userCompoundFee = userCompoundFee.add(temp);\r\n                userBalance = userBalance.add(temp);\r\n            }\r\n        }\r\n\r\n        return userCompoundFee;\r\n    }\r\n\r\n    function _computeAccumulateCompound() internal view returns(uint256) {\r\n        uint256 current = block.timestamp;\r\n        uint256 compounds;\r\n        if(current < compound.startEpoch.add(compound.interval)){\r\n            return compounds = 0;\r\n        }\r\n        if(current >= compound.endEpoch){\r\n            current = compound.endEpoch;\r\n        }\r\n        if(compound.distributedCompound >= compound.totalCompound){\r\n            compounds = compound.totalCompound;\r\n        } else {\r\n            uint256 temp = _totalSupply;\r\n            uint256 oneDay = 1 days;\r\n            uint256 diff = current.sub(compound.lastUpdate);\r\n            if(diff >= oneDay){\r\n                uint256 oneDayCount = diff.div(oneDay);\r\n                for(uint i=0; i<oneDayCount; i++) {\r\n                    if(compounds >= compound.totalCompound) {\r\n                        compounds = compound.totalCompound;\r\n                        break;\r\n                    }\r\n                    uint256 tempFee = temp.mul(compound.dateRate).div(compound.base);\r\n                    temp = temp.add(tempFee);\r\n                    compounds = compounds.add(tempFee);\r\n                    diff = diff.sub(oneDay);\r\n                }\r\n            }\r\n\r\n            if(diff > 0){\r\n                uint256 count = diff.div(compound.interval);\r\n                \r\n                for(uint i=0; i<count; i++) {\r\n                    if(compounds >= compound.totalCompound) {\r\n                        compounds = compound.totalCompound;\r\n                        break;\r\n                    }\r\n                    uint256 tempFee = temp.mul(compound.intervalRate).div(compound.base);\r\n                    temp = temp.add(tempFee);\r\n                    compounds = compounds.add(tempFee);\r\n                }\r\n            }\r\n\r\n        }\r\n        return compounds;\r\n        \r\n    }\r\n\r\n    function _currentTotalSupply() internal view returns(uint256) {\r\n        return _totalSupply.add(_computeAccumulateCompound());\r\n    }\r\n\r\n    function _updateTotal() internal {\r\n        compound.accumulate += _currentTotalSupply().sub(_totalSupply);\r\n        _totalSupply = _currentTotalSupply();\r\n\r\n        uint256 current = block.timestamp;\r\n        uint256 count;\r\n        if(current > compound.startEpoch){\r\n            count = current.sub(compound.startEpoch).div(compound.interval);\r\n        }\r\n        \r\n        compound.lastUpdate = compound.interval.mul(count).add(compound.startEpoch);\r\n    }\r\n\r\n    function _mintCompound(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _distributedCompound(address _user) internal {\r\n        uint256 userBalance = _balanceOf(_user);\r\n        if(userBalance > _balances[_user] && _balances[_user] >0){\r\n            uint256 fee = userBalance.sub(_balances[_user]);\r\n            _mintCompound(_user, fee);\r\n            userCompound[_user].receivedCompound = userCompound[_user].receivedCompound.add(fee);\r\n            compound.distributedCompound = compound.distributedCompound.add(fee);\r\n        }\r\n\r\n        _updateUserLastcall(_user);\r\n\r\n    }\r\n\r\n    function _updateUserLastcall(address _user) internal {\r\n        uint256 current = block.timestamp;\r\n        if(current > compound.startEpoch){\r\n            uint256 count = current.sub(compound.startEpoch).div(compound.interval);\r\n            userCompound[_user].lastCalled = compound.interval.mul(count).add(compound.startEpoch);\r\n        } else {\r\n            userCompound[_user].lastCalled = compound.startEpoch;\r\n        }\r\n    }\r\n\r\n    function _setRates(uint256 _divBase, uint256 _lpRate, uint256 _uplineRate, uint256 _burnRate, uint256 _tBurnRate, uint256 _managerRate, uint256 _fundRate, uint256 _nftRate) internal {\r\n        require(_divBase > _lpRate.add(_uplineRate.add(_burnRate.add(_tBurnRate.add(_managerRate.add(_fundRate.add(_nftRate)))))), \"Total rate exceed rate base!\");\r\n        rates.rateBase = _divBase;\r\n        rates.autoLpRate = _lpRate;\r\n        rates.uplineRate = _uplineRate;\r\n        rates.burnRate = _burnRate;\r\n        rates.tBurnRate = _tBurnRate;\r\n        rates.managerRate = _managerRate;\r\n        rates.fundRate = _fundRate;\r\n        rates.nftRate = _nftRate;\r\n    }\r\n\r\n\r\n    function _initUplineData(uint256 level, uint256 _minibalance, uint256 _firstLevelRate, uint256 _otherLeverRate, uint256 _base) internal {\r\n        require(level >0, \"Level is zero!\") ;\r\n        require(_firstLevelRate.add(_otherLeverRate) <= _base, \"First upline rate exceed base rate!\");\r\n        upLineData.level = level;\r\n        upLineData.miniBalance = _minibalance;\r\n        upLineData.firstLevelRate = _firstLevelRate;\r\n        upLineData.otherLevelRate = _otherLeverRate;\r\n        upLineData.rateBase = _base;\r\n    }\r\n\r\n    function _divideDownlineFee(address _downline, uint256 _fees) internal{\r\n        if(_balances[_downline] < _fees) {\r\n            return ;\r\n        }\r\n        address sender = _downline;\r\n        address down = _downline;\r\n        address up;\r\n        uint256 uplineLevel = upLineData.level;\r\n        uint256 firstLevel = _fees.mul(upLineData.firstLevelRate).div(upLineData.rateBase);\r\n        uint256 otherLevel = _fees.mul(upLineData.otherLevelRate).div(upLineData.rateBase);\r\n        uint256 totalSend;\r\n        for(uint i=0; i<uplineLevel; i++){\r\n            up = address(sf) == address(0) ? address(0) :sf.upline(down);\r\n            if(up == address(0)){\r\n                break;\r\n            }\r\n            if(_balances[up] < upLineData.miniBalance){\r\n                down = up;\r\n                continue;\r\n            }\r\n            if(i==0){\r\n                _standardTransfer(sender, up, firstLevel);\r\n                totalSend = totalSend.add(firstLevel);\r\n            } else{\r\n                _standardTransfer(sender, up, otherLevel);\r\n                totalSend = totalSend.add(otherLevel);\r\n            }\r\n\r\n            down = up;\r\n        }\r\n\r\n        if(_fees > totalSend){\r\n            _standardTransfer(sender, uplineManager, _fees.sub(totalSend));\r\n        }\r\n        return ;\r\n    }\r\n\r\n    function _caculateFees(address from, address to, uint256 amount, bool isT) internal view returns(\r\n        address user,\r\n        uint256 uplineFee,\r\n        uint256 lpFee,\r\n        uint256 burnFee,\r\n        uint256 tBurnFee,\r\n        uint256 managerFee,\r\n        uint256 fundFee,\r\n        uint256 nftFee\r\n        ) {\r\n        user = isRouter[from] || isPair[from] ? isRouter[to] || isPair[to] ? address(0) : to : from ;\r\n        if(inSwapAndLiquify || user == owner() || exclude[user] || user == address(0)) {\r\n            return (user, 0, 0, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        if(isT && !from.isContract() && !to.isContract() && isDeflation){\r\n            tBurnFee = amount.mul(rates.tBurnRate).div(rates.rateBase);\r\n        } else if(isT && from.isContract() && to == tx.origin){\r\n            lpFee = amount.mul(rates.autoLpRate).div(rates.rateBase);\r\n            uplineFee = amount.mul(rates.uplineRate).div(rates.rateBase);       \r\n        } else if(!isT && isRouter[msg.sender]){\r\n            burnFee = amount.mul(rates.burnRate).div(rates.rateBase);\r\n            managerFee = amount.mul(rates.managerRate).div(rates.rateBase);\r\n            fundFee = amount.mul(rates.fundRate).div(rates.rateBase);\r\n            nftFee = amount.mul(rates.nftRate).div(rates.rateBase);\r\n        }\r\n        \r\n        uint256 totalfee = uplineFee.add(lpFee.add(burnFee.add(tBurnFee.add(managerFee.add(fundFee.add(nftFee))))));\r\n        if(user != address(0) && totalfee >0 && user == from){\r\n            require(amount.add(totalfee) <= _balances[user], \"TOKEN TRANSFER: Insufficient balance!\");\r\n        }\r\n    }\r\n\r\n    /***********************************************************************************************************************/\r\n    /********************************************************\u521d\u59cb\u5316*********************************************************/\r\n    /***********************************************************************************************************************/\r\n\r\n    function _initialize (\r\n            string memory name_ ,     // \u4ee3\u5e01\u540d\u79f0\r\n            string memory symbol_ ,   // \u4ee3\u5e01\u7b26\u53f7\r\n            uint8 decimals_ ,         // \u4ee3\u5e01\u7cbe\u5ea6\r\n            uint256 totalSupply_ ,  // \u53d1\u884c\u603b\u91cf\r\n            address manager_ ,\r\n            address fund_ ,\r\n            address uplineManager_ ,\r\n            address nftManager_ ,\r\n            address deflationManager_ ,\r\n            address router_ ,\r\n            address _sf\r\n        ) internal {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        _mint(msg.sender, totalSupply_.mul(10**_decimals));\r\n        _initial();\r\n\r\n        manager = manager_;\r\n        fund = fund_;\r\n        nftManager = nftManager_;\r\n        uplineManager = uplineManager_;\r\n        deflationManager = deflationManager_;\r\n        sf = ISF(_sf);\r\n        \r\n        defaultRouter = router_;  \r\n        repository = IRepository(address(new Repository(address(this))));\r\n        defaultWbnb =  IRouter(defaultRouter).WETH();\r\n        defaultPair = IPair(IFactory(IRouter(defaultRouter).factory()).createPair(address(this), defaultWbnb));\r\n        pairTokenB[address(defaultPair)] = defaultWbnb;\r\n\r\n\r\n        isPair[address(defaultPair)] = true;\r\n        isRouter[router_] = true;\r\n        checkedIsNotPair[_sf] = true;\r\n        checkedIsNotRouter[_sf] = true;\r\n        checkedIsNotPair[router_] = true;\r\n        checkedIsNotPair[address(this)] = true;\r\n        checkedIsNotRouter[address(this)] = true;\r\n        checkedIsNotPair[address(msg.sender)] = true;\r\n        checkedIsNotRouter[address(msg.sender)] = true;\r\n        checkedIsNotPair[address(repository)] = true;\r\n        checkedIsNotRouter[address(repository)] = true;\r\n        checkedIsNotRouter[manager_] = true;\r\n        checkedIsNotPair[manager_] = true;\r\n        checkedIsNotPair[defaultWbnb] = true;\r\n        checkedIsNotRouter[defaultWbnb] = true;\r\n        checkedIsNotPair[uplineManager] = true;\r\n        checkedIsNotRouter[uplineManager] = true;\r\n\r\n        exclude[msg.sender] = true;\r\n        exclude[manager] = true;\r\n        exclude[fund] = true;\r\n        exclude[nftManager]  = true;\r\n        exclude[address(repository)] = true;\r\n        exclude[uplineManager] = true;\r\n        exclude[_sf] = true;\r\n        _initialized = true;\r\n        \r\n    }\r\n\r\n    function _initial() internal {\r\n        uint256 oneToken = 1*10**_decimals;\r\n\r\n        autoAddLiquidityAmount = 5*oneToken; \r\n        enableAntiBot = true;\r\n        botLimit = 30 seconds;\r\n        start = 1675340880;\r\n        except[_msgSender()] = true;\r\n\r\n        uint256 _startEpoch = 1672545600 + ((block.timestamp - 1672545600)/1 days +1) * 1 days; \r\n        _initCompound(MAX, 218 * oneToken, 10000 * oneToken, 540 days, 1 days, _startEpoch);\r\n\r\n        BASEDIVIDE = 10000 * oneToken;\r\n        uint256 uplineLevel = 15;\r\n        uint256 firstLevelRate = 300 * oneToken;\r\n        uint256 otherLevelRate = 50 * oneToken; \r\n\r\n        uint256 _uplineRate = firstLevelRate + otherLevelRate * (uplineLevel - 1); \r\n        uint256 _lpRate = 500 * oneToken;     \r\n        uint256 _burnRate = 250 * oneToken;     \r\n        uint256 _tBurnRate = 1500 * oneToken;   \r\n        uint256 _managerRate = 250 * oneToken;   \r\n        uint256 _fundRate = 580 * oneToken;      \r\n        uint256 _nftRate = 500 * oneToken;\r\n\r\n        _initUplineData(uplineLevel, 0, firstLevelRate, otherLevelRate, _uplineRate);       \r\n        _setRates(BASEDIVIDE, _lpRate, _uplineRate, _burnRate, _tBurnRate,_managerRate, _fundRate, _nftRate);\r\n    }\r\n\r\n}\r\n\r\ncontract SunFlower is ERC20 {\r\n    constructor () ERC20(\r\n        \"SunFlower\",\r\n        \"SF\", \r\n        18, \r\n        25* 1e7, \r\n        address(0x843A7F4875fBc8d6f0b1E80C381095B60167a9e3),\r\n        address(0xA7237cC3150c802D8812Fa8A83d71c374CC32c60),\r\n        address(0xA29899666c253DbD28C2eA7F5395fc09E0112998),\r\n        address(0xBA84608d1CAF94d8b6642C4EA11b2DEC899299e8),\r\n        address(0x3A5445a73C260bA0C95C2a3Ef40CD09422B0c39a),\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n        address(0x8FE3416BC1193B655761fcb36A1493a29f6eD409) \r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amout0out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1out\",\"type\":\"uint256\"}],\"name\":\"GetReservesEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"otherReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASEDIVIDE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAddLiquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkedIsNotPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkedIsNotRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dateRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intervalRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributedCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPair\",\"outputs\":[{\"internalType\":\"contract IPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultWbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAntiBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exclude\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDeflation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairTokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repository\",\"outputs\":[{\"internalType\":\"contract IRepository\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_locktime\",\"type\":\"uint256\"}],\"name\":\"setAntibotLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setEnableAntibot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_except\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setExcept\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uplineRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tBurnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_managerRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nftRate\",\"type\":\"uint256\"}],\"name\":\"setRates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sf\",\"type\":\"address\"}],\"name\":\"setSF\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startEpoch\",\"type\":\"uint256\"}],\"name\":\"setStartCompoundEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_start\",\"type\":\"bool\"}],\"name\":\"setStartDeflation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"setUplineLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sf\",\"outputs\":[{\"internalType\":\"contract ISF\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenHold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upLineData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstLevelRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"otherLevelRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miniBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastCalled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unReceiveCompound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SunFlower", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://439f130cffd365159e3d0af88158cd95f6051fec5f86b7e328d54853c0fc8006"}