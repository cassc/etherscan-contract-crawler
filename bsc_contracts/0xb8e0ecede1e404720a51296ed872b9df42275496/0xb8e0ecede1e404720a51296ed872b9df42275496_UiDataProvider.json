{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/ILGE.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILGE {\\r\\n    event Claim(address indexed user, uint256 value);\\r\\n    event Buy(address indexed user, address indexed token, uint256 amount);\\r\\n\\r\\n    function userShares(address user) external view returns (uint256, uint256);\\r\\n\\r\\n    /// @notice Allows a user to buy a share of the LGE using {amount} of {token}\\r\\n    /// @dev numberOfReleases has a max\\r\\n    function buy(address token, uint256 amount, uint256 minUsdtAmountOut, address onBehalfOf) external returns (uint256 usdtValue);\\r\\n\\r\\n    /// @notice Allows a user to claim all the tokens he can according to their share and the vesting duration\\r\\n    function claim() external returns (uint256 amountReleased);\\r\\n\\r\\n    /// @notice Get how much HBR a user can claim\\r\\n    // We may be able to get rid of this one as claim() and a static call can return the same value\\r\\n    function pending(address user) external view returns (uint256 claimableAmount);\\r\\n\\r\\n    /// @notice Get how much HBR a user is still owed by the end of their vesting\\r\\n    function totalOwed(address user) external view returns (uint256 userTotal);\\r\\n\\r\\n    /// @notice Get how much USDT has been raised\\r\\n    function totalRaisedUsdt() external view returns (uint256 total);\\r\\n\\r\\n    /// @notice Timestamp for LGE end\\r\\n    function lgeEnd() external view returns (uint256 lgeEnd);\\r\\n\\r\\n    /// @notice Amount of Harbor bought thus far\\r\\n    function hbrBought() external view returns (uint256 hbrBought);   \\r\\n}\"\r\n    },\r\n    \"contracts/UiDataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/ILGE.sol\\\";\\r\\n\\r\\ncontract UiDataProvider {\\r\\n    uint256 public constant GRACE_PERIOD = 90 days;\\r\\n\\r\\n    ILGE public immutable lge;\\r\\n    uint256 public immutable lgeEnd; // 2 weeks after LGE start\\r\\n\\r\\n    struct UserData {\\r\\n        uint256 totalRaisedUsdt;\\r\\n        uint256 totalHbrBought;\\r\\n        uint256 totalOwed;\\r\\n        uint256 pending;\\r\\n        uint256 totalClaimed;\\r\\n        uint256 userHbrLeft;\\r\\n    }\\r\\n\\r\\n    constructor(address _lge) {\\r\\n        lge = ILGE(_lge);\\r\\n        lgeEnd = lge.lgeEnd();\\r\\n    }\\r\\n\\r\\n    // @dev: this function is used to get the total claimed\\r\\n    // @param user: the user's address\\r\\n    function getTotalClaimed(address user) public view returns (uint256 totalClaimed) {\\r\\n        (, uint256 claimed) = lge.userShares(user);\\r\\n        totalClaimed = claimed;\\r\\n    }\\r\\n\\r\\n    // @dev: this function is used to get the user's Harbor left\\r\\n    // @param user: the user's address\\r\\n    function getUserHbrLeft(address user) public view returns (uint256 hbrLeft) {\\r\\n        (, uint256 totalClaimed) = lge.userShares(user);\\r\\n        hbrLeft = lge.totalOwed(user) - totalClaimed;\\r\\n    }\\r\\n\\r\\n    // @dev: this function is used to get the pending Harbor\\r\\n    // @param user: the user's address\\r\\n    function getPending(address user) public view returns (uint256 pending) {\\r\\n        if (block.timestamp < lgeEnd + GRACE_PERIOD) {\\r\\n            pending = 0; // prevents revert\\r\\n        } else {\\r\\n            pending = lge.pending(user);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    // @dev: this function is used to get the user's data\\r\\n    // @param user: the user's address\\r\\n    function getUserData(address user) public view returns (UserData memory userData) {\\r\\n        userData.totalHbrBought = lge.hbrBought();\\r\\n        userData.totalRaisedUsdt = lge.totalRaisedUsdt();\\r\\n        userData.totalOwed = lge.totalOwed(user);\\r\\n        userData.pending = getPending(user);\\r\\n        userData.totalClaimed = getTotalClaimed(user);\\r\\n        userData.userHbrLeft = getUserHbrLeft(user);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalRaisedUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalHbrBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userHbrLeft\",\"type\":\"uint256\"}],\"internalType\":\"struct UiDataProvider.UserData\",\"name\":\"userData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserHbrLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hbrLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lge\",\"outputs\":[{\"internalType\":\"contract ILGE\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lgeEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UiDataProvider", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bcba5ccc1932bfa26efb3de05af7bf0b404e90e2", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}