{"SourceCode": "# @version 0.3.1\r\n\"\"\"\r\n@title StableSwap\r\n@author Curve.Fi\r\n@license Copyright (c) Curve.Fi, 2020-2021 - all rights reserved\r\n@notice valToken/val3EPS metapool\r\n\"\"\"\r\n\r\ninterface ERC20:\r\n    def approve(_spender: address, _amount: uint256) -> bool: nonpayable\r\n    def balanceOf(_owner: address) -> uint256: view\r\n    def transfer(_to: address, _amount: uint256) -> bool: nonpayable\r\n    def transferFrom(_from: address, _to: address, _amount: uint256) -> bool: nonpayable\r\n    def decimals() -> uint256: view\r\n\r\ninterface Curve:\r\n    def coins(i: uint256) -> address: view\r\n    def get_virtual_price() -> uint256: view\r\n    def calc_token_amount(amounts: uint256[BASE_N_COINS], deposit: bool) -> uint256: view\r\n    def calc_withdraw_one_coin(_token_amount: uint256, i: int128) -> uint256: view\r\n    def fee() -> uint256: view\r\n    def get_dy(i: int128, j: int128, dx: uint256) -> uint256: view\r\n    def exchange(i: int128, j: int128, dx: uint256, min_dy: uint256): nonpayable\r\n    def add_liquidity(amounts: uint256[BASE_N_COINS], min_mint_amount: uint256): nonpayable\r\n    def remove_liquidity_one_coin(_token_amount: uint256, i: int128, min_amount: uint256): nonpayable\r\n\r\ninterface Factory:\r\n    def fee_receiver() -> address: view\r\n    def admin() -> address: view\r\n\r\ninterface CurveToken:\r\n    def totalSupply() -> uint256: view\r\n    def mint(_to: address, _value: uint256) -> bool: nonpayable\r\n    def burnFrom(_to: address, _value: uint256) -> bool: nonpayable\r\n\r\ninterface FeeDistributor:\r\n    def depositFee(_token: address, _amount: uint256) -> bool: nonpayable\r\n\r\ninterface RewardsToken:\r\n    def getReward(): nonpayable\r\n    def notifyRewardAmount(_reward: address, _amount: uint256): nonpayable\r\n\r\ninterface AToken:\r\n    def UNDERLYING_ASSET_ADDRESS() -> address: view\r\n\r\ninterface LendingPool:\r\n    def withdraw(_underlying_asset: address, _amount: uint256, _receiver: address): nonpayable\r\n\r\ninterface ValasStaking:\r\n    def exit(_claim_rewards: bool): nonpayable\r\n\r\n\r\nevent TokenExchange:\r\n    buyer: indexed(address)\r\n    sold_id: int128\r\n    tokens_sold: uint256\r\n    bought_id: int128\r\n    tokens_bought: uint256\r\n\r\nevent TokenExchangeUnderlying:\r\n    buyer: indexed(address)\r\n    sold_id: int128\r\n    tokens_sold: uint256\r\n    bought_id: int128\r\n    tokens_bought: uint256\r\n\r\nevent AddLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidityOne:\r\n    provider: indexed(address)\r\n    token_amount: uint256\r\n    coin_amount: uint256\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidityImbalance:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent RampA:\r\n    old_A: uint256\r\n    new_A: uint256\r\n    initial_time: uint256\r\n    future_time: uint256\r\n\r\nevent StopRampA:\r\n    A: uint256\r\n    t: uint256\r\n\r\n\r\nBASE_POOL: constant(address) = 0x19EC9e3F7B21dd27598E7ad5aAe7dC0Db00A806d\r\nBASE_LP: constant(address) = 0x5b5bD8913D766D005859CE002533D4838B0Ebbb5\r\nBASE_COINS: constant(address[3]) = [\r\n    0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56,  # BUSD\r\n    0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d,  # USDC\r\n    0x55d398326f99059fF775485246999027B3197955,  # USDT\r\n]\r\n\r\nVALAS_TOKEN: constant(address) = 0xB1EbdD56729940089Ecc3aD0BBEEB12b6842ea6F\r\nVALAS_REWARDS: constant(address) = 0xB7c1d99069a4eb582Fc04E7e1124794000e7ecBF\r\nVALAS_STAKING: constant(address) = 0x685D3b02b9b0F044A3C01Dbb95408FC2eB15a3b3\r\nLENDING_POOL: constant(address) = 0xE29A55A6AEFf5C8B1beedE5bCF2F0Cb3AF8F91f5\r\n\r\n\r\nN_COINS: constant(int128) = 2\r\nMAX_COIN: constant(int128) = N_COINS - 1\r\nBASE_N_COINS: constant(int128) = 3\r\nPRECISION: constant(uint256) = 10 ** 18\r\n\r\nFEE_DENOMINATOR: constant(uint256) = 10 ** 10\r\nADMIN_FEE: constant(uint256) = 5000000000\r\n\r\nA_PRECISION: constant(uint256) = 100\r\nMAX_A: constant(uint256) = 10 ** 6\r\nMAX_A_CHANGE: constant(uint256) = 10\r\nMIN_RAMP_TIME: constant(uint256) = 86400\r\n\r\nfactory: public(address)\r\n\r\nlp_token: public(address)\r\nwrapped_coins: public(address[N_COINS])\r\ncoins: public(address[N_COINS])\r\nadmin_balances: public(uint256[N_COINS])\r\nfee: public(uint256)  # fee * 1e10\r\n\r\ninitial_A: public(uint256)\r\nfuture_A: public(uint256)\r\ninitial_A_time: public(uint256)\r\nfuture_A_time: public(uint256)\r\n\r\nrate_multiplier: uint256\r\n\r\nis_killed: bool\r\nkill_deadline: uint256\r\nKILL_DEADLINE_DT: constant(uint256) = 2 * 30 * 86400\r\n\r\n@external\r\ndef __init__(\r\n    _lp_token: address,\r\n    _wrapped_coin: address,\r\n    _factory: address,\r\n    _A: uint256,\r\n    _fee: uint256\r\n):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _wrapped_coin Valas lending token to be used in the pool\r\n    @param _A Amplification coefficient multiplied by n ** (n - 1)\r\n    @param _fee Fee to charge for exchanges\r\n    \"\"\"\r\n    A: uint256 = _A * A_PRECISION\r\n    underlying_coin: address = AToken(_wrapped_coin).UNDERLYING_ASSET_ADDRESS()\r\n    ERC20(underlying_coin).approve(LENDING_POOL, MAX_UINT256)\r\n    self.wrapped_coins = [_wrapped_coin, BASE_LP]\r\n    self.coins = [underlying_coin, BASE_LP]\r\n    self.rate_multiplier = 10 ** (36 - ERC20(_wrapped_coin).decimals())\r\n    self.initial_A = A\r\n    self.future_A = A\r\n    self.fee = _fee\r\n    self.factory = _factory\r\n    self.lp_token = _lp_token\r\n    self.kill_deadline = block.timestamp + KILL_DEADLINE_DT\r\n\r\n    assert ERC20(VALAS_TOKEN).approve(_lp_token, MAX_UINT256)\r\n    for coin in BASE_COINS:\r\n        ERC20(coin).approve(BASE_POOL, MAX_UINT256)\r\n\r\n\r\n@view\r\n@internal\r\ndef _balances() -> uint256[N_COINS]:\r\n    result: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    for i in range(N_COINS):\r\n        result[i] = ERC20(self.wrapped_coins[i]).balanceOf(self) - self.admin_balances[i]\r\n    return result\r\n\r\n\r\n@view\r\n@external\r\ndef balances(i: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Get the current balance of a coin within the\r\n            pool, less the accrued admin fees\r\n    @param i Index value for the coin to query balance of\r\n    @return Token balance\r\n    \"\"\"\r\n    return self._balances()[i]\r\n\r\n\r\n@view\r\n@external\r\ndef get_balances() -> uint256[N_COINS]:\r\n    return self._balances()\r\n\r\n\r\n@view\r\n@internal\r\ndef _A() -> uint256:\r\n    \"\"\"\r\n    Handle ramping A up or down\r\n    \"\"\"\r\n    t1: uint256 = self.future_A_time\r\n    A1: uint256 = self.future_A\r\n\r\n    if block.timestamp < t1:\r\n        A0: uint256 = self.initial_A\r\n        t0: uint256 = self.initial_A_time\r\n        # Expressions in uint256 cannot have negative numbers, thus \"if\"\r\n        if A1 > A0:\r\n            return A0 + (A1 - A0) * (block.timestamp - t0) / (t1 - t0)\r\n        else:\r\n            return A0 - (A0 - A1) * (block.timestamp - t0) / (t1 - t0)\r\n\r\n    else:  # when t1 == 0 or block.timestamp >= t1\r\n        return A1\r\n\r\n\r\n@view\r\n@external\r\ndef admin_fee() -> uint256:\r\n    return ADMIN_FEE\r\n\r\n\r\n@view\r\n@external\r\ndef A() -> uint256:\r\n    return self._A() / A_PRECISION\r\n\r\n\r\n@view\r\n@external\r\ndef A_precise() -> uint256:\r\n    return self._A()\r\n\r\n\r\n@pure\r\n@internal\r\ndef _xp_mem(_rates: uint256[N_COINS], _balances: uint256[N_COINS]) -> uint256[N_COINS]:\r\n    result: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    for i in range(N_COINS):\r\n        result[i] = _rates[i] * _balances[i] / PRECISION\r\n    return result\r\n\r\n\r\n@pure\r\n@internal\r\ndef get_D(_xp: uint256[N_COINS], _amp: uint256) -> uint256:\r\n    \"\"\"\r\n    D invariant calculation in non-overflowing integer operations\r\n    iteratively\r\n\r\n    A * sum(x_i) * n**n + D = A * D * n**n + D**(n+1) / (n**n * prod(x_i))\r\n\r\n    Converging solution:\r\n    D[j+1] = (A * n**n * sum(x_i) - D[j]**(n+1) / (n**n prod(x_i))) / (A * n**n - 1)\r\n    \"\"\"\r\n    S: uint256 = 0\r\n    Dprev: uint256 = 0\r\n    for x in _xp:\r\n        S += x\r\n    if S == 0:\r\n        return 0\r\n\r\n    D: uint256 = S\r\n    Ann: uint256 = _amp * N_COINS\r\n    for i in range(255):\r\n        D_P: uint256 = D\r\n        for x in _xp:\r\n            D_P = D_P * D / (x * N_COINS)  # If division by 0, this will be borked: only withdrawal will work. And that is good\r\n        Dprev = D\r\n        D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P)\r\n        # Equality with the precision of 1\r\n        if D > Dprev:\r\n            if D - Dprev <= 1:\r\n                return D\r\n        else:\r\n            if Dprev - D <= 1:\r\n                return D\r\n    # convergence typically occurs in 4 rounds or less, this should be unreachable!\r\n    # if it does happen the pool is borked and LPs can withdraw via `remove_liquidity`\r\n    raise\r\n\r\n\r\n@view\r\n@internal\r\ndef get_D_mem(_rates: uint256[N_COINS], _balances: uint256[N_COINS], _amp: uint256) -> uint256:\r\n    xp: uint256[N_COINS] = self._xp_mem(_rates, _balances)\r\n    return self.get_D(xp, _amp)\r\n\r\n\r\n@view\r\n@external\r\ndef get_virtual_price() -> uint256:\r\n    \"\"\"\r\n    @notice The current virtual price of the pool LP token\r\n    @dev Useful for calculating profits\r\n    @return LP token virtual price normalized to 1e18\r\n    \"\"\"\r\n    amp: uint256 = self._A()\r\n    balances: uint256[N_COINS] = self._balances()\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, balances)\r\n    D: uint256 = self.get_D(xp, amp)\r\n    # D is in the units similar to DAI (e.g. converted to precision 1e18)\r\n    # When balanced, D = n * x_u - total virtual value of the portfolio\r\n    return D * PRECISION / CurveToken(self.lp_token).totalSupply()\r\n\r\n\r\n@view\r\n@external\r\ndef calc_token_amount(_amounts: uint256[N_COINS], _is_deposit: bool) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate addition or reduction in token supply from a deposit or withdrawal\r\n    @dev This calculation accounts for slippage, but not fees.\r\n         Needed to prevent front-running, not for precise calculations!\r\n    @param _amounts Amount of each coin being deposited\r\n    @param _is_deposit set True for deposits, False for withdrawals\r\n    @return Expected amount of LP tokens received\r\n    \"\"\"\r\n    amp: uint256 = self._A()\r\n    balances: uint256[N_COINS] = self._balances()\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n\r\n    D0: uint256 = self.get_D_mem(rates, balances, amp)\r\n    for i in range(N_COINS):\r\n        amount: uint256 = _amounts[i]\r\n        if _is_deposit:\r\n            balances[i] += amount\r\n        else:\r\n            balances[i] -= amount\r\n    D1: uint256 = self.get_D_mem(rates, balances, amp)\r\n    diff: uint256 = 0\r\n    if _is_deposit:\r\n        diff = D1 - D0\r\n    else:\r\n        diff = D0 - D1\r\n    return diff * CurveToken(self.lp_token).totalSupply() / D0\r\n\r\n\r\n@external\r\ndef claim_rewards():\r\n    # push VALAS rewards into the reward receiver\r\n    raw_call(\r\n        VALAS_REWARDS,\r\n        concat(\r\n            method_id(\"claim(address,address[])\"),\r\n            convert(self, bytes32),\r\n            convert(32 * 2, bytes32),\r\n            convert(1, bytes32),\r\n            convert(self.wrapped_coins[0], bytes32),\r\n        )\r\n    )\r\n    ValasStaking(VALAS_STAKING).exit(False)\r\n    RewardsToken(BASE_LP).getReward()\r\n    amount: uint256 = ERC20(VALAS_TOKEN).balanceOf(self)\r\n    if amount > 0:\r\n        RewardsToken(self.lp_token).notifyRewardAmount(VALAS_TOKEN, amount)\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef add_liquidity(\r\n    _amounts: uint256[N_COINS],\r\n    _min_mint_amount: uint256,\r\n    _use_wrapped: bool = False\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Deposit coins into the pool\r\n    @param _amounts List of amounts of coins to deposit\r\n    @param _min_mint_amount Minimum amount of LP tokens to mint from the deposit\r\n    @param _use_wrapped if True, add liquidity using `wrapped_coins`\r\n    @return Amount of LP tokens received by depositing\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    amp: uint256 = self._A()\r\n    old_balances: uint256[N_COINS] = self._balances()\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n\r\n    # Initial invariant\r\n    D0: uint256 = self.get_D_mem(rates, old_balances, amp)\r\n    new_balances: uint256[N_COINS] = old_balances\r\n\r\n    total_supply: uint256 = CurveToken(self.lp_token).totalSupply()\r\n\r\n    # Take coins from the sender\r\n    for i in range(N_COINS):\r\n        amount: uint256 = _amounts[i]\r\n        if amount == 0:\r\n            assert total_supply > 0\r\n        else:\r\n            if _use_wrapped or i == 1:\r\n                assert ERC20(self.wrapped_coins[i]).transferFrom(msg.sender, self, amount)\r\n            else:\r\n                coin: address = self.coins[0]\r\n                # transfer underlying coin from msg.sender to self\r\n                assert ERC20(coin).transferFrom(msg.sender, self, amount)\r\n                # deposit to aave lending pool\r\n                raw_call(\r\n                    LENDING_POOL,\r\n                    concat(\r\n                        method_id(\"deposit(address,uint256,address,uint16)\"),\r\n                        convert(coin, bytes32),\r\n                        convert(amount, bytes32),\r\n                        convert(self, bytes32),\r\n                        EMPTY_BYTES32,\r\n                    )\r\n                )\r\n            new_balances[i] += amount\r\n\r\n    # Invariant after change\r\n    D1: uint256 = self.get_D_mem(rates, new_balances, amp)\r\n    assert D1 > D0\r\n\r\n    # We need to recalculate the invariant accounting for fees\r\n    # to calculate fair user's share\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    mint_amount: uint256 = 0\r\n    if total_supply > 0:\r\n        # Only account for fees if we are not the first to deposit\r\n        base_fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n        for i in range(N_COINS):\r\n            ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n            difference: uint256 = 0\r\n            new_balance: uint256 = new_balances[i]\r\n            if ideal_balance > new_balance:\r\n                difference = ideal_balance - new_balance\r\n            else:\r\n                difference = new_balance - ideal_balance\r\n            fees[i] = base_fee * difference / FEE_DENOMINATOR\r\n            self.admin_balances[i] += fees[i] * ADMIN_FEE / FEE_DENOMINATOR\r\n            new_balances[i] -= fees[i]\r\n        D2: uint256 = self.get_D_mem(rates, new_balances, amp)\r\n        mint_amount = total_supply * (D2 - D0) / D0\r\n    else:\r\n        mint_amount = D1  # Take the dust if there was any\r\n\r\n    assert mint_amount >= _min_mint_amount\r\n\r\n    # Mint pool tokens\r\n    CurveToken(self.lp_token).mint(msg.sender, mint_amount)\r\n\r\n    log AddLiquidity(msg.sender, _amounts, fees, D1, total_supply + mint_amount)\r\n\r\n    return mint_amount\r\n\r\n\r\n@view\r\n@internal\r\ndef get_y(i: int128, j: int128, x: uint256, xp: uint256[N_COINS]) -> uint256:\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i != j       # dev: same coin\r\n    assert j >= 0       # dev: j below zero\r\n    assert j < N_COINS  # dev: j above N_COINS\r\n\r\n    # should be unreachable, but good for safety\r\n    assert i >= 0\r\n    assert i < N_COINS\r\n\r\n    amp: uint256 = self._A()\r\n    D: uint256 = self.get_D(xp, amp)\r\n    S_: uint256 = 0\r\n    _x: uint256 = 0\r\n    y_prev: uint256 = 0\r\n    c: uint256 = D\r\n    Ann: uint256 = amp * N_COINS\r\n\r\n    for _i in range(N_COINS):\r\n        if _i == i:\r\n            _x = x\r\n        elif _i != j:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n\r\n    c = c * D * A_PRECISION / (Ann * N_COINS)\r\n    b: uint256 = S_ + D * A_PRECISION / Ann  # - D\r\n    y: uint256 = D\r\n\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                return y\r\n        else:\r\n            if y_prev - y <= 1:\r\n                return y\r\n    raise\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy(i: int128, j: int128, dx: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate the current output dy given input dx\r\n    @dev Index values can be found via the `coins` public getter method\r\n    @param i Index value for the coin to send\r\n    @param j Index valie of the coin to recieve\r\n    @param dx Amount of `i` being exchanged\r\n    @return Amount of `j` predicted\r\n    \"\"\"\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, self._balances())\r\n\r\n    x: uint256 = xp[i] + (dx * rates[i] / PRECISION)\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n    dy: uint256 = xp[j] - y - 1\r\n    fee: uint256 = self.fee * dy / FEE_DENOMINATOR\r\n    return (dy - fee) * PRECISION / rates[j]\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy_underlying(i: int128, j: int128, dx: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate the current output dy given input dx on underlying\r\n    @dev Index values can be found via the `coins` public getter method\r\n    @param i Index value for the coin to send\r\n    @param j Index valie of the coin to recieve\r\n    @param dx Amount of `i` being exchanged\r\n    @return Amount of `j` predicted\r\n    \"\"\"\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, self._balances())\r\n\r\n    x: uint256 = 0\r\n    base_i: int128 = 0\r\n    base_j: int128 = 0\r\n    meta_i: int128 = 0\r\n    meta_j: int128 = 0\r\n\r\n    if i != 0:\r\n        base_i = i - MAX_COIN\r\n        meta_i = 1\r\n    if j != 0:\r\n        base_j = j - MAX_COIN\r\n        meta_j = 1\r\n\r\n    if i == 0:\r\n        x = xp[i] + dx * (rates[0] / 10**18)\r\n    else:\r\n        if j == 0:\r\n            # i is from BasePool\r\n            # At first, get the amount of pool tokens\r\n            base_inputs: uint256[BASE_N_COINS] = empty(uint256[BASE_N_COINS])\r\n            base_inputs[base_i] = dx\r\n            # Token amount transformed to underlying \"dollars\"\r\n            x = Curve(BASE_POOL).calc_token_amount(base_inputs, True) * rates[1] / PRECISION\r\n            # Accounting for deposit/withdraw fees approximately\r\n            x -= x * Curve(BASE_POOL).fee() / (2 * FEE_DENOMINATOR)\r\n            # Adding number of pool tokens\r\n            x += xp[MAX_COIN]\r\n        else:\r\n            # If both are from the base pool\r\n            return Curve(BASE_POOL).get_dy(base_i, base_j, dx)\r\n\r\n    # This pool is involved only when in-pool assets are used\r\n    y: uint256 = self.get_y(meta_i, meta_j, x, xp)\r\n    dy: uint256 = xp[meta_j] - y - 1\r\n    dy = (dy - self.fee * dy / FEE_DENOMINATOR)\r\n\r\n    # If output is going via the metapool\r\n    if j == 0:\r\n        dy /= (rates[0] / 10**18)\r\n    else:\r\n        # j is from BasePool\r\n        # The fee is already accounted for\r\n        dy = Curve(BASE_POOL).calc_withdraw_one_coin(dy * PRECISION / rates[1], base_j)\r\n\r\n    return dy\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef exchange(\r\n    i: int128,\r\n    j: int128,\r\n    _dx: uint256,\r\n    _min_dy: uint256,\r\n    _use_wrapped: bool = False,\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Perform an exchange between two coins\r\n    @dev Index values can be found via the `coins` public getter method\r\n    @param i Index value for the coin to send\r\n    @param j Index valie of the coin to recieve\r\n    @param _dx Amount of `i` being exchanged\r\n    @param _min_dy Minimum amount of `j` to receive\r\n    @param _use_wrapped if True, swap between `wrapped_coins`\r\n    @return Actual amount of `j` received\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    old_balances: uint256[N_COINS] = self._balances()\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, old_balances)\r\n\r\n\r\n    if _use_wrapped or i == 1:\r\n        assert ERC20(self.wrapped_coins[i]).transferFrom(msg.sender, self, _dx)\r\n    else:\r\n        coin: address = self.coins[0]\r\n        assert ERC20(coin).transferFrom(msg.sender, self, _dx)\r\n        raw_call(\r\n            LENDING_POOL,\r\n            concat(\r\n                method_id(\"deposit(address,uint256,address,uint16)\"),\r\n                convert(coin, bytes32),\r\n                convert(_dx, bytes32),\r\n                convert(self, bytes32),\r\n                EMPTY_BYTES32,\r\n            )\r\n        )\r\n\r\n    x: uint256 = xp[i] + _dx * rates[i] / PRECISION\r\n    dy: uint256 = xp[j] - self.get_y(i, j, x, xp) - 1  # -1 just in case there were some rounding errors\r\n    dy_fee: uint256 = dy * self.fee / FEE_DENOMINATOR\r\n\r\n    # Convert all to real units\r\n    dy = (dy - dy_fee) * PRECISION / rates[j]\r\n    assert dy >= _min_dy\r\n\r\n    self.admin_balances[j] += (dy_fee * ADMIN_FEE / FEE_DENOMINATOR) * PRECISION / rates[j]\r\n\r\n    if _use_wrapped or j == 1:\r\n        assert ERC20(self.wrapped_coins[j]).transfer(msg.sender, dy)\r\n    else:\r\n        LendingPool(LENDING_POOL).withdraw(self.coins[0], dy, msg.sender)\r\n\r\n    log TokenExchange(msg.sender, i, _dx, j, dy)\r\n\r\n    return dy\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef exchange_underlying(\r\n    i: int128,\r\n    j: int128,\r\n    _dx: uint256,\r\n    _min_dy: uint256\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Perform an exchange between two underlying coins\r\n    @dev Underlying refers to the base pool coins, not the wrapped/underlying within this contract\r\n    @param i Index value for the underlying coin to send\r\n    @param j Index valie of the underlying coin to receive\r\n    @param _dx Amount of `i` being exchanged\r\n    @param _min_dy Minimum amount of `j` to receive\r\n    @return Actual amount of `j` received\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    old_balances: uint256[N_COINS] = self._balances()\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, old_balances)\r\n\r\n    base_coins: address[3] = BASE_COINS\r\n\r\n    dy: uint256 = 0\r\n    base_i: int128 = 0\r\n    base_j: int128 = 0\r\n    meta_i: int128 = 0\r\n    meta_j: int128 = 0\r\n    x: uint256 = 0\r\n    input_coin: address = ZERO_ADDRESS\r\n    output_coin: address = ZERO_ADDRESS\r\n\r\n    if i == 0:\r\n        input_coin = self.coins[0]\r\n    else:\r\n        base_i = i - MAX_COIN\r\n        meta_i = 1\r\n        input_coin = base_coins[base_i]\r\n    if j == 0:\r\n        output_coin = self.coins[0]\r\n    else:\r\n        base_j = j - MAX_COIN\r\n        meta_j = 1\r\n        output_coin = base_coins[base_j]\r\n\r\n\r\n    assert ERC20(input_coin).transferFrom(msg.sender, self, _dx)\r\n    dx: uint256 = _dx\r\n\r\n    if i == 0 or j == 0:\r\n        if i == 0:\r\n            raw_call(\r\n                LENDING_POOL,\r\n                concat(\r\n                    method_id(\"deposit(address,uint256,address,uint16)\"),\r\n                    convert(input_coin, bytes32),\r\n                    convert(dx, bytes32),\r\n                    convert(self, bytes32),\r\n                    EMPTY_BYTES32,\r\n                )\r\n            )\r\n            x = xp[i] + dx * rates[i] / PRECISION\r\n        else:\r\n            # i is from BasePool\r\n            # At first, get the amount of pool tokens\r\n            base_inputs: uint256[BASE_N_COINS] = empty(uint256[BASE_N_COINS])\r\n            base_inputs[base_i] = dx\r\n            coin_i: address = self.coins[MAX_COIN]\r\n            # Deposit and measure delta\r\n            x = ERC20(coin_i).balanceOf(self)\r\n            Curve(BASE_POOL).add_liquidity(base_inputs, 0)\r\n            # Need to convert pool token to \"virtual\" units using rates\r\n            # dx is also different now\r\n            dx = ERC20(coin_i).balanceOf(self) - x\r\n            x = dx * rates[MAX_COIN] / PRECISION\r\n            # Adding number of pool tokens\r\n            x += xp[MAX_COIN]\r\n\r\n        y: uint256 = self.get_y(meta_i, meta_j, x, xp)\r\n\r\n        # Either a real coin or token\r\n        dy = xp[meta_j] - y - 1  # -1 just in case there were some rounding errors\r\n        dy_fee: uint256 = dy * self.fee / FEE_DENOMINATOR\r\n\r\n        # Convert all to real units\r\n        # Works for both pool coins and real coins\r\n        dy = (dy - dy_fee) * PRECISION / rates[meta_j]\r\n\r\n        dy_admin_fee: uint256 = dy_fee * ADMIN_FEE / FEE_DENOMINATOR\r\n        dy_admin_fee = dy_admin_fee * PRECISION / rates[meta_j]\r\n\r\n        self.admin_balances[meta_j] += dy_admin_fee\r\n\r\n        # Withdraw from the base pool if needed\r\n        if j > 0:\r\n            out_amount: uint256 = ERC20(output_coin).balanceOf(self)\r\n            Curve(BASE_POOL).remove_liquidity_one_coin(dy, base_j, 0)\r\n            dy = ERC20(output_coin).balanceOf(self) - out_amount\r\n\r\n        assert dy >= _min_dy\r\n\r\n    else:\r\n        # If both are from the base pool\r\n        dy = ERC20(output_coin).balanceOf(self)\r\n        Curve(BASE_POOL).exchange(base_i, base_j, dx, _min_dy)\r\n        dy = ERC20(output_coin).balanceOf(self) - dy\r\n\r\n    if j == 0:\r\n        LendingPool(LENDING_POOL).withdraw(output_coin, dy, msg.sender)\r\n    else:\r\n        assert ERC20(output_coin).transfer(msg.sender, dy)\r\n\r\n    log TokenExchangeUnderlying(msg.sender, i, dx, j, dy)\r\n\r\n    return dy\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity(\r\n    _burn_amount: uint256,\r\n    _min_amounts: uint256[N_COINS],\r\n    _use_wrapped: bool = False\r\n) -> uint256[N_COINS]:\r\n    \"\"\"\r\n    @notice Withdraw coins from the pool\r\n    @dev Withdrawal amounts are based on current deposit ratios\r\n    @param _burn_amount Quantity of LP tokens to burn in the withdrawal\r\n    @param _min_amounts Minimum amounts of underlying coins to receive\r\n    @param _use_wrapped if True, remove liquidity in `wrapped_coins`\r\n    @return List of amounts of coins that were withdrawn\r\n    \"\"\"\r\n    total_supply: uint256 = CurveToken(self.lp_token).totalSupply()\r\n    amounts: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    balances: uint256[N_COINS] = self._balances()\r\n\r\n    for i in range(N_COINS):\r\n        value: uint256 = balances[i] * _burn_amount / total_supply\r\n        assert value >= _min_amounts[i]\r\n        amounts[i] = value\r\n        if _use_wrapped or i == 1:\r\n            assert ERC20(self.wrapped_coins[i]).transfer(msg.sender, value)\r\n        else:\r\n            LendingPool(LENDING_POOL).withdraw(self.coins[0], value, msg.sender)\r\n\r\n    CurveToken(self.lp_token).burnFrom(msg.sender, _burn_amount)\r\n\r\n    log RemoveLiquidity(msg.sender, amounts, empty(uint256[N_COINS]), total_supply - _burn_amount)\r\n\r\n    return amounts\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity_imbalance(\r\n    _amounts: uint256[N_COINS],\r\n    _max_burn_amount: uint256,\r\n    _use_wrapped: bool = False\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw coins from the pool in an imbalanced amount\r\n    @param _amounts List of amounts of underlying coins to withdraw\r\n    @param _max_burn_amount Maximum amount of LP token to burn in the withdrawal\r\n    @param _use_wrapped if True, remove liquidity in `wrapped_coins`\r\n    @return Actual amount of the LP token burned in the withdrawal\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    amp: uint256 = self._A()\r\n    old_balances: uint256[N_COINS] = self._balances()\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n    D0: uint256 = self.get_D_mem(rates, old_balances, amp)\r\n\r\n    new_balances: uint256[N_COINS] = old_balances\r\n    for i in range(N_COINS):\r\n        amount: uint256 = _amounts[i]\r\n        if amount != 0:\r\n            new_balances[i] -= amount\r\n            if _use_wrapped or i == 1:\r\n                assert ERC20(self.wrapped_coins[i]).transfer(msg.sender, amount)\r\n            else:\r\n                LendingPool(LENDING_POOL).withdraw(self.coins[0], amount, msg.sender)\r\n\r\n    D1: uint256 = self.get_D_mem(rates, new_balances, amp)\r\n\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    base_fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    for i in range(N_COINS):\r\n        ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n        difference: uint256 = 0\r\n        new_balance: uint256 = new_balances[i]\r\n        if ideal_balance > new_balance:\r\n            difference = ideal_balance - new_balance\r\n        else:\r\n            difference = new_balance - ideal_balance\r\n        fees[i] = base_fee * difference / FEE_DENOMINATOR\r\n        self.admin_balances[i] += fees[i] * ADMIN_FEE / FEE_DENOMINATOR\r\n        new_balances[i] -= fees[i]\r\n    D2: uint256 = self.get_D_mem(rates, new_balances, amp)\r\n\r\n    total_supply: uint256 = CurveToken(self.lp_token).totalSupply()\r\n    burn_amount: uint256 = ((D0 - D2) * total_supply / D0) + 1\r\n    assert burn_amount > 1  # dev: zero tokens burned\r\n    assert burn_amount <= _max_burn_amount\r\n\r\n    CurveToken(self.lp_token).burnFrom(msg.sender, burn_amount)\r\n    log RemoveLiquidityImbalance(msg.sender, _amounts, fees, D1, total_supply - burn_amount)\r\n\r\n    return burn_amount\r\n\r\n\r\n@view\r\n@internal\r\ndef get_y_D(A: uint256, i: int128, xp: uint256[N_COINS], D: uint256) -> uint256:\r\n    \"\"\"\r\n    Calculate x[i] if one reduces D from being calculated for xp to D\r\n\r\n    Done by solving quadratic equation iteratively.\r\n    x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\r\n    x_1**2 + b*x_1 = c\r\n\r\n    x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n    \"\"\"\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i >= 0  # dev: i below zero\r\n    assert i < N_COINS  # dev: i above N_COINS\r\n\r\n    S_: uint256 = 0\r\n    _x: uint256 = 0\r\n    y_prev: uint256 = 0\r\n    c: uint256 = D\r\n    Ann: uint256 = A * N_COINS\r\n\r\n    for _i in range(N_COINS):\r\n        if _i != i:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n\r\n    c = c * D * A_PRECISION / (Ann * N_COINS)\r\n    b: uint256 = S_ + D * A_PRECISION / Ann\r\n    y: uint256 = D\r\n\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                return y\r\n        else:\r\n            if y_prev - y <= 1:\r\n                return y\r\n    raise\r\n\r\n\r\n@view\r\n@internal\r\ndef _calc_withdraw_one_coin(_burn_amount: uint256, i: int128) -> uint256[2]:\r\n    # First, need to calculate\r\n    # * Get current D\r\n    # * Solve Eqn against y_i for D - _token_amount\r\n    amp: uint256 = self._A()\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, self._balances())\r\n    D0: uint256 = self.get_D(xp, amp)\r\n\r\n    total_supply: uint256 = CurveToken(self.lp_token).totalSupply()\r\n    D1: uint256 = D0 - _burn_amount * D0 / total_supply\r\n    new_y: uint256 = self.get_y_D(amp, i, xp, D1)\r\n\r\n    base_fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    xp_reduced: uint256[N_COINS] = empty(uint256[N_COINS])\r\n\r\n    for j in range(N_COINS):\r\n        dx_expected: uint256 = 0\r\n        xp_j: uint256 = xp[j]\r\n        if j == i:\r\n            dx_expected = xp_j * D1 / D0 - new_y\r\n        else:\r\n            dx_expected = xp_j - xp_j * D1 / D0\r\n        xp_reduced[j] = xp_j - base_fee * dx_expected / FEE_DENOMINATOR\r\n\r\n    dy: uint256 = xp_reduced[i] - self.get_y_D(amp, i, xp_reduced, D1)\r\n    dy_0: uint256 = (xp[i] - new_y) * PRECISION / rates[i]  # w/o fees\r\n    dy = (dy - 1) * PRECISION / rates[i]  # Withdraw less to account for rounding errors\r\n\r\n    return [dy, dy_0 - dy]\r\n\r\n\r\n@view\r\n@external\r\ndef calc_withdraw_one_coin(_burn_amount: uint256, i: int128) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate the amount received when withdrawing a single coin\r\n    @param _burn_amount Amount of LP tokens to burn in the withdrawal\r\n    @param i Index value of the coin to withdraw\r\n    @return Amount of coin received\r\n    \"\"\"\r\n    return self._calc_withdraw_one_coin(_burn_amount, i)[0]\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity_one_coin(\r\n    _burn_amount: uint256,\r\n    i: int128,\r\n    _min_received: uint256,\r\n    _use_wrapped: bool = False\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw a single coin from the pool\r\n    @param _burn_amount Amount of LP tokens to burn in the withdrawal\r\n    @param i Index value of the coin to withdraw\r\n    @param _min_received Minimum amount of coin to receive\r\n    @param _use_wrapped if True, remove liquidity in `wrapped_coins`\r\n    @return Amount of coin received\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: is killed\r\n\r\n    dy: uint256[2] = self._calc_withdraw_one_coin(_burn_amount, i)\r\n    assert dy[0] >= _min_received\r\n\r\n    self.admin_balances[i] += dy[1] * ADMIN_FEE / FEE_DENOMINATOR\r\n    CurveToken(self.lp_token).burnFrom(msg.sender, _burn_amount)\r\n    total_supply: uint256 = CurveToken(self.lp_token).totalSupply()\r\n\r\n    if _use_wrapped or i == 1:\r\n        assert ERC20(self.wrapped_coins[i]).transfer(msg.sender, dy[0])\r\n    else:\r\n        LendingPool(LENDING_POOL).withdraw(self.coins[0], dy[0], msg.sender)\r\n\r\n    log RemoveLiquidityOne(msg.sender, _burn_amount, dy[0], total_supply)\r\n\r\n    return dy[0]\r\n\r\n\r\n@external\r\ndef ramp_A(_future_A: uint256, _future_time: uint256):\r\n    assert msg.sender == Factory(self.factory).admin()  # dev: only owner\r\n    assert block.timestamp >= self.initial_A_time + MIN_RAMP_TIME\r\n    assert _future_time >= block.timestamp + MIN_RAMP_TIME  # dev: insufficient time\r\n\r\n    _initial_A: uint256 = self._A()\r\n    _future_A_p: uint256 = _future_A * A_PRECISION\r\n\r\n    assert _future_A > 0 and _future_A < MAX_A\r\n    if _future_A_p < _initial_A:\r\n        assert _future_A_p * MAX_A_CHANGE >= _initial_A\r\n    else:\r\n        assert _future_A_p <= _initial_A * MAX_A_CHANGE\r\n\r\n    self.initial_A = _initial_A\r\n    self.future_A = _future_A_p\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = _future_time\r\n\r\n    log RampA(_initial_A, _future_A_p, block.timestamp, _future_time)\r\n\r\n\r\n@external\r\ndef stop_ramp_A():\r\n    assert msg.sender == Factory(self.factory).admin()  # dev: only owner\r\n\r\n    current_A: uint256 = self._A()\r\n    self.initial_A = current_A\r\n    self.future_A = current_A\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = block.timestamp\r\n    # now (block.timestamp < t1) is always False, so we return saved A\r\n\r\n    log StopRampA(current_A, block.timestamp)\r\n\r\n\r\n@external\r\ndef withdraw_admin_fees():\r\n    receiver: address = Factory(self.factory).fee_receiver()\r\n\r\n    for i in range(N_COINS):\r\n        amount: uint256 = self.admin_balances[i]\r\n        if amount != 0:\r\n            self.admin_balances[i] = 0\r\n            underlying_coin: address = self.coins[i]\r\n            if i == 0:\r\n                LendingPool(LENDING_POOL).withdraw(underlying_coin, amount, self)\r\n            ERC20(underlying_coin).approve(receiver, amount)\r\n            FeeDistributor(receiver).depositFee(underlying_coin, amount)\r\n\r\n\r\n@external\r\ndef kill_me():\r\n    assert msg.sender == Factory(self.factory).admin()  # dev: only owner\r\n    assert self.kill_deadline > block.timestamp  # dev: deadline has passed\r\n    self.is_killed = True\r\n\r\n\r\n@external\r\ndef unkill_me():\r\n    assert msg.sender == Factory(self.factory).admin()  # dev: only owner\r\n    self.is_killed = False", "ABI": "[{\"name\":\"TokenExchange\",\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"sold_id\",\"type\":\"int128\",\"indexed\":false},{\"name\":\"tokens_sold\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"bought_id\",\"type\":\"int128\",\"indexed\":false},{\"name\":\"tokens_bought\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TokenExchangeUnderlying\",\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"sold_id\",\"type\":\"int128\",\"indexed\":false},{\"name\":\"tokens_sold\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"bought_id\",\"type\":\"int128\",\"indexed\":false},{\"name\":\"tokens_bought\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AddLiquidity\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amounts\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"fees\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"invariant\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidity\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amounts\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"fees\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidityOne\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"coin_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidityImbalance\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amounts\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"fees\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"invariant\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RampA\",\"inputs\":[{\"name\":\"old_A\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"new_A\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"initial_time\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"future_time\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StopRampA\",\"inputs\":[{\"name\":\"A\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"t\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_lp_token\",\"type\":\"address\"},{\"name\":\"_wrapped_coin\",\"type\":\"address\"},{\"name\":\"_factory\",\"type\":\"address\"},{\"name\":\"_A\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balances\",\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":14763},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_balances\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"gas\":14808},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin_fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":420},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"A\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":10208},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"A_precise\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":10208},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_virtual_price\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":819981},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calc_token_amount\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_is_deposit\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1608868},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"claim_rewards\",\"inputs\":[],\"outputs\":[],\"gas\":29002},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_min_mint_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2563269},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"name\":\"_use_wrapped\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2563269},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dy\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"dx\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1164318},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dy_underlying\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"dx\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1172579},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"_dx\",\"type\":\"uint256\"},{\"name\":\"_min_dy\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1281931},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"_dx\",\"type\":\"uint256\"},{\"name\":\"_min_dy\",\"type\":\"uint256\"},{\"name\":\"_use_wrapped\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1281931},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange_underlying\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"_dx\",\"type\":\"uint256\"},{\"name\":\"_min_dy\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1299333},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"_min_amounts\",\"type\":\"uint256[2]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"gas\":100951},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"_min_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_use_wrapped\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"gas\":100951},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_imbalance\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_max_burn_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2558822},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_imbalance\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_max_burn_amount\",\"type\":\"uint256\"},{\"name\":\"_use_wrapped\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2558822},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calc_withdraw_one_coin\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1169},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_one_coin\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"_min_received\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1633349},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_one_coin\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"_min_received\",\"type\":\"uint256\"},{\"name\":\"_use_wrapped\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1633349},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"ramp_A\",\"inputs\":[{\"name\":\"_future_A\",\"type\":\"uint256\"},{\"name\":\"_future_time\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":160954},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"stop_ramp_A\",\"inputs\":[],\"outputs\":[],\"gas\":157177},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw_admin_fees\",\"inputs\":[],\"outputs\":[],\"gas\":74222},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"kill_me\",\"inputs\":[],\"outputs\":[],\"gas\":42570},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unkill_me\",\"inputs\":[],\"outputs\":[],\"gas\":25407},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"factory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3120},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lp_token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3150},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"wrapped_coins\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3225},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"coins\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3255},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin_balances\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3285},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3270},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"initial_A\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3300},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_A\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3330},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"initial_A_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3360},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_A_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3390}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.3.1", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000008087a94ffe6bcf08dc4b4ebb3d28b4ed75a792ac0000000000000000000000002c85ebae81b7078cd656b2c6e2d58411cb41d91a000000000000000000000000f65bed27e96a367c61e0e06c54e14b16b84a587000000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000003d0900", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}