{"SourceCode": "pragma solidity 0.8.13;\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity 0.8.13;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity 0.8.13;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity 0.8.13;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            uint256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\n/// @title C98 Dollar Mint Burn for exchange cUSD by C98 or other Tokens\r\n/// @notice Any user can exchange if meet requirements\r\ncontract Coin98DollarMintBurn is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    uint256[] public MINTER;\r\n    uint256[] public BURNER;\r\n    uint256 private BASE_DECIMALS = 10**18;\r\n    uint256 private Percent = 10000;\r\n\r\n    /// @notice Limit time reset total per day for each minter\r\n    uint256 private LIMIT_TIME = 24;\r\n\r\n    IERC20 public CUSD_TOKEN;\r\n\r\n    constructor(address _cusd) {\r\n        CUSD_TOKEN = IERC20(_cusd);\r\n    }\r\n\r\n    /// @notice Token minter couple needed for create cUSD\r\n    /// `isActive` Active or Deactive minter.\r\n    /// `pair` couple tokens required for mint cUSD.\r\n    /// `decimals` Each decimals matching with token index.\r\n    /// `percents` Each percent required for mint cUSD matching with token index.\r\n    /// `priceFeed` Price feed Oracle provided by ChainLink matching with token index\r\n    /// `systemFee` System fee pay for each minted cUSD\r\n    /// `totalSystemFee` Total cUSD fee pay for each exchange\r\n    /// `totalMinted` Total cUSD amount minted\r\n    /// `totalSupply` Maximum amount cUSD can be minted for this minter\r\n    /// `totalSupplyPerDay` Maximum amount cUSD can be minted in one day for this minter\r\n    /// `totalPerDay` Total amount cUSD minted in limit time (default one day)\r\n    /// `lastExchange` Last exchange time used this minter to mint cUSD\r\n    struct TokenMinter {\r\n        bool isActive;\r\n        address[] pairs;\r\n        uint256[] decimals;\r\n        uint256[] percents;\r\n        address[] priceFeed;\r\n        uint256 systemFee;\r\n        uint256 totalSystemFee;\r\n        uint256 totalMinted;\r\n        uint256 totalSupply;\r\n        uint256 totalSupplyPerDay;\r\n        uint256 totalPerDay;\r\n        uint256 lastExchange;\r\n    }\r\n\r\n    /// @notice Token burner for burn cUSD\r\n    /// `isActive` Active or Deactive burner.\r\n    /// `token` Tokens required for burn cUSD and mint.\r\n    /// `decimals` Tokens decimals matching with token.\r\n    /// `priceFeed` Price feed Oracle provided by ChainLink\r\n    /// `systemFee` System fee pay for each burned cUSD\r\n    /// `totalSystemFee` Total cUSD fee pay for each exchange\r\n    /// `totalBurned` Total cUSD amount burned\r\n    /// `totalSupply` Maximum amount cUSD can be burned for this burner\r\n    /// `totalSupplyPerDay` Maximum amount cUSD can be burned in one day for this burner\r\n    /// `totalPerDay` Total amount cUSD burned in limit time (default one day)\r\n    /// `lastExchange` Last exchange time of this burner which is used to burn cUSD\r\n    struct TokenBurner {\r\n        bool isActive;\r\n        address token;\r\n        uint256 decimals;\r\n        address priceFeed;\r\n        uint256 systemFee;\r\n        uint256 totalSystemFee;\r\n        uint256 totalBurned;\r\n        uint256 totalSupply;\r\n        uint256 totalSupplyPerDay;\r\n        uint256 totalPerDay;\r\n        uint256 lastExchange;\r\n    }\r\n\r\n    /// @notice Mapping ID for each minter\r\n    mapping(uint256 => TokenMinter) public TokenMinters;\r\n\r\n    /// @notice Mapping ID for each burner\r\n    mapping(uint256 => TokenBurner) public TokenBurners;\r\n\r\n    /// @notice Withdraw token from Coin98 Dollar MintBurn\r\n    event WithdrawToken(address[] token);\r\n\r\n    event Mint(\r\n        uint256 minter,\r\n        address sender,\r\n        uint256[] amountBurn,\r\n        uint256 amountMint,\r\n        uint256 exchangeFee,\r\n        uint256 remainingToday\r\n    );\r\n\r\n    event Burn(\r\n        uint256 burner,\r\n        address sender,\r\n        uint256 amountBurn,\r\n        uint256 amountMint,\r\n        uint256 exchangeFee,\r\n        uint256 remainingToday\r\n    );\r\n\r\n    event UpdateMinter(\r\n        uint256 id,\r\n        address[] pairs,\r\n        uint256[] decimals,\r\n        uint256[] percents,\r\n        address[] priceFeed,\r\n        uint256 systemFee\r\n    );\r\n\r\n    event UpdateBurner(\r\n        uint256 id,\r\n        address token,\r\n        uint256 decimals,\r\n        address priceFeed,\r\n        uint256 systemFee\r\n    );\r\n\r\n    event UpdateMinterSupply(\r\n        uint256 id,\r\n        uint256 totalSupply,\r\n        uint256 totalSupplyPerDay\r\n    );\r\n\r\n    event UpdateBurnerSupply(\r\n        uint256 id,\r\n        uint256 totalSupply,\r\n        uint256 totalSupplyPerDay\r\n    );\r\n\r\n    event UpdateMinterFee(uint256 id, uint256 systemFee);\r\n    event UpdateBurnerFee(uint256 id, uint256 systemFee);\r\n\r\n    event UpdateLimitTime(uint256 limitTime);\r\n\r\n    /// @notice Check existed minter\r\n    modifier onlyActiveMinter(uint256 _id) {\r\n        require(\r\n            TokenMinters[_id].isActive && TokenMinters[_id].totalSupply > 0,\r\n            \"Coin98DollarMintBurn: Minter not existed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Check existed burner\r\n    modifier onlyActiveBurner(uint256 _id) {\r\n        require(\r\n            TokenBurners[_id].isActive && TokenBurners[_id].totalSupply > 0,\r\n            \"Coin98DollarMintBurn: Burner not existed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Get latest price from ChainLink\r\n    /// @return Latest price from Price Feed\r\n    function getLatestPrice(address priceFeed)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        if (priceFeed == address(0)) return (1 ether, 18);\r\n        uint256 decimals = AggregatorV3Interface(priceFeed).decimals();\r\n        (, uint256 price, , , ) = AggregatorV3Interface(priceFeed)\r\n            .latestRoundData();\r\n        return (price, decimals);\r\n    }\r\n\r\n    /// @notice Update Limit Time reset per day for each minter\r\n    /// @param _limitTime The amount of exchange fee\r\n    function setLimitTime(uint256 _limitTime) external onlyOwner {\r\n        require(\r\n            _limitTime > 0,\r\n            \"Coin98DollarMintBurn: Limit time must be a positive number and greater than zero\"\r\n        );\r\n        LIMIT_TIME = _limitTime;\r\n\r\n        emit UpdateLimitTime(_limitTime);\r\n    }\r\n\r\n    /// @notice Update System Fee of minter\r\n    /// @param _systemFee The amount of exchange fee\r\n    function setExchangeFee(uint256 _id, uint256 _systemFee)\r\n        external\r\n        onlyOwner\r\n        onlyActiveMinter(_id)\r\n    {\r\n        require(\r\n            _systemFee >= 0,\r\n            \"Coin98DollarMintBurn: Fee must be a positive number and greater than zero\"\r\n        );\r\n        TokenMinters[_id].systemFee = _systemFee;\r\n\r\n        emit UpdateMinterFee(_id, _systemFee);\r\n    }\r\n\r\n    /// @notice Update System Fee for burner\r\n    /// @param _systemFee The amount of exchange fee\r\n    function setExchangeFeeBurner(uint256 _id, uint256 _systemFee)\r\n        external\r\n        onlyOwner\r\n        onlyActiveBurner(_id)\r\n    {\r\n        require(\r\n            _systemFee >= 0,\r\n            \"Coin98DollarMintBurn: Fee must be a positive number and greater than zero\"\r\n        );\r\n        TokenBurners[_id].systemFee = _systemFee;\r\n\r\n        emit UpdateBurnerFee(_id, _systemFee);\r\n    }\r\n\r\n    /// @notice Set Minter for create cUSD\r\n    function setMinter(\r\n        uint256 _id,\r\n        bool _isActive,\r\n        address[] calldata _pairs,\r\n        uint256[] calldata _decimals,\r\n        uint256[] calldata _percents,\r\n        address[] calldata _priceFeed,\r\n        uint256 _systemFee\r\n    ) external onlyOwner {\r\n        uint256 sizePair = _pairs.length;\r\n        TokenMinter storage minter = TokenMinters[_id];\r\n        // Deactive current minter, no need to check anything here\r\n        if (!_isActive) {\r\n            require(\r\n                minter.isActive,\r\n                \"Coin98DollarMintBurn: Minter already deactive\"\r\n            );\r\n            minter.isActive = false;\r\n        } else {\r\n            require(\r\n                sizePair > 0 &&\r\n                    sizePair == _decimals.length &&\r\n                    sizePair == _percents.length &&\r\n                    sizePair == _priceFeed.length,\r\n                \"Coin98DollarMintBurn: Invalid input lengths\"\r\n            );\r\n\r\n            require(\r\n                _systemFee >= 0,\r\n                \"Coin98DollarMintBurn: Invalid input amount\"\r\n            );\r\n\r\n            uint256 totalPercent = 0;\r\n\r\n            // Double check minter is valid token address\r\n            for (uint256 i = 0; i < sizePair; i++) {\r\n                address token = _pairs[i];\r\n\r\n                totalPercent = totalPercent.add(_percents[i]);\r\n\r\n                uint256 tokenCode;\r\n                assembly {\r\n                    tokenCode := extcodesize(token)\r\n                }\r\n                require(\r\n                    tokenCode > 0,\r\n                    \"Coin98DollarMintBurn: Invalid token address\"\r\n                );\r\n                require(\r\n                    token != address(0),\r\n                    \"Coin98DollarMintBurn: Minter is zero address\"\r\n                );\r\n            }\r\n\r\n            require(\r\n                totalPercent == Percent,\r\n                \"Coin98DollarMintBurn: Invalid percent value\"\r\n            );\r\n\r\n            // Push Minter to list if first time added\r\n            if (minter.pairs.length == 0) {\r\n                MINTER.push(_id);\r\n            }\r\n\r\n            // Update information minter\r\n            minter.isActive = true;\r\n            minter.pairs = _pairs;\r\n            minter.decimals = _decimals;\r\n            minter.percents = _percents;\r\n            minter.priceFeed = _priceFeed;\r\n            minter.systemFee = _systemFee;\r\n\r\n            emit UpdateMinter(\r\n                _id,\r\n                _pairs,\r\n                _decimals,\r\n                _percents,\r\n                _priceFeed,\r\n                _systemFee\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice Set Burner for burn cUSD\r\n    function setBurner(\r\n        uint256 _id,\r\n        bool _isActive,\r\n        address _token,\r\n        uint256 _decimals,\r\n        address _priceFeed,\r\n        uint256 _systemFee\r\n    ) external onlyOwner {\r\n        require(\r\n            _token != address(0),\r\n            \"Coin98DollarMintBurn: Burner is zero address\"\r\n        );\r\n\r\n        TokenBurner storage burner = TokenBurners[_id];\r\n        // Deactive current burner so no need to check anything here\r\n        if (!_isActive) {\r\n            require(\r\n                burner.isActive,\r\n                \"Coin98DollarMintBurn: Burner already deactive\"\r\n            );\r\n            burner.isActive = false;\r\n        } else {\r\n            require(\r\n                _systemFee >= 0,\r\n                \"Coin98DollarMintBurn: Invalid input amount\"\r\n            );\r\n\r\n            // Double check burner is valid token address\r\n            uint256 tokenCode;\r\n            assembly {\r\n                tokenCode := extcodesize(_token)\r\n            }\r\n            require(\r\n                tokenCode > 0,\r\n                \"Coin98DollarMintBurn: Invalid token address\"\r\n            );\r\n\r\n            // Push Minter to list if first time added\r\n            if (burner.token == address(0)) {\r\n                BURNER.push(_id);\r\n            }\r\n\r\n            // Update information minter\r\n            burner.isActive = true;\r\n            burner.token = _token;\r\n            burner.decimals = _decimals;\r\n            burner.priceFeed = _priceFeed;\r\n            burner.systemFee = _systemFee;\r\n\r\n            emit UpdateBurner(_id, _token, _decimals, _priceFeed, _systemFee);\r\n        }\r\n    }\r\n\r\n    /// @notice Set Minter supply and supply per day\r\n    function setMinterSupply(\r\n        uint256 _id,\r\n        uint256 _totalSupply,\r\n        uint256 _totalSupplyPerDay\r\n    ) external onlyOwner {\r\n        TokenMinter storage minter = TokenMinters[_id];\r\n        require(minter.isActive, \"Coin98DollarMintBurn: Minter not existed\");\r\n\r\n        require(\r\n            _totalSupply > 0 &&\r\n                _totalSupplyPerDay > 0 &&\r\n                _totalSupplyPerDay <= _totalSupply,\r\n            \"Coin98DollarMintBurn: Invalid input amount\"\r\n        );\r\n        minter.totalSupply = _totalSupply;\r\n        minter.totalSupplyPerDay = _totalSupplyPerDay;\r\n        emit UpdateMinterSupply(_id, _totalSupply, _totalSupplyPerDay);\r\n    }\r\n\r\n    /// @notice Set Burner supply and supply per day\r\n    function setBurnerSupply(\r\n        uint256 _id,\r\n        uint256 _totalSupply,\r\n        uint256 _totalSupplyPerDay\r\n    ) external onlyOwner {\r\n        TokenBurner storage burner = TokenBurners[_id];\r\n        require(burner.isActive, \"Coin98DollarMintBurn: Burner not existed\");\r\n\r\n        require(\r\n            _totalSupply > 0 &&\r\n                _totalSupplyPerDay > 0 &&\r\n                _totalSupplyPerDay <= _totalSupply,\r\n            \"Coin98DollarMintBurn: Invalid input amount\"\r\n        );\r\n        burner.totalSupply = _totalSupply;\r\n        burner.totalSupplyPerDay = _totalSupplyPerDay;\r\n        emit UpdateBurnerSupply(_id, _totalSupply, _totalSupplyPerDay);\r\n    }\r\n\r\n    /// @notice Check total supply and total supply per day of minter\r\n    function checkTotalMinted(TokenMinter storage minter, uint256 amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 diffHours = (block.timestamp - minter.lastExchange) / 60 / 60;\r\n        bool isOverTime = diffHours >= LIMIT_TIME;\r\n        uint256 currentTotalMinted = minter.totalMinted.add(amount);\r\n        uint256 currentTotalMintedToday = isOverTime ? 0 : minter.totalPerDay;\r\n        currentTotalMintedToday = currentTotalMintedToday.add(amount);\r\n\r\n        require(\r\n            currentTotalMintedToday <= minter.totalSupplyPerDay &&\r\n                currentTotalMinted <= minter.totalSupply,\r\n            \"Coin98DollarMintBurn: Amount must be less than total supply and total per day\"\r\n        );\r\n\r\n        // Update tracking information\r\n        minter.totalMinted = currentTotalMinted;\r\n        minter.totalPerDay = currentTotalMintedToday;\r\n        if (isOverTime) {\r\n            minter.lastExchange = block.timestamp;\r\n        }\r\n        return currentTotalMintedToday;\r\n    }\r\n\r\n    /// @notice Check total supply and total supply per day of burner\r\n    function checkTotalBurned(TokenBurner storage burner, uint256 amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 diffHours = (block.timestamp - burner.lastExchange) / 60 / 60;\r\n        bool isOverTime = diffHours >= LIMIT_TIME;\r\n\r\n        uint256 currentTotalBurned = burner.totalBurned.add(amount);\r\n        uint256 currentTotalBurnedToday = isOverTime ? 0 : burner.totalPerDay;\r\n        currentTotalBurnedToday = currentTotalBurnedToday.add(amount);\r\n\r\n        require(\r\n            currentTotalBurnedToday <= burner.totalSupplyPerDay &&\r\n                currentTotalBurned <= burner.totalSupply,\r\n            \"Coin98DollarMintBurn: Amount must be less than total supply and total per day\"\r\n        );\r\n\r\n        // Update tracking information\r\n        burner.totalBurned = currentTotalBurned;\r\n        burner.totalPerDay = currentTotalBurnedToday;\r\n        if (isOverTime) {\r\n            burner.lastExchange = block.timestamp;\r\n        }\r\n        return currentTotalBurnedToday;\r\n    }\r\n\r\n    /// @notice Burn cUSD and mint another token, based on the amount token wanted to mint\r\n    /// Total burned cUSD must NOT greater than total supply and total supply per day condition\r\n    /// @param _id Bunrer ID to burn with.\r\n    /// @param amount Amount to burn CUSD Token.\r\n    function burn(uint256 _id, uint256 amount) external onlyActiveBurner(_id) {\r\n        require(\r\n            amount > 0,\r\n            \"Coin98DollarMintBurn: Amount must be a positive number and greater than zero\"\r\n        );\r\n        TokenBurner storage burner = TokenBurners[_id];\r\n\r\n        (uint256 price, uint256 priceDecimals) = getLatestPrice(\r\n            burner.priceFeed\r\n        );\r\n\r\n        uint256 amountToBurn = amount\r\n            .mul(price)\r\n            .mul(BASE_DECIMALS)\r\n            .div(10**priceDecimals)\r\n            .div(10**burner.decimals);\r\n\r\n        require(amountToBurn > 0, \"Coin98DollarMintBurn: Amount must be a positive number and greater than zero\");\r\n\r\n        uint256 currentTotalBurnedToday = checkTotalBurned(\r\n            burner,\r\n            amountToBurn\r\n        );\r\n\r\n        // Transfer money first before do anything effects\r\n        CUSD_TOKEN.safeTransferFrom(msg.sender, address(this), amountToBurn);\r\n        CUSD_TOKEN.burn(amountToBurn);\r\n\r\n        // Update tracking information\r\n        uint256 systemFee = amount.mul(burner.systemFee).div(Percent);\r\n        burner.totalSystemFee = burner.totalSystemFee.add(systemFee);\r\n\r\n        IERC20 tokenMint = IERC20(burner.token);\r\n        uint256 amountToMint = amount.sub(systemFee);\r\n\r\n        require(\r\n            amountToMint > 0 &&\r\n                tokenMint.balanceOf(address(this)) >= amountToMint,\r\n            \"Coin98DollarMintBurn: Not enough balance to mint or invalid amount\"\r\n        );\r\n\r\n        tokenMint.safeTransfer(msg.sender, amountToMint);\r\n\r\n        emit Burn(\r\n            _id,\r\n            msg.sender,\r\n            amountToBurn,\r\n            amountToMint,\r\n            systemFee,\r\n            currentTotalBurnedToday\r\n        );\r\n    }\r\n\r\n    /// @notice Mint cUSD with amount of cUSD wanted to mint. Amount will be splited based on percent in couple tokens of minter (default amount is 18 decimals)\r\n    /// Current platform not accepted main wrapped token like WETH, WBNB\r\n    /// Total minted cUSD must NOT greater than total supply and total supply per day condition\r\n    /// @param _id Minter ID to mint with.\r\n    /// @param amount Amount to mint with CUSD Token.\r\n    function mint(uint256 _id, uint256 amount) public onlyActiveMinter(_id) {\r\n        require(\r\n            amount > 0,\r\n            \"Coin98DollarMintBurn: Amount must be a positive number and greater than zero\"\r\n        );\r\n        TokenMinter storage minter = TokenMinters[_id];\r\n\r\n        uint256 currentTotalMintedToday = checkTotalMinted(minter, amount);\r\n\r\n        uint256[] memory amountToTransfer = new uint256[](minter.pairs.length);\r\n\r\n        for (uint256 i = 0; i < minter.pairs.length; i++) {\r\n            uint256 tokenDecimals = minter.decimals[i];\r\n\r\n            // Feed the latest price by ChainLink\r\n            (uint256 price, uint256 priceDecimals) = getLatestPrice(\r\n                minter.priceFeed[i]\r\n            );\r\n\r\n            uint256 mulValue = amount\r\n                .mul(minter.percents[i])\r\n                .mul(10**tokenDecimals)\r\n                .mul(10**priceDecimals);\r\n\r\n            uint256 amountToBurn = mulValue\r\n                .div(Percent)\r\n                .div(price)\r\n                .div(BASE_DECIMALS);\r\n\r\n            require(amountToBurn > 0, \"Coin98DollarMintBurn: Amount must be a positive number and greater than zero\");\r\n\r\n            // Transfer money first before do anything effects\r\n            IERC20(minter.pairs[i]).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                amountToBurn\r\n            );\r\n            amountToTransfer[i] = amountToBurn;\r\n        }\r\n\r\n        uint256 systemFee = amount.mul(minter.systemFee).div(Percent);\r\n        // Update tracking information\r\n        minter.totalSystemFee = minter.totalSystemFee.add(systemFee);\r\n\r\n        // Claim system fee for each exchange cUSD\r\n        amount = amount.sub(systemFee);\r\n\r\n        require(\r\n            amount > 0,\r\n            \"Coin98DollarMintBurn: Total Mint must be a positive number and greater than zero\"\r\n        );\r\n\r\n        // Mint CUSD Token to .sender\r\n        CUSD_TOKEN.mint(msg.sender, amount);\r\n\r\n        emit Mint(\r\n            _id,\r\n            msg.sender,\r\n            amountToTransfer,\r\n            amount,\r\n            systemFee,\r\n            currentTotalMintedToday\r\n        );\r\n    }\r\n\r\n    /// @notice Withdraw all token and main token\r\n    /// @param tokens The token contract that want to withdraw\r\n    function withdrawMultiple(address[] calldata tokens) external onlyOwner {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            if (tokens[i] == address(0)) {\r\n                payable(msg.sender).transfer(address(this).balance);\r\n            } else {\r\n                IERC20 token = IERC20(tokens[i]);\r\n\r\n                uint256 tokenBalance = token.balanceOf(address(this));\r\n                if (tokenBalance > 0) {\r\n                    token.safeTransfer(msg.sender, tokenBalance);\r\n                }\r\n            }\r\n        }\r\n        emit WithdrawToken(tokens);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cusd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burner\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBurn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingToday\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountBurn\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingToday\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"systemFee\",\"type\":\"uint256\"}],\"name\":\"UpdateBurner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"systemFee\",\"type\":\"uint256\"}],\"name\":\"UpdateBurnerFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupplyPerDay\",\"type\":\"uint256\"}],\"name\":\"UpdateBurnerSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limitTime\",\"type\":\"uint256\"}],\"name\":\"UpdateLimitTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"decimals\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"percents\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"priceFeed\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"systemFee\",\"type\":\"uint256\"}],\"name\":\"UpdateMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"systemFee\",\"type\":\"uint256\"}],\"name\":\"UpdateMinterFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupplyPerDay\",\"type\":\"uint256\"}],\"name\":\"UpdateMinterSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BURNER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUSD_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MINTER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenBurners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"systemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastExchange\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenMinters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"systemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSystemFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastExchange\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_systemFee\",\"type\":\"uint256\"}],\"name\":\"setBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupplyPerDay\",\"type\":\"uint256\"}],\"name\":\"setBurnerSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_systemFee\",\"type\":\"uint256\"}],\"name\":\"setExchangeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_systemFee\",\"type\":\"uint256\"}],\"name\":\"setExchangeFeeBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limitTime\",\"type\":\"uint256\"}],\"name\":\"setLimitTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_pairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percents\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_priceFeed\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_systemFee\",\"type\":\"uint256\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupplyPerDay\",\"type\":\"uint256\"}],\"name\":\"setMinterSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Coin98DollarMintBurn", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000fa4ba88cf97e282c505bea095297786c16070129", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8d9a7920163d525c972d5f92eff3cf6a579a39d61858e158fb461167bfe57e2b"}