{"SourceCode": "pragma solidity 0.5.8;\r\n\r\n/**\r\n *\r\n * https://squirrel.finance\r\n * \r\n * SquirrelFinance is a DeFi project which offers farm insurance\r\n *\r\n */\r\n \r\n contract NutsStaking {\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 constant nuts = ERC20(0x8893D5fA71389673C5c4b9b3cb4EE1ba71207556);\r\n    \r\n    ERC20 constant nutsLP = ERC20(0x034C9E6B08c09a6144e0D0E52161338fB105e656); // v1\r\n    ERC20 constant apeLP = ERC20(0x789fd04BFbC64169104466Ee0d48716E0452Bcf6);\r\n    \r\n    UniswapV2 constant pancake = UniswapV2(0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F); // v1\r\n    UniswapV2 constant ape = UniswapV2(0xC0788A3aD43d79aa53B09c2EaCc313A787d1d607);\r\n    \r\n    NutsLPStaking constant apeLPStaking = NutsLPStaking(0xA998B89E50dFed569aC41DbAC5F2E4EdB2567251);\r\n\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => int256) payoutsTo;\r\n    \r\n    uint256 public nutsPerEpoch;\r\n    uint256 public payoutInterval = 6 hours;\r\n    uint256 public payoutEndTime;\r\n    uint256 public lastDripTime;\r\n\r\n    uint256 public totalDeposits;\r\n    uint256 profitPerShare;\r\n    uint256 constant internal magnitude = 2 ** 64;\r\n    address blobby = msg.sender;\r\n    \r\n    function() external payable { /* Can recieve BNB */ }\r\n    \r\n    constructor() public {\r\n        apeLP.approve(address(apeLPStaking), 2 ** 255);\r\n        nutsLP.approve(address(pancake), 2 ** 255);\r\n        nuts.approve(address(ape), 2 ** 255);\r\n    }\r\n\r\n    function receiveApproval(address player, uint256 amount, address, bytes calldata) external {\r\n        require(msg.sender == address(nuts));\r\n        dripNuts();\r\n        nuts.transferFrom(player, address(this), amount);\r\n        totalDeposits += amount;\r\n        balances[player] += amount;\r\n        payoutsTo[player] += (int256) (profitPerShare * amount);\r\n    }\r\n    \r\n    function depositFor(address player, uint256 amount) external {\r\n        dripNuts();\r\n        nuts.transferFrom(msg.sender, address(this), amount);\r\n        totalDeposits += amount;\r\n        balances[player] += amount;\r\n        payoutsTo[player] += (int256) (profitPerShare * amount);\r\n    }\r\n\r\n    function cashout(uint256 amount) external {\r\n        address recipient = msg.sender;\r\n        claimYield();\r\n        balances[recipient] = balances[recipient].sub(amount);\r\n        totalDeposits = totalDeposits.sub(amount);\r\n        payoutsTo[recipient] -= (int256) (profitPerShare * amount);\r\n        nuts.transfer(recipient, amount);\r\n    }\r\n\r\n    function claimYield() public {\r\n        dripNuts();\r\n        address recipient = msg.sender;\r\n        uint256 dividends = (uint256) ((int256)(profitPerShare * balances[recipient]) - payoutsTo[recipient]) / magnitude;\r\n        if (dividends > 0) {\r\n            payoutsTo[recipient] += (int256) (dividends * magnitude);\r\n            apeLP.transfer(recipient, dividends);\r\n        }\r\n    }\r\n    \r\n    function depositYield() external {\r\n        dripNuts();\r\n        address recipient = msg.sender;\r\n        uint256 dividends = (uint256) ((int256)(profitPerShare * balances[recipient]) - payoutsTo[recipient]) / magnitude;\r\n        \r\n        if (dividends > 0) {\r\n            payoutsTo[recipient] += (int256) (dividends * magnitude);\r\n            apeLPStaking.depositFor(recipient, dividends);\r\n        }\r\n    }\r\n    \r\n    function changePayoutInterval(uint256 newTimer) external {\r\n        require(msg.sender == blobby);\r\n        require(newTimer <= 24 hours);\r\n        require(newTimer >= 2 hours);\r\n        payoutInterval = newTimer;\r\n    }\r\n    \r\n    function sweepV1LP(uint256 minNuts, uint256 minBNB, uint256 minApeNuts, uint256 minApeBNB) external {\r\n        require(msg.sender == blobby);\r\n\r\n        uint256 nutsGained = nuts.balanceOf(address(this));\r\n        pancake.removeLiquidityETH(address(nuts), nutsLP.balanceOf(address(this)), minNuts, minBNB, address(this), 2 ** 255);\r\n        nutsGained = nuts.balanceOf(address(this)) - nutsGained;\r\n        \r\n        uint256 lpGained = apeLP.balanceOf(address(this));\r\n        ape.addLiquidityETH.value(address(this).balance)(address(nuts), nutsGained, minApeNuts, minApeBNB, address(this), 2 ** 255); \r\n        lpGained = apeLP.balanceOf(address(this)) - lpGained;\r\n        payoutNuts(lpGained);\r\n    }\r\n\r\n    function distributeDivs(uint256 amount) external {\r\n        if (nutsLP.allowance(msg.sender, address(this)) > 0 && nutsLP.balanceOf(msg.sender) > 0) {\r\n            require(nutsLP.transferFrom(msg.sender, address(this), amount));\r\n        }\r\n        \r\n        if (apeLP.allowance(msg.sender, address(this)) > 0 && apeLP.balanceOf(msg.sender) > 0) {\r\n            require(apeLP.transferFrom(msg.sender, address(this), amount));\r\n            payoutNuts(amount);\r\n        }\r\n    }\r\n    \r\n    function payoutNuts(uint256 amount) internal {\r\n        dripNuts();\r\n        uint256 remainder;\r\n        if (now < payoutEndTime) {\r\n            remainder = nutsPerEpoch * (payoutEndTime - now);\r\n        }\r\n        nutsPerEpoch = (amount + remainder) / payoutInterval;\r\n        payoutEndTime = now + payoutInterval;\r\n    }\r\n    \r\n    function dripNuts() internal {\r\n        uint256 divs;\r\n        if (now < payoutEndTime) {\r\n            divs = nutsPerEpoch * (now - lastDripTime);\r\n        } else if (lastDripTime < payoutEndTime) {\r\n            divs = nutsPerEpoch * (payoutEndTime - lastDripTime);\r\n        }\r\n        lastDripTime = now;\r\n\r\n        if (divs > 0) {\r\n            profitPerShare += divs * magnitude / totalDeposits;\r\n        }\r\n    }\r\n\r\n    function dividendsOf(address farmer) view public returns (uint256) {\r\n        uint256 totalProfitPerShare = profitPerShare;\r\n        uint256 divs;\r\n        if (now < payoutEndTime) {\r\n            divs = nutsPerEpoch * (now - lastDripTime);\r\n        } else if (lastDripTime < payoutEndTime) {\r\n            divs = nutsPerEpoch * (payoutEndTime - lastDripTime);\r\n        }\r\n        \r\n        if (divs > 0) {\r\n            totalProfitPerShare += divs * magnitude / totalDeposits;\r\n        }\r\n        return (uint256) ((int256)(totalProfitPerShare * balances[farmer]) - payoutsTo[farmer]) / magnitude;\r\n    }\r\n}\r\n\r\ninterface NutsLPStaking {\r\n    function depositFor(address player, uint256 amount) external;\r\n}\r\n\r\ninterface ERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function approveAndCall(address spender, uint tokens, bytes calldata data) external returns (bool success);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function burn(uint256 amount) external;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface WBNB {\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\ninterface UniswapV2 {\r\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function removeLiquidityETH(address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external returns (uint amountToken, uint amountETH);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"farmer\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimYield\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositYield\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTimer\",\"type\":\"uint256\"}],\"name\":\"changePayoutInterval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeDivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cashout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minNuts\",\"type\":\"uint256\"},{\"name\":\"minBNB\",\"type\":\"uint256\"},{\"name\":\"minApeNuts\",\"type\":\"uint256\"},{\"name\":\"minApeBNB\",\"type\":\"uint256\"}],\"name\":\"sweepV1LP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nutsPerEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDripTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]", "ContractName": "NutsStaking", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://e6857adc4628a4f605c3c08bb1d5b1dc192d127ad1c0b555c706d59e0cf3a3e4"}