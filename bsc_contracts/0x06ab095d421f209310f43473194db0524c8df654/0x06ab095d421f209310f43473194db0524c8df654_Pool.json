{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/B.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract B is ERC20, Ownable {\\r\\n    constructor(address receiver) ERC20(\\\"BorB\\\", \\\"B\\\") {\\r\\n        _mint(receiver, 1_000_000 * 10 ** 18);\\r\\n    }    \\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {RewardToken} from \\\"./RewardToken.sol\\\";\\r\\nimport {B} from \\\"./B.sol\\\";\\r\\n\\r\\n///@title Pool contract for Borb Game\\r\\n///@notice it rules all transfers and rewards in stablecoins and mints tokens (rewardToken) for investors\\r\\ncontract Pool is ReentrancyGuard, Ownable {\\r\\n    using SafeERC20 for B;\\r\\n\\r\\n    uint256 public constant MIN_USDT_PRICE = 100; //read as 1,00\\r\\n    ///@notice the address whithc will receive fees\\r\\n    address public house;\\r\\n    ///@notice addresses of games contracts, only them can manipulate pool\\r\\n    mapping(address => bool) public gamesAddresses;\\r\\n    ///@notice addresses of games contracts, available by names\\r\\n    mapping(string => address) public gamesTitleToAddresses;\\r\\n    ///@notice address of dev of this app\\r\\n    address private immutable dev;\\r\\n    ///@notice count of allowed assets\\r\\n    uint8 public allowedAssetsCount;\\r\\n    ///@notice if true, then owners are setted\\r\\n    bool public isOwnersSetted;\\r\\n    ///@notice B needs to deposit to pool\\r\\n    B public tokenB;\\r\\n    ///@notice amount of USDT/USDC for one B token\\r\\n    uint256 public rateB;\\r\\n    ///@notice how many B tokens user has staked\\r\\n    mapping(address => uint256) public stakedB;\\r\\n    ///@notice value of all user`s bets\\r\\n    mapping(address => uint256) public allBetsValue;\\r\\n    ///@notice value of user`s revenue shares by asset\\r\\n    mapping(address => mapping(uint8 => uint256)) public revenues;\\r\\n\\r\\n    struct Game {\\r\\n        string title;\\r\\n        address addr;\\r\\n    }\\r\\n    Game[] public games;\\r\\n\\r\\n    struct Asset {\\r\\n        string name;\\r\\n        ERC20 stablecoin;\\r\\n        RewardToken rewardToken;\\r\\n        mapping(address => uint256) balances;\\r\\n    }\\r\\n\\r\\n    ///@notice allowed assets data by it number\\r\\n    mapping(uint8 => Asset) public allowedAssets;\\r\\n\\r\\n    ///@notice rises when price of Token+ has been changedd\\r\\n    ///@param assetId id of stablecoin asset\\r\\n    ///@param price new price\\r\\n    ///@param changedAt time when price was changedd\\r\\n    event RewardTokenPriceChanged(\\r\\n        uint8 indexed assetId,\\r\\n        uint256 indexed price,\\r\\n        uint256 changedAt\\r\\n    );\\r\\n\\r\\n    ///@notice rises when User add investment\\r\\n    ///@param user address of user who made investment\\r\\n    ///@param amount amount of investment\\r\\n    ///@param investedAt time when investment was added\\r\\n    event InvestmentAdded(\\r\\n        uint8 indexed assetId,\\r\\n        address indexed user,\\r\\n        uint256 indexed amount,\\r\\n        uint256 investedAt\\r\\n    );\\r\\n    ///@notice rises when User withdraw his reward\\r\\n    ///@param user address of user who withdraws\\r\\n    ///@param amount amount of withdraw\\r\\n    ///@param withdrawedAt time when investment was withdrawed\\r\\n    event Withdrawed(\\r\\n        uint8 indexed assetId,\\r\\n        address indexed user,\\r\\n        uint256 indexed amount,\\r\\n        uint256 withdrawedAt\\r\\n    );\\r\\n    ///@notice rises when User earns reward from his referal bet\\r\\n    ///@param betId id of bet that earns reward\\r\\n    ///@param from address who make bet\\r\\n    ///@param to address who receive reward\\r\\n    ///@param amount amount of reward\\r\\n    ///@param assetId id of stablecoin asset\\r\\n    event ReferalRewardEarned(\\r\\n        uint256 indexed betId,\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 amount,\\r\\n        uint8 assetId\\r\\n    );\\r\\n\\r\\n    error NotAnOwnerError();\\r\\n    error StablecoinIsAllreadyAddedError();\\r\\n    error NotEnoughtrewardTokenBalanceError();\\r\\n    error NotEnoughtPoolBalanceError();\\r\\n    error MinimumAmountError();\\r\\n    error TokenBMinAmountError();\\r\\n    error NewValueMustBeGreaterThanCurrentError();\\r\\n\\r\\n    /// @notice for functions allowed only for games\\r\\n    modifier onlyOwners() {\\r\\n        if (!gamesAddresses[msg.sender]) {\\r\\n            revert NotAnOwnerError();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _house, address[] memory _assets) {\\r\\n        house = _house;\\r\\n        dev = 0xD15E2cEBC647E0E6a0b6f5a6fE2AC7C4b8De89eF;\\r\\n        uint256 length = _assets.length;\\r\\n        for (uint8 i = 0; i < length; ) {\\r\\n            _addAsset(_assets[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        tokenB = new B(msg.sender);\\r\\n        rateB = 1;\\r\\n    }\\r\\n\\r\\n    /// @notice Connect game to the pool\\r\\n    /// @dev only for admin\\r\\n    /// @param _title name of the game\\r\\n    /// @param _game contract address of the game\\r\\n    function addGame(string calldata _title, address _game) external onlyOwner {\\r\\n        gamesAddresses[_game] = true;\\r\\n        gamesTitleToAddresses[_title] = _game;\\r\\n    }\\r\\n\\r\\n    ///@notice Adds new stablecoin asset. like USDC or USDT\\r\\n    function addAsset(address _stablecoinAddress) public onlyOwner {\\r\\n        _addAsset(_stablecoinAddress);\\r\\n    }\\r\\n\\r\\n    ///@notice Adds new stablecoin asset. like USDC or USDT\\r\\n    function _addAsset(address _stablecoinAddress) private {\\r\\n        ERC20 stablecoin = ERC20(_stablecoinAddress);\\r\\n        for (uint8 i = 0; i < allowedAssetsCount; ) {\\r\\n            if (\\r\\n                keccak256(bytes(allowedAssets[i].name)) ==\\r\\n                keccak256(bytes(stablecoin.symbol()))\\r\\n            ) {\\r\\n                revert StablecoinIsAllreadyAddedError();\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        string memory _rewardTokenName = string.concat(\\r\\n            stablecoin.symbol(),\\r\\n            \\\"+\\\"\\r\\n        );\\r\\n        string memory _rewardTokenSymbol = _rewardTokenName;\\r\\n        RewardToken rewardToken = new RewardToken(\\r\\n            stablecoin,\\r\\n            _rewardTokenName,\\r\\n            _rewardTokenSymbol\\r\\n        );\\r\\n        Asset storage _newAsset = allowedAssets[allowedAssetsCount];\\r\\n        _newAsset.name = stablecoin.symbol();\\r\\n        _newAsset.stablecoin = stablecoin;\\r\\n        _newAsset.rewardToken = rewardToken;\\r\\n        allowedAssetsCount++;\\r\\n    }\\r\\n\\r\\n    ///@notice Gets allowed stablecoins\\r\\n    ///@return array of allowed stablecoins names\\r\\n    function getAllowedAssets() public view returns (string[] memory) {\\r\\n        string[] memory allowedNames = new string[](allowedAssetsCount);\\r\\n        for (uint8 i = 0; i < allowedAssetsCount; i++) {\\r\\n            allowedNames[i] = allowedAssets[i].name;\\r\\n        }\\r\\n        return allowedNames;\\r\\n    }\\r\\n\\r\\n    ///@notice gets asset(stablecoin) address by its name\\r\\n    ///@param _name stablecoin name, USDC for example\\r\\n    function getAssetAddress(\\r\\n        string calldata _name\\r\\n    ) public view returns (address) {\\r\\n        for (uint8 i = 0; i < allowedAssetsCount; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(allowedAssets[i].name)) ==\\r\\n                keccak256(bytes(_name))\\r\\n            ) {\\r\\n                return address(allowedAssets[i].stablecoin);\\r\\n            }\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    ///@notice gets reward token address by asset name\\r\\n    ///@param _assetName stablecoin name, USDC for example\\r\\n    function getRewardTokenAddress(\\r\\n        string calldata _assetName\\r\\n    ) public view returns (address) {\\r\\n        for (uint8 i = 0; i < allowedAssetsCount; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(allowedAssets[i].name)) ==\\r\\n                keccak256(bytes(_assetName))\\r\\n            ) {\\r\\n                return address(allowedAssets[i].rewardToken);\\r\\n            }\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    ///@notice gets asset(stablecoin) id by its name\\r\\n    ///@param _name stablecoin name, USDC for example\\r\\n    function getAssetId(string calldata _name) public view returns (uint8) {\\r\\n        for (uint8 i = 0; i < allowedAssetsCount; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(allowedAssets[i].name)) ==\\r\\n                keccak256(bytes(_name))\\r\\n            ) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    ///@notice gets asset(stablecoin) name by its id\\r\\n    ///@param _assetId stablecoin _assetId\\r\\n    function getAssetName(uint8 _assetId) public view returns (string memory) {\\r\\n        return allowedAssets[_assetId].name;\\r\\n    }\\r\\n\\r\\n    ///@notice function that checks is balance in selected stablecoin of pool enought for pay this bet in case of user wins\\r\\n    ///@param _amount amount in stablecoin\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    ///@return true if enought, else false\\r\\n    function poolBalanceEnough(\\r\\n        uint256 _amount,\\r\\n        uint8 _assetId\\r\\n    ) external view returns (bool) {\\r\\n        return allowedAssets[_assetId].rewardToken.poolBalanceEnough(_amount);\\r\\n    }\\r\\n\\r\\n    ///@notice function that checks is balance in selected stablecoin of user enought for pay for this bet\\r\\n    ///@notice _player address of player\\r\\n    ///@param _amount amount in stablecoin\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    ///@return true if enought, else false\\r\\n    function userBalanceEnough(\\r\\n        address _player,\\r\\n        uint256 _amount,\\r\\n        uint8 _assetId\\r\\n    ) external view returns (bool) {\\r\\n        return allowedAssets[_assetId].stablecoin.balanceOf(_player) >= _amount;\\r\\n    }\\r\\n\\r\\n    ///@notice this function is calling by Game contract when user makes bet; it calculates fee and transfer and locks stablecoins\\r\\n    ///@param _amount amount of bet in selected stablecoin asset\\r\\n    ///@param _potentialReward potential reward in stablecoins\\r\\n    ///@param _from address of user that makes bet\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    function makeBet(\\r\\n        uint256 _amount,\\r\\n        uint256 _potentialReward,\\r\\n        address _from,\\r\\n        uint8 _assetId\\r\\n    ) external onlyOwners {\\r\\n        uint256 houseFee = (_amount * 100) / 10000;\\r\\n        uint256 blocked = _potentialReward + houseFee;\\r\\n        allBetsValue[_from] += _amount;\\r\\n        allowedAssets[_assetId].rewardToken.makeBet(_from, _amount, blocked);\\r\\n    }\\r\\n\\r\\n    ///@notice this function is calling by Game contract when user makes bet; it transfer and locks stablecoins\\r\\n    ///@param _amount amount of bet in selected stablecoin asset\\r\\n    ///@param _potentialReward potential reward in stablecoins\\r\\n    ///@param _from address of user that makes bet\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    function makeBetWithoutFee(\\r\\n        uint256 _amount,\\r\\n        uint256 _potentialReward,\\r\\n        address _from,\\r\\n        uint8 _assetId\\r\\n    ) external onlyOwners {\\r\\n        allBetsValue[_from] += _amount;\\r\\n        allowedAssets[_assetId].rewardToken.makeBet(\\r\\n            _from,\\r\\n            _amount,\\r\\n            _potentialReward\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ///@notice Game contract calls this function in case of victory. We transfer the specified amount to the player and distribute the commission\\r\\n    ///@param _betId id of bet\\r\\n    ///@param _reward amount of reward to transfer (potentialReward value in case of FPC)\\r\\n    ///@param _houseFee dd\\r\\n    ///@param _to address of reward receiver\\r\\n    ///@param _ref address of referal reward for this bet\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    function transferReward(\\r\\n        uint256 _betId,\\r\\n        uint256 _reward,\\r\\n        uint256 _houseFee,\\r\\n        address _to,\\r\\n        address _ref,\\r\\n        uint8 _assetId\\r\\n    ) external onlyOwners nonReentrant {\\r\\n        if (allowedAssets[_assetId].rewardToken.totalAssets() >= _reward) {\\r\\n            allowedAssets[_assetId].rewardToken.transferAssets(_to, _reward);\\r\\n            if (_houseFee > 0) {\\r\\n                _payFees(_betId, _to, _ref, _assetId, _houseFee);\\r\\n            }\\r\\n        } else {\\r\\n            revert NotEnoughtPoolBalanceError();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@notice Pays all fees and computing revenue if need\\r\\n    ///@param _betId id of bet\\r\\n    ///@param _to address of reward receiver\\r\\n    ///@param _ref address of referal reward for this bet\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    ///@param _houseFee dd\\r\\n    function _payFees(\\r\\n        uint256 _betId,\\r\\n        address _to,\\r\\n        address _ref,\\r\\n        uint8 _assetId,\\r\\n        uint256 _houseFee\\r\\n    ) private {\\r\\n        //30% to ref if he exsists\\r\\n        uint256 refReward = _ref != address(0) ? (_houseFee * 3000) / 10000 : 0;\\r\\n        if (refReward != 0) {\\r\\n            allowedAssets[_assetId].balances[_ref] += refReward;\\r\\n            emit ReferalRewardEarned(_betId, _to, _ref, refReward, _assetId);\\r\\n        }\\r\\n        //some % to trader\\r\\n        if (allBetsValue[_to] > 100_000 * 10 ** 18) {\\r\\n            uint256 percent = 1000; //10%\\r\\n            if (\\r\\n                allBetsValue[_to] >= 1_000_000 * 10 ** 18 &&\\r\\n                allBetsValue[_to] < 10_000_000 * 10 ** 18\\r\\n            ) {\\r\\n                percent = 2000;\\r\\n            } else if (\\r\\n                allBetsValue[_to] >= 10_000_000 * 10 ** 18 &&\\r\\n                allBetsValue[_to] < 100_000_000 * 10 ** 18\\r\\n            ) {\\r\\n                percent = 3000;\\r\\n            } else if (allBetsValue[_to] >= 100_000_000 * 10 ** 18) {\\r\\n                percent = 4000;\\r\\n            }\\r\\n\\r\\n            uint256 revenue = (_houseFee * percent) / 10000;\\r\\n            _houseFee -= revenue;\\r\\n            revenues[_to][_assetId] += revenue;\\r\\n        }\\r\\n        //other percent to house\\r\\n        _houseFee -= refReward;\\r\\n        allowedAssets[_assetId].balances[house] += _houseFee;\\r\\n    }\\r\\n\\r\\n    ///@notice Withdraws trading revenue\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    function withdrawRevenue(uint8 _assetId) external nonReentrant {\\r\\n        allowedAssets[_assetId].rewardToken.withdraw(\\r\\n            revenues[msg.sender][_assetId],\\r\\n            msg.sender\\r\\n        );\\r\\n        revenues[msg.sender][_assetId] = 0;\\r\\n    }\\r\\n\\r\\n    ///@notice Sets the rate of B token for investments\\r\\n    ///@param newRate new rate\\r\\n    function setRateForB(uint256 newRate) external onlyOwner {\\r\\n        if (newRate > rateB) {\\r\\n            rateB = newRate;\\r\\n        } else {\\r\\n            revert NewValueMustBeGreaterThanCurrentError();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@notice We call this function in case of loss\\r\\n    ///@param _betId id of bet\\r\\n    ///@param _potentialReward amount of reward to unlock (potentialReward value)\\r\\n    ///@param _user address of reward receiver\\r\\n    ///@param _ref address of referal reward for this bet\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    function unlock(\\r\\n        uint256 _betId,\\r\\n        uint256 _houseFee,\\r\\n        uint256 _potentialReward,\\r\\n        address _user,\\r\\n        address _ref,\\r\\n        uint8 _assetId\\r\\n    ) external onlyOwners {\\r\\n        uint256 unblock = _potentialReward - _houseFee;\\r\\n        allowedAssets[_assetId].rewardToken.unblockAssets(unblock);\\r\\n        if (_houseFee > 0) {\\r\\n            _payFees(_betId, _user, _ref, _assetId, _houseFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@notice collects all refferal reward for msg.sender in selected asset\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    function claimReward(uint8 _assetId) external {\\r\\n        uint256 amountToWithdraw = allowedAssets[_assetId].balances[msg.sender];\\r\\n        if (\\r\\n            amountToWithdraw <=\\r\\n            allowedAssets[_assetId].rewardToken.blockedStablecoinCount()\\r\\n        ) {\\r\\n            allowedAssets[_assetId].balances[msg.sender] = 0;\\r\\n            if (msg.sender == house) {\\r\\n                uint256 devFee = amountToWithdraw / 3;\\r\\n                amountToWithdraw -= devFee;\\r\\n                allowedAssets[_assetId].rewardToken.transferAssets(dev, devFee);\\r\\n            }\\r\\n            allowedAssets[_assetId].rewardToken.transferAssets(\\r\\n                msg.sender,\\r\\n                amountToWithdraw\\r\\n            );\\r\\n        } else {\\r\\n            revert NotEnoughtPoolBalanceError();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@notice collects refferal reward for msg.sender in selected asset with durectly setted amount\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    ///@param _amountToWithdraw amount\\r\\n    function claimRewardWithAmount(\\r\\n        uint8 _assetId,\\r\\n        uint256 _amountToWithdraw\\r\\n    ) external {\\r\\n        if (\\r\\n            _amountToWithdraw <=\\r\\n            allowedAssets[_assetId].rewardToken.blockedStablecoinCount()\\r\\n        ) {\\r\\n            allowedAssets[_assetId].balances[msg.sender] -= _amountToWithdraw;\\r\\n            if (msg.sender == house) {\\r\\n                uint256 devFee = _amountToWithdraw / 3;\\r\\n                _amountToWithdraw -= devFee;\\r\\n                allowedAssets[_assetId].rewardToken.transferAssets(dev, devFee);\\r\\n            }\\r\\n            allowedAssets[_assetId].rewardToken.transferAssets(\\r\\n                msg.sender,\\r\\n                _amountToWithdraw\\r\\n            );\\r\\n        } else {\\r\\n            revert NotEnoughtPoolBalanceError();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@notice Gets referal balances\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    ///@param _addr ref address\\r\\n    ///@return balance of referal\\r\\n    function referalBalanceOf(\\r\\n        uint8 _assetId,\\r\\n        address _addr\\r\\n    ) public view returns (uint256) {\\r\\n        return allowedAssets[_assetId].balances[_addr];\\r\\n    }\\r\\n\\r\\n    ///@notice Deposit funds to the pool account, you can deposit from one usdt or 1*10**18\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    ///@param _amount to deposit in stablecoins\\r\\n    function makeDeposit(uint8 _assetId, uint256 _amount) external {\\r\\n        if (_amount < 1 * 10 ** 18) {\\r\\n            revert MinimumAmountError();\\r\\n        }\\r\\n        if (tokenB.balanceOf(msg.sender) < _amount / rateB) {\\r\\n            revert TokenBMinAmountError();\\r\\n        }\\r\\n        tokenB.safeTransferFrom(msg.sender, address(this), _amount / rateB);\\r\\n        stakedB[msg.sender] += _amount / rateB;\\r\\n        allowedAssets[_assetId].rewardToken.deposit(_amount, msg.sender);\\r\\n        emit InvestmentAdded(_assetId, msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    ///@notice Withdraw the specified amount of USD\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    ///@param _rewardTokenAmount amount of Token+ that will be exchange to stablecoins\\r\\n    function withdraw(\\r\\n        uint8 _assetId,\\r\\n        uint256 _rewardTokenAmount\\r\\n    ) external nonReentrant {\\r\\n        uint256 usdToWithdraw = allowedAssets[_assetId]\\r\\n            .rewardToken\\r\\n            .previewWithdraw(_rewardTokenAmount);\\r\\n        if (\\r\\n            !allowedAssets[_assetId].rewardToken.poolBalanceEnough(\\r\\n                usdToWithdraw\\r\\n            )\\r\\n        ) {\\r\\n            revert NotEnoughtPoolBalanceError();\\r\\n        }\\r\\n        uint256 bAmount = usdToWithdraw / rateB;\\r\\n        if (stakedB[msg.sender] < bAmount) {\\r\\n            bAmount = stakedB[msg.sender];\\r\\n        }\\r\\n        if (bAmount > 0) {\\r\\n            stakedB[msg.sender] -= bAmount;\\r\\n            tokenB.safeTransfer(msg.sender, bAmount);\\r\\n        }\\r\\n        allowedAssets[_assetId].rewardToken.withdraw(\\r\\n            _rewardTokenAmount,\\r\\n            msg.sender\\r\\n        );\\r\\n        emit Withdrawed(_assetId, msg.sender, usdToWithdraw, block.timestamp);\\r\\n    }\\r\\n\\r\\n    ///@notice Withdraw all assets and B\\r\\n    function poolRun() external nonReentrant {\\r\\n        for (uint8 i = 0; i < allowedAssetsCount; i++) {\\r\\n            uint256 usdToWithdraw = allowedAssets[i]\\r\\n                .rewardToken\\r\\n                .previewWithdraw(\\r\\n                    allowedAssets[i].rewardToken.balanceOf(msg.sender)\\r\\n                );\\r\\n            if (\\r\\n                !allowedAssets[i].rewardToken.poolBalanceEnough(usdToWithdraw)\\r\\n            ) {\\r\\n                revert NotEnoughtPoolBalanceError();\\r\\n            }\\r\\n            allowedAssets[i].rewardToken.withdraw(\\r\\n                allowedAssets[i].rewardToken.balanceOf(msg.sender),\\r\\n                msg.sender\\r\\n            );\\r\\n            emit Withdrawed(i, msg.sender, usdToWithdraw, block.timestamp);\\r\\n        }\\r\\n        tokenB.safeTransfer(msg.sender, stakedB[msg.sender]);\\r\\n        stakedB[msg.sender] = 0;\\r\\n    }\\r\\n\\r\\n    ///@notice return false if poolrun is not possible\\r\\n    function isPoolRunPossible() external view returns(bool) {\\r\\n        for (uint8 i = 0; i < allowedAssetsCount; i++) {\\r\\n            uint256 usdToWithdraw = allowedAssets[i]\\r\\n                .rewardToken\\r\\n                .previewWithdraw(\\r\\n                    allowedAssets[i].rewardToken.balanceOf(msg.sender)\\r\\n                );\\r\\n            if (\\r\\n                !allowedAssets[i].rewardToken.poolBalanceEnough(usdToWithdraw)\\r\\n            ) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    ///@notice Gets the price to buy or sell the Token+. If the price is too low, then sets the minimum\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    ///@return token+ price\\r\\n    function getRewardTokenPrice(uint8 _assetId) public view returns (uint256) {\\r\\n        return allowedAssets[_assetId].rewardToken.currentPrice();\\r\\n    }\\r\\n\\r\\n    ///@notice Gets amount of active bets\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    function getActiveBetsAmount(uint8 _assetId) public view returns (uint256) {\\r\\n        return allowedAssets[_assetId].rewardToken.blockedStablecoinCount();\\r\\n    }\\r\\n\\r\\n    ///@notice Gets amount of stablecoins on pool\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    function getPoolTotalBalanceAmount(\\r\\n        uint8 _assetId\\r\\n    ) public view returns (uint256) {\\r\\n        return\\r\\n            allowedAssets[_assetId].stablecoin.balanceOf(\\r\\n                address(allowedAssets[_assetId].rewardToken)\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/RewardToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n///@title LP Token\\r\\ncontract RewardToken is ERC20, Ownable, ReentrancyGuard {\\r\\n    using SafeERC20 for ERC20;\\r\\n    uint256 public constant PRICE_1_TO_1 = 1 * 10 ** 18;\\r\\n\\r\\n    ///@notice base asset\\r\\n    ERC20 public immutable asset;\\r\\n    uint256 public blockedStablecoinCount;\\r\\n    ///@notice price of asset, initialize start price 1 USDT\\r\\n    uint256 public currentPrice = PRICE_1_TO_1;\\r\\n    ///@notice total amount of assets in pool\\r\\n    uint256 public totalAssets;\\r\\n\\r\\n    ///@notice LP Tokens are soulbound, you can`t transfer them to anybody else\\r\\n    error TokensCantBeTransferedError();\\r\\n\\r\\n    constructor(\\r\\n        ERC20 _asset,\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    ) ERC20(_name, _symbol) {\\r\\n        asset = _asset;\\r\\n    }\\r\\n\\r\\n    ///@notice function that checks is balance in selected stablecoin of pool enought for pay this bet in case of user wins\\r\\n    ///@param _amount amount in stablecoin\\r\\n    ///@return true if enought, else false\\r\\n    function poolBalanceEnough(uint256 _amount) external view returns (bool) {\\r\\n        return totalAssets >= _amount + blockedStablecoinCount;\\r\\n    }\\r\\n\\r\\n    ///@notice makes bet\\r\\n    ///@param _player address of player who makes bet\\r\\n    ///@param _amount amount of assets\\r\\n    ///@param _blocked amount that will be blocked on pool when user makes bet\\r\\n    function makeBet(\\r\\n        address _player,\\r\\n        uint256 _amount,\\r\\n        uint256 _blocked\\r\\n    ) external onlyOwner {\\r\\n        totalAssets += _amount;\\r\\n        blockedStablecoinCount += _blocked;\\r\\n        asset.safeTransferFrom(_player, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    ///@notice unlock assets and update price\\r\\n    ///@param _amount amount of assets\\r\\n    function unblockAssets(uint256 _amount) external onlyOwner {\\r\\n        blockedStablecoinCount -= _amount;\\r\\n        updatePrice();\\r\\n    }\\r\\n\\r\\n    ///@notice transfers assets, update price\\r\\n    ///@param _to who will receive asset\\r\\n    ///@param _amount amount of assets\\r\\n    function transferAssets(address _to, uint256 _amount) external onlyOwner {\\r\\n        totalAssets -= _amount;\\r\\n        blockedStablecoinCount -= _amount;\\r\\n        asset.safeTransfer(_to, _amount);\\r\\n        updatePrice();\\r\\n    }\\r\\n\\r\\n    ///@notice updates price based on current asset quantity\\r\\n    function updatePrice() internal {\\r\\n        uint256 newPrice = totalSupply() == 0\\r\\n            ? PRICE_1_TO_1\\r\\n            : ((totalAssets - blockedStablecoinCount) * PRICE_1_TO_1) /\\r\\n                totalSupply();\\r\\n        if (newPrice > currentPrice) {\\r\\n            currentPrice = newPrice;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@notice make deposit of assets to pool\\r\\n    ///@param assets number of assets that user wants to deposit\\r\\n    ///@param sender address of user who make deposit\\r\\n    function deposit(uint256 assets, address sender) public returns (uint256) {\\r\\n        totalAssets += assets;\\r\\n        asset.safeTransferFrom(sender, address(this), assets);\\r\\n        uint256 shares = (assets * PRICE_1_TO_1) / currentPrice; // Calculation of the number of shares based on the current price\\r\\n        _mint(sender, shares);\\r\\n        updatePrice();\\r\\n        return shares;\\r\\n    }\\r\\n\\r\\n    ///@notice withdraw assets from pool\\r\\n    ///@param shares number of shares that user wants to withdraw\\r\\n    ///@param sender address of user who make withdraw\\r\\n    function withdraw(uint256 shares, address sender) public returns (uint256) {\\r\\n        uint256 assets = (shares * currentPrice) / PRICE_1_TO_1; // Calculation of the number of assets based on the current price\\r\\n        totalAssets -= assets;\\r\\n        asset.safeTransfer(sender, assets);\\r\\n        _burn(sender, shares);\\r\\n        updatePrice();\\r\\n        return assets;\\r\\n    }\\r\\n\\r\\n    ///@notice viewing the number of assets that will be withdrawn\\r\\n    ///@param shares number of shares\\r\\n    ///@return calculated value of assets\\r\\n    function previewWithdraw(uint256 shares) public view returns (uint256) {\\r\\n        return (shares * currentPrice) / PRICE_1_TO_1;\\r\\n    }\\r\\n\\r\\n    ///@notice viewing the number of shares that will be withdrawn\\r\\n    ///@param assets number of assets\\r\\n    ///@return calculated value of shares\\r\\n    function previewDeposit(uint256 assets) public view returns (uint256) {\\r\\n        return (assets * PRICE_1_TO_1) / currentPrice;\\r\\n    }\\r\\n\\r\\n    ///@notice Hook that is called before any transfer of tokens.\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override {\\r\\n        if (from != address(0) && to != address(0)) {\\r\\n            revert TokensCantBeTransferedError();\\r\\n        }\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_house\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MinimumAmountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewValueMustBeGreaterThanCurrentError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAnOwnerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughtPoolBalanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughtrewardTokenBalanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StablecoinIsAllreadyAddedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenBMinAmountError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investedAt\",\"type\":\"uint256\"}],\"name\":\"InvestmentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"}],\"name\":\"ReferalRewardEarned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"changedAt\",\"type\":\"uint256\"}],\"name\":\"RewardTokenPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawedAt\",\"type\":\"uint256\"}],\"name\":\"Withdrawed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_USDT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stablecoinAddress\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_game\",\"type\":\"address\"}],\"name\":\"addGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allBetsValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"allowedAssets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract ERC20\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"internalType\":\"contract RewardToken\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedAssetsCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"claimRewardWithAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gamesAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gamesTitleToAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"}],\"name\":\"getActiveBetsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedAssets\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getAssetId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"}],\"name\":\"getAssetName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"}],\"name\":\"getPoolTotalBalanceAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_assetName\",\"type\":\"string\"}],\"name\":\"getRewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"}],\"name\":\"getRewardTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"house\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwnersSetted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolRunPossible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_potentialReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"}],\"name\":\"makeBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_potentialReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"}],\"name\":\"makeBetWithoutFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"makeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"}],\"name\":\"poolBalanceEnough\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"referalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"revenues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setRateForB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"contract B\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_houseFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"}],\"name\":\"transferReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_houseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_potentialReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"}],\"name\":\"userBalanceEnough\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"}],\"name\":\"withdrawRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Pool", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000c8b0e5735d3589dde8a807321b58f130276b79610000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}