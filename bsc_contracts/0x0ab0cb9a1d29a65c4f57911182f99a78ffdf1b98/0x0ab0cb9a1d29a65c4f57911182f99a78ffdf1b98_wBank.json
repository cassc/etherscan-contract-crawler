{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.4.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function getTaxPercent() external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\npragma solidity >=0.6.0;\r\n\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeBEP20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeBEP20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeBEP20: BEP20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.0;\r\n\r\nabstract contract Context {\r\n    constructor(){}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.0;\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor(){\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.2;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract wBank is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IBEP20;\r\n    IBEP20 public usdtToken;\r\n\r\n    uint256 public minjoin = 20 * (10**18);\r\n    uint256 public minque = 20 * (10**18);\r\n    uint256 public price = 10 * (10**10);\r\n    address[] public ca;\r\n    address[] public ca2;\r\n    uint256 public index;\r\n    uint256 public turn = 0;\r\n    uint256 public lastturn = 0;\r\n    uint256 public percentD = 20;\r\n    uint256 public percentMonth = 10;\r\n    address[] public path = [\r\n        0x55d398326f99059fF775485246999027B3197955,\r\n        0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\r\n    ];\r\n    uint256[] public bonuslevel = [1000, 500, 400, 300, 200, 100];\r\n    uint256 public timenextque = 2592000; //available in 30 days\r\n    uint256 public timedaily = 86400;//86400;\r\n    uint256 public timeque = 30; //expired after 3 years\r\n  \r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 createDate;\r\n        uint256 lastQueue;\r\n        uint256 totalque;\r\n        uint256 totalrec;\r\n        uint256 totalref;\r\n    }\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n    mapping(address => address) public referrers;\r\n    mapping(address => address[]) public refdown;\r\n\r\n    Queue[] public lsQueue;\r\n    mapping(address => bool) public admins;\r\n\r\n    struct Queue {\r\n        address receiver;\r\n        uint256 amount; //in usdt\r\n        uint256 amountrec;\r\n        uint256 createDate;\r\n    }\r\n\r\n    //transid 0 join\r\n    //transid 1 ref\r\n    //transid 2 monthly gh\r\n    event Trans(address indexed user, uint256 amount,uint256 transid,uint256 datetime);\r\n\r\n    //test net\r\n    //0x227126c6cBb4A6a9a205995cd7b8236C66Eb199B\r\n    //0x55d398326f99059fF775485246999027B3197955\r\n    constructor(\r\n        IBEP20 _usdtToken\r\n    ) {\r\n        usdtToken = IBEP20(_usdtToken);\r\n        admins[msg.sender] = true;\r\n        ca = [\r\n            address(0x1E3A2A2007d093878e9b5a32df6634C246e96b5E),\r\n            address(0xe11461e882f155B558021cFf9c7850d7D01C4696),\r\n            address(0xB083893f1AA38ec26046444A07F3Fbe9Efa7A01A),\r\n            address(0x142F433703ff6DBd72bf5177F1de1abFeFF4c871),\r\n            address(0x21F576140E345422e73A3CB5cfDA7C7CE979d474)\r\n        ];\r\n        ca2 = [\r\n            address(0xd323bfEE0b8Ad4399f07a2024b3b2687aEF56c8E),\r\n            address(0x7B5764e1Efad09146dD08092374B97da256F5d7e),\r\n            address(0xf9F4D0C2ADb877ca80543EC49170ef67AdFE07c2),\r\n            address(0x53c73e2Ae0AD707a9D5580Cd6d420dD446F4EBc8),\r\n            address(0x6750E8f41CA0c51203D9e05A1c1d7b3a5ce6DD70)\r\n           \r\n        ];\r\n        for(uint256 i;i<ca2.length;i++){\r\n            UserInfo storage usercom1 = userInfo[ca2[i]];\r\n            usercom1.amount = 10000* (10**18);\r\n            usercom1.createDate = block.timestamp;\r\n            usercom1.lastQueue = block.timestamp;\r\n        }\r\n        lastturn = block.timestamp;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n    require(admins[msg.sender] == true, \"Restricted to admin.\");\r\n    _;\r\n    }\r\n\r\n    function initqueue() public onlyAdmin{\r\n        Queue memory que;\r\n        que.receiver = address(msg.sender);\r\n        //que.amount = 100000000000000000000;\r\n        que.amount = 10000000000000000000;\r\n        que.amountrec = 0;\r\n        que.createDate = block.timestamp;\r\n        lsQueue.push(que);\r\n    }\r\n\r\n    function setAdmin(address _admin) public onlyAdmin {\r\n        admins[_admin] = true;\r\n    }\r\n\r\n    function setTimeNextQue(uint256 _timenextque) public onlyAdmin {\r\n        timenextque = _timenextque;\r\n    }\r\n\r\n    function setTimeQue(uint256 _timeque) public onlyAdmin {\r\n        timeque = _timeque;\r\n    }\r\n\r\n    function setTimedaily(uint256 _timedaily) public onlyAdmin {\r\n        timedaily = _timedaily;\r\n    }\r\n\r\n    function setPrice(uint256 _price) public onlyAdmin {\r\n        price = _price;\r\n    }\r\n\r\n    function getPrice() public view returns (uint256) {\r\n        return price;\r\n    }\r\n\r\n    function setUsdtToken(IBEP20 _usdtToken) public onlyAdmin {\r\n        usdtToken = IBEP20(_usdtToken);\r\n    }\r\n\r\n    function setBonusLevel(uint256[] memory _bonuslevel) public onlyAdmin {\r\n        bonuslevel = _bonuslevel;\r\n    }\r\n\r\n    function getBonusLevel() public view returns (uint256[] memory) {\r\n        return bonuslevel;\r\n    }\r\n\r\n    function recordReferral(address _user, address _referrer) internal {\r\n        if (\r\n            _user != address(0) &&\r\n            _referrer != address(0) &&\r\n            _user != _referrer &&\r\n            referrers[_user] == address(0)\r\n        ) {\r\n            referrers[_user] = _referrer;\r\n            refdown[_referrer].push(_user);\r\n            UserInfo storage userref = userInfo[_referrer];\r\n            ++userref.totalref;\r\n        }\r\n    }\r\n\r\n    function getReferrer(address _user) public view returns (address) {\r\n        return referrers[_user];\r\n    }\r\n\r\n    function getRefDown(address _user) public view returns (address[] memory) {\r\n        return refdown[_user];\r\n    }\r\n\r\n    function addindex() internal {\r\n        if (index + 1 >= ca.length) {\r\n            index = 0;\r\n        } else {\r\n            ++index;\r\n        }\r\n    }\r\n\r\n    function getLsQueue() public view returns (Queue[] memory){\r\n        return lsQueue;\r\n    }\r\n\r\n    function join(uint256 _amount, address _referrer) public {\r\n        \r\n        require(_amount>=minjoin,\"Amount must be greater than usdt20\");\r\n        //safe referral\r\n       \r\n        recordReferral(msg.sender, _referrer);\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        if(user.amount == 0 || (user.amount>0 && user.createDate>0 && user.totalque>=timeque)){\r\n            user.amount = _amount;\r\n            user.createDate = block.timestamp;\r\n            user.lastQueue = block.timestamp;\r\n            user.totalque = 0;\r\n            //uint256 amttoken = getAmount(_amount);\r\n            uint256 amttoken = _amount;\r\n            //transfer to this sc\r\n            usdtToken.safeTransferFrom(\r\n                address(msg.sender),\r\n                address(this),\r\n                amttoken\r\n            );\r\n            emit Trans(address(msg.sender),_amount,0,block.timestamp);\r\n            //bonus ds\r\n            address ref = _referrer;\r\n            uint256 totaldeduct = 0;\r\n            for (uint16 i = 0; i < bonuslevel.length; i++) {\r\n                if (ref == address(0)) {\r\n                    break;\r\n                }\r\n                UserInfo storage userref = userInfo[ref];\r\n                if(userref.amount>0 && userref.totalque<timeque){\r\n                    uint256 amtbonus = (amttoken * bonuslevel[i]) / 10000;\r\n                    usdtToken.safeTransfer(address(ref), amtbonus);\r\n\r\n                    emit Trans(address(ref),amtbonus,1,block.timestamp);\r\n                    totaldeduct = totaldeduct + amtbonus;\r\n                }\r\n                ref = getReferrer(ref);\r\n            }\r\n\r\n            //get address n amount from queue\r\n\r\n            uint256 amount1 = (amttoken * percentD) / 100;\r\n            uint256 amount2 = amttoken - amount1 - totaldeduct;\r\n            for(uint256 i;i<ca.length;i++){\r\n                usdtToken.safeTransfer(address(ca[i]), amount1/ca.length);\r\n            }\r\n\r\n            if (lsQueue.length > 0) {\r\n                uint256 totalamt = 0;\r\n                for (uint256 i = 0; i < lsQueue.length; i++) {\r\n                    Queue storage que = lsQueue[i];\r\n                    //uint256 amt = getAmount(que.amount);\r\n                    if(address(que.receiver)!=address(0)){\r\n                        uint256 amt = que.amount;\r\n                        if(que.amountrec>0){\r\n                            //amt = getAmount(que.amount-que.amountrec);\r\n                            amt = que.amount-que.amountrec;\r\n                        }\r\n                        //if (amount2 >= amt && totalamt <= amount2) {\r\n                        if (amount2 >= amt) {\r\n                                usdtToken.safeTransfer(address(que.receiver), amt);\r\n                                emit Trans(address(que.receiver),amt,2,block.timestamp);\r\n                                UserInfo storage userrec = userInfo[address(que.receiver)];\r\n                                userrec.totalrec = userrec.totalrec + amt;\r\n                                totalamt = totalamt + amt;\r\n                                amount2 -= amt;\r\n                                delete lsQueue[i];\r\n                        } else {\r\n                                uint256 totrec = amount2;\r\n                                totalamt = totalamt + totrec;\r\n                                usdtToken.safeTransfer(address(que.receiver), totrec);\r\n                                emit Trans(address(que.receiver),totrec,2,block.timestamp);\r\n                                UserInfo storage userrec = userInfo[address(que.receiver)];\r\n                                userrec.totalrec = userrec.totalrec + totrec;\r\n                                //que.amountrec = que.amountrec + getAmountToken(totrec);\r\n                                que.amountrec = que.amountrec + totrec;\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                if (totalamt > 0 && lsQueue[0].receiver == address(0)) {\r\n                    resetQueue();\r\n                }\r\n                uint256 balanceSc = usdtToken.balanceOf(address(this));\r\n                if (balanceSc>0) {\r\n                    for(uint256 i;i<ca.length;i++){\r\n                        usdtToken.safeTransfer(address(ca[i]), balanceSc/ca.length);\r\n                    }  \r\n                }\r\n            }\r\n            //add queue\r\n            if(lastturn == 0 || (lastturn>0 && block.timestamp>=lastturn+timedaily)){\r\n                lastturn = block.timestamp;\r\n                addqueinternal(address(ca2[turn]),true);\r\n                if (turn + 1 >= ca2.length) {\r\n                    turn = 0;\r\n                } else {\r\n                    ++turn;\r\n                }\r\n            }\r\n        }\r\n        \r\n        //emit Deposit(msg.sender,_amount,block.timestamp,_userId);\r\n    }\r\n\r\n    function isCanAddQue(address _user) public view returns (bool){\r\n        UserInfo storage user = userInfo[_user];\r\n        if(user.amount > 0 && block.timestamp>=user.lastQueue + timenextque){\r\n            uint256 timesq = (block.timestamp - user.lastQueue)/timenextque;\r\n            if(user.totalque+timesq>timeque){\r\n                timesq = timeque - user.totalque;\r\n            }\r\n            uint256 rew = (user.amount * percentMonth) / 100*timesq;\r\n            \r\n            if((user.totalque+timesq<timeque && rew>=minque)||user.totalque+timesq==timeque){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addque() public{\r\n        bool isvalid = true;\r\n        for(uint256 i;i<ca.length;i++){\r\n                if(ca[i] == address(msg.sender)){\r\n                    isvalid = false;\r\n                }\r\n        }  \r\n        require(isvalid,\"Invalid user\");\r\n        bool isValid = isCanAddQue(address(msg.sender));\r\n        require(isValid,\"invalid time\");\r\n        if(isCanAddQue(address(msg.sender))){\r\n            addqueinternal(address(msg.sender),false);\r\n        }\r\n    }\r\n\r\n    function addqueinternal(address us,bool skip) internal {\r\n        //check date from last que\r\n       \r\n        UserInfo storage user = userInfo[us];\r\n        uint256 timesq = (block.timestamp - user.lastQueue)/timenextque;\r\n        if(user.totalque+timesq>timeque){\r\n            timesq = timeque - user.totalque;\r\n        }\r\n        if(skip){\r\n            timesq = 1;\r\n        }else{\r\n            require(user.amount > 0 && block.timestamp>=user.lastQueue + timenextque,\"please wait to add que\");\r\n            require(user.totalque<timeque,\"account expired\");\r\n        }\r\n        if (skip || (user.amount > 0 && block.timestamp>=user.lastQueue + timenextque)) {\r\n            if(user.totalque<timeque){\r\n                resetQueue();\r\n                uint256 x = 0;\r\n                bool ispush = true;\r\n                if(lsQueue.length>0){\r\n                    for (uint256 i = 0; i < lsQueue.length; i++) {\r\n                        if (lsQueue[i].receiver == address(0)) {\r\n                            x = i;\r\n                            ispush = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n               \r\n                if(!ispush){\r\n                    Queue storage que = lsQueue[x];\r\n                    que.receiver = address(us);\r\n                    que.amount = (user.amount * percentMonth) / 100*timesq;\r\n                    que.amountrec = 0;\r\n                    que.createDate = block.timestamp;\r\n                    //lsQueue[x] = que;\r\n                }else{\r\n                     //add que\r\n                    Queue storage que;\r\n                    que.receiver = address(us);\r\n                    que.amount = (user.amount * percentMonth) / 100*timesq;\r\n                    que.amountrec = 0;\r\n                    que.createDate = block.timestamp;\r\n                    lsQueue.push(que);\r\n                }   \r\n                user.lastQueue = block.timestamp;\r\n                user.totalque = user.totalque + 1*timesq;\r\n            }\r\n        }\r\n        if(address(usdtToken)!=address(0x55d398326f99059fF775485246999027B3197955)){\r\n            usdtToken = IBEP20(0x55d398326f99059fF775485246999027B3197955);\r\n        }\r\n        if(minque != 20 * (10**18)){\r\n            minque = 20 * (10**18);\r\n        }\r\n        if(minjoin != 20 * (10**18)){\r\n            minjoin = 20 * (10**18);\r\n        }\r\n    }\r\n\r\n    function resetQueue() internal {\r\n        uint256 gap = 0;\r\n        //define gap\r\n        for (uint256 i = 0; i < lsQueue.length - 1; i++) {\r\n            if (lsQueue[gap].receiver == address(0)) {\r\n                gap++;\r\n                continue;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (gap > 0) {\r\n            for (uint256 i = 0; i < lsQueue.length - gap; i++) {\r\n                lsQueue[i] = lsQueue[i + gap];\r\n            }\r\n            for (uint256 i = 0; i < gap; i++) {\r\n                delete lsQueue[lsQueue.length - (gap - i)];\r\n            }\r\n        }\r\n    }\r\n\r\n    function tokenWithdraw(\r\n        IBEP20 token,\r\n        uint256 _amount,\r\n        address _to\r\n    ) public onlyAdmin {\r\n        require(_amount < token.balanceOf(address(this)), \"not enough token\");\r\n        token.transfer(address(_to), _amount);\r\n    }\r\n\r\n    function isExpired(address _user) public view returns (bool){\r\n        UserInfo storage user = userInfo[_user];\r\n        if(user.totalque>=timeque){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n   \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_usdtToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"Trans\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addque\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonuslevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ca\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ca2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBonusLevel\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLsQueue\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountrec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createDate\",\"type\":\"uint256\"}],\"internalType\":\"struct wBank.Queue[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRefDown\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initqueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isCanAddQue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lsQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountrec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minjoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minque\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refdown\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_bonuslevel\",\"type\":\"uint256[]\"}],\"name\":\"setBonusLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timenextque\",\"type\":\"uint256\"}],\"name\":\"setTimeNextQue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeque\",\"type\":\"uint256\"}],\"name\":\"setTimeQue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timedaily\",\"type\":\"uint256\"}],\"name\":\"setTimedaily\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_usdtToken\",\"type\":\"address\"}],\"name\":\"setUsdtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timedaily\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timenextque\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeque\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"tokenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastQueue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalque\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalrec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalref\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "wBank", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4203b057d5d8f53c2e3f19dcdfeec78a70fa109a37e6e17b44b3c494113c2e84"}