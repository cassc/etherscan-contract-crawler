{"SourceCode": "// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: contracts/CZXPToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/******************************************\r\n\r\nOur Matra our Motto for coding The Cryptoz Universe.\r\n\r\n      Fail EARLY and Fail LOUD !!!!!!!\r\n\r\n1.    First - Check all pre-conditions\r\n2.    Then  - make changes to contract state\r\n3.    Final - interact with other contracts\r\n\r\nPull funds over pushing them\r\nPlatform limits like max of 1023 loop interations.\r\n\r\nall Events start with Log\r\n\r\n******************************************/\r\n\r\n\r\n\r\ncontract CzxpToken is Ownable,ERC20 {\r\n\r\n//1. Condition\r\n//2. Effects\r\n//3.Interaction\r\n    \r\n    /*\r\n    * We accept payment for the token generation event only\r\n    * Rules:\r\n    *   Founders-pre:        6000000\r\n    *   TGE - max   :     1000000000\r\n    *   start is    :    Mar  9,2021\r\n    *   end is      :        No date\r\n    *   min         :  0.0000001 BNB\r\n    *   max         :          1 BNB\r\n    *   max wallets :            100\r\n    */\r\n\r\n\r\n\r\n// Advisor+team wallets\r\n    address[] advisors = [\r\n         0x60D7a79367B35573B27E4F020794AEF299E9fd49, //owner\r\n         0x591D4Fe5f1e147eac7b144C43e4f2A0d83a4DF84, //M\r\n         0x4b01629a1bAf82D8aB62726776b1332539E51cEc  //R\r\n    ];\r\n\r\n// Public variables of the token\r\n    string public name          = \"Cryptoz eXPerience\";\r\n    string public symbol        = \"CZXP\";\r\n    uint8  public decimals      = 0;\r\n    uint8  public walletCounter = 0;\r\n    \r\n//Storage\r\n    //supporters\r\n    mapping (address => uint256) public contributions;    // BNB contributed per address\r\n\r\n//TGE restrictions\r\n    //Token Generation event\r\n    bool public isTGE = false;\r\n    bool public TGEcomplete = false;\r\n    uint256 maxCap = 1000000000000000000; //in wei\r\n    \r\n//Our external cryptozContract\r\n    address private cryptozContract;\r\n    \r\n    //MODIFIERS\r\n    modifier checkTGE(){\r\n        require(isTGE);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAuthorizedContract(){\r\n        require(msg.sender == cryptozContract,\"Caller not authorized for this action\");\r\n        _;\r\n    }\r\n    \r\n    // ALL FUNCTIONS\r\n    function() external {\r\n        revert();\r\n    }\r\n\r\n    \r\n    function setCryptozContract(address _cryptozContract) public onlyOwner{\r\n        require(_cryptozContract != address(0x0));\r\n        cryptozContract = _cryptozContract;\r\n    }\r\n    \r\n    function getCrypozContractAddress() public view returns(address){\r\n        return cryptozContract;\r\n    }\r\n\r\n    /*\r\n    *   Make sure we accept payment only during TGE\r\n    */\r\n    function buy() payable checkTGE external {\r\n        require(walletCounter < 101, \"A maximum of 100 unique wallets has been reached\");\r\n        require(msg.sender != address(0));\r\n        \r\n        //We dont offer less than 1 czxp\r\n        require(msg.value >= 0.0000001 ether,\"Contribution must be greater than 0.0000001\");\r\n        \r\n        //Check contributor is under the cap\r\n        require(contributions[msg.sender] <= maxCap,\"Contribution is over the maximum of 1 BNB\");\r\n        \r\n        //if contribution+balance is >= cap\r\n        uint allowedContribution = 0;\r\n        if((msg.value+contributions[msg.sender]) >= maxCap){\r\n            allowedContribution = maxCap - contributions[msg.sender];\r\n        }else{\r\n            allowedContribution = msg.value;\r\n        }\r\n        \r\n        //sanity ??\r\n        require(allowedContribution > 0);\r\n        \r\n        //track total wallets\r\n        if(contributions[msg.sender] == 0) {\r\n            walletCounter++;\r\n        }\r\n        \r\n        //Finally increment the contributor\r\n        contributions[msg.sender] = contributions[msg.sender].add(allowedContribution);\r\n        \r\n        //all good ?  give tokens\r\n        _mint(msg.sender, convertWeiToCZXP(allowedContribution));\r\n    }\r\n    \r\n    /**\r\n     *  One time event to give token allocations to our advisors ONCE when TGE is activated\r\n     */\r\n     \r\n    function mintAdvisorTokens() internal checkTGE {\r\n        \r\n        \r\n        //100K to each advisor, update to maxed out\r\n        for(uint8 i=0; i < advisors.length; i++){\r\n            contributions[advisors[i]] = maxCap;\r\n            _mint(advisors[i], 20000000);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     *  Turn on TGE and then lock it forever when turned off\r\n     */\r\n     \r\n    function flipTGE() public onlyOwner returns(bool) {\r\n        require(!TGEcomplete);\r\n        \r\n        if(!isTGE){\r\n            isTGE = true;\r\n            mintAdvisorTokens();\r\n        }else{\r\n            isTGE = false;\r\n            TGEcomplete = true;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n   \r\n   /**\r\n    * Our base conversion rate for the TGE\r\n    */\r\n    function convertWeiToCZXP(uint weiToConvert) pure internal returns (uint) {\r\n        // 1 czxp = 100000000000 wei;\r\n        return weiToConvert/100000000000;\r\n    }\r\n    \r\n    /**\r\n     *  Called in from our ERC721 contract actions\r\n     *\r\n     */\r\n     function awardCzxp(address _to, uint256 _amount) public onlyAuthorizedContract {\r\n         require(_to != address(0));\r\n         require(_amount > 0);\r\n         \r\n         _mint(_to, _amount);\r\n     }\r\n     \r\n    /**\r\n     *  Called in from our ERC721 contract actions\r\n     *\r\n     */\r\n     function burnCzxp(address _wallet, uint256 _amount) public onlyAuthorizedContract {\r\n         require(_wallet != address(0));\r\n         require(_amount > 0);\r\n         \r\n         _burn(_wallet, _amount);\r\n     }\r\n    \r\n    /**\r\n    * @dev Returns the amount contributed so far by a sepecific user.\r\n    * @param _beneficiary Address of contributor\r\n    * @return User contribution so far\r\n    */\r\n    function getUserContribution(address _beneficiary) public view returns (uint256) {\r\n        return contributions[_beneficiary];\r\n    }\r\n    \r\n       \r\n   /**\r\n    * Withdraw balance to wallet\r\n    */\r\n   function withdraw() public onlyOwner returns(bool) {\r\n      msg.sender.transfer(address(this).balance);\r\n      return true;\r\n   }\r\n\r\n}\r\n\r\n// File: contracts/CryptozUniverse.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/******************************************\r\n\r\nOur Matra our Motto for coding The Cryptoz Universe.\r\n\r\n      Fail EARLY and Fail LOUD !!!!!!!\r\n\r\n1.    First - Check all pre-conditions\r\n2.    Then  - make changes to contract state\r\n3.    Final - interact with other contracts\r\n\r\nPull funds over pushing them\r\nPlatform limits like max of 1023 loop interations.\r\n\r\nall Events start with Log\r\n\r\n******************************************/\r\n\r\n\r\n\r\n\r\ncontract CryptozUniverse is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n//Definitons\r\n    struct cardType{\r\n        uint32 cardTypeId;\r\n        string name;\r\n        string set;\r\n        //uint8 assetType; //1=human,2=animal,3=plant, 4=thing\r\n        //uint8 notStoreOrBonus; //0 =inStore, 1 = pack, 2= bonus\r\n        //uint8 rarity; //1 = diamond,6 = common\r\n        //uint16 totalAvailable;\r\n        uint256 weiCost;\r\n        uint256 buyCzxp;\r\n        uint256 transferCzxp;\r\n        uint256 sacrificeCzxp;\r\n        uint256 unlockCzxp;\r\n        uint8 cardLevel;\r\n    }\r\n\r\n    struct Card{\r\n        uint32 cardTypeId;\r\n        uint256 editionNumber;\r\n        uint256 transferCount;\r\n    }\r\n\r\n    string baseTokenURI = 'https://cryptoz.cards/data/'; //append ID on\r\n//storage\r\n\r\n    //Containers for the card types\r\n    mapping(uint256 => uint8) cardAssetType;\r\n    mapping(uint256 => uint8) storeBoosterBonus;\r\n    mapping(uint256 => uint8) public rarity; // lookup cardTypeId return rarity\r\n    mapping(uint256 => uint16) totalAvailable;\r\n\r\n    //All the cards in the Cryptoz Universe\r\n    Card[] internal Cards;\r\n\r\n    mapping(uint32 => cardType) public allCardTypes;        // All card type definitions\r\n    uint256[] public cardTypesIds; //Just an array of all the id\r\n\r\n    //track editionNumberTotal, always increments, starts at 1\r\n    mapping(uint256 => uint256) public cardTypeToEdition;\r\n\r\n// Event Logs\r\n    event CZXPGained(address indexed beneficiary, uint256 czxpAmount);\r\n\r\n//Other variables we need\r\n    address payable internal CzxpContractAddress_;\r\n\r\n\r\n    /**\r\n     * Not much going on here so exit.\r\n     */\r\n    function() external{\r\n        revert();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n     function getTotalTypes() public view returns(uint){\r\n         return cardTypesIds.length;\r\n     }\r\n\r\n    /**\r\n     *  Internal function called from Cryptoz once all the checks are done\r\n     */\r\n    function awardCzxp(address _beneficiary, uint czxpReward) internal {\r\n        //Give the czxp tokens\r\n        CzxpToken(CzxpContractAddress_).awardCzxp(_beneficiary, czxpReward);\r\n    }\r\n\r\n    /**\r\n     * Random as it gets for now. Return a val between 1-10000\r\n     */\r\n    uint nonce = 0;\r\n    function selectRandom(uint256 range) internal returns (uint) {\r\n        uint randomnumber = uint(keccak256(abi.encodePacked(now, msg.sender, nonce))) % range;\r\n        nonce++;\r\n        return randomnumber;\r\n    }\r\n    \r\n    function getProbs(uint wager) internal returns (uint16,uint16,uint16,uint16)  {\r\n        \r\n        uint8[4] memory group = [1,2,3,4];\r\n        uint8[4] memory Fac = [1,2,6,24];\r\n        uint[4] memory DistGroup;\r\n        uint16[4] memory FinalProbs;\r\n\r\n        for(uint i=0; i<4; i++){\r\n            DistGroup[i] = (((getLambda(wager)**group[i]) / getLambda(wager)) / Fac[i]) * 100;\r\n        }\r\n        \r\n        uint DistTotal = DistGroup[0] + DistGroup[1] + DistGroup[2] + DistGroup[3];\r\n        \r\n        for(uint j=0; j<4; j++){\r\n            FinalProbs[j] = uint16(DistGroup[j] * 10000 / DistTotal);\r\n        }\r\n        return(FinalProbs[0],FinalProbs[1],FinalProbs[2],FinalProbs[3]);\r\n    }\r\n    \r\n    function getLambda(uint wager) internal returns (uint) {\r\n        uint Dist   = log2(wager / 280000);\r\n        return Dist / 4;\r\n    }\r\n    \r\n    function log2(uint x) internal returns (uint y){\r\n       assembly {\r\n            let arg := x\r\n            x := sub(x,1)\r\n            x := or(x, div(x, 0x02))\r\n            x := or(x, div(x, 0x04))\r\n            x := or(x, div(x, 0x10))\r\n            x := or(x, div(x, 0x100))\r\n            x := or(x, div(x, 0x10000))\r\n            x := or(x, div(x, 0x100000000))\r\n            x := or(x, div(x, 0x10000000000000000))\r\n            x := or(x, div(x, 0x100000000000000000000000000000000))\r\n            x := add(x, 1)\r\n            let m := mload(0x40)\r\n            mstore(m,           0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd)\r\n            mstore(add(m,0x20), 0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe)\r\n            mstore(add(m,0x40), 0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616)\r\n            mstore(add(m,0x60), 0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff)\r\n            mstore(add(m,0x80), 0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e)\r\n            mstore(add(m,0xa0), 0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707)\r\n            mstore(add(m,0xc0), 0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606)\r\n            mstore(add(m,0xe0), 0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100)\r\n            mstore(0x40, add(m, 0x100))\r\n            let magic := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\r\n            let shift := 0x100000000000000000000000000000000000000000000000000000000000000\r\n            let a := div(mul(x, magic), shift)\r\n            y := div(mload(add(m,sub(255,a))), shift)\r\n            y := add(y, mul(256, gt(arg, 0x8000000000000000000000000000000000000000000000000000000000000000)))\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/drafts/Counters.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/ERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using Counters for Counters.Counter;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) private _tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => Counters.Counter) private _ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /*\r\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n     *\r\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    constructor () public {\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner address to query the balance of\r\n     * @return uint256 representing the amount owned by the passed address\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n        return _ownedTokensCount[owner].current();\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the owner of the specified token ID.\r\n     * @param tokenId uint256 ID of the token to query the owner of\r\n     * @return address currently marked as the owner of the given token ID\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address) {\r\n        address owner = _tokenOwner[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Approves another address to transfer the given token ID\r\n     * The zero address indicates there is no approved address.\r\n     * There can only be one approved address per token at a given time.\r\n     * Can only be called by the token owner or an approved operator.\r\n     * @param to address to be approved for the given token ID\r\n     * @param tokenId uint256 ID of the token to be approved\r\n     */\r\n    function approve(address to, uint256 tokenId) public {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the approved address for a token ID, or zero if no address set\r\n     * Reverts if the token ID does not exist.\r\n     * @param tokenId uint256 ID of the token to query the approval of\r\n     * @return address currently approved for the given token ID\r\n     */\r\n    function getApproved(uint256 tokenId) public view returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets or unsets the approval of a given operator\r\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\r\n     * @param to operator address to set the approval\r\n     * @param approved representing the status of the approval to be set\r\n     */\r\n    function setApprovalForAll(address to, bool approved) public {\r\n        require(to != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][to] = approved;\r\n        emit ApprovalForAll(_msgSender(), to, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Tells whether an operator is approved by a given owner.\r\n     * @param owner owner address which you want to query the approval of\r\n     * @param operator operator address which you want to query the approval of\r\n     * @return bool whether the given operator is approved by the given owner\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of a given token ID to another address.\r\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     * Requires the msg.sender to be the owner, approved, or operator.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg.sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the _msgSender() to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransferFrom(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers the ownership of a given token ID to another address\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * Requires the msg.sender to be the owner, approved, or operator\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\r\n        _transferFrom(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the specified token exists.\r\n     * @param tokenId uint256 ID of the token to query the existence of\r\n     * @return bool whether the token exists\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        address owner = _tokenOwner[tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given token ID.\r\n     * @param spender address of the spender to query\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @return bool whether the msg.sender is approved for the given token ID,\r\n     * is an operator of the owner, or is the owner of the token\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to safely mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to safely mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * If the target address is a contract, it must implement `onERC721Received`,\r\n     * which is called upon a safe transfer, and return the magic value\r\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n     * the transfer is reverted.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     * @param _data bytes data to send along with a safe transfer check\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * @param to The address that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _tokenOwner[tokenId] = to;\r\n        _ownedTokensCount[to].increment();\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token.\r\n     * Reverts if the token does not exist.\r\n     * Deprecated, use {_burn} instead.\r\n     * @param owner owner of the token to burn\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[owner].decrement();\r\n        _tokenOwner[tokenId] = address(0);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token.\r\n     * Reverts if the token does not exist.\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(uint256 tokenId) internal {\r\n        _burn(ownerOf(tokenId), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ownership of a given token ID to another address.\r\n     * As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _clearApproval(tokenId);\r\n\r\n        _ownedTokensCount[from].decrement();\r\n        _ownedTokensCount[to].increment();\r\n\r\n        _tokenOwner[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * This is an internal detail of the `ERC721` contract and its use is deprecated.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        internal returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\r\n            IERC721Receiver(to).onERC721Received.selector,\r\n            _msgSender(),\r\n            from,\r\n            tokenId,\r\n            _data\r\n        ));\r\n        if (!success) {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n            }\r\n        } else {\r\n            bytes4 retval = abi.decode(returndata, (bytes4));\r\n            return (retval == _ERC721_RECEIVED);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to clear current approval of a given token ID.\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _clearApproval(uint256 tokenId) private {\r\n        if (_tokenApprovals[tokenId] != address(0)) {\r\n            _tokenApprovals[tokenId] = address(0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721Enumerable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token with optional enumeration extension logic\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721Enumerable is Context, ERC165, ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => uint256[]) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /*\r\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n     *\r\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    /**\r\n     * @dev Constructor function.\r\n     */\r\n    constructor () public {\r\n        // register the supported interface to conform to ERC721Enumerable via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\r\n     * @param owner address owning the tokens list to be accessed\r\n     * @param index uint256 representing the index to be accessed of the requested tokens list\r\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\r\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the total amount of tokens stored by the contract.\r\n     * @return uint256 representing the total amount of tokens\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the token ID at a given index of all the tokens in this contract\r\n     * Reverts if the index is greater or equal to the total number of tokens.\r\n     * @param index uint256 representing the index to be accessed of the tokens list\r\n     * @return uint256 token ID at the given index of the tokens list\r\n     */\r\n    function tokenByIndex(uint256 index) public view returns (uint256) {\r\n        require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer ownership of a given token ID to another address.\r\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\r\n     * @param from current owner of the token\r\n     * @param to address to receive the ownership of the given token ID\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     */\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        super._transferFrom(from, to, tokenId);\r\n\r\n        _removeTokenFromOwnerEnumeration(from, tokenId);\r\n\r\n        _addTokenToOwnerEnumeration(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mint a new token.\r\n     * Reverts if the given token ID already exists.\r\n     * @param to address the beneficiary that will own the minted token\r\n     * @param tokenId uint256 ID of the token to be minted\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        super._mint(to, tokenId);\r\n\r\n        _addTokenToOwnerEnumeration(to, tokenId);\r\n\r\n        _addTokenToAllTokensEnumeration(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to burn a specific token.\r\n     * Reverts if the token does not exist.\r\n     * Deprecated, use {ERC721-_burn} instead.\r\n     * @param owner owner of the token to burn\r\n     * @param tokenId uint256 ID of the token being burned\r\n     */\r\n    function _burn(address owner, uint256 tokenId) internal {\r\n        super._burn(owner, tokenId);\r\n\r\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\r\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\r\n        _ownedTokensIndex[tokenId] = 0;\r\n\r\n        _removeTokenFromAllTokensEnumeration(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the list of token IDs of the requested owner.\r\n     * @param owner address owning the tokens\r\n     * @return uint256[] List of token IDs owned by the requested address\r\n     */\r\n    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\r\n        return _ownedTokens[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\r\n        _ownedTokens[to].push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        _ownedTokens[from].length--;\r\n\r\n        // Note that _ownedTokensIndex[tokenId] hasn't been cleared: it still points to the old slot (now occupied by\r\n        // lastTokenId, or just over the end of the array if the token was the last one).\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        _allTokens.length--;\r\n        _allTokensIndex[tokenId] = 0;\r\n    }\r\n}\r\n\r\n// File: contracts/Strings.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary Strings {\r\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\r\n      bytes memory _ba = bytes(_a);\r\n      bytes memory _bb = bytes(_b);\r\n      bytes memory _bc = bytes(_c);\r\n      bytes memory _bd = bytes(_d);\r\n      bytes memory _be = bytes(_e);\r\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n      bytes memory babcde = bytes(abcde);\r\n      uint k = 0;\r\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n      for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n      for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n      for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n      for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n      return string(babcde);\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\n// File: contracts/CryptozCard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/*\r\ninterface ERC165 {\r\n /// @notice Query if a contract implements an interface\r\n /// @param interfaceID The interface identifier, as\r\n ///  specified in ERC-165\r\n /// @dev Interface identification is specified in\r\n ///  ERC-165. This function uses less than 30,000 gas.\r\n /// @return `true` if the contract implements `interfaceID`\r\n ///  and `interfaceID` is not 0xffffffff, `false` otherwise\r\n function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n*/\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract CryptozCard is CryptozUniverse, ERC721Enumerable {\r\n    \r\n  // Token name\r\n  string internal name_ = \"Cryptoz Cards\";\r\n\r\n  // Token symbol\r\n  string internal symbol_ = \"Cryptoz\";\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n  \r\n  //Track all tokens by rarity\r\n  uint[7] public tokensByRarity = [0,0,0,0,0,0,0]; //[rarity] = total\r\n\r\n  /*CRYPTOZ Overrides*/\r\n\r\n  //Event Logs\r\n  event LogCardCreated(address indexed owner, uint indexed cardTokenId, uint editionNumber, uint indexed cardTypeId, uint8 rarity, uint CzxpGained);\r\n  event SacrificeCardEvent(address indexed owner, uint indexed cardTokenId, uint indexed cardTypeId, uint CzxpGained);\r\n\r\n  // Track ownership of Card Type purchases from store to enforce 1 type per person once\r\n  mapping (address => mapping(uint => bool)) public cardTypesOwned; //    [address][CardTypeId] = bool\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string memory _name) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string memory _symbol) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * @dev Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) external view returns (string memory) {\r\n    return Strings.strConcat(\r\n        baseTokenURI,\r\n        Strings.uint2str(_tokenId)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * @dev Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * @dev Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string memory _uri) internal {\r\n    require(_exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * @dev Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * @dev Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    \r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n\r\n    //track rarity totals\r\n    tokensByRarity[rarity[Cards[_tokenId].cardTypeId]] = tokensByRarity[rarity[Cards[_tokenId].cardTypeId]] - 1;\r\n\r\n    // Gain czxp for sacrificing card\r\n    uint256 sacrificeCzxp = allCardTypes[Cards[_tokenId].cardTypeId].sacrificeCzxp;\r\n    awardCzxp(msg.sender,sacrificeCzxp);\r\n    \r\n     //remove from universe\r\n    delete Cards[_tokenId];\r\n    \r\n    emit SacrificeCardEvent(msg.sender, _tokenId, Cards[_tokenId].cardTypeId, sacrificeCzxp);\r\n  }\r\n\r\n    /*CRYPTOZ Overrides */\r\n\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\r\n        super._transferFrom(from, to, tokenId);\r\n    }\r\n    \r\n    \r\n\r\n    /**\r\n     *  Public method to allow file transfer, we call our internal function\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId));\r\n        \r\n        //Lets track the card transfers\r\n        Cards[tokenId].transferCount += 1;\r\n        \r\n        _transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n    *   Create the Card for the owner\r\n    */\r\n    function _createCard(uint32 _cardTypeId, address _owner, uint czxpGained) internal returns (uint){\r\n        //make sure we have a definition for this card\r\n        require(allCardTypes[_cardTypeId].cardTypeId == _cardTypeId);\r\n\r\n        //Increment edition number\r\n        cardTypeToEdition[_cardTypeId] = cardTypeToEdition[_cardTypeId].add(1);\r\n\r\n        //Create the card!\r\n        Card memory _tempCard = Card({\r\n            cardTypeId:_cardTypeId,\r\n            editionNumber:cardTypeToEdition[_cardTypeId],\r\n            transferCount:0\r\n        });\r\n\r\n        //add to the universe and get the ID, -1 for array offset\r\n        uint256 _newCardId = Cards.push(_tempCard) - 1;\r\n\r\n        //Give the ERC721 Card\r\n        _mint(_owner,_newCardId);\r\n\r\n        //Set the Metadata for this new token\r\n        _setTokenURI(_newCardId, baseTokenURI);\r\n        \r\n        //track rarity\r\n        uint8 _temp_rarity = rarity[_cardTypeId];\r\n        tokensByRarity[_temp_rarity] = tokensByRarity[_temp_rarity] + 1;\r\n        \r\n        //Emit card created owner,tokenId,Edition of Token,Card type,czxp gained\r\n        emit LogCardCreated(_owner, _newCardId, cardTypeToEdition[_cardTypeId], _cardTypeId, rarity[_cardTypeId], czxpGained);\r\n        \r\n        return _newCardId;\r\n    }\r\n    \r\n\r\n    //Get a list of all the CardIDs( tokenIDs ) this user owns\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] memory ownerTokens) {\r\n        return _tokensOfOwner(_owner);\r\n    }\r\n    \r\n    //Get total tokens by rarity. diamond,platinum,epic,rare,uncommon,common\r\n    function getTokensByRarity() external view returns(uint,uint,uint,uint,uint,uint) {\r\n        return(tokensByRarity[1],tokensByRarity[2],tokensByRarity[3],tokensByRarity[4],tokensByRarity[5],tokensByRarity[6]);\r\n    }\r\n    \r\n    //Get the info about the card\r\n    function getOwnedCard(uint256 _tokenId) public view returns(uint32, uint, uint) {\r\n        require(_exists(_tokenId));\r\n        return (Cards[_tokenId].cardTypeId,Cards[_tokenId].editionNumber,Cards[_tokenId].transferCount);\r\n    }\r\n}\r\n\r\n// File: contracts/Cryptoz.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/******************************************\r\n\r\nOur Matra our Motto for coding The Cryptoz Universe.buy\r\n\r\n      Fail EARLY and Fail LOUD !!!!!!!\r\n\r\n1.    First - Check all pre-conditions\r\n2.    Then  - make changes to contract state\r\n3.    Final - interact with other contracts\r\n\r\nPull funds over pushing them\r\nPlatform limits like max of 1023 loop interations.\r\n\r\nall Events start with Log\r\n\r\n******************************************/\r\n\r\n\r\ncontract Cryptoz is CryptozCard {\r\n\r\n//Constants\r\n    uint constant public weiCostOfCard = 2000000000000000; //booster in wei = 0.002 ETH\r\n    uint constant public czxpGainedBoosterPurchase = 120;\r\n    uint constant public maxCardTypes = 5000; //allowed types in the Universe\r\n    uint constant public maxBoostersReward = 50000; // Promotional boosters for airdrop rewards\r\n\r\n//Event Logs\r\n    event LogCardTypeLoaded(uint32 indexed cardTypeId, string cardName);\r\n    event LogCardPurchased(uint32 indexed cardTypeId, uint editionNumber, address indexed buyer);\r\n    event LogPackOpened(address indexed buyer, uint packsOpened);\r\n    event LogSponsorLinked(address sponsor, address affiliate);\r\n    event LogSponsorReward(address sponsor, address affiliate, uint CzxpReward);\r\n    event LogDailyReward(address player, uint newBonusBalance);\r\n    event LogRewardBoosters(address winner, uint boostersAwarded);\r\n\r\n//storage\r\n\r\n    //Track the total amount of Booster rewards\r\n    uint public totalBoostersRewarded = 0;\r\n    \r\n    //Tracking affiliate sponsors\r\n    mapping(address => address) public sponsors; // 1 sponsor can have many affiliates, but only 1 sponsor, returns sponsor\r\n    \r\n    //Track the timestamps for users to get their daily pull\r\n    mapping(address => uint) private timeToCardsPull; //address to timestamp\r\n    \r\n    //Tracking booster pack count ownership. These are NOT tokens, Play can mint a random card\r\n    mapping (address => uint256) public boosterPacksOwned;\r\n    \r\n    //where we hold inventory of the  booster packs\r\n    mapping(uint8 => uint32[]) private allBoosterCardIds; // [rarityId][cardId]\r\n    \r\n    //check if cardType exists\r\n    modifier isValidCard(uint32 _cardTypeId) {\r\n//TIGHTEN   //Make sure cardType exists and we dont have bad data coming in\r\n        require(allCardTypes[_cardTypeId].cardTypeId == _cardTypeId);\r\n        require(storeBoosterBonus[_cardTypeId] < 1); //you cant get cards marked for booster pack or bonus\r\n        _;\r\n    }\r\n    \r\n    function() external {\r\n        revert();\r\n    }\r\n\r\n    //Set our cxzp contract in the constructor\r\n    function initialize(address payable _czxpContractAddress) onlyOwner public {\r\n        CzxpContractAddress_ = _czxpContractAddress;\r\n    }\r\n\r\n    function loadNewCardType(\r\n            uint8 _cardTypeId,\r\n            string calldata _name,\r\n            string calldata _set,\r\n            uint8 _assetType,\r\n            uint8 _notStoreOrBonus,\r\n            uint8 _rarity,\r\n            uint16 _totalAvailable,\r\n            uint256 _weiCost,\r\n            uint256 _buyCzxp\r\n        ) external onlyOwner returns(bool){\r\n            \r\n        //what requires should we add ?\r\n        \r\n        //a max. of 5000 types in the universe ever\r\n        require(cardTypesIds.length <= maxCardTypes);\r\n        \r\n        //not allowed to update existing cardTypeIds\r\n        require(allCardTypes[_cardTypeId].cardTypeId == 0);\r\n        \r\n        allCardTypes[_cardTypeId].cardTypeId    = _cardTypeId;\r\n        allCardTypes[_cardTypeId].name          = _name;\r\n        allCardTypes[_cardTypeId].set           = _set;\r\n        cardAssetType[_cardTypeId]              = _assetType;\r\n        storeBoosterBonus[_cardTypeId]          = _notStoreOrBonus;\r\n        rarity[_cardTypeId]                     = _rarity;\r\n        totalAvailable[_cardTypeId]             = _totalAvailable;\r\n        allCardTypes[_cardTypeId].weiCost       = _weiCost;\r\n        allCardTypes[_cardTypeId].buyCzxp       = _buyCzxp;\r\n    \r\n        //If she be booster worthy\r\n        if(_notStoreOrBonus == 1){ // 0=store,1=booster,2=bonus\r\n            allBoosterCardIds[_rarity].push(_cardTypeId);\r\n        }\r\n        \r\n        //Track the cardTypeIds count\r\n        cardTypesIds.push(_cardTypeId);\r\n        return true;\r\n    }\r\n\r\n    function addTocardType(\r\n                        uint32  _cardTypeId,\r\n                        uint256 _transferCzxp,\r\n                        uint256 _sacrificeCzxp,\r\n                        uint256 _unlockCzxp,\r\n                        uint8 _cardLevel\r\n                      ) external onlyOwner returns(bool){\r\n                          \r\n        //not allowed to update existing cardTypeIds\r\n//TODO check for NULL in case we push 0 for a property\r\n        require(allCardTypes[_cardTypeId].transferCzxp == 0);\r\n        require(allCardTypes[_cardTypeId].sacrificeCzxp == 0);\r\n        require(allCardTypes[_cardTypeId].unlockCzxp == 0);\r\n        require(allCardTypes[_cardTypeId].cardLevel == 0);\r\n                          \r\n        require(allCardTypes[_cardTypeId].cardTypeId == _cardTypeId);\r\n        \r\n        \r\n        allCardTypes[_cardTypeId].transferCzxp  = _transferCzxp;\r\n        allCardTypes[_cardTypeId].sacrificeCzxp = _sacrificeCzxp;\r\n        allCardTypes[_cardTypeId].unlockCzxp    = _unlockCzxp;\r\n        allCardTypes[_cardTypeId].cardLevel     = _cardLevel;\r\n        \r\n        //initialize editionNumber\r\n        cardTypeToEdition[_cardTypeId] = 0;\r\n        \r\n        //Card type is defined, now emit a Log of it\r\n        emit LogCardTypeLoaded(_cardTypeId,allCardTypes[_cardTypeId].name);\r\n        return true;\r\n    }\r\n    \r\n    \r\n/**\r\n    /**\r\n     *  Public interface to purchase a card, probablly the most insecure entry point !\r\n     */\r\n    function buyCard(uint32 _cardTypeId) external payable isValidCard(_cardTypeId) returns(bool) {\r\n        \r\n        // dont even bother if no ETH sent\r\n        require(msg.value > 0, \"Pay up!\");\r\n        \r\n        //check for valid cardType\r\n        require(allCardTypes[_cardTypeId].cardTypeId == _cardTypeId, \"Cannot buy cards that are not defined\");\r\n        \r\n        cardType memory _tempCard = allCardTypes[_cardTypeId];\r\n        \r\n        //check if store only\r\n        require(storeBoosterBonus[_cardTypeId] == 0, \"Can only buy cards from Store\");\r\n        \r\n        //CHECKS-EFFECT, Can't buy cards you own\r\n        require(cardTypesOwned[msg.sender][_cardTypeId] == false, \"Only 1 Card Type purchase per wallet\");\r\n         \r\n        //Check if this card amount we sell is more than edition+1 for this card type\r\n        require((totalAvailable[_cardTypeId] >= cardTypeToEdition[_cardTypeId] + 1 ), \"Maximum edition reached for this Card Type\");\r\n        \r\n        //check if they have paid enough for it\r\n        require(msg.value >= _tempCard.weiCost, \"Not enough Ether sent to purchase this card\");\r\n        \r\n        //check if we have enough czxp to unlock this card\r\n        uint czxp = CzxpToken(CzxpContractAddress_).balanceOf(msg.sender);\r\n        require(czxp >= _tempCard.unlockCzxp, \"Wallet does not have enough czxp to unlock this Card Type\");\r\n        \r\n    //Clear ? to buy the card\r\n    \r\n        //stop re-entrancy. Track the type of card puchased for this owner, so they cant buy again\r\n        cardTypesOwned[msg.sender][_cardTypeId] = true;\r\n        \r\n        //Let the universe award our friend\r\n        super.awardCzxp(msg.sender, allCardTypes[_cardTypeId].buyCzxp);\r\n        \r\n        //and award their sponsor\r\n        rewardAffiliate(allCardTypes[_cardTypeId].buyCzxp);\r\n    \r\n        //Mint the real token and pass czxp gained for logging\r\n        super._createCard(_cardTypeId, msg.sender,allCardTypes[_cardTypeId].buyCzxp);\r\n        \r\n        \r\n        return true;\r\n    }\r\n    \r\n    //every 8 hours, the address can get 2 free booster cards\r\n    function getBonusBoosters() external {\r\n        //this only runs if time to get new cards\r\n        require(now > getTimeToDailyBonus(msg.sender), \"Can't claim before time to claim next bonus\");\r\n        \r\n        //Stop re-entrancy, update the lastpull value\r\n        timeToCardsPull[msg.sender] = now + 8 hours;\r\n        \r\n        // add the boosters and emit event\r\n        boosterPacksOwned[msg.sender] = boosterPacksOwned[msg.sender].add(2);\r\n        emit LogDailyReward(msg.sender, boosterPacksOwned[msg.sender]);\r\n    }\r\n    \r\n    /**\r\n     *  Public interface to get card at no cost\r\n     */\r\n    function getFreeCard(uint32 _cardTypeId) external isValidCard(_cardTypeId) {\r\n        //check if store only\r\n        require(storeBoosterBonus[_cardTypeId] == 0);\r\n        \r\n        // ensure there is enough of a supply left\r\n        require(totalAvailable[_cardTypeId] > (cardTypeToEdition[_cardTypeId]+1));\r\n        \r\n        //Can't get cards From shop that you own\r\n        require(cardTypesOwned[msg.sender][_cardTypeId] == false);\r\n        \r\n        //check if we have enough czxp to unlock this card\r\n        uint czxp = CzxpToken(CzxpContractAddress_).balanceOf(msg.sender);\r\n        require(czxp >= allCardTypes[_cardTypeId].unlockCzxp);\r\n        \r\n        //Only cards that are Free\r\n        require(allCardTypes[_cardTypeId].weiCost == 0);\r\n\r\n//ALL CLEAR ???????? claim a new card\r\n    \r\n        //Stop re-entrancy, Track the type of card puchased for this owner, so they cant buy again\r\n        cardTypesOwned[msg.sender][_cardTypeId] = true;\r\n        \r\n        //Let the universe award our friend\r\n        super.awardCzxp(msg.sender, allCardTypes[_cardTypeId].buyCzxp);\r\n        \r\n        //reward the sponsor\r\n        rewardAffiliate(allCardTypes[_cardTypeId].buyCzxp);\r\n        \r\n        //now mint the card\r\n        super._createCard(_cardTypeId, msg.sender, allCardTypes[_cardTypeId].buyCzxp);\r\n    \r\n    }\r\n    \r\n    /**\r\n     *  Any user can sacrifice any card they own. Please don't burn down the universe :'(\r\n     */\r\n     function sacrifice(uint256 _tokenId) external {\r\n         //Call our internal burn function does all our owner checks\r\n         _burn(msg.sender, _tokenId);\r\n     }\r\n    \r\n//Booster Pack functions\r\n\r\n    /**\r\n     *  Public interface to award booster credits from Airdrops - restricted to Owner\r\n    */\r\n    function awardBoosterCredits(address _winner, uint _amount) external onlyOwner returns(bool) {\r\n        \r\n        //Check max. for Universe\r\n        require((totalBoostersRewarded + _amount) <= maxBoostersReward, \"Reached max. number of Booster credit rewards\");\r\n        \r\n        //All good\r\n        //stop re-entrance, increase universe total\r\n        totalBoostersRewarded.add(_amount);\r\n        \r\n        //All good increase the number owned for this winner\r\n        boosterPacksOwned[_winner] = boosterPacksOwned[_winner].add(_amount);\r\n        \r\n        //Log the event\r\n        emit LogRewardBoosters(_winner, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n \r\n    /**\r\n     *  Public interface to buy booster card(s)\r\n    */\r\n    function buyBoosterCard(uint _amount) payable external returns(bool) {\r\n        \r\n        // is there enough wei sent 1 pack = 0.002 ETH ?\r\n        require(msg.value >= weiCostOfCard.mul(_amount));\r\n        \r\n        //All good increase the number owned\r\n        boosterPacksOwned[msg.sender] = boosterPacksOwned[msg.sender].add(_amount);\r\n\r\n        //Award czxp for booster\r\n        super.awardCzxp(msg.sender, uint(czxpGainedBoosterPurchase.mul(_amount)));\r\n        \r\n        rewardAffiliate(uint(czxpGainedBoosterPurchase.mul(_amount)));\r\n\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     *  Public interface to buy booster pack(s) and open them - NO burn option\r\n     */\r\n    function buyBoosterCardAndOpen() payable external {\r\n        // is there enough wei sent 1 pack = 0.005 ETH ?\r\n        require(msg.value >= weiCostOfCard);\r\n        \r\n        //All good increase the number owned\r\n        boosterPacksOwned[msg.sender] = boosterPacksOwned[msg.sender].add(1);\r\n\r\n        //Award czxp per pack\r\n        super.awardCzxp(msg.sender, czxpGainedBoosterPurchase);\r\n        \r\n        rewardAffiliate(czxpGainedBoosterPurchase);\r\n        \r\n        //Now open the pack\r\n        openBoosterCard(0);\r\n    }\r\n    \r\n    /**\r\n     *  Public interface to open already purchased booster pack(s) - User can wager an amount\r\n     */\r\n    function openBoosterCard(uint czxpWager) public returns(bool) {\r\n        //Ensure user owns unopened packs\r\n        require(boosterPacksOwned[msg.sender] > 0);\r\n        \r\n        //czxpWager check czxpWager\r\n        require(czxpWager >= 0);\r\n        \r\n        //STOP re-entrancy , decrement number of packs\r\n        boosterPacksOwned[msg.sender] = boosterPacksOwned[msg.sender].sub(1);\r\n        \r\n        //Pull the card\r\n        uint8 rarity = getRarity(czxpWager);\r\n        pullCard(rarity);\r\n        \r\n        //Send a log event\r\n        emit LogPackOpened(msg.sender, rarity);\r\n        return true;\r\n    }\r\n   \r\n    /**\r\n     * Public interface to allow a player to forever link their 1 sponsor\r\n     */\r\n    function linkMySponsor(address mySponsor) external {\r\n        //check that mySponsor arg is not 0x0\r\n        require(mySponsor != address(0));\r\n        \r\n        //ensure the sponsor isn't Linked\r\n        require(sponsors[msg.sender] == address(0));\r\n        \r\n        //Check they are not linking to themselves\r\n        require(msg.sender != mySponsor);\r\n        \r\n        //All clear?  stop re-entrancy, set the association\r\n        sponsors[msg.sender] = mySponsor;\r\n        \r\n        //Mint the Platinum Sponsor Card\r\n        pullCard(2);\r\n    }\r\n\r\n//Private\r\n\r\n    /**\r\n     * We always pay our affiliates 20% of the czxp\r\n     */\r\n     function rewardAffiliate(uint totalCZXP) private  {\r\n         //first check if the caller has a sponsor\r\n         if(sponsors[msg.sender] != address(0)){\r\n             uint reward = totalCZXP / 20;\r\n             if(reward == 0){\r\n                 reward = 1;\r\n             }\r\n             super.awardCzxp(sponsors[msg.sender], reward);\r\n             emit LogSponsorReward(sponsors[msg.sender], msg.sender, reward);\r\n         }\r\n     }\r\n\r\n    /**\r\n     *\r\n     */\r\n     function pullCard(uint8 rarity) private {\r\n         \r\n         //Get a random number for the card to pull\r\n         uint rand = selectRandom(allBoosterCardIds[rarity].length);\r\n         \r\n         //hit up the cardTypes\r\n         uint32 pulledId = allBoosterCardIds[rarity][rand];\r\n         \r\n        //Give the player this cardType\r\n        super._createCard(pulledId, msg.sender, 100);\r\n     }\r\n    \r\n    /**\r\n     *  Private function to diceroll the rarity pull Only from booster packs\r\n     */\r\n    function getRarity(uint czxpWager) private returns(uint8){\r\n        \r\n        //Check if below upper limit\r\n        require(czxpWager <= 1649267441667000);\r\n        \r\n        //FIRST ensure, player can back their wager\r\n        uint _playerCZXPBalance = CzxpToken(CzxpContractAddress_).balanceOf(msg.sender);\r\n        require(_playerCZXPBalance >= czxpWager);\r\n        \r\n        //Check effects - Take their czxp\r\n        if(czxpWager > 0){\r\n            CzxpToken(CzxpContractAddress_).burnCzxp(msg.sender, czxpWager);\r\n        }\r\n        \r\n        //ALL CLEAR - grab a random number\r\n        uint rand = selectRandom(10000);\r\n\r\n        //get our probabilty distribution\r\n        uint16[7] memory probs = burnAndBoost(czxpWager);\r\n        \r\n        //Get the rarity for this pull from the probs\r\n        // 3=epic, 4=rare, 5=uncommon, 6=commmon\r\n        for(uint8 i=2; i < probs.length; i++){\r\n            if(rand <= probs[i]){\r\n                return i;\r\n            }\r\n        }\r\n//REMOVE THIS !!!!\r\n        return 6;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Private Booster distribution function\r\n     */\r\n     function burnAndBoost(uint czxpWager) private returns(uint16[7] memory) {\r\n        \r\n        //buyBoosterCardAndOpen will pass a zero, set a default\r\n        if(czxpWager == 0){\r\n            return [0,0,0,1,50,2700,10000];\r\n        }\r\n         \r\n        (uint16 c, uint16 u, uint16 r, uint16 e) = super.getProbs(czxpWager);\r\n        \r\n        //default distribution is 1,50,2700,10000\r\n         uint16[7] memory probs = [0,0,0,e,r,u,c];\r\n         \r\n        return probs;\r\n     }\r\n     \r\n     /**\r\n      * Return the timestamp of the next daily bonus for a player\r\n      */\r\n      function getTimeToDailyBonus(address _player) public view returns(uint timeStamp){\r\n          \r\n          //check if address exists\r\n          if(timeToCardsPull[_player] == 0){\r\n              return now - 2 seconds;\r\n          }else{\r\n              return timeToCardsPull[_player];\r\n          }\r\n      }\r\n\r\n\r\n//Thanks! for supporting the Cryptoz universe <3 <3 <3\r\n    /**\r\n    * Withdraw balance to wallet ONLY for the owner to call this\r\n    */\r\n   function withdraw() external onlyOwner {\r\n      msg.sender.transfer(address(this).balance);\r\n   }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardTypeId\",\"type\":\"uint32\"}],\"name\":\"getFreeCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCardTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"czxpGainedBoosterPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"allCardTypes\",\"outputs\":[{\"name\":\"cardTypeId\",\"type\":\"uint32\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"set\",\"type\":\"string\"},{\"name\":\"weiCost\",\"type\":\"uint256\"},{\"name\":\"buyCzxp\",\"type\":\"uint256\"},{\"name\":\"transferCzxp\",\"type\":\"uint256\"},{\"name\":\"sacrificeCzxp\",\"type\":\"uint256\"},{\"name\":\"unlockCzxp\",\"type\":\"uint256\"},{\"name\":\"cardLevel\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensByRarity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"czxpWager\",\"type\":\"uint256\"}],\"name\":\"openBoosterCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardTypeId\",\"type\":\"uint32\"},{\"name\":\"_transferCzxp\",\"type\":\"uint256\"},{\"name\":\"_sacrificeCzxp\",\"type\":\"uint256\"},{\"name\":\"_unlockCzxp\",\"type\":\"uint256\"},{\"name\":\"_cardLevel\",\"type\":\"uint8\"}],\"name\":\"addTocardType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"boosterPacksOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getBonusBoosters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardTypesOwned\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiCostOfCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rarity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardTypeId\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_set\",\"type\":\"string\"},{\"name\":\"_assetType\",\"type\":\"uint8\"},{\"name\":\"_notStoreOrBonus\",\"type\":\"uint8\"},{\"name\":\"_rarity\",\"type\":\"uint8\"},{\"name\":\"_totalAvailable\",\"type\":\"uint16\"},{\"name\":\"_weiCost\",\"type\":\"uint256\"},{\"name\":\"_buyCzxp\",\"type\":\"uint256\"}],\"name\":\"loadNewCardType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mySponsor\",\"type\":\"address\"}],\"name\":\"linkMySponsor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardTypesIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBoostersReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnedCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_winner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"awardBoosterCredits\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensByRarity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardTypeToEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_czxpContractAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cardTypeId\",\"type\":\"uint32\"}],\"name\":\"buyCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sponsors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyBoosterCard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"sacrifice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBoostersRewarded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getTimeToDailyBonus\",\"outputs\":[{\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyBoosterCardAndOpen\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cardTypeId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"cardName\",\"type\":\"string\"}],\"name\":\"LogCardTypeLoaded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cardTypeId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"editionNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"LogCardPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"packsOpened\",\"type\":\"uint256\"}],\"name\":\"LogPackOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"LogSponsorLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"CzxpReward\",\"type\":\"uint256\"}],\"name\":\"LogSponsorReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newBonusBalance\",\"type\":\"uint256\"}],\"name\":\"LogDailyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"boostersAwarded\",\"type\":\"uint256\"}],\"name\":\"LogRewardBoosters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"cardTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"editionNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"cardTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rarity\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"CzxpGained\",\"type\":\"uint256\"}],\"name\":\"LogCardCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"cardTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"cardTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"CzxpGained\",\"type\":\"uint256\"}],\"name\":\"SacrificeCardEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"czxpAmount\",\"type\":\"uint256\"}],\"name\":\"CZXPGained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "Cryptoz", "CompilerVersion": "v0.5.9+commit.c68bc34e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c9e817698a057934e22880c94c1deb0c8c11ede3b646d6735cef33ef22692a19"}