{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1271Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271Upgradeable {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1271Upgradeable.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureCheckerUpgradeable {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\\n        return\\n            (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271Upgradeable.isValidSignature.selector));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/BaseGovernanceWithUserUpgradable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Base contract which can be upgraded by Governance and requires user authorization for the upgrade\\r\\n * TODO: implement user permission for upgrade\\r\\n */\\r\\nabstract contract BaseGovernanceWithUserUpgradable is\\r\\n    Initializable,\\r\\n    ContextUpgradeable,\\r\\n    UUPSUpgradeable,\\r\\n    AccessControlUpgradeable\\r\\n{\\r\\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\\\"GOVERNANCE_ROLE\\\");\\r\\n    bytes32 public constant UPGRADE_MANAGER_ROLE = keccak256(\\\"UPGRADE_MANAGER_ROLE\\\");\\r\\n\\r\\n    address private _proposedUpgrade;\\r\\n\\r\\n    function _onlyAdmin() internal view {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"ONLY_ADMIN\\\");\\r\\n    }\\r\\n\\r\\n    function __BaseGovernanceWithUser_init(address governer) internal onlyInitializing {\\r\\n        __Context_init_unchained();\\r\\n        __ERC165_init_unchained();\\r\\n        __ERC1967Upgrade_init_unchained();\\r\\n        __UUPSUpgradeable_init_unchained();\\r\\n        __AccessControl_init_unchained();\\r\\n        __BaseGovernanceWithUser_init_unchained(governer);\\r\\n    }\\r\\n\\r\\n    function __BaseGovernanceWithUser_init_unchained(address governer) internal onlyInitializing {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender()); // Grant DEFAULT_ADMIN to creator. Other role management scan be performed elswhere\\r\\n        _setupRole(GOVERNANCE_ROLE, governer);\\r\\n        _setupRole(UPGRADE_MANAGER_ROLE, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {IERC1967Upgradeable-upgrade}.\\r\\n    * This function is only callable by a governance role, and should be used only for proxy version upgrades\\r\\n    * @param newImplementation Address of the new implementation.\\r\\n    */\\r\\n    function _authorizeUpgrade(address newImplementation) internal virtual override {\\r\\n        require(\\r\\n            hasRole(GOVERNANCE_ROLE, msg.sender) ||\\r\\n                (hasRole(UPGRADE_MANAGER_ROLE, msg.sender) && (newImplementation == _proposedUpgrade)),\\r\\n            \\\"UPGR_NT_AUTH\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Returns the current implementation address.\\r\\n    */\\r\\n    function getImplementation() public view returns (address) {\\r\\n        return _getImplementation();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {IERC1967Upgradeable-upgrade}.\\r\\n    * This function is only callable by a governance role, and should be used only for proxy version upgrades\\r\\n    * @param implementationAddress Address of the new implementation.\\r\\n    */\\r\\n    function proposeNewImplementation(address implementationAddress) external payable onlyRole(GOVERNANCE_ROLE) {\\r\\n        require(implementationAddress != address(0), \\\"SET_ZERO_ADDR\\\");\\r\\n        _proposedUpgrade = implementationAddress;\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\n\\r\\ninterface ILock is IERC721Upgradeable {\\r\\n    function splitManager() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get all the information about a NFT with specific ID\\r\\n     * @param id NFT ID of the NFT for which the information is required\\r\\n     * @return Owner or beneficiary of the NFT\\r\\n     * @return The actual balance of amount locked\\r\\n     * @return The actual amount that the owner can claim\\r\\n     * @return The time when the lock start\\r\\n     * @return The time when the lock will end\\r\\n     */\\r\\n    function getInfoBySingleID(uint id) external view returns (address, uint, uint, uint, uint);\\r\\n\\r\\n    /**\\r\\n     * @notice Get all the information about a set of IDs\\r\\n     * @param ids List of NFT IDs which the information is required\\r\\n     * @return List of owners or beneficiaries\\r\\n     * @return List of actual balance of amount locked\\r\\n     * @return List of actual amount that is claimable\\r\\n     */\\r\\n    function getInfoByManyIDs(uint[] memory ids) external view returns (address[] memory, uint[] memory, uint[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Split a NFT\\r\\n     * @param originId NFT ID to be split\\r\\n     * @param splitParts List of proportions normalized to be used in the split\\r\\n     * @param addresses List of addresses of beneficiaries\\r\\n     * @return newIDs of minted NFTs in order\\r\\n     */\\r\\n    function split(\\r\\n        uint originId,\\r\\n        uint[] memory splitParts,\\r\\n        address[] memory addresses\\r\\n    ) external returns (uint256[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwaprFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface ISwaprFee {\\r\\n    function getFeeReceiver() external view returns (address);\\r\\n\\r\\n    function getFinalOrderFee(uint256 subjectAmount, address token) external view returns (uint256 finalFee);\\r\\n\\r\\n    function getFinalAuctionFee(uint subjectAmount, address token) external view returns (uint finalFee);\\r\\n\\r\\n    function getFeePaid(address sender, address paymentToken) external view returns (uint256);\\r\\n\\r\\n    function disposeFeeRecord(bytes calldata data) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwaprWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface ISwaprWallet {\\r\\n    function isNFTLocked(address lock, uint nftId) external view returns (bool);\\r\\n\\r\\n    function getNFT(address lock, uint nftId) external view returns (bytes memory sig);\\r\\n\\r\\n    function lockNFT(bytes calldata sig, address lock, uint nftId, address owner) external;\\r\\n\\r\\n    function updateLockedNFT(bytes calldata sig, address lock, uint nftId) external;\\r\\n\\r\\n    function depositNativeSwapr(address depositor) external payable;\\r\\n\\r\\n    function swapNative(address from, address to, uint amount) external;\\r\\n\\r\\n    function releaseNative(address receiver, address owner, uint amount) external;\\r\\n\\r\\n    function depositERC(address token) external;\\r\\n\\r\\n    function depositERCSwapr(address token, address depositor, uint amount) external;\\r\\n\\r\\n    function swapERC(address token, address from, address to, uint amount) external;\\r\\n\\r\\n    function disposeNFT(address lock, uint nftId) external;\\r\\n\\r\\n    function releaseNFT(address lock, uint nftId, address receiver) external;\\r\\n\\r\\n    function splitReleaseNFT(\\r\\n        address lock,\\r\\n        uint nftId,\\r\\n        uint[] calldata splitParts,\\r\\n        address[] calldata addresses\\r\\n    ) external returns (uint256[] memory newIDs);\\r\\n\\r\\n    function releaseERC(address token, address receiver, address owner, uint amount) external;\\r\\n\\r\\n    function getBalance(address owner, address token) external view returns (uint balance);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SwaprGL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {BaseGovernanceWithUserUpgradable} from \\\"./common/BaseGovernanceWithUserUpgradable.sol\\\";\\r\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport {ListingHelper, ISwaprWallet} from \\\"./utils/ListingHelper.sol\\\";\\r\\nimport \\\"./interfaces/ISwaprFee.sol\\\";\\r\\n\\r\\n/// @title Manages NFT listings and user funds\\r\\n/// @author swapr\\r\\n/// @notice Allows only signature based listings\\r\\n/// @dev Can only be interacted from a recognised marketplace EOA\\r\\ncontract SwaprGL is BaseGovernanceWithUserUpgradable, ListingHelper {\\r\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\r\\n\\r\\n    event Purchased(bool isSplit, Order order, uint[] splitParts);\\r\\n    event Claimed(bool success, string res);\\r\\n\\r\\n    uint public listingModTimeLimit;\\r\\n\\r\\n    ISwaprFee private _swaprFee;\\r\\n\\r\\n    /// @notice initialize the contract\\r\\n    /// @param data encoded data containing the wallet address, marketplace address and swapr fee address\\r\\n    function initialize(bytes calldata data) public initializer {\\r\\n        (address payable walletAddress, address payable marketplaceAddress, address swaprFeeAddress) = abi.decode(\\r\\n            data,\\r\\n            (address, address, address)\\r\\n        );\\r\\n        __BaseGovernanceWithUser_init(_msgSender());\\r\\n\\r\\n        _checkAddress(walletAddress);\\r\\n        _checkAddress(marketplaceAddress);\\r\\n        _checkAddress(swaprFeeAddress);\\r\\n\\r\\n        //You can setup custom roles here in addition to the default gevernance roles\\r\\n        //e.g _setupRole(MARKETPLACE_ROLE, marketplaceAddress);\\r\\n\\r\\n        //All state variables must be initialized here in sequence to prevent upgrade conflicts\\r\\n        swaprWallet = ISwaprWallet(walletAddress);\\r\\n        _swaprFee = ISwaprFee(swaprFeeAddress);\\r\\n        theMarketplace = marketplaceAddress;\\r\\n        timeOffset = 5 minutes; // 5 minutes offset\\r\\n        listingModTimeLimit = 1 hours; //1 hour\\r\\n    }\\r\\n\\r\\n    /// @notice Only admin role can attach a new swapr wallet incase\\r\\n    /// @param wallet address of the new wallet\\r\\n    function attachNewWallet(address wallet) external payable {\\r\\n        _onlyAdmin();\\r\\n        _checkAddress(wallet);\\r\\n        swaprWallet = ISwaprWallet(wallet);\\r\\n    }\\r\\n\\r\\n    /// @notice Only admin role can attach a new swapr fee contract incase\\r\\n    /// @param feeContract address of the new fee contract\\r\\n    function attachNewFeeContract(address feeContract) external payable {\\r\\n        _onlyAdmin();\\r\\n        _checkAddress(feeContract);\\r\\n        _swaprFee = ISwaprFee(feeContract);\\r\\n    }\\r\\n\\r\\n    /// @notice To update the marketplace account incase\\r\\n    /// @param marketplace address of the new marketplace\\r\\n    function attachNewMarketplace(address marketplace) external payable {\\r\\n        _onlyAdmin();\\r\\n        _checkAddress(marketplace);\\r\\n        theMarketplace = marketplace;\\r\\n    }\\r\\n\\r\\n    /// @notice To update the offset time incase\\r\\n    /// @param timeInSecs new time in seconds\\r\\n    function updateTimeOffset(uint16 timeInSecs) external payable {\\r\\n        _onlyAdmin();\\r\\n        require(timeInSecs > 0 && timeInSecs < 1 hours, \\\"INV_TIME\\\");\\r\\n        timeOffset = timeInSecs;\\r\\n    }\\r\\n\\r\\n    /// @notice sets the max time in which a listing can be modified\\r\\n    /// @param timeInSecs new time in seconds\\r\\n    function setListingUpdateTime(uint16 timeInSecs) external payable {\\r\\n        _onlyAdmin();\\r\\n        require(timeInSecs > 0 && timeInSecs < 1 hours, \\\"INV_TIME\\\");\\r\\n        listingModTimeLimit = timeInSecs;\\r\\n    }\\r\\n\\r\\n    /// @notice Deposit NFTs to be listed only ERC721 ILock proxies are accepted\\r\\n    /// @dev depositType == 3 means deposit to list for sale in future\\r\\n    /// @param data should be signed by the depositor of NFT\\r\\n    function depositNFTs(bytes calldata data) external {\\r\\n        _checkSignature(_msgSender(), data);\\r\\n        (bytes memory message, bytes memory sig) = _decodeBytesToBytesBytes(data);\\r\\n        (uint depositType, address lock, uint nftId) = abi.decode(message, (uint, address, uint));\\r\\n        require(depositType == 3, \\\"INV_DTYPE\\\");\\r\\n        swaprWallet.lockNFT(sig, lock, nftId, _msgSender());\\r\\n    }\\r\\n\\r\\n    /// @notice Creates a new listing for Auction or Order type based on data provided\\r\\n    /// @dev Only proceeds with valid marketplace signature\\r\\n    /// @param listingType 1 equals Auction, 2 equals Order\\r\\n    /// @param fee fee to be paid\\r\\n    /// @param paymentToken address of the token to be used for fee payment\\r\\n    /// @param data contains the encoded string\\r\\n    function createListing(uint8 listingType, uint256 fee, address paymentToken, bytes calldata data) external {\\r\\n        _checkSignature(theMarketplace, data);\\r\\n        address sender = _msgSender();\\r\\n        (bytes memory listingData, ) = _decodeBytesToBytesBytes(data);\\r\\n        (bool isValid, address lock, uint nftId, , bytes memory sig) = _validateListing(\\r\\n            sender,\\r\\n            listingType,\\r\\n            listingData\\r\\n        );\\r\\n        require(isValid, \\\"INV_LISTING\\\");\\r\\n        require(_swaprFee.getFeePaid(sender, paymentToken) >= fee, \\\"LOW_FEE_PAID\\\");\\r\\n        swaprWallet.lockNFT(sig, lock, nftId, sender);\\r\\n        _swaprFee.disposeFeeRecord(abi.encode(fee, sender, paymentToken));\\r\\n    }\\r\\n\\r\\n    /// @notice Updates a new listing for Auction or Order type based on data provided\\r\\n    /// @dev Only proceeds with valid marketplace signature\\r\\n    /// @param listingType 1 equals Auction, 2 equals Order\\r\\n    /// @param data contains the encoded string\\r\\n    function updateListing(uint8 listingType, bytes calldata data) external {\\r\\n        _checkSignature(theMarketplace, data);\\r\\n        address sender = _msgSender();\\r\\n        (bytes memory listingDatas, ) = abi.decode(data, (bytes, bytes));\\r\\n        (bytes memory activeListingData, bytes memory proposedListingData) = abi.decode(listingDatas, (bytes, bytes));\\r\\n        _checkSignature(sender, activeListingData);\\r\\n        _checkSignature(sender, proposedListingData);\\r\\n        uint createdOn;\\r\\n        if (listingType == 1) {\\r\\n            //Auction\\r\\n            Auction memory auction = _extractAuctionInfo(activeListingData);\\r\\n            createdOn = auction.createdOn;\\r\\n        } else if (listingType == 2) {\\r\\n            //Order\\r\\n            Order memory order = _extractOrderInfo(activeListingData);\\r\\n            createdOn = order.createdOn;\\r\\n        }\\r\\n        require(block.timestamp - createdOn <= listingModTimeLimit, \\\"TIME_EXD\\\");\\r\\n        (bool isValid, address lock, uint nftId, , bytes memory sig) = _validateListing(\\r\\n            sender,\\r\\n            listingType,\\r\\n            proposedListingData\\r\\n        );\\r\\n        require(isValid, \\\"INV_LIST\\\");\\r\\n        swaprWallet.updateLockedNFT(sig, lock, nftId);\\r\\n    }\\r\\n\\r\\n    /// @notice is for Auction type only so that seller or buyer can claim their rightful assets/funds\\r\\n    /// @dev automatically detects if buyer have wallet deposits or provoke for approval\\r\\n    /// @dev you can check the deposits by getBalance() or else get approval for funds\\r\\n    /// @param data must be Auction & Bid type provided with marketplace signature\\r\\n    function claim(bytes calldata data) external {\\r\\n        _checkSignature(theMarketplace, data);\\r\\n        (bytes memory message, ) = _decodeBytesToBytesBytes(data);\\r\\n        (bytes memory listingData, bytes memory lastBid) = _decodeBytesToBytesBytes(message);\\r\\n\\r\\n        address claimant = _msgSender();\\r\\n        (bool success, string memory res) = _validateClaim(claimant, listingData, lastBid);\\r\\n        require(success, res);\\r\\n        Bid memory bid = _extractBid(lastBid);\\r\\n        Auction memory auction = _extractAuctionInfo(listingData);\\r\\n\\r\\n        if (_verify(claimant, listingData)) {\\r\\n            //for seller\\r\\n            PayNow memory payOps = PayNow(\\r\\n                auction.toEOA,\\r\\n                auction.acceptedToken,\\r\\n                bid.bidder,\\r\\n                claimant,\\r\\n                swaprWallet.getBalance(bid.bidder, auction.acceptedToken),\\r\\n                bid.offerPrice\\r\\n            );\\r\\n            require(payNow(payOps, auction.depositType), \\\"PMT_FAIL\\\");\\r\\n        } else if (_verify(claimant, lastBid)) {\\r\\n            //for buyer\\r\\n            swaprWallet.releaseNFT(auction.lock, auction.nftId, claimant);\\r\\n            swaprWallet.disposeNFT(auction.lock, auction.nftId);\\r\\n        } else {\\r\\n            success = false;\\r\\n            res = \\\"INV_CLAIMANT\\\";\\r\\n            return;\\r\\n        }\\r\\n        emit Claimed(success, res);\\r\\n    }\\r\\n\\r\\n    /// @notice withdraws deposited NFTs if needed\\r\\n    /// @dev only for marketplace to prevent listed NFTs being withdrawn\\r\\n    /// @param data must be provided with marketplace signature\\r\\n    function withdrawNFT(bytes calldata data) external {\\r\\n        _checkSignature(theMarketplace, data);\\r\\n        (bytes memory info, ) = _decodeBytesToBytesBytes(data);\\r\\n        (address lock, uint256 nftId) = abi.decode(info, (address, uint256));\\r\\n        address sender = _msgSender();\\r\\n        _withdraw(sender, lock, nftId);\\r\\n    }\\r\\n\\r\\n    /// @notice withdraws native/erc20 deposited funds\\r\\n    /// @dev anyone can withdraw deposited funds because getBalance() only returns unlocked funds\\r\\n    /// @param data must be provided with marketplace signature\\r\\n    function withdrawFunds(bytes calldata data) external {\\r\\n        _checkSignature(theMarketplace, data);\\r\\n        (bytes memory info, ) = _decodeBytesToBytesBytes(data);\\r\\n        (address token, uint withdrawable, address receiver) = abi.decode(info, (address, uint, address));\\r\\n        _withdraw(token, withdrawable, receiver, _msgSender());\\r\\n    }\\r\\n\\r\\n    /// @notice Get active swapr wallet address\\r\\n    /// @return Address of the wallet contract\\r\\n    function getWallet() public view returns (address) {\\r\\n        return address(swaprWallet);\\r\\n    }\\r\\n\\r\\n    /// @notice Buyer's function to proceed purchase of Order type listing\\r\\n    /// @dev automatically detects if buyer have wallet deposits or provoke for approval\\r\\n    /// @dev you can check the deposits by getBalance() or else get approval for funds\\r\\n    /// @dev does not require buyer's signature since its direct purchase but requires sellers signature\\r\\n    /// @dev it also requires the marketplace signature to make sure the Order type data is not forged\\r\\n    /// @param buyerPurchasedAmount front end dev should maintain the amount purchased by each wallet and send in\\r\\n    /// @param data must be Order type provided with marketplace signature\\r\\n    /// @param split SHould not be zero or more than EXP\\r\\n    function buyNowOrder(uint256 buyerPurchasedAmount, bytes memory data, uint128 split) external payable {\\r\\n        _checkSignature(theMarketplace, data);\\r\\n        (bytes memory listingData, ) = _decodeBytesToBytesBytes(data);\\r\\n        (, bytes memory sig) = _decodeBytesToBytesBytes(listingData);\\r\\n        bool isSplit;\\r\\n        Order memory order = _extractOrderInfo(listingData);\\r\\n        require(swaprWallet.isNFTLocked(order.lock, order.nftId), \\\"ORD_NOT_EXIST\\\");\\r\\n        require(order.depositType == 2, \\\"INV_DEP_TYPE\\\");\\r\\n        require(\\r\\n            split > 0 && split <= EXP && split <= order.remainingPart && split <= order.maxTokenSell,\\r\\n            \\\"INC_SPLIT_AMT\\\"\\r\\n        );\\r\\n\\r\\n        address buyer = _msgSender();\\r\\n        require(buyerPurchasedAmount < order.maxBuyPerWallet, \\\"PURCH_LMT_EXCD\\\");\\r\\n\\r\\n        //MakePayment\\r\\n        uint256 price = (order.fixedPrice * split) / EXP;\\r\\n\\r\\n        PayNow memory payOps = PayNow(\\r\\n            order.toEOA,\\r\\n            order.acceptedToken,\\r\\n            buyer,\\r\\n            order.seller,\\r\\n            swaprWallet.getBalance(buyer, order.acceptedToken),\\r\\n            price\\r\\n        );\\r\\n        require(_payUpfront(payOps, order.depositType, msg.value), \\\"PMT_FAIL\\\");\\r\\n\\r\\n        if (split < order.remainingPart) {\\r\\n            uint256[] memory splitParts = new uint[](2);\\r\\n            address[] memory addresses = new address[](2);\\r\\n            //seller's part\\r\\n            uint256 splitRecount = ((split * EXP) / order.remainingPart);\\r\\n            splitParts[0] = EXP - splitRecount;\\r\\n            addresses[0] = getWallet();\\r\\n            //buyer's part\\r\\n            splitParts[1] = splitRecount;\\r\\n            addresses[1] = buyer;\\r\\n            uint256[] memory newIDs = swaprWallet.splitReleaseNFT(order.lock, order.nftId, splitParts, addresses);\\r\\n            order.nftId = newIDs[0];\\r\\n            order.remainingPart = order.remainingPart - split; //where remainingPart should be unsold part of the NFT\\r\\n            if (order.remainingPart > 0) {\\r\\n                isSplit = true;\\r\\n            }\\r\\n            swaprWallet.lockNFT(sig, order.lock, order.nftId, getWallet());\\r\\n            emit Purchased(isSplit, order, splitParts);\\r\\n        } else {\\r\\n            swaprWallet.releaseNFT(order.lock, order.nftId, buyer);\\r\\n            swaprWallet.disposeNFT(order.lock, order.nftId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Buyer's function to proceed purchase of Auction type listing\\r\\n    /// @dev automatically detects if buyer have wallet deposits or provoke for approval\\r\\n    /// @dev you can check the deposits by getBalance() or else get approval for funds\\r\\n    /// @param data must be Auction & Bid type provided with marketplace signature\\r\\n    function buyNowAuction(bytes memory data) external payable {\\r\\n        _checkSignature(theMarketplace, data);\\r\\n        (bytes memory message, ) = _decodeBytesToBytesBytes(data);\\r\\n        (bool isActiveBid, bytes memory listingData, bytes memory lastBid) = abi.decode(message, (bool, bytes, bytes));\\r\\n\\r\\n        Auction memory auction = _extractAuctionInfo(listingData);\\r\\n        require(swaprWallet.isNFTLocked(auction.lock, auction.nftId), \\\"AUC_NOT_EXST\\\");\\r\\n        require(auction.depositType == 1, \\\"INV_DP_TYPE\\\");\\r\\n\\r\\n        if (isActiveBid) {\\r\\n            Bid memory bid = _extractBid(lastBid);\\r\\n            require(block.timestamp < bid.listingEndTime, \\\"AUC_END\\\");\\r\\n            require(auction.buyNowPrice > bid.offerPrice, \\\"HIGH_BID_PLACD\\\");\\r\\n        }\\r\\n\\r\\n        address buyer = _msgSender();\\r\\n\\r\\n        PayNow memory payOps = PayNow(\\r\\n            auction.toEOA,\\r\\n            auction.acceptedToken,\\r\\n            buyer,\\r\\n            auction.seller,\\r\\n            swaprWallet.getBalance(buyer, auction.acceptedToken),\\r\\n            auction.buyNowPrice\\r\\n        );\\r\\n        require(_payUpfront(payOps, auction.depositType, msg.value), \\\"PMT_FAIL\\\");\\r\\n\\r\\n        swaprWallet.releaseNFT(auction.lock, auction.nftId, buyer);\\r\\n        swaprWallet.disposeNFT(auction.lock, auction.nftId);\\r\\n    }\\r\\n\\r\\n    /// @notice Triggers the payment process for any valid purchase on listing\\r\\n    /// @dev Can handle Native or ERC payments of any kind\\r\\n    /// @param payOps refer to type PayNow\\r\\n    /// @param depositType 1 for Auction, 2 for Order\\r\\n    /// @return paid true if payment succeeds\\r\\n    function payNow(PayNow memory payOps, uint256 depositType) public payable returns (bool paid) {\\r\\n        if (payOps.fromBalance >= payOps.amount) {\\r\\n            paid = _payFromWallet(payOps, depositType);\\r\\n        } else {\\r\\n            paid = _payUpfront(payOps, depositType, msg.value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice performs a payment from buyer to seller for Native/ERC20 tokens\\r\\n    /// @dev can use if buyer do have funds within swapr wallet\\r\\n    /// @param _payOps refer to PayNow struct for details\\r\\n    /// @param depositType 1 for Auction, 2 for Order\\r\\n    /// @return true if payment succeeds\\r\\n    function _payFromWallet(PayNow memory _payOps, uint256 depositType) private returns (bool) {\\r\\n        address feeReceiver = _swaprFee.getFeeReceiver();\\r\\n        uint256 finalListingFee = depositType == 1\\r\\n            ? _swaprFee.getFinalAuctionFee(_payOps.amount, _payOps.acceptedToken)\\r\\n            : _swaprFee.getFinalOrderFee(_payOps.amount, _payOps.acceptedToken);\\r\\n\\r\\n        if (_payOps.acceptedToken == address(0)) {\\r\\n            swaprWallet.swapNative(_payOps.from, _payOps.receiver, _payOps.amount);\\r\\n            swaprWallet.releaseNative(feeReceiver, _payOps.receiver, finalListingFee);\\r\\n            if (_payOps.toEOA) {\\r\\n                swaprWallet.releaseNative(_payOps.receiver, _payOps.receiver, _payOps.amount - finalListingFee);\\r\\n            }\\r\\n        } else {\\r\\n            swaprWallet.swapERC(_payOps.acceptedToken, _payOps.from, _payOps.receiver, _payOps.amount);\\r\\n            swaprWallet.releaseERC(_payOps.acceptedToken, feeReceiver, _payOps.receiver, finalListingFee);\\r\\n            if (_payOps.toEOA) {\\r\\n                swaprWallet.releaseERC(\\r\\n                    _payOps.acceptedToken,\\r\\n                    _payOps.receiver,\\r\\n                    _payOps.receiver,\\r\\n                    _payOps.amount - finalListingFee\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice performs an upfront payment from buyer to seller for Native/ERC20 tokens\\r\\n    /// @dev can use if buyer do not have any funds within swapr wallet\\r\\n    /// @param _payOps refer to PayNow struct for details\\r\\n    /// @param depositType 1 for Auction, 2 for Order\\r\\n    /// @param value value attached to payable in case of Native currency\\r\\n    /// @return true if payment succeeds\\r\\n    function _payUpfront(PayNow memory _payOps, uint256 depositType, uint256 value) private returns (bool) {\\r\\n        address receiver = _payOps.toEOA ? _payOps.receiver : address(swaprWallet);\\r\\n        address feeReceiver = _swaprFee.getFeeReceiver();\\r\\n        uint256 finalListingFee = depositType == 1\\r\\n            ? _swaprFee.getFinalAuctionFee(_payOps.amount, _payOps.acceptedToken)\\r\\n            : _swaprFee.getFinalOrderFee(_payOps.amount, _payOps.acceptedToken);\\r\\n\\r\\n        if (_payOps.acceptedToken == address(0)) {\\r\\n            require(value >= _payOps.amount, \\\"LOW_VAL\\\");\\r\\n            payable(feeReceiver).transfer(finalListingFee);\\r\\n            if (_payOps.toEOA) {\\r\\n                payable(receiver).transfer(_payOps.amount - finalListingFee);\\r\\n            } else {\\r\\n                swaprWallet.depositNativeSwapr{value: _payOps.amount - finalListingFee}(_payOps.receiver);\\r\\n            }\\r\\n        } else {\\r\\n            IERC20MetadataUpgradeable paymentToken = IERC20MetadataUpgradeable(_payOps.acceptedToken);\\r\\n            require(paymentToken.allowance(_payOps.from, address(this)) >= _payOps.amount, \\\"INSF_ALWNC\\\");\\r\\n            paymentToken.safeTransferFrom(_payOps.from, feeReceiver, finalListingFee);\\r\\n            paymentToken.safeTransferFrom(_payOps.from, receiver, _payOps.amount - finalListingFee);\\r\\n            if (!_payOps.toEOA) {\\r\\n                swaprWallet.depositERCSwapr(_payOps.acceptedToken, _payOps.receiver, _payOps.amount - finalListingFee);\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice internal implementation for NFT withdraw\\r\\n    /// @dev can be used for both Auction and Order\\r\\n    /// @param claimant address of the claimant\\r\\n    /// @param lock address of the lock contract\\r\\n    /// @param nftId id of the NFT\\r\\n    function _withdraw(address claimant, address lock, uint256 nftId) private {\\r\\n        require(swaprWallet.isNFTLocked(lock, nftId), \\\"NOT_AVAIL\\\");\\r\\n        swaprWallet.releaseNFT(lock, nftId, claimant);\\r\\n    }\\r\\n\\r\\n    /// @notice internal implementation for Native/ERC20 withdraw\\r\\n    /// @dev can be used for both Auction and Order\\r\\n    /// @param token address of the token\\r\\n    /// @param withdrawable amount of the token to withdraw\\r\\n    /// @param receiver address of the receiver\\r\\n    /// @param claimant address of the claimant\\r\\n    function _withdraw(address token, uint256 withdrawable, address receiver, address claimant) private {\\r\\n        if (token == address(0)) {\\r\\n            swaprWallet.releaseNative(receiver, claimant, withdrawable);\\r\\n        } else {\\r\\n            swaprWallet.releaseERC(token, receiver, claimant, withdrawable);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/ListingHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\\\";\\r\\nimport {ILock} from \\\"../interfaces/ILock.sol\\\";\\r\\nimport {ISwaprWallet} from \\\"../interfaces/ISwaprWallet.sol\\\";\\r\\n\\r\\nabstract contract ListingHelper {\\r\\n    using ECDSAUpgradeable for bytes;\\r\\n\\r\\n    uint256 constant EXP = 1e18;\\r\\n\\r\\n    uint16 public timeOffset;\\r\\n    address public theMarketplace;\\r\\n    ISwaprWallet internal swaprWallet;\\r\\n\\r\\n    error INV_ADDRS();\\r\\n    error INV_SIG();\\r\\n\\r\\n    /// @notice Struct type to encapsulate auction data\\r\\n    /// @dev depositType is to detect the listing type as proposed listing type\\r\\n    /// @dev activeDepositType is to check if asset is already listed as current listing type\\r\\n    struct Auction {\\r\\n        uint256 nftId; //tokenId owned by seller\\r\\n        uint256 startingPrice; //starting price for auction\\r\\n        uint256 buyNowPrice; //price to instantly buy asset from auction\\r\\n        uint128 startTime; //auction starting time\\r\\n        uint128 endTime; //auction ending time\\r\\n        uint128 createdOn; //auction created time\\r\\n        uint8 depositType; //proposed listing type\\r\\n        uint8 activeDepositType; //current listing type\\r\\n        bool toEOA; //either seller want funds to external account or within swapr wallet\\r\\n        address lock; //address of lock proxy erc721\\r\\n        address acceptedToken; //accepted token for payment\\r\\n        address seller; //address of the seller\\r\\n    }\\r\\n\\r\\n    /// @notice Struct type to encapsulate order data\\r\\n    /// @dev depositType is to detect the listing type as proposed listing type\\r\\n    /// @dev activeDepositType is to check if asset is already listed as current listing type\\r\\n    struct Order {\\r\\n        uint256 nftId; //tokenId owned by seller\\r\\n        uint256 fixedPrice; //price demand for asset\\r\\n        uint256 maxTokenSell; //maximum percentage of nft a buyer can buy in one go if set to 1 means no splitting allowed\\r\\n        uint128 maxBuyPerWallet; //maximum amount in percentage a wallet can buy from this listing\\r\\n        uint128 remainingPart; //internal record to maintaing the remaining splitted asset\\r\\n        uint128 createdOn; //order created time\\r\\n        uint8 depositType; //proposed listing type\\r\\n        uint8 activeDepositType; //current listing type\\r\\n        bool toEOA; //either seller want funds to external account or within swapr wallet\\r\\n        address lock; //address of lock proxy erc721\\r\\n        address acceptedToken; //accepted token for payment\\r\\n        address seller; //address of the seller\\r\\n    }\\r\\n\\r\\n    /// @notice Struct type to accept the specific bidding info\\r\\n    struct Bid {\\r\\n        uint256 nftId; //nftId the bid is being made for\\r\\n        uint256 offerPrice; //bidder's offered price\\r\\n        uint256 lockedBalance; //bidder's total locked balance within swapr wallet\\r\\n        uint128 listingEndTime; //updated listing endtime (with added timeOffset) incase the bid was made in last minute\\r\\n        address bidder; //address of bidder\\r\\n        address lock; //lock address the bid is being validated for\\r\\n    }\\r\\n\\r\\n    /// @notice Struct type to encapsulate payment info\\r\\n    struct PayNow {\\r\\n        bool toEOA; //if the seller wants payment in Externally Owned Account it should be true\\r\\n        address acceptedToken;\\r\\n        address from; //address the payment is being made from\\r\\n        address receiver; //the payment should be sent to\\r\\n        uint256 fromBalance; //current balance of the buyer\\r\\n        uint256 amount; //amount to be paid\\r\\n    }\\r\\n\\r\\n    /// @notice Validates provided listing data if its acceptable to be listed for sale\\r\\n    /// @dev Can use this before calling createListing to quickly validate\\r\\n    /// @param listingData must be provided with sellers signature\\r\\n    /// @return isValid true if succeeds\\r\\n    function isListableAuction(bytes memory listingData) external view returns (bool isValid) {\\r\\n        Auction memory auction = _extractAuctionInfo(listingData);\\r\\n        ILock lockContract = ILock(auction.lock);\\r\\n        if (lockContract.ownerOf(auction.nftId) == auction.seller) {\\r\\n            (isValid, , , , ) = _validateListing(auction.seller, auction.depositType, listingData);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Validates provided listing data if its acceptable to be listed for sale\\r\\n    /// @dev Can use this before calling createListing to quickly validate\\r\\n    /// @param listingData must be provided with sellers signature\\r\\n    /// @return isValid true if succeeds\\r\\n    function isListableOrder(bytes memory listingData) external view returns (bool isValid) {\\r\\n        Order memory order = _extractOrderInfo(listingData);\\r\\n        ILock lockContract = ILock(order.lock);\\r\\n        if (lockContract.ownerOf(order.nftId) == order.seller) {\\r\\n            (isValid, , , , ) = _validateListing(order.seller, order.depositType, listingData);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Validates the  proposedBid data against the currently activeBid bid\\r\\n    /// @dev Only marketplace can call this function to provide security\\r\\n    /// @dev once a bid is validated old bid must be disabled on front-end\\r\\n    /// @param data must be provided with marketplace signature\\r\\n    /// @dev isActiveBid => If set to false then only validates proposedBid\\r\\n    /// @return isValid true means bid is valid to be registered\\r\\n    /// @return validatedBid validated bid date with addtional time details for future validation\\r\\n    function validateBid(bytes calldata data) external view returns (bool isValid, Bid memory validatedBid) {\\r\\n        _checkSignature(theMarketplace, data);\\r\\n        (bytes memory message, ) = _decodeBytesToBytesBytes(data);\\r\\n        (bool isActiveBid, bytes memory listingData, bytes memory activeBidData, bytes memory proposedBidData) = abi\\r\\n            .decode(message, (bool, bytes, bytes, bytes));\\r\\n\\r\\n        Auction memory auction = _extractAuctionInfo(listingData);\\r\\n        Bid memory proposedBid = _extractBid(proposedBidData);\\r\\n\\r\\n        require(auction.depositType == 1, \\\"INV_DEP_TYPE\\\");\\r\\n        _checkSignature(proposedBid.bidder, proposedBidData);\\r\\n        if (!isActiveBid) {\\r\\n            (isValid, proposedBid.listingEndTime) = _validateAsFirstBid(listingData, proposedBid);\\r\\n        } else {\\r\\n            Bid memory activeBid = _extractBid(activeBidData);\\r\\n            (isValid, proposedBid.listingEndTime) = _validateAsLastBid(message, activeBid, proposedBid);\\r\\n        }\\r\\n        uint bidderTotalBalance = swaprWallet.getBalance(proposedBid.bidder, auction.acceptedToken);\\r\\n        if (\\r\\n            bidderTotalBalance < proposedBid.lockedBalance ||\\r\\n            bidderTotalBalance - proposedBid.lockedBalance < proposedBid.offerPrice\\r\\n        ) {\\r\\n            return (false, validatedBid);\\r\\n        }\\r\\n        validatedBid = proposedBid;\\r\\n    }\\r\\n\\r\\n    /// @notice Validates provided listing data if its acceptable to claimed by claimant\\r\\n    /// @dev Can use this before calling claim to quickly validate\\r\\n    /// @param claimant address of the claimant\\r\\n    /// @param listingData must be provided with sellers signature\\r\\n    /// @param lastBid must be provided with bidders signature\\r\\n    /// @return isValid true if succeeds\\r\\n    /// @return res reason of failure\\r\\n    function isClaimable(\\r\\n        address claimant,\\r\\n        bytes memory listingData,\\r\\n        bytes memory lastBid\\r\\n    ) external view returns (bool isValid, string memory res) {\\r\\n        (isValid, res) = _validateClaim(claimant, listingData, lastBid);\\r\\n    }\\r\\n\\r\\n    /// @notice returns the signer of the provided data\\r\\n    /// @param dataHash hash of the data\\r\\n    /// @param signature signature of the data\\r\\n    /// @return signer address of the signer\\r\\n    function getSigner(bytes32 dataHash, bytes memory signature) external pure returns (address) {\\r\\n        return ECDSAUpgradeable.recover(ECDSAUpgradeable.toEthSignedMessageHash(dataHash), signature);\\r\\n    }\\r\\n\\r\\n    /// @notice returns the hash of the provided message\\r\\n    /// @param message message to be hashed\\r\\n    /// @return messageHash hash of the message\\r\\n    function toMessageHash(bytes memory message) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(message));\\r\\n    }\\r\\n\\r\\n    /// @notice Underlying actual implementation to validate listing\\r\\n    /// @dev Can validate both the Auction type and Order type\\r\\n    /// @param sender address of the seller\\r\\n    /// @param listingType must be either 1 or 2 any other will not be accepted\\r\\n    /// @param listingData must be provided with sellers signature\\r\\n    /// @return isValid if true can proceed else get failure reason from res\\r\\n    /// @return lock address of the lock\\r\\n    /// @return nftId id of the nft being listed\\r\\n    /// @return paymentToken address of the token being accepted\\r\\n    /// @return sig signature of the seller\\r\\n    function _validateListing(\\r\\n        address sender,\\r\\n        uint listingType,\\r\\n        bytes memory listingData\\r\\n    ) internal view returns (bool isValid, address lock, uint nftId, address paymentToken, bytes memory sig) {\\r\\n        _checkSignature(sender, listingData);\\r\\n        (, bytes memory _sig) = _decodeBytesToBytesBytes(listingData);\\r\\n        sig = _sig;\\r\\n        require(listingType == 1 || listingType == 2, \\\"INV_LIST_TYPE\\\");\\r\\n        if (listingType == 1) {\\r\\n            //Auction\\r\\n            (isValid, lock, nftId, paymentToken) = _validateAuctionCapability(listingData);\\r\\n        } else if (listingType == 2) {\\r\\n            //Order\\r\\n            (isValid, lock, nftId, paymentToken) = _validateOrderCapability(listingData);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Internal implementation for the claim validation wrapped to deal with msg.sender\\r\\n    /// @dev Can use this before calling claim to quickly validate\\r\\n    /// @param claimant is the user who's claim is being validated\\r\\n    /// @param listingData must be provided with sellers signature\\r\\n    /// @param bidData must be provided with bidders signature\\r\\n    /// @return isValid true if succeeds\\r\\n    /// @return res reason of failure\\r\\n    function _validateClaim(\\r\\n        address claimant,\\r\\n        bytes memory listingData,\\r\\n        bytes memory bidData\\r\\n    ) internal view returns (bool isValid, string memory res) {\\r\\n        Auction memory auction = _extractAuctionInfo(listingData);\\r\\n        Bid memory lastBid = _extractBid(bidData);\\r\\n\\r\\n        _checkSignature(auction.seller, listingData);\\r\\n        _checkSignature(lastBid.bidder, bidData);\\r\\n        if (block.timestamp < lastBid.listingEndTime) {\\r\\n            revert(\\\"INV_DATA\\\");\\r\\n        }\\r\\n        if (_verify(claimant, listingData)) {\\r\\n            //for seller\\r\\n            require(claimant == auction.seller, \\\"INV_CLAIM\\\");\\r\\n            uint bidderTotalBalance = swaprWallet.getBalance(lastBid.bidder, auction.acceptedToken);\\r\\n            if (bidderTotalBalance - lastBid.lockedBalance >= lastBid.offerPrice) {\\r\\n                isValid = true;\\r\\n            }\\r\\n        } else if (_verify(claimant, bidData)) {\\r\\n            //for bidder/buyer\\r\\n            require(claimant == lastBid.bidder, \\\"INV_CLAIM\\\");\\r\\n            if (swaprWallet.isNFTLocked(auction.lock, auction.nftId)) {\\r\\n                isValid = true;\\r\\n            }\\r\\n        } else {\\r\\n            res = \\\"INV_CLAIM\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice decodes the Auction type encoded data\\r\\n    /// @param auctionData encoded auction data\\r\\n    /// @return auction Auction type decoded data\\r\\n    function _extractAuctionInfo(bytes memory auctionData) internal pure returns (Auction memory auction) {\\r\\n        (bytes memory auctionInfo, ) = _decodeBytesToBytesBytes(auctionData);\\r\\n        auction = abi.decode(auctionInfo, (Auction));\\r\\n    }\\r\\n\\r\\n    /// @notice decodes the Order type encoded data\\r\\n    /// @param orderData encoded order data\\r\\n    /// @return order Order type decoded data\\r\\n    function _extractOrderInfo(bytes memory orderData) internal pure returns (Order memory order) {\\r\\n        (bytes memory orderInfo, ) = _decodeBytesToBytesBytes(orderData);\\r\\n        order = abi.decode(orderInfo, (Order));\\r\\n    }\\r\\n\\r\\n    /// @notice decodes the Bid type encoded data\\r\\n    /// @param bidData encoded bid data\\r\\n    /// @return bid Bid type decoded data\\r\\n    function _extractBid(bytes memory bidData) internal pure returns (Bid memory bid) {\\r\\n        (bytes memory bidInfo, ) = _decodeBytesToBytesBytes(bidData);\\r\\n        bid = abi.decode(bidInfo, (Bid));\\r\\n    }\\r\\n\\r\\n    /// @notice verifies the signature of the signer\\r\\n    /// @param signer address of the signer\\r\\n    /// @param _data data that was signed\\r\\n    /// @return true if signature is signed by the gived signer\\r\\n    function _verify(address signer, bytes memory _data) internal view returns (bool) {\\r\\n        (bytes memory message, bytes memory signature) = _decodeBytesToBytesBytes(_data);\\r\\n        return\\r\\n            SignatureCheckerUpgradeable.isValidSignatureNow(\\r\\n                signer,\\r\\n                ECDSAUpgradeable.toEthSignedMessageHash(toMessageHash(message)),\\r\\n                signature\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice decodes one gived bytes into two bytes variables\\r\\n    /// @param data bytes to be decoded\\r\\n    /// @return first bytes variable\\r\\n    /// @return second bytes variable\\r\\n    function _decodeBytesToBytesBytes(bytes memory data) internal pure returns (bytes memory, bytes memory) {\\r\\n        (bytes memory first, bytes memory second) = abi.decode(data, (bytes, bytes));\\r\\n        return (first, second);\\r\\n    }\\r\\n\\r\\n    /// @notice Validates the proposed bid for the auction\\r\\n    /// @param auction auction data\\r\\n    /// @param activeBid active bid data\\r\\n    /// @param proposedBid proposed bid data\\r\\n    /// @return isValid true if proposed bid is valid\\r\\n    /// @return proposedEndTime proposed end time for the auction\\r\\n    function _bidsCrossValidate(\\r\\n        Auction memory auction,\\r\\n        Bid memory activeBid,\\r\\n        Bid memory proposedBid\\r\\n    ) private view returns (bool isValid, uint128 proposedEndTime) {\\r\\n        if ((activeBid.listingEndTime < auction.endTime) || (activeBid.listingEndTime < block.timestamp)) {\\r\\n            return (isValid, proposedEndTime);\\r\\n        }\\r\\n        if ((proposedBid.offerPrice < auction.startingPrice) || (activeBid.offerPrice >= proposedBid.offerPrice)) {\\r\\n            return (isValid, proposedEndTime);\\r\\n        }\\r\\n        proposedEndTime = _getProposedEndTime(activeBid.listingEndTime);\\r\\n        isValid = true;\\r\\n    }\\r\\n\\r\\n    /// @notice internal function to get proposed end time\\r\\n    /// @param listingEndTime end time of the actual listing\\r\\n    /// @return proposedEndTime proposed end time for the listing\\r\\n    function _getProposedEndTime(uint128 listingEndTime) private view returns (uint128 proposedEndTime) {\\r\\n        if (listingEndTime - block.timestamp <= 1 minutes) {\\r\\n            proposedEndTime = listingEndTime + timeOffset;\\r\\n        } else {\\r\\n            proposedEndTime = listingEndTime;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice internal implementation to validate only Auction type data\\r\\n    /// @notice all inputs same as validateListing\\r\\n    /// @param _listingData encoded listing data\\r\\n    /// @return isValid true if succeeds\\r\\n    /// @return lockAddr address of the lock\\r\\n    /// @return tokenId id of the token\\r\\n    /// @return paymentToken address of the payment token\\r\\n    function _validateAuctionCapability(\\r\\n        bytes memory _listingData\\r\\n    ) private view returns (bool isValid, address lockAddr, uint tokenId, address paymentToken) {\\r\\n        Auction memory auction = _extractAuctionInfo(_listingData);\\r\\n        _checkAddress(auction.seller);\\r\\n        _checkAddress(auction.lock);\\r\\n        require(auction.startingPrice != 0 && auction.buyNowPrice > auction.startingPrice, \\\"INV_PRICE\\\");\\r\\n        require(\\r\\n            auction.startTime + timeOffset <= auction.endTime &&\\r\\n                auction.endTime >= block.timestamp + timeOffset &&\\r\\n                auction.createdOn <= block.timestamp,\\r\\n            \\\"INV_TIME\\\"\\r\\n        );\\r\\n        if (swaprWallet.isNFTLocked(auction.lock, auction.nftId)) {\\r\\n            require(auction.activeDepositType == 0 || auction.activeDepositType == 3, \\\"ALRD_LISTD\\\");\\r\\n            isValid = true;\\r\\n        } else {\\r\\n            require(auction.depositType == 1, \\\"INV_DEP_TYPE\\\");\\r\\n            isValid = true;\\r\\n        }\\r\\n        lockAddr = auction.lock;\\r\\n        tokenId = auction.nftId;\\r\\n        paymentToken = auction.acceptedToken;\\r\\n    }\\r\\n\\r\\n    /// @notice internal implementation to validate only Order type data\\r\\n    /// @notice all inputs same as validateListing\\r\\n    /// @param _orderData encoded order data\\r\\n    /// @return isValid true if succeeds\\r\\n    /// @return lockAddr address of the lock\\r\\n    /// @return tokenId id of the token\\r\\n    /// @return paymentToken address of the payment token\\r\\n    function _validateOrderCapability(\\r\\n        bytes memory _orderData\\r\\n    ) private view returns (bool isValid, address lockAddr, uint tokenId, address paymentToken) {\\r\\n        Order memory order = _extractOrderInfo(_orderData);\\r\\n\\r\\n        require(\\r\\n            order.maxTokenSell > 0 &&\\r\\n                order.maxTokenSell <= EXP &&\\r\\n                order.maxBuyPerWallet > 0 &&\\r\\n                order.maxBuyPerWallet <= EXP &&\\r\\n                order.remainingPart <= EXP &&\\r\\n                order.fixedPrice != 0,\\r\\n            \\\"INV_DATA\\\"\\r\\n        );\\r\\n        _checkAddress(order.seller);\\r\\n        _checkAddress(order.lock);\\r\\n        require(order.createdOn <= block.timestamp, \\\"INV_TIME\\\");\\r\\n        if (swaprWallet.isNFTLocked(order.lock, order.nftId)) {\\r\\n            require(order.activeDepositType == 0 || order.activeDepositType == 3, \\\"ALR_LIST\\\");\\r\\n            isValid = true;\\r\\n        } else {\\r\\n            require(order.depositType == 2, \\\"INV_DEP_TYPE\\\");\\r\\n            isValid = true;\\r\\n        }\\r\\n        lockAddr = order.lock;\\r\\n        tokenId = order.nftId;\\r\\n        paymentToken = order.acceptedToken;\\r\\n    }\\r\\n\\r\\n    /// @notice part of validateBid which validates only if the bid is being placed for the first time\\r\\n    /// @param listingData encoded listing data\\r\\n    /// @param bid bid data\\r\\n    /// @return isValid true if succeeds\\r\\n    /// @return proposedEndTime proposed end time for the listing\\r\\n    function _validateAsFirstBid(\\r\\n        bytes memory listingData,\\r\\n        Bid memory bid\\r\\n    ) private view returns (bool isValid, uint128 proposedEndTime) {\\r\\n        (bytes memory listingInfo, ) = _decodeBytesToBytesBytes(listingData);\\r\\n        Auction memory auction = _extractAuctionInfo(listingData);\\r\\n        bytes memory _data = abi.encode(listingInfo, swaprWallet.getNFT(bid.lock, bid.nftId));\\r\\n        if (!_verify(auction.seller, _data) || auction.endTime < block.timestamp) {\\r\\n            return (isValid, proposedEndTime);\\r\\n        }\\r\\n        proposedEndTime = _getProposedEndTime(auction.endTime);\\r\\n        if (bid.offerPrice < auction.startingPrice) {\\r\\n            return (isValid, proposedEndTime);\\r\\n        }\\r\\n        isValid = true;\\r\\n    }\\r\\n\\r\\n    /// @notice part of validateBid which validates every time after the first bid is placed\\r\\n    /// @param message encoded message\\r\\n    /// @param activeBid active bid data\\r\\n    /// @param proposedBid proposed bid data\\r\\n    /// @return isValid true if succeeds\\r\\n    /// @return proposedEndTime proposed end time for the listing\\r\\n    function _validateAsLastBid(\\r\\n        bytes memory message,\\r\\n        Bid memory activeBid,\\r\\n        Bid memory proposedBid\\r\\n    ) private view returns (bool isValid, uint128 proposedEndTime) {\\r\\n        (, bytes memory listingData, bytes memory activeBidData, ) = abi.decode(message, (bool, bytes, bytes, bytes));\\r\\n        (bytes memory listingInfo, ) = _decodeBytesToBytesBytes(listingData);\\r\\n\\r\\n        Auction memory auction = _extractAuctionInfo(listingData);\\r\\n        bytes memory _data = abi.encode(listingInfo, swaprWallet.getNFT(activeBid.lock, activeBid.nftId));\\r\\n        _checkSignature(auction.seller, _data);\\r\\n        _checkSignature(activeBid.bidder, activeBidData);\\r\\n        (isValid, proposedEndTime) = _bidsCrossValidate(auction, activeBid, proposedBid);\\r\\n    }\\r\\n\\r\\n    /// @notice internal function to validate if an address is not zero address\\r\\n    /// @param addr address to validate\\r\\n    function _checkAddress(address addr) internal pure {\\r\\n        if (addr == address(0)) {\\r\\n            revert INV_ADDRS();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice internal function to validate if a signature is valid\\r\\n    /// @param signer address of the signer\\r\\n    /// @param _data encoded data\\r\\n    function _checkSignature(address signer, bytes memory _data) internal view {\\r\\n        if (!_verify(signer, _data)) {\\r\\n            revert INV_SIG();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"INV_ADDRS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INV_SIG\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSplit\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenSell\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"maxBuyPerWallet\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"remainingPart\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"createdOn\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"depositType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"activeDepositType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"toEOA\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"lock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acceptedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct ListingHelper.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"splitParts\",\"type\":\"uint256[]\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNANCE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeContract\",\"type\":\"address\"}],\"name\":\"attachNewFeeContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketplace\",\"type\":\"address\"}],\"name\":\"attachNewMarketplace\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"attachNewWallet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"buyNowAuction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyerPurchasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint128\",\"name\":\"split\",\"type\":\"uint128\"}],\"name\":\"buyNowOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"depositNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"listingData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"lastBid\",\"type\":\"bytes\"}],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"res\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"listingData\",\"type\":\"bytes\"}],\"name\":\"isListableAuction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"listingData\",\"type\":\"bytes\"}],\"name\":\"isListableOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingModTimeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"toEOA\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"acceptedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ListingHelper.PayNow\",\"name\":\"payOps\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"depositType\",\"type\":\"uint256\"}],\"name\":\"payNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"}],\"name\":\"proposeNewImplementation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"timeInSecs\",\"type\":\"uint16\"}],\"name\":\"setListingUpdateTime\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"theMarketplace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeOffset\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"toMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"listingType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"timeInSecs\",\"type\":\"uint16\"}],\"name\":\"updateTimeOffset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"validateBid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"listingEndTime\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lock\",\"type\":\"address\"}],\"internalType\":\"struct ListingHelper.Bid\",\"name\":\"validatedBid\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwaprGL", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}