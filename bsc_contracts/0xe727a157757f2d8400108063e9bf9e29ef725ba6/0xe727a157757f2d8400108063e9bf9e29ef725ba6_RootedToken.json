{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nlibrary Address {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this;\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"DevSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity 0.7.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract DevSplitter {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address public dev1;\\r\\n    address public dev2;\\r\\n\\r\\n    IERC20 token;\\r\\n\\r\\n    event onUpdateAddress(address indexed _caller, address indexed _newAddress, uint256 _timestamp);\\r\\n\\r\\n    constructor() {\\r\\n        dev1 = 0x11F1e768E459dC23a586f3A371f25c1D3aF2D1B1;\\r\\n        dev2 = 0x4C85973AA4D667497FEd1556eE3b3A2D27aE8224;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n\\r\\n    }\\r\\n\\r\\n    function distribute() public returns (bool _success) {\\r\\n        uint256 base = address(this).balance;\\r\\n\\r\\n        token.transfer(dev1, base.mul(8000).div(10000));\\r\\n        token.transfer(dev2, base.mul(2000).div(10000));\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function distributeTokens(address _token) public returns (bool _success) {\\r\\n        token = IERC20(_token);\\r\\n        uint256 tokens = token.balanceOf(address(this));\\r\\n\\r\\n        token.transfer(dev1, tokens.mul(8000).div(10000));\\r\\n        token.transfer(dev2, tokens.mul(2000).div(10000));\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateDev1Address(address _newAddress) public returns (bool _success) {\\r\\n        require(msg.sender == dev1, \\\"CANNOT_CHANGE_FROM_OTHER_WALLET\\\");\\r\\n\\r\\n        dev1 = _newAddress;\\r\\n\\r\\n        emit onUpdateAddress(dev1, _newAddress, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateDev2Address(address _newAddress) public returns (bool _success) {\\r\\n        require(msg.sender == dev2, \\\"CANNOT_CHANGE_FROM_OTHER_WALLET\\\");\\r\\n\\r\\n        dev2 = _newAddress;\\r\\n\\r\\n        emit onUpdateAddress(dev2, _newAddress, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n}\"},\"Distillery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.4;\\r\\n\\r\\n/*\\r\\n       ______                            __             \\r\\n      / ____/____ _ ____   ____ _ _____ / /_ ___   _____\\r\\n     / / __ / __ `// __ \\\\ / __ `// ___// __// _ \\\\ / ___/\\r\\n    / /_/ // /_/ // / / // /_/ /(__  )/ /_ /  __// /    \\r\\n    \\\\____/ \\\\__,_//_/ /_/ \\\\__, //____/ \\\\__/ \\\\___//_/     \\r\\n        ______ _        /____/                          \\r\\n       / ____/(_)____   ____ _ ____   _____ ___         \\r\\n      / /_   / // __ \\\\ / __ `// __ \\\\ / ___// _ \\\\        \\r\\n     / __/  / // / / // /_/ // / / // /__ /  __/        \\r\\n    /_/    /_//_/ /_/ \\\\__,_//_/ /_/ \\\\___/ \\\\___/         \\r\\n    ======================================================\\r\\n    | V1.0.0 | Gangster Finance Distillery | MIT License |\\r\\n    =====================================================\\r\\n    \\r\\n    This contract is for the \\\"Distillery\\\" component of Gangster Finance.\\r\\n    \\r\\n    [FEATURES]\\r\\n     - Withdraw tokens from the Reserve contract\\r\\n     - Add tokens to the \\u0027drip pool\\u0027 of the Vaults (v1 and v1.2)\\r\\n     - Swap tokens held within for tokens required\\r\\n     \\r\\n    This contract is also armed with functions to log every tx it is involved in.\\r\\n    \\r\\n=======================================================================================\\r\\n\\r\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \\r\\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \\r\\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \\r\\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \\r\\nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \\r\\nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\r\\n    \\r\\n=======================================================================================\\r\\n*/\\r\\n\\r\\n///////////////////////////////////////////////////////////////\\r\\n// LIBRARIES - THESE ARE USEFUL FOR EXTENDING COMMON METHODS //\\r\\n///////////////////////////////////////////////////////////////\\r\\n\\r\\nlibrary Address {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        if (a == 0) {return 0;}\\r\\n        c = a * b;\\r\\n        assert(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b \\u003c= a);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function safeSub(uint a, uint b) internal pure returns (uint) {\\r\\n        if (b \\u003e a) {return 0;} else {return a - b;}\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        c = a + b;\\r\\n        assert(c \\u003e= a);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {return a \\u003e= b ? a : b;}\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {return a \\u003c b ? a : b;}\\r\\n}\\r\\n\\r\\n////////////////////////////////////////////////////////////////////////////\\r\\n// INTERFACES - THESE ALLOW THE CONTRACT TO INTERACT WITH OTHER CONTRACTS //\\r\\n////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n// Wrapped token interface\\r\\ninterface IWBNB {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\\r\\n\\r\\n// Standard token interface\\r\\ninterface IBEP20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n// Swap Router interface\\r\\ninterface iRouter {\\r\\n    function WETH() external pure returns (address);\\r\\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n// Gangster / OG Vault interface\\r\\ninterface IVault {\\r\\n    function donate(uint _amount) external returns (uint256);\\r\\n}\\r\\n\\r\\n//////////////////////////////////////////////////////////////////////////////\\r\\n// CONTRACTS - THESE ARE THE ACTUAL \\u0027MEAT AND VEG\\u0027 OF WHAT IS GOING ON HERE //\\r\\n//////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\ncontract Ownable {\\r\\n    address public owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Distillery is Ownable {\\r\\n    \\r\\n    // Import the Libraries\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    // Import the Interfaces\\r\\n    \\r\\n    IWBNB  wbnb;\\r\\n    IBEP20 wbnbToken;\\r\\n    \\r\\n    IVault vault;\\r\\n    IBEP20 token;\\r\\n    \\r\\n    iRouter public uniswapV2Router;\\r\\n    \\r\\n    ///////////////////////////////\\r\\n    // MODIFIERS AND RESTRICTORS //\\r\\n    ///////////////////////////////\\r\\n\\r\\n    modifier onlyWhitelisted() {\\r\\n        require(whitelist[msg.sender], \\u0027not whitelisted\\u0027);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /////////////////////////////////\\r\\n    // CONFIGURABLES AND VARIABLES //\\r\\n    /////////////////////////////////\\r\\n    \\r\\n    address public router;\\r\\n    \\r\\n    address public wbnbAddress;\\r\\n    address public reserveAddress;\\r\\n    \\r\\n    uint256 public totalTxs;\\r\\n    \\r\\n    uint256 internal _txId;\\r\\n    \\r\\n    uint256 internal MAX_UINT = 2**256 - 1;\\r\\n    \\r\\n    // Whitelisted addresses, in a data map\\r\\n    mapping(address =\\u003e bool) public whitelist;\\r\\n    \\r\\n    /////////////////////\\r\\n    // CONTRACT EVENTS //\\r\\n    /////////////////////\\r\\n    \\r\\n    // Main Events\\r\\n    event onWithdrawTokens(address indexed _token, uint256 _amount, uint256 _timestamp);\\r\\n    event onTransferTokens(address indexed _recipient, address indexed _token, uint256 _amount, uint256 _timestamp);\\r\\n    \\r\\n    // Vault Events\\r\\n    event onDepositToDripPool(address indexed _vault, address indexed _token, uint256 _amount, uint256 _timestamp);\\r\\n    \\r\\n    // AMM Swap Events\\r\\n    event onSwapTokens(address indexed _swapToken, address indexed _forToken, uint256 amount, address _recipient, uint256 timestamp);\\r\\n    \\r\\n    event onSetRouter(address _oldRouter, address _newRouter, uint256 timestamp);\\r\\n    event onSetTokenRouter(address _oldTR, address _newTR, uint256 timestamp);\\r\\n    \\r\\n    // Whitelist Events\\r\\n    event WhitelistedAddressAdded(address addr);\\r\\n    event WhitelistedAddressRemoved(address addr);\\r\\n\\r\\n    //////////////////////////////\\r\\n    // CONSTRUCTOR AND FALLBACK //\\r\\n    //////////////////////////////\\r\\n    \\r\\n    constructor(address _wbnbAddress, address _routerAddress) Ownable() public {\\r\\n        \\r\\n        // Sanity Check: Addresses must not be zero\\r\\n        require(_wbnbAddress != address(0) \\u0026\\u0026 _routerAddress != address(0), \\\"Token and liquidity router must be set\\\");\\r\\n        \\r\\n        router = _routerAddress;\\r\\n        \\r\\n        // WBNB Address, WBNB as a contract, WBNB as a BEP20\\r\\n        wbnbAddress = _wbnbAddress;\\r\\n        wbnb = IWBNB(_wbnbAddress);\\r\\n        wbnbToken = IBEP20(_wbnbAddress);\\r\\n        \\r\\n        // Set Router interfaces and addresses...\\r\\n        uniswapV2Router = iRouter(_routerAddress);\\r\\n    }\\r\\n    \\r\\n    // FALLBACK FUNCTION: PAYABLE\\r\\n    receive () external payable {\\r\\n        \\r\\n        // If this contract receives BNB, turn it into WBNB and send it to the Reserve.\\r\\n        wbnb.deposit{value: msg.value};\\r\\n    }\\r\\n    \\r\\n    ////////////////////////////////////\\r\\n    // WHITELIST-RESTRICTED FUNCTIONS //\\r\\n    ////////////////////////////////////\\r\\n    \\r\\n    // Swap one token for another\\r\\n    function swapTokens(address _swapToken, address _forToken) onlyWhitelisted() public returns (bool _success) {\\r\\n\\r\\n        uint256 swapBalance = IBEP20(_swapToken).balanceOf(address(this));\\r\\n        \\r\\n        // Carry out the swap, if there\\u0027s actually some balance here\\r\\n        if (swapBalance \\u003e  0){\\r\\n            _swapTokens(_swapToken, _forToken, swapBalance);\\r\\n        }\\r\\n        \\r\\n        // Update stats\\r\\n        totalTxs += 1;\\r\\n        \\r\\n        emit onSwapTokens(_swapToken, _forToken, swapBalance, address(this), block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Add tokens from this contract\\u0027s balances to the drip pool of a v1 or v1.2 Gangster Finance vault\\r\\n    function addToVault(address _vault, address _token, uint256 _amount) onlyWhitelisted() public returns (bool _success) {\\r\\n        \\r\\n        // Sanity Check: No non-contracts, no zero address\\r\\n        require(Address.isContract(_token) \\u0026\\u0026 _token != address(0), \\\"ADDRESS_IS_NOT_A_CONTRACT\\\");\\r\\n\\r\\n        // \\u0027Donate\\u0027 is the function within the Vaults which adds tokens to the relevant drip pool balance\\r\\n        IBEP20(_token).approve(_vault, MAX_UINT);\\r\\n        IVault(_vault).donate(_amount);\\r\\n        \\r\\n        // Update stats\\r\\n        totalTxs += 1;\\r\\n        \\r\\n        // Tell the network, successful function!\\r\\n        emit onDepositToDripPool(_vault, _token, _amount, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    // Add tokens from this contract\\u0027s balances to another address (Contracts and EOAs allowed)\\r\\n    function transfer(address _recipient, address _token, uint256 _amount) onlyWhitelisted() public returns (bool _success) {\\r\\n        \\r\\n        // Sanity Check: No non-contracts, no zero address\\r\\n        require(Address.isContract(_token) \\u0026\\u0026 _token != address(0), \\\"ADDRESS_IS_NOT_A_CONTRACT\\\");\\r\\n        \\r\\n        // \\u0027Donate\\u0027 is the function within the Vaults which adds tokens to the relevant drip pool balance\\r\\n        IBEP20(_token).transfer(_recipient, _amount);\\r\\n        \\r\\n        // Update stats\\r\\n        totalTxs += 1;\\r\\n        \\r\\n        // Tell the network, successful function!\\r\\n        emit onDepositToDripPool(_recipient, _token, _amount, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    ////////////////////////////////////////////////\\r\\n    // FUNCTIONS RESTRICTED TO THE CONTRACT OWNER //\\r\\n    ////////////////////////////////////////////////\\r\\n\\r\\n    function setSwapRouter(address _newRouter) onlyOwner public returns (bool _success) {\\r\\n        \\r\\n        // Sanity Check: _swapRouter must be a contract.\\r\\n        require(Address.isContract(_newRouter) \\u0026\\u0026 _newRouter != address(0), \\\"MUST_BE_A_CONTRACT\\\");\\r\\n        \\r\\n        // Take note of the old addresses for the upcoming event emission...\\r\\n        address _oldRouter = address(uniswapV2Router);\\r\\n        \\r\\n        // Update the router addresses...\\r\\n        uniswapV2Router = iRouter(_newRouter);\\r\\n        \\r\\n        // Tell the network, successful function!\\r\\n        emit onSetRouter(_oldRouter, _newRouter, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    // Whitelist controls\\r\\n    \\r\\n    function addAddressToWhitelist(address addr) onlyOwner() public returns(bool success) {\\r\\n        if (!whitelist[addr]) {\\r\\n            whitelist[addr] = true;\\r\\n            emit WhitelistedAddressAdded(addr);\\r\\n            success = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addAddressesToWhitelist(address[] memory addrs) onlyOwner() public returns(bool success) {\\r\\n        for (uint256 i = 0; i \\u003c addrs.length; i++) {\\r\\n            if (addAddressToWhitelist(addrs[i])) {\\r\\n                success = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeAddressFromWhitelist(address addr) onlyOwner() public returns(bool success) {\\r\\n        if (whitelist[addr]) {\\r\\n            whitelist[addr] = false;\\r\\n            emit WhitelistedAddressRemoved(addr);\\r\\n            success = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeAddressesFromWhitelist(address[] memory addrs) onlyOwner() public returns(bool success) {\\r\\n        for (uint256 i = 0; i \\u003c addrs.length; i++) {\\r\\n            if (removeAddressFromWhitelist(addrs[i])) {\\r\\n                success = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    ////////////////////////\\r\\n    // INTERNAL FUNCTIONS //\\r\\n    ////////////////////////\\r\\n    \\r\\n    // Buyback (using WBNB as bridge)\\r\\n    function _swapTokens(address _swapToken, address _forToken, uint tokenAmount) internal returns (uint) {\\r\\n        address[] memory path;\\r\\n        \\r\\n        // Check if the token is WBNB\\r\\n        bool isWETH = _swapToken == uniswapV2Router.WETH();\\r\\n        \\r\\n        // If it isn\\u0027t, swap it for WBNB\\r\\n        if (!isWETH){\\r\\n            path = new address[](2);\\r\\n            path[0] = _swapToken;\\r\\n            path[1] = uniswapV2Router.WETH();\\r\\n            \\r\\n            // Approve the token to be swapped\\r\\n            IBEP20 swapToken = IBEP20(_swapToken);\\r\\n            require(swapToken.approve(address(uniswapV2Router), tokenAmount));\\r\\n            \\r\\n            // Check WBNB balance prior to the pending swap\\r\\n            uint initial = wbnbToken.balanceOf(address(this));\\r\\n            \\r\\n            // Carry out the swap, to WBNB\\r\\n            uniswapV2Router.swapExactTokensForTokens(tokenAmount, 0, path, address(this), block.timestamp.add(1 minutes));\\r\\n            \\r\\n            // Find the amount of WBNB received from the swap\\r\\n            tokenAmount = wbnbToken.balanceOf(address(this)).sub(initial);\\r\\n        }\\r\\n        \\r\\n        // Now let\\u0027s set the token to swap for\\r\\n        IBEP20 forToken = IBEP20(_forToken);\\r\\n        \\r\\n        //We always have WBNB sourced from the best liquidity pool for the core asset if necessary\\r\\n        path = new address[](2);\\r\\n        path[0] = uniswapV2Router.WETH();\\r\\n        path[1] = address(forToken);\\r\\n       \\r\\n        //Need to be able to approve the collateral token for transfer\\r\\n        require(wbnbToken.approve(address(uniswapV2Router), tokenAmount));\\r\\n\\r\\n        // Swap for the token actually required\\r\\n        uniswapV2Router.swapExactTokensForTokens(tokenAmount, 0, path, address(this), block.timestamp.add(1 minutes));\\r\\n\\r\\n        // Check finalised balance\\r\\n        uint _balance = forToken.balanceOf(address(this));\\r\\n        \\r\\n        // Return the resulting balance\\r\\n        return _balance;\\r\\n    }\\r\\n}\"},\"EliteFloorCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA floor calculator to use with ERC31337 AMM pairs\\r\\nEnsures 100% of accessible funds are backed at all times\\r\\n*/\\r\\n\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IPancakeRouter02.sol\\\";\\r\\nimport \\\"./IPancakeFactory.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./EnumerableSet.sol\\\";\\r\\n\\r\\ncontract EliteFloorCalculator is IFloorCalculator, TokensRecoverable {\\r\\n    using SafeMath for uint256;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    IERC20 immutable rootedToken;\\r\\n    address immutable rootedElitePair;\\r\\n    address immutable rootedBasePair;\\r\\n    IPancakeRouter02 immutable internal pancakeRouter;\\r\\n    IPancakeFactory immutable internal pancakeFactory;\\r\\n    EnumerableSet.AddressSet ignoredAddresses;\\r\\n\\r\\n    constructor(IERC20 _rootedToken, IERC20 _eliteToken, IERC20 _baseToken, IPancakeFactory _pancakeFactory, IPancakeRouter02 _pancakeRouter) {\\r\\n        rootedToken = _rootedToken;\\r\\n        pancakeFactory = _pancakeFactory;\\r\\n        pancakeRouter = _pancakeRouter;\\r\\n\\r\\n        rootedElitePair = _pancakeFactory.getPair(address(_eliteToken), address(_rootedToken));\\r\\n        rootedBasePair = _pancakeFactory.getPair(address(_baseToken), address(_rootedToken));\\r\\n    }    \\r\\n\\r\\n    function setIgnoreAddresses(address ignoredAddress, bool add) public ownerOnly() {\\r\\n        if (add) {\\r\\n            ignoredAddresses.add(ignoredAddress); \\r\\n        } else { \\r\\n            ignoredAddresses.remove(ignoredAddress); \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isIgnoredAddress(address ignoredAddress) public view returns (bool) {\\r\\n        return ignoredAddresses.contains(ignoredAddress);\\r\\n    }\\r\\n\\r\\n    function ignoredAddressCount() public view returns (uint256) {\\r\\n        return ignoredAddresses.length();\\r\\n    }\\r\\n\\r\\n    function ignoredAddressAt(uint256 index) public view returns (address) {\\r\\n        return ignoredAddresses.at(index);\\r\\n    }\\r\\n\\r\\n    function ignoredAddressesTotalBalance() public view returns (uint256) {\\r\\n        uint256 total = 0;\\r\\n        for (uint i = 0; i \\u003c ignoredAddresses.length(); i++) {\\r\\n            total = total.add(rootedToken.balanceOf(ignoredAddresses.at(i)));\\r\\n        }\\r\\n\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    function calculateSubFloor(IERC20 baseToken, IERC20 eliteToken) public override view returns (uint256) {\\r\\n        uint256 totalRootedInPairs = rootedToken.balanceOf(rootedElitePair).add(rootedToken.balanceOf(rootedBasePair));\\r\\n        uint256 totalBaseAndEliteInPairs = eliteToken.balanceOf(rootedElitePair).add(baseToken.balanceOf(rootedBasePair));\\r\\n        uint256 rootedCirculatingSupply = rootedToken.totalSupply().sub(totalRootedInPairs).sub(ignoredAddressesTotalBalance());\\r\\n        uint256 amountUntilFloor = pancakeRouter.getAmountOut(rootedCirculatingSupply, totalRootedInPairs, totalBaseAndEliteInPairs);\\r\\n        uint256 totalExcessInPools = totalBaseAndEliteInPairs.sub(amountUntilFloor);\\r\\n        uint256 previouslySwept = eliteToken.totalSupply().sub(baseToken.balanceOf(address(eliteToken)));\\r\\n        \\r\\n        if (previouslySwept \\u003e= totalExcessInPools) { return 0; }\\r\\n        return totalExcessInPools.sub(previouslySwept);\\r\\n    }\\r\\n}\"},\"EliteFloorCalculatorV1.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA floor calculator to use with ERC31337 AMM pairs\\r\\nEnsures 100% of accessible funds are backed at all times\\r\\n*/\\r\\n\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./PancakeLibrary.sol\\\";\\r\\nimport \\\"./IPancakeFactory.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./EnumerableSet.sol\\\";\\r\\n\\r\\ncontract EliteFloorCalculatorV1 is IFloorCalculator, TokensRecoverable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    IERC20 immutable rootedToken;\\r\\n    IPancakeFactory immutable pancakeFactory;\\r\\n    EnumerableSet.AddressSet ignoredAddresses;\\r\\n\\r\\n    constructor(IERC20 _rootedToken, IPancakeFactory _pancakeFactory)\\r\\n    {\\r\\n        rootedToken = _rootedToken;\\r\\n        pancakeFactory = _pancakeFactory;\\r\\n    }    \\r\\n\\r\\n    function setIgnoreAddresses(address ignoredAddress, bool add) public ownerOnly()\\r\\n    {\\r\\n        if (add) \\r\\n        { \\r\\n            ignoredAddresses.add(ignoredAddress); \\r\\n        } \\r\\n        else \\r\\n        { \\r\\n            ignoredAddresses.remove(ignoredAddress); \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isIgnoredAddress(address ignoredAddress) public view returns (bool)\\r\\n    {\\r\\n        return ignoredAddresses.contains(ignoredAddress);\\r\\n    }\\r\\n\\r\\n    function ignoredAddressCount() public view returns (uint256)\\r\\n    {\\r\\n        return ignoredAddresses.length();\\r\\n    }\\r\\n\\r\\n    function ignoredAddressAt(uint256 index) public view returns (address)\\r\\n    {\\r\\n        return ignoredAddresses.at(index);\\r\\n    }\\r\\n\\r\\n    function ignoredAddressesTotalBalance() public view returns (uint256)\\r\\n    {\\r\\n        uint256 total = 0;\\r\\n        for (uint i = 0; i \\u003c ignoredAddresses.length(); i++) \\r\\n        {\\r\\n            total = total.add(rootedToken.balanceOf(ignoredAddresses.at(i)));\\r\\n        }\\r\\n\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    function calculateExcessInPool(IERC20 token, address pair, uint256 liquidityShare, uint256 rootedTokenTotalSupply, uint256 rootedTokenPoolsLiquidity) internal view returns (uint256)\\r\\n    {\\r\\n        uint256 freeRootedToken = (rootedTokenTotalSupply.sub(rootedTokenPoolsLiquidity)).mul(liquidityShare).div(1e12);\\r\\n\\r\\n        uint256 sellAllProceeds = 0;\\r\\n        if (freeRootedToken \\u003e 0) \\r\\n        {\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = address(rootedToken);\\r\\n            path[1] = address(token);\\r\\n            uint256[] memory amountsOut = PancakeLibrary.getAmountsOut(address(pancakeFactory), freeRootedToken, path);\\r\\n            sellAllProceeds = amountsOut[1];\\r\\n        }\\r\\n\\r\\n        uint256 backingInPool = token.balanceOf(pair);\\r\\n        if (backingInPool \\u003c= sellAllProceeds) { return 0; }\\r\\n        uint256 excessInPool = backingInPool - sellAllProceeds;\\r\\n\\r\\n        return excessInPool;\\r\\n    }\\r\\n\\r\\n    function calculateExcessInPools(IERC20 baseToken, IERC20 eliteToken) public view returns (uint256)\\r\\n    {\\r\\n        address rootedElitePair = PancakeLibrary.pairFor(address(pancakeFactory), address(rootedToken), address(eliteToken));\\r\\n        address rootedBasePair = PancakeLibrary.pairFor(address(pancakeFactory), address(rootedToken), address(baseToken));   \\r\\n        \\r\\n        uint256 rootedTokenTotalSupply = rootedToken.totalSupply().sub(ignoredAddressesTotalBalance());\\r\\n        uint256 rootedTokenPoolsLiquidity = rootedToken.balanceOf(rootedElitePair).add(rootedToken.balanceOf(rootedBasePair));\\r\\n        uint256 baseTokenPoolsLiquidity = eliteToken.balanceOf(rootedElitePair).add(baseToken.balanceOf(rootedBasePair));\\r\\n\\r\\n        uint256 rootedLiquidityShareInElitePair = rootedToken.balanceOf(rootedElitePair).mul(1e12).div(rootedTokenPoolsLiquidity);\\r\\n        uint256 eliteLiquidityShareInElitePair = eliteToken.balanceOf(rootedElitePair).mul(1e12).div(baseTokenPoolsLiquidity);\\r\\n        uint256 avgLiquidityShareInElitePair = (rootedLiquidityShareInElitePair.add(eliteLiquidityShareInElitePair)).div(2);\\r\\n        uint256 one = 1e12;\\r\\n\\r\\n        uint256 excessInElitePool = calculateExcessInPool(eliteToken, rootedElitePair, avgLiquidityShareInElitePair, rootedTokenTotalSupply, rootedTokenPoolsLiquidity);\\r\\n        uint256 excessInBasePool = calculateExcessInPool(baseToken, rootedBasePair, (one).sub(avgLiquidityShareInElitePair), rootedTokenTotalSupply, rootedTokenPoolsLiquidity);\\r\\n        return excessInElitePool.add(excessInBasePool);\\r\\n    }\\r\\n\\r\\n    function calculateSubFloor(IERC20 baseToken, IERC20 eliteToken) public override view returns (uint256)\\r\\n    {        \\r\\n        uint256 excessInPools = calculateExcessInPools(baseToken, eliteToken);\\r\\n\\r\\n        uint256 requiredBacking = eliteToken.totalSupply().sub(excessInPools);\\r\\n        uint256 currentBacking = baseToken.balanceOf(address(eliteToken));\\r\\n        if (requiredBacking \\u003e= currentBacking) { return 0; }\\r\\n        return currentBacking - requiredBacking;\\r\\n    }\\r\\n}\"},\"EliteToken.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./ERC31337.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract EliteToken is ERC31337 {\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    mapping (address =\\u003e bool) public freeParticipantControllers;\\r\\n    mapping (address =\\u003e bool) public freeParticipants; \\r\\n    mapping (address =\\u003e bool) public burnRateControllers;\\r\\n    uint16 burnRate;\\r\\n\\r\\n    constructor (IERC20 _wrappedToken) ERC31337(_wrappedToken, \\\"eliteGFI2\\\", \\\"eGFI2\\\") {\\r\\n        \\r\\n    }\\r\\n\\r\\n    function setFreeParticipantController(address freeParticipantController, bool allow) public ownerOnly() {\\r\\n        freeParticipantControllers[freeParticipantController] = allow;\\r\\n    }\\r\\n\\r\\n    function setFreeParticipant(address participant, bool free) public {\\r\\n        require (msg.sender == owner || freeParticipantControllers[msg.sender], \\\"Not an owner or free participant controller\\\");\\r\\n        freeParticipants[participant] = free;\\r\\n    }\\r\\n\\r\\n    function setBurnRateController(address burnRateController, bool allow) public ownerOnly() {\\r\\n        burnRateControllers[burnRateController] = allow;\\r\\n    }\\r\\n\\r\\n    // 10000 = 100%\\r\\n    function setBurnRate(uint16 _burnRate) public {\\r\\n        require (msg.sender == owner || burnRateControllers[msg.sender], \\\"Not an owner or burn rate controller\\\");\\r\\n        require (_burnRate \\u003c= 10000, \\\"But rate must be less or equal to 100%\\\");\\r\\n       \\r\\n        burnRate = _burnRate;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\r\\n        require(sender != address(0), \\\"EliteToken: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"EliteToken: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n        uint256 remaining = amount;\\r\\n\\r\\n        if (!freeParticipants[sender] \\u0026\\u0026 !freeParticipants[recipient] \\u0026\\u0026 burnRate \\u003e 0) {\\r\\n            uint256 burn = amount * burnRate / 10000;\\r\\n            amount = remaining = remaining.sub(burn, \\\"Burn too much\\\");\\r\\n            _burn(sender, burn);\\r\\n        }\\r\\n        \\r\\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \\\"EliteToken: transfer amount exceeds balance\\\");\\r\\n        _balanceOf[recipient] = _balanceOf[recipient].add(remaining);\\r\\n        \\r\\n        emit Transfer(sender, recipient, remaining);\\r\\n    }\\r\\n}\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint256(_at(set._inner, index)));\\r\\n    }\\r\\n\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nSimplified thanks to higher solidity version\\r\\nBut same functionality\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\nabstract contract ERC20 is IERC20 \\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) internal _balanceOf;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public override allowance;\\r\\n\\r\\n    uint256 public override totalSupply;\\r\\n\\r\\n    string public override name;\\r\\n    string public override symbol;\\r\\n    uint8 public override decimals = 18;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (string memory _name, string memory _symbol) \\r\\n    {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address a) public virtual override view returns (uint256) { return _balanceOf[a]; }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        uint256 oldAllowance = allowance[sender][msg.sender];\\r\\n        if (oldAllowance != uint256(-1)) {\\r\\n            _approve(sender, msg.sender, oldAllowance.sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balanceOf[recipient] = _balanceOf[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        totalSupply = totalSupply.add(amount);\\r\\n        _balanceOf[account] = _balanceOf[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balanceOf[account] = _balanceOf[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        totalSupply = totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        allowance[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 _decimals) internal {\\r\\n        decimals = _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n}\"},\"ERC31337.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA wrapped token, where the underlying token can be swept\\r\\nand used for other purposes\\r\\nGoverned by an installable floor calculator contract\\r\\nSweepable by designated sweeper addresses\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\nimport \\\"./WrappedERC20.sol\\\";\\r\\nimport \\\"./IERC31337.sol\\\";\\r\\n\\r\\ncontract ERC31337 is WrappedERC20, IERC31337\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IFloorCalculator public override floorCalculator;\\r\\n    \\r\\n    mapping (address =\\u003e bool) public override sweepers;\\r\\n\\r\\n    constructor(IERC20 _wrappedToken, string memory _name, string memory _symbol)\\r\\n        WrappedERC20(_wrappedToken, _name, _symbol)\\r\\n    {\\r\\n    }\\r\\n\\r\\n    function setFloorCalculator(IFloorCalculator _floorCalculator) public override ownerOnly()\\r\\n    {\\r\\n        floorCalculator = _floorCalculator;\\r\\n    }\\r\\n\\r\\n    function setSweeper(address sweeper, bool allow) public override ownerOnly()\\r\\n    {\\r\\n        sweepers[sweeper] = allow;\\r\\n    }\\r\\n\\r\\n    function sweepFloor(address to) public override returns (uint256 amountSwept)\\r\\n    {\\r\\n        require (to != address(0),  \\\" transfer to the zero address\\\");\\r\\n        require (sweepers[msg.sender], \\\"Sweepers only\\\");\\r\\n        amountSwept = floorCalculator.calculateSubFloor(wrappedToken, this);\\r\\n        if (amountSwept \\u003e 0) {\\r\\n            wrappedToken.safeTransfer(to, amountSwept);\\r\\n        }\\r\\n    }\\r\\n}\"},\"FeeSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IGatedERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\n\\r\\ncontract FeeSplitter is TokensRecoverable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n    \\r\\n    uint256 devRateMin = 1000;  \\r\\n    uint256 rootRateMin = 1000;\\r\\n\\r\\n    address public devAddress;\\r\\n    address public sidekickDev;\\r\\n\\r\\n    address public immutable deployerAddress;\\r\\n    address public gangsterDistillery;\\r\\n\\r\\n    mapping (IGatedERC20 =\\u003e address[]) public feeCollectors;\\r\\n    mapping (IGatedERC20 =\\u003e uint256[]) public feeRates;\\r\\n    mapping (IGatedERC20 =\\u003e uint256) public burnRates;\\r\\n\\r\\n    constructor(address _devAddress, address _sidekickDev)\\r\\n    {\\r\\n        deployerAddress = msg.sender;\\r\\n\\r\\n        // Development Address\\r\\n        devAddress = _devAddress;\\r\\n        sidekickDev = _sidekickDev;\\r\\n    }\\r\\n\\r\\n    function setDevAddress(address _devAddress) public\\r\\n    {\\r\\n        require (msg.sender == deployerAddress || msg.sender == devAddress, \\\"Not a deployer or dev address\\\");\\r\\n        devAddress = _devAddress;\\r\\n    }\\r\\n\\r\\n    function setSideKickDevAddress(address _devAddress) public\\r\\n    {\\r\\n        require (msg.sender == deployerAddress || msg.sender == sidekickDev, \\\"Not a deployer or SideKick dev address\\\");\\r\\n        sidekickDev = _devAddress;\\r\\n    }\\r\\n\\r\\n    function setDistillery(address _gangsterDistillery) public\\r\\n    {\\r\\n        require (msg.sender == deployerAddress || msg.sender == devAddress, \\\"Not a deployer or dev address\\\");\\r\\n        gangsterDistillery = _gangsterDistillery;\\r\\n    }\\r\\n\\r\\n    function setFees(IGatedERC20 token, uint256 burnRate, address[] memory collectors, uint256[] memory rates) public ownerOnly() {\\r\\n        //require (collectors.length == rates.length \\u0026\\u0026 collectors.length \\u003e 1, \\\"Fee Collectors and Rates must be the same size and contain at least 2 elements\\\");\\r\\n        require (collectors[0] == devAddress, \\\"First address must be dev address\\\");\\r\\n        require (collectors[1] == sidekickDev, \\\"Second address must be dev sidekickDev\\\");\\r\\n        //require (rates[0] \\u003e= devRateMin \\u0026\\u0026 rates[1] \\u003e= rootRateMin, \\\"First rate must be greater or equal to devRateMin and second rate must be greater or equal to rootRateMin\\\");\\r\\n        \\r\\n        uint256 totalRate = burnRate;\\r\\n        for (uint256 i = 0; i \\u003c rates.length; i++)\\r\\n        {\\r\\n            totalRate = totalRate + rates[i];\\r\\n        }\\r\\n\\r\\n        require (totalRate == 10000, \\\"Total fee rate must be 100%\\\");\\r\\n        \\r\\n        if (token.balanceOf(address(this)) \\u003e 0) {\\r\\n            payFees(token);\\r\\n        }\\r\\n\\r\\n        feeCollectors[token] = collectors;\\r\\n        feeRates[token] = rates;\\r\\n        burnRates[token] = burnRate;\\r\\n    }\\r\\n\\r\\n    function payFees(IGatedERC20 token) public\\r\\n    {\\r\\n        uint256 balance = token.balanceOf(address(this));\\r\\n        require (balance \\u003e 0, \\\"Nothing to pay\\\");\\r\\n\\r\\n        if (burnRates[token] \\u003e 0)\\r\\n        {\\r\\n            uint256 burnAmount = burnRates[token] * balance / 10000;\\r\\n            token.transfer(gangsterDistillery, burnAmount);\\r\\n        }\\r\\n\\r\\n        address[] memory collectors = feeCollectors[token];\\r\\n        uint256[] memory rates = feeRates[token];\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c collectors.length; i++)\\r\\n        {\\r\\n            address collector = collectors[i];\\r\\n            uint256 rate = rates[i];\\r\\n\\r\\n            if (rate \\u003e 0)\\r\\n            {\\r\\n                uint256 feeAmount = rate * balance / 10000;\\r\\n                token.transfer(collector, feeAmount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal override view returns (bool) \\r\\n    { \\r\\n        address[] memory collectors = feeCollectors[IGatedERC20(address(token))];\\r\\n        return address(token) != address(this) \\u0026\\u0026 collectors.length == 0; \\r\\n    }\\r\\n}\"},\"GatedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA standard ERC20 with an extra hook: An installable transfer\\r\\ngate allowing for token tax and burn on transfer\\r\\n*/\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./ITransferGate.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./IGatedERC20.sol\\\";\\r\\n\\r\\nabstract contract GatedERC20 is ERC20, TokensRecoverable, IGatedERC20\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    ITransferGate public override transferGate;\\r\\n    address [] public tokenHolder;\\r\\n    uint256 public numberOfTokenHolders = 0;\\r\\n    mapping(address =\\u003e bool) public exist;\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol)\\r\\n    {\\r\\n    }\\r\\n\\r\\n    function setTransferGate(ITransferGate _transferGate) public override ownerOnly()\\r\\n    {\\r\\n        transferGate = _transferGate;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override \\r\\n    {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n        if(!exist[recipient]){\\r\\n            tokenHolder.push(recipient);\\r\\n            numberOfTokenHolders++;\\r\\n            exist[recipient] = true;\\r\\n        }\\r\\n        ITransferGate _transferGate = transferGate;\\r\\n        uint256 remaining = amount;\\r\\n        if (address(_transferGate) != address(0)) \\r\\n        {\\r\\n            address splitter = _transferGate.feeSplitter();\\r\\n            uint256 fees = _transferGate.handleTransfer(msg.sender, sender, recipient, amount);\\r\\n            if (fees \\u003e 0)\\r\\n            {\\r\\n               _balanceOf[splitter] = _balanceOf[splitter].add(fees);\\r\\n                emit Transfer(sender, splitter, fees);\\r\\n                remaining = remaining.sub(fees);\\r\\n            }           \\r\\n        }\\r\\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balanceOf[recipient] = _balanceOf[recipient].add(remaining);\\r\\n        emit Transfer(sender, recipient, remaining);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public override\\r\\n    {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IERC20 \\r\\n{\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address _account) external view returns (uint256);\\r\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\r\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\r\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\r\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"},\"IERC31337.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IWrappedERC20.sol\\\";\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\n\\r\\ninterface IERC31337 is IWrappedERC20\\r\\n{\\r\\n    function floorCalculator() external view returns (IFloorCalculator);\\r\\n    function sweepers(address _sweeper) external view returns (bool);\\r\\n    \\r\\n    function setFloorCalculator(IFloorCalculator _floorCalculator) external;\\r\\n    function setSweeper(address _sweeper, bool _allow) external;\\r\\n    function sweepFloor(address _to) external returns (uint256 amountSwept);\\r\\n}\"},\"IFloorCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IFloorCalculator\\r\\n{\\r\\n    function calculateSubFloor(IERC20 baseToken, IERC20 eliteToken) external view returns (uint256);\\r\\n}\"},\"IGatedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ITransferGate.sol\\\";\\r\\n\\r\\ninterface IGatedERC20 is IERC20\\r\\n{\\r\\n    function transferGate() external view returns (ITransferGate);\\r\\n\\r\\n    function setTransferGate(ITransferGate _transferGate) external;\\r\\n    function burn( uint256 amount) external;\\r\\n}\"},\"ILiquidityController.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface ILiquidityController\\r\\n{\\r\\n    function balancePriceBase(uint256 amount) external;\\r\\n    function balancePriceElite(uint256 amount) external;\\r\\n    function removeBuyAndTax(uint256 amount, address token, uint16 tax, uint256 time) external;\\r\\n    function buyAndTax(address token, uint256 amountToSpend, uint16 tax, uint256 time) external;\\r\\n    function sweepFloor() external;\\r\\n    function zapEliteToBase(uint256 liquidity) external;\\r\\n    function zapBaseToElite(uint256 liquidity) external;\\r\\n    function wrapToElite(uint256 baseAmount) external;\\r\\n    function unwrapElite(uint256 eliteAmount) external;\\r\\n    function addLiquidity(address eliteOrBase, uint256 baseAmount) external;\\r\\n    function removeLiquidity(address eliteOrBase, uint256 tokens) external;    \\r\\n    function buyRooted(address token, uint256 amountToSpend) external;\\r\\n    function sellRooted(address token, uint256 amountToSpend) external;   \\r\\n}\"},\"ILiquidityLockedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IPancakePair.sol\\\";\\r\\n\\r\\ninterface ILiquidityLockedERC20\\r\\n{\\r\\n    function setLiquidityLock(IPancakePair _liquidityPair, bool _locked) external;\\r\\n}\"},\"IMarketDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IMarketDistribution\\r\\n{\\r\\n    function distributionComplete() external view returns (bool);\\r\\n    function vestingPeriodStartTime() external view returns (uint256); \\r\\n    function vestingPeriodEndTime() external view returns (uint256);\\r\\n    \\r\\n    function distribute() external;        \\r\\n    function claim(address account) external;\\r\\n    function claimReferralRewards(address account, uint256 referralShare) external;\\r\\n}\"},\"IMarketGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IMarketGeneration\\r\\n{\\r\\n    function contribution(address) external view returns (uint256);\\r\\n    function referralPoints(address) external view returns (uint256);    \\r\\n    function totalContribution() external view returns (uint256);\\r\\n    function totalReferralPoints() external view returns (uint256);\\r\\n}\"},\"IOwned.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IOwned\\r\\n{\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function transferOwnership(address newOwner) external;\\r\\n    function claimOwnership() external;\\r\\n}\"},\"IPancakeCallee.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\ninterface IPancakeCallee {\\r\\n    function pancakeCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\r\\n}\"},\"IPancakeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\ninterface IPancakeERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\"},\"IPancakeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"IPancakePair.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"},\"IPancakeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"},\"IPancakeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\u0027./IPancakeRouter01.sol\\u0027;\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"},\"ITokensRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface ITokensRecoverable\\r\\n{\\r\\n    function recoverTokens(IERC20 token) external;\\r\\n}\"},\"ITransferGate.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface ITransferGate\\r\\n{\\r\\n    function feeSplitter() external view returns (address);\\r\\n    function handleTransfer(address msgSender, address from, address to, uint256 amount) external returns (uint256);\\r\\n}\"},\"IWBNB.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IWBNB\\r\\n{    \\r\\n    function deposit() external payable;\\r\\n}\"},\"IWrappedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IWrappedERC20Events.sol\\\";\\r\\n\\r\\ninterface IWrappedERC20 is IERC20, IWrappedERC20Events\\r\\n{\\r\\n    function wrappedToken() external view returns (IERC20);\\r\\n    function depositTokens(uint256 _amount) external;\\r\\n    function withdrawTokens(uint256 _amount) external;\\r\\n}\"},\"IWrappedERC20Events.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IWrappedERC20Events\\r\\n{\\r\\n    event Deposit(address indexed from, uint256 amount);\\r\\n    event Withdrawal(address indexed to, uint256 amount);\\r\\n}\\r\\n\"},\"LiquidityController.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./IERC31337.sol\\\";\\r\\nimport \\\"./IPancakeRouter02.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./RootedTransferGate.sol\\\";\\r\\nimport \\\"./IPancakeFactory.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./ILiquidityController.sol\\\";\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\n\\r\\ncontract LiquidityController is TokensRecoverable, ILiquidityController\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IPancakeRouter02 immutable pancakeRouter;\\r\\n    IPancakeFactory immutable pancakeFactory;\\r\\n    IERC20 immutable rooted;\\r\\n    IERC20 immutable base;\\r\\n    IERC31337 immutable elite;\\r\\n    IERC20 immutable rootedEliteLP;\\r\\n    IERC20 immutable rootedBaseLP;\\r\\n    IFloorCalculator public calculator;\\r\\n    RootedTransferGate public gate;\\r\\n    mapping(address =\\u003e bool) public liquidityControllers;\\r\\n\\r\\n    constructor(IPancakeRouter02 _pancakeRouter, IERC20 _base, IERC20 _rooted, IERC31337 _elite, IFloorCalculator _calculator, RootedTransferGate _gate) \\r\\n    {\\r\\n        pancakeRouter = _pancakeRouter;\\r\\n        base = _base;\\r\\n        elite = _elite;\\r\\n        rooted = _rooted;\\r\\n        calculator = _calculator;\\r\\n        gate = _gate;\\r\\n\\r\\n        IPancakeFactory _pancakeFactory = IPancakeFactory(_pancakeRouter.factory());\\r\\n        pancakeFactory = _pancakeFactory;        \\r\\n        \\r\\n        _base.approve(address(_elite), uint256(-1));\\r\\n        _base.approve(address(_pancakeRouter), uint256(-1));\\r\\n        _rooted.approve(address(_pancakeRouter), uint256(-1));\\r\\n        IERC20 _rootedBaseLP = IERC20(_pancakeFactory.getPair(address(_base), address(_rooted)));\\r\\n        _rootedBaseLP.approve(address(_pancakeRouter), uint256(-1));\\r\\n        rootedBaseLP = _rootedBaseLP;\\r\\n        _elite.approve(address(_pancakeRouter), uint256(-1));\\r\\n        IERC20 _rootedEliteLP = IERC20(_pancakeFactory.getPair(address(_elite), address(_rooted)));\\r\\n        _rootedEliteLP.approve(address(_pancakeRouter), uint256(-1));\\r\\n        rootedEliteLP = _rootedEliteLP;\\r\\n    }\\r\\n\\r\\n    modifier liquidityControllerOnly()\\r\\n    {\\r\\n        require(liquidityControllers[msg.sender], \\\"Not a Liquidity Controller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Owner function to enable other contracts or addresses to use the Liquidity Controller\\r\\n    function setLiquidityController(address controlAddress, bool controller) public ownerOnly()\\r\\n    {\\r\\n        liquidityControllers[controlAddress] = controller;\\r\\n    }\\r\\n\\r\\n    function setCalculatorAndGate(IFloorCalculator _calculator, RootedTransferGate _gate) public ownerOnly()\\r\\n    {\\r\\n        calculator = _calculator;\\r\\n        gate = _gate;\\r\\n    }\\r\\n\\r\\n    // Removes liquidity, buys from either pool, sets a temporary dump tax\\r\\n    function removeBuyAndTax(uint256 amount, address token, uint16 tax, uint256 time) public override liquidityControllerOnly()\\r\\n    {\\r\\n        gate.setUnrestricted(true);\\r\\n        amount = removeLiq(token, amount);\\r\\n        buyRootedToken(token, amount);\\r\\n        gate.setDumpTax(tax, time);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    // Use Base tokens held by this contract to buy from the Base Pool and sell in the Elite Pool\\r\\n    function balancePriceBase(uint256 amount) public override liquidityControllerOnly()\\r\\n    {\\r\\n        amount = buyRootedToken(address(base), amount);\\r\\n        amount = sellRootedToken(address(elite), amount);\\r\\n        elite.withdrawTokens(amount);\\r\\n    }\\r\\n\\r\\n    // Use Base tokens held by this contract to buy from the Elite Pool and sell in the Base Pool\\r\\n    function balancePriceElite(uint256 amount) public override liquidityControllerOnly()\\r\\n    {        \\r\\n        elite.depositTokens(amount);\\r\\n        amount = buyRootedToken(address(elite), amount);\\r\\n        amount = sellRootedToken(address(base), amount);\\r\\n    }\\r\\n\\r\\n    // Uses value in the controller to buy\\r\\n    function buyAndTax(address token, uint256 amountToSpend, uint16 tax, uint256 time) public override liquidityControllerOnly()\\r\\n    {\\r\\n        buyRootedToken(token, amountToSpend);\\r\\n        gate.setDumpTax(tax, time);\\r\\n    }\\r\\n\\r\\n    // Sweeps the Base token under the floor to this address\\r\\n    function sweepFloor() public override liquidityControllerOnly()\\r\\n    {\\r\\n        elite.sweepFloor(address(this));\\r\\n    }\\r\\n\\r\\n    // Move liquidity from Elite pool ---\\u003e\\u003e Base pool\\r\\n    function zapEliteToBase(uint256 liquidity) public override liquidityControllerOnly() \\r\\n    {       \\r\\n        gate.setUnrestricted(true);\\r\\n        liquidity = removeLiq(address(elite), liquidity);\\r\\n        elite.withdrawTokens(liquidity);\\r\\n        addLiq(address(base), liquidity);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    // Move liquidity from Base pool ---\\u003e\\u003e Elite pool\\r\\n    function zapBaseToElite(uint256 liquidity) public override liquidityControllerOnly() \\r\\n    {\\r\\n        gate.setUnrestricted(true);\\r\\n        liquidity = removeLiq(address(base), liquidity);\\r\\n        elite.depositTokens(liquidity);\\r\\n        addLiq(address(elite), liquidity);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    function wrapToElite(uint256 baseAmount) public override liquidityControllerOnly() \\r\\n    {\\r\\n        elite.depositTokens(baseAmount);\\r\\n    }\\r\\n\\r\\n    function unwrapElite(uint256 eliteAmount) public override liquidityControllerOnly() \\r\\n    {\\r\\n        elite.withdrawTokens(eliteAmount);\\r\\n    }\\r\\n\\r\\n    function addLiquidity(address eliteOrBase, uint256 baseAmount) public override liquidityControllerOnly() \\r\\n    {\\r\\n        gate.setUnrestricted(true);\\r\\n        addLiq(eliteOrBase, baseAmount);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(address eliteOrBase, uint256 tokens) public override liquidityControllerOnly()\\r\\n    {\\r\\n        gate.setUnrestricted(true);\\r\\n        removeLiq(eliteOrBase, tokens);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    function buyRooted(address token, uint256 amountToSpend) public override liquidityControllerOnly()\\r\\n    {\\r\\n        buyRootedToken(token, amountToSpend);\\r\\n    }\\r\\n\\r\\n    function sellRooted(address token, uint256 amountToSpend) public override liquidityControllerOnly()\\r\\n    {\\r\\n        sellRootedToken(token, amountToSpend);\\r\\n    }\\r\\n\\r\\n    function addLiq(address eliteOrBase, uint256 baseAmount) internal \\r\\n    {\\r\\n        pancakeRouter.addLiquidity(address(eliteOrBase), address(rooted), baseAmount, rooted.balanceOf(address(this)), 0, 0, address(this), block.timestamp);\\r\\n    }\\r\\n\\r\\n    function removeLiq(address eliteOrBase, uint256 tokens) internal returns (uint256)\\r\\n    {\\r\\n        (tokens, ) = pancakeRouter.removeLiquidity(address(eliteOrBase), address(rooted), tokens, 0, 0, address(this), block.timestamp);\\r\\n        return tokens;\\r\\n    }\\r\\n\\r\\n    function buyRootedToken(address token, uint256 amountToSpend) internal returns (uint256)\\r\\n    {\\r\\n        uint256[] memory amounts = pancakeRouter.swapExactTokensForTokens(amountToSpend, 0, buyPath(token), address(this), block.timestamp);\\r\\n        amountToSpend = amounts[1];\\r\\n        return amountToSpend;\\r\\n    }\\r\\n\\r\\n    function sellRootedToken(address token, uint256 amountToSpend) internal returns (uint256)\\r\\n    {\\r\\n        uint256[] memory amounts = pancakeRouter.swapExactTokensForTokens(amountToSpend, 0, sellPath(token), address(this), block.timestamp);\\r\\n        amountToSpend = amounts[1];\\r\\n        return amountToSpend;\\r\\n    }\\r\\n\\r\\n    function buyPath(address token) internal view returns (address[] memory) \\r\\n    {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(token);\\r\\n        path[1] = address(rooted);\\r\\n        return path;\\r\\n    }\\r\\n\\r\\n    function sellPath(address token) internal view returns (address[] memory) \\r\\n    {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(rooted);\\r\\n        path[1] = address(token);\\r\\n        return path;\\r\\n    }\\r\\n}\"},\"LiquidityLockedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./IPancakePair.sol\\\";\\r\\nimport \\\"./GatedERC20.sol\\\";\\r\\nimport \\\"./ILiquidityLockedERC20.sol\\\";\\r\\n\\r\\nabstract contract LiquidityLockedERC20 is GatedERC20, ILiquidityLockedERC20\\r\\n{\\r\\n    mapping (IPancakePair =\\u003e bool) public liquidityPairLocked;\\r\\n    mapping (address =\\u003e bool) public liquidityController;\\r\\n\\r\\n    struct CallRecord\\r\\n    {\\r\\n        address origin;\\r\\n        uint32 blockNumber;\\r\\n        bool transferFrom;\\r\\n    }\\r\\n\\r\\n    CallRecord balanceAllowed;\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol)\\r\\n        GatedERC20(_name, _symbol)\\r\\n    {\\r\\n    }\\r\\n\\r\\n    function setLiquidityLock(IPancakePair _liquidityPair, bool _locked) public override\\r\\n    {\\r\\n        require (liquidityController[msg.sender], \\\"Liquidity controller only\\\");\\r\\n        require (_liquidityPair.token0() == address(this) || _liquidityPair.token1() == address(this), \\\"Unrelated pair\\\");\\r\\n        liquidityPairLocked[_liquidityPair] = _locked;\\r\\n    }\\r\\n\\r\\n    function setLiquidityController(address _liquidityController, bool _canControl) public ownerOnly()\\r\\n    {\\r\\n        liquidityController[_liquidityController] = _canControl;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public override view returns (uint256) \\r\\n    {\\r\\n        IPancakePair pair = IPancakePair(address(msg.sender));\\r\\n        if (liquidityPairLocked[pair]) {\\r\\n            CallRecord memory last = balanceAllowed;\\r\\n            require (last.origin == tx.origin \\u0026\\u0026 last.blockNumber == block.number, \\\"Liquidity is locked\\\");\\r\\n            if (last.transferFrom) {\\r\\n                (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\\r\\n                IERC20 token0 = IERC20(pair.token0());\\r\\n                if (address(token0) == address(this)) {\\r\\n                    require (IERC20(pair.token1()).balanceOf(address(pair)) \\u003c reserve1, \\\"Liquidity is locked\\\");\\r\\n                }\\r\\n                else {\\r\\n                    require (token0.balanceOf(address(pair)) \\u003c reserve0, \\\"Liquidity is locked\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return super.balanceOf(account);\\r\\n    }\\r\\n\\r\\n    function allowBalance(bool _transferFrom) private\\r\\n    {\\r\\n        CallRecord memory last = balanceAllowed;\\r\\n        CallRecord memory allow = CallRecord({ \\r\\n            origin: tx.origin,\\r\\n            blockNumber: uint32(block.number),\\r\\n            transferFrom: _transferFrom\\r\\n        });\\r\\n        require (last.origin != allow.origin || last.blockNumber != allow.blockNumber || last.transferFrom != allow.transferFrom, \\\"Liquidity is locked (Please try again next block)\\\");\\r\\n        balanceAllowed = allow;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) \\r\\n    {        \\r\\n        if (liquidityPairLocked[IPancakePair(address(msg.sender))]) {\\r\\n            allowBalance(false);\\r\\n        }\\r\\n        else {\\r\\n            balanceAllowed = CallRecord({ origin: address(0), blockNumber: 0, transferFrom: false });\\r\\n        }\\r\\n        return super.transfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) \\r\\n    {\\r\\n        if (liquidityPairLocked[IPancakePair(recipient)]) {\\r\\n            allowBalance(true);\\r\\n        }\\r\\n        else {\\r\\n            balanceAllowed = CallRecord({ origin: address(0), blockNumber: 0, transferFrom: false });\\r\\n        }\\r\\n        return super.transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n}\"},\"MarketDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IMarketDistribution.sol\\\";\\r\\nimport \\\"./IMarketGeneration.sol\\\";\\r\\nimport \\\"./RootedToken.sol\\\";\\r\\nimport \\\"./RootedTransferGate.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC31337.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IPancakeRouter02.sol\\\";\\r\\nimport \\\"./IPancakeFactory.sol\\\";\\r\\nimport \\\"./IPancakePair.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\n\\r\\ncontract MarketDistribution is TokensRecoverable, IMarketDistribution\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    bool public override distributionComplete;\\r\\n\\r\\n    address public gangsterDistillery;\\r\\n    IMarketGeneration public marketGeneration;\\r\\n    IPancakeRouter02 pancakeRouter;\\r\\n    IPancakeFactory pancakeFactory;\\r\\n    RootedToken public rootedToken;\\r\\n    IERC31337 public eliteToken;\\r\\n    IERC20 public baseToken;\\r\\n\\r\\n    address public oneshotController;\\r\\n    address public liquidityController;\\r\\n\\r\\n    IPancakePair public rootedEliteLP;\\r\\n    IPancakePair public rootedBaseLP;\\r\\n\\r\\n    uint256 public constant rootedTokenSupply = 1e26; // 100 mil\\r\\n    uint256 public totalBaseTokenCollected;\\r\\n    uint256 public totalBoughtForContributors;\\r\\n\\r\\n    mapping (address =\\u003e uint256) public claimTime;\\r\\n    mapping (address =\\u003e uint256) public totalClaim;\\r\\n    mapping (address =\\u003e uint256) public remainingClaim;\\r\\n    \\r\\n    uint256 public totalBoughtForReferrals;\\r\\n    uint256 public recoveryDate = block.timestamp + 2592000; // 1 Month\\r\\n    \\r\\n    uint16 public devCutPercent;\\r\\n    uint16 public preBuyForReferralsPercent;\\r\\n    uint16 public preBuyForContributorsPercent;\\r\\n    uint16 public preBuyForMarketStabilizationPercent;\\r\\n\\r\\n    uint256 public override vestingPeriodStartTime;\\r\\n    uint256 public override vestingPeriodEndTime; \\r\\n    \\r\\n    uint256 public vestingDuration;\\r\\n    uint256 public rootedBottom;\\r\\n\\r\\n    constructor(address _oneshotController) {\\r\\n        oneshotController = _oneshotController;\\r\\n    }\\r\\n\\r\\n    function init(\\r\\n        RootedToken _rootedToken, \\r\\n        IERC31337 _eliteToken, \\r\\n        address _gangsterDistillery,\\r\\n        address _liquidityController,\\r\\n        IPancakeRouter02 _pancakeRouter, \\r\\n        IMarketGeneration _marketGeneration,\\r\\n        uint256 _vestingDuration, \\r\\n        uint16 _devCutPercent, \\r\\n        uint16 _preBuyForReferralsPercent, \\r\\n        uint16 _preBuyForContributorsPercent, \\r\\n        uint16 _preBuyForMarketStabilizationPercent) public ownerOnly()\\r\\n    {        \\r\\n        rootedToken = _rootedToken;\\r\\n        eliteToken = _eliteToken;\\r\\n        gangsterDistillery = _gangsterDistillery;\\r\\n        baseToken = _eliteToken.wrappedToken();\\r\\n        liquidityController = _liquidityController;\\r\\n        pancakeRouter = _pancakeRouter;\\r\\n        pancakeFactory = IPancakeFactory(_pancakeRouter.factory());\\r\\n        marketGeneration = _marketGeneration;\\r\\n        vestingDuration = _vestingDuration;\\r\\n        devCutPercent = _devCutPercent;\\r\\n        preBuyForReferralsPercent = _preBuyForReferralsPercent;\\r\\n        preBuyForContributorsPercent = _preBuyForContributorsPercent;\\r\\n        preBuyForMarketStabilizationPercent = _preBuyForMarketStabilizationPercent;\\r\\n    }\\r\\n\\r\\n    function setupEliteRooted() public\\r\\n    {\\r\\n        rootedEliteLP = IPancakePair(pancakeFactory.getPair(address(eliteToken), address(rootedToken)));\\r\\n        if (address(rootedEliteLP) == address(0)) \\r\\n        {\\r\\n            rootedEliteLP = IPancakePair(pancakeFactory.createPair(address(eliteToken), address(rootedToken)));\\r\\n            require (address(rootedEliteLP) != address(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setupBaseRooted() public\\r\\n    {\\r\\n        rootedBaseLP = IPancakePair(pancakeFactory.getPair(address(baseToken), address(rootedToken)));\\r\\n        if (address(rootedBaseLP) == address(0)) \\r\\n        {\\r\\n            rootedBaseLP = IPancakePair(pancakeFactory.createPair(address(baseToken), address(rootedToken)));\\r\\n            require (address(rootedBaseLP) != address(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function completeSetup() public ownerOnly()\\r\\n    {   \\r\\n        require (address(rootedEliteLP) != address(0), \\\"Rooted Elite pool is not created\\\");\\r\\n        require (address(rootedBaseLP) != address(0), \\\"Rooted Base pool is not created\\\");   \\r\\n\\r\\n        eliteToken.approve(address(pancakeRouter), uint256(-1));\\r\\n        rootedToken.approve(address(pancakeRouter), uint256(-1));\\r\\n        baseToken.safeApprove(address(pancakeRouter), uint256(-1));\\r\\n        baseToken.safeApprove(address(eliteToken), uint256(-1));\\r\\n        rootedBaseLP.approve(address(pancakeRouter), uint256(-1));\\r\\n        rootedEliteLP.approve(address(pancakeRouter), uint256(-1));\\r\\n    }\\r\\n\\r\\n    // baseToken = WBNB\\r\\n    function distribute() public override {\\r\\n        require (msg.sender == address(marketGeneration), \\\"Unauthorized\\\");\\r\\n        require (!distributionComplete, \\\"Distribution complete\\\");\\r\\n   \\r\\n        vestingPeriodStartTime = block.timestamp;\\r\\n        vestingPeriodEndTime = block.timestamp + vestingDuration;\\r\\n        distributionComplete = true;\\r\\n        totalBaseTokenCollected = baseToken.balanceOf(address(marketGeneration));\\r\\n        baseToken.safeTransferFrom(msg.sender, address(this), totalBaseTokenCollected);  \\r\\n\\r\\n        RootedTransferGate gate = RootedTransferGate(address(rootedToken.transferGate()));\\r\\n\\r\\n        gate.setUnrestricted(true);\\r\\n        rootedToken.mint(rootedTokenSupply);\\r\\n\\r\\n        rootedToken.transfer(oneshotController, rootedTokenSupply.mul(15).div(100));\\r\\n\\r\\n        createRootedEliteLiquidity();\\r\\n\\r\\n        eliteToken.sweepFloor(address(this));        \\r\\n        eliteToken.depositTokens(baseToken.balanceOf(address(this)));\\r\\n                \\r\\n        buyTheBottom();\\r\\n        preBuyForReferrals();\\r\\n        preBuyForContributors();\\r\\n        sellTheTop();\\r\\n\\r\\n        // WBNB\\r\\n        uint256 totalBase = totalBaseTokenCollected * devCutPercent / 10000;\\r\\n\\r\\n        baseToken.transfer(oneshotController, totalBase);\\r\\n        baseToken.transfer(liquidityController, baseToken.balanceOf(address(this)));\\r\\n\\r\\n        createRootedBaseLiquidity();\\r\\n\\r\\n        gate.setUnrestricted(false);\\r\\n    }   \\r\\n   \\r\\n    \\r\\n    function createRootedEliteLiquidity() private {\\r\\n        eliteToken.depositTokens(baseToken.balanceOf(address(this)));\\r\\n        pancakeRouter.addLiquidity(address(eliteToken), address(rootedToken), eliteToken.balanceOf(address(this)), rootedToken.balanceOf(address(this)), 0, 0, address(this), block.timestamp);\\r\\n    }\\r\\n\\r\\n    function buyTheBottom() private {\\r\\n        uint256 amount = totalBaseTokenCollected * preBuyForMarketStabilizationPercent / 10000;  \\r\\n        uint256[] memory amounts = pancakeRouter.swapExactTokensForTokens(amount, 0, eliteRootedPath(), address(this), block.timestamp);        \\r\\n        rootedBottom = amounts[1];\\r\\n    }\\r\\n\\r\\n    function sellTheTop() private {\\r\\n        uint256[] memory amounts = pancakeRouter.swapExactTokensForTokens(rootedBottom, 0, rootedElitePath(), address(this), block.timestamp);\\r\\n        uint256 eliteAmount = amounts[1];\\r\\n        eliteToken.withdrawTokens(eliteAmount);\\r\\n    }   \\r\\n    \\r\\n    function preBuyForReferrals() private {\\r\\n        uint256 amount = totalBaseTokenCollected * preBuyForReferralsPercent / 10000;\\r\\n        uint256[] memory amounts = pancakeRouter.swapExactTokensForTokens(amount, 0, eliteRootedPath(), address(this), block.timestamp);\\r\\n        totalBoughtForReferrals = amounts[1];\\r\\n    }\\r\\n\\r\\n    function preBuyForContributors() private {\\r\\n        uint256 preBuyAmount = totalBaseTokenCollected * preBuyForContributorsPercent / 10000;\\r\\n        uint256 eliteBalance = eliteToken.balanceOf(address(this));\\r\\n        uint256 amount = preBuyAmount \\u003e eliteBalance ? eliteBalance : preBuyAmount;\\r\\n        uint256[] memory amounts = pancakeRouter.swapExactTokensForTokens(amount, 0, eliteRootedPath(), address(this), block.timestamp);\\r\\n        totalBoughtForContributors = amounts[1];\\r\\n    }\\r\\n\\r\\n    function createRootedBaseLiquidity() private {\\r\\n        uint256 elitePerLpToken = eliteToken.balanceOf(address(rootedEliteLP)).mul(1e18).div(rootedEliteLP.totalSupply());\\r\\n        uint256 lpAmountToRemove = baseToken.balanceOf(address(eliteToken)).mul(1e18).div(elitePerLpToken);\\r\\n        \\r\\n        (uint256 eliteAmount, uint256 rootedAmount) = pancakeRouter.removeLiquidity(address(eliteToken), address(rootedToken), lpAmountToRemove, 0, 0, address(this), block.timestamp);\\r\\n        \\r\\n        uint256 baseInElite = baseToken.balanceOf(address(eliteToken));\\r\\n        uint256 baseAmount = eliteAmount \\u003e baseInElite ? baseInElite : eliteAmount;       \\r\\n        \\r\\n        eliteToken.withdrawTokens(baseAmount);\\r\\n        pancakeRouter.addLiquidity(address(baseToken), address(rootedToken), baseAmount, rootedAmount, 0, 0, liquidityController, block.timestamp);\\r\\n        rootedEliteLP.transfer(liquidityController, rootedEliteLP.balanceOf(address(this)));\\r\\n        eliteToken.transfer(liquidityController, eliteToken.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function eliteRootedPath() private view returns (address[] memory) {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(eliteToken);\\r\\n        path[1] = address(rootedToken);\\r\\n        return path;\\r\\n    }\\r\\n\\r\\n    function rootedElitePath() private view returns (address[] memory) {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(rootedToken);\\r\\n        path[1] = address(eliteToken);\\r\\n        return path;\\r\\n    }\\r\\n    \\r\\n    function getTotalClaim(address account) public view returns (uint256) {\\r\\n        uint256 contribution = marketGeneration.contribution(account);\\r\\n        return contribution == 0 ? 0 : contribution.mul(totalBoughtForContributors).div(marketGeneration.totalContribution());\\r\\n    }\\r\\n\\r\\n    function getReferralClaim(address account) public view returns (uint256) {\\r\\n        uint256 referralShare = marketGeneration.referralPoints(account);\\r\\n        return referralShare == 0 ? 0 : referralShare.mul(totalBoughtForReferrals).div(marketGeneration.totalReferralPoints());\\r\\n    }\\r\\n\\r\\n    function claim(address account) public override {\\r\\n        require (distributionComplete, \\\"Distribution is not completed\\\");\\r\\n        require (msg.sender == address(marketGeneration), \\\"Unauthorized\\\");\\r\\n\\r\\n        if (totalClaim[account] == 0){\\r\\n            totalClaim[account] = remainingClaim[account] = getTotalClaim(account);\\r\\n        }\\r\\n\\r\\n        uint256 share = totalClaim[account];\\r\\n        uint256 endTime = vestingPeriodEndTime \\u003e block.timestamp ? block.timestamp : vestingPeriodEndTime;\\r\\n\\r\\n        require (claimTime[account] \\u003c endTime, \\\"Already claimed\\\");\\r\\n\\r\\n        uint256 claimStartTime = claimTime[account] == 0 ? vestingPeriodStartTime : claimTime[account];\\r\\n        share = (endTime.sub(claimStartTime)).mul(share).div(vestingDuration);\\r\\n        claimTime[account] = block.timestamp;\\r\\n        remainingClaim[account] -= share;\\r\\n        rootedToken.transfer(account, share);\\r\\n    }\\r\\n\\r\\n    function claimReferralRewards(address account, uint256 referralShare) public override {\\r\\n        require (distributionComplete, \\\"Distribution is not completed\\\");\\r\\n        require (msg.sender == address(marketGeneration), \\\"Unauthorized\\\");\\r\\n\\r\\n        uint256 share = referralShare.mul(totalBoughtForReferrals).div(marketGeneration.totalReferralPoints());\\r\\n        rootedToken.transfer(account, share);\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal override view returns (bool) {\\r\\n        return block.timestamp \\u003e recoveryDate || token != rootedToken;\\r\\n    }\\r\\n}\"},\"MarketGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IMarketDistribution.sol\\\";\\r\\nimport \\\"./IMarketGeneration.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IWBNB.sol\\\";\\r\\n\\r\\ncontract MarketGeneration is TokensRecoverable, IMarketGeneration {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) public override contribution;\\r\\n    mapping (address =\\u003e uint256) public override referralPoints;\\r\\n\\r\\n    uint256 public override totalReferralPoints;\\r\\n    uint256 public override totalContribution;\\r\\n\\r\\n    uint256 public startTime;\\r\\n    uint256 public finishTime;\\r\\n\\r\\n    address public immutable devAddress;\\r\\n\\r\\n    bool public isActive;\\r\\n\\r\\n    IERC20 public baseToken;\\r\\n    IMarketDistribution public marketDistribution;\\r\\n    uint256 public refundsAllowedUntil;\\r\\n\\r\\n    event onContribute(address indexed _caller, uint256 _value, uint256 _timestamp);\\r\\n\\r\\n    constructor(address _devAddress) {\\r\\n        devAddress = _devAddress;\\r\\n    }\\r\\n\\r\\n    modifier active() {\\r\\n        require (isActive, \\\"Distribution not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function init(IERC20 _baseToken) public ownerOnly() {\\r\\n        require (!isActive \\u0026\\u0026 block.timestamp \\u003e= refundsAllowedUntil, \\\"Already activated\\\");\\r\\n        baseToken = _baseToken;\\r\\n    }\\r\\n\\r\\n    function activate(IMarketDistribution _marketDistribution) public ownerOnly() {\\r\\n        require (!isActive \\u0026\\u0026 block.timestamp \\u003e= refundsAllowedUntil, \\\"Already activated\\\");        \\r\\n        require (address(_marketDistribution) != address(0));\\r\\n        marketDistribution = _marketDistribution;\\r\\n        isActive = true;\\r\\n\\r\\n        startTime = (block.timestamp * 1000);\\r\\n        finishTime = ((block.timestamp + 7 days) * 1000);\\r\\n    }\\r\\n\\r\\n    function setMarketDistribution(IMarketDistribution _marketDistribution) public ownerOnly() active() {\\r\\n        require (address(_marketDistribution) != address(0), \\\"Invalid market distribution\\\");\\r\\n        if (_marketDistribution == marketDistribution) { return; }\\r\\n        marketDistribution = _marketDistribution;\\r\\n\\r\\n        // Give everyone 1 day to claim refunds if they don\\u0027t approve of the new distributor\\r\\n        refundsAllowedUntil = block.timestamp + 86400;\\r\\n    }\\r\\n\\r\\n    function complete() public ownerOnly() active() {\\r\\n        require (block.timestamp \\u003e= refundsAllowedUntil, \\\"Refund period is still active\\\");\\r\\n\\r\\n        isActive = false;\\r\\n        if (address(this).balance == 0) { return; }\\r\\n        \\r\\n        IWBNB(address(baseToken)).deposit{ value: address(this).balance }();\\r\\n        baseToken.safeApprove(address(marketDistribution), uint256(-1));\\r\\n\\r\\n        marketDistribution.distribute();\\r\\n    }\\r\\n\\r\\n    function allowRefunds() public ownerOnly() active() {\\r\\n        isActive = false;\\r\\n        refundsAllowedUntil = uint256(-1);\\r\\n    }\\r\\n\\r\\n    function refund(uint256 amount) private {\\r\\n        (bool success,) = msg.sender.call{ value: amount }(\\\"\\\");\\r\\n        require (success, \\\"Refund transfer failed\\\");  \\r\\n          \\r\\n        totalContribution -= amount;\\r\\n        contribution[msg.sender] = 0;\\r\\n\\r\\n        uint256 refPoints = referralPoints[msg.sender];\\r\\n\\r\\n        if (refPoints \\u003e 0) {\\r\\n            totalReferralPoints -= refPoints;\\r\\n            referralPoints[msg.sender] = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claim() public {\\r\\n        uint256 amount = contribution[msg.sender];\\r\\n        require (amount \\u003e 0, \\\"Nothing to claim\\\");\\r\\n        \\r\\n        if (refundsAllowedUntil \\u003e block.timestamp) {\\r\\n            refund(amount);\\r\\n        } else {\\r\\n            marketDistribution.claim(msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimReferralRewards() public {\\r\\n        require (referralPoints[msg.sender] \\u003e 0, \\\"No rewards to claim\\\");\\r\\n        \\r\\n        uint256 refShare = referralPoints[msg.sender];\\r\\n        referralPoints[msg.sender] = 0;\\r\\n        marketDistribution.claimReferralRewards(msg.sender, refShare);\\r\\n    }\\r\\n\\r\\n    function contribute(address referral) public payable active() {\\r\\n        if (referral == address(0) || referral == msg.sender) {\\r\\n            referralPoints[devAddress] += msg.value;\\r\\n            totalReferralPoints += msg.value;\\r\\n        } else {\\r\\n            referralPoints[msg.sender] += msg.value;\\r\\n            referralPoints[referral] += msg.value;\\r\\n            totalReferralPoints +=(msg.value + msg.value);\\r\\n        }\\r\\n\\r\\n        contribution[msg.sender] += msg.value;\\r\\n        totalContribution += msg.value;\\r\\n\\r\\n        emit onContribute(msg.sender, msg.value, block.timestamp);\\r\\n    }\\r\\n\\r\\n    receive() external payable active() {\\r\\n        contribute(address(0));\\r\\n    }\\r\\n}\"},\"Math.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity \\u003e=0.5.16;\\r\\n\\r\\n// a library for performing various math operations\\r\\n\\r\\nlibrary Math {\\r\\n    function min(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = x \\u003c y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint y) internal pure returns (uint z) {\\r\\n        if (y \\u003e 3) {\\r\\n            z = y;\\r\\n            uint x = y / 2 + 1;\\r\\n            while (x \\u003c z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\"},\"Migrations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity \\u003e=0.4.22 \\u003c0.8.0;\\r\\n\\r\\ncontract Migrations {\\r\\n  address public owner = msg.sender;\\r\\n  uint public last_completed_migration;\\r\\n\\r\\n  modifier restricted() {\\r\\n    require(\\r\\n      msg.sender == owner,\\r\\n      \\\"This function is restricted to the contract\\u0027s owner\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function setCompleted(uint completed) public restricted {\\r\\n    last_completed_migration = completed;\\r\\n  }\\r\\n}\\r\\n\"},\"OneShotSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity 0.7.4;\\r\\n\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\n\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\n\\r\\ncontract OneShotSplitter is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IERC20 public baseToken;\\r\\n\\r\\n    address devAddress1; // The Don\\r\\n    address devAddress2; // KingCozz\\r\\n    address teamAddress; // Team Splitter Contract\\r\\n    address promoAddress; // Promo/Marketing Splitter Contract\\r\\n\\r\\n    modifier onlyAuthorised() {\\r\\n        require(_authorised[msg.sender] || msg.sender == owner(), \\\"NOT_AUTHORISED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    mapping (address =\\u003e bool) _authorised;\\r\\n\\r\\n    constructor (address _devAddress1, address _devAddress2, address _teamAddress, address _promoAddress) Ownable() {\\r\\n        devAddress1 = _devAddress1;\\r\\n        devAddress2 = _devAddress2;\\r\\n        teamAddress = _teamAddress;\\r\\n        promoAddress = _promoAddress;\\r\\n\\r\\n        _authorised[msg.sender] = true;\\r\\n        _authorised[devAddress1] = true;\\r\\n        _authorised[devAddress2] = true;\\r\\n        _authorised[teamAddress] = true;\\r\\n        _authorised[promoAddress] = true;\\r\\n    }\\r\\n\\r\\n    function transferTokens(address _recipient, address _token, uint256 _amount) onlyAuthorised() public returns (bool _success) {\\r\\n        baseToken = IERC20(_token);\\r\\n\\r\\n        require(baseToken.balanceOf(address(this)) \\u003e 0, \\\"NO_BALANCE\\\");\\r\\n\\r\\n        baseToken.transfer(_recipient, _amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // If tokens need to be broken per-proportion\\r\\n    function splitPayment(address _token) onlyAuthorised() public returns (bool _success) {\\r\\n        baseToken = IERC20(_token);\\r\\n\\r\\n        uint256 totalBase = baseToken.balanceOf(address(this));\\r\\n        require(totalBase \\u003e 0, \\\"NOTHING_TO_DISTRIBUTE\\\");\\r\\n\\r\\n        uint256 onePiece = (totalBase.div(15));\\r\\n\\r\\n        uint256 _forSideKick = (2 * onePiece);\\r\\n        uint256 _forTheDon   = (6 * onePiece);\\r\\n        uint256 _forTheOGs   = (2 * onePiece);\\r\\n        uint256 _promoFunds  = (5 * onePiece);\\r\\n\\r\\n        baseToken.transfer(devAddress1, _forTheDon);\\r\\n        baseToken.transfer(devAddress2, _forSideKick);\\r\\n        baseToken.transfer(teamAddress, _forTheOGs);\\r\\n        baseToken.transfer(promoAddress, _promoFunds);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\n import \\\"./Context.sol\\\";\\r\\n \\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    address private _previousOwner;\\r\\n    uint256 private _lockTime;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n\\r\\n    function getUnlockTime() public view returns (uint256) {\\r\\n        return _lockTime;\\r\\n    }\\r\\n\\r\\n    //Locks the contract for owner for the amount of time provided\\r\\n    function lock(uint256 time) public virtual onlyOwner {\\r\\n        _previousOwner = _owner;\\r\\n        _owner = address(0);\\r\\n        _lockTime = block.timestamp + time;\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n    }\\r\\n    \\r\\n    //Unlocks the contract for owner when _lockTime is exceeds\\r\\n    function unlock() public virtual {\\r\\n        require(_previousOwner == msg.sender, \\\"You don\\u0027t have permission to unlock\\\");\\r\\n        require(block.timestamp \\u003e _lockTime , \\\"Contract is locked until 7 days\\\");\\r\\n        emit OwnershipTransferred(_owner, _previousOwner);\\r\\n        _owner = _previousOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"Owned.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nProvides ownerOnly() modifier\\r\\nAllows for ownership transfer but requires the new\\r\\nowner to claim (accept) ownership\\r\\nSafer because no accidental transfers or renouncing\\r\\n*/\\r\\n\\r\\nimport \\\"./IOwned.sol\\\";\\r\\n\\r\\nabstract contract Owned is IOwned\\r\\n{\\r\\n    address public override owner = msg.sender;\\r\\n    address internal pendingOwner;\\r\\n\\r\\n    modifier ownerOnly()\\r\\n    {\\r\\n        require (msg.sender == owner, \\\"Owner only\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public override ownerOnly()\\r\\n    {\\r\\n        pendingOwner = newOwner;\\r\\n    }\\r\\n\\r\\n    function claimOwnership() public override\\r\\n    {\\r\\n        require (pendingOwner == msg.sender);\\r\\n        pendingOwner = address(0);\\r\\n        emit OwnershipTransferred(owner, msg.sender);\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n}\"},\"PancakeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\nimport \\u0027./IPancakePair.sol\\u0027;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nlibrary PancakeLibrary {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, \\u0027PancakeLibrary: IDENTICAL_ADDRESSES\\u0027);\\r\\n        (token0, token1) = tokenA \\u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), \\u0027PancakeLibrary: ZERO_ADDRESS\\u0027);\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex\\u0027ff\\u0027,\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex\\u0027c7bd2786b4f02372e9f672ef8756c1b2ff83055f0bd71e65f5cb766b952aed32\\u0027 // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // fetches and sorts the reserves for a pair\\r\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\r\\n        (address token0,) = sortTokens(tokenA, tokenB);\\r\\n        pairFor(factory, tokenA, tokenB);\\r\\n        (uint reserve0, uint reserve1,) = IPancakePair(pairFor(factory, tokenA, tokenB)).getReserves();\\r\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\r\\n        require(amountA \\u003e 0, \\u0027PancakeLibrary: INSUFFICIENT_AMOUNT\\u0027);\\r\\n        require(reserveA \\u003e 0 \\u0026\\u0026 reserveB \\u003e 0, \\u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        amountB = amountA.mul(reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn \\u003e 0, \\u0027PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\\u0027);\\r\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        uint amountInWithFee = amountIn.mul(998);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\r\\n        require(amountOut \\u003e 0, \\u0027PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\u0027);\\r\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\r\\n        uint denominator = reserveOut.sub(amountOut).mul(998);\\r\\n        amountIn = (numerator / denominator).add(1);\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\r\\n        require(path.length \\u003e= 2, \\u0027PancakeLibrary: INVALID_PATH\\u0027);\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint i; i \\u003c path.length - 1; i++) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\r\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountIn calculations on any number of pairs\\r\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\r\\n        require(path.length \\u003e= 2, \\u0027PancakeLibrary: INVALID_PATH\\u0027);\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[amounts.length - 1] = amountOut;\\r\\n        for (uint i = path.length - 1; i \\u003e 0; i--) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\r\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n}\"},\"RootedToken.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT: upToken\\r\\n\\r\\nAn upToken is a token that gains in value\\r\\nagainst whatever token it is paired with.\\r\\n\\r\\n- Raise any token using the Market Generation\\r\\nand Market Distribution contracts\\r\\n- An equal amount of upToken will be minted\\r\\n- combine with an ERC-31337 version of the \\r\\nraised token.\\r\\n- Send LP tokens to the Liquidity Controller\\r\\nfor efficent access to market features\\r\\n\\r\\n*/\\r\\n\\r\\nimport \\\"./LiquidityLockedERC20.sol\\\";\\r\\n\\r\\ncontract RootedToken is LiquidityLockedERC20(\\\"Gangster Finance Token\\\", \\\"GFI\\\") {\\r\\n    address public minter;\\r\\n\\r\\n    function setMinter(address _minter) public ownerOnly() {\\r\\n        minter = _minter;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 amount) public {\\r\\n        require(msg.sender == minter, \\\"Not a minter\\\");\\r\\n        require(this.totalSupply() == 0, \\\"Already minted\\\");\\r\\n        _mint(msg.sender, amount);\\r\\n    }\\r\\n}\"},\"RootedTransferGate.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA transfer gate (GatedERC20) for use with upTokens\\r\\n\\r\\nIt:\\r\\n    Allows customization of tax and burn rates\\r\\n    Allows transfer to/from approved pools\\r\\n    Disallows transfer to/from non-approved pools\\r\\n    Allows transfer to/from anywhere else\\r\\n    Allows for free transfers if permission granted\\r\\n    Allows for unrestricted transfers if permission granted\\r\\n    Allows for a pool to have an extra tax\\r\\n    Allows for a temporary declining tax\\r\\n*/\\r\\n\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IPancakeFactory.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IPancakePair.sol\\\";\\r\\nimport \\\"./ILiquidityLockedERC20.sol\\\";\\r\\nimport \\\"./IPancakeRouter02.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./ITransferGate.sol\\\";\\r\\n\\r\\ncontract RootedTransferGate is TokensRecoverable, ITransferGate\\r\\n{   \\r\\n    using Address for address;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IPancakeRouter02 immutable internal pancakeRouter;\\r\\n    IPancakeFactory immutable internal pancakeFactory;\\r\\n    ILiquidityLockedERC20 immutable internal rootedToken;\\r\\n\\r\\n    bool public unrestricted;\\r\\n    mapping (address =\\u003e bool) public unrestrictedControllers;\\r\\n    mapping (address =\\u003e bool) public feeControllers;\\r\\n    mapping (address =\\u003e bool) public freeParticipantControllers;\\r\\n    mapping (address =\\u003e bool) public freeParticipant;\\r\\n    mapping (address =\\u003e uint16) public poolsTaxRates;\\r\\n\\r\\n    address public override feeSplitter;\\r\\n    uint16 public feesRate;\\r\\n    IPancakePair public mainPool;\\r\\n   \\r\\n    uint16 public dumpTaxStartRate; \\r\\n    uint256 public dumpTaxDurationInSeconds;\\r\\n    uint256 public dumpTaxEndTimestamp;\\r\\n\\r\\n    constructor(ILiquidityLockedERC20 _rootedToken, IPancakeRouter02 _pancakeRouter)\\r\\n    {\\r\\n        rootedToken = _rootedToken;\\r\\n        pancakeRouter = _pancakeRouter;\\r\\n        pancakeFactory = IPancakeFactory(_pancakeRouter.factory());\\r\\n    }\\r\\n\\r\\n    function setUnrestrictedController(address unrestrictedController, bool allow) public ownerOnly()\\r\\n    {\\r\\n        unrestrictedControllers[unrestrictedController] = allow;\\r\\n    }\\r\\n\\r\\n    function setFreeParticipantController(address freeParticipantController, bool allow) public ownerOnly()\\r\\n    {\\r\\n        freeParticipantControllers[freeParticipantController] = allow;\\r\\n    }\\r\\n\\r\\n    function setFeeControllers(address feeController, bool allow) public ownerOnly()\\r\\n    {\\r\\n        feeControllers[feeController] = allow;\\r\\n    }\\r\\n\\r\\n    function setFeeSplitter(address _feeSplitter) public ownerOnly()\\r\\n    {\\r\\n        feeSplitter = _feeSplitter;\\r\\n    }\\r\\n\\r\\n    function setFreeParticipant(address participant, bool free) public\\r\\n    {\\r\\n        require (msg.sender == owner || freeParticipantControllers[msg.sender], \\\"Not an owner or free participant controller\\\");\\r\\n        freeParticipant[participant] = free;\\r\\n    }\\r\\n\\r\\n    function setUnrestricted(bool _unrestricted) public\\r\\n    {\\r\\n        require (unrestrictedControllers[msg.sender], \\\"Not an unrestricted controller\\\");\\r\\n        unrestricted = _unrestricted;\\r\\n        rootedToken.setLiquidityLock(mainPool, !_unrestricted);\\r\\n    }    \\r\\n\\r\\n    function setMainPool(IPancakePair _mainPool) public ownerOnly()\\r\\n    {\\r\\n        mainPool = _mainPool;\\r\\n    }\\r\\n\\r\\n     function setPoolTaxRate(address pool, uint16 taxRate) public ownerOnly()\\r\\n    {\\r\\n        require (taxRate \\u003c= 10000, \\\"Fee rate must be less than or equal to 100%\\\");\\r\\n        poolsTaxRates[pool] = taxRate;        \\r\\n    }\\r\\n\\r\\n    function setDumpTax(uint16 startTaxRate, uint256 durationInSeconds) public\\r\\n    {\\r\\n        require (feeControllers[msg.sender] || msg.sender == owner, \\\"Not an owner or fee controller\\\");\\r\\n        require (startTaxRate \\u003c= 10000, \\\"Dump tax rate must be less than or equal to 100%\\\");\\r\\n\\r\\n        dumpTaxStartRate = startTaxRate;\\r\\n        dumpTaxDurationInSeconds = durationInSeconds;\\r\\n        dumpTaxEndTimestamp = block.timestamp + durationInSeconds;\\r\\n    }\\r\\n\\r\\n    function getDumpTax() public view returns (uint256)\\r\\n    {\\r\\n        if (block.timestamp \\u003e= dumpTaxEndTimestamp) \\r\\n        {\\r\\n            return 0;\\r\\n        }       \\r\\n        \\r\\n        return dumpTaxStartRate*(dumpTaxEndTimestamp - block.timestamp)*1e18/dumpTaxDurationInSeconds/1e18;\\r\\n    }\\r\\n\\r\\n    function setFees(uint16 _feesRate) public\\r\\n    {\\r\\n        require (feeControllers[msg.sender] || msg.sender == owner, \\\"Not an owner or fee controller\\\");\\r\\n        require (_feesRate \\u003c= 10000, \\\"Fee rate must be less than or equal to 100%\\\");\\r\\n        feesRate = _feesRate;\\r\\n    }\\r\\n\\r\\n    function handleTransfer(address, address from, address to, uint256 amount) public virtual override returns (uint256)\\r\\n    {\\r\\n        if (unrestricted || freeParticipant[from] || freeParticipant[to]) \\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint16 poolTaxRate = poolsTaxRates[to];\\r\\n\\r\\n        if (poolTaxRate \\u003e feesRate) \\r\\n        {\\r\\n            uint256 totalTax = getDumpTax() + poolTaxRate;\\r\\n            return totalTax \\u003e= 10000 ? amount : amount * totalTax / 10000;\\r\\n        }\\r\\n\\r\\n        return amount * feesRate / 10000;\\r\\n    }   \\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nModified to remove some junk\\r\\nAlso modified to remove silly restrictions (traps!) within safeApprove\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {        \\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nlibrary SafeMath \\r\\n{\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\r\\n    {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) \\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n    \\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\r\\n    {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\r\\n    {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"StakingToken.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\n\\r\\ncontract StakingToken is ERC20(\\\"GFI Staking\\\", \\\"xGFI\\\"), TokensRecoverable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IERC20 public immutable rooted;\\r\\n\\r\\n    uint256 public totalStakers;\\r\\n    uint256 public allTimeStaked;\\r\\n    uint256 public allTimeUnstaked;\\r\\n\\r\\n    struct AddressRecords {\\r\\n        uint256 totalStaked;\\r\\n        uint256 totalUnstaked;\\r\\n    }\\r\\n\\r\\n    mapping(address =\\u003e AddressRecords) public addressRecord;\\r\\n\\r\\n    event onStakeTokens(address indexed _caller, uint256 _amount, uint256 _timestamp);\\r\\n    event onUnstakeTokens(address indexed _caller, uint256 _amount, uint256 _timestamp);\\r\\n\\r\\n    constructor(IERC20 _rooted) {\\r\\n        rooted = _rooted;\\r\\n    }\\r\\n\\r\\n    function statsOf(address _user) public view returns (uint256 _totalStaked, uint256 _totalUnstaked) {\\r\\n        return (\\r\\n            addressRecord[_user].totalStaked, \\r\\n            addressRecord[_user].totalUnstaked\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function baseToStaked(uint256 _amount) public view returns (uint256 _stakedAmount) {\\r\\n        uint256 totalRooted = rooted.balanceOf(address(this));\\r\\n        uint256 totalShares = this.totalSupply();\\r\\n\\r\\n        if (totalShares == 0 || totalRooted == 0) {\\r\\n            return _amount;\\r\\n        } else {\\r\\n            return _amount.mul(totalShares).div(totalRooted);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function stakedToBase(uint256 _amount) public view returns (uint256 _baseAmount) {\\r\\n        uint256 totalShares = this.totalSupply();\\r\\n        return _amount.mul(rooted.balanceOf(address(this))).div(totalShares);\\r\\n    }\\r\\n\\r\\n    // Stake rooted, get staking shares\\r\\n    function stake(uint256 amount) public {\\r\\n        uint256 totalRooted = rooted.balanceOf(address(this));\\r\\n        uint256 totalShares = this.totalSupply();\\r\\n\\r\\n        if (addressRecord[msg.sender].totalStaked == 0) {\\r\\n            totalStakers += 1;\\r\\n        }\\r\\n\\r\\n        if (totalShares == 0 || totalRooted == 0) {\\r\\n            _mint(msg.sender, amount);\\r\\n        } else {\\r\\n            uint256 mintAmount = amount.mul(totalShares).div(totalRooted);\\r\\n            _mint(msg.sender, mintAmount);\\r\\n        }\\r\\n\\r\\n        rooted.transferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        addressRecord[msg.sender].totalStaked += amount;\\r\\n        allTimeStaked += amount;\\r\\n\\r\\n        emit onStakeTokens(msg.sender, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    // Unstake shares, claim back rooted\\r\\n    function unstake(uint256 share) public {\\r\\n        uint256 totalShares = this.totalSupply();\\r\\n        uint256 unstakeAmount = share.mul(rooted.balanceOf(address(this))).div(totalShares);\\r\\n\\r\\n        _burn(msg.sender, share);\\r\\n        rooted.transfer(msg.sender, unstakeAmount);\\r\\n\\r\\n        addressRecord[msg.sender].totalUnstaked += unstakeAmount;\\r\\n        allTimeUnstaked += unstakeAmount;\\r\\n\\r\\n        emit onUnstakeTokens(msg.sender, share, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal override view returns (bool) {\\r\\n        return address(token) != address(this) \\u0026\\u0026 address(token) != address(rooted); \\r\\n    }\\r\\n}\"},\"TeamSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity 0.7.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract TeamSplitter {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address public admin;\\r\\n\\r\\n    struct TeamMember {\\r\\n        address payable wallet;\\r\\n        uint256 baseBalance;\\r\\n        uint256 tokenBalance;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 =\\u003e TeamMember) _teamMember;\\r\\n\\r\\n    IERC20 token;\\r\\n\\r\\n    event onUpdateAddress(address indexed _caller, address indexed _newAddress, uint256 _timestamp);\\r\\n    event onPushPayment(address indexed _recipient, uint256 _amount, uint256 _timestamp);\\r\\n    event onDistribute(address indexed _caller, uint256 _amount, uint256 _timestamp);\\r\\n\\r\\n    constructor() {\\r\\n        _teamMember[1].wallet = 0xf2C579082fE10d57331d0Cd66843C4D6777eA48a; // DonFunction (Main Dev)\\r\\n        _teamMember[2].wallet = 0x4E039e818AE3c48f84cfc3C1E6DC1963f4C98A5a; // MadFeli\\r\\n        _teamMember[3].wallet = 0xAAa5aB102f3d9e169667F9aa7e2B8C3441582904; // CryptoKnightsIbi\\r\\n        _teamMember[4].wallet = 0x673fB4196FE931c1b6cC1d6e1D958f0ddEf60d65; // BankRoller\\r\\n        _teamMember[5].wallet = 0xf64ba078E6732B6Ba29b398B4F04759b43cc9911; // Michal845\\r\\n        _teamMember[6].wallet = 0x03416C0440f80c86B374DD59E7FCeB2f58d3b43C; // Roller4Life\\r\\n        _teamMember[7].wallet = 0xa2539aedE99bC5c88b48AFDd59426e70BB219bCF; // CryptoBuddy\\r\\n        _teamMember[8].wallet = 0x495306d588cD8194beb1460328E20A36DD6d9d9d; // DabsGalore\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n\\r\\n    }\\r\\n\\r\\n    function baseBalanceOf(uint256 _id) public view returns (uint256 _balance) {\\r\\n        return (_teamMember[_id].baseBalance);\\r\\n    }\\r\\n\\r\\n    function tokenBalanceOf(uint256 _id) public view returns (uint256 _balance) {\\r\\n        return (_teamMember[_id].tokenBalance);\\r\\n    }\\r\\n\\r\\n    function distribute() public returns (bool _success) {\\r\\n        uint256 base = address(this).balance;\\r\\n\\r\\n        _teamMember[1].baseBalance += base.mul(1250).div(10000);\\r\\n        _teamMember[2].baseBalance += base.mul(1250).div(10000);\\r\\n        _teamMember[3].baseBalance += base.mul(1250).div(10000);\\r\\n        _teamMember[4].baseBalance += base.mul(1250).div(10000);\\r\\n        _teamMember[5].baseBalance += base.mul(1250).div(10000);\\r\\n        _teamMember[6].baseBalance += base.mul(1250).div(10000);\\r\\n        _teamMember[7].baseBalance += base.mul(1250).div(10000);\\r\\n        _teamMember[8].baseBalance += base.mul(1250).div(10000);\\r\\n\\r\\n        emit onPushPayment(msg.sender, base, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function distributeTokens(address _token) public returns (bool _success) {\\r\\n        token = IERC20(_token);\\r\\n        uint256 tokens = token.balanceOf(address(this));\\r\\n\\r\\n        _teamMember[1].tokenBalance += tokens.mul(1250).div(10000);\\r\\n        _teamMember[2].tokenBalance += tokens.mul(1250).div(10000);\\r\\n        _teamMember[3].tokenBalance += tokens.mul(1250).div(10000);\\r\\n        _teamMember[4].tokenBalance += tokens.mul(1250).div(10000);\\r\\n        _teamMember[5].tokenBalance += tokens.mul(1250).div(10000);\\r\\n        _teamMember[6].tokenBalance += tokens.mul(1250).div(10000);\\r\\n        _teamMember[7].tokenBalance += tokens.mul(1250).div(10000);\\r\\n        _teamMember[8].tokenBalance += tokens.mul(1250).div(10000);\\r\\n\\r\\n        emit onPushPayment(msg.sender, tokens, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateAddress(uint256 _teamMemberId, address payable _newAddress) public returns (bool _success) {\\r\\n        address _oldAddress = _teamMember[_teamMemberId].wallet;\\r\\n        require(msg.sender == _oldAddress, \\\"CANNOT_CHANGE_FROM_OTHER_WALLET\\\");\\r\\n\\r\\n        _teamMember[_teamMemberId].wallet = _newAddress;\\r\\n\\r\\n        emit onUpdateAddress(_oldAddress, _newAddress, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function pushTokenPayment(address _token, uint256 _teamMemberId) public returns (bool _success) {\\r\\n        token = IERC20(_token);\\r\\n\\r\\n        uint256 _entitlement = _teamMember[_teamMemberId].tokenBalance;\\r\\n        require(_entitlement \\u003e 0, \\\"NO_BALANCE\\\");\\r\\n\\r\\n        uint256 _payout = _entitlement;\\r\\n        _teamMember[_teamMemberId].tokenBalance = 0;\\r\\n\\r\\n        address _recipient = _teamMember[_teamMemberId].wallet;\\r\\n        token.transfer(_recipient, _payout);\\r\\n\\r\\n        emit onPushPayment(_recipient, _payout, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function pushPayment(uint256 _teamMemberId) public returns (bool _success) {\\r\\n        uint256 _entitlement = _teamMember[_teamMemberId].baseBalance;\\r\\n        require(_entitlement \\u003e 0, \\\"NO_BALANCE\\\");\\r\\n\\r\\n        uint256 _payout = _entitlement;\\r\\n        _teamMember[_teamMemberId].baseBalance = 0;\\r\\n\\r\\n        address payable _recipient = _teamMember[_teamMemberId].wallet;\\r\\n        _recipient.transfer(_payout);\\r\\n\\r\\n        emit onPushPayment(_recipient, _payout, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n}\"},\"TokensRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nAllows recovery of unexpected tokens (airdrops, etc)\\r\\nInheriters can customize logic by overriding canRecoverTokens\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./ITokensRecoverable.sol\\\";\\r\\n\\r\\nabstract contract TokensRecoverable is Owned, ITokensRecoverable\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    function recoverTokens(IERC20 token) public override ownerOnly() \\r\\n    {\\r\\n        require (canRecoverTokens(token));\\r\\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal virtual view returns (bool) \\r\\n    { \\r\\n        return address(token) != address(this); \\r\\n    }\\r\\n}\"},\"UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity \\u003e=0.5.16;\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\n\\r\\n// range: [0, 2**112 - 1]\\r\\n// resolution: 1 / 2**112\\r\\n\\r\\nlibrary UQ112x112 {\\r\\n    uint224 constant Q112 = 2**112;\\r\\n\\r\\n    // encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\r\\n        z = uint224(y) * Q112; // never overflows\\r\\n    }\\r\\n\\r\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\r\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\r\\n        z = x / uint224(y);\\r\\n    }\\r\\n}\"},\"WrappedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nWraps any ERC20\\r\\nSimilar to WETH except for ERC20 tokens instead of ETH\\r\\ndepositTokens/withdrawTokens are like deposit/withdraw in WETH\\r\\nInheriters can hook into depositTokens and withdrawTokens\\r\\nby overriding _beforeDepositTokens and _beforeWithdrawTokens\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./IWrappedERC20.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract WrappedERC20 is ERC20, IWrappedERC20, TokensRecoverable\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IERC20 public immutable override wrappedToken;\\r\\n\\r\\n    constructor (IERC20 _wrappedToken, string memory _name, string memory _symbol)\\r\\n        ERC20(_name, _symbol)\\r\\n    {        \\r\\n        if (_wrappedToken.decimals() != 18) {\\r\\n            _setupDecimals(_wrappedToken.decimals());\\r\\n        }\\r\\n        wrappedToken = _wrappedToken;\\r\\n    }\\r\\n\\r\\n    function depositTokens(uint256 _amount) public override\\r\\n    {\\r\\n        _beforeDepositTokens(_amount);\\r\\n        uint256 myBalance = wrappedToken.balanceOf(address(this));\\r\\n        wrappedToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 received = wrappedToken.balanceOf(address(this)).sub(myBalance);\\r\\n        _mint(msg.sender, received);\\r\\n        emit Deposit(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawTokens(uint256 _amount) public override\\r\\n    {\\r\\n        _beforeWithdrawTokens(_amount);\\r\\n        _burn(msg.sender, _amount);\\r\\n        uint256 myBalance = wrappedToken.balanceOf(address(this));\\r\\n        wrappedToken.safeTransfer(msg.sender, _amount);\\r\\n        require (wrappedToken.balanceOf(address(this)) == myBalance.sub(_amount), \\\"Transfer not exact\\\");\\r\\n        emit Withdrawal(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal virtual override view returns (bool) \\r\\n    {\\r\\n        return token != this \\u0026\\u0026 token != wrappedToken;\\r\\n    }\\r\\n\\r\\n    function _beforeDepositTokens(uint256 _amount) internal virtual view { }\\r\\n    function _beforeWithdrawTokens(uint256 _amount) internal virtual view { }\\r\\n}\"}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityPairLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityController\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_canControl\",\"type\":\"bool\"}],\"name\":\"setLiquidityController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"_liquidityPair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLiquidityLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITransferGate\",\"name\":\"_transferGate\",\"type\":\"address\"}],\"name\":\"setTransferGate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGate\",\"outputs\":[{\"internalType\":\"contract ITransferGate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RootedToken", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://012eae0db00d58448b9293894ec9a687043a79a8915cbd5830e3280173b82483"}