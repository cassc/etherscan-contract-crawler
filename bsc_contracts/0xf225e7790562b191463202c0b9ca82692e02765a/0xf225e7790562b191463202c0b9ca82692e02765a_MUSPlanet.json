{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n     */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n     */\r\n\tfunction name() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token.\r\n     */\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the decimals places of the token.\r\n     */\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\tmapping(address => uint256) private _balances;\r\n\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\t/**\r\n\t * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the name of the token.\r\n     */\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-totalSupply}.\r\n     */\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-balanceOf}.\r\n     */\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-allowance}.\r\n     */\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\r\n\t\tuint256 currentAllowance = _allowances[sender][_msgSender()];\r\n\t\trequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n\tunchecked {\r\n\t\t_approve(sender, _msgSender(), currentAllowance - amount);\r\n\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\tuint256 currentAllowance = _allowances[_msgSender()][spender];\r\n\t\trequire(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\tunchecked {\r\n\t\t_approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\t\tuint256 senderBalance = _balances[sender];\r\n\t\trequire(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\tunchecked {\r\n\t\t_balances[sender] = senderBalance - amount;\r\n\t}\r\n\t\t_balances[recipient] += amount;\r\n\r\n\t\temit Transfer(sender, recipient, amount);\r\n\r\n\t\t_afterTokenTransfer(sender, recipient, amount);\r\n\t}\r\n\r\n\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\r\n\t\t_totalSupply += amount;\r\n\t\t_balances[account] += amount;\r\n\t\temit Transfer(address(0), account, amount);\r\n\r\n\t\t_afterTokenTransfer(address(0), account, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\r\n\t\tuint256 accountBalance = _balances[account];\r\n\t\trequire(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n\tunchecked {\r\n\t\t_balances[account] = accountBalance - amount;\r\n\t}\r\n\t\t_totalSupply -= amount;\r\n\r\n\t\temit Transfer(account, address(0), amount);\r\n\r\n\t\t_afterTokenTransfer(account, address(0), amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n\r\n\t/**\r\n\t * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n\tfunction _afterTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n}\r\n/**\r\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\r\n */\r\nabstract contract ERC20Capped is ERC20 {\r\n\tuint256 private immutable _cap;\r\n\r\n\t/**\r\n\t * @dev Sets the value of the `cap`. This value is immutable, it can only be\r\n     * set once during construction.\r\n     */\r\n\tconstructor(uint256 cap_) {\r\n\t\trequire(cap_ > 0, \"ERC20Capped: cap is 0\");\r\n\t\t_cap = cap_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the cap on the token's total supply.\r\n     */\r\n\tfunction cap() public view virtual returns (uint256) {\r\n\t\treturn _cap;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {ERC20-_mint}.\r\n     */\r\n\tfunction _mint(address account, uint256 amount) internal virtual override {\r\n\t\trequire(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\r\n\t\tsuper._mint(account, amount);\r\n\t}\r\n}\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\tconstructor() {\r\n\t\t_setOwner(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n     */\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n     */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_setOwner(address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_setOwner(newOwner);\r\n\t}\r\n\r\n\tfunction _setOwner(address newOwner) private {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\ncontract Orchestrated is Ownable {\r\n\tevent GrantedAccess(address access, bytes4 sig);\r\n\tevent CancelAccess(address access, bytes4 sig);\r\n\r\n\t//admin address\r\n\taddress public adminAddress;\r\n\r\n\tmapping(address => mapping(bytes4 => bool)) public orchestration;\r\n\r\n\tconstructor() Ownable() {}\r\n\r\n\tmodifier onlyAdmin() {\r\n\t\trequire(msg.sender == adminAddress || msg.sender == owner());\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction setAdmin(address _newAdmin) external onlyAdmin() {\r\n\t\trequire(_newAdmin != address(0));\r\n\t\tadminAddress = _newAdmin;\r\n\t}\r\n\r\n\t/// @dev Restrict usage to authorized users;\r\n\tmodifier onlyOrchestrated(string memory err) {\r\n\t\trequire(orchestration[msg.sender][msg.sig], err);\r\n\t\t_;\r\n\t}\r\n\r\n\t/// @dev add orchestration\r\n\tfunction orchestrate(address user, bytes4 sig) public onlyOwner {\r\n\t\torchestration[user][sig] = true;\r\n\t\temit GrantedAccess(user, sig);\r\n\t}\r\n\r\n\t/// @dev remove orchestration\r\n\tfunction removeOrchestrate(address user, bytes4 sig) public onlyOwner {\r\n\t\torchestration[user][sig] = false;\r\n\t\temit CancelAccess(user, sig);\r\n\t}\r\n\r\n}\r\n\r\nlibrary Utils {\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n\t\tuint256 size;\r\n\t\tassembly { size := extcodesize(addr) }\r\n\t\treturn size > 0;\r\n\t}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\tfunction feeTo() external view returns (address);\r\n\tfunction feeToSetter() external view returns (address);\r\n\r\n\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\tfunction allPairs(uint) external view returns (address pair);\r\n\tfunction allPairsLength() external view returns (uint);\r\n\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\tfunction setFeeTo(address) external;\r\n\tfunction setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\tfunction name() external pure returns (string memory);\r\n\tfunction symbol() external pure returns (string memory);\r\n\tfunction decimals() external pure returns (uint8);\r\n\tfunction totalSupply() external view returns (uint);\r\n\tfunction balanceOf(address owner) external view returns (uint);\r\n\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\r\n\tfunction approve(address spender, uint value) external returns (bool);\r\n\tfunction transfer(address to, uint value) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\tfunction nonces(address owner) external view returns (uint);\r\n\r\n\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n\tevent Mint(address indexed sender, uint amount0, uint amount1);\r\n\tevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n\tevent Swap(\r\n\t\taddress indexed sender,\r\n\t\tuint amount0In,\r\n\t\tuint amount1In,\r\n\t\tuint amount0Out,\r\n\t\tuint amount1Out,\r\n\t\taddress indexed to\r\n\t);\r\n\tevent Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\tfunction factory() external view returns (address);\r\n\tfunction token0() external view returns (address);\r\n\tfunction token1() external view returns (address);\r\n\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\tfunction price0CumulativeLast() external view returns (uint);\r\n\tfunction price1CumulativeLast() external view returns (uint);\r\n\tfunction kLast() external view returns (uint);\r\n\r\n\tfunction mint(address to) external returns (uint liquidity);\r\n\tfunction burn(address to) external returns (uint amount0, uint amount1);\r\n\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\tfunction skim(address to) external;\r\n\tfunction sync() external;\r\n\r\n\tfunction initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n\tfunction factory() external pure returns (address);\r\n\tfunction WETH() external pure returns (address);\r\n\t// function WOKT() external pure returns (address);\r\n\t// function WHT() external pure returns (address);\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint amountADesired,\r\n\t\tuint amountBDesired,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountA, uint amountB, uint liquidity);\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint amountTokenDesired,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\tfunction removeLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint liquidity,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountA, uint amountB);\r\n\tfunction removeLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountToken, uint amountETH);\r\n\tfunction removeLiquidityWithPermit(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint liquidity,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t) external returns (uint amountA, uint amountB);\r\n\tfunction removeLiquidityETHWithPermit(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t) external returns (uint amountToken, uint amountETH);\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\tfunction swapTokensForExactTokens(\r\n\t\tuint amountOut,\r\n\t\tuint amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\texternal\r\n\tpayable\r\n\treturns (uint[] memory amounts);\r\n\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n\texternal\r\n\treturns (uint[] memory amounts);\r\n\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\texternal\r\n\treturns (uint[] memory amounts);\r\n\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n\texternal\r\n\tpayable\r\n\treturns (uint[] memory amounts);\r\n\r\n\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountETH);\r\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t) external returns (uint amountETH);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable;\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\n\r\ncontract MUSPlanet is ERC20Capped, Orchestrated {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint public marketFee = 100;\r\n\tuint public burnFee = 200;\r\n\r\n\taddress public marketFeeWallet = address(0xAE9b1D630A6feaeAd47fA84FB37e2d12B67533F4);\r\n\r\n\tmapping (address => bool) public _isSwapInclude;\r\n\tIUniswapV2Router02 public uniswapV2Router;\r\n\taddress public uniswapV2Pair;\r\n\taddress public tokenB;\r\n\r\n\tbool public senderLimit;\r\n\tbool public recipientLimit;\r\n\tmapping(address => bool) public senderWhite;\r\n\tmapping(address => bool) public recipientWhite;\r\n\tmapping(address => bool) public white;\r\n\tmapping(address => bool) public feeWhite;\r\n\r\n\tconstructor() ERC20Capped(2100000000 * 1e18) ERC20(\"MUS Planet\", \"MUS\") {\r\n\t\tERC20._mint(msg.sender, 2100000000 * 1e18);\r\n\t\t\r\n\t\tuniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\t\ttokenB = address(0x55d398326f99059fF775485246999027B3197955);//USDT\r\n\t\t\r\n\t\t// Create a uniswap pair for this new token\r\n\t\tIUniswapV2Factory factory =  IUniswapV2Factory(uniswapV2Router.factory());\r\n\t\taddress _uniswapV2Pair = factory.createPair(address(this), tokenB);\r\n\t\tuniswapV2Pair = _uniswapV2Pair;\r\n\t\t_isSwapInclude[uniswapV2Pair] = true;\r\n\r\n\t\taddress ipBnbPair = factory.createPair(address(this), uniswapV2Router.WETH());\r\n\t\t_isSwapInclude[ipBnbPair] = true;\r\n\t\twhite[address(this)] = true;\r\n\t\twhite[_msgSender()] = true;\r\n\t}\r\n\r\n\tfunction swapInclude(address account, bool isInclude) public onlyOwner() {\r\n\t\t_isSwapInclude[account] = isInclude;\r\n\t}\r\n\r\n\tfunction setSenderLimit(bool _senderLimit) public onlyOwner {\r\n\t\tsenderLimit = _senderLimit;\r\n\t}\r\n\r\n\tfunction setRecipientLimit(bool _recipientLimit) public onlyOwner {\r\n\t\trecipientLimit = _recipientLimit;\r\n\t}\r\n\r\n\tfunction setSenderWhite(address _account, bool _white) public onlyOwner {\r\n\t\tif(_account != address(this)){\r\n\t\t\tsenderWhite[_account] = _white;\r\n\t\t\temit SetSenderWhite(_account, _white);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setRecipientWhite(address _account, bool _white) public onlyOwner {\r\n\t\tif(_account != address(this)){\r\n\t\t\trecipientWhite[_account] = _white;\r\n\t\t\temit SetRecipientWhite(_account, _white);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setWhite(address _account, bool _white) public onlyOwner {\r\n\t\tif(_account != address(this)){\r\n\t\t\twhite[_account] = _white;\r\n\t\t\temit SetWhite(_account, _white);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setFeeWhite(address _account, bool _white) public onlyOwner {\r\n\t\tif(_account != address(this)){\r\n\t\t\tfeeWhite[_account] = _white;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal override virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer recipient the zero address\");\r\n\t\trequire(!senderLimit || !isContract(sender) || senderWhite[sender] || white[sender] || white[recipient] || address(0) == sender, \"MUS Token: senderLimit\");\r\n\t\trequire(!recipientLimit || !isContract(recipient) || recipientWhite[recipient] || white[sender] || white[recipient], \"MUS Token: recipientLimit\");\r\n\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\t\tbool takeFee = true;\r\n\t\tif(recipient == address(uniswapV2Pair)){\r\n\t\t\t(uint reserve0, uint reserve1, ) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n\t\t\tif(address(this) == IUniswapV2Pair(uniswapV2Pair).token0() && IERC20(tokenB).balanceOf(uniswapV2Pair) != reserve1){\r\n\t\t\t\ttakeFee = false;\r\n\t\t\t}\r\n\t\t\tif(address(this) == IUniswapV2Pair(uniswapV2Pair).token1() && IERC20(tokenB).balanceOf(uniswapV2Pair) != reserve0){\r\n\t\t\t\ttakeFee = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(feeWhite[sender] || feeWhite[recipient]) {\r\n\t\t\ttakeFee = false;\r\n\t\t}\r\n\r\n\t\tuint256 tokens = amount;\r\n\t\tif(takeFee) {\r\n\t\t\tif(_isSwapInclude[sender] || _isSwapInclude[recipient] || (!isContract(sender) && !isContract(recipient))) {\r\n\t\t\t\tif(marketFee > 0) {\r\n\t\t\t\t\tuint256 marketFees = amount.mul(marketFee).div(10000);\r\n\t\t\t\t\tsuper._transfer(sender, address(marketFeeWallet), marketFees);\r\n\t\t\t\t\ttokens = tokens.sub(marketFees);\r\n\t\t\t\t}\r\n\t\t\t\tif(burnFee > 0) {\r\n\t\t\t\t\tuint256 burnFees = amount.mul(burnFee).div(10000);\r\n\t\t\t\t\t_burn(sender, burnFees);\r\n\t\t\t\t\ttokens = tokens.sub(burnFees);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper._transfer(sender, recipient, tokens);\r\n\t}\r\n\r\n\tfunction isContract(address _address) internal view returns (bool) {\r\n\t\tuint256 size;\r\n\t\tassembly { size := extcodesize(_address) }\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual override {\r\n\t\tsuper._beforeTokenTransfer(from, to, amount);\r\n\t}\r\n\r\n\tfunction burn(uint256 amount) public virtual returns(bool) {\r\n\t\t_burn(_msgSender(), amount);\r\n\t\temit Burn(_msgSender(), amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction burnFrom(address account, uint256 amount) public virtual {\r\n\t\tuint256 currentAllowance = allowance(account, _msgSender());\r\n\t\trequire(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\r\n\tunchecked {\r\n\t\t_approve(account, _msgSender(), currentAllowance - amount);\r\n\t}\r\n\t\t_burn(account, amount);\r\n\t}\r\n\r\n\tfunction transferForeignToken(address _token, address _to, uint _amount) public onlyOwner returns(bool _sent){\r\n\t\t_sent = IERC20(_token).transfer(_to, _amount);\r\n\t}\r\n\r\n\tfunction Sweep(address _to, uint _amount) external onlyOwner {\r\n\t\tpayable(_to).transfer(_amount);\r\n\t}\r\n\r\n\tevent Burn(address indexed account, uint256 amount);\r\n\tevent SetWhite(address indexed account, bool white);\r\n\tevent SetSenderWhite(address indexed account, bool white);\r\n\tevent SetRecipientWhite(address indexed account, bool white);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"access\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"CancelAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"access\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"GrantedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"white\",\"type\":\"bool\"}],\"name\":\"SetRecipientWhite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"white\",\"type\":\"bool\"}],\"name\":\"SetSenderWhite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"white\",\"type\":\"bool\"}],\"name\":\"SetWhite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isSwapInclude\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeWhite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"orchestrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"orchestration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipientLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recipientWhite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"}],\"name\":\"removeOrchestrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderWhite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_white\",\"type\":\"bool\"}],\"name\":\"setFeeWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_recipientLimit\",\"type\":\"bool\"}],\"name\":\"setRecipientLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_white\",\"type\":\"bool\"}],\"name\":\"setRecipientWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_senderLimit\",\"type\":\"bool\"}],\"name\":\"setSenderLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_white\",\"type\":\"bool\"}],\"name\":\"setSenderWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_white\",\"type\":\"bool\"}],\"name\":\"setWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isInclude\",\"type\":\"bool\"}],\"name\":\"swapInclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"white\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MUSPlanet", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2ad1c6abd930f812662f81a7458f72db78fa538b88a2a9205506ac2bf863759c"}