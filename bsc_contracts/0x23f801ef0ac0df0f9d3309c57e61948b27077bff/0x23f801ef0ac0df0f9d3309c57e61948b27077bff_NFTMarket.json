{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\\n\\nimport \\\"./EIP712.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ILazymint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface ILazyNFT {\\r\\n    function redeem(\\r\\n        address _redeem,\\r\\n        uint256 _tokenid,\\r\\n        string memory _uri\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/MarketContract.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./MarketEvents.sol\\\";\\r\\nimport \\\"./Verification.sol\\\";\\r\\nimport \\\"./ILazymint.sol\\\";\\r\\nimport \\\"./verifySignature.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/// @title An Auction Contract for bidding and selling single and batched NFTs\\r\\n/// @notice This contract can be used for auctioning any NFTs, and accepts any ERC20 token as payment\\r\\n/// @author Disruptive Studios\\r\\n/// @author Modified from Avo Labs GmbH (https://github.com/avolabs-io/nft-auction/blob/master/contracts/NFTAuction.sol)\\r\\ncontract NFTMarket is MarketEvents, verification, VerifySignature {\\r\\n    ///@notice Map each auction with the token ID\\r\\n    mapping(address => mapping(uint256 => Auction)) public nftContractAuctions;\\r\\n    ///@notice If transfer fail save to withdraw later\\r\\n    mapping(address => uint256) public failedTransferCredits;\\r\\n\\r\\n    ///@notice Default values market fee\\r\\n    address payable public addressmarketfee;\\r\\n    uint256 public feeMarket = 250; //Equal 2.5%\\r\\n\\r\\n    ///@notice Each Auction is unique to each NFT (contract + id pairing).\\r\\n    ///@param auctionBidPeriod Increments the length of time the auction is open,\\r\\n    ///in which a new bid can be made after each bid.\\r\\n    ///@param ERC20Token The seller can specify an ERC20 token that can be used to bid or purchase the NFT.\\r\\n    struct Auction {\\r\\n        uint32 bidIncreasePercentage;\\r\\n        uint32 auctionBidPeriod;\\r\\n        uint64 auctionEnd;\\r\\n        uint256 minPrice;\\r\\n        uint256 buyNowPrice;\\r\\n        uint256 nftHighestBid;\\r\\n        address nftHighestBidder;\\r\\n        address nftSeller;\\r\\n        address ERC20Token;\\r\\n        address[] feeRecipients;\\r\\n        uint32[] feePercentages;\\r\\n        bool lazymint;\\r\\n        string metadata;\\r\\n    }\\r\\n\\r\\n    struct paymentInfo {\\r\\n        address _nftContractAddress;\\r\\n        uint256 _tokenId;\\r\\n        address _erc20Token;\\r\\n        uint256 _tokenAmount;\\r\\n        uint256 _value;\\r\\n        uint256 _coupon;\\r\\n        bytes _signature;\\r\\n        uint256 _nonce;\\r\\n        bool _discount;\\r\\n        address[] referals;\\r\\n        uint256[] amounts;\\r\\n        uint256 totalReferals;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              MODIFIERS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    modifier isAuctionNotStartedByOwner(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId\\r\\n    ) {\\r\\n        require(\\r\\n            nftContractAuctions[_nftContractAddress][_tokenId].nftSeller !=\\r\\n                msg.sender,\\r\\n            \\\"Initiated by the owner\\\"\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            nftContractAuctions[_nftContractAddress][_tokenId].nftSeller !=\\r\\n            address(0)\\r\\n        ) {\\r\\n            require(\\r\\n                msg.sender == IERC721(_nftContractAddress).ownerOf(_tokenId),\\r\\n                \\\"Sender doesn't own NFT\\\"\\r\\n            );\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              END MODIFIERS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    // constructor\\r\\n    constructor(address payable _addressmarketfee) {\\r\\n        addressmarketfee = _addressmarketfee;\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    AUCTION/SELL CHECK FUNCTIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    ///@dev If the buy now price is set by the seller, check that the highest bid meets that price.\\r\\n    function _isBuyNowPriceMet(address _nftContractAddress, uint256 _tokenId)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 buyNowPrice = nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .buyNowPrice;\\r\\n        return\\r\\n            buyNowPrice > 0 &&\\r\\n            nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid >=\\r\\n            buyNowPrice;\\r\\n    }\\r\\n\\r\\n    ///@dev Check that a bid is applicable for the purchase of the NFT.\\r\\n    ///@dev In the case of a sale: the bid needs to meet the buyNowPrice.\\r\\n    ///@dev if buyNowPrice is met, ignore increase percentage\\r\\n    ///@dev In the case of an auction: the bid needs to be a % higher than the previous bid.\\r\\n    ///@dev if the NFT is up for auction, the bid needs to be a % higher than the previous bid\\r\\n    function _bidMeetBidRequirements(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _tokenAmount,\\r\\n        uint256 _value,\\r\\n        bool _sign\\r\\n    ) internal view returns (bool _state) {\\r\\n        uint256 buyNowPrice = nftContractAuctions[_nftContractAddress][\\r\\n                _tokenId\\r\\n            ].buyNowPrice;\\r\\n        if (_sign) {\\r\\n            uint256 newTotal = buyNowPrice >= _value ?  (buyNowPrice - _value) : (_value - buyNowPrice);\\r\\n            if (buyNowPrice > 0 &&\\r\\n                (msg.value >= newTotal || _tokenAmount >= newTotal)) {\\r\\n                return _state = true;\\r\\n            }\\r\\n        } else {\\r\\n            if (\\r\\n                buyNowPrice > 0 &&\\r\\n                (msg.value >= buyNowPrice || _tokenAmount >= buyNowPrice)\\r\\n            ) {\\r\\n                return _state = true;\\r\\n            }\\r\\n            uint32 bidIncreasePercentage = nftContractAuctions[\\r\\n                _nftContractAddress\\r\\n            ][_tokenId].bidIncreasePercentage;\\r\\n\\r\\n            uint256 bidIncreaseAmount = (nftContractAuctions[\\r\\n                _nftContractAddress\\r\\n            ][_tokenId].nftHighestBid * (10000 + bidIncreasePercentage)) /\\r\\n                10000;\\r\\n            return (msg.value >= bidIncreaseAmount ||\\r\\n                _tokenAmount >= bidIncreaseAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@dev Payment is accepted in the following scenarios:\\r\\n    ///@dev (1) Auction already created - can accept ETH or Specified Token\\r\\n    ///@dev  --------> Cannot bid with ETH & an ERC20 Token together in any circumstance<------\\r\\n    ///@dev (2) Auction not created - only ETH accepted (cannot early bid with an ERC20 Token\\r\\n    ///@dev (3) Cannot make a zero bid (no ETH or Token amount)\\r\\n    function _isPaymentAccepted(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        address _bidERC20Token,\\r\\n        uint256 _tokenAmount,\\r\\n        uint256 _value,\\r\\n        bool _sign\\r\\n    ) internal view returns (bool) {\\r\\n       address auctionERC20Token = nftContractAuctions[\\r\\n                _nftContractAddress][_tokenId].ERC20Token;\\r\\n        if (_sign) {\\r\\n            if(_value >= nftContractAuctions[_nftContractAddress][_tokenId].buyNowPrice){\\r\\n                    return true;\\r\\n            }\\r\\n            if (auctionERC20Token != address(0)) {\\r\\n                return\\r\\n                    msg.value == 0 &&\\r\\n                    auctionERC20Token == _bidERC20Token &&\\r\\n                    _tokenAmount > 0;\\r\\n            } else {\\r\\n                return\\r\\n                    msg.value != 0 &&\\r\\n                    _bidERC20Token == address(0) &&\\r\\n                    _tokenAmount == 0;\\r\\n            }\\r\\n            //return true;\\r\\n        } else {\\r\\n            if (auctionERC20Token != address(0)) {\\r\\n                return\\r\\n                    msg.value == 0 &&\\r\\n                    auctionERC20Token == _bidERC20Token &&\\r\\n                    _tokenAmount > 0;\\r\\n            } else {\\r\\n                return\\r\\n                    msg.value != 0 &&\\r\\n                    _bidERC20Token == address(0) &&\\r\\n                    _tokenAmount == 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                     END\\r\\n                            AUCTION CHECK FUNCTIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                      TRANSFER NFTS TO CONTRACT\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function _transferNftToAuctionContract(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId\\r\\n    ) internal {\\r\\n        address _nftSeller = nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .nftSeller;\\r\\n        if (IERC721(_nftContractAddress).ownerOf(_tokenId) == _nftSeller) {\\r\\n            IERC721(_nftContractAddress).transferFrom(\\r\\n                _nftSeller,\\r\\n                address(this),\\r\\n                _tokenId\\r\\n            );\\r\\n            require(\\r\\n                IERC721(_nftContractAddress).ownerOf(_tokenId) == address(this),\\r\\n                \\\"nft transfer failed\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                IERC721(_nftContractAddress).ownerOf(_tokenId) == address(this),\\r\\n                \\\"Seller doesn't own NFT\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                END\\r\\n                      TRANSFER NFTS TO CONTRACT\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                          AUCTION CREATION\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    ///@dev Setup parameters applicable to all auctions and whitelised sales:\\r\\n    ///@dev --> ERC20 Token for payment (if specified by the seller) : _erc20Token\\r\\n    ///@dev --> minimum price : _minPrice\\r\\n    ///@dev --> buy now price : _buyNowPrice\\r\\n    ///@dev --> the nft seller: msg.sender\\r\\n    ///@dev --> The fee recipients & their respective percentages for a sucessful auction/sale\\r\\n    function _setupAuction(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        address _erc20Token,\\r\\n        uint256 _minPrice,\\r\\n        uint256 _buyNowPrice,\\r\\n        uint32 _bidIncreasePercentage,\\r\\n        uint32 _auctionBidPeriod,\\r\\n        address[] memory _feeRecipients,\\r\\n        uint32[] memory _feePercentages\\r\\n    ) internal isFeePercentagesLessThanMaximum(_feePercentages) {\\r\\n        if (_erc20Token != address(0)) {\\r\\n            nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                .ERC20Token = _erc20Token;\\r\\n        }\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .feeRecipients = _feeRecipients;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .feePercentages = _feePercentages;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .buyNowPrice = _buyNowPrice;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].minPrice = _minPrice;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].nftSeller = msg\\r\\n            .sender;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .bidIncreasePercentage = _bidIncreasePercentage;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .auctionBidPeriod = _auctionBidPeriod;\\r\\n    }\\r\\n\\r\\n    function _createNewNftAuction(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        address _erc20Token, //change to BEP20Token\\r\\n        uint256 _minPrice,\\r\\n        uint256 _buyNowPrice,\\r\\n        uint32 _bidIncreasePercentage,\\r\\n        uint32 _auctionBidPeriod,\\r\\n        address[] memory _feeRecipients,\\r\\n        uint32[] memory _feePercentages,\\r\\n        bool _lazymint,\\r\\n        string memory _metadata\\r\\n    ) internal {\\r\\n        string memory _uri;\\r\\n        if (!_lazymint) {\\r\\n            _uri = metadata(_nftContractAddress, _tokenId);\\r\\n        } else {\\r\\n            _uri = _metadata;\\r\\n        }\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .nftHighestBid = _minPrice;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].lazymint = _lazymint;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].metadata = _metadata;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd = (uint64(\\r\\n            block.timestamp\\r\\n        ) + _auctionBidPeriod);\\r\\n        _setupAuction(\\r\\n            _nftContractAddress,\\r\\n            _tokenId,\\r\\n            _erc20Token,\\r\\n            _minPrice,\\r\\n            _buyNowPrice,\\r\\n            _bidIncreasePercentage,\\r\\n            _auctionBidPeriod,\\r\\n            _feeRecipients,\\r\\n            _feePercentages\\r\\n        );\\r\\n        emit NftAuctionCreated(\\r\\n            _nftContractAddress,\\r\\n            _tokenId,\\r\\n            msg.sender,\\r\\n            _erc20Token,\\r\\n            _minPrice,\\r\\n            _buyNowPrice,\\r\\n            _auctionBidPeriod,\\r\\n            _bidIncreasePercentage,\\r\\n            _feeRecipients,\\r\\n            _feePercentages,\\r\\n            _lazymint,\\r\\n            _uri\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ///@param _bidIncreasePercentage It is the percentage for an offer to be validated.\\r\\n    ///@param _auctionBidPeriod this is the time that the auction lasts until another bid occurs\\r\\n    function createNewNftAuction(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        address _erc20Token,\\r\\n        uint256 _minPrice,\\r\\n        uint256 _buyNowPrice,\\r\\n        uint32 _auctionBidPeriod,\\r\\n        uint32 _bidIncreasePercentage,\\r\\n        address[] memory _feeRecipients,\\r\\n        uint32[] memory _feePercentages,\\r\\n        bool _lazymint,\\r\\n        string memory _metadata\\r\\n    )\\r\\n        external\\r\\n        isAuctionNotStartedByOwner(_nftContractAddress, _tokenId)\\r\\n        priceGreaterThanZero(_minPrice)\\r\\n    {\\r\\n        require(\\r\\n            _bidIncreasePercentage >= 100, //Equal 1%\\r\\n            \\\"Bid increase percentage too low\\\"\\r\\n        );\\r\\n        _createNewNftAuction(\\r\\n            _nftContractAddress,\\r\\n            _tokenId,\\r\\n            _erc20Token,\\r\\n            _minPrice,\\r\\n            _buyNowPrice,\\r\\n            _bidIncreasePercentage,\\r\\n            _auctionBidPeriod,\\r\\n            _feeRecipients,\\r\\n            _feePercentages,\\r\\n            _lazymint,\\r\\n            _metadata\\r\\n        );\\r\\n        if (!_lazymint) {\\r\\n            _transferNftToAuctionContract(_nftContractAddress, _tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              END\\r\\n                       AUCTION CREATION\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              SALES\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    function _setupSale(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        address _erc20Token,\\r\\n        uint256 _buyNowPrice,\\r\\n        address[] memory _feeRecipients,\\r\\n        uint32[] memory _feePercentages\\r\\n    ) internal isFeePercentagesLessThanMaximum(_feePercentages) {\\r\\n        if (_erc20Token != address(0)) {\\r\\n            nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                .ERC20Token = _erc20Token;\\r\\n        }\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .feeRecipients = _feeRecipients;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .feePercentages = _feePercentages;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .buyNowPrice = _buyNowPrice;\\r\\n    }\\r\\n\\r\\n    ///@notice Allows for a standard sale mechanism.\\r\\n    ///@dev For sale the min price must be 0\\r\\n    ///@dev _isABidMade check if buyNowPrice is meet and conclude sale, otherwise reverse the early bid\\r\\n    function createSale(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        address _erc20Token,\\r\\n        uint256 _buyNowPrice,\\r\\n        address _nftSeller,\\r\\n        address[] memory _feeRecipients,\\r\\n        uint32[] memory _feePercentages,\\r\\n        bool _lazymint,\\r\\n        string memory _metadata\\r\\n    )\\r\\n        external\\r\\n        isAuctionNotStartedByOwner(_nftContractAddress, _tokenId)\\r\\n        priceGreaterThanZero(_buyNowPrice)\\r\\n    {\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].lazymint = _lazymint;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].metadata = _metadata;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .nftSeller = _nftSeller;\\r\\n        _setupSale(\\r\\n            _nftContractAddress,\\r\\n            _tokenId,\\r\\n            _erc20Token,\\r\\n            _buyNowPrice,\\r\\n            _feeRecipients,\\r\\n            _feePercentages\\r\\n        );\\r\\n        string memory _uri;\\r\\n        if (!_lazymint) {\\r\\n            _uri = metadata(_nftContractAddress, _tokenId);\\r\\n        } else {\\r\\n            _uri = _metadata;\\r\\n        }\\r\\n\\r\\n        emit SaleCreated(\\r\\n            _nftContractAddress,\\r\\n            _tokenId,\\r\\n            _nftSeller,\\r\\n            _erc20Token,\\r\\n            _buyNowPrice,\\r\\n            _feeRecipients,\\r\\n            _feePercentages,\\r\\n            _lazymint,\\r\\n            _uri\\r\\n        );\\r\\n        if (!_lazymint) {\\r\\n            _transferNftToAuctionContract(_nftContractAddress, _tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              END  SALES\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              BID FUNCTIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    ///@notice Make bids with ETH or an ERC20 Token specified by the NFT seller.\\r\\n    ///@notice Additionally, a buyer can pay the asking price to conclude a sale of an NFT.\\r\\n    function makeBid (paymentInfo memory payment) external payable {\\r\\n        address seller = nftContractAuctions[payment._nftContractAddress][payment._tokenId]\\r\\n            .nftSeller;\\r\\n        uint256 pay = nftContractAuctions[payment._nftContractAddress][payment._tokenId].nftHighestBid;\\r\\n        bool _sign = false;\\r\\n        if (payment._discount) {\\r\\n            if(validate(payment._value, payment._coupon, payment._signature, seller, payment._nonce)){\\r\\n                _sign = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(_sign){\\r\\n            if(payment._value == 0){\\r\\n                revert(\\\"need value discount\\\");\\r\\n            }else{\\r\\n                payment._tokenAmount = pay >= payment._value ?  (pay - payment._value) : (payment._value - pay);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint64 auctionEndTimestamp = nftContractAuctions[payment._nftContractAddress][payment._tokenId].auctionEnd;\\r\\n        if (auctionEndTimestamp != 0) {\\r\\n            require(\\r\\n                (block.timestamp < auctionEndTimestamp),\\r\\n                \\\"Auction has ended\\\"\\r\\n            );\\r\\n        }\\r\\n        require(msg.sender != seller, \\\"Owner cannot bid on own NFT\\\");\\r\\n        require(\\r\\n            _bidMeetBidRequirements(\\r\\n                payment._nftContractAddress,\\r\\n                payment._tokenId,\\r\\n                payment._tokenAmount,\\r\\n                payment._value,\\r\\n                _sign\\r\\n            ),\\r\\n            \\\"Not enough funds to bid on NFT\\\"\\r\\n        );\\r\\n        require(\\r\\n            _isPaymentAccepted(\\r\\n                payment._nftContractAddress,\\r\\n                payment._tokenId,\\r\\n                payment._erc20Token,\\r\\n                payment._tokenAmount,\\r\\n                payment._value,\\r\\n                _sign\\r\\n            ),\\r\\n            \\\"Bid to be in specified ERC20/ETH\\\"\\r\\n        );\\r\\n        _reversePreviousBidAndUpdateHighestBid(\\r\\n            payment._nftContractAddress,\\r\\n            payment._tokenId,\\r\\n            payment._tokenAmount/* ,\\r\\n            _sign */\\r\\n        );\\r\\n        emit BidMade(\\r\\n            payment._nftContractAddress,\\r\\n            payment._tokenId,\\r\\n            msg.sender,\\r\\n            msg.value,\\r\\n            payment._erc20Token,\\r\\n            payment._tokenAmount,\\r\\n            payment._coupon\\r\\n        );\\r\\n        _updateOngoingAuction(payment._nftContractAddress, payment._tokenId, _sign, payment._value, payment.referals, payment.amounts, payment.totalReferals);\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                        END BID FUNCTIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                        UPDATE AUCTION\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    ///@notice Settle an auction or sale if the buyNowPrice is met or set\\r\\n    ///@dev min price not set, nft not up for auction yet\\r\\n    function _updateOngoingAuction(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        bool _sign,\\r\\n        uint256 _value,\\r\\n        address[] memory referals,\\r\\n        uint256[] memory amounts,\\r\\n        uint256 totalReferals\\r\\n    ) internal {\\r\\n        uint256 buyNowPrice = nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .buyNowPrice;\\r\\n        if (_sign) {\\r\\n            if (_value >= buyNowPrice) {\\r\\n                _transferNFT(_nftContractAddress, _tokenId);\\r\\n            } else {\\r\\n                _transferNftAndPaySeller(_nftContractAddress, _tokenId,_value,referals, amounts, totalReferals);\\r\\n                return;\\r\\n            }\\r\\n        } else {\\r\\n            if (_isBuyNowPriceMet(_nftContractAddress, _tokenId)) {\\r\\n                _transferNftAndPaySeller(_nftContractAddress, _tokenId,0,referals, amounts, totalReferals);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@dev the auction end is always set to now + the bid period\\r\\n    /*function _updateAuctionEnd(address _nftContractAddress, uint256 _tokenId)\\r\\n        internal\\r\\n    {\\r\\n        uint32 auctionBidPeriod = nftContractAuctions[_nftContractAddress][\\r\\n            _tokenId\\r\\n        ].auctionBidPeriod;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd =\\r\\n            auctionBidPeriod +\\r\\n            uint64(block.timestamp);\\r\\n        emit AuctionPeriodUpdated(\\r\\n            _nftContractAddress,\\r\\n            _tokenId,\\r\\n            nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd\\r\\n        );\\r\\n    }*/\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                           END UPDATE AUCTION\\r\\n   //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                           RESET FUNCTIONS\\r\\n   //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    ///@notice Reset all auction related parameters for an NFT.\\r\\n    ///@notice This effectively removes an NFT as an item up for auction\\r\\n    function _resetAuction(address _nftContractAddress, uint256 _tokenId)\\r\\n        internal\\r\\n    {\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].minPrice = 0;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].buyNowPrice = 0;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].auctionEnd = 0;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].auctionBidPeriod = 0;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .bidIncreasePercentage = 0;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].nftSeller = address(\\r\\n            0\\r\\n        );\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].ERC20Token = address(\\r\\n            0\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ///@notice Reset all bid related parameters for an NFT.\\r\\n    ///@notice This effectively sets an NFT as having no active bids\\r\\n    function _resetBids(address _nftContractAddress, uint256 _tokenId)\\r\\n        internal\\r\\n    {\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .nftHighestBidder = address(0);\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid = 0;\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                        END RESET FUNCTIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                        UPDATE BIDS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    function _reversePreviousBidAndUpdateHighestBid(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _tokenAmount/* ,\\r\\n        bool _sign */\\r\\n    ) internal {\\r\\n        address auctionERC20Token = nftContractAuctions[_nftContractAddress][\\r\\n            _tokenId\\r\\n        ].ERC20Token;\\r\\n       /*  if (_sign) {\\r\\n            nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                .nftHighestBidder = msg.sender;\\r\\n            if (auctionERC20Token != address(0)) {\\r\\n                nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                    .nftHighestBid = _tokenAmount;\\r\\n                IERC20(auctionERC20Token).transferFrom(\\r\\n                    msg.sender,\\r\\n                    address(this),\\r\\n                    _tokenAmount\\r\\n                );\\r\\n            } else {\\r\\n                nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                    .nftHighestBid = msg.value;\\r\\n            }\\r\\n        } else { */\\r\\n            address prevNftHighestBidder = nftContractAuctions[\\r\\n                _nftContractAddress\\r\\n            ][_tokenId].nftHighestBidder;\\r\\n            uint256 prevNftHighestBid = nftContractAuctions[\\r\\n                _nftContractAddress\\r\\n            ][_tokenId].nftHighestBid;\\r\\n\\r\\n            if (auctionERC20Token != address(0)) {\\r\\n                IERC20(auctionERC20Token).transferFrom(\\r\\n                    msg.sender,\\r\\n                    address(this),\\r\\n                    _tokenAmount\\r\\n                );\\r\\n                nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                    .nftHighestBid = _tokenAmount;\\r\\n            } else {\\r\\n                nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                    .nftHighestBid = msg.value;\\r\\n            }\\r\\n            nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                .nftHighestBidder = msg.sender;\\r\\n\\r\\n            if (prevNftHighestBidder != address(0)) {\\r\\n                _payout( \\r\\n                    prevNftHighestBidder,\\r\\n                    prevNftHighestBid,\\r\\n                    auctionERC20Token\\r\\n                );\\r\\n            }\\r\\n        //}\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                          END UPDATE BIDS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    TRANSFER NFT, PAY SELLER & MARKET\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    function _transferNftAndPaySeller(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _value,\\r\\n        address[] memory referals,\\r\\n        uint256[] memory amounts,\\r\\n        uint256 totalReferals\\r\\n    ) internal {\\r\\n        address _nftSeller = nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .nftSeller;\\r\\n        address _nftHighestBidder = nftContractAuctions[_nftContractAddress][\\r\\n            _tokenId\\r\\n        ].nftHighestBidder;\\r\\n        uint256 _nftHighestBid = nftContractAuctions[_nftContractAddress][\\r\\n            _tokenId\\r\\n        ].nftHighestBid;\\r\\n        bool lazymint = nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .lazymint;\\r\\n\\r\\n        _resetBids(_nftContractAddress, _tokenId);\\r\\n        _payFeesAndSeller(\\r\\n            _nftContractAddress,\\r\\n            _tokenId,\\r\\n            _nftSeller,\\r\\n            _nftHighestBid,\\r\\n            _value,\\r\\n            referals,\\r\\n            amounts,\\r\\n            totalReferals\\r\\n        );\\r\\n        if (!lazymint) {\\r\\n            IERC721(_nftContractAddress).transferFrom(\\r\\n                address(this),\\r\\n                _nftHighestBidder,\\r\\n                _tokenId\\r\\n            );\\r\\n        } else {\\r\\n            //This is the lazyminting function\\r\\n            ILazyNFT(_nftContractAddress).redeem(\\r\\n                _nftHighestBidder,\\r\\n                _tokenId,\\r\\n                nftContractAuctions[_nftContractAddress][_tokenId].metadata\\r\\n            );\\r\\n        }\\r\\n        _resetAuction(_nftContractAddress, _tokenId);\\r\\n        emit NFTTransferredAndSellerPaid(\\r\\n            _nftContractAddress,\\r\\n            _tokenId,\\r\\n            _nftSeller,\\r\\n            _nftHighestBid,\\r\\n            _nftHighestBidder\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _transferNFT(address _nftContractAddress, uint256 _tokenId)\\r\\n        internal\\r\\n    {\\r\\n        address _nftHighestBidder = nftContractAuctions[_nftContractAddress][\\r\\n            _tokenId\\r\\n        ].nftHighestBidder;\\r\\n        bool lazymint = nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .lazymint;\\r\\n\\r\\n        if (!lazymint) {\\r\\n            IERC721(_nftContractAddress).transferFrom(\\r\\n                address(this),\\r\\n                _nftHighestBidder,\\r\\n                _tokenId\\r\\n            );\\r\\n        } else {\\r\\n            //This is the lazyminting function\\r\\n            ILazyNFT(_nftContractAddress).redeem(\\r\\n                _nftHighestBidder,\\r\\n                _tokenId,\\r\\n                nftContractAuctions[_nftContractAddress][_tokenId].metadata\\r\\n            );\\r\\n        }\\r\\n        _resetAuction(_nftContractAddress, _tokenId);\\r\\n        emit NFTTransferred(_nftContractAddress, _tokenId, _nftHighestBidder);\\r\\n    }\\r\\n\\r\\n    function _payFeesAndSeller(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        address _nftSeller,\\r\\n        uint256 _highestBid,\\r\\n        uint256 _value,\\r\\n        address[] memory referals,\\r\\n        uint256[] memory amounts,\\r\\n        uint256 totalReferals\\r\\n    ) internal {\\r\\n        uint256 pay;\\r\\n        address auctionERC20Token = nftContractAuctions[_nftContractAddress][_tokenId].ERC20Token;\\r\\n        if(_value != 0){\\r\\n            pay = _highestBid >= _value ?  (_highestBid - _value) : (_value - _highestBid);\\r\\n        }else{\\r\\n            pay = _highestBid;\\r\\n        }\\r\\n         if(totalReferals != 0){\\r\\n            payReferals(referals, amounts, auctionERC20Token);\\r\\n        }\\r\\n        uint256 feesPaid = 0;\\r\\n        uint256 minusfee = _getPortionOfBid(pay, feeMarket);\\r\\n\\r\\n        uint256 subtotal = pay - minusfee - totalReferals;\\r\\n\\r\\n        feesPaid = _payoutroyalties(_nftContractAddress, _tokenId, subtotal, auctionERC20Token);\\r\\n\\r\\n        _payout(\\r\\n            _nftSeller,\\r\\n            (subtotal - feesPaid),\\r\\n            auctionERC20Token\\r\\n        );\\r\\n        sendpayment(minusfee,auctionERC20Token);\\r\\n    }\\r\\n\\r\\n      function payReferals(address[] memory referals,uint256[] memory amounts, address token) internal {\\r\\n        uint length = referals.length;\\r\\n        if(length != amounts.length){\\r\\n            revert(\\\"array mismatch\\\");\\r\\n        }\\r\\n\\r\\n        for(uint i = 0; i < length; ){\\r\\n            \\r\\n            if (token != address(0)) {\\r\\n                IERC20(token).transfer(referals[i], amounts[i]);\\r\\n            } else {\\r\\n                (bool success, ) = payable(referals[i]).call{value: amounts[i]}(\\\"\\\");\\r\\n            if (!success) {\\r\\n                failedTransferCredits[referals[i]] =\\r\\n                    failedTransferCredits[referals[i]] +\\r\\n                    amounts[i];\\r\\n            }\\r\\n        }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function sendpayment(\\r\\n        uint256 minusfee,\\r\\n         address token\\r\\n    ) internal {\\r\\n        uint256 amount = minusfee;\\r\\n        minusfee = 0;\\r\\n\\r\\n        if (token != address(0)) {\\r\\n            IERC20(token).transfer(addressmarketfee, amount);\\r\\n        } else {\\r\\n            (bool success, ) = payable(addressmarketfee).call{value: amount}(\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            if (!success) {\\r\\n                failedTransferCredits[addressmarketfee] =\\r\\n                    failedTransferCredits[addressmarketfee] +\\r\\n                    amount;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _payoutroyalties(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 subtotal,\\r\\n        address token\\r\\n    ) internal returns (uint256) {\\r\\n        uint256 feesPaid = 0;\\r\\n        uint256 length = nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .feeRecipients\\r\\n            .length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            uint256 fee = _getPortionOfBid(\\r\\n                subtotal,\\r\\n                nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                    .feePercentages[i]\\r\\n            );\\r\\n            feesPaid = feesPaid + fee;\\r\\n            _payout(\\r\\n                nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                    .feeRecipients[i],\\r\\n                fee,\\r\\n                token\\r\\n            );\\r\\n        }\\r\\n        return feesPaid;\\r\\n    }\\r\\n\\r\\n    ///@dev if the call failed, update their credit balance so they the seller can pull it later\\r\\n    function _payout(\\r\\n        address _recipient,\\r\\n        uint256 _amount, \\r\\n        address token\\r\\n    ) internal {\\r\\n\\r\\n        if (token != address(0)) {\\r\\n            IERC20(token).transfer(_recipient, _amount);\\r\\n        } else {\\r\\n            (bool success, ) = payable(_recipient).call{value: _amount}(\\\"\\\");\\r\\n            if (!success) {\\r\\n                failedTransferCredits[_recipient] =\\r\\n                    failedTransferCredits[_recipient] +\\r\\n                    _amount;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                      END TRANSFER NFT, PAY SELLER & MARKET\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                        SETTLE & WITHDRAW\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    /* function settleAuction(address _nftContractAddress, uint256 _tokenId)\\r\\n        external\\r\\n    {\\r\\n        uint64 auctionEndTimestamp = nftContractAuctions[_nftContractAddress][\\r\\n            _tokenId\\r\\n        ].auctionEnd;\\r\\n        require(\\r\\n            (block.timestamp > auctionEndTimestamp),\\r\\n            \\\"Auction has not ended\\\"\\r\\n        );\\r\\n        _transferNftAndPaySeller(_nftContractAddress, _tokenId);\\r\\n        emit AuctionSettled(_nftContractAddress, _tokenId, msg.sender);\\r\\n    } */\\r\\n\\r\\n    ///@dev Only the owner of the NFT can prematurely close the sale or auction.\\r\\n    function withdrawAuction(address _nftContractAddress, uint256 _tokenId)\\r\\n        external\\r\\n    {\\r\\n        require(\\r\\n            nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                .nftHighestBidder ==\\r\\n                address(0) &&\\r\\n                nftContractAuctions[_nftContractAddress][_tokenId].nftSeller ==\\r\\n                msg.sender,\\r\\n            \\\"cannot cancel an auction\\\"\\r\\n        );\\r\\n        bool lazymint = nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .lazymint;\\r\\n        if (lazymint) {\\r\\n            _resetAuction(_nftContractAddress, _tokenId);\\r\\n            _resetBids(_nftContractAddress, _tokenId);\\r\\n        } else {\\r\\n            if (\\r\\n                IERC721(_nftContractAddress).ownerOf(_tokenId) == address(this)\\r\\n            ) {\\r\\n                IERC721(_nftContractAddress).transferFrom(\\r\\n                    address(this),\\r\\n                    nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                        .nftSeller,\\r\\n                    _tokenId\\r\\n                );\\r\\n            }\\r\\n            _resetAuction(_nftContractAddress, _tokenId);\\r\\n            _resetBids(_nftContractAddress, _tokenId);\\r\\n        }\\r\\n        emit AuctionWithdrawn(_nftContractAddress, _tokenId, msg.sender);\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                         END  SETTLE & WITHDRAW\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                          UPDATE AUCTION\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    function updateMinimumPrice(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _newMinPrice\\r\\n    ) public priceGreaterThanZero(_newMinPrice) {\\r\\n        require(\\r\\n            msg.sender ==\\r\\n                nftContractAuctions[_nftContractAddress][_tokenId].nftSeller,\\r\\n            \\\"Only nft seller\\\"\\r\\n        );\\r\\n        require(\\r\\n            (nftContractAuctions[_nftContractAddress][_tokenId].minPrice != 0),\\r\\n            \\\"Not applicable a sale\\\"\\r\\n        );\\r\\n         require(\\r\\n            nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                .nftHighestBidder != address(0), \\r\\n                \\\"auction with bidder\\\"\\r\\n        );\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .minPrice = _newMinPrice;\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                .nftHighestBid = _newMinPrice;\\r\\n\\r\\n        emit MinimumPriceUpdated(_nftContractAddress, _tokenId, _newMinPrice);\\r\\n    }\\r\\n\\r\\n    function updateBuyNowPrice(\\r\\n        address _nftContractAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _newBuyNowPrice,\\r\\n        address[] calldata referals,\\r\\n        uint256[] calldata amounts,\\r\\n        uint256 totalReferals\\r\\n    ) external priceGreaterThanZero(_newBuyNowPrice) {\\r\\n        require(\\r\\n            msg.sender ==\\r\\n                nftContractAuctions[_nftContractAddress][_tokenId].nftSeller,\\r\\n            \\\"Only nft seller\\\"\\r\\n        );\\r\\n        nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .buyNowPrice = _newBuyNowPrice;\\r\\n        emit BuyNowPriceUpdated(_nftContractAddress, _tokenId, _newBuyNowPrice);\\r\\n        if (_isBuyNowPriceMet(_nftContractAddress, _tokenId)) {\\r\\n            bool lazymint = nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n                .lazymint;\\r\\n            if (!lazymint) {\\r\\n                _transferNftToAuctionContract(_nftContractAddress, _tokenId);\\r\\n            }\\r\\n            _transferNftAndPaySeller(_nftContractAddress, _tokenId,0,referals,amounts,totalReferals);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@notice The NFT seller can opt to end an auction by taking the current highest bid.\\r\\n    function takeHighestBid(address _nftContractAddress, uint256 _tokenId,address[] calldata referals,uint256[] calldata amounts,uint256 totalReferals)\\r\\n        external\\r\\n    {\\r\\n        require(\\r\\n            msg.sender ==\\r\\n                nftContractAuctions[_nftContractAddress][_tokenId].nftSeller,\\r\\n            \\\"Only nft seller\\\"\\r\\n        );\\r\\n        require(\\r\\n            (nftContractAuctions[_nftContractAddress][_tokenId].nftHighestBid >\\r\\n                0),\\r\\n            \\\"cannot payout 0 bid\\\"\\r\\n        );\\r\\n        bool lazymint = nftContractAuctions[_nftContractAddress][_tokenId]\\r\\n            .lazymint;\\r\\n        if (!lazymint) {\\r\\n            _transferNftToAuctionContract(_nftContractAddress, _tokenId);\\r\\n        }\\r\\n        _transferNftAndPaySeller(_nftContractAddress, _tokenId,0, referals,amounts,totalReferals);\\r\\n        emit HighestBidTaken(_nftContractAddress, _tokenId);\\r\\n    }\\r\\n\\r\\n    ///@notice If the transfer of a bid has failed, allow the recipient to reclaim their amount later.\\r\\n    function withdrawAllFailedCredits() external {\\r\\n        uint256 amount = failedTransferCredits[msg.sender];\\r\\n\\r\\n        require(amount != 0, \\\"no credits to withdraw\\\");\\r\\n\\r\\n        failedTransferCredits[msg.sender] = 0;\\r\\n\\r\\n        (bool successfulWithdraw, ) = msg.sender.call{value: amount}(\\\"\\\");\\r\\n        require(successfulWithdraw, \\\"withdraw failed\\\");\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                        END UPDATE AUCTION\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n}\"\r\n    },\r\n    \"contracts/MarketEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nabstract contract MarketEvents {\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              EVENTS            \\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event NftAuctionCreated(\\r\\n        address nftContractAddress,\\r\\n        uint256 tokenId,\\r\\n        address nftSeller,\\r\\n        address erc20Token,\\r\\n        uint256 minPrice,\\r\\n        uint256 buyNowPrice,\\r\\n        uint32 auctionBidPeriod,\\r\\n        uint32 bidIncreasePercentage,\\r\\n        address[] feeRecipients,\\r\\n        uint32[] feePercentages,\\r\\n        bool lazymint,\\r\\n        string metadatauri\\r\\n    );\\r\\n\\r\\n    event SaleCreated(\\r\\n        address nftContractAddress,\\r\\n        uint256 tokenId,\\r\\n        address nftSeller,\\r\\n        address erc20Token,\\r\\n        uint256 buyNowPrice,\\r\\n        address[] feeRecipients,\\r\\n        uint32[] feePercentages,\\r\\n        bool lazymint,\\r\\n        string metadatauri\\r\\n    );\\r\\n\\r\\n    event BidMade(\\r\\n        address nftContractAddress,\\r\\n        uint256 tokenId,\\r\\n        address bidder,\\r\\n        uint256 ethAmount,\\r\\n        address erc20Token,\\r\\n        uint256 tokenAmount,\\r\\n        uint256 coupon\\r\\n    );\\r\\n\\r\\n    event AuctionPeriodUpdated(\\r\\n        address nftContractAddress,\\r\\n        uint256 tokenId,\\r\\n        uint64 auctionEndPeriod\\r\\n    );\\r\\n\\r\\n    event NFTTransferredAndSellerPaid(\\r\\n        address nftContractAddress,\\r\\n        uint256 tokenId,\\r\\n        address nftSeller,\\r\\n        uint256 nftHighestBid,\\r\\n        address nftHighestBidder\\r\\n    );\\r\\n\\r\\n    event AuctionWithdrawn(\\r\\n        address nftContractAddress,\\r\\n        uint256 tokenId,\\r\\n        address nftOwner\\r\\n    );\\r\\n\\r\\n    event MinimumPriceUpdated(\\r\\n        address nftContractAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 newMinPrice\\r\\n    );\\r\\n\\r\\n    event BuyNowPriceUpdated(\\r\\n        address nftContractAddress,\\r\\n        uint256 tokenId,\\r\\n        uint256 newBuyNowPrice\\r\\n    );\\r\\n    event HighestBidTaken(address nftContractAddress, uint256 tokenId);\\r\\n\\r\\n    event AuctionSettled(\\r\\n        address nftContractAddress,\\r\\n        uint256 tokenId,\\r\\n        address auctionSettler\\r\\n    );\\r\\n\\r\\n    event NFTTransferred(\\r\\n        address nftContractAddress,\\r\\n        uint256 tokenId,\\r\\n        address nftHighestBidder\\r\\n    );\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                              END EVENTS            \\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Verification.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\n\\r\\nabstract contract verification {\\r\\n    ///@dev Returns the percentage of the total bid (used to calculate fee payments)\\r\\n    function _getPortionOfBid(uint256 _totalBid, uint256 _percentage)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return (_totalBid * (_percentage)) / 10000;\\r\\n    }\\r\\n\\r\\n    modifier priceGreaterThanZero(uint256 _price) {\\r\\n        require(_price > 0, \\\"Price cannot be 0\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isFeePercentagesLessThanMaximum(uint32[] memory _feePercentages) {\\r\\n        uint32 totalPercent;\\r\\n        for (uint256 i = 0; i < _feePercentages.length; i++) {\\r\\n            totalPercent = totalPercent + _feePercentages[i];\\r\\n        }\\r\\n        require(totalPercent <= 10000, \\\"Fee percentages exceed maximum\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function metadata(address _nftcontract, uint256 _nftid)\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            //bool _mint\\r\\n            string memory\\r\\n        )\\r\\n    {\\r\\n        //if (!_mint) {\\r\\n        return IERC721Metadata(_nftcontract).tokenURI(_nftid);\\r\\n        /*} else {\\r\\n            return \\\"\\\";\\r\\n        }*/\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/verifySignature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract VerifySignature is EIP712 {\\n    error invalidsignature();\\n    error invalidcoupon();\\n    error addressZero();\\n    error redeemedcoupon();\\n\\n    string private SIGNING_DOMAIN = \\\"Market Coupons\\\";\\n    string private SIGNATURE_VERSION = \\\"1\\\";\\n\\n    mapping(bytes => bool) public couponsregistry;\\n\\n    constructor() EIP712(SIGNING_DOMAIN, SIGNATURE_VERSION) {}\\n\\n    function validate(\\n        uint256 _value,\\n        uint256 _coupon,\\n        bytes memory _signature,\\n        address _owner,\\n        uint256 _nonce\\n    ) internal returns (bool) {\\n        if (couponsregistry[_signature] == true) {\\n            revert redeemedcoupon();\\n        }\\n        //_domainSeparator();\\n        if (!check(_value, _coupon, _signature, _owner, _nonce)) {\\n            revert invalidcoupon();\\n        }\\n        couponsregistry[_signature] = true;\\n\\n        return true;\\n    }\\n\\n    function check(\\n        uint256 _value,\\n        uint256 _coupon,\\n        bytes memory _signature,\\n        address _owner,\\n        uint256 _nonce\\n    ) internal view returns (bool) {\\n        return _verify(_value, _coupon, _signature, _owner, _nonce);\\n    }\\n\\n    function _verify(\\n        uint256 _value,\\n        uint256 _coupon,\\n        bytes memory _signature,\\n        address _owner,\\n        uint256 _nonce\\n    ) internal view returns (bool) {\\n        bytes32 _digest = _hash(_value, _coupon, _nonce);\\n        address signer = ECDSA.recover(_digest, _signature);\\n        if (signer != _owner) {\\n            return false;\\n        }\\n        if (signer == address(0)) {\\n            revert addressZero();\\n        }\\n        return true;\\n    }\\n\\n    function _hash(\\n        uint256 _value,\\n        uint256 _coupon,\\n        uint256 _nonce\\n    ) internal view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"MarketCoupons(uint256 value,uint256 coupon,uint256 nonce)\\\"\\n                        ),\\n                        _value,\\n                        _coupon,\\n                        _nonce\\n                    )\\n                )\\n            );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_addressmarketfee\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidcoupon\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidsignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"redeemedcoupon\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"auctionEndPeriod\",\"type\":\"uint64\"}],\"name\":\"AuctionPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctionSettler\",\"type\":\"address\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"}],\"name\":\"AuctionWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coupon\",\"type\":\"uint256\"}],\"name\":\"BidMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyNowPrice\",\"type\":\"uint256\"}],\"name\":\"BuyNowPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"HighestBidTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinPrice\",\"type\":\"uint256\"}],\"name\":\"MinimumPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftHighestBidder\",\"type\":\"address\"}],\"name\":\"NFTTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftHighestBid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftHighestBidder\",\"type\":\"address\"}],\"name\":\"NFTTransferredAndSellerPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"auctionBidPeriod\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"bidIncreasePercentage\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"feeRecipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"feePercentages\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lazymint\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadatauri\",\"type\":\"string\"}],\"name\":\"NftAuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"feeRecipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"feePercentages\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lazymint\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadatauri\",\"type\":\"string\"}],\"name\":\"SaleCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressmarketfee\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"couponsregistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_auctionBidPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_bidIncreasePercentage\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"_feeRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_feePercentages\",\"type\":\"uint32[]\"},{\"internalType\":\"bool\",\"name\":\"_lazymint\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"createNewNftAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftSeller\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_feeRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_feePercentages\",\"type\":\"uint32[]\"},{\"internalType\":\"bool\",\"name\":\"_lazymint\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"createSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"failedTransferCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coupon\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_discount\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"referals\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalReferals\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTMarket.paymentInfo\",\"name\":\"payment\",\"type\":\"tuple\"}],\"name\":\"makeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftContractAuctions\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"bidIncreasePercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"auctionBidPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"auctionEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftHighestBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftHighestBidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftSeller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ERC20Token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"lazymint\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"referals\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalReferals\",\"type\":\"uint256\"}],\"name\":\"takeHighestBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBuyNowPrice\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"referals\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalReferals\",\"type\":\"uint256\"}],\"name\":\"updateBuyNowPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMinPrice\",\"type\":\"uint256\"}],\"name\":\"updateMinimumPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllFailedCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTMarket", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004833d87beb4d738e58fcda786964d0061b3bab56", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}