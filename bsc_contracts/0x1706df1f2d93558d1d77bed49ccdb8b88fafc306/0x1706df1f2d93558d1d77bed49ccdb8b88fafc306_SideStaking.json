{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/pools/ssContracts/SideStaking.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\nimport \\\"../../interfaces/ISideStaking.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../../interfaces/IERC20Template.sol\\\";\\nimport \\\"../../interfaces/IERC721Template.sol\\\";\\nimport \\\"../../interfaces/IPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../../utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**@title SideStaking\\n *\\n * @dev SideStaking is a contract that monitors stakings in pools, \\n        adding or removing dt when only baseToken liquidity is added or removed\\n *      Called by the pool contract\\n *      Every ss newDatatokenCreated function has a ssParams array, \\n        which for this contract has the following structure: \\n     *                     [0]  = rate (wei)\\n     *                     [1]  = baseToken decimals\\n     *                     [2]  = vesting amount (wei)\\n     *                     [3]  = vested blocks\\n     *                     [4]  = initial liquidity in baseToken for pool creation\\n *\\n */\\ncontract SideStaking is ReentrancyGuard, ISideStaking {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    address public router;\\n\\n    // emitted when a new vesting is created\\n    event VestingCreated(\\n        address indexed datatokenAddress,\\n        address indexed publisherAddress,\\n        uint256 vestingEndBlock,\\n        uint256 totalVestingAmount\\n    );\\n    // emited each time when tokens are vested to the publisher\\n    event Vesting(\\n        address indexed datatokenAddress,\\n        address indexed publisherAddress,\\n        address indexed caller,\\n        uint256 amountVested\\n    );\\n\\n    struct Record {\\n        bool bound; //datatoken bounded\\n        address baseTokenAddress;\\n        address poolAddress;\\n        bool poolFinalized; // did we finalized the pool ? We have to do it after burn-in\\n        uint256 datatokenBalance; //current dt balance\\n        uint256 datatokenCap; //dt cap\\n        uint256 baseTokenBalance; //current baseToken balance\\n        uint256 lastPrice; //used for creating the pool\\n        uint256 rate; // rate to exchange DT<->baseToken\\n        address publisherAddress;\\n        uint256 blockDeployed; //when this record was created\\n        uint256 vestingEndBlock; //see below\\n        uint256 vestingAmount; // total amount to be vested to publisher until vestingEndBlock\\n        uint256 vestingLastBlock; //last block in which a vesting has been granted\\n        uint256 vestingAmountSoFar; //how much was vested so far\\n    }\\n\\n    mapping(address => Record) private _datatokens;\\n    uint256 private constant BASE = 1e18;\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"ONLY ROUTER\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner(address datatoken) {\\n        require(\\n            datatoken != address(0),\\n            'Invalid token contract address'\\n        );\\n        // allow only ERC20 Deployers or NFT Owner\\n        IERC20Template dt = IERC20Template(datatoken);\\n        require(\\n            dt.isERC20Deployer(msg.sender) || \\n            IERC721Template(dt.getERC721Address()).ownerOf(1) == msg.sender\\n            ,\\n            \\\"Invalid owner\\\"\\n        );\\n        _;\\n    }\\n    /**\\n     * @dev constructor\\n     *      Called on contract deployment.\\n     */\\n    constructor(address _router) {\\n        require(_router != address(0), \\\"Invalid _router address\\\");\\n        router = _router;\\n    }\\n\\n    /**\\n     * @dev getId\\n     *      Return template id in case we need different ABIs.\\n     *      If you construct your own template, please make sure to change the hardcoded value\\n     */\\n    function getId() public pure returns (uint8) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev newDatatokenCreated\\n     *      Called when new Datatoken is deployed by the DatatokenFactory\\n     * @param datatokenAddress - datatokenAddress\\n     * @param baseTokenAddress -\\n     * @param poolAddress - poolAddress\\n     * @param publisherAddress - publisherAddress\\n     * @param ssParams  - ss Params, see below\\n     */\\n\\n    function newDatatokenCreated(\\n        address datatokenAddress,\\n        address baseTokenAddress,\\n        address poolAddress,\\n        address publisherAddress,\\n        uint256[] memory ssParams\\n    ) external onlyRouter nonReentrant returns (bool) {\\n        //check if we are the controller of the pool\\n        require(poolAddress != address(0), \\\"Invalid poolAddress\\\");\\n        IPool bpool = IPool(poolAddress);\\n        require(\\n            bpool.getController() == address(this),\\n            \\\"We are not the pool controller\\\"\\n        );\\n        //check if the tokens are bound\\n        require(\\n            bpool.getDatatokenAddress() == datatokenAddress,\\n            \\\"Datatoken address missmatch\\\"\\n        );\\n        require(\\n            bpool.getBaseTokenAddress() == baseTokenAddress,\\n            \\\"baseToken address missmatch\\\"\\n        );\\n        require(ssParams[0]>1e12 , \\\"Invalid rate\\\");\\n        // check if we are the minter of DT\\n        IERC20Template dt = IERC20Template(datatokenAddress);\\n        require(\\n            (dt.permissions(address(this))).minter,\\n            \\\"baseToken address mismatch\\\"\\n        );\\n        // get cap and mint it..\\n        dt.mint(address(this), dt.cap());\\n\\n        require(dt.balanceOf(address(this)) >= dt.totalSupply(), \\\"Mint failed\\\");\\n\\n        //force vesting to 0, see https://github.com/oceanprotocol/contracts/issues/603\\n        ssParams[2] = 0;\\n        ssParams[3] = 0;\\n        require(dt.totalSupply().div(10) >= ssParams[2], \\\"Max vesting 10%\\\");\\n        //we are rich :)let's setup the records and we are good to go\\n        _datatokens[datatokenAddress] = Record({\\n            bound: true,\\n            baseTokenAddress: baseTokenAddress,\\n            poolAddress: poolAddress,\\n            poolFinalized: false,\\n            datatokenBalance: dt.totalSupply(),\\n            datatokenCap: dt.cap(),\\n            baseTokenBalance: ssParams[4],\\n            lastPrice: 0,\\n            rate: ssParams[0],\\n            publisherAddress: publisherAddress,\\n            blockDeployed: block.number,\\n            vestingEndBlock: block.number + ssParams[3],\\n            vestingAmount: ssParams[2],\\n            vestingLastBlock: block.number,\\n            vestingAmountSoFar: 0\\n        });\\n        emit VestingCreated(\\n            datatokenAddress,\\n            publisherAddress,\\n            _datatokens[datatokenAddress].vestingEndBlock,\\n            _datatokens[datatokenAddress].vestingAmount\\n        );\\n\\n        _notifyFinalize(datatokenAddress, ssParams[1]);\\n\\n        return (true);\\n    }\\n\\n    //public getters\\n    /**\\n     *  Returns  (total vesting amount + token released from the contract when adding liquidity)\\n     * @param datatokenAddress - datatokenAddress\\n\\n     */\\n\\n    function getDatatokenCirculatingSupply(address datatokenAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (!_datatokens[datatokenAddress].bound) return (0);\\n        return (_datatokens[datatokenAddress].datatokenCap -\\n            _datatokens[datatokenAddress].datatokenBalance);\\n    }\\n\\n    /**\\n     *  Returns actual dts in circulation (vested token withdrawn from the contract +\\n         token released from the contract when adding liquidity)\\n     * @param datatokenAddress - datatokenAddress\\n\\n     */\\n\\n    function getDatatokenCurrentCirculatingSupply(address datatokenAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (!_datatokens[datatokenAddress].bound) return (0);\\n        return (_datatokens[datatokenAddress].datatokenCap -\\n            _datatokens[datatokenAddress].datatokenBalance -\\n            _datatokens[datatokenAddress].vestingAmountSoFar);\\n    }\\n\\n    /**\\n     *  Returns publisher address\\n     * @param datatokenAddress - datatokenAddress\\n\\n     */\\n\\n    function getPublisherAddress(address datatokenAddress)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (!_datatokens[datatokenAddress].bound) return (address(0));\\n        return (_datatokens[datatokenAddress].publisherAddress);\\n    }\\n\\n    /**\\n     *  Returns baseToken address\\n     * @param datatokenAddress - datatokenAddress\\n\\n     */\\n\\n    function getBaseTokenAddress(address datatokenAddress)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (!_datatokens[datatokenAddress].bound) return (address(0));\\n        return (_datatokens[datatokenAddress].baseTokenAddress);\\n    }\\n\\n    /**\\n     *  Returns pool address\\n     * @param datatokenAddress - datatokenAddress\\n\\n     */\\n\\n    function getPoolAddress(address datatokenAddress)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (!_datatokens[datatokenAddress].bound) return (address(0));\\n        return (_datatokens[datatokenAddress].poolAddress);\\n    }\\n\\n    /**\\n     *  Returns baseToken balance in the contract\\n     * @param datatokenAddress - datatokenAddress\\n\\n     */\\n    function getBaseTokenBalance(address datatokenAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (!_datatokens[datatokenAddress].bound) return (0);\\n        return (_datatokens[datatokenAddress].baseTokenBalance);\\n    }\\n\\n    /**\\n     *  Returns datatoken balance in the contract\\n     * @param datatokenAddress - datatokenAddress\\n\\n     */\\n\\n    function getDatatokenBalance(address datatokenAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (!_datatokens[datatokenAddress].bound) return (0);\\n        return (_datatokens[datatokenAddress].datatokenBalance);\\n    }\\n\\n    /**\\n     *  Returns last vesting block\\n     * @param datatokenAddress - datatokenAddress\\n\\n     */\\n\\n    function getvestingEndBlock(address datatokenAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (!_datatokens[datatokenAddress].bound) return (0);\\n        return (_datatokens[datatokenAddress].vestingEndBlock);\\n    }\\n\\n    /**\\n     *  Returns total vesting amount\\n     * @param datatokenAddress - datatokenAddress\\n\\n     */\\n\\n    function getvestingAmount(address datatokenAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (!_datatokens[datatokenAddress].bound) return (0);\\n        return (_datatokens[datatokenAddress].vestingAmount);\\n    }\\n\\n    /**\\n     *  Returns last block when some vesting tokens were collected\\n     * @param datatokenAddress - datatokenAddress\\n\\n     */\\n\\n    function getvestingLastBlock(address datatokenAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (!_datatokens[datatokenAddress].bound) return (0);\\n        return (_datatokens[datatokenAddress].vestingLastBlock);\\n    }\\n\\n    /**\\n     *  Returns amount of vested tokens that have been withdrawn from the contract so far\\n     * @param datatokenAddress - datatokenAddress\\n\\n     */\\n\\n    function getvestingAmountSoFar(address datatokenAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (!_datatokens[datatokenAddress].bound) return (0);\\n        return (_datatokens[datatokenAddress].vestingAmountSoFar);\\n    }\\n\\n    //called by pool to confirm that we can stake a token (add pool liquidty). If true, pool will call Stake function\\n    function canStake(address datatokenAddress, uint256 amount)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        require(\\n            msg.sender == _datatokens[datatokenAddress].poolAddress,\\n            \\\"ERR: Only pool can call this\\\"\\n        );\\n        if (!_datatokens[datatokenAddress].bound) return (false);\\n\\n        //check balances. Make sure that we have enough to vest\\n        if (\\n            _datatokens[datatokenAddress].datatokenBalance >=\\n            (amount +\\n                (_datatokens[datatokenAddress].vestingAmount -\\n                    _datatokens[datatokenAddress].vestingAmountSoFar))\\n        ) return (true);\\n        return (false);\\n    }\\n\\n    //called by pool so 1ss will stake a token (add pool liquidty).\\n    // Function only needs to approve the amount to be spent by the pool, pool will do the rest\\n    function Stake(address datatokenAddress, uint256 amount)\\n        external\\n        nonReentrant\\n    {\\n        if (!_datatokens[datatokenAddress].bound) return;\\n        require(\\n            msg.sender == _datatokens[datatokenAddress].poolAddress,\\n            \\\"ERR: Only pool can call this\\\"\\n        );\\n        bool ok = canStake(datatokenAddress, amount);\\n        if (!ok) return;\\n        IERC20 dt = IERC20(datatokenAddress);\\n        dt.safeIncreaseAllowance(\\n            _datatokens[datatokenAddress].poolAddress,\\n            amount\\n        );\\n        _datatokens[datatokenAddress].datatokenBalance -= amount;\\n    }\\n\\n    //called by pool to confirm that we can stake a token (add pool liquidty). If true, pool will call Unstake function\\n    function canUnStake(address datatokenAddress, uint256 lptIn)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        //TO DO\\n        if (!_datatokens[datatokenAddress].bound) return (false);\\n        require(\\n            msg.sender == _datatokens[datatokenAddress].poolAddress,\\n            \\\"ERR: Only pool can call this\\\"\\n        );\\n\\n        // we check LPT balance TODO: review this part\\n        if (IERC20(msg.sender).balanceOf(address(this)) >= lptIn) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    //called by pool so 1ss will unstake a token (remove pool liquidty).\\n    // In our case the balancer pool will handle all, this is just a notifier so 1ss can handle internal kitchen\\n    function UnStake(\\n        address datatokenAddress,\\n        uint256 dtAmountIn,\\n        uint256 poolAmountOut\\n    ) external nonReentrant {\\n        if (!_datatokens[datatokenAddress].bound) return;\\n        require(\\n            msg.sender == _datatokens[datatokenAddress].poolAddress,\\n            \\\"ERR: Only pool can call this\\\"\\n        );\\n        bool ok = canUnStake(datatokenAddress, poolAmountOut);\\n        if (!ok) return;\\n        _datatokens[datatokenAddress].datatokenBalance += dtAmountIn;\\n    }\\n\\n    //called by the pool (or by us) when we should finalize the pool\\n    function _notifyFinalize(address datatokenAddress, uint256 decimals)\\n        internal\\n    {\\n        if (!_datatokens[datatokenAddress].bound) return;\\n        if (_datatokens[datatokenAddress].poolFinalized) return;\\n        _datatokens[datatokenAddress].poolFinalized = true;\\n        uint256 baseTokenWeight = 5 * BASE; //pool weight: 50-50\\n        uint256 datatokenWeight = 5 * BASE; //pool weight: 50-50\\n        uint256 baseTokenAmount = _datatokens[datatokenAddress]\\n            .baseTokenBalance;\\n        //given the price, compute datatokenAmount\\n\\n        uint256 datatokenAmount = (10**(18 - decimals))*_datatokens[datatokenAddress].rate *\\n            baseTokenAmount *\\n            datatokenWeight /\\n            baseTokenWeight /\\n            BASE;\\n\\n        //substract\\n        _datatokens[datatokenAddress].baseTokenBalance -= baseTokenAmount;\\n        _datatokens[datatokenAddress].datatokenBalance -= datatokenAmount;\\n        //approve the tokens and amounts\\n        IERC20 dt = IERC20(datatokenAddress);\\n        dt.safeIncreaseAllowance(\\n            _datatokens[datatokenAddress].poolAddress,\\n            datatokenAmount\\n        );\\n        IERC20 dtBase = IERC20(_datatokens[datatokenAddress].baseTokenAddress);\\n        dtBase.safeIncreaseAllowance(\\n            _datatokens[datatokenAddress].poolAddress,\\n            baseTokenAmount\\n        );\\n        \\n        \\n        // call the pool, bind the tokens, set the price, finalize pool\\n        IPool pool = IPool(_datatokens[datatokenAddress].poolAddress);\\n        pool.setup(\\n            datatokenAddress,\\n            datatokenAmount,\\n            datatokenWeight,\\n            _datatokens[datatokenAddress].baseTokenAddress,\\n            baseTokenAmount,\\n            baseTokenWeight\\n        );\\n        // send 50% of the pool shares back to the publisher\\n        IERC20 lPTokens = IERC20(_datatokens[datatokenAddress].poolAddress);\\n        uint256 lpBalance = lPTokens.balanceOf(address(this));\\n        //  uint256 balanceToTransfer = lpBalance.div(2);\\n        lPTokens.safeTransfer(\\n            _datatokens[datatokenAddress].publisherAddress,\\n            lpBalance.div(2)\\n        );\\n    }\\n\\n    /**\\n     *  Get available vesting now\\n     * param datatokenAddress - datatokenAddress\\n\\n     */\\n    function getAvailableVesting(address)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        // see https://github.com/oceanprotocol/contracts/issues/603\\n        return 0;\\n    }\\n\\n    /**\\n     *  Send available vested tokens to the publisher address, can be called by anyone\\n     * @param datatokenAddress - datatokenAddress\\n\\n     */\\n    // called by vester to get datatokens\\n    function getVesting(address datatokenAddress) external nonReentrant {\\n        require(_datatokens[datatokenAddress].bound, \\\"ERR:Invalid datatoken\\\");\\n        uint256 amount = getAvailableVesting(datatokenAddress);\\n        if (\\n            amount > 0 &&\\n            _datatokens[datatokenAddress].datatokenBalance >= amount\\n        ) {\\n            IERC20Template dt = IERC20Template(datatokenAddress);\\n            _datatokens[datatokenAddress].vestingLastBlock = block.number;\\n            _datatokens[datatokenAddress].datatokenBalance -= amount;\\n            _datatokens[datatokenAddress].vestingAmountSoFar += amount;\\n            address collector = dt.getPaymentCollector();\\n            emit Vesting(\\n                datatokenAddress,\\n                collector,\\n                msg.sender,\\n                amount\\n            );\\n            dt.transfer(\\n                collector,\\n                amount\\n            );\\n            \\n        }\\n    }\\n\\n    /**\\n     *  Change pool fee\\n     * @param datatokenAddress - datatokenAddress\\n     * @param poolAddress - poolAddress\\n     * @param swapFee - new fee\\n\\n     */\\n    // called by ERC20 Deployer of datatoken\\n    function setPoolSwapFee(\\n        address datatokenAddress,\\n        address poolAddress,\\n        uint256 swapFee\\n    ) external onlyOwner(datatokenAddress) nonReentrant {\\n        require(_datatokens[datatokenAddress].bound, \\\"Invalid datatoken\\\");\\n        require(poolAddress != address(0), \\\"Invalid poolAddress\\\");\\n        IPool bpool = IPool(poolAddress);\\n        require(\\n            bpool.getController() == address(this),\\n            \\\"We are not the pool controller\\\"\\n        );\\n        //check if the tokens are bound\\n        require(\\n            bpool.getDatatokenAddress() == datatokenAddress,\\n            \\\"Datatoken address missmatch\\\"\\n        );\\n        bpool.setSwapFee(swapFee);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISideStaking.sol\": {\r\n      \"content\": \"// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.12;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\ninterface ISideStaking {\\n\\n\\n    function newDatatokenCreated(\\n        address datatokenAddress,\\n        address baseTokenAddress,\\n        address poolAddress,\\n        address publisherAddress,\\n        uint256[] calldata ssParams\\n    ) external returns (bool);\\n\\n    function getDatatokenCirculatingSupply(address datatokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPublisherAddress(address datatokenAddress)\\n        external\\n        view\\n        returns (address);\\n\\n    function getBaseTokenAddress(address datatokenAddress)\\n        external\\n        view\\n        returns (address);\\n\\n    function getPoolAddress(address datatokenAddress)\\n        external\\n        view\\n        returns (address);\\n\\n    function getBaseTokenBalance(address datatokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getDatatokenBalance(address datatokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getvestingEndBlock(address datatokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getvestingAmount(address datatokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getvestingLastBlock(address datatokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getvestingAmountSoFar(address datatokenAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n\\n\\n    function canStake(\\n        address datatokenAddress,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    function Stake(\\n        address datatokenAddress,\\n        uint256 amount\\n    ) external;\\n\\n    function canUnStake(\\n        address datatokenAddress,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    function UnStake(\\n        address datatokenAddress,\\n        uint256 amount,\\n        uint256 poolAmountIn\\n    ) external;\\n\\n    function getId() pure external returns (uint8);\\n\\n  \\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Template.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\ninterface IERC20Template {\\n    struct RolesERC20 {\\n        bool minter;\\n        bool feeManager;\\n    }\\n    struct providerFee{\\n        address providerFeeAddress;\\n        address providerFeeToken; // address of the token marketplace wants to add fee on top\\n        uint256 providerFeeAmount; // amount to be transfered to marketFeeCollector\\n        uint8 v; // v of provider signed message\\n        bytes32 r; // r of provider signed message\\n        bytes32 s; // s of provider signed message\\n        uint256 validUntil; //validity expresses in unix timestamp\\n        bytes providerData; //data encoded by provider\\n    }\\n    struct consumeMarketFee{\\n        address consumeMarketFeeAddress;\\n        address consumeMarketFeeToken; // address of the token marketplace wants to add fee on top\\n        uint256 consumeMarketFeeAmount; // amount to be transfered to marketFeeCollector\\n    }\\n    function initialize(\\n        string[] calldata strings_,\\n        address[] calldata addresses_,\\n        address[] calldata factoryAddresses_,\\n        uint256[] calldata uints_,\\n        bytes[] calldata bytes_\\n    ) external returns (bool);\\n    \\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function cap() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function mint(address account, uint256 value) external;\\n    \\n    function isMinter(address account) external view returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permissions(address user)\\n        external\\n        view\\n        returns (RolesERC20 memory);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function cleanFrom721() external;\\n\\n    function deployPool(\\n        uint256[] memory ssParams,\\n        uint256[] memory swapFees,\\n        address[] memory addresses \\n    ) external returns (address);\\n\\n    function createFixedRate(\\n        address fixedPriceAddress,\\n        address[] memory addresses,\\n        uint[] memory uints\\n    ) external returns (bytes32);\\n    function createDispenser(\\n        address _dispenser,\\n        uint256 maxTokens,\\n        uint256 maxBalance,\\n        bool withMint,\\n        address allowedSwapper) external;\\n        \\n    function getPublishingMarketFee() external view returns (address , address, uint256);\\n    function setPublishingMarketFee(\\n        address _publishMarketFeeAddress, address _publishMarketFeeToken, uint256 _publishMarketFeeAmount\\n    ) external;\\n\\n     function startOrder(\\n        address consumer,\\n        uint256 serviceIndex,\\n        providerFee calldata _providerFee,\\n        consumeMarketFee calldata _consumeMarketFee\\n     ) external;\\n\\n     function reuseOrder(\\n        bytes32 orderTxId,\\n        providerFee calldata _providerFee\\n    ) external;\\n  \\n    function burn(uint256 amount) external;\\n    function burnFrom(address account, uint256 amount) external;\\n    function getERC721Address() external view returns (address);\\n    function isERC20Deployer(address user) external view returns(bool);\\n    function getPools() external view returns(address[] memory);\\n    struct fixedRate{\\n        address contractAddress;\\n        bytes32 id;\\n    }\\n    function getFixedRates() external view returns(fixedRate[] memory);\\n    function getDispensers() external view returns(address[] memory);\\n    function getId() pure external returns (uint8);\\n    function getPaymentCollector() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC721Template.sol\": {\r\n      \"content\": \"pragma solidity 0.8.12;\\n// Copyright BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\n\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Template {\\n    \\n    enum RolesType {\\n        Manager,\\n        DeployERC20,\\n        UpdateMetadata,\\n        Store\\n    }\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n    event MetadataCreated(\\n        address indexed createdBy,\\n        uint8 state,\\n        string decryptorUrl,\\n        bytes flags,\\n        bytes data,\\n        string metaDataDecryptorAddress,\\n        uint256 timestamp,\\n        uint256 blockNumber\\n    );\\n    event MetadataUpdated(\\n        address indexed updatedBy,\\n        uint8 state,\\n        string decryptorUrl,\\n        bytes flags,\\n        bytes data,\\n        string metaDataDecryptorAddress,\\n        uint256 timestamp,\\n        uint256 blockNumber\\n    );\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function isERC20Deployer(address acount) external view returns (bool);\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, \\n     * it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, \\n     * it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, \\n     * it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    // function safeTransferFrom(\\n    //     address from,\\n    //     address to,\\n    //     uint256 tokenId,\\n    //     bytes calldata data\\n    // ) external;\\n    function transferFrom(address from, address to) external;\\n\\n    function initialize(\\n        address admin,\\n        string calldata name,\\n        string calldata symbol,\\n        address erc20Factory,\\n        address additionalERC20Deployer,\\n        address additionalMetaDataUpdater,\\n        string calldata tokenURI,\\n        bool transferable\\n    ) external returns (bool);\\n\\n     struct Roles {\\n        bool manager;\\n        bool deployERC20;\\n        bool updateMetadata;\\n        bool store;\\n    }\\n\\n    struct metaDataProof {\\n        address validatorAddress;\\n        uint8 v; // v of validator signed message\\n        bytes32 r; // r of validator signed message\\n        bytes32 s; // s of validator signed message\\n    }\\n    function getPermissions(address user) external view returns (Roles memory);\\n\\n    function setDataERC20(bytes32 _key, bytes calldata _value) external;\\n    function setMetaData(uint8 _metaDataState, string calldata _metaDataDecryptorUrl\\n        , string calldata _metaDataDecryptorAddress, bytes calldata flags, \\n        bytes calldata data,bytes32 _metaDataHash, metaDataProof[] memory _metadataProofs) external;\\n    function getMetaData() external view returns (string memory, string memory, uint8, bool);\\n\\n    function createERC20(\\n        uint256 _templateIndex,\\n        string[] calldata strings,\\n        address[] calldata addresses,\\n        uint256[] calldata uints,\\n        bytes[] calldata bytess\\n    ) external returns (address);\\n\\n\\n    function removeFromCreateERC20List(address _allowedAddress) external;\\n    function addToCreateERC20List(address _allowedAddress) external;\\n    function addToMetadataList(address _allowedAddress) external;\\n    function removeFromMetadataList(address _allowedAddress) external;\\n    function getId() pure external returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.12;\\n// Copyright Balancer, BigchainDB GmbH and Ocean Protocol contributors\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n// Code is Apache-2.0 and docs are CC-BY-4.0\\n\\ninterface IPool {\\n    function getDatatokenAddress() external view returns (address);\\n\\n    function getBaseTokenAddress() external view returns (address);\\n\\n    function getController() external view returns (address);\\n\\n    function setup(\\n        address datatokenAddress,\\n        uint256 datatokenAmount,\\n        uint256 datatokennWeight,\\n        address baseTokenAddress,\\n        uint256 baseTokenAmount,\\n        uint256 baseTokenWeight\\n    ) external;\\n\\n    function swapExactAmountIn(\\n        address[3] calldata tokenInOutMarket, //[tokenIn,tokenOut,marketFeeAddress]\\n        uint256[4] calldata amountsInOutMaxFee //[tokenAmountIn,minAmountOut,maxPrice,_swapMarketFee]\\n    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\\n\\n    function swapExactAmountOut(\\n        address[3] calldata tokenInOutMarket, // [tokenIn,tokenOut,marketFeeAddress]\\n        uint256[4] calldata amountsInOutMaxFee // [maxAmountIn,tokenAmountOut,maxPrice,_swapMarketFee]\\n    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\\n\\n    function getAmountInExactOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 _consumeMarketSwapFee\\n    ) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    function getAmountOutExactIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 _consumeMarketSwapFee\\n    ) external view returns (uint256, uint256, uint256, uint256, uint256);\\n\\n    function setSwapFee(uint256 swapFee) external;\\n    function getId() pure external returns (uint8);\\n\\n    function exitswapPoolAmountIn(\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external returns (uint256 tokenAmountOut);\\n    \\n    function joinswapExternAmountIn(\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external returns (uint256 poolAmountOut);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./ERC721/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ERC721/Address.sol\": {\r\n      \"content\": \"\\npragma solidity 0.8.12;\\n// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.0.0\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"publisherAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountVested\",\"type\":\"uint256\"}],\"name\":\"Vesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"publisherAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingEndBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVestingAmount\",\"type\":\"uint256\"}],\"name\":\"VestingCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dtAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"canStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lptIn\",\"type\":\"uint256\"}],\"name\":\"canUnStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getAvailableVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"}],\"name\":\"getBaseTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"}],\"name\":\"getBaseTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"}],\"name\":\"getDatatokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"}],\"name\":\"getDatatokenCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"}],\"name\":\"getDatatokenCurrentCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"}],\"name\":\"getPublisherAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"}],\"name\":\"getVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"}],\"name\":\"getvestingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"}],\"name\":\"getvestingAmountSoFar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"}],\"name\":\"getvestingEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"}],\"name\":\"getvestingLastBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"publisherAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ssParams\",\"type\":\"uint256[]\"}],\"name\":\"newDatatokenCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"datatokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"setPoolSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SideStaking", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004344d4bc29531db736378e9a3da85bf1eff0cb22", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}