{"SourceCode": "pragma solidity 0.4.23;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n  public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n  public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\nlibrary ArrayUtils {\r\n\r\n  /**\r\n   * Replace bytes in an array with bytes in another array, guarded by a bitmask\r\n   * Efficiency of this function is a bit unpredictable because of the EVM's word-specific model (arrays under 32 bytes will be slower)\r\n   *\r\n   * @dev Mask must be the size of the byte array. A nonzero byte means the byte array can be changed.\r\n   * @param array The original array\r\n   * @param desired The target array\r\n   * @param mask The mask specifying which bits can be changed\r\n   * @return The updated byte array (the parameter will be modified inplace)\r\n   */\r\n  function guardedArrayReplace(bytes memory array, bytes memory desired, bytes memory mask)\r\n  internal\r\n  pure\r\n  {\r\n    require(array.length == desired.length);\r\n    require(array.length == mask.length);\r\n\r\n    uint words = array.length / 0x20;\r\n    uint index = words * 0x20;\r\n    assert(index / 0x20 == words);\r\n    uint i;\r\n\r\n    for (i = 0; i < words; i++) {\r\n      /* Conceptually: array[i] = (!mask[i] && array[i]) || (mask[i] && desired[i]), bitwise in word chunks. */\r\n      assembly {\r\n        let commonIndex := mul(0x20, add(1, i))\r\n        let maskValue := mload(add(mask, commonIndex))\r\n        mstore(add(array, commonIndex), or(and(not(maskValue), mload(add(array, commonIndex))), and(maskValue, mload(add(desired, commonIndex)))))\r\n      }\r\n    }\r\n\r\n    /* Deal with the last section of the byte array. */\r\n    if (words > 0) {\r\n      /* This overlaps with bytes already set but is still more efficient than iterating through each of the remaining bytes individually. */\r\n      i = words;\r\n      assembly {\r\n        let commonIndex := mul(0x20, add(1, i))\r\n        let maskValue := mload(add(mask, commonIndex))\r\n        mstore(add(array, commonIndex), or(and(not(maskValue), mload(add(array, commonIndex))), and(maskValue, mload(add(desired, commonIndex)))))\r\n      }\r\n    } else {\r\n      /* If the byte array is shorter than a word, we must unfortunately do the whole thing bytewise.\r\n         (bounds checks could still probably be optimized away in assembly, but this is a rare case) */\r\n      for (i = index; i < array.length; i++) {\r\n        array[i] = ((mask[i] ^ 0xff) & array[i]) | (mask[i] & desired[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test if two arrays are equal\r\n   * Source: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\r\n   *\r\n   * @dev Arrays must be of equal length, otherwise will return false\r\n   * @param a First array\r\n   * @param b Second array\r\n   * @return Whether or not all bytes in the arrays are equal\r\n   */\r\n  function arrayEq(bytes memory a, bytes memory b)\r\n  internal\r\n  pure\r\n  returns (bool)\r\n  {\r\n    bool success = true;\r\n\r\n    assembly {\r\n      let length := mload(a)\r\n\r\n    // if lengths don't match the arrays are not equal\r\n      switch eq(length, mload(b))\r\n      case 1 {\r\n      // cb is a circuit breaker in the for loop since there's\r\n      //  no said feature for inline assembly loops\r\n      // cb = 1 - don't breaker\r\n      // cb = 0 - break\r\n        let cb := 1\r\n\r\n        let mc := add(a, 0x20)\r\n        let end := add(mc, length)\r\n\r\n        for {\r\n          let cc := add(b, 0x20)\r\n        // the next line is the loop condition:\r\n        // while(uint(mc < end) + cb == 2)\r\n        } eq(add(lt(mc, end), cb), 2) {\r\n          mc := add(mc, 0x20)\r\n          cc := add(cc, 0x20)\r\n        } {\r\n        // if any of these checks fails then arrays are not equal\r\n          if iszero(eq(mload(mc), mload(cc))) {\r\n          // unsuccess:\r\n            success := 0\r\n            cb := 0\r\n          }\r\n        }\r\n      }\r\n      default {\r\n      // unsuccess:\r\n        success := 0\r\n      }\r\n    }\r\n\r\n    return success;\r\n  }\r\n\r\n  /**\r\n   * Unsafe write byte array into a memory location\r\n   *\r\n   * @param index Memory location\r\n   * @param source Byte array to write\r\n   * @return End memory index\r\n   */\r\n  function unsafeWriteBytes(uint index, bytes source)\r\n  internal\r\n  pure\r\n  returns (uint)\r\n  {\r\n    if (source.length > 0) {\r\n      assembly {\r\n        let length := mload(source)\r\n        let end := add(source, add(0x20, length))\r\n        let arrIndex := add(source, 0x20)\r\n        let tempIndex := index\r\n        for { } eq(lt(arrIndex, end), 1) {\r\n          arrIndex := add(arrIndex, 0x20)\r\n          tempIndex := add(tempIndex, 0x20)\r\n        } {\r\n          mstore(tempIndex, mload(arrIndex))\r\n        }\r\n        index := add(index, length)\r\n      }\r\n    }\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Unsafe write address into a memory location\r\n   *\r\n   * @param index Memory location\r\n   * @param source Address to write\r\n   * @return End memory index\r\n   */\r\n  function unsafeWriteAddress(uint index, address source)\r\n  internal\r\n  pure\r\n  returns (uint)\r\n  {\r\n    uint conv = uint(source) << 0x60;\r\n    assembly {\r\n      mstore(index, conv)\r\n      index := add(index, 0x14)\r\n    }\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Unsafe write uint into a memory location\r\n   *\r\n   * @param index Memory location\r\n   * @param source uint to write\r\n   * @return End memory index\r\n   */\r\n  function unsafeWriteUint(uint index, uint source)\r\n  internal\r\n  pure\r\n  returns (uint)\r\n  {\r\n    assembly {\r\n      mstore(index, source)\r\n      index := add(index, 0x20)\r\n    }\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Unsafe write uint8 into a memory location\r\n   *\r\n   * @param index Memory location\r\n   * @param source uint8 to write\r\n   * @return End memory index\r\n   */\r\n  function unsafeWriteUint8(uint index, uint8 source)\r\n  internal\r\n  pure\r\n  returns (uint)\r\n  {\r\n    assembly {\r\n      mstore8(index, source)\r\n      index := add(index, 0x1)\r\n    }\r\n    return index;\r\n  }\r\n\r\n}\r\n\r\ncontract ReentrancyGuarded {\r\n\r\n  bool reentrancyLock = false;\r\n\r\n  /* Prevent a contract function from being reentrant-called. */\r\n  modifier reentrancyGuard {\r\n    if (reentrancyLock) {\r\n      revert();\r\n    }\r\n    reentrancyLock = true;\r\n    _;\r\n    reentrancyLock = false;\r\n  }\r\n\r\n}\r\n\r\ncontract TokenRecipient {\r\n  event ReceivedEther(address indexed sender, uint amount);\r\n  event ReceivedTokens(address indexed from, uint256 value, address indexed token, bytes extraData);\r\n\r\n  /**\r\n   * @dev Receive tokens and generate a log event\r\n   * @param from Address from which to transfer tokens\r\n   * @param value Amount of tokens to transfer\r\n   * @param token Address of token\r\n   * @param extraData Additional data to log\r\n   */\r\n  function receiveApproval(address from, uint256 value, address token, bytes extraData) public {\r\n    ERC20 t = ERC20(token);\r\n    require(t.transferFrom(from, this, value));\r\n    emit ReceivedTokens(from, value, token, extraData);\r\n  }\r\n\r\n  /**\r\n   * @dev Receive Ether and generate a log event\r\n   */\r\n  function () payable public {\r\n    emit ReceivedEther(msg.sender, msg.value);\r\n  }\r\n}\r\n\r\ncontract ExchangeCore is ReentrancyGuarded, Ownable {\r\n\r\n  /* The token used to pay exchange fees. */\r\n  ERC20 public exchangeToken;\r\n\r\n  /* User registry. */\r\n  ProxyRegistry public registry;\r\n\r\n  /* Token transfer proxy. */\r\n  TokenTransferProxy public tokenTransferProxy;\r\n\r\n  /* Cancelled / finalized orders, by hash. */\r\n  mapping(bytes32 => bool) public cancelledOrFinalized;\r\n\r\n  /* Orders verified by on-chain approval (alternative to ECDSA signatures so that smart contracts can place orders directly). */\r\n  mapping(bytes32 => bool) public approvedOrders;\r\n\r\n  /* For split fee orders, minimum required protocol maker fee, in basis points. Paid to owner (who can change it). */\r\n  uint public minimumMakerProtocolFee = 0;\r\n\r\n  /* For split fee orders, minimum required protocol taker fee, in basis points. Paid to owner (who can change it). */\r\n  uint public minimumTakerProtocolFee = 0;\r\n\r\n  /* Recipient of protocol fees. */\r\n  address public protocolFeeRecipient;\r\n\r\n  /* Fee method: protocol fee or split fee. */\r\n  enum FeeMethod { ProtocolFee, SplitFee }\r\n\r\n  /* Inverse basis point. */\r\n  uint public constant INVERSE_BASIS_POINT = 10000;\r\n\r\n  /* An ECDSA signature. */\r\n  struct Sig {\r\n    /* v parameter */\r\n    uint8 v;\r\n    /* r parameter */\r\n    bytes32 r;\r\n    /* s parameter */\r\n    bytes32 s;\r\n  }\r\n\r\n  /* An order on the exchange. */\r\n  struct Order {\r\n    /* Exchange address, intended as a versioning mechanism. */\r\n    address exchange;\r\n    /* Order maker address. */\r\n    address maker;\r\n    /* Order taker address, if specified. */\r\n    address taker;\r\n    /* Maker relayer fee of the order, unused for taker order. */\r\n    uint makerRelayerFee;\r\n    /* Taker relayer fee of the order, or maximum taker fee for a taker order. */\r\n    uint takerRelayerFee;\r\n    /* Maker protocol fee of the order, unused for taker order. */\r\n    uint makerProtocolFee;\r\n    /* Taker protocol fee of the order, or maximum taker fee for a taker order. */\r\n    uint takerProtocolFee;\r\n    /* Order fee recipient or zero address for taker order. */\r\n    address feeRecipient;\r\n    /* Fee method (protocol token or split fee). */\r\n    FeeMethod feeMethod;\r\n    /* Side (buy/sell). */\r\n    SaleKindInterface.Side side;\r\n    /* Kind of sale. */\r\n    SaleKindInterface.SaleKind saleKind;\r\n    /* Target. */\r\n    address target;\r\n    /* HowToCall. */\r\n    AuthenticatedProxy.HowToCall howToCall;\r\n/* Calldata. */\r\nbytes calldata;\r\n/* Calldata replacement pattern, or an empty byte array for no replacement. */\r\nbytes replacementPattern;\r\n/* Static call target, zero-address for no static call. */\r\naddress staticTarget;\r\n/* Static call extra data. */\r\nbytes staticExtradata;\r\n/* Token used to pay for the order, or the zero-address as a sentinel value for Ether. */\r\naddress paymentToken;\r\n/* Base price of the order (in paymentTokens). */\r\nuint basePrice;\r\n/* Auction extra parameter - minimum bid increment for English auctions, starting/ending price difference. */\r\nuint extra;\r\n/* Listing timestamp. */\r\nuint listingTime;\r\n/* Expiration timestamp - 0 for no expiry. */\r\nuint expirationTime;\r\n/* Order salt, used to prevent duplicate hashes. */\r\nuint salt;\r\n}\r\n\r\nevent OrderApprovedPartOne    (bytes32 indexed hash, address exchange, address indexed maker, address taker, uint makerRelayerFee, uint takerRelayerFee, uint makerProtocolFee, uint takerProtocolFee, address indexed feeRecipient, FeeMethod feeMethod, SaleKindInterface.Side side, SaleKindInterface.SaleKind saleKind, address target);\r\nevent OrderApprovedPartTwo    (bytes32 indexed hash, AuthenticatedProxy.HowToCall howToCall, bytes calldata, bytes replacementPattern, address staticTarget, bytes staticExtradata, address paymentToken, uint basePrice, uint extra, uint listingTime, uint expirationTime, uint salt, bool orderbookInclusionDesired);\r\nevent OrderCancelled          (bytes32 indexed hash);\r\nevent OrdersMatched           (bytes32 buyHash, bytes32 sellHash, address indexed maker, address indexed taker, uint price, bytes32 indexed metadata);\r\n\r\n/**\r\n * @dev Change the minimum maker fee paid to the protocol (owner only)\r\n * @param newMinimumMakerProtocolFee New fee to set in basis points\r\n */\r\nfunction changeMinimumMakerProtocolFee(uint newMinimumMakerProtocolFee)\r\npublic\r\nonlyOwner\r\n{\r\nminimumMakerProtocolFee = newMinimumMakerProtocolFee;\r\n}\r\n\r\n/**\r\n * @dev Change the minimum taker fee paid to the protocol (owner only)\r\n * @param newMinimumTakerProtocolFee New fee to set in basis points\r\n */\r\nfunction changeMinimumTakerProtocolFee(uint newMinimumTakerProtocolFee)\r\npublic\r\nonlyOwner\r\n{\r\nminimumTakerProtocolFee = newMinimumTakerProtocolFee;\r\n}\r\n\r\n/**\r\n * @dev Change the protocol fee recipient (owner only)\r\n * @param newProtocolFeeRecipient New protocol fee recipient address\r\n */\r\nfunction changeProtocolFeeRecipient(address newProtocolFeeRecipient)\r\npublic\r\nonlyOwner\r\n{\r\nprotocolFeeRecipient = newProtocolFeeRecipient;\r\n}\r\n\r\n/**\r\n * @dev Transfer tokens\r\n * @param token Token to transfer\r\n * @param from Address to charge fees\r\n * @param to Address to receive fees\r\n * @param amount Amount of protocol tokens to charge\r\n */\r\nfunction transferTokens(address token, address from, address to, uint amount)\r\ninternal\r\n{\r\nif (amount > 0) {\r\nrequire(tokenTransferProxy.transferFrom(token, from, to, amount));\r\n}\r\n}\r\n\r\n/**\r\n * @dev Charge a fee in protocol tokens\r\n * @param from Address to charge fees\r\n * @param to Address to receive fees\r\n * @param amount Amount of protocol tokens to charge\r\n */\r\nfunction chargeProtocolFee(address from, address to, uint amount)\r\ninternal\r\n{\r\ntransferTokens(exchangeToken, from, to, amount);\r\n}\r\n\r\n/**\r\n * @dev Execute a STATICCALL (introduced with Ethereum Metropolis, non-state-modifying external call)\r\n * @param target Contract to call\r\n * @param calldata Calldata (appended to extradata)\r\n * @param extradata Base data for STATICCALL (probably function selector and argument encoding)\r\n * @return The result of the call (success or failure)\r\n */\r\nfunction staticCall(address target, bytes memory calldata, bytes memory extradata)\r\npublic\r\nview\r\nreturns (bool result)\r\n{\r\nbytes memory combined = new bytes(calldata.length + extradata.length);\r\nuint index;\r\nassembly {\r\nindex := add(combined, 0x20)\r\n}\r\nindex = ArrayUtils.unsafeWriteBytes(index, extradata);\r\nArrayUtils.unsafeWriteBytes(index, calldata);\r\nassembly {\r\nresult := staticcall(gas, target, add(combined, 0x20), mload(combined), mload(0x40), 0)\r\n}\r\nreturn result;\r\n}\r\n\r\n/**\r\n * Calculate size of an order struct when tightly packed\r\n *\r\n * @param order Order to calculate size of\r\n * @return Size in bytes\r\n */\r\nfunction sizeOf(Order memory order)\r\ninternal\r\npure\r\nreturns (uint)\r\n{\r\nreturn ((0x14 * 7) + (0x20 * 9) + 4 + order.calldata.length + order.replacementPattern.length + order.staticExtradata.length);\r\n}\r\n\r\n/**\r\n * @dev Hash an order, returning the canonical order hash, without the message prefix\r\n * @param order Order to hash\r\n * @return Hash of order\r\n */\r\nfunction hashOrder(Order memory order)\r\ninternal\r\npure\r\nreturns (bytes32 hash)\r\n{\r\n/* Unfortunately abi.encodePacked doesn't work here, stack size constraints. */\r\nuint size = sizeOf(order);\r\nbytes memory array = new bytes(size);\r\nuint index;\r\nassembly {\r\nindex := add(array, 0x20)\r\n}\r\nindex = ArrayUtils.unsafeWriteAddress(index, order.exchange);\r\nindex = ArrayUtils.unsafeWriteAddress(index, order.maker);\r\nindex = ArrayUtils.unsafeWriteAddress(index, order.taker);\r\nindex = ArrayUtils.unsafeWriteUint(index, order.makerRelayerFee);\r\nindex = ArrayUtils.unsafeWriteUint(index, order.takerRelayerFee);\r\nindex = ArrayUtils.unsafeWriteUint(index, order.makerProtocolFee);\r\nindex = ArrayUtils.unsafeWriteUint(index, order.takerProtocolFee);\r\nindex = ArrayUtils.unsafeWriteAddress(index, order.feeRecipient);\r\nindex = ArrayUtils.unsafeWriteUint8(index, uint8(order.feeMethod));\r\nindex = ArrayUtils.unsafeWriteUint8(index, uint8(order.side));\r\nindex = ArrayUtils.unsafeWriteUint8(index, uint8(order.saleKind));\r\nindex = ArrayUtils.unsafeWriteAddress(index, order.target);\r\nindex = ArrayUtils.unsafeWriteUint8(index, uint8(order.howToCall));\r\nindex = ArrayUtils.unsafeWriteBytes(index, order.calldata);\r\nindex = ArrayUtils.unsafeWriteBytes(index, order.replacementPattern);\r\nindex = ArrayUtils.unsafeWriteAddress(index, order.staticTarget);\r\nindex = ArrayUtils.unsafeWriteBytes(index, order.staticExtradata);\r\nindex = ArrayUtils.unsafeWriteAddress(index, order.paymentToken);\r\nindex = ArrayUtils.unsafeWriteUint(index, order.basePrice);\r\nindex = ArrayUtils.unsafeWriteUint(index, order.extra);\r\nindex = ArrayUtils.unsafeWriteUint(index, order.listingTime);\r\nindex = ArrayUtils.unsafeWriteUint(index, order.expirationTime);\r\nindex = ArrayUtils.unsafeWriteUint(index, order.salt);\r\nassembly {\r\nhash := keccak256(add(array, 0x20), size)\r\n}\r\nreturn hash;\r\n}\r\n\r\n/**\r\n * @dev Hash an order, returning the hash that a client must sign, including the standard message prefix\r\n * @param order Order to hash\r\n * @return Hash of message prefix and order hash per Ethereum format\r\n */\r\nfunction hashToSign(Order memory order)\r\ninternal\r\npure\r\nreturns (bytes32)\r\n{\r\nreturn keccak256(\"\\x19Ethereum Signed Message:\\n32\", hashOrder(order));\r\n}\r\n\r\n/**\r\n * @dev Assert an order is valid and return its hash\r\n * @param order Order to validate\r\n * @param sig ECDSA signature\r\n */\r\nfunction requireValidOrder(Order memory order, Sig memory sig)\r\ninternal\r\nview\r\nreturns (bytes32)\r\n{\r\nbytes32 hash = hashToSign(order);\r\nrequire(validateOrder(hash, order, sig));\r\nreturn hash;\r\n}\r\n\r\n/**\r\n * @dev Validate order parameters (does *not* check signature validity)\r\n * @param order Order to validate\r\n */\r\nfunction validateOrderParameters(Order memory order)\r\ninternal\r\nview\r\nreturns (bool)\r\n{\r\n/* Order must be targeted at this protocol version (this Exchange contract). */\r\nif (order.exchange != address(this)) {\r\nreturn false;\r\n}\r\n\r\n/* Order must possess valid sale kind parameter combination. */\r\nif (!SaleKindInterface.validateParameters(order.saleKind, order.expirationTime)) {\r\nreturn false;\r\n}\r\n\r\n/* If using the split fee method, order must have sufficient protocol fees. */\r\nif (order.feeMethod == FeeMethod.SplitFee && (order.makerProtocolFee < minimumMakerProtocolFee || order.takerProtocolFee < minimumTakerProtocolFee)) {\r\nreturn false;\r\n}\r\n\r\nreturn true;\r\n}\r\n\r\n/**\r\n * @dev Validate a provided previously approved / signed order, hash, and signature.\r\n * @param hash Order hash (already calculated, passed to avoid recalculation)\r\n * @param order Order to validate\r\n * @param sig ECDSA signature\r\n */\r\nfunction validateOrder(bytes32 hash, Order memory order, Sig memory sig)\r\ninternal\r\nview\r\nreturns (bool)\r\n{\r\n/* Not done in an if-conditional to prevent unnecessary ecrecover evaluation, which seems to happen even though it should short-circuit. */\r\n\r\n/* Order must have valid parameters. */\r\nif (!validateOrderParameters(order)) {\r\nreturn false;\r\n}\r\n\r\n/* Order must have not been canceled or already filled. */\r\nif (cancelledOrFinalized[hash]) {\r\nreturn false;\r\n}\r\n\r\n/* Order authentication. Order must be either:\r\n/* (a) previously approved */\r\nif (approvedOrders[hash]) {\r\nreturn true;\r\n}\r\n\r\n/* or (b) ECDSA-signed by maker. */\r\nif (ecrecover(hash, sig.v, sig.r, sig.s) == order.maker) {\r\nreturn true;\r\n}\r\n\r\nreturn false;\r\n}\r\n\r\n/**\r\n * @dev Approve an order and optionally mark it for orderbook inclusion. Must be called by the maker of the order\r\n * @param order Order to approve\r\n * @param orderbookInclusionDesired Whether orderbook providers should include the order in their orderbooks\r\n */\r\nfunction approveOrder(Order memory order, bool orderbookInclusionDesired)\r\ninternal\r\n{\r\n/* CHECKS */\r\n\r\n/* Assert sender is authorized to approve order. */\r\nrequire(msg.sender == order.maker);\r\n\r\n/* Calculate order hash. */\r\nbytes32 hash = hashToSign(order);\r\n\r\n/* Assert order has not already been approved. */\r\nrequire(!approvedOrders[hash]);\r\n\r\n/* EFFECTS */\r\n\r\n/* Mark order as approved. */\r\napprovedOrders[hash] = true;\r\n\r\n/* Log approval event. Must be split in two due to Solidity stack size limitations. */\r\n{\r\nemit OrderApprovedPartOne(hash, order.exchange, order.maker, order.taker, order.makerRelayerFee, order.takerRelayerFee, order.makerProtocolFee, order.takerProtocolFee, order.feeRecipient, order.feeMethod, order.side, order.saleKind, order.target);\r\n}\r\n{\r\nemit OrderApprovedPartTwo(hash, order.howToCall, order.calldata, order.replacementPattern, order.staticTarget, order.staticExtradata, order.paymentToken, order.basePrice, order.extra, order.listingTime, order.expirationTime, order.salt, orderbookInclusionDesired);\r\n}\r\n}\r\n\r\n/**\r\n * @dev Cancel an order, preventing it from being matched. Must be called by the maker of the order\r\n * @param order Order to cancel\r\n * @param sig ECDSA signature\r\n */\r\nfunction cancelOrder(Order memory order, Sig memory sig)\r\ninternal\r\n{\r\n/* CHECKS */\r\n\r\n/* Calculate order hash. */\r\nbytes32 hash = requireValidOrder(order, sig);\r\n\r\n/* Assert sender is authorized to cancel order. */\r\nrequire(msg.sender == order.maker);\r\n\r\n/* EFFECTS */\r\n\r\n/* Mark order as cancelled, preventing it from being matched. */\r\ncancelledOrFinalized[hash] = true;\r\n\r\n/* Log cancel event. */\r\nemit OrderCancelled(hash);\r\n}\r\n\r\n/**\r\n * @dev Calculate the current price of an order (convenience function)\r\n * @param order Order to calculate the price of\r\n * @return The current price of the order\r\n */\r\nfunction calculateCurrentPrice (Order memory order)\r\ninternal\r\nview\r\nreturns (uint)\r\n{\r\nreturn SaleKindInterface.calculateFinalPrice(order.side, order.saleKind, order.basePrice, order.extra, order.listingTime, order.expirationTime);\r\n}\r\n\r\n/**\r\n * @dev Calculate the price two orders would match at, if in fact they would match (otherwise fail)\r\n * @param buy Buy-side order\r\n * @param sell Sell-side order\r\n * @return Match price\r\n */\r\nfunction calculateMatchPrice(Order memory buy, Order memory sell)\r\nview\r\ninternal\r\nreturns (uint)\r\n{\r\n/* Calculate sell price. */\r\nuint sellPrice = SaleKindInterface.calculateFinalPrice(sell.side, sell.saleKind, sell.basePrice, sell.extra, sell.listingTime, sell.expirationTime);\r\n\r\n/* Calculate buy price. */\r\nuint buyPrice = SaleKindInterface.calculateFinalPrice(buy.side, buy.saleKind, buy.basePrice, buy.extra, buy.listingTime, buy.expirationTime);\r\n\r\n/* Require price cross. */\r\nrequire(buyPrice >= sellPrice);\r\n\r\n/* Maker/taker priority. */\r\nreturn sell.feeRecipient != address(0) ? sellPrice : buyPrice;\r\n}\r\n\r\n/**\r\n * @dev Execute all ERC20 token / Ether transfers associated with an order match (fees and buyer => seller transfer)\r\n * @param buy Buy-side order\r\n * @param sell Sell-side order\r\n */\r\nfunction executeFundsTransfer(Order memory buy, Order memory sell)\r\ninternal\r\nreturns (uint)\r\n{\r\n/* Only payable in the special case of unwrapped Ether. */\r\nif (sell.paymentToken != address(0)) {\r\nrequire(msg.value == 0);\r\n}\r\n\r\n/* Calculate match price. */\r\nuint price = calculateMatchPrice(buy, sell);\r\n\r\n/* If paying using a token (not Ether), transfer tokens. This is done prior to fee payments to that a seller will have tokens before being charged fees. */\r\nif (price > 0 && sell.paymentToken != address(0)) {\r\ntransferTokens(sell.paymentToken, buy.maker, sell.maker, price);\r\n}\r\n\r\n/* Amount that will be received by seller (for Ether). */\r\nuint receiveAmount = price;\r\n\r\n/* Amount that must be sent by buyer (for Ether). */\r\nuint requiredAmount = price;\r\n\r\n/* Determine maker/taker and charge fees accordingly. */\r\nif (sell.feeRecipient != address(0)) {\r\n/* Sell-side order is maker. */\r\n\r\n/* Assert taker fee is less than or equal to maximum fee specified by buyer. */\r\nrequire(sell.takerRelayerFee <= buy.takerRelayerFee);\r\n\r\nif (sell.feeMethod == FeeMethod.SplitFee) {\r\n/* Assert taker fee is less than or equal to maximum fee specified by buyer. */\r\nrequire(sell.takerProtocolFee <= buy.takerProtocolFee);\r\n\r\n/* Maker fees are deducted from the token amount that the maker receives. Taker fees are extra tokens that must be paid by the taker. */\r\n\r\nif (sell.makerRelayerFee > 0) {\r\nuint makerRelayerFee = SafeMath.div(SafeMath.mul(sell.makerRelayerFee, price), INVERSE_BASIS_POINT);\r\nif (sell.paymentToken == address(0)) {\r\nreceiveAmount = SafeMath.sub(receiveAmount, makerRelayerFee);\r\nsell.feeRecipient.transfer(makerRelayerFee);\r\n} else {\r\ntransferTokens(sell.paymentToken, sell.maker, sell.feeRecipient, makerRelayerFee);\r\n}\r\n}\r\n\r\nif (sell.takerRelayerFee > 0) {\r\nuint takerRelayerFee = SafeMath.div(SafeMath.mul(sell.takerRelayerFee, price), INVERSE_BASIS_POINT);\r\nif (sell.paymentToken == address(0)) {\r\nrequiredAmount = SafeMath.add(requiredAmount, takerRelayerFee);\r\nsell.feeRecipient.transfer(takerRelayerFee);\r\n} else {\r\ntransferTokens(sell.paymentToken, buy.maker, sell.feeRecipient, takerRelayerFee);\r\n}\r\n}\r\n\r\nif (sell.makerProtocolFee > 0) {\r\nuint makerProtocolFee = SafeMath.div(SafeMath.mul(sell.makerProtocolFee, price), INVERSE_BASIS_POINT);\r\nif (sell.paymentToken == address(0)) {\r\nreceiveAmount = SafeMath.sub(receiveAmount, makerProtocolFee);\r\nprotocolFeeRecipient.transfer(makerProtocolFee);\r\n} else {\r\ntransferTokens(sell.paymentToken, sell.maker, protocolFeeRecipient, makerProtocolFee);\r\n}\r\n}\r\n\r\nif (sell.takerProtocolFee > 0) {\r\nuint takerProtocolFee = SafeMath.div(SafeMath.mul(sell.takerProtocolFee, price), INVERSE_BASIS_POINT);\r\nif (sell.paymentToken == address(0)) {\r\nrequiredAmount = SafeMath.add(requiredAmount, takerProtocolFee);\r\nprotocolFeeRecipient.transfer(takerProtocolFee);\r\n} else {\r\ntransferTokens(sell.paymentToken, buy.maker, protocolFeeRecipient, takerProtocolFee);\r\n}\r\n}\r\n\r\n} else {\r\n/* Charge maker fee to seller. */\r\nchargeProtocolFee(sell.maker, sell.feeRecipient, sell.makerRelayerFee);\r\n\r\n/* Charge taker fee to buyer. */\r\nchargeProtocolFee(buy.maker, sell.feeRecipient, sell.takerRelayerFee);\r\n}\r\n} else {\r\n/* Buy-side order is maker. */\r\n\r\n/* Assert taker fee is less than or equal to maximum fee specified by seller. */\r\nrequire(buy.takerRelayerFee <= sell.takerRelayerFee);\r\n\r\nif (sell.feeMethod == FeeMethod.SplitFee) {\r\n/* The Exchange does not escrow Ether, so direct Ether can only be used to with sell-side maker / buy-side taker orders. */\r\nrequire(sell.paymentToken != address(0));\r\n\r\n/* Assert taker fee is less than or equal to maximum fee specified by seller. */\r\nrequire(buy.takerProtocolFee <= sell.takerProtocolFee);\r\n\r\nif (buy.makerRelayerFee > 0) {\r\nmakerRelayerFee = SafeMath.div(SafeMath.mul(buy.makerRelayerFee, price), INVERSE_BASIS_POINT);\r\ntransferTokens(sell.paymentToken, buy.maker, buy.feeRecipient, makerRelayerFee);\r\n}\r\n\r\nif (buy.takerRelayerFee > 0) {\r\ntakerRelayerFee = SafeMath.div(SafeMath.mul(buy.takerRelayerFee, price), INVERSE_BASIS_POINT);\r\ntransferTokens(sell.paymentToken, sell.maker, buy.feeRecipient, takerRelayerFee);\r\n}\r\n\r\nif (buy.makerProtocolFee > 0) {\r\nmakerProtocolFee = SafeMath.div(SafeMath.mul(buy.makerProtocolFee, price), INVERSE_BASIS_POINT);\r\ntransferTokens(sell.paymentToken, buy.maker, protocolFeeRecipient, makerProtocolFee);\r\n}\r\n\r\nif (buy.takerProtocolFee > 0) {\r\ntakerProtocolFee = SafeMath.div(SafeMath.mul(buy.takerProtocolFee, price), INVERSE_BASIS_POINT);\r\ntransferTokens(sell.paymentToken, sell.maker, protocolFeeRecipient, takerProtocolFee);\r\n}\r\n\r\n} else {\r\n/* Charge maker fee to buyer. */\r\nchargeProtocolFee(buy.maker, buy.feeRecipient, buy.makerRelayerFee);\r\n\r\n/* Charge taker fee to seller. */\r\nchargeProtocolFee(sell.maker, buy.feeRecipient, buy.takerRelayerFee);\r\n}\r\n}\r\n\r\nif (sell.paymentToken == address(0)) {\r\n/* Special-case Ether, order must be matched by buyer. */\r\nrequire(msg.value >= requiredAmount);\r\nsell.maker.transfer(receiveAmount);\r\n/* Allow overshoot for variable-price auctions, refund difference. */\r\nuint diff = SafeMath.sub(msg.value, requiredAmount);\r\nif (diff > 0) {\r\nbuy.maker.transfer(diff);\r\n}\r\n}\r\n\r\n/* This contract should never hold Ether, however, we cannot assert this, since it is impossible to prevent anyone from sending Ether e.g. with selfdestruct. */\r\n\r\nreturn price;\r\n}\r\n\r\n/**\r\n * @dev Return whether or not two orders can be matched with each other by basic parameters (does not check order signatures / calldata or perform static calls)\r\n * @param buy Buy-side order\r\n * @param sell Sell-side order\r\n * @return Whether or not the two orders can be matched\r\n */\r\nfunction ordersCanMatch(Order memory buy, Order memory sell)\r\ninternal\r\nview\r\nreturns (bool)\r\n{\r\nreturn (\r\n/* Must be opposite-side. */\r\n(buy.side == SaleKindInterface.Side.Buy && sell.side == SaleKindInterface.Side.Sell) &&\r\n/* Must use same fee method. */\r\n(buy.feeMethod == sell.feeMethod) &&\r\n/* Must use same payment token. */\r\n(buy.paymentToken == sell.paymentToken) &&\r\n/* Must match maker/taker addresses. */\r\n(sell.taker == address(0) || sell.taker == buy.maker) &&\r\n(buy.taker == address(0) || buy.taker == sell.maker) &&\r\n/* One must be maker and the other must be taker (no bool XOR in Solidity). */\r\n((sell.feeRecipient == address(0) && buy.feeRecipient != address(0)) || (sell.feeRecipient != address(0) && buy.feeRecipient == address(0))) &&\r\n/* Must match target. */\r\n(buy.target == sell.target) &&\r\n/* Must match howToCall. */\r\n(buy.howToCall == sell.howToCall) &&\r\n/* Buy-side order must be settleable. */\r\nSaleKindInterface.canSettleOrder(buy.listingTime, buy.expirationTime) &&\r\n/* Sell-side order must be settleable. */\r\nSaleKindInterface.canSettleOrder(sell.listingTime, sell.expirationTime)\r\n);\r\n}\r\n\r\n/**\r\n * @dev Atomically match two orders, ensuring validity of the match, and execute all associated state transitions. Protected against reentrancy by a contract-global lock.\r\n * @param buy Buy-side order\r\n * @param buySig Buy-side order signature\r\n * @param sell Sell-side order\r\n * @param sellSig Sell-side order signature\r\n */\r\nfunction atomicMatch(Order memory buy, Sig memory buySig, Order memory sell, Sig memory sellSig, bytes32 metadata)\r\ninternal\r\nreentrancyGuard\r\n{\r\n/* CHECKS */\r\n\r\n/* Ensure buy order validity and calculate hash if necessary. */\r\nbytes32 buyHash;\r\nif (buy.maker == msg.sender) {\r\nrequire(validateOrderParameters(buy));\r\n} else {\r\nbuyHash = requireValidOrder(buy, buySig);\r\n}\r\n\r\n/* Ensure sell order validity and calculate hash if necessary. */\r\nbytes32 sellHash;\r\nif (sell.maker == msg.sender) {\r\nrequire(validateOrderParameters(sell));\r\n} else {\r\nsellHash = requireValidOrder(sell, sellSig);\r\n}\r\n\r\n/* Must be matchable. */\r\nrequire(ordersCanMatch(buy, sell));\r\n\r\n/* Target must exist (prevent malicious selfdestructs just prior to order settlement). */\r\nuint size;\r\naddress target = sell.target;\r\nassembly {\r\nsize := extcodesize(target)\r\n}\r\nrequire(size > 0);\r\n\r\n/* Must match calldata after replacement, if specified. */\r\nif (buy.replacementPattern.length > 0) {\r\nArrayUtils.guardedArrayReplace(buy.calldata, sell.calldata, buy.replacementPattern);\r\n}\r\nif (sell.replacementPattern.length > 0) {\r\nArrayUtils.guardedArrayReplace(sell.calldata, buy.calldata, sell.replacementPattern);\r\n}\r\nrequire(ArrayUtils.arrayEq(buy.calldata, sell.calldata));\r\n\r\n/* Retrieve delegateProxy contract. */\r\nOwnableDelegateProxy delegateProxy = registry.proxies(sell.maker);\r\n\r\n/* Proxy must exist. */\r\nrequire(delegateProxy != address(0));\r\n\r\n/* Assert implementation. */\r\nrequire(delegateProxy.implementation() == registry.delegateProxyImplementation());\r\n\r\n/* Access the passthrough AuthenticatedProxy. */\r\nAuthenticatedProxy proxy = AuthenticatedProxy(delegateProxy);\r\n\r\n/* EFFECTS */\r\n\r\n/* Mark previously signed or approved orders as finalized. */\r\nif (msg.sender != buy.maker) {\r\ncancelledOrFinalized[buyHash] = true;\r\n}\r\nif (msg.sender != sell.maker) {\r\ncancelledOrFinalized[sellHash] = true;\r\n}\r\n\r\n/* INTERACTIONS */\r\n\r\n/* Execute funds transfer and pay fees. */\r\nuint price = executeFundsTransfer(buy, sell);\r\n\r\n/* Execute specified call through proxy. */\r\nrequire(proxy.proxy(sell.target, sell.howToCall, sell.calldata));\r\n\r\n/* Static calls are intentionally done after the effectful call so they can check resulting state. */\r\n\r\n/* Handle buy-side static call if specified. */\r\nif (buy.staticTarget != address(0)) {\r\nrequire(staticCall(buy.staticTarget, sell.calldata, buy.staticExtradata));\r\n}\r\n\r\n/* Handle sell-side static call if specified. */\r\nif (sell.staticTarget != address(0)) {\r\nrequire(staticCall(sell.staticTarget, sell.calldata, sell.staticExtradata));\r\n}\r\n\r\n/* Log match event. */\r\nemit OrdersMatched(buyHash, sellHash, sell.feeRecipient != address(0) ? sell.maker : buy.maker, sell.feeRecipient != address(0) ? buy.maker : sell.maker, price, metadata);\r\n}\r\n\r\n}\r\n\r\ncontract Exchange is ExchangeCore {\r\n\r\n/**\r\n * @dev Call guardedArrayReplace - library function exposed for testing.\r\n */\r\nfunction guardedArrayReplace(bytes array, bytes desired, bytes mask)\r\npublic\r\npure\r\nreturns (bytes)\r\n{\r\nArrayUtils.guardedArrayReplace(array, desired, mask);\r\nreturn array;\r\n}\r\n\r\n/**\r\n * Test copy byte array\r\n *\r\n * @param arrToCopy Array to copy\r\n * @return byte array\r\n */\r\nfunction testCopy(bytes arrToCopy)\r\npublic\r\npure\r\nreturns (bytes)\r\n{\r\nbytes memory arr = new bytes(arrToCopy.length);\r\nuint index;\r\nassembly {\r\nindex := add(arr, 0x20)\r\n}\r\nArrayUtils.unsafeWriteBytes(index, arrToCopy);\r\nreturn arr;\r\n}\r\n\r\n/**\r\n * Test write address to bytes\r\n *\r\n * @param addr Address to write\r\n * @return byte array\r\n */\r\nfunction testCopyAddress(address addr)\r\npublic\r\npure\r\nreturns (bytes)\r\n{\r\nbytes memory arr = new bytes(0x14);\r\nuint index;\r\nassembly {\r\nindex := add(arr, 0x20)\r\n}\r\nArrayUtils.unsafeWriteAddress(index, addr);\r\nreturn arr;\r\n}\r\n\r\n/**\r\n * @dev Call calculateFinalPrice - library function exposed for testing.\r\n */\r\nfunction calculateFinalPrice(SaleKindInterface.Side side, SaleKindInterface.SaleKind saleKind, uint basePrice, uint extra, uint listingTime, uint expirationTime)\r\npublic\r\nview\r\nreturns (uint)\r\n{\r\nreturn SaleKindInterface.calculateFinalPrice(side, saleKind, basePrice, extra, listingTime, expirationTime);\r\n}\r\n\r\n/**\r\n * @dev Call hashOrder - Solidity ABI encoding limitation workaround, hopefully temporary.\r\n */\r\nfunction hashOrder_(\r\naddress[7] addrs,\r\nuint[9] uints,\r\nFeeMethod feeMethod,\r\nSaleKindInterface.Side side,\r\nSaleKindInterface.SaleKind saleKind,\r\nAuthenticatedProxy.HowToCall howToCall,\r\nbytes calldata,\r\nbytes replacementPattern,\r\nbytes staticExtradata)\r\npublic\r\npure\r\nreturns (bytes32)\r\n{\r\nreturn hashOrder(\r\nOrder(addrs[0], addrs[1], addrs[2], uints[0], uints[1], uints[2], uints[3], addrs[3], feeMethod, side, saleKind, addrs[4], howToCall, calldata, replacementPattern, addrs[5], staticExtradata, ERC20(addrs[6]), uints[4], uints[5], uints[6], uints[7], uints[8])\r\n);\r\n}\r\n\r\n/**\r\n * @dev Call hashToSign - Solidity ABI encoding limitation workaround, hopefully temporary.\r\n */\r\nfunction hashToSign_(\r\naddress[7] addrs,\r\nuint[9] uints,\r\nFeeMethod feeMethod,\r\nSaleKindInterface.Side side,\r\nSaleKindInterface.SaleKind saleKind,\r\nAuthenticatedProxy.HowToCall howToCall,\r\nbytes calldata,\r\nbytes replacementPattern,\r\nbytes staticExtradata)\r\npublic\r\npure\r\nreturns (bytes32)\r\n{\r\nreturn hashToSign(\r\nOrder(addrs[0], addrs[1], addrs[2], uints[0], uints[1], uints[2], uints[3], addrs[3], feeMethod, side, saleKind, addrs[4], howToCall, calldata, replacementPattern, addrs[5], staticExtradata, ERC20(addrs[6]), uints[4], uints[5], uints[6], uints[7], uints[8])\r\n);\r\n}\r\n\r\n/**\r\n * @dev Call validateOrderParameters - Solidity ABI encoding limitation workaround, hopefully temporary.\r\n */\r\nfunction validateOrderParameters_ (\r\naddress[7] addrs,\r\nuint[9] uints,\r\nFeeMethod feeMethod,\r\nSaleKindInterface.Side side,\r\nSaleKindInterface.SaleKind saleKind,\r\nAuthenticatedProxy.HowToCall howToCall,\r\nbytes calldata,\r\nbytes replacementPattern,\r\nbytes staticExtradata)\r\nview\r\npublic\r\nreturns (bool)\r\n{\r\nOrder memory order = Order(addrs[0], addrs[1], addrs[2], uints[0], uints[1], uints[2], uints[3], addrs[3], feeMethod, side, saleKind, addrs[4], howToCall, calldata, replacementPattern, addrs[5], staticExtradata, ERC20(addrs[6]), uints[4], uints[5], uints[6], uints[7], uints[8]);\r\nreturn validateOrderParameters(\r\norder\r\n);\r\n}\r\n\r\n/**\r\n * @dev Call validateOrder - Solidity ABI encoding limitation workaround, hopefully temporary.\r\n */\r\nfunction validateOrder_ (\r\naddress[7] addrs,\r\nuint[9] uints,\r\nFeeMethod feeMethod,\r\nSaleKindInterface.Side side,\r\nSaleKindInterface.SaleKind saleKind,\r\nAuthenticatedProxy.HowToCall howToCall,\r\nbytes calldata,\r\nbytes replacementPattern,\r\nbytes staticExtradata,\r\nuint8 v,\r\nbytes32 r,\r\nbytes32 s)\r\nview\r\npublic\r\nreturns (bool)\r\n{\r\nOrder memory order = Order(addrs[0], addrs[1], addrs[2], uints[0], uints[1], uints[2], uints[3], addrs[3], feeMethod, side, saleKind, addrs[4], howToCall, calldata, replacementPattern, addrs[5], staticExtradata, ERC20(addrs[6]), uints[4], uints[5], uints[6], uints[7], uints[8]);\r\nreturn validateOrder(\r\nhashToSign(order),\r\norder,\r\nSig(v, r, s)\r\n);\r\n}\r\n\r\n/**\r\n * @dev Call approveOrder - Solidity ABI encoding limitation workaround, hopefully temporary.\r\n */\r\nfunction approveOrder_ (\r\naddress[7] addrs,\r\nuint[9] uints,\r\nFeeMethod feeMethod,\r\nSaleKindInterface.Side side,\r\nSaleKindInterface.SaleKind saleKind,\r\nAuthenticatedProxy.HowToCall howToCall,\r\nbytes calldata,\r\nbytes replacementPattern,\r\nbytes staticExtradata,\r\nbool orderbookInclusionDesired)\r\npublic\r\n{\r\nOrder memory order = Order(addrs[0], addrs[1], addrs[2], uints[0], uints[1], uints[2], uints[3], addrs[3], feeMethod, side, saleKind, addrs[4], howToCall, calldata, replacementPattern, addrs[5], staticExtradata, ERC20(addrs[6]), uints[4], uints[5], uints[6], uints[7], uints[8]);\r\nreturn approveOrder(order, orderbookInclusionDesired);\r\n}\r\n\r\n/**\r\n * @dev Call cancelOrder - Solidity ABI encoding limitation workaround, hopefully temporary.\r\n */\r\nfunction cancelOrder_(\r\naddress[7] addrs,\r\nuint[9] uints,\r\nFeeMethod feeMethod,\r\nSaleKindInterface.Side side,\r\nSaleKindInterface.SaleKind saleKind,\r\nAuthenticatedProxy.HowToCall howToCall,\r\nbytes calldata,\r\nbytes replacementPattern,\r\nbytes staticExtradata,\r\nuint8 v,\r\nbytes32 r,\r\nbytes32 s)\r\npublic\r\n{\r\n\r\nreturn cancelOrder(\r\nOrder(addrs[0], addrs[1], addrs[2], uints[0], uints[1], uints[2], uints[3], addrs[3], feeMethod, side, saleKind, addrs[4], howToCall, calldata, replacementPattern, addrs[5], staticExtradata, ERC20(addrs[6]), uints[4], uints[5], uints[6], uints[7], uints[8]),\r\nSig(v, r, s)\r\n);\r\n}\r\n\r\n/**\r\n * @dev Call calculateCurrentPrice - Solidity ABI encoding limitation workaround, hopefully temporary.\r\n */\r\nfunction calculateCurrentPrice_(\r\naddress[7] addrs,\r\nuint[9] uints,\r\nFeeMethod feeMethod,\r\nSaleKindInterface.Side side,\r\nSaleKindInterface.SaleKind saleKind,\r\nAuthenticatedProxy.HowToCall howToCall,\r\nbytes calldata,\r\nbytes replacementPattern,\r\nbytes staticExtradata)\r\npublic\r\nview\r\nreturns (uint)\r\n{\r\nreturn calculateCurrentPrice(\r\nOrder(addrs[0], addrs[1], addrs[2], uints[0], uints[1], uints[2], uints[3], addrs[3], feeMethod, side, saleKind, addrs[4], howToCall, calldata, replacementPattern, addrs[5], staticExtradata, ERC20(addrs[6]), uints[4], uints[5], uints[6], uints[7], uints[8])\r\n);\r\n}\r\n\r\n/**\r\n * @dev Call ordersCanMatch - Solidity ABI encoding limitation workaround, hopefully temporary.\r\n */\r\nfunction ordersCanMatch_(\r\naddress[14] addrs,\r\nuint[18] uints,\r\nuint8[8] feeMethodsSidesKindsHowToCalls,\r\nbytes calldataBuy,\r\nbytes calldataSell,\r\nbytes replacementPatternBuy,\r\nbytes replacementPatternSell,\r\nbytes staticExtradataBuy,\r\nbytes staticExtradataSell)\r\npublic\r\nview\r\nreturns (bool)\r\n{\r\nOrder memory buy = Order(addrs[0], addrs[1], addrs[2], uints[0], uints[1], uints[2], uints[3], addrs[3], FeeMethod(feeMethodsSidesKindsHowToCalls[0]), SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[1]), SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[2]), addrs[4], AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[3]), calldataBuy, replacementPatternBuy, addrs[5], staticExtradataBuy, ERC20(addrs[6]), uints[4], uints[5], uints[6], uints[7], uints[8]);\r\nOrder memory sell = Order(addrs[7], addrs[8], addrs[9], uints[9], uints[10], uints[11], uints[12], addrs[10], FeeMethod(feeMethodsSidesKindsHowToCalls[4]), SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[5]), SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[6]), addrs[11], AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[7]), calldataSell, replacementPatternSell, addrs[12], staticExtradataSell, ERC20(addrs[13]), uints[13], uints[14], uints[15], uints[16], uints[17]);\r\nreturn ordersCanMatch(\r\nbuy,\r\nsell\r\n);\r\n}\r\n\r\n/**\r\n * @dev Return whether or not two orders' calldata specifications can match\r\n * @param buyCalldata Buy-side order calldata\r\n * @param buyReplacementPattern Buy-side order calldata replacement mask\r\n * @param sellCalldata Sell-side order calldata\r\n * @param sellReplacementPattern Sell-side order calldata replacement mask\r\n * @return Whether the orders' calldata can be matched\r\n */\r\nfunction orderCalldataCanMatch(bytes buyCalldata, bytes buyReplacementPattern, bytes sellCalldata, bytes sellReplacementPattern)\r\npublic\r\npure\r\nreturns (bool)\r\n{\r\nif (buyReplacementPattern.length > 0) {\r\nArrayUtils.guardedArrayReplace(buyCalldata, sellCalldata, buyReplacementPattern);\r\n}\r\nif (sellReplacementPattern.length > 0) {\r\nArrayUtils.guardedArrayReplace(sellCalldata, buyCalldata, sellReplacementPattern);\r\n}\r\nreturn ArrayUtils.arrayEq(buyCalldata, sellCalldata);\r\n}\r\n\r\n/**\r\n * @dev Call calculateMatchPrice - Solidity ABI encoding limitation workaround, hopefully temporary.\r\n */\r\nfunction calculateMatchPrice_(\r\naddress[14] addrs,\r\nuint[18] uints,\r\nuint8[8] feeMethodsSidesKindsHowToCalls,\r\nbytes calldataBuy,\r\nbytes calldataSell,\r\nbytes replacementPatternBuy,\r\nbytes replacementPatternSell,\r\nbytes staticExtradataBuy,\r\nbytes staticExtradataSell)\r\npublic\r\nview\r\nreturns (uint)\r\n{\r\nOrder memory buy = Order(addrs[0], addrs[1], addrs[2], uints[0], uints[1], uints[2], uints[3], addrs[3], FeeMethod(feeMethodsSidesKindsHowToCalls[0]), SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[1]), SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[2]), addrs[4], AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[3]), calldataBuy, replacementPatternBuy, addrs[5], staticExtradataBuy, ERC20(addrs[6]), uints[4], uints[5], uints[6], uints[7], uints[8]);\r\nOrder memory sell = Order(addrs[7], addrs[8], addrs[9], uints[9], uints[10], uints[11], uints[12], addrs[10], FeeMethod(feeMethodsSidesKindsHowToCalls[4]), SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[5]), SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[6]), addrs[11], AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[7]), calldataSell, replacementPatternSell, addrs[12], staticExtradataSell, ERC20(addrs[13]), uints[13], uints[14], uints[15], uints[16], uints[17]);\r\nreturn calculateMatchPrice(\r\nbuy,\r\nsell\r\n);\r\n}\r\n\r\n/**\r\n * @dev Call atomicMatch - Solidity ABI encoding limitation workaround, hopefully temporary.\r\n */\r\nfunction atomicMatch_(\r\naddress[14] addrs,\r\nuint[18] uints,\r\nuint8[8] feeMethodsSidesKindsHowToCalls,\r\nbytes calldataBuy,\r\nbytes calldataSell,\r\nbytes replacementPatternBuy,\r\nbytes replacementPatternSell,\r\nbytes staticExtradataBuy,\r\nbytes staticExtradataSell,\r\nuint8[2] vs,\r\nbytes32[5] rssMetadata)\r\npublic\r\npayable\r\n{\r\n\r\nreturn atomicMatch(\r\nOrder(addrs[0], addrs[1], addrs[2], uints[0], uints[1], uints[2], uints[3], addrs[3], FeeMethod(feeMethodsSidesKindsHowToCalls[0]), SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[1]), SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[2]), addrs[4], AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[3]), calldataBuy, replacementPatternBuy, addrs[5], staticExtradataBuy, ERC20(addrs[6]), uints[4], uints[5], uints[6], uints[7], uints[8]),\r\nSig(vs[0], rssMetadata[0], rssMetadata[1]),\r\nOrder(addrs[7], addrs[8], addrs[9], uints[9], uints[10], uints[11], uints[12], addrs[10], FeeMethod(feeMethodsSidesKindsHowToCalls[4]), SaleKindInterface.Side(feeMethodsSidesKindsHowToCalls[5]), SaleKindInterface.SaleKind(feeMethodsSidesKindsHowToCalls[6]), addrs[11], AuthenticatedProxy.HowToCall(feeMethodsSidesKindsHowToCalls[7]), calldataSell, replacementPatternSell, addrs[12], staticExtradataSell, ERC20(addrs[13]), uints[13], uints[14], uints[15], uints[16], uints[17]),\r\nSig(vs[1], rssMetadata[2], rssMetadata[3]),\r\nrssMetadata[4]\r\n);\r\n}\r\n\r\n}\r\n\r\ncontract WyvernExchange is Exchange {\r\n\r\nstring public constant name = \"Project Wyvern Exchange\";\r\n\r\nstring public constant version = \"2.2\";\r\n\r\nstring public constant codename = \"Lambton Worm\";\r\n\r\n/**\r\n * @dev Initialize a WyvernExchange instance\r\n * @param registryAddress Address of the registry instance which this Exchange instance will use\r\n * @param tokenAddress Address of the token used for protocol fees\r\n */\r\nconstructor (ProxyRegistry registryAddress, TokenTransferProxy tokenTransferProxyAddress, ERC20 tokenAddress, address protocolFeeAddress) public {\r\nregistry = registryAddress;\r\ntokenTransferProxy = tokenTransferProxyAddress;\r\nexchangeToken = tokenAddress;\r\nprotocolFeeRecipient = protocolFeeAddress;\r\nowner = msg.sender;\r\n}\r\n\r\n}\r\n\r\nlibrary SaleKindInterface {\r\n\r\n/**\r\n * Side: buy or sell.\r\n */\r\nenum Side { Buy, Sell }\r\n\r\n/**\r\n * Currently supported kinds of sale: fixed price, Dutch auction.\r\n * English auctions cannot be supported without stronger escrow guarantees.\r\n * Future interesting options: Vickrey auction, nonlinear Dutch auctions.\r\n */\r\nenum SaleKind { FixedPrice, DutchAuction }\r\n\r\n/**\r\n * @dev Check whether the parameters of a sale are valid\r\n * @param saleKind Kind of sale\r\n * @param expirationTime Order expiration time\r\n * @return Whether the parameters were valid\r\n */\r\nfunction validateParameters(SaleKind saleKind, uint expirationTime)\r\npure\r\ninternal\r\nreturns (bool)\r\n{\r\n/* Auctions must have a set expiration date. */\r\nreturn (saleKind == SaleKind.FixedPrice || expirationTime > 0);\r\n}\r\n\r\n/**\r\n * @dev Return whether or not an order can be settled\r\n * @dev Precondition: parameters have passed validateParameters\r\n * @param listingTime Order listing time\r\n * @param expirationTime Order expiration time\r\n */\r\nfunction canSettleOrder(uint listingTime, uint expirationTime)\r\nview\r\ninternal\r\nreturns (bool)\r\n{\r\nreturn (listingTime < now) && (expirationTime == 0 || now < expirationTime);\r\n}\r\n\r\n/**\r\n * @dev Calculate the settlement price of an order\r\n * @dev Precondition: parameters have passed validateParameters.\r\n * @param side Order side\r\n * @param saleKind Method of sale\r\n * @param basePrice Order base price\r\n * @param extra Order extra price data\r\n * @param listingTime Order listing time\r\n * @param expirationTime Order expiration time\r\n */\r\nfunction calculateFinalPrice(Side side, SaleKind saleKind, uint basePrice, uint extra, uint listingTime, uint expirationTime)\r\nview\r\ninternal\r\nreturns (uint finalPrice)\r\n{\r\nif (saleKind == SaleKind.FixedPrice) {\r\nreturn basePrice;\r\n} else if (saleKind == SaleKind.DutchAuction) {\r\nuint diff = SafeMath.div(SafeMath.mul(extra, SafeMath.sub(now, listingTime)), SafeMath.sub(expirationTime, listingTime));\r\nif (side == Side.Sell) {\r\n/* Sell-side - start price: basePrice. End price: basePrice - extra. */\r\nreturn SafeMath.sub(basePrice, diff);\r\n} else {\r\n/* Buy-side - start price: basePrice. End price: basePrice + extra. */\r\nreturn SafeMath.add(basePrice, diff);\r\n}\r\n}\r\n}\r\n\r\n}\r\n\r\ncontract ProxyRegistry is Ownable {\r\n\r\n/* DelegateProxy implementation contract. Must be initialized. */\r\naddress public delegateProxyImplementation;\r\n\r\n/* Authenticated proxies by user. */\r\nmapping(address => OwnableDelegateProxy) public proxies;\r\n\r\n/* Contracts pending access. */\r\nmapping(address => uint) public pending;\r\n\r\n/* Contracts allowed to call those proxies. */\r\nmapping(address => bool) public contracts;\r\n\r\n/* Delay period for adding an authenticated contract.\r\n   This mitigates a particular class of potential attack on the Wyvern DAO (which owns this registry) - if at any point the value of assets held by proxy contracts exceeded the value of half the WYV supply (votes in the DAO),\r\n   a malicious but rational attacker could buy half the Wyvern and grant themselves access to all the proxy contracts. A delay period renders this attack nonthreatening - given two weeks, if that happened, users would have\r\n   plenty of time to notice and transfer their assets.\r\n*/\r\nuint public DELAY_PERIOD = 2 weeks;\r\n\r\n/**\r\n * Start the process to enable access for specified contract. Subject to delay period.\r\n *\r\n * @dev ProxyRegistry owner only\r\n * @param addr Address to which to grant permissions\r\n */\r\nfunction startGrantAuthentication (address addr)\r\npublic\r\nonlyOwner\r\n{\r\nrequire(!contracts[addr] && pending[addr] == 0);\r\npending[addr] = now;\r\n}\r\n\r\n/**\r\n * End the process to nable access for specified contract after delay period has passed.\r\n *\r\n * @dev ProxyRegistry owner only\r\n * @param addr Address to which to grant permissions\r\n */\r\nfunction endGrantAuthentication (address addr)\r\npublic\r\nonlyOwner\r\n{\r\nrequire(!contracts[addr] && pending[addr] != 0 && ((pending[addr] + DELAY_PERIOD) < now));\r\npending[addr] = 0;\r\ncontracts[addr] = true;\r\n}\r\n\r\n/**\r\n * Revoke access for specified contract. Can be done instantly.\r\n *\r\n * @dev ProxyRegistry owner only\r\n * @param addr Address of which to revoke permissions\r\n */\r\nfunction revokeAuthentication (address addr)\r\npublic\r\nonlyOwner\r\n{\r\ncontracts[addr] = false;\r\n}\r\n\r\n/**\r\n * Register a proxy contract with this registry\r\n *\r\n * @dev Must be called by the user which the proxy is for, creates a new AuthenticatedProxy\r\n * @return New AuthenticatedProxy contract\r\n */\r\nfunction registerProxy()\r\npublic\r\nreturns (OwnableDelegateProxy proxy)\r\n{\r\nrequire(proxies[msg.sender] == address(0));\r\nproxy = new OwnableDelegateProxy(msg.sender, delegateProxyImplementation, abi.encodeWithSignature(\"initialize(address,address)\", msg.sender, address(this)));\r\nproxies[msg.sender] = proxy;\r\nreturn proxy;\r\n}\r\n\r\n}\r\n\r\ncontract TokenTransferProxy {\r\n\r\n/* Authentication registry. */\r\nProxyRegistry public registry;\r\n\r\n/**\r\n * Call ERC20 `transferFrom`\r\n *\r\n * @dev Authenticated contract only\r\n * @param token ERC20 token address\r\n * @param from From address\r\n * @param to To address\r\n * @param amount Transfer amount\r\n */\r\nfunction transferFrom(address token, address from, address to, uint amount)\r\npublic\r\nreturns (bool)\r\n{\r\nrequire(registry.contracts(msg.sender));\r\nreturn ERC20(token).transferFrom(from, to, amount);\r\n}\r\n\r\n}\r\n\r\ncontract OwnedUpgradeabilityStorage {\r\n\r\n// Current implementation\r\naddress internal _implementation;\r\n\r\n// Owner of the contract\r\naddress private _upgradeabilityOwner;\r\n\r\n/**\r\n * @dev Tells the address of the owner\r\n * @return the address of the owner\r\n */\r\nfunction upgradeabilityOwner() public view returns (address) {\r\nreturn _upgradeabilityOwner;\r\n}\r\n\r\n/**\r\n * @dev Sets the address of the owner\r\n */\r\nfunction setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\r\n_upgradeabilityOwner = newUpgradeabilityOwner;\r\n}\r\n\r\n/**\r\n* @dev Tells the address of the current implementation\r\n* @return address of the current implementation\r\n*/\r\nfunction implementation() public view returns (address) {\r\nreturn _implementation;\r\n}\r\n\r\n/**\r\n* @dev Tells the proxy type (EIP 897)\r\n* @return Proxy type, 2 for forwarding proxy\r\n*/\r\nfunction proxyType() public pure returns (uint256 proxyTypeId) {\r\nreturn 2;\r\n}\r\n}\r\n\r\ncontract AuthenticatedProxy is TokenRecipient, OwnedUpgradeabilityStorage {\r\n\r\n/* Whether initialized. */\r\nbool initialized = false;\r\n\r\n/* Address which owns this proxy. */\r\naddress public user;\r\n\r\n/* Associated registry with contract authentication information. */\r\nProxyRegistry public registry;\r\n\r\n/* Whether access has been revoked. */\r\nbool public revoked;\r\n\r\n/* Delegate call could be used to atomically transfer multiple assets owned by the proxy contract with one order. */\r\nenum HowToCall { Call, DelegateCall }\r\n\r\n/* Event fired when the proxy access is revoked or unrevoked. */\r\nevent Revoked(bool revoked);\r\n\r\n/**\r\n * Initialize an AuthenticatedProxy\r\n *\r\n * @param addrUser Address of user on whose behalf this proxy will act\r\n * @param addrRegistry Address of ProxyRegistry contract which will manage this proxy\r\n */\r\nfunction initialize (address addrUser, ProxyRegistry addrRegistry)\r\npublic\r\n{\r\nrequire(!initialized);\r\ninitialized = true;\r\nuser = addrUser;\r\nregistry = addrRegistry;\r\n}\r\n\r\n/**\r\n * Set the revoked flag (allows a user to revoke ProxyRegistry access)\r\n *\r\n * @dev Can be called by the user only\r\n * @param revoke Whether or not to revoke access\r\n */\r\nfunction setRevoke(bool revoke)\r\npublic\r\n{\r\nrequire(msg.sender == user);\r\nrevoked = revoke;\r\nemit Revoked(revoke);\r\n}\r\n\r\n/**\r\n * Execute a message call from the proxy contract\r\n *\r\n * @dev Can be called by the user, or by a contract authorized by the registry as long as the user has not revoked access\r\n * @param dest Address to which the call will be sent\r\n * @param howToCall Which kind of call to make\r\n * @param calldata Calldata to send\r\n * @return Result of the call (success or failure)\r\n */\r\nfunction proxy(address dest, HowToCall howToCall, bytes calldata)\r\npublic\r\nreturns (bool result)\r\n{\r\nrequire(msg.sender == user || (!revoked && registry.contracts(msg.sender)));\r\nif (howToCall == HowToCall.Call) {\r\nresult = dest.call(calldata);\r\n} else if (howToCall == HowToCall.DelegateCall) {\r\nresult = dest.delegatecall(calldata);\r\n}\r\nreturn result;\r\n}\r\n\r\n/**\r\n * Execute a message call and assert success\r\n *\r\n * @dev Same functionality as `proxy`, just asserts the return value\r\n * @param dest Address to which the call will be sent\r\n * @param howToCall What kind of call to make\r\n * @param calldata Calldata to send\r\n */\r\nfunction proxyAssert(address dest, HowToCall howToCall, bytes calldata)\r\npublic\r\n{\r\nrequire(proxy(dest, howToCall, calldata));\r\n}\r\n\r\n}\r\n\r\ncontract Proxy {\r\n\r\n/**\r\n* @dev Tells the address of the implementation where every call will be delegated.\r\n* @return address of the implementation to which it will be delegated\r\n*/\r\nfunction implementation() public view returns (address);\r\n\r\n/**\r\n* @dev Tells the type of proxy (EIP 897)\r\n* @return Type of proxy, 2 for upgradeable proxy\r\n*/\r\nfunction proxyType() public pure returns (uint256 proxyTypeId);\r\n\r\n/**\r\n* @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n* This function will return whatever the implementation call returns\r\n*/\r\nfunction () payable public {\r\naddress _impl = implementation();\r\nrequire(_impl != address(0));\r\n\r\nassembly {\r\nlet ptr := mload(0x40)\r\ncalldatacopy(ptr, 0, calldatasize)\r\nlet result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\r\nlet size := returndatasize\r\nreturndatacopy(ptr, 0, size)\r\n\r\nswitch result\r\ncase 0 { revert(ptr, size) }\r\ndefault { return(ptr, size) }\r\n}\r\n}\r\n}\r\n\r\ncontract OwnedUpgradeabilityProxy is Proxy, OwnedUpgradeabilityStorage {\r\n/**\r\n* @dev Event to show ownership has been transferred\r\n* @param previousOwner representing the address of the previous owner\r\n* @param newOwner representing the address of the new owner\r\n*/\r\nevent ProxyOwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n/**\r\n* @dev This event will be emitted every time the implementation gets upgraded\r\n* @param implementation representing the address of the upgraded implementation\r\n*/\r\nevent Upgraded(address indexed implementation);\r\n\r\n/**\r\n* @dev Upgrades the implementation address\r\n* @param implementation representing the address of the new implementation to be set\r\n*/\r\nfunction _upgradeTo(address implementation) internal {\r\nrequire(_implementation != implementation);\r\n_implementation = implementation;\r\nemit Upgraded(implementation);\r\n}\r\n\r\n/**\r\n* @dev Throws if called by any account other than the owner.\r\n*/\r\nmodifier onlyProxyOwner() {\r\nrequire(msg.sender == proxyOwner());\r\n_;\r\n}\r\n\r\n/**\r\n * @dev Tells the address of the proxy owner\r\n * @return the address of the proxy owner\r\n */\r\nfunction proxyOwner() public view returns (address) {\r\nreturn upgradeabilityOwner();\r\n}\r\n\r\n/**\r\n * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n * @param newOwner The address to transfer ownership to.\r\n */\r\nfunction transferProxyOwnership(address newOwner) public onlyProxyOwner {\r\nrequire(newOwner != address(0));\r\nemit ProxyOwnershipTransferred(proxyOwner(), newOwner);\r\nsetUpgradeabilityOwner(newOwner);\r\n}\r\n\r\n/**\r\n * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy.\r\n * @param implementation representing the address of the new implementation to be set.\r\n */\r\nfunction upgradeTo(address implementation) public onlyProxyOwner {\r\n_upgradeTo(implementation);\r\n}\r\n\r\n/**\r\n * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy\r\n * and delegatecall the new implementation for initialization.\r\n * @param implementation representing the address of the new implementation to be set.\r\n * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\r\n * signature of the implementation to be called with the needed payload\r\n */\r\nfunction upgradeToAndCall(address implementation, bytes data) payable public onlyProxyOwner {\r\nupgradeTo(implementation);\r\nrequire(address(this).delegatecall(data));\r\n}\r\n}\r\n\r\ncontract OwnableDelegateProxy is OwnedUpgradeabilityProxy {\r\n\r\nconstructor(address owner, address initialImplementation, bytes calldata)\r\npublic\r\n{\r\nsetUpgradeabilityOwner(owner);\r\n_upgradeTo(initialImplementation);\r\nrequire(initialImplementation.delegatecall(calldata));\r\n}\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTransferProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"extradata\",\"type\":\"bytes\"}],\"name\":\"staticCall\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumMakerProtocolFee\",\"type\":\"uint256\"}],\"name\":\"changeMinimumMakerProtocolFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumTakerProtocolFee\",\"type\":\"uint256\"}],\"name\":\"changeMinimumTakerProtocolFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"array\",\"type\":\"bytes\"},{\"name\":\"desired\",\"type\":\"bytes\"},{\"name\":\"mask\",\"type\":\"bytes\"}],\"name\":\"guardedArrayReplace\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTakerProtocolFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"codename\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"testCopyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"arrToCopy\",\"type\":\"bytes\"}],\"name\":\"testCopy\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[7]\"},{\"name\":\"uints\",\"type\":\"uint256[9]\"},{\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"howToCall\",\"type\":\"uint8\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"name\":\"staticExtradata\",\"type\":\"bytes\"}],\"name\":\"calculateCurrentPrice_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newProtocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"changeProtocolFeeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"buyCalldata\",\"type\":\"bytes\"},{\"name\":\"buyReplacementPattern\",\"type\":\"bytes\"},{\"name\":\"sellCalldata\",\"type\":\"bytes\"},{\"name\":\"sellReplacementPattern\",\"type\":\"bytes\"}],\"name\":\"orderCalldataCanMatch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[7]\"},{\"name\":\"uints\",\"type\":\"uint256[9]\"},{\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"howToCall\",\"type\":\"uint8\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"name\":\"staticExtradata\",\"type\":\"bytes\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"validateOrder_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"extra\",\"type\":\"uint256\"},{\"name\":\"listingTime\",\"type\":\"uint256\"},{\"name\":\"expirationTime\",\"type\":\"uint256\"}],\"name\":\"calculateFinalPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protocolFeeRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[7]\"},{\"name\":\"uints\",\"type\":\"uint256[9]\"},{\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"howToCall\",\"type\":\"uint8\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"name\":\"staticExtradata\",\"type\":\"bytes\"}],\"name\":\"hashOrder_\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[14]\"},{\"name\":\"uints\",\"type\":\"uint256[18]\"},{\"name\":\"feeMethodsSidesKindsHowToCalls\",\"type\":\"uint8[8]\"},{\"name\":\"calldataBuy\",\"type\":\"bytes\"},{\"name\":\"calldataSell\",\"type\":\"bytes\"},{\"name\":\"replacementPatternBuy\",\"type\":\"bytes\"},{\"name\":\"replacementPatternSell\",\"type\":\"bytes\"},{\"name\":\"staticExtradataBuy\",\"type\":\"bytes\"},{\"name\":\"staticExtradataSell\",\"type\":\"bytes\"}],\"name\":\"ordersCanMatch_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[7]\"},{\"name\":\"uints\",\"type\":\"uint256[9]\"},{\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"howToCall\",\"type\":\"uint8\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"name\":\"staticExtradata\",\"type\":\"bytes\"},{\"name\":\"orderbookInclusionDesired\",\"type\":\"bool\"}],\"name\":\"approveOrder_\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumMakerProtocolFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[7]\"},{\"name\":\"uints\",\"type\":\"uint256[9]\"},{\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"howToCall\",\"type\":\"uint8\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"name\":\"staticExtradata\",\"type\":\"bytes\"}],\"name\":\"hashToSign_\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelledOrFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[7]\"},{\"name\":\"uints\",\"type\":\"uint256[9]\"},{\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"howToCall\",\"type\":\"uint8\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"name\":\"staticExtradata\",\"type\":\"bytes\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder_\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[14]\"},{\"name\":\"uints\",\"type\":\"uint256[18]\"},{\"name\":\"feeMethodsSidesKindsHowToCalls\",\"type\":\"uint8[8]\"},{\"name\":\"calldataBuy\",\"type\":\"bytes\"},{\"name\":\"calldataSell\",\"type\":\"bytes\"},{\"name\":\"replacementPatternBuy\",\"type\":\"bytes\"},{\"name\":\"replacementPatternSell\",\"type\":\"bytes\"},{\"name\":\"staticExtradataBuy\",\"type\":\"bytes\"},{\"name\":\"staticExtradataSell\",\"type\":\"bytes\"},{\"name\":\"vs\",\"type\":\"uint8[2]\"},{\"name\":\"rssMetadata\",\"type\":\"bytes32[5]\"}],\"name\":\"atomicMatch_\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[7]\"},{\"name\":\"uints\",\"type\":\"uint256[9]\"},{\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"name\":\"side\",\"type\":\"uint8\"},{\"name\":\"saleKind\",\"type\":\"uint8\"},{\"name\":\"howToCall\",\"type\":\"uint8\"},{\"name\":\"calldata\",\"type\":\"bytes\"},{\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"name\":\"staticExtradata\",\"type\":\"bytes\"}],\"name\":\"validateOrderParameters_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVERSE_BASIS_POINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[14]\"},{\"name\":\"uints\",\"type\":\"uint256[18]\"},{\"name\":\"feeMethodsSidesKindsHowToCalls\",\"type\":\"uint8[8]\"},{\"name\":\"calldataBuy\",\"type\":\"bytes\"},{\"name\":\"calldataSell\",\"type\":\"bytes\"},{\"name\":\"replacementPatternBuy\",\"type\":\"bytes\"},{\"name\":\"replacementPatternSell\",\"type\":\"bytes\"},{\"name\":\"staticExtradataBuy\",\"type\":\"bytes\"},{\"name\":\"staticExtradataSell\",\"type\":\"bytes\"}],\"name\":\"calculateMatchPrice_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"approvedOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"registryAddress\",\"type\":\"address\"},{\"name\":\"tokenTransferProxyAddress\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"protocolFeeAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"exchange\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"makerRelayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"takerRelayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"makerProtocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"takerProtocolFee\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"feeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"feeMethod\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"saleKind\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"OrderApprovedPartOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"howToCall\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"calldata\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"replacementPattern\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"staticTarget\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"staticExtradata\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"basePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"extra\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"listingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"salt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"orderbookInclusionDesired\",\"type\":\"bool\"}],\"name\":\"OrderApprovedPartTwo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"sellHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"OrdersMatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "WyvernExchange", "CompilerVersion": "v0.4.23+commit.124ca40d", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006fca36a82b35f99cf80dc49b22935efd2913f9230000000000000000000000001c448e58ee04e156777a5f490abdaac8a2105d590000000000000000000000006267f786bce1985e1e5b21807e3376b2566dfb10000000000000000000000000bbeae421c33cf6f6ced5a9b5b910f77e145048ce", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://07e72847ce32160d5ffb358d1f68c5c5d05f335f03ddfb49ed6b1c4e007c70d7"}