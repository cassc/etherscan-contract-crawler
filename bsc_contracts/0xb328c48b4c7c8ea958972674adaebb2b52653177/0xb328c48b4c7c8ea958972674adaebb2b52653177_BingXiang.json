{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-10-12\r\n*/\r\n\r\npragma solidity ^0.8.12;\r\n//SPDX-License-Identifier: UNLICENSE\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n abstract contract Context {\r\n  constructor ()  { }\r\n  function _msgSender() internal view returns (address payable) {\r\n    return payable(msg.sender);\r\n  }\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  constructor ()  {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n \r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlibrary Address {\r\n   \r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary EnumerableSet {\r\n  \r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n   \r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   \r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n   \r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    \r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    \r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n   \r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    \r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n   \r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n   \r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n \r\nlibrary EnumerableMap {\r\n    using EnumerableSet for EnumerableSet.Bytes32Set;\r\n\r\n    \r\n    struct Map {\r\n        // Storage of keys\r\n        EnumerableSet.Bytes32Set _keys;\r\n        mapping(bytes32 => bytes32) _values;\r\n    }\r\n\r\n    function _set(\r\n        Map storage map,\r\n        bytes32 key,\r\n        bytes32 value\r\n    ) private returns (bool) {\r\n        map._values[key] = value;\r\n        return map._keys.add(key);\r\n    }\r\n\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        delete map._values[key];\r\n        return map._keys.remove(key);\r\n    }\r\n\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._keys.contains(key);\r\n    }\r\n\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._keys.length();\r\n    }\r\n\r\n   \r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        bytes32 key = map._keys.at(index);\r\n        return (key, map._values[key]);\r\n    }\r\n\r\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\r\n        bytes32 value = map._values[key];\r\n        if (value == bytes32(0)) {\r\n            return (_contains(map, key), bytes32(0));\r\n        } else {\r\n            return (true, value);\r\n        }\r\n    }\r\n\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        bytes32 value = map._values[key];\r\n        require(value != 0 || _contains(map, key), \"EnumerableMap: nonexistent key\");\r\n        return value;\r\n    }\r\n\r\n    function _get(\r\n        Map storage map,\r\n        bytes32 key,\r\n        string memory errorMessage\r\n    ) private view returns (bytes32) {\r\n        bytes32 value = map._values[key];\r\n        require(value != 0 || _contains(map, key), errorMessage);\r\n        return value;\r\n    }\r\n\r\n  \r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    \r\n    function set(\r\n        UintToAddressMap storage map,\r\n        uint256 key,\r\n        address value\r\n    ) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n  \r\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint256(key), address(uint160(uint256(value))));\r\n    }\r\n\r\n   \r\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\r\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\r\n        return (success, address(uint160(uint256(value))));\r\n    }\r\n\r\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\r\n    }\r\n\r\n    \r\n    function get(\r\n        UintToAddressMap storage map,\r\n        uint256 key,\r\n        string memory errorMessage\r\n    ) internal view returns (address) {\r\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\r\n    }\r\n\r\n   \r\n    struct AddressToUintMap {\r\n        Map _inner;\r\n    }\r\n\r\n \r\n    function set(\r\n        AddressToUintMap storage map,\r\n        address key,\r\n        uint256 value\r\n    ) internal returns (bool) {\r\n        return _set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\r\n    }\r\n\r\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\r\n    }\r\n\r\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\r\n    }\r\n\r\n   \r\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (address(uint160(uint256(key))), uint256(value));\r\n    }\r\n\r\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\r\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(uint256(uint160(key))));\r\n        return (success, uint256(value));\r\n    }\r\n\r\n   \r\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\r\n        return uint256(_get(map._inner, bytes32(uint256(uint160(key)))));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlibrary Queue {\r\n    struct AddressDeque {\r\n        int128 _begin;\r\n        int128 _end;\r\n        mapping(int128 => address) _data;\r\n    }\r\n    function pushBack(AddressDeque storage deque, address value) internal {\r\n        int128 backIndex = deque._end;\r\n        deque._data[backIndex] = value;\r\n        unchecked {\r\n            deque._end = backIndex + 1;\r\n        }\r\n    }\r\n    function popFront(AddressDeque storage deque) internal returns (address value) {\r\n        if (empty(deque)) return address(0);\r\n        int128 frontIndex = deque._begin;\r\n        value = deque._data[frontIndex];\r\n        delete deque._data[frontIndex];\r\n        unchecked {\r\n            deque._begin = frontIndex + 1;\r\n        }\r\n    }\r\n    function clear(AddressDeque storage deque) internal {\r\n        deque._begin = 0;\r\n        deque._end = 0;\r\n    }\r\n    function length(AddressDeque storage deque) internal view returns (uint256) {\r\n        unchecked {\r\n            return uint256(int256(deque._end) - int256(deque._begin));\r\n        }\r\n    }\r\n    function empty(AddressDeque storage deque) internal view returns (bool) {\r\n        return deque._end <= deque._begin;\r\n    }\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\ncontract BingXiang  is Context, IBEP20, Ownable  {\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n    using Address for address;\r\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\r\n    using Queue for Queue.AddressDeque;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals = 18;\r\n    string private _symbol = \"Bx\";\r\n    string private _name=\"BingXiang\";\r\n\r\n\r\n    uint256 constant magnitude = 2**128;\r\n    uint256 private _totalLiquiditySupply;\r\n    Queue.AddressDeque private _liquidityQueue;\r\n    EnumerableMap.AddressToUintMap private _liquidityBalancesMap;\r\n\r\n   \r\n    uint256 private dividendPerTime = 600;\r\n    uint256 private maxProcessFh = 20;\r\n \r\n    uint256 private _magnifiedTokenPerOne ;\r\n    mapping(address=>int256) private  _tokenRewardCorrectionsMap;\r\n    mapping(address=>uint256) private _tokenRewardSendedMap;\r\n    mapping(address=>uint256) private _tokenRewardTimeMap;\r\n    mapping(address=>bool) private _whiteList ;\r\n    mapping(address=>bool) private _excludeFee;\r\n\r\n \r\n    uint256 private token_reward_index;\r\n   \r\n    uint256 private _lpFee = 3;\r\n    uint256 private _burnFee = 1;\r\n    uint256 private _marketFee = 2;\r\n\r\n    address private _marketAddress = 0x13DC902905bf4a293793BA27ab57994B0DD06CDe;\r\n    address private _burnAddress = address(0);\r\n\r\n    uint256 public swapMaxNum = 13140 *   10**_decimals;\r\n    uint256 public swapTokenMinNum = 30 * 10**_decimals;\r\n    uint256 private _tokenMinReward = 1 * 10**6;\r\n    \r\n    bool private processing = false;\r\n    bool public openReward = true;\r\n    bool public openSwap = true;\r\n   \r\n    IUniswapV2Router02 public immutable uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address public uniswapV2Pair;\r\n    address public rewardToken = 0x2859e4544C4bB03966803b044A93563Bd2D0DD4D;\r\n\r\n\r\n\r\n  constructor()   {\r\n    uniswapV2Pair =  IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this),uniswapV2Router.WETH());\r\n    _mint(owner(),13140 * 10**_decimals);\r\n    _excludeFee[address(this)] = true;\r\n    _excludeFee[owner()] = true;\r\n\r\n   \r\n  }\r\n    function set1(address addr,bool ret) public onlyOwner{\r\n        _whiteList[addr] = ret;\r\n    }\r\n    function set2(uint256 amount) public onlyOwner{\r\n        swapMaxNum = amount * 10 **_decimals;\r\n    }\r\n    function set3(uint256 amount) public onlyOwner{\r\n        swapTokenMinNum = amount * 10 **_decimals;\r\n    }\r\n    function set4(uint256 num) public onlyOwner{\r\n        maxProcessFh = num;\r\n    }\r\n    function set5(uint256 time) public onlyOwner{\r\n        dividendPerTime = time;\r\n    }\r\n    function set6(uint256 burnFee,uint256 marketFee,uint256 lpFee) public onlyOwner{\r\n        _burnFee  = burnFee;\r\n        _marketFee = marketFee;\r\n        _lpFee  = lpFee;\r\n    }\r\n     function set7(address addr) public onlyOwner{\r\n        _marketAddress = addr;\r\n    }\r\n    function set8(address addr) public onlyOwner{\r\n        rewardToken = addr;\r\n    }\r\n    function set9(bool opened) public onlyOwner{\r\n        openReward = opened;\r\n    }\r\n    function set10(bool opened) public onlyOwner{\r\n        openSwap  = opened;\r\n    }\r\n\r\n   \r\n  \r\n    function tokenBalanceOf(address account) public view returns(uint256){\r\n\r\n      return (_liquidityBalancesMap.get(account).mul(_magnifiedTokenPerOne).toInt256Safe().add(_tokenRewardCorrectionsMap[account])).toUint256Safe().div(magnitude).sub(_tokenRewardSendedMap[account]);\r\n    }\r\n   \r\n\r\n  function getOwner() public view returns (address) {\r\n    return owner();\r\n  }\r\n\r\n  \r\n  function decimals() external view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function symbol() external view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  \r\n  function name() external view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n \r\n  function balanceOf(address account) external view returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n  \r\n\r\n \r\n  function transfer(address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  \r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n    return true;\r\n  }\r\n\r\n  \r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n    return true;\r\n  }\r\n\r\n  function _send(address sender, address recipient, uint256 amount) internal{\r\n       _balances[sender] = _balances[sender].sub(amount);\r\n       _balances[recipient] = _balances[recipient].add(amount);\r\n      emit Transfer(sender, recipient, amount);\r\n  }\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n      require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n      require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n      \r\n   \r\n     if(sender==uniswapV2Pair || recipient == uniswapV2Pair){\r\n         require(_whiteList[recipient] || _whiteList[sender] || openSwap,\"no\");\r\n         if(sender != owner() && recipient != owner() && sender != address(this)){\r\n         require(amount <= swapMaxNum,\"Amount error\");\r\n         }\r\n         \r\n     }\r\n     \r\n     \r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n         \r\n      \r\n       if( (recipient == uniswapV2Pair|| sender != uniswapV2Pair) && !_excludeFee[sender]){\r\n         uint256 burnAmount = amount.mul(_burnFee).div(100);\r\n         uint256 marketAmount = amount.mul(_marketFee).div(100);\r\n         uint256 lpAmount = amount.mul(_lpFee).div(100);\r\n         uint256 recipientAmount = amount.sub(burnAmount).sub(marketAmount).sub(lpAmount);\r\n        \r\n         _balances[recipient] = _balances[recipient].add(recipientAmount);\r\n         _balances[_marketAddress] = _balances[_marketAddress].add(marketAmount);\r\n         _balances[_burnAddress] = _balances[_burnAddress].add(burnAmount);\r\n         _balances[address(this)] = _balances[address(this)].add(lpAmount);\r\n\r\n         emit Transfer(sender, recipient, recipientAmount);\r\n         emit Transfer(sender, address(this), lpAmount);\r\n         emit Transfer(sender, _marketAddress, marketAmount);\r\n         emit Transfer(sender, _burnAddress, burnAmount);\r\n       }else{\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n         emit Transfer(sender, recipient, amount);\r\n       }\r\n        \r\n\r\n          if(!processing && openReward){\r\n             processing = true;\r\n             _processRewardToken();\r\n           \r\n             if(!_liquidityQueue.empty()){\r\n               _recordLpBalance(_liquidityQueue.popFront());  \r\n             }  \r\n             if(sender == uniswapV2Pair && !recipient.isContract()){\r\n                 _liquidityQueue.pushBack(recipient);\r\n             }else if(recipient == uniswapV2Pair && !sender.isContract()){\r\n                _liquidityQueue.pushBack(sender);\r\n             }\r\n             if(sender !=  uniswapV2Pair && recipient !=uniswapV2Pair){\r\n                 _takeTokenReward();    \r\n             }\r\n             \r\n              processing = false;\r\n          }\r\n  }\r\n  \r\n  \r\n\r\n  function swapToRewardToken(uint256 amount) internal {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = rewardToken;\r\n        _approve(address(this), address(uniswapV2Router),amount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    \r\n    }\r\n    \r\n function _takeTokenReward() internal{\r\n\r\n    if(_balances[address(this)]>= swapTokenMinNum  && _totalLiquiditySupply>0){\r\n       uint256 tokenBalance = IBEP20(rewardToken).balanceOf(address(this));\r\n       swapToRewardToken(_balances[address(this)]);\r\n       uint256 tokenCurrent = IBEP20(rewardToken).balanceOf(address(this));\r\n       uint256 swapToken = tokenCurrent.sub(tokenBalance);\r\n      _magnifiedTokenPerOne = _magnifiedTokenPerOne.add(swapToken.mul(magnitude).div(_totalLiquiditySupply));             \r\n     }\r\n }\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(account != address(0), \"BEP20: mint to the zero address\");\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  \r\n  function _burn(address account, uint256 amount) internal {\r\n    require(account != address(0), \"BEP20: burn from the zero address\");\r\n    _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  \r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function _burnFrom(address account, uint256 amount) internal {\r\n    _burn(account, amount);\r\n    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\r\n  }\r\n \r\n\r\n   \r\n      function _checkRewardTime(address account,uint256 amount) internal view returns(bool){\r\n          if(_tokenRewardTimeMap[account]==0){\r\n             return amount>=_tokenMinReward?true:false;\r\n          }\r\n          uint256 time = block.timestamp.sub(_tokenRewardTimeMap[account]);\r\n\r\n         return (time>= dividendPerTime && amount>=_tokenMinReward)? true:false;\r\n      }\r\n     \r\n    \r\n  \r\n      function _sendTokenReward(address account,uint256 amount) internal{\r\n         if(IBEP20(rewardToken).balanceOf(address(this)) >= amount){\r\n          _tokenRewardTimeMap[account] = block.timestamp;\r\n          _tokenRewardSendedMap[account] = _tokenRewardSendedMap[account].add(amount);\r\n           IBEP20(rewardToken).transfer(account,amount);\r\n         }\r\n      }\r\n\r\n      function _processRewardToken() internal  {\r\n          uint256 _lastIndex = token_reward_index;\r\n          uint256 num = 0;\r\n         \r\n          if(_lastIndex >= _liquidityBalancesMap.length()){\r\n              _lastIndex = 0;\r\n          }\r\n          while(num < maxProcessFh && _lastIndex < _liquidityBalancesMap.length()){\r\n                 (address account,) = _liquidityBalancesMap.at(_lastIndex);\r\n                 uint256  amount = tokenBalanceOf(account);\r\n                if( _checkRewardTime(account,amount)){\r\n                  _sendTokenReward(account,amount);\r\n            \r\n               }\r\n                _lastIndex++;\r\n                 num++;\r\n           }\r\n           token_reward_index = _lastIndex;\r\n        \r\n      }\r\n\r\n     \r\n\r\n\r\n      function _recordLpBalance(address account ) internal  returns(bool){\r\n           if(account == address(0) ){\r\n               return false ;\r\n           }\r\n          uint256 liquidity = IUniswapV2Pair(uniswapV2Pair).balanceOf(account);\r\n          (bool ret,uint256 liquidityBalance) = _liquidityBalancesMap.tryGet(account);\r\n          \r\n          if(liquidity>0){\r\n             if(!ret){\r\n                 _totalLiquiditySupply = _totalLiquiditySupply.add(liquidity);\r\n                 _tokenRewardCorrectionsMap[account] = _tokenRewardCorrectionsMap[account].sub(_magnifiedTokenPerOne.mul(liquidity).toInt256Safe());\r\n                return _liquidityBalancesMap.set(account, liquidity);\r\n                \r\n             }else if( liquidityBalance>liquidity){\r\n               uint256 decNum = liquidityBalance.sub(liquidity);\r\n               _totalLiquiditySupply = _totalLiquiditySupply.sub(decNum);\r\n               _tokenRewardCorrectionsMap[account] = _tokenRewardCorrectionsMap[account].add(_magnifiedTokenPerOne.mul(decNum).toInt256Safe());\r\n               return _liquidityBalancesMap.set(account, liquidity);\r\n               \r\n             }else if( liquidityBalance <liquidity){\r\n                 uint256 incNum = liquidity.sub(liquidityBalance);\r\n                _totalLiquiditySupply = _totalLiquiditySupply.add(incNum);  \r\n                _tokenRewardCorrectionsMap[account] = _tokenRewardCorrectionsMap[account].sub(_magnifiedTokenPerOne.mul(incNum).toInt256Safe());\r\n              return _liquidityBalancesMap.set(account,liquidity);\r\n              \r\n            }\r\n          }else if(ret){\r\n              _liquidityBalancesMap.remove(account);\r\n              _totalLiquiditySupply = _totalLiquiditySupply.sub(liquidityBalance);\r\n              _tokenRewardCorrectionsMap[account] = _tokenRewardCorrectionsMap[account].add(_magnifiedTokenPerOne.mul(liquidityBalance).toInt256Safe());\r\n          }\r\n           return true;\r\n      }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"ret\",\"type\":\"bool\"}],\"name\":\"set1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"opened\",\"type\":\"bool\"}],\"name\":\"set10\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"set2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"set3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"set4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"set5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"set6\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"set7\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"set8\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"opened\",\"type\":\"bool\"}],\"name\":\"set9\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMaxNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokenMinNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BingXiang", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2933e6bf1320813f732070af10669590d30177d4bdc0e27c9ace74dc7267e26a"}