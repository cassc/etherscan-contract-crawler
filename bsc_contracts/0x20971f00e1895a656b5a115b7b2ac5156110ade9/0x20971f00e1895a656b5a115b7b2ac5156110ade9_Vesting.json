{"SourceCode": "// File: Ves.sol\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-01-17\r\n*/\r\n\r\n// File: gist-71572af562f01852a1e328dba89471fe/skippy/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: gist-71572af562f01852a1e328dba89471fe/skippy/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: gist-71572af562f01852a1e328dba89471fe/Lockness/vesting-audit.sol\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract Vesting {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n\r\n    address public owner;\r\n    uint public startDate;\r\n\r\n    uint day = 24 * 60 * 60;\r\n\r\n    event TokenWithdraw(address indexed buyer, uint value);\r\n\r\n    mapping(address => InvestorDetails) public Investors;\r\n\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, 'Owner only function');\r\n        _;\r\n    }\r\n\r\n    uint public seedStartDate;\r\n    uint public privateStartDate;\r\n    uint public publicStartDate;\r\n\r\n    uint public seedLockEndDate;\r\n    uint public privateLockEndDate;\r\n    uint public publicLockEndDate;\r\n\r\n    uint public seedVestingEndDate;\r\n    uint public privateVestingEndDate;\r\n    uint public publicVestingEndDate;\r\n   \r\n    receive() external payable {\r\n    }\r\n   \r\n    constructor(address _tokenAddress, uint _seedStartDate, uint _privateStartDate, uint _publicStartDate ) {\r\n        require(_tokenAddress != address(0));\r\n        token = IERC20(_tokenAddress);\r\n        owner = msg.sender;\r\n        seedStartDate = _seedStartDate;\r\n        privateStartDate = _privateStartDate;\r\n        publicStartDate = _publicStartDate;\r\n\r\n\r\n        seedLockEndDate = seedStartDate + 90 days;\r\n        privateLockEndDate = privateStartDate + 30 days;\r\n        publicLockEndDate = publicStartDate + 30 days;\r\n\r\n        seedVestingEndDate = seedLockEndDate + 270 days;\r\n        privateVestingEndDate = privateLockEndDate + 270 days;\r\n        publicVestingEndDate = publicLockEndDate + 90 days;\r\n    }\r\n    \r\n    \r\n    /* Withdraw the contract's BNB balance to owner wallet*/\r\n    function extractBNB() public onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function getInvestorDetails(address _addr) public view returns(InvestorDetails memory){\r\n        return Investors[_addr];\r\n    }\r\n\r\n    \r\n    function getContractTokenBalance() public view returns(uint) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n    \r\n    \r\n    /* \r\n        Transfer the remining token to different wallet. \r\n        Once the ICO is completed and if there is any remining tokens it can be transfered other wallets.\r\n    */\r\n    function transferToken(address _addr, uint value) public onlyOwner {\r\n        require(value <= token.balanceOf(address(this)), 'Insufficient balance to withdraw');\r\n        token.transfer(_addr, value);\r\n    }\r\n\r\n    /* Utility function for testing. The token address used in this ICO contract can be changed. */\r\n    function setTokenAddress(address _addr) public onlyOwner {\r\n        token = IERC20(_addr);\r\n    }\r\n\r\n    function setStartDate(uint _value) public onlyOwner {\r\n        startDate = _value;\r\n    }\r\n\r\n    struct Investor {\r\n        address account;\r\n        uint amount;\r\n        uint8 saleType;\r\n    }\r\n\r\n    struct InvestorDetails {\r\n        uint totalBalance;\r\n        uint timeDifference;\r\n        uint lastVestedTime;\r\n        uint reminingUnitsToVest;\r\n        uint tokensPerUnit;\r\n        uint vestingBalance;\r\n        uint investorType;\r\n        uint initialAmount;\r\n        bool isInitialAmountClaimed;\r\n    }\r\n\r\n    Investor[] allInvestors;\r\n\r\n\r\n    function addInvestorDetails(Investor[] memory investorArray) public onlyOwner {\r\n        require(investorArray.length <= 25, \"Array length exceeding 25, You might probably run out of gas\");\r\n        for(uint16 i = 0; i < investorArray.length; i++) {\r\n            InvestorDetails memory investor;\r\n            uint8 saleType = investorArray[i].saleType;\r\n            investor.totalBalance = investorArray[i].amount.mul(10 ** 18);\r\n            investor.investorType = investorArray[i].saleType;\r\n            investor.vestingBalance = investor.totalBalance;\r\n\r\n            if(saleType == 1) {\r\n                investor.reminingUnitsToVest = 270;\r\n                investor.initialAmount = investor.totalBalance.mul(5).div(100);\r\n                investor.tokensPerUnit = investor.totalBalance.sub(investor.initialAmount).div(270);\r\n            }\r\n\r\n            if(saleType == 2) {\r\n                investor.reminingUnitsToVest = 270;\r\n                investor.initialAmount = investor.totalBalance.mul(10).div(100);\r\n                investor.tokensPerUnit = investor.totalBalance.sub(investor.initialAmount).div(270);\r\n            }\r\n\r\n            if(saleType == 3) {\r\n                investor.reminingUnitsToVest = 90;\r\n                investor.initialAmount = investor.totalBalance.mul(30).div(100);\r\n                investor.tokensPerUnit = investor.totalBalance.sub(investor.initialAmount).div(90);\r\n            }\r\n\r\n            Investors[investorArray[i].account] = investor; \r\n\r\n            allInvestors.push(investorArray[i]);\r\n        }\r\n    }\r\n\r\n    function getAllInvestors() public view returns(Investor[] memory) {\r\n        return allInvestors;\r\n    }\r\n\r\n    uint public activeLockDate;\r\n    \r\n    function withdrawTokens() public {\r\n        //InvestorDetails memory investor = Investors[msg.sender];\r\n        // activeLockDate = seedLockEndDate;\r\n        if(Investors[msg.sender].isInitialAmountClaimed) {\r\n            if(Investors[msg.sender].investorType == 1) {\r\n                require(block.timestamp >= seedLockEndDate, \"Wait untill locking period to over!\");\r\n                activeLockDate = seedLockEndDate;\r\n            }\r\n\r\n            else if(Investors[msg.sender].investorType == 2) {\r\n                require(block.timestamp >= privateLockEndDate, \"Wait\");\r\n                activeLockDate = privateLockEndDate;\r\n            }\r\n\r\n            else if(Investors[msg.sender].investorType == 3) {\r\n                require(block.timestamp >= publicLockEndDate, \"Wait\");\r\n                activeLockDate = publicLockEndDate;\r\n            } else {\r\n                revert(\"Not an investor!\");\r\n            }\r\n            \r\n            /* Time difference to calculate the interval between now and last vested time. */\r\n            uint timeDifference;\r\n            if(Investors[msg.sender].lastVestedTime == 0) {\r\n                require(activeLockDate > 0, \"Active lockdate was zero\");\r\n                timeDifference = block.timestamp.sub(activeLockDate, \"Sub error timedifference\");\r\n            } else {\r\n                timeDifference = block.timestamp.sub(Investors[msg.sender].lastVestedTime, \"sub error lastvested time difference\");\r\n            }\r\n            \r\n            /* Number of units that can be vested between the time interval */\r\n            uint numberOfUnitsCanBeVested = timeDifference.div(day, \"Div error no.of units can be vested\");\r\n            \r\n            /* Remining units to vest should be greater than 0 */\r\n            require(Investors[msg.sender].reminingUnitsToVest > 0, \"All units vested!\");\r\n            \r\n            /* Number of units can be vested should be more than 0 */\r\n            require(numberOfUnitsCanBeVested > 0, \"Please wait till next vesting period!\");\r\n\r\n            if(numberOfUnitsCanBeVested >= Investors[msg.sender].reminingUnitsToVest) {\r\n                numberOfUnitsCanBeVested = Investors[msg.sender].reminingUnitsToVest;\r\n            }\r\n            \r\n            /*\r\n                1. Calculate number of tokens to transfer\r\n                2. Update the investor details\r\n                3. Transfer the tokens to the wallet\r\n            */\r\n            \r\n            uint tokenToTransfer = numberOfUnitsCanBeVested * Investors[msg.sender].tokensPerUnit;\r\n            uint reminingUnits = Investors[msg.sender].reminingUnitsToVest;\r\n            uint balance = Investors[msg.sender].vestingBalance;\r\n            Investors[msg.sender].reminingUnitsToVest -= numberOfUnitsCanBeVested;\r\n            Investors[msg.sender].vestingBalance -= numberOfUnitsCanBeVested * Investors[msg.sender].tokensPerUnit;\r\n            Investors[msg.sender].lastVestedTime = block.timestamp;\r\n            if(numberOfUnitsCanBeVested == reminingUnits) { \r\n                token.transfer(msg.sender, balance);\r\n                emit TokenWithdraw(msg.sender, balance);\r\n            } else {\r\n                token.transfer(msg.sender, tokenToTransfer);\r\n                emit TokenWithdraw(msg.sender, tokenToTransfer);\r\n            }  \r\n        }\r\n        else {\r\n            require(!Investors[msg.sender].isInitialAmountClaimed, \"Amount already withdrawn!\");\r\n            Investors[msg.sender].vestingBalance -= Investors[msg.sender].initialAmount;\r\n            Investors[msg.sender].isInitialAmountClaimed = true;\r\n            uint amount = Investors[msg.sender].initialAmount;\r\n            Investors[msg.sender].initialAmount = 0;\r\n            token.transfer(msg.sender, amount);\r\n            emit TokenWithdraw(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function setDay(uint _value) public onlyOwner {\r\n        day = _value;\r\n    }\r\n\r\n    function deleteWhitelistedAddress(address _addr) public onlyOwner {\r\n        delete Investors[_addr];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_seedStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_privateStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicStartDate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Investors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDifference\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastVestedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reminingUnitsToVest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investorType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitialAmountClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeLockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"saleType\",\"type\":\"uint8\"}],\"internalType\":\"struct Vesting.Investor[]\",\"name\":\"investorArray\",\"type\":\"tuple[]\"}],\"name\":\"addInvestorDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"deleteWhitelistedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllInvestors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"saleType\",\"type\":\"uint8\"}],\"internalType\":\"struct Vesting.Investor[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getInvestorDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDifference\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastVestedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reminingUnitsToVest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investorType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitialAmountClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct Vesting.InvestorDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateLockEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicLockEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedLockEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStartDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Vesting", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000031acfce536b824ad0739e8d7b27cefaa4b8e46730000000000000000000000000000000000000000000000000000000061e592800000000000000000000000000000000000000000000000000000000061e592800000000000000000000000000000000000000000000000000000000061e59280", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d636d23a94fd8d39cdd405e7a3348415217e4cbd0ab20c01a1159c7fd74b370"}