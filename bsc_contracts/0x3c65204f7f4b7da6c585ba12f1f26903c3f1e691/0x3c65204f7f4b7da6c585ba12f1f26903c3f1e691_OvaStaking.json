{"SourceCode": "pragma solidity ^0.5.16;\r\n\r\n/**\r\n * @title ERC 20 Token Standard Interface\r\n *  https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface EIP20Interface {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n      * @notice Get the total number of tokens in circulation\r\n      * @return The supply of tokens\r\n      */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Gets the balance of the specified address\r\n     * @param owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      * @return Whether or not the transfer succeeded\r\n      */\r\n    function transfer(address dst, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Transfer `amount` tokens from `src` to `dst`\r\n      * @param src The address of the source account\r\n      * @param dst The address of the destination account\r\n      * @param amount The number of tokens to transfer\r\n      * @return Whether or not the transfer succeeded\r\n      */\r\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Approve `spender` to transfer up to `amount` from `src`\r\n      * @dev This will overwrite the approval amount for `spender`\r\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @param amount The number of tokens that are approved (-1 means infinite)\r\n      * @return Whether or not the approval succeeded\r\n      */\r\n    function approve(address spender, uint256 amount) external returns (bool success);\r\n\r\n    /**\r\n      * @notice Get the current allowance from `owner` for `spender`\r\n      * @param owner The address of the account which owns the tokens to be spent\r\n      * @param spender The address of the account which may transfer tokens\r\n      * @return The number of tokens allowed to be spent (-1 means infinite)\r\n      */\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction underflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title OVA's Staking Contract\r\n * @author OVA\r\n */\r\ncontract OvaStaking {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Emitted when OVA is staked  \r\n    event OvaStaked(address account, uint amount);\r\n\r\n    /// @notice Emitted when OVA is withdrawn \r\n    event OvaWithdrawn(address account, uint amount);\r\n\r\n    /// @notice Emitted when OVA is claimed \r\n    event OvaClaimed(address account, uint amount);\r\n\r\n    // @notice The rate every day. \r\n    uint256 public dayOvaRate; \r\n\r\n    // @notice Owner address\r\n    address payable public owner;\r\n\r\n    // @notice OVA token\r\n    EIP20Interface ova;\r\n\r\n    // @notice A checkpoint for staking\r\n    struct Checkpoint {\r\n        uint256 deposit_time; //last check time\r\n        uint256 total_staked;\r\n        uint256 bonus_unclaimed;\r\n    }\r\n\r\n    // @notice staking struct of every account\r\n    mapping (address => Checkpoint) internal stakings;\r\n\r\n    // @notice total stake amount\r\n    uint256 public total_deposited;\r\n\r\n    constructor(address ovaAddress) public {\r\n        owner = msg.sender;\r\n\tdayOvaRate = 1e16;\r\n\tova = EIP20Interface(ovaAddress);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Stake OVA token to contract \r\n     * @param amount The amount of address to be staked \r\n     * @return Success indicator for whether staked \r\n     */\r\n    function stake(uint256 amount) public returns (bool) {\r\n\trequire(amount > 0, \"No zero.\");\r\n\trequire(amount <= ova.balanceOf(msg.sender), \"Insufficient OVA token.\");\r\n\r\n\tCheckpoint storage cp = stakings[msg.sender];\r\n\r\n\tova.transferFrom(msg.sender, address(this), amount);\r\n\r\n\tif(cp.deposit_time > 0)\r\n\t{\r\n\t\tuint256 bonus = block.timestamp.sub(cp.deposit_time).mul(cp.total_staked).mul(dayOvaRate).div(1e18).div(86400);\r\n\t\tcp.bonus_unclaimed = cp.bonus_unclaimed.add(bonus);\r\n\t\tcp.total_staked = cp.total_staked.add(amount);\r\n\t\tcp.deposit_time = block.timestamp;\r\n\t}else\r\n\t{\r\n\t\tcp.total_staked = amount;\r\n\t\tcp.deposit_time = block.timestamp;\r\n\t}\r\n    total_deposited = total_deposited.add(amount);\r\n\temit OvaStaked(msg.sender, amount);\r\n\r\n\treturn true;\r\n    }\r\n\r\n    /**\r\n     * @notice withdraw all OVA token staked in contract \r\n     * @return Success indicator for success \r\n     */\r\n    function withdraw() public returns (bool) {\r\n\r\n\tCheckpoint storage cp = stakings[msg.sender];\r\n\r\n\tuint256 amount = cp.total_staked;\r\n\r\n\tuint256 bonus = block.timestamp.sub(cp.deposit_time).mul(cp.total_staked).mul(dayOvaRate).div(1e18).div(86400);\r\n\tcp.bonus_unclaimed = cp.bonus_unclaimed.add(bonus);\r\n\tcp.total_staked = 0;\r\n\tcp.deposit_time = 0;\r\n    total_deposited = total_deposited.sub(amount);\r\n\tova.transfer(msg.sender, amount);\r\n\r\n\temit OvaWithdrawn(msg.sender, amount); \r\n\r\n\treturn true;\r\n    }\r\n\r\n    /**\r\n     * @notice claim all OVA token bonus in contract \r\n     * @return Success indicator for success \r\n     */\r\n    function claim() public returns (bool) {\r\n\r\n\tCheckpoint storage cp = stakings[msg.sender];\r\n\r\n\tuint256 amount = cp.bonus_unclaimed;\r\n\tif(cp.deposit_time > 0)\r\n\t{\r\n\t\tuint256 bonus = block.timestamp.sub(cp.deposit_time).mul(cp.total_staked).mul(dayOvaRate).div(1e18).div(86400);\r\n\t\tamount = amount.add(bonus);\r\n\t\tcp.bonus_unclaimed = 0; \r\n\t\tcp.deposit_time = block.timestamp;\r\n\t}else\r\n\t{\r\n\t\t//has beed withdrawn\r\n\t\tcp.bonus_unclaimed = 0;\r\n\t}\r\n\r\n\tova.transfer(msg.sender, amount);\r\n\r\n\temit OvaClaimed (msg.sender, amount); \r\n\r\n\treturn true;\r\n    }\r\n\r\n    // set the dayrate\r\n    function setDayOvaRate(uint256 dayRateMantissa) public\r\n    {\r\n\t    require(msg.sender == owner, \"only owner can set this value.\");\r\n\t    dayOvaRate = dayRateMantissa;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the balance of OVA an account has staked\r\n     * @param account The address of the account \r\n     * @return balance of OVA \r\n     */\r\n    function getStakingBalance(address account) external view returns (uint256) {\r\n\tCheckpoint memory cp = stakings[account];\r\n        return cp.total_staked;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the unclaimed bonus OVA of staking \r\n     * @param account The address of the account \r\n     * @return The amount of unclaimed OVA \r\n     */\r\n    function getUnclaimedOva(address account) public view returns (uint256) {\r\n\tCheckpoint memory cp = stakings[account];\r\n\r\n\tuint256 amount = cp.bonus_unclaimed;\r\n\tif(cp.deposit_time > 0)\r\n\t{\r\n\t\tuint256 bonus = block.timestamp.sub(cp.deposit_time).mul(cp.total_staked).mul(dayOvaRate).div(1e18).div(86400);\r\n\t\tamount = amount.add(bonus);\r\n\t}\r\n\treturn amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Return the APY of staking \r\n     * @return The APY multiplied 1e18\r\n     */\r\n    function getStakingAPYMantissa() public view returns (uint256) {\r\n        return dayOvaRate.mul(25);\r\n    }\r\n\r\n    /**\r\n     * @notice Return the address of the OVA token\r\n     * @return The address of OVA \r\n     */\r\n    function getOvaAddress() public view returns (address) {\r\n        return address(ova);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ovaAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OvaClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OvaStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OvaWithdrawn\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayOvaRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOvaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakingAPYMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUnclaimedOva\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayRateMantissa\",\"type\":\"uint256\"}],\"name\":\"setDayOvaRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_deposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OvaStaking", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000086cbdcf69e7e1b4e99d3393f751e0de826524b75", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c4e303055afc4f908ba331a9943a04a3d08f2cdbddd88c0e7322df36259c7d04"}